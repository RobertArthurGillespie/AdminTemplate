// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (
  modules,
  entry,
  mainEntry,
  parcelRequireName,
  externals,
  distDir,
  publicUrl,
  devServer
) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var importMap = previousRequire.i || {};
  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        if (externals[name]) {
          return externals[name];
        }
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.require = nodeRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.distDir = distDir;
  newRequire.publicUrl = publicUrl;
  newRequire.devServer = devServer;
  newRequire.i = importMap;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  // Only insert newRequire.load when it is actually used.
  // The code in this file is linted against ES5, so dynamic import is not allowed.
  function $parcel$resolve(url) {  url = importMap[url] || url;  return import.meta.resolve(distDir + url);}newRequire.resolve = $parcel$resolve;

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });
    }
  }
})({"77jXk":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SERVER_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "bfafbf05f5fcf713";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "a1bfb1c7217b86e0";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_SERVER_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ , bundleNotFound = false;
function getHostname() {
    return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);
}
// eslint-disable-next-line no-redeclare
let WebSocket = globalThis.WebSocket;
if (!WebSocket && typeof module.bundle.root === 'function') try {
    // eslint-disable-next-line no-global-assign
    WebSocket = module.bundle.root('ws');
} catch  {
// ignore.
}
var hostname = getHostname();
var port = getPort();
var protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && ![
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
].includes(hostname) ? 'wss' : 'ws';
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if (!parent || !parent.isParcelRequire) {
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        // If we're running in the dev server's node runner, listen for messages on the parent port.
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) {
            parentPort.on('message', async (message)=>{
                try {
                    await handleMessage(message);
                    parentPort.postMessage('updated');
                } catch  {
                    parentPort.postMessage('restart');
                }
            });
            // After the bundle has finished running, notify the dev server that the HMR update is complete.
            queueMicrotask(()=>parentPort.postMessage('ready'));
        }
    } catch  {
        if (typeof WebSocket !== 'undefined') try {
            ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
        } catch (err) {
            // Ignore cloudflare workers error.
            if (err.message && !err.message.includes('Disallowed operation called within global scope')) console.error(err.message);
        }
    }
    if (ws) {
        // $FlowFixMe
        ws.onmessage = async function(event /*: {data: string, ...} */ ) {
            var data /*: HMRMessage */  = JSON.parse(event.data);
            await handleMessage(data);
        };
        if (ws instanceof WebSocket) {
            ws.onerror = function(e) {
                if (e.message) console.error(e.message);
            };
            ws.onclose = function() {
                console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
        }
    }
}
async function handleMessage(data /*: HMRMessage */ ) {
    checkedAssets = {} /*: {|[string]: boolean|} */ ;
    disposedAssets = {} /*: {|[string]: boolean|} */ ;
    assetsToAccept = [];
    assetsToDispose = [];
    bundleNotFound = false;
    if (data.type === 'reload') fullReload();
    else if (data.type === 'update') {
        // Remove error overlay if there is one
        if (typeof document !== 'undefined') removeErrorOverlay();
        let assets = data.assets;
        // Handle HMR Update
        let handled = assets.every((asset)=>{
            return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        });
        // Dispatch a custom event in case a bundle was not found. This might mean
        // an asset on the server changed and we should reload the page. This event
        // gives the client an opportunity to refresh without losing state
        // (e.g. via React Server Components). If e.preventDefault() is not called,
        // we will trigger a full page reload.
        if (handled && bundleNotFound && assets.some((a)=>a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {
            cancelable: true
        }));
        if (handled) {
            console.clear();
            // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
            if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
            await hmrApplyUpdates(assets);
            hmrDisposeQueue();
            // Run accept callbacks. This will also re-execute other disposed assets in topological order.
            let processedAssets = {};
            for(let i = 0; i < assetsToAccept.length; i++){
                let id = assetsToAccept[i][1];
                if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                }
            }
        } else fullReload();
    }
    if (data.type === 'error') {
        // Log parcel errors to console
        for (let ansiDiagnostic of data.diagnostics.ansi){
            let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
            console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
        }
        if (typeof document !== 'undefined') {
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if (typeof location !== 'undefined' && 'reload' in location) location.reload();
    else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
    else try {
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) parentPort.postMessage('restart');
    } catch (err) {
        console.error("[parcel] \u26A0\uFE0F An HMR update was not accepted. Please restart the process.");
    }
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout || typeof document === 'undefined') return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    checkedAssets = {};
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else if (a !== null) {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) {
            bundleNotFound = true;
            return true;
        }
        return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return null;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    if (!cached) return true;
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
    return false;
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"lztm5":[function(require,module,exports,__globalThis) {
var _styleScss = require("../scss/style.scss");
var _sidebar = require("./layout/sidebar");
var _notifications = require("./layout/header/notifications");
var _tasks = require("./layout/header/tasks");
var _search = require("./layout/header/search/search");
var _sales = require("./views/sales/sales");
var _crm = require("./views/crm/crm");
var _analytics = require("./views/analytics/analytics");
var _connections = require("./views/user/connections");
var _photos = require("./views/user/photos");
var _contacts = require("./views/contacts/contacts");
var _contentSidebar = require("./layout/contentSidebar");
var _fileManager = require("./views/file-manager/fileManager");
var _mail = require("./views/mail/mail");
var _messages = require("./views/messages/messages");
var _photos1 = require("./views/photos/photos");
var _todoLists = require("./views/todo-lists/todoLists");
var _calendar = require("./views/calendar/calendar");
var _searchResults = require("./views/search-results/searchResults");
var _faq = require("./views/faq/faq");
var _team = require("./views/team/team");
var _demo = require("./demo");
var _icons = require("./views/icons/icons");
var _charts = require("./views/charts/charts");
var _colorMode = require("./layout/header/colorMode");
var _header = require("./layout/header");
var _emailMarketing = require("./views/email-marketing/emailMarketing");
var _projectManagement = require("./views/project-management/projectManagement");
var _contentHeader = require("./layout/contentHeader");
var _maps = require("./views/maps/maps");
var _pageLoader = require("./layout/pageLoader");
// Views
(0, _sales.sales)();
(0, _crm.crm)();
(0, _analytics.analytics)();
(0, _emailMarketing.emailMarketing)();
(0, _projectManagement.projectManagement)();
(0, _connections.userConnections)();
(0, _photos.userPhotos)();
(0, _contacts.contacts)();
(0, _fileManager.fileManager)();
(0, _mail.mail)();
(0, _messages.messages)();
(0, _photos1.photos)();
(0, _todoLists.todoList)();
(0, _calendar.calendarPage)();
(0, _searchResults.searchResults)();
(0, _faq.faq)();
(0, _team.teams)();
(0, _icons.icons)();
(0, _charts.charts)();
(0, _maps.maps)();
// Layout
(0, _colorMode.colorMode)();
(0, _sidebar.sidebar)();
(0, _search.search)();
(0, _notifications.notifications)();
(0, _tasks.tasks)();
(0, _header.header)();
(0, _contentSidebar.contentSidebar)();
(0, _contentHeader.contentHeader)();
(0, _pageLoader.pageLoader)();
// Demo
(0, _demo.demo)();

},{"../scss/style.scss":"m5N6h","./layout/sidebar":"27uov","./layout/header/notifications":"kQIxy","./layout/header/tasks":"6B8e8","./layout/header/search/search":"7AIPn","./views/sales/sales":"4Nfv0","./views/crm/crm":"8B4JB","./views/analytics/analytics":"7KZEL","./views/user/connections":"lGdBX","./views/user/photos":"ad3ms","./views/contacts/contacts":"1ouuK","./layout/contentSidebar":"i9u7J","./views/file-manager/fileManager":"86LHh","./views/mail/mail":"de3ey","./views/messages/messages":"68VjJ","./views/photos/photos":"jLDbe","./views/todo-lists/todoLists":"hg7fV","./views/calendar/calendar":"ftFZW","./views/search-results/searchResults":"zGWju","./views/faq/faq":"3MSC1","./views/team/team":"jJ1jr","./demo":"45R1J","./views/icons/icons":"1NeKU","./views/charts/charts":"jMSzf","./layout/header/colorMode":"eMSIu","./layout/header":"gmgwt","./views/email-marketing/emailMarketing":"3HvTE","./views/project-management/projectManagement":"5q0Ut","./layout/contentHeader":"6tIO2","./views/maps/maps":"gt4gk","./layout/pageLoader":"2qsve"}],"m5N6h":[function() {},{}],"27uov":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sidebar", ()=>sidebar);
const sidebar = ()=>{
    const SIDEBAR_SECONDARY = document.getElementById("sidebar-secondary");
    const SIDEBAR_SEC_CLOSE = document.getElementById("sidebar-secondary-close");
    const SIDEBAR = document.getElementById("sidebar");
    //--------------------------------------------
    // Sidebar
    //--------------------------------------------
    const SIDEBAR_TOGGLE = document.querySelectorAll(".sidebar-toggle");
    const BACKDROP = document.createElement("button");
    let isToggled = false;
    const sidebarClose = ()=>{
        SIDEBAR.classList.remove("toggled");
        BACKDROP.remove();
        isToggled = false;
    };
    if (SIDEBAR_TOGGLE.length > 0) {
        SIDEBAR_TOGGLE.forEach((el)=>{
            BACKDROP.setAttribute("type", "button");
            BACKDROP.setAttribute("class", "backdrop d-xl-none");
            BACKDROP.onclick = ()=>sidebarClose();
            el.addEventListener("click", (e)=>{
                e.preventDefault();
                // Close secondary sidebar if opened
                if (SIDEBAR_SECONDARY) {
                    if (SIDEBAR_SECONDARY.classList.contains("toggled")) SIDEBAR_SEC_CLOSE.click();
                }
                isToggled = !isToggled;
                SIDEBAR.classList.toggle("toggled", isToggled);
                if (isToggled) SIDEBAR.insertAdjacentElement("afterend", BACKDROP);
                else BACKDROP.remove();
            });
        });
        // Close
        const SIDEBAR_CLOSE = document.getElementById("sidebar-close");
        SIDEBAR_CLOSE.addEventListener("click", (e)=>{
            e.preventDefault();
            sidebarClose();
        });
    }
    //--------------------------------------------
    // Sidebar secondary
    //--------------------------------------------
    const SIDEBAR_SEC_TOGGLE = document.getElementById("sidebar-secondary-toggle");
    if (SIDEBAR_SEC_TOGGLE) {
        let isToggled = false;
        const BACKDROP = document.createElement("button");
        BACKDROP.setAttribute("type", "button");
        BACKDROP.setAttribute("class", "backdrop z-1 d-xl-none");
        BACKDROP.onclick = ()=>{
            close();
        };
        const close = ()=>{
            SIDEBAR_SECONDARY.classList.remove("toggled");
            BACKDROP.remove();
            isToggled = false;
        };
        SIDEBAR_SEC_TOGGLE.addEventListener("click", (e)=>{
            e.preventDefault();
            isToggled = !isToggled;
            SIDEBAR_SECONDARY.classList.toggle("toggled", isToggled);
            if (isToggled) SIDEBAR_SECONDARY.insertAdjacentElement("afterend", BACKDROP);
        });
        SIDEBAR_SEC_CLOSE.addEventListener("click", (e)=>{
            e.preventDefault();
            close();
        });
    }
    //----------------------------------
    // Sidebar menu
    //----------------------------------
    const SUB_LIST = document.querySelector(".menu-sub");
    if (SUB_LIST) {
        const SUB_MENU_TOGGLES = document.querySelectorAll(".menu-sub > a");
        SUB_MENU_TOGGLES.forEach((el)=>{
            let parent = el.closest(".menu-sub");
            let isOpened = parent.classList.contains("active");
            let isToggling = false;
            const toggleSubMenu = (el)=>{
                isOpened = !isOpened;
                parent.classList.toggle("opened", isOpened);
                if (isOpened) {
                    // Menu opening animation
                    isToggling = true;
                    el.style.height = "0px";
                    el.style.opacity = "0";
                    el.style.display = "block";
                    setTimeout(()=>{
                        el.style.height = el.scrollHeight + "px";
                        el.style.opacity = "1";
                        setTimeout(()=>{
                            el.style.height = "";
                            isToggling = false;
                        }, 300);
                    });
                } else {
                    // Menu closing animation
                    isToggling = true;
                    el.style.height = el.scrollHeight + "px";
                    el.style.opacity = "0";
                    setTimeout(()=>{
                        el.style.height = "0px";
                        setTimeout(()=>{
                            el.style.display = "none";
                            isToggling = false;
                        }, 300);
                    });
                }
            };
            el.addEventListener("click", (e)=>{
                e.preventDefault();
                if (isToggling) return;
                toggleSubMenu(el.nextElementSibling);
            });
        });
    }
    //----------------------------------
    // Sidebar menu active class
    //----------------------------------
    const ACTIVE_PAGE = document.documentElement.dataset.page;
    const menuLinks = document.querySelectorAll(".menu > li > a");
    const menuSubLinks = document.querySelectorAll(".menu-sub > ul > li > a");
    menuLinks.forEach((el)=>{
        let link = el.innerText.toLowerCase().replace(/\s/g, "-");
        if (ACTIVE_PAGE === link) el.parentNode.classList.add("active");
    });
    menuSubLinks.forEach((el)=>{
        let parent = el.closest(".menu-sub").innerText.toLowerCase().replace(/\s/g, "-");
        let link = el.innerText.toLowerCase().replace(/\s/g, "-");
        if (ACTIVE_PAGE === `${parent}-${link}`) {
            el.classList.add("active");
            el.closest(".menu-sub").classList.add("opened", "active");
        }
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"hDUPi":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"kQIxy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notifications", ()=>notifications);
var _utils = require("../../utils");
const notifications = ()=>{
    const WRAPPER = document.getElementById("top-notifications");
    if (WRAPPER) {
        let list = "";
        const DATA = [
            {
                title: "New sales order received",
                read: false,
                id: "#204",
                time: "10 minutes ago",
                icon: "ph-currency-circle-dollar",
                color: "bg-success",
                border: "border-success"
            },
            {
                title: "New user account registered",
                read: false,
                id: "#3102",
                time: "23 minutes ago",
                icon: "ph-user-circle",
                color: "bg-success",
                border: "border-success"
            },
            {
                title: "New product review received",
                read: false,
                id: "#8973",
                time: "48 minutes ago",
                icon: "ph-phone-call",
                color: "bg-primary",
                border: "border-primary"
            },
            {
                title: "New product review received",
                read: false,
                id: "#8972",
                time: "50 minutes ago",
                icon: "ph-phone-call",
                color: "bg-primary",
                border: "border-primary"
            },
            {
                title: "New sales order received",
                read: false,
                id: "#203",
                time: "55 minutes ago",
                icon: "ph-currency-circle-dollar",
                color: "bg-success",
                border: "border-success"
            },
            {
                title: "Review unpaid orders",
                read: true,
                id: "#765",
                time: "2 hours ago",
                icon: "ph-basket",
                color: "bg-warning",
                border: "border-warning"
            },
            {
                title: "New issue filed by customer",
                read: false,
                id: "#721",
                time: "2 hours ago",
                icon: "ph-bug",
                color: "bg-danger",
                border: "border-danger"
            },
            {
                title: "New comment received",
                read: true,
                id: "#976",
                time: "3 hours ago",
                icon: "ph-chat-centered-text",
                color: "bg-info",
                border: "border-info"
            },
            {
                title: "Thread responded and closed",
                read: false,
                id: "#45",
                time: "5 hours ago",
                icon: "ph-crosshair-simple",
                color: "bg-info",
                border: "border-info"
            },
            {
                title: "Thread re-opened by administrator",
                read: true,
                id: "#8972",
                time: "6 hours ago",
                icon: "ph-crosshair-simple",
                color: "bg-info",
                border: "border-info"
            },
            {
                title: "New support request received",
                read: true,
                id: "#432",
                time: "8 hours ago",
                icon: "ph-lifebuoy",
                color: "bg-warning",
                border: "border-warning"
            },
            {
                title: "New issue filed by customer",
                read: true,
                id: "#720",
                time: "2 days ago",
                icon: "ph-bug",
                color: "bg-danger",
                border: "border-danger"
            }
        ];
        // Filter unread and read items
        const UNREAD_ITEMS = [];
        const READ_ITEMS = [];
        DATA.forEach((item)=>{
            if (!item.read) UNREAD_ITEMS.push(item);
            else READ_ITEMS.push(item);
        });
        // Function to return item
        const notificationItem = (border, icon, color, title, time, type = "unread")=>{
            return `<a href="" class="bg-hover d-flex align-items-center py-2 px-3 rounded">
						${(0, _utils.avatarIcon)(icon, color, border)}

						<div class="flex-grow-1">
							<div class="text-body-emphasis">${title}</div>
							<div class="fs-7 text-body-secondary">${time}</div>
						</div>

						${type === "unread" ? '<i class="w-1.5 h-1.5 rounded-circle mb-4 bg-primary"></i>' : ""}
					</a>`;
        };
        // Concatenate unread items at the beginning
        UNREAD_ITEMS.forEach((item)=>{
            list += `${notificationItem(item.border, item.icon, item.color, item.title, item.time, "unread")}`;
        });
        // Concatenate read items after unread items
        READ_ITEMS.forEach((item)=>{
            list += `${notificationItem(item.border, item.icon, item.color, item.title, item.time, "read")}`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"hgAea":[function(require,module,exports,__globalThis) {
//---------------------------------------------------
// Colors
//---------------------------------------------------
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COLORS", ()=>COLORS);
parcelHelpers.export(exports, "isMac", ()=>isMac);
parcelHelpers.export(exports, "cssVar", ()=>cssVar);
parcelHelpers.export(exports, "evenRow", ()=>evenRow);
parcelHelpers.export(exports, "throttle", ()=>throttle);
parcelHelpers.export(exports, "avatarCap", ()=>avatarCap);
parcelHelpers.export(exports, "avatarIcon", ()=>avatarIcon);
parcelHelpers.export(exports, "avatarImg", ()=>avatarImg);
const COLORS = {
    white: "#ffffff",
    transparent: "rgba(0,0,0,0)",
    blue: "#2392f9",
    indigo: "#5c6bc0",
    purple: "#e26cf5",
    pink: "#f06292",
    red: "#fd7171",
    orange: "#fea84c",
    yellow: "#ffeb3b",
    green: "#10b981",
    teal: "#33b6a9",
    cyan: "#26c6da"
};
const isMac = ()=>{
    const platform = navigator?.userAgentData?.platform || navigator?.platform;
    return platform.toUpperCase().indexOf("MAC") >= 0;
};
const cssVar = (variable)=>{
    return getComputedStyle(document.body).getPropertyValue(variable).trim();
};
const evenRow = (index, highlightClass = "bg-highlight")=>{
    let rowClass = "";
    if (index % 2 === 0) rowClass = highlightClass;
    else rowClass = "";
    return rowClass;
};
const throttle = (fn, delay)=>{
    let lastCall = 0;
    return function(...args) {
        const now = new Date().getTime();
        if (now - lastCall >= delay) {
            lastCall = now;
            fn(...args);
        }
    };
};
//---------------------------------------------------
// Avatar
//---------------------------------------------------
const AVATAR_BASE_CLS = `w-8 h-8 rounded-circle d-grid place-content-center`;
const AVATAR_BORDER_BASE_CLS = `w-10 h-10 rounded-circle border border-opacity-50 d-grid place-content-center border me-3 flex-shrink-0`;
const avatarCap = (cap = "A", bg = "bg-active", borderColor = "")=>{
    return `<div class="text-uppercase ${AVATAR_BORDER_BASE_CLS} ${borderColor}">
				<div class="text-invert fw-bold ${AVATAR_BASE_CLS} ${bg}">${cap}</div>
			</div>`;
};
const avatarIcon = (icon = "ph-user", bg = "bg-active", borderColor = "")=>{
    return `<div class="${AVATAR_BORDER_BASE_CLS} ${borderColor}">
				<i class="ph text-invert fs-5 ${icon} ${AVATAR_BASE_CLS} ${bg}"></i>
			</div>`;
};
const avatarImg = (img = "", alt = "", borderColor = "border-200", width = "h-8", height = "h-8")=>{
    return `<div class="${AVATAR_BORDER_BASE_CLS} ${borderColor}">
				<img class="rounded-circle ${borderColor} ${width} ${height}" src="${img}" alt="${alt}" />
			</div>`;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"6B8e8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tasks", ()=>tasks);
var _data = require("../../views/todo-lists/data");
const tasks = ()=>{
    const WRAPPER = document.getElementById("top-tasks");
    if (WRAPPER) {
        let list = "";
        const LIMIT = 8;
        let last = LIMIT - 1;
        (0, _data.TODO_DATA).slice(0, LIMIT).map((item, index)=>{
            list += `<div class="px-4 py-1">
						<div class="form-check">
							<input class="form-check-input todo-checkbox" type="checkbox" value="" id="task-${item.id}">
							<label class="form-check-label pb-3 d-block ${index !== last ? "border-bottom" : ""}" for="task-${item.id}">
								<div class="mb-1 text-truncate text-body-emphasis">${item.title}</div>
								<div class="d-flex align-items-center text-body-secondary">
									<div class="badge bg-opacity rounded-pill truncate text-${item.color}-emphasis bg-${item.color}" style="--bs-bg-opacity: 0.15">${item.label}</div>
									${item.due.date ? `<div class="mx-2">-</div>
												<div class="fs-7">${item.due.date}</div>` : ""}
									<div class="mx-2">-</div>
									<div class="fs-7 fw-medium">${item.priority}</div>
								</div>
							</label>
						</div>
					</div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../views/todo-lists/data":"fLm8T","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"fLm8T":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TODO_DATA", ()=>TODO_DATA);
parcelHelpers.export(exports, "DETAILS", ()=>DETAILS);
const TODO_DATA = [
    {
        id: 1,
        label: "bug",
        color: "danger",
        title: "Mollit sint ad exercitation ullamco elit velit laboris esse voluptate.",
        description: "Sint commodo do do incididunt sunt Lorem. Proident aliqua veniam eu ea cillum ad. Incididunt occaecat exercitation consequat magna ex deserunt pariatur sunt eu officia reprehenderit. Velit et adipisicing in sit aute nisi in id enim fugiat magna.",
        completed: false,
        due: {
            date: "21-03-2030",
            time: "02:34"
        },
        files: [
            {
                name: "id.mp3",
                size: "408.kb"
            },
            {
                name: "velit.mp3",
                size: "470.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 2,
        label: "documetation",
        color: "success",
        title: "Ipsum sint dolore voluptate ea ex dolore laborum aute tempor aliquip ipsum.",
        description: "Amet sunt sit voluptate consequat nulla. Enim culpa anim dolore mollit duis ipsum velit labore Lorem fugiat amet. Enim nostrud labore labore mollit occaecat sunt est deserunt sit id. Ad ex cupidatat veniam ullamco cupidatat amet ea laborum irure.",
        completed: false,
        due: {
            date: "27-02-2030",
            time: "13:26"
        },
        files: [
            {
                name: "cillum.mp3",
                size: "510.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 3,
        label: "feature",
        color: "primary",
        title: "In tempor aliqua dolor nulla magna nulla aliqua eu ipsum duis.",
        description: "Anim nisi dolore amet irure dolor. Excepteur ut velit cillum mollit Lorem voluptate ad eu magna sunt occaecat non laboris. Dolore laboris ullamco cillum enim esse ut dolore. Laboris sit ipsum aliquip irure Lorem dolor eiusmod magna id sit adipisicing consequat. Mollit irure dolor do excepteur consectetur occaecat est occaecat adipisicing eiusmod esse veniam. Id sint enim sunt ullamco in velit amet Lorem consectetur aliqua enim.",
        completed: false,
        due: {
            date: "28-03-2030",
            time: "20:42"
        },
        files: [
            {
                name: "sit.jpg",
                size: "222.kb"
            },
            {
                name: "esse.txt",
                size: "431.kb"
            },
            {
                name: "fugiat.gif",
                size: "481.kb"
            },
            {
                name: "nisi.docx",
                size: "360.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 4,
        label: "bug",
        color: "danger",
        title: "Deserunt nisi dolore duis occaecat velit consectetur exercitation mollit sunt in.",
        description: "Exercitation consectetur proident enim cillum qui Lorem tempor. Deserunt officia eiusmod elit anim laboris esse labore. Incididunt in dolore mollit adipisicing reprehenderit Lorem sit anim exercitation incididunt incididunt sit. Enim pariatur exercitation cupidatat irure velit amet pariatur est. Et mollit culpa exercitation culpa anim consequat esse aliquip proident eiusmod laboris. Velit ipsum labore occaecat duis cillum ex magna excepteur.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [
            {
                name: "enim.mp3",
                size: "267.kb"
            },
            {
                name: "occaecat.mp3",
                size: "55.kb"
            }
        ],
        priority: "!"
    },
    {
        id: 5,
        label: "discussion",
        color: "warning",
        title: "Labore fugiat laboris veniam aliqua anim magna enim ad enim anim Lorem commodo pariatur duis.",
        description: "Reprehenderit velit excepteur labore nisi dolore laboris anim labore cillum eiusmod. Sit commodo eiusmod nisi ut adipisicing ipsum. Dolore est occaecat mollit fugiat ipsum id excepteur reprehenderit mollit reprehenderit eiusmod. Elit et incididunt occaecat minim ipsum pariatur. Minim ad velit esse cupidatat minim deserunt dolor laboris aliquip.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [],
        priority: "!!"
    },
    {
        id: 6,
        label: "feature",
        color: "primary",
        label: "verison 2.0",
        color: "success",
        title: "Voluptate in est dolor voluptate fugiat elit ex.",
        description: "Nisi nostrud non dolore ullamco amet cillum exercitation ipsum irure do cupidatat. Ut exercitation magna ipsum ad nulla deserunt ea irure. Voluptate dolor esse consectetur incididunt labore qui amet. Irure reprehenderit quis laborum id velit esse velit irure aliquip nulla sint anim.",
        completed: false,
        due: {
            date: "26-03-2030",
            time: "13:18"
        },
        files: [],
        priority: "!"
    },
    {
        id: 7,
        label: "feature",
        color: "primary",
        title: "Est commodo veniam irure eu pariatur nulla pariatur.",
        description: "Occaecat velit eiusmod labore eu consequat sint cillum sunt incididunt reprehenderit aliqua cillum consequat. Aute id pariatur ea proident minim est amet ad exercitation eu dolor. Do esse sunt cillum occaecat quis anim. Sint in pariatur ut aute exercitation quis sit duis esse est sint elit. Id dolore ullamco consequat eu ut elit. Laboris irure velit commodo id dolor incididunt laborum commodo labore aliquip sint incididunt. Occaecat amet consectetur mollit elit cillum id quis consequat cillum qui culpa eiusmod.",
        completed: false,
        due: {
            date: "31-03-2030",
            time: "10:14"
        },
        files: [],
        priority: "!!!"
    },
    {
        id: 8,
        label: "documentation",
        color: "success",
        title: "Tempor aliquip eu in consequat esse ex.",
        description: "Nisi laboris est adipisicing incididunt tempor eiusmod non laborum deserunt nulla. Magna minim aute minim fugiat proident nulla. Incididunt veniam ex qui officia do et voluptate ea eu fugiat ipsum cupidatat aute pariatur. Tempor quis nulla consectetur officia sit commodo in qui eu anim incididunt enim minim officia. Id reprehenderit veniam fugiat nulla elit consequat deserunt ut eiusmod qui minim eu.",
        completed: false,
        due: {
            date: "07-03-2030",
            time: "06:24"
        },
        files: [],
        priority: "!!!"
    },
    {
        id: 9,
        label: "design",
        color: "info",
        title: "Duis nostrud ea aliqua proident adipisicing cupidatat.",
        description: "Velit sint reprehenderit aliqua occaecat nisi laboris deserunt. Qui ea dolor consectetur ex amet pariatur pariatur cupidatat enim amet minim cupidatat reprehenderit sunt. Cupidatat fugiat occaecat ullamco occaecat nulla commodo enim fugiat tempor non qui laborum. Occaecat id duis velit nisi non officia culpa. Consequat duis incididunt laboris dolore ipsum et consectetur exercitation nostrud occaecat id ad nisi. Aliqua irure officia sint occaecat consectetur non dolore anim fugiat fugiat pariatur ex. Amet minim consectetur esse aute.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [
            {
                name: "Lorem.mp3",
                size: "533.kb"
            },
            {
                name: "mollit.txt",
                size: "857.kb"
            },
            {
                name: "velit.pdf",
                size: "274.kb"
            },
            {
                name: "commodo.jpg",
                size: "513.kb"
            },
            {
                name: "pariatur.docx",
                size: "162.kb"
            }
        ],
        priority: "!!"
    },
    {
        id: 10,
        label: "design",
        color: "info",
        title: "Incididunt incididunt incididunt dolore commodo laborum ut ea pariatur ullamco.",
        description: "Ad non in laboris esse cillum anim dolor adipisicing anim labore deserunt anim ipsum. Consectetur adipisicing ex ullamco sint cupidatat pariatur dolore sunt culpa consequat magna minim id. Deserunt cillum occaecat irure anim.",
        completed: false,
        due: {
            date: "23-03-2030",
            time: "01:50"
        },
        files: [
            {
                name: "consequat.gif",
                size: "790.kb"
            }
        ],
        priority: "!!"
    },
    {
        id: 11,
        label: "bug",
        color: "danger",
        title: "Eiusmod nulla aliquip laborum non aliquip nulla minim.",
        description: "Excepteur irure irure Lorem do cillum in irure. Officia enim qui qui incididunt id eu id aute eiusmod commodo non exercitation ipsum officia. Elit deserunt non est et ea anim sint ullamco ea. Qui enim tempor exercitation aute ipsum. Culpa est occaecat ipsum et deserunt veniam qui. Occaecat in sit eu qui ullamco nisi consequat ex voluptate duis.",
        completed: false,
        due: {
            date: "18-03-2030",
            time: "02:36"
        },
        files: [
            {
                name: "do.gif",
                size: "868.kb"
            },
            {
                name: "ipsum.csv",
                size: "539.kb"
            },
            {
                name: "irure.txt",
                size: "472.kb"
            },
            {
                name: "officia.jpg",
                size: "559.kb"
            }
        ],
        priority: "!"
    },
    {
        id: 12,
        label: "priority:severe",
        color: "danger",
        title: "Irure cupidatat consequat anim aliquip esse consequat anim aute non occaecat et cillum.",
        description: "Excepteur exercitation deserunt enim ullamco ut commodo tempor elit eu sunt in ut magna. Velit dolor tempor aliquip consectetur irure adipisicing. Dolor eiusmod ex magna in et. Veniam minim deserunt Lorem esse pariatur Lorem. Labore laborum nostrud voluptate exercitation.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [],
        priority: "!"
    },
    {
        id: 13,
        label: "security",
        color: "warning",
        title: "Ipsum ad dolore in laborum occaecat tempor et commodo sunt occaecat proident exercitation consequat elit.",
        description: "Officia irure do velit Lorem enim enim. In ad dolor laboris esse cupidatat aliqua sint reprehenderit. Elit non ad consectetur ut voluptate ad cupidatat. Adipisicing voluptate labore officia ullamco enim in qui aute.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [],
        priority: "!"
    },
    {
        id: 14,
        label: "bug",
        color: "danger",
        title: "Eiusmod incididunt do ea aute ad nisi sunt consequat.",
        description: "Ullamco magna est sit reprehenderit velit ut dolore proident aliquip dolore cillum. Commodo incididunt proident veniam proident Lorem. Sit adipisicing voluptate non id sit. Et ad duis cillum in elit sit officia duis. Incididunt incididunt nisi in aliqua sit sint sit duis consectetur.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [],
        priority: "!"
    },
    {
        id: 15,
        label: "feature",
        color: "primary",
        title: "Ullamco excepteur amet consequat eiusmod.",
        description: "Ipsum aute ut laborum reprehenderit non duis. Esse aute aute enim nostrud deserunt magna aliquip incididunt excepteur occaecat eiusmod eiusmod. Elit ad quis nostrud pariatur non adipisicing. Incididunt tempor elit ut laboris anim nisi exercitation. Consequat voluptate et aliqua proident. Cillum ad exercitation laboris esse nisi anim fugiat sint ipsum est quis voluptate.",
        completed: false,
        due: {
            date: "31-03-2030",
            time: "08:27"
        },
        files: [
            {
                name: "labore.docx",
                size: "445.kb"
            },
            {
                name: "nisi.docx",
                size: "518.kb"
            },
            {
                name: "voluptate.txt",
                size: "194.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 16,
        label: "obsolete",
        color: "lime",
        title: "Officia est est eu non ea esse nisi reprehenderit ut.",
        description: "Officia incididunt nulla ut reprehenderit consequat. Et deserunt id enim quis irure consequat quis enim. Esse in enim Lorem excepteur ad amet fugiat labore sunt culpa fugiat adipisicing do.",
        completed: false,
        due: {
            date: "11-03-2030",
            time: "01:41"
        },
        files: [
            {
                name: "est.csv",
                size: "535.kb"
            },
            {
                name: "dolore.jpg",
                size: "947.kb"
            },
            {
                name: "non.pdf",
                size: "104.kb"
            },
            {
                name: "consequat.txt",
                size: "754.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 17,
        label: "obsolete",
        color: "lime",
        title: "Officia sint nisi dolor eiusmod ex dolore fugiat nisi laborum sint.",
        description: "Nisi adipisicing cupidatat nisi adipisicing consectetur voluptate duis eu est irure sint cillum. Dolor minim ut minim nisi in fugiat duis reprehenderit qui magna. Nisi sint velit enim officia aliqua. Deserunt irure ullamco non nisi ullamco fugiat aute officia minim proident ad nisi anim esse. Nisi ullamco aliquip commodo mollit. Elit nostrud dolore qui nisi id voluptate Lorem duis magna nisi Lorem consectetur adipisicing commodo.",
        completed: false,
        due: {
            date: "19-03-2030",
            time: "16:55"
        },
        files: [
            {
                name: "velit.docx",
                size: "448.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 18,
        label: "obsolete",
        color: "lime",
        title: "Velit veniam incididunt aute irure enim enim exercitation eiusmod mollit amet.",
        description: "Est pariatur dolore occaecat Lorem laboris irure aliqua qui dolore velit aliqua veniam. Exercitation cillum ad qui irure aliqua enim ea veniam laboris voluptate cillum tempor Lorem. Velit est amet proident eu reprehenderit. Laborum magna minim officia est aute ullamco adipisicing proident proident aliqua sunt. Id aliqua ex et sunt.",
        completed: false,
        due: {
            date: "05-03-2030",
            time: "07:51"
        },
        files: [
            {
                name: "eiusmod.txt",
                size: "908.kb"
            },
            {
                name: "aliquip.csv",
                size: "557.kb"
            },
            {
                name: "ad.gif",
                size: "16.kb"
            },
            {
                name: "dolore.txt",
                size: "851.kb"
            }
        ],
        priority: "!!"
    },
    {
        id: 19,
        label: "version 2.0",
        color: "primary",
        title: "Cupidatat aute exercitation nisi culpa do nisi qui esse irure elit.",
        description: "Et ipsum officia sunt Lorem do non quis nostrud proident nostrud. Irure commodo veniam irure anim culpa nostrud cupidatat. Ullamco amet laborum commodo aliqua eu qui amet cupidatat. Minim excepteur esse anim aute proident reprehenderit qui exercitation magna. Aliquip id ea commodo culpa non velit ut mollit enim qui excepteur enim voluptate. Fugiat occaecat ex minim occaecat sint ad.",
        completed: false,
        due: {
            date: "11-03-2030",
            time: "03:45"
        },
        files: [
            {
                name: "reprehenderit.docx",
                size: "243.kb"
            },
            {
                name: "laboris.mp3",
                size: "763.kb"
            },
            {
                name: "esse.csv",
                size: "91.kb"
            },
            {
                name: "magna.jpg",
                size: "430.kb"
            },
            {
                name: "voluptate.docx",
                size: "741.kb"
            }
        ],
        priority: "!!"
    },
    {
        id: 20,
        label: "documentation",
        color: "success",
        title: "Culpa qui ex do cillum irure quis pariatur nulla occaecat.",
        description: "Cillum in aute aute duis ut nulla veniam culpa magna mollit nisi eu quis mollit. Sint est cupidatat aliqua dolore. Ullamco nulla velit nostrud sit duis nisi velit officia. Sit cillum elit pariatur irure labore.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [],
        priority: "!"
    },
    {
        id: 21,
        label: "bug",
        color: "danger",
        title: "Exercitation pariatur fugiat sit aute in laborum aliquip ea aute adipisicing irure amet.",
        description: "Elit non fugiat eu dolor incididunt in dolore cupidatat fugiat. Laborum veniam veniam sunt ex. Lorem esse laborum cillum cupidatat reprehenderit qui commodo veniam id culpa commodo culpa. Sunt ut elit incididunt voluptate voluptate incididunt irure adipisicing ullamco fugiat irure cupidatat. Do sunt incididunt veniam sint pariatur ad enim. Quis duis non reprehenderit commodo ad veniam nisi reprehenderit non. Reprehenderit reprehenderit et minim irure exercitation minim ad sint anim deserunt aliqua enim culpa Lorem.",
        completed: false,
        due: {
            date: "26-02-2030",
            time: "22:17"
        },
        files: [
            {
                name: "magna.docx",
                size: "348.kb"
            },
            {
                name: "officia.docx",
                size: "918.kb"
            },
            {
                name: "ea.csv",
                size: "339.kb"
            },
            {
                name: "commodo.jpg",
                size: "873.kb"
            }
        ],
        priority: "!!"
    },
    {
        id: 22,
        label: "design",
        color: "info",
        title: "Reprehenderit sint ipsum aliquip commodo incididunt quis pariatur.",
        description: "Culpa est et velit in consectetur enim eu enim ipsum ullamco. Consequat adipisicing non laboris quis excepteur laboris exercitation amet qui tempor id enim aute in. Amet ad occaecat tempor dolor sit ut voluptate. Elit dolore anim excepteur in. In nostrud exercitation labore labore voluptate nisi. Cillum dolore deserunt occaecat commodo fugiat excepteur aliqua deserunt tempor. Non sit do nisi cillum qui exercitation proident ipsum amet.",
        completed: false,
        due: {
            date: "17-03-2030",
            time: "07:39"
        },
        files: [
            {
                name: "Lorem.docx",
                size: "140.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 23,
        label: "design",
        color: "info",
        title: "Lorem officia eu sit voluptate cillum irure sunt eiusmod non.",
        description: "Reprehenderit pariatur ea aute incididunt est esse qui sint ex esse laborum proident. Labore aliquip aliquip magna qui excepteur consequat amet. Eiusmod dolor sit culpa dolore eiusmod pariatur enim voluptate exercitation deserunt cillum exercitation sint. Non nisi fugiat elit ex voluptate do dolore quis reprehenderit exercitation exercitation aliquip. Aliquip eiusmod quis culpa esse. Voluptate in ex commodo anim magna amet tempor esse.",
        completed: false,
        due: {
            date: "26-02-2030",
            time: "15:11"
        },
        files: [
            {
                name: "ad.csv",
                size: "182.kb"
            },
            {
                name: "ex.gif",
                size: "120.kb"
            },
            {
                name: "quis.txt",
                size: "980.kb"
            },
            {
                name: "aute.txt",
                size: "819.kb"
            }
        ],
        priority: "!!!"
    },
    {
        id: 24,
        label: "priority:severe",
        color: "danger",
        title: "Est laborum consequat commodo non ex irure et anim qui.",
        description: "Dolor adipisicing quis eu irure ea veniam nulla ad. Aliquip aliquip commodo irure non cillum. Quis ea cillum qui nisi excepteur commodo commodo quis tempor. Anim laborum eu nostrud minim nulla fugiat proident velit pariatur excepteur fugiat.",
        completed: false,
        due: {
            date: "",
            time: ""
        },
        files: [],
        priority: "!"
    },
    {
        id: 25,
        label: "priority:severe",
        color: "danger",
        title: "Sit cillum dolor tempor enim.",
        description: "Eu nisi consectetur pariatur reprehenderit dolor aute excepteur consequat id ea proident minim labore amet. Nulla quis amet occaecat duis veniam ipsum. Aliqua deserunt irure quis nisi ullamco. Nulla laborum tempor do laborum consequat nulla ea anim. Ullamco ex consequat sit sit minim id exercitation sint excepteur. Consequat occaecat eu voluptate mollit nulla occaecat officia esse ex labore occaecat enim aliquip cupidatat. Anim in nostrud quis reprehenderit nostrud nisi ex.",
        completed: false,
        due: {
            date: "26-03-2030",
            time: "17:36"
        },
        files: [
            {
                name: "quis.gif",
                size: "136.kb"
            },
            {
                name: "magna.csv",
                size: "827.kb"
            }
        ],
        priority: "!"
    },
    {
        id: 26,
        label: "blocked",
        color: "lime",
        title: "Tempor irure eu Lorem esse proident qui tempor laboris consectetur ipsum Lorem elit incididunt dolor.",
        description: "Et laboris do cillum consequat sunt nostrud ut officia. Eu enim mollit do esse do aute dolor cupidatat. Reprehenderit incididunt do elit dolore. Laboris adipisicing quis culpa anim dolor consectetur fugiat nulla nulla.",
        completed: false,
        due: {
            date: "06-03-2030",
            time: "06:37"
        },
        files: [],
        priority: "!"
    },
    {
        id: 27,
        label: "bug",
        color: "danger",
        title: "Esse sunt ex cillum excepteur in id laborum dolor est.",
        description: "Consequat Lorem ex ex nisi in esse sint reprehenderit Lorem et esse amet ullamco. Labore dolore irure nulla et qui non eiusmod Lorem labore esse. Mollit id anim esse sunt id esse. Cillum sit eu voluptate adipisicing eiusmod aute ipsum aliquip occaecat ipsum elit nulla occaecat. Qui tempor aliqua tempor ea ullamco voluptate dolore eu sit pariatur officia adipisicing aliquip elit. Consequat sit aute mollit commodo est pariatur aliqua consequat labore minim ex ipsum.",
        completed: false,
        due: {
            date: "11-03-2030",
            time: "04:05"
        },
        files: [
            {
                name: "commodo.pdf",
                size: "977.kb"
            },
            {
                name: "cillum.csv",
                size: "769.kb"
            },
            {
                name: "mollit.docx",
                size: "72.kb"
            },
            {
                name: "fugiat.docx",
                size: "439.kb"
            },
            {
                name: "exercitation.txt",
                size: "423.kb"
            }
        ],
        priority: "!"
    },
    {
        id: 28,
        label: "bug",
        color: "danger",
        title: "Velit eiusmod esse tempor reprehenderit ut ea aute elit reprehenderit in ex voluptate.",
        description: "Velit aliquip deserunt consequat laborum dolor cupidatat. Sit pariatur anim culpa cillum tempor consectetur. Ullamco irure nostrud laboris quis esse consectetur ipsum officia. Dolore laborum dolore veniam nostrud occaecat occaecat eu aute ipsum in exercitation. Laboris ea excepteur aute ullamco sint qui ad aliquip qui ad ipsum. Non nulla amet reprehenderit minim id non excepteur.",
        completed: false,
        due: {
            date: "05-03-2030",
            time: "00:07"
        },
        files: [],
        priority: "!"
    },
    {
        id: 29,
        label: "bug",
        color: "danger",
        title: "Do aute tempor esse eiusmod ut sit dolor laboris labore proident nostrud.",
        description: "Laborum exercitation ad nisi tempor anim qui irure officia mollit exercitation sunt dolore ullamco ex. Anim voluptate reprehenderit ad non officia minim enim et ipsum anim aute labore duis. Mollit magna consequat aute in proident dolore. Enim laboris magna consectetur eiusmod labore consequat deserunt pariatur esse ad voluptate anim laborum. Elit veniam consectetur elit fugiat eiusmod ipsum sit sint deserunt aute. Non ea do id velit mollit enim.",
        completed: false,
        due: {
            date: "24-03-2030",
            time: "11:50"
        },
        files: [],
        priority: "!!!"
    },
    {
        id: 30,
        label: "feature",
        color: "primary",
        title: "Proident voluptate qui proident nostrud quis duis eiusmod fugiat.",
        description: "Excepteur voluptate ut nostrud est. Reprehenderit aute veniam nisi cillum laboris aliqua deserunt. Duis irure ea irure ut cillum. Mollit est ullamco fugiat reprehenderit et. Sint duis ex proident adipisicing consectetur exercitation irure.",
        completed: false,
        due: {
            date: "16-03-2030",
            time: "16:57"
        },
        files: [
            {
                name: "laboris.mp3",
                size: "176.kb"
            },
            {
                name: "ullamco.gif",
                size: "775.kb"
            },
            {
                name: "velit.txt",
                size: "255.kb"
            },
            {
                name: "laborum.pdf",
                size: "344.kb"
            }
        ],
        priority: "!!"
    }
];
const DETAILS = [
    {
        task: "Cillum laboris ipsum tempor eu reprehenderit fugiat ex qui quis sunt irure exercitation officia.",
        completed: false
    },
    {
        task: "Dolore pariatur ullamco in qui nulla voluptate sunt ut sunt.",
        completed: false
    },
    {
        task: "Culpa do id anim amet enim enim. Reprehenderit et consequat sunt velit sit minim eiusmod amet tempor eu incididunt cupidatat. Fugiat consectetur tempor pariatur eiusmod do commodo Lorem veniam id ipsum. Lorem eiusmod Lorem tempor est mollit exercitation nulla exercitation velit nisi reprehenderit.",
        completed: false
    },
    {
        task: "Fugiat ad non aliquip sunt sint laboris. Aute veniam cillum tempor et duis amet.",
        completed: false
    },
    {
        task: "Deserunt duis non incididunt esse.",
        completed: false
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7AIPn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "search", ()=>search);
var _utils = require("../../../utils");
var _data = require("./data");
const search = ()=>{
    // Recent searches
    const RECENT_SEARCHES = document.getElementById("recent-searches");
    let recentSearchesList = "";
    if (RECENT_SEARCHES) {
        (0, _data.RECENT_SEARCHES_DATA).forEach((item)=>{
            recentSearchesList += `<button type="button" class="bg-hover rounded d-flex align-items-center p-2 w-100">
										<i class="ph ph-clock fs-5 me-2"></i>
										${item}
									</button>`;
        });
        RECENT_SEARCHES.innerHTML = recentSearchesList;
    }
    // Keyboard shortcut for search
    const INDICATORS = {
        mac: `<svg fill="currentColor" height="10" width="18">
				<path d="m2.298 9.196a1.8 1.8 0 0 1 -.929-.247 1.91 1.91 0 0 1 -.673-.673 1.8 1.8 0 0 1 -.247-.929c0-.338.082-.652.247-.933a1.91 1.91 0 0 1 .673-.673 1.78 1.78 0 0 1 .929-.251h.989v-1.714h-.989a1.8 1.8 0 0 1 -.929-.247 1.92 1.92 0 0 1 -.673-.669c-.165-.281-.247-.592-.247-.933a1.79 1.79 0 0 1 .247-.93c.168-.281.392-.504.673-.669a1.78 1.78 0 0 1 .929-.251 1.79 1.79 0 0 1 .933.251c.281.165.506.388.673.669a1.78 1.78 0 0 1 .251.929v.98h1.713v-.98a1.79 1.79 0 0 1 .247-.929c.168-.281.391-.504.669-.669a1.79 1.79 0 0 1 .933-.251 1.77 1.77 0 0 1 .929.251 1.84 1.84 0 0 1 .669.669 1.76 1.76 0 0 1 .251.929 1.79 1.79 0 0 1 -.251.933c-.165.278-.388.501-.669.669a1.79 1.79 0 0 1 -.929.247h-.98v1.713h.98a1.77 1.77 0 0 1 .929.251 1.9 1.9 0 0 1 .669.673 1.79 1.79 0 0 1 .251.933 1.78 1.78 0 0 1 -.251.929c-.165.281-.388.506-.669.673a1.79 1.79 0 0 1 -.929.247c-.341 0-.652-.082-.933-.247a1.92 1.92 0 0 1 -.669-.673 1.8 1.8 0 0 1 -.247-.929v-.989h-1.712v.989a1.78 1.78 0 0 1 -.251.929 1.91 1.91 0 0 1 -.673.673c-.281.165-.592.247-.933.247zm0-.869c.182 0 .347-.044.494-.132a1.02 1.02 0 0 0 .358-.354.94.94 0 0 0 .136-.494v-.989h-.989a.94.94 0 0 0 -.494.136.99.99 0 0 0 -.354.358c-.088.151-.132.313-.132.494a.96.96 0 0 0 .132.494 1 1 0 0 0 .354.354.96.96 0 0 0 .494.132zm0-5.42h.989v-.98a.92.92 0 0 0 -.136-.494 1.02 1.02 0 0 0 -.358-.354.96.96 0 0 0 -.495-.133.96.96 0 0 0 -.494.132 1 1 0 0 0 -.354.354.95.95 0 0 0 -.132.494.97.97 0 0 0 .132.499 1 1 0 0 0 .354.354.95.95 0 0 0 .494.128zm4.44 0h.98a.97.97 0 0 0 .494-.128 1 1 0 0 0 .354-.354.97.97 0 0 0 .132-.499c0-.182-.044-.347-.132-.494a1.01 1.01 0 0 0 -.354-.354.95.95 0 0 0 -.494-.132.97.97 0 0 0 -.499.132 1 1 0 0 0 -.354.354.97.97 0 0 0 -.128.494v.98zm.98 5.42c.182 0 .347-.044.494-.132a1.01 1.01 0 0 0 .354-.354.96.96 0 0 0 .132-.494c0-.182-.044-.347-.132-.494a1.02 1.02 0 0 0 -.354-.358.95.95 0 0 0 -.494-.136h-.98v.989c0 .179.043.344.128.494a.96.96 0 0 0 .354.354.97.97 0 0 0 .499.132zm-3.562-2.838h1.713v-1.713h-1.713zm8.854-5.02v8.531h-1.078v-8.531zm4.289 0-2.935 3.979-1.717 2.068-.193-1.207 1.26-1.652 2.296-3.188zm-1.072 8.531-2.514-4.16.639-.896 3.158 5.056z"/>
			</svg>`,
        win: `<svg fill="currentColor" height="10" width="26">
				<path d="m5.191 6.287h1.079c-.027.586-.146 1.092-.357 1.518a2.21 2.21 0 0 1 -.908.973c-.395.227-.889.34-1.482.34a2.59 2.59 0 0 1 -1.154-.252 2.53 2.53 0 0 1 -.885-.721 3.43 3.43 0 0 1 -.557-1.137c-.129-.442-.195-.938-.195-1.488v-1.577c0-.547.064-1.041.193-1.482s.322-.818.568-1.131a2.52 2.52 0 0 1 .908-.727c.355-.168.766-.252 1.219-.252.555 0 1.023.111 1.406.334s.684.541.891.967.328.939.352 1.553h-1.078c-.027-.449-.098-.814-.211-1.096s-.281-.494-.504-.627-.504-.205-.855-.205c-.312 0-.584.063-.814.188s-.414.305-.562.539-.254.51-.328.838-.105.688-.105 1.09v1.588a5.9 5.9 0 0 0 .088 1.049 2.98 2.98 0 0 0 .293.855c.137.242.314.432.533.568a1.48 1.48 0 0 0 .797.205c.395 0 .707-.064.938-.193s.4-.334.51-.615.188-.648.223-1.102zm4.711-3.627v.832h-2.959v-.832zm-1.992-1.541h1.037v6.311c0 .215.025.377.076.486s.123.182.205.217a.66.66 0 0 0 .264.053 1.32 1.32 0 0 0 .234-.023l.176-.047-.006.884a1.73 1.73 0 0 1 -.281.076 2.31 2.31 0 0 1 -.445.041 1.27 1.27 0 0 1 -.621-.158c-.191-.105-.346-.281-.463-.527s-.176-.586-.176-1.008zm4.266 2.537v5.344h-1.037v-6.34h1.002zm1.576-1.031.006 1.008a1.42 1.42 0 0 0 -.234-.035c-.066-.008-.145-.012-.234-.012-.195 0-.367.039-.516.117a1.15 1.15 0 0 0 -.375.328c-.105.141-.189.309-.252.504a3.02 3.02 0 0 0 -.129.633l-.27.176c0-.383.029-.742.088-1.078a3.36 3.36 0 0 1 .287-.891 1.61 1.61 0 0 1 .492-.609c.199-.144.445-.223.727-.223a1.14 1.14 0 0 1 .229.029c.09.019.154.033.182.053zm2.156-2.625v9h-1.031v-9zm5.614.469v8.531h-1.078v-8.531zm4.289 0-2.936 3.979-1.717 2.068-.193-1.207 1.26-1.652 2.297-3.188zm-1.073 8.531-2.514-4.16.639-.896 3.159 5.056h-1.283z" />
			</svg>`
    };
    const SEARCH_EL = document.querySelector(".content-search .form-control");
    if (SEARCH_EL) {
        if (0, _utils.isMac) SEARCH_EL.insertAdjacentHTML("afterend", `<span class="d-flex">${INDICATORS.mac}</sspan>`);
        else SEARCH_EL.insertAdjacentHTML("afterend", `<span class="d-flex">${INDICATORS.win}</span>`);
        document.addEventListener("keydown", function(event) {
            if (event.target.tagName === "INPUT") return;
            if (((0, _utils.isMac) && event.metaKey || !(0, _utils.isMac) && event.ctrlKey) && event.key === "k") {
                SEARCH_EL.focus();
                event.preventDefault();
            }
        });
    }
};

},{"../../../utils":"hgAea","./data":"7eAww","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7eAww":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RECENT_SEARCHES_DATA", ()=>RECENT_SEARCHES_DATA);
const RECENT_SEARCHES_DATA = [
    "Configuration Management Reports",
    "User Activity Log",
    "Performance Insights",
    "Access Control Setup",
    "Data Visualization",
    "System Health Check",
    "Security Reports",
    "User Analytics View",
    "Activity Monitoring",
    "Error Tracking Log"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"4Nfv0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sales", ()=>sales);
var _recentOrders = require("./recentOrders");
var _salesHistory = require("./salesHistory");
var _storeSessions = require("./storeSessions");
var _topProducts = require("./topProducts");
const sales = ()=>{
    (0, _salesHistory.salesHistory)();
    (0, _storeSessions.storeSessions)();
    (0, _recentOrders.recentOrders)();
    (0, _topProducts.topProducts)();
};

},{"./recentOrders":"hmlfP","./salesHistory":"g1bww","./storeSessions":"k1tFS","./topProducts":"9NdW4","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"hmlfP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "recentOrders", ()=>recentOrders);
const recentOrders = ()=>{
    const WRAPPER = document.getElementById("recent-orders");
    if (WRAPPER) {
        let list = "";
        const DATA = [
            {
                order: 96473,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Unfulfilled",
                quantity: 4,
                currency: "USD",
                total: "$343.49"
            },
            {
                order: 96474,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Unfulfilled",
                quantity: 1,
                currency: "USD",
                total: "$29.69"
            },
            {
                order: 96475,
                date: "12/12/2023",
                status: "Failed",
                fullfillment: "Unfulfilled",
                quantity: 2,
                currency: "USD",
                total: "$59.38"
            },
            {
                order: 96476,
                date: "12/12/2023",
                status: "Pending",
                fullfillment: "Unfulfilled",
                quantity: 1,
                currency: "USD",
                total: "$29.69"
            },
            {
                order: 96477,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Unfulfilled",
                quantity: 7,
                currency: "EUR",
                total: "$2389.00"
            },
            {
                order: 96478,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Unfulfilled",
                quantity: 1,
                currency: "EUR",
                total: "$7.11"
            },
            {
                order: 96479,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Unfulfilled",
                quantity: 3,
                currency: "USD",
                total: "$45.99"
            },
            {
                order: 96480,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Fulfilled",
                quantity: 12,
                currency: "USD",
                total: "$542.79"
            },
            {
                order: 96481,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Fulfilled",
                quantity: 1,
                currency: "AUD",
                total: "$99.99"
            },
            {
                order: 96482,
                date: "12/12/2023",
                status: "Paid",
                fullfillment: "Fulfilled",
                quantity: 2,
                currency: "USD",
                total: "$15.00"
            }
        ];
        DATA.forEach((item, index)=>{
            // Status badge
            let statusClass = "border-success text-success";
            if (item.status === "Failed") statusClass = "border-danger text-danger";
            else if (item.status === "Pending") statusClass = "border-warning text-warning";
            // Fullfillment badge
            let fullfillmentClass = "border-success text-success";
            if (item.fullfillment === "Unfulfilled") fullfillmentClass = "border-warning text-warning";
            // Even row background
            let rowClass = "";
            if (index % 2 === 0) rowClass = "bg-highlight";
            else rowClass = "";
            list += `<div class="d-flex justify-content-between align-items-center text-body-emphasis h-12 rounded px-3 ${rowClass}">
                        <div class="w-20 flex-shrink-0">#${item.order}</div>
                        <div class="w-20 flex-shrink-0 d-none d-sm-block">${item.date}</div>
                        <div class="w-16 flex-shrink-0">
                            <span class="badge rounded-pill border flex-shrink-0 ${statusClass}">${item.status}</span>
                        </div>
                        <div class="w-16 flex-shrink-0 d-none d-xxl-block">
                            <span class="badge rounded-pill border flex-shrink-0 ${fullfillmentClass}">${item.fullfillment}</span>
                        </div>
                        <div class="w-20 flex-shrink-0">${item.total}</div>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"g1bww":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "salesHistory", ()=>salesHistory);
parcelHelpers.export(exports, "salesHistoryUpdate", ()=>salesHistoryUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-sales-history");
let salesHistoryChart;
const salesHistory = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.9, colorStart, colorEnd) : null;
    };
    // Chart data
    const LAST_MONTH_DATA = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 19, {
        min: 105,
        max: 109
    });
    const CURRENT_MONTH_DATA = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 19, {
        min: 110,
        max: 115
    });
    const CHART_DATA = {
        datasets: [
            {
                label: "Current Month",
                data: CURRENT_MONTH_DATA,
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(38, 198, 218, 0.2)", "rgba(38, 198, 218, 0)"),
                borderColor: (0, _utils.COLORS).cyan,
                borderWidth: 1.25,
                tension: 0.35,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).cyan,
                pointBorderColor: (0, _utils.COLORS).cyan,
                pointHoverBorderColor: (0, _utils.COLORS).cyan,
                pointHoverBackgroundColor: (0, _utils.COLORS).cyan
            },
            {
                label: "Last Month",
                data: LAST_MONTH_DATA,
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.3)", "rgba(254, 168, 76, 0)"),
                borderColor: "#fea84c",
                borderWidth: 1.25,
                tension: 0.35,
                pointRadius: 0,
                pointBackgroundColor: "#fea84c",
                pointBorderColor: "#fea84c",
                pointHoverBorderColor: "#fea84c",
                pointHoverBackgroundColor: "#fea84c"
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -5
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    type: "time",
                    distribution: "linear",
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 8
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 100,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 7,
                        padding: 8,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) salesHistoryChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const salesHistoryUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(salesHistoryChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"eFMDe":[function(require,module,exports,__globalThis) {
/*!
  * chartjs-adapter-moment v1.0.1
  * https://www.chartjs.org
  * (c) 2022 chartjs-adapter-moment Contributors
  * Released under the MIT license
  */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _moment = require("moment");
var _momentDefault = parcelHelpers.interopDefault(_moment);
var _chartJs = require("chart.js");
const FORMATS = {
    datetime: 'MMM D, YYYY, h:mm:ss a',
    millisecond: 'h:mm:ss.SSS a',
    second: 'h:mm:ss a',
    minute: 'h:mm a',
    hour: 'hA',
    day: 'MMM D',
    week: 'll',
    month: 'MMM YYYY',
    quarter: '[Q]Q - YYYY',
    year: 'YYYY'
};
(0, _chartJs._adapters)._date.override(typeof (0, _momentDefault.default) === 'function' ? {
    _id: 'moment',
    formats: function() {
        return FORMATS;
    },
    parse: function(value, format) {
        if (typeof value === 'string' && typeof format === 'string') value = (0, _momentDefault.default)(value, format);
        else if (!(value instanceof (0, _momentDefault.default))) value = (0, _momentDefault.default)(value);
        return value.isValid() ? value.valueOf() : null;
    },
    format: function(time, format) {
        return (0, _momentDefault.default)(time).format(format);
    },
    add: function(time, amount, unit) {
        return (0, _momentDefault.default)(time).add(amount, unit).valueOf();
    },
    diff: function(max, min, unit) {
        return (0, _momentDefault.default)(max).diff((0, _momentDefault.default)(min), unit);
    },
    startOf: function(time, unit, weekday) {
        time = (0, _momentDefault.default)(time);
        if (unit === 'isoWeek') {
            weekday = Math.trunc(Math.min(Math.max(0, weekday), 6));
            return time.isoWeekday(weekday).startOf('day').valueOf();
        }
        return time.startOf(unit).valueOf();
    },
    endOf: function(time, unit) {
        return (0, _momentDefault.default)(time).endOf(unit).valueOf();
    }
} : {});

},{"moment":"ewrd0","chart.js":"fbE0O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"ewrd0":[function(require,module,exports,__globalThis) {
//! moment.js
//! version : 2.30.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    'use strict';
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) return Object.getOwnPropertyNames(obj).length === 0;
        else {
            var k;
            for(k in obj){
                if (hasOwnProp(obj, k)) return false;
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for(i = 0; i < arrLen; ++i)res.push(fn(arr[i], i));
        return res;
    }
    function extend(a, b) {
        for(var i in b)if (hasOwnProp(b, i)) a[i] = b[i];
        if (hasOwnProp(b, 'toString')) a.toString = b.toString;
        if (hasOwnProp(b, 'valueOf')) a.valueOf = b.valueOf;
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) m._pf = defaultParsingFlags();
        return m._pf;
    }
    var some;
    if (Array.prototype.some) some = Array.prototype.some;
    else some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for(i = 0; i < len; i++){
            if (i in t && fun.call(this, t[i], i, t)) return true;
        }
        return false;
    };
    function isValid(m) {
        var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());
        if (isNowValid) {
            flags = getParsingFlags(m);
            parsedParts = some.call(flags.parsedDateParts, function(i) {
                return i != null;
            });
            isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) m._isValid = isNowValid;
        else return isNowValid;
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) extend(getParsingFlags(m), flags);
        else getParsingFlags(m).userInvalidated = true;
        return m;
    }
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to, from) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from._isAMomentObject)) to._isAMomentObject = from._isAMomentObject;
        if (!isUndefined(from._i)) to._i = from._i;
        if (!isUndefined(from._f)) to._f = from._f;
        if (!isUndefined(from._l)) to._l = from._l;
        if (!isUndefined(from._strict)) to._strict = from._strict;
        if (!isUndefined(from._tzm)) to._tzm = from._tzm;
        if (!isUndefined(from._isUTC)) to._isUTC = from._isUTC;
        if (!isUndefined(from._offset)) to._offset = from._offset;
        if (!isUndefined(from._pf)) to._pf = getParsingFlags(from);
        if (!isUndefined(from._locale)) to._locale = from._locale;
        if (momentPropertiesLen > 0) for(i = 0; i < momentPropertiesLen; i++){
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) to[prop] = val;
        }
        return to;
    }
    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) this._d = new Date(NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) console.warn('Deprecation warning: ' + msg);
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
            if (hooks.deprecationHandler != null) hooks.deprecationHandler(null, msg);
            if (firstTime) {
                var args = [], arg, i, key, argLen = arguments.length;
                for(i = 0; i < argLen; i++){
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for(key in arguments[0])if (hasOwnProp(arguments[0], key)) arg += key + ': ' + arguments[0][key] + ', ';
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else arg = arguments[i];
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) hooks.deprecationHandler(name, msg);
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
        var prop, i;
        for(i in config)if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) this[i] = prop;
            else this['_' + i] = prop;
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for(prop in childConfig)if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) res[prop] = childConfig[prop];
            else delete res[prop];
        }
        for(prop in parentConfig)if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) // make sure changes to properties don't modify parent config
        res[prop] = extend({}, res[prop]);
        return res;
    }
    function Locale(config) {
        if (config != null) this.set(config);
    }
    var keys;
    if (Object.keys) keys = Object.keys;
    else keys = function(obj) {
        var i, res = [];
        for(i in obj)if (hasOwnProp(obj, i)) res.push(i);
        return res;
    };
    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') func = function() {
            return this[callback]();
        };
        if (token) formatTokenFunctions[token] = func;
        if (padded) formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
        if (ordinal) formatTokenFunctions[ordinal] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) return input.replace(/^\[|\]$/g, '');
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for(i = 0, length = array.length; i < length; i++)if (formatTokenFunctions[array[i]]) array[i] = formatTokenFunctions[array[i]];
        else array[i] = removeFormattingTokens(array[i]);
        return function(mom) {
            var output = '', i;
            for(i = 0; i < length; i++)output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            return output;
        };
    }
    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) return m.localeData().invalidDate();
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while(i >= 0 && localFormattingTokens.test(format)){
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) return format;
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') return tok.slice(1);
            return tok;
        }).join('');
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d', defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {
        D: 'date',
        dates: 'date',
        date: 'date',
        d: 'day',
        days: 'day',
        day: 'day',
        e: 'weekday',
        weekdays: 'weekday',
        weekday: 'weekday',
        E: 'isoWeekday',
        isoweekdays: 'isoWeekday',
        isoweekday: 'isoWeekday',
        DDD: 'dayOfYear',
        dayofyears: 'dayOfYear',
        dayofyear: 'dayOfYear',
        h: 'hour',
        hours: 'hour',
        hour: 'hour',
        ms: 'millisecond',
        milliseconds: 'millisecond',
        millisecond: 'millisecond',
        m: 'minute',
        minutes: 'minute',
        minute: 'minute',
        M: 'month',
        months: 'month',
        month: 'month',
        Q: 'quarter',
        quarters: 'quarter',
        quarter: 'quarter',
        s: 'second',
        seconds: 'second',
        second: 'second',
        gg: 'weekYear',
        weekyears: 'weekYear',
        weekyear: 'weekYear',
        GG: 'isoWeekYear',
        isoweekyears: 'isoWeekYear',
        isoweekyear: 'isoWeekYear',
        w: 'week',
        weeks: 'week',
        week: 'week',
        W: 'isoWeek',
        isoweeks: 'isoWeek',
        isoweek: 'isoWeek',
        y: 'year',
        years: 'year',
        year: 'year'
    };
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for(prop in inputObject)if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) normalizedInput[normalizedProp] = inputObject[prop];
        }
        return normalizedInput;
    }
    var priorities = {
        date: 9,
        day: 11,
        weekday: 11,
        isoWeekday: 11,
        dayOfYear: 4,
        hour: 13,
        millisecond: 16,
        minute: 14,
        month: 8,
        quarter: 7,
        second: 15,
        weekYear: 1,
        isoWeekYear: 1,
        week: 5,
        isoWeek: 5,
        year: 1
    };
    function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for(u in unitsObj)if (hasOwnProp(unitsObj, u)) units.push({
            unit: u,
            priority: priorities[u]
        });
        units.sort(function(a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\d?/, match1to2HasZero = /^([1-9]\d|\d)/, regexes;
    regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) return new RegExp(unescapeFormat(token));
        return regexes[token](config._strict, config._locale);
    }
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    function absFloor(number) {
        if (number < 0) // -0 -> 0
        return Math.ceil(number) || 0;
        else return Math.floor(number);
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) value = absFloor(coercedNumber);
        return value;
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback, tokenLen;
        if (typeof token === 'string') token = [
            token
        ];
        if (isNumber(callback)) func = function(input, array) {
            array[callback] = toInt(input);
        };
        tokenLen = token.length;
        for(i = 0; i < tokenLen; i++)tokens[token[i]] = func;
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function(input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) tokens[token](input, config._a, config, token);
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    // FORMATTING
    addFormatToken('Y', 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });
    addFormatToken(0, [
        'YY',
        2
    ], 0, function() {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    // PARSING
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function(input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    // HELPERS
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    // HOOKS
    hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    // MOMENTS
    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
        return function(value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else return get(this, unit);
        };
    }
    function get(mom, unit) {
        if (!mom.isValid()) return NaN;
        var d = mom._d, isUTC = mom._isUTC;
        switch(unit){
            case 'Milliseconds':
                return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
            case 'Seconds':
                return isUTC ? d.getUTCSeconds() : d.getSeconds();
            case 'Minutes':
                return isUTC ? d.getUTCMinutes() : d.getMinutes();
            case 'Hours':
                return isUTC ? d.getUTCHours() : d.getHours();
            case 'Date':
                return isUTC ? d.getUTCDate() : d.getDate();
            case 'Day':
                return isUTC ? d.getUTCDay() : d.getDay();
            case 'Month':
                return isUTC ? d.getUTCMonth() : d.getMonth();
            case 'FullYear':
                return isUTC ? d.getUTCFullYear() : d.getFullYear();
            default:
                return NaN; // Just in case
        }
    }
    function set$1(mom, unit, value) {
        var d, isUTC, year, month, date;
        if (!mom.isValid() || isNaN(value)) return;
        d = mom._d;
        isUTC = mom._isUTC;
        switch(unit){
            case 'Milliseconds':
                return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
            case 'Seconds':
                return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
            case 'Minutes':
                return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
            case 'Hours':
                return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
            case 'Date':
                return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
            // case 'Day': // Not real
            //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
            // case 'Month': // Not used because we need to pass two variables
            //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
            case 'FullYear':
                break; // See below ...
            default:
                return; // Just in case
        }
        year = value;
        month = mom.month();
        date = mom.date();
        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
        isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date);
    }
    // MOMENTS
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) return this[units]();
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
            for(i = 0; i < prioritizedLen; i++)this[prioritized[i].unit](units[prioritized[i].unit]);
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) return this[units](value);
        }
        return this;
    }
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) indexOf = Array.prototype.indexOf;
    else indexOf = function(o) {
        // I know
        var i;
        for(i = 0; i < this.length; ++i){
            if (this[i] === o) return i;
        }
        return -1;
    };
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) return NaN;
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    // FORMATTING
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function() {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function(format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function(format) {
        return this.localeData().months(this, format);
    });
    // PARSING
    addRegexToken('M', match1to2, match1to2NoLeadingZero);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function(isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function(isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        'M',
        'MM'
    ], function(input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function(input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) array[MONTH] = month;
        else getParsingFlags(config).invalidMonth = input;
    });
    // LOCALES
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format) {
        if (!m) return isArray(this._months) ? this._months : this._months['standalone'];
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    function localeMonthsShort(m, format) {
        if (!m) return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for(i = 0; i < 12; ++i){
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) return handleStrictParse.call(this, monthName, format, strict);
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) return i;
            else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) return i;
            else if (!strict && this._monthsParse[i].test(monthName)) return i;
        }
    }
    // MOMENTS
    function setMonth(mom, value) {
        if (!mom.isValid()) // No op
        return mom;
        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) value = toInt(value);
            else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) return mom;
            }
        }
        var month = value, date = mom.date();
        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
        mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else return get(this, 'Month');
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) computeMonthsParse.call(this);
            if (isStrict) return this._monthsShortStrictRegex;
            else return this._monthsShortRegex;
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) this._monthsShortRegex = defaultMonthsShortRegex;
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) computeMonthsParse.call(this);
            if (isStrict) return this._monthsStrictRegex;
            else return this._monthsRegex;
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) this._monthsRegex = defaultMonthsRegex;
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            shortP = regexEscape(this.monthsShort(mom, ''));
            longP = regexEscape(this.months(mom, ''));
            shortPieces.push(shortP);
            longPieces.push(longP);
            mixedPieces.push(longP);
            mixedPieces.push(shortP);
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) date.setFullYear(y);
        } else date = new Date(y, m, d, h, M, s, ms);
        return date;
    }
    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) date.setUTCFullYear(y);
        } else date = new Date(Date.UTC.apply(null, arguments));
        return date;
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    // FORMATTING
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    // PARSING
    addRegexToken('w', match1to2, match1to2NoLeadingZero);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2, match1to2NoLeadingZero);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function(input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    // HELPERS
    // LOCALES
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    // MOMENTS
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    // FORMATTING
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function(format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function(format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function(format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    // PARSING
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function(isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function(isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function(isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function(input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) week.d = weekday;
        else getParsingFlags(config).invalidWeekday = input;
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function(input, week, config, token) {
        week[token] = toInt(input);
    });
    // HELPERS
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') return input;
        if (!isNaN(input)) return parseInt(input, 10);
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') return input;
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') return locale.weekdaysParse(input) % 7 || 7;
        return isNaN(input) ? null : input;
    }
    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'), defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for(i = 0; i < 7; ++i){
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) return handleStrictParse$1.call(this, weekdayName, format, strict);
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) return i;
            else if (!strict && this._weekdaysParse[i].test(weekdayName)) return i;
        }
    }
    // MOMENTS
    function getSetDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var day = get(this, 'Day');
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else return day;
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else return this.day() || 7;
    }
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysStrictRegex;
            else return this._weekdaysRegex;
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) this._weekdaysRegex = defaultWeekdaysRegex;
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysShortStrictRegex;
            else return this._weekdaysShortRegex;
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysMinStrictRegex;
            else return this._weekdaysMinRegex;
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }
    // FORMATTING
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, hFormat);
    addFormatToken('k', [
        'kk',
        2
    ], 0, kFormat);
    addFormatToken('hmm', 0, 0, function() {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function() {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function() {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function() {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem('a', true);
    meridiem('A', false);
    // PARSING
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2, match1to2HasZero);
    addRegexToken('h', match1to2, match1to2NoLeadingZero);
    addRegexToken('k', match1to2, match1to2NoLeadingZero);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'k',
        'kk'
    ], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        'a',
        'A'
    ], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    // LOCALES
    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    getSetHour = makeGetSet('Hours', true);
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) return isLower ? 'pm' : 'PM';
        else return isLower ? 'am' : 'AM';
    }
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    // internal storage for locale config files
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for(i = 0; i < minl; i += 1){
            if (arr1[i] !== arr2[i]) return i;
        }
        return minl;
    }
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while(i < names.length){
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while(j > 0){
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) return locale;
                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) break;
                j--;
            }
            i++;
        }
        return globalLocale;
    }
    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        // Ensure name is available and function returns boolean
        return !!(name && name.match('^[^/\\\\]*$'));
    }
    function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (locales[name] === undefined && true && module && module.exports && isLocaleNameSane(name)) try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = undefined;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
        } catch (e) {
            // mark as not found to avoid repeating expensive file require call causing high CPU
            // when trying to find en-US, en_US, en-us for every format call
            locales[name] = null; // null means not found
        }
        return locales[name];
    }
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) data = getLocale(key);
            else data = defineLocale(key, values);
            if (data) // moment.duration._locale = moment._locale = data;
            globalLocale = data;
            else if (typeof console !== 'undefined' && console.warn) //warn user if arguments are passed but the locale could not be set
            console.warn('Locale ' + key + ' not found. Did you forget to load it?');
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) parentConfig = locales[config.parentLocale]._config;
                else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) parentConfig = locale._config;
                    else {
                        if (!localeFamilies[config.parentLocale]) localeFamilies[config.parentLocale] = [];
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) localeFamilies[name].forEach(function(x) {
                defineLocale(x.name, x.config);
            });
            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            if (locales[name] != null && locales[name].parentLocale != null) // Update existing child locale in-place to avoid memory-leaks
            locales[name].set(mergeConfigs(locales[name]._config, config));
            else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) parentConfig = tmpLocale._config;
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) // updateLocale is called for creating a new locale
                // Set abbr so it will have a name (getters return
                // undefined otherwise).
                config.abbr = name;
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }
            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
                if (name === getSetGlobalLocale()) getSetGlobalLocale(name);
            } else if (locales[name] != null) delete locales[name];
        }
        return locales[name];
    }
    // returns locale data
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) key = key._locale._abbr;
        if (!key) return globalLocale;
        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) return locale;
            key = [
                key
            ];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) overflow = DATE;
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) overflow = WEEK;
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) overflow = WEEKDAY;
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            'YYYY-MM-DD',
            /\d{4}-\d\d-\d\d/
        ],
        [
            'GGGG-[W]WW-E',
            /\d{4}-W\d\d-\d/
        ],
        [
            'GGGG-[W]WW',
            /\d{4}-W\d\d/,
            false
        ],
        [
            'YYYY-DDD',
            /\d{4}-\d{3}/
        ],
        [
            'YYYY-MM',
            /\d{4}-\d\d/,
            false
        ],
        [
            'YYYYYYMMDD',
            /[+-]\d{10}/
        ],
        [
            'YYYYMMDD',
            /\d{8}/
        ],
        [
            'GGGG[W]WWE',
            /\d{4}W\d{3}/
        ],
        [
            'GGGG[W]WW',
            /\d{4}W\d{2}/,
            false
        ],
        [
            'YYYYDDD',
            /\d{7}/
        ],
        [
            'YYYYMM',
            /\d{6}/,
            false
        ],
        [
            'YYYY',
            /\d{4}/,
            false
        ]
    ], // iso time formats and regexes
    isoTimes = [
        [
            'HH:mm:ss.SSSS',
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            'HH:mm:ss,SSSS',
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            'HH:mm:ss',
            /\d\d:\d\d:\d\d/
        ],
        [
            'HH:mm',
            /\d\d:\d\d/
        ],
        [
            'HHmmss.SSSS',
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            'HHmmss,SSSS',
            /\d\d\d\d\d\d,\d+/
        ],
        [
            'HHmmss',
            /\d\d\d\d\d\d/
        ],
        [
            'HHmm',
            /\d\d\d\d/
        ],
        [
            'HH',
            /\d\d/
        ]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -240,
        EST: -300,
        CDT: -300,
        CST: -360,
        MDT: -360,
        MST: -420,
        PDT: -420,
        PST: -480
    };
    // date from iso format
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
            getParsingFlags(config).iso = true;
            for(i = 0, l = isoDatesLen; i < l; i++)if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for(i = 0, l = isoTimesLen; i < l; i++)if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) tzFormat = 'Z';
                else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else config._isValid = false;
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];
        if (secondStr) result.push(parseInt(secondStr, 10));
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) return 2000 + year;
        else if (year <= 999) return 1900 + year;
        return year;
    }
    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) return obsOffsets[obsOffset];
        else if (militaryOffset) // the only allowed military tz is Z
        return 0;
        else {
            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) return;
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else config._isValid = false;
    }
    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        configFromRFC2822(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        if (config._strict) config._isValid = false;
        else // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) return a;
        if (b != null) return b;
        return c;
    }
    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
        ];
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) return;
        currentDate = currentDateArray(config);
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) dayOfYearFromWeekInfo(config);
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) getParsingFlags(config)._overflowDayOfYear = true;
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for(i = 0; i < 3 && config._a[i] == null; ++i)config._a[i] = input[i] = currentDate[i];
        // Zero out whatever was not defaulted, including time
        for(; i < 7; i++)config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        if (config._nextDay) config._a[HOUR] = 24;
        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) getParsingFlags(config).weekdayMismatch = true;
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) weekdayOverflow = true;
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            // Default to current week.
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) weekdayOverflow = true;
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) weekdayOverflow = true;
            } else // default to beginning of week
            weekday = dow;
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) getParsingFlags(config)._overflowWeeks = true;
        else if (weekdayOverflow != null) getParsingFlags(config)._overflowWeekday = true;
        else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    // constant that refers to the ISO standard
    hooks.ISO_8601 = function() {};
    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function() {};
    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for(i = 0; i < tokenLen; i++){
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) getParsingFlags(config).unusedInput.push(skipped);
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) getParsingFlags(config).empty = false;
                else getParsingFlags(config).unusedTokens.push(token);
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) getParsingFlags(config).unusedTokens.push(token);
        }
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) getParsingFlags(config).unusedInput.push(string);
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) getParsingFlags(config).bigHour = undefined;
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) // nothing to do
        return hour;
        if (locale.meridiemHour != null) return locale.meridiemHour(hour, meridiem);
        else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) hour += 12;
            if (!isPm && hour === 12) hour = 0;
            return hour;
        } else // this is not supposed to happen
        return hour;
    }
    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for(i = 0; i < configfLen; i++){
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) tempConfig._useUTC = config._useUTC;
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) validFormatFound = true;
            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) bestFormatIsValid = true;
                }
            } else if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) return;
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map([
            i.year,
            i.month,
            dayOrDate,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function(obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') return createInvalid({
            nullInput: true
        });
        if (typeof input === 'string') config._i = input = config._locale.preparse(input);
        if (isMoment(input)) return new Moment(checkOverflow(input));
        else if (isDate(input)) config._d = input;
        else if (isArray(format)) configFromStringAndArray(config);
        else if (format) configFromStringAndFormat(config);
        else configFromInput(config);
        if (!isValid(config)) config._d = null;
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) config._d = new Date(hooks.now());
        else if (isDate(input)) config._d = new Date(input.valueOf());
        else if (typeof input === 'string') configFromString(config);
        else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) configFromObject(config);
        else if (isNumber(input)) // from milliseconds
        config._d = new Date(input);
        else hooks.createFromInputFallback(config);
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) input = undefined;
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other < this ? this : other;
        else return createInvalid();
    }), prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other > this ? this : other;
        else return createInvalid();
    });
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) moments = moments[0];
        if (!moments.length) return createLocal();
        res = moments[0];
        for(i = 1; i < moments.length; ++i)if (!moments[i].isValid() || moments[i][fn](res)) res = moments[i];
        return res;
    }
    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    var now = function() {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond'
    ];
    function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for(key in m){
            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) return false;
        }
        for(i = 0; i < orderLen; ++i)if (m[ordering[i]]) {
            if (unitHasDecimal) return false; // only allow non-integers for smallest unit
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) unitHasDecimal = true;
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 3600000; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) return Math.round(-1 * number) * -1;
        else return Math.round(number);
    }
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for(i = 0; i < len; i++)if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) diffs++;
        return diffs + lengthDiff;
    }
    // FORMATTING
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function() {
            var offset = this.utcOffset(), sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset('Z', ':');
    offset('ZZ', '');
    // PARSING
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    // HELPERS
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher), chunk, parts, minutes;
        if (matches === null) return null;
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || [
            '-',
            0,
            0
        ];
        minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else return createLocal(input).local();
    }
    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }
    // HOOKS
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function() {};
    // MOMENTS
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) return input != null ? this : NaN;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) return this;
            } else if (Math.abs(input) < 16 && !keepMinutes) input = input * 60;
            if (!this._isUTC && keepLocalTime) localAdjust = getDateOffset(this);
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) this.add(localAdjust, 'm');
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else return this._isUTC ? offset : getDateOffset(this);
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') input = -input;
            this.utcOffset(input, keepLocalTime);
            return this;
        } else return -this.utcOffset();
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) this.subtract(getDateOffset(this), 'm');
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) this.utcOffset(this._tzm, false, true);
        else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) this.utcOffset(tZone);
            else this.utcOffset(0, true);
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) return false;
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) return this._isDSTShifted;
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else this._isDSTShifted = false;
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, // matching against regexp is expensive, do it on demand
        match = null, sign, ret, diffRes;
        if (isDuration(input)) duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
        };
        else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) duration[key] = +input;
            else duration.milliseconds = +input;
        } else if (match = aspNetRegex.exec(input)) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (match = isoRegex.exec(input)) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) // checks for null or undefined
        duration = {};
        else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) ret._locale = input._locale;
        if (isDuration(input) && hasOwnProp(input, '_isValid')) ret._isValid = input._isValid;
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) --res.months;
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) return {
            milliseconds: 0,
            months: 0
        };
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) res = positiveMomentsDifference(base, other);
        else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) // No op
        return;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) setMonth(mom, get(mom, 'Month') + months * isAdding);
        if (days) set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        if (milliseconds) mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        if (updateOffset) hooks.updateOffset(mom, days || months);
    }
    var add = createAdder(1, 'add'), subtract = createAdder(-1, 'subtract');
    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }
    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    }
    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            'years',
            'year',
            'y',
            'months',
            'month',
            'M',
            'days',
            'day',
            'd',
            'dates',
            'date',
            'D',
            'hours',
            'hour',
            'h',
            'minutes',
            'minute',
            'm',
            'seconds',
            'second',
            's',
            'milliseconds',
            'millisecond',
            'ms'
        ], i, property, propertyLen = properties.length;
        for(i = 0; i < propertyLen; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
        }).length === 0;
        return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            'sameDay',
            'nextDay',
            'lastDay',
            'nextWeek',
            'lastWeek',
            'sameElse'
        ], i, property;
        for(i = 0; i < properties.length; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse', output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') return this.valueOf() > localInput.valueOf();
        else return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') return this.valueOf() < localInput.valueOf();
        else return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) return false;
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') return this.valueOf() === localInput.valueOf();
        else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) return NaN;
        that = cloneWithOffset(input, this);
        if (!that.isValid()) return NaN;
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch(units){
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        if (a.date() < b.date()) // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) return null;
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) return this.toDate().toISOString();
            else return new Date(this.valueOf() + this.utcOffset() * 60000).toISOString().replace('Z', formatMoment(m, 'Z'));
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */ function inspect() {
        if (!this.isValid()) return 'moment.invalid(/* ' + this._i + ' */)';
        var func = 'moment', zone = '', prefix, year, datetime, suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
        if (!inputString) inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            to: this,
            from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            from: this,
            to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;
        if (key === undefined) return this._locale._abbr;
        else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) this._locale = newLocaleData;
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function(key) {
        if (key === undefined) return this.localeData();
        else return this.locale(key);
    });
    function localeData() {
        return this._locale;
    }
    var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = 3506328 * MS_PER_HOUR;
    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        else return new Date(y, m, d).valueOf();
    }
    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        else return Date.UTC(y, m, d);
    }
    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    addFormatToken('y', [
        'y',
        1
    ], 'yo', 'eraYear');
    addFormatToken('y', [
        'yy',
        2
    ], 0, 'eraYear');
    addFormatToken('y', [
        'yyy',
        3
    ], 0, 'eraYear');
    addFormatToken('y', [
        'yyyy',
        4
    ], 0, 'eraYear');
    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);
    addParseToken([
        'N',
        'NN',
        'NNN',
        'NNNN',
        'NNNNN'
    ], function(input, array, config, token) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) getParsingFlags(config).era = era;
        else getParsingFlags(config).invalidEra = input;
    });
    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);
    addParseToken([
        'y',
        'yy',
        'yyy',
        'yyyy'
    ], YEAR);
    addParseToken([
        'yo'
    ], function(input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) match = input.match(config._locale._eraYearOrdinalRegex);
        if (config._locale.eraYearOrdinalParse) array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        else array[YEAR] = parseInt(input, 10);
    });
    function localeEras(m, format) {
        var i, l, date, eras = this._eras || getLocale('en')._eras;
        for(i = 0, l = eras.length; i < l; ++i){
            switch(typeof eras[i].since){
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }
            switch(typeof eras[i].until){
                case 'undefined':
                    eras[i].until = Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }
    function localeErasParse(eraName, format, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for(i = 0, l = eras.length; i < l; ++i){
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();
            if (strict) switch(format){
                case 'N':
                case 'NN':
                case 'NNN':
                    if (abbr === eraName) return eras[i];
                    break;
                case 'NNNN':
                    if (name === eraName) return eras[i];
                    break;
                case 'NNNNN':
                    if (narrow === eraName) return eras[i];
                    break;
            }
            else if ([
                name,
                abbr,
                narrow
            ].indexOf(eraName) >= 0) return eras[i];
        }
    }
    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === undefined) return hooks(era.since).year();
        else return hooks(era.since).year() + (year - era.offset) * dir;
    }
    function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].name;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].name;
        }
        return '';
    }
    function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].narrow;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].narrow;
        }
        return '';
    }
    function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].abbr;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].abbr;
        }
        return '';
    }
    function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            dir = eras[i].since <= eras[i].until ? 1 : -1;
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
        return this.year();
    }
    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) computeErasParse.call(this);
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) computeErasParse.call(this);
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) computeErasParse.call(this);
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
        for(i = 0, l = eras.length; i < l; ++i){
            erasName = regexEscape(eras[i].name);
            erasAbbr = regexEscape(eras[i].abbr);
            erasNarrow = regexEscape(eras[i].narrow);
            namePieces.push(erasName);
            abbrPieces.push(erasAbbr);
            narrowPieces.push(erasNarrow);
            mixedPieces.push(erasName);
            mixedPieces.push(erasAbbr);
            mixedPieces.push(erasNarrow);
        }
        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
    }
    // FORMATTING
    addFormatToken(0, [
        'gg',
        2
    ], 0, function() {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function() {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    // ALIASES
    // PARSING
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function(input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function(input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    // MOMENTS
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) return weekOfYear(this, dow, doy).year;
        else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) week = weeksTarget;
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    // FORMATTING
    addFormatToken('Q', 0, 'Qo', 'quarter');
    // PARSING
    addRegexToken('Q', match1);
    addParseToken('Q', function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    // MOMENTS
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    // FORMATTING
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    // PARSING
    addRegexToken('D', match1to2, match1to2NoLeadingZero);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function(isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    // MOMENTS
    var getSetDayOfMonth = makeGetSet('Date', true);
    // FORMATTING
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    // PARSING
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function(input, array, config) {
        config._dayOfYear = toInt(input);
    });
    // HELPERS
    // MOMENTS
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    // FORMATTING
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    // PARSING
    addRegexToken('m', match1to2, match1to2HasZero);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    // MOMENTS
    var getSetMinute = makeGetSet('Minutes', false);
    // FORMATTING
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    // PARSING
    addRegexToken('s', match1to2, match1to2HasZero);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    // MOMENTS
    var getSetSecond = makeGetSet('Seconds', false);
    // FORMATTING
    addFormatToken('S', 0, 0, function() {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function() {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function() {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function() {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function() {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function() {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function() {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function() {
        return this.millisecond() * 1000000;
    });
    // PARSING
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token, getSetMillisecond;
    for(token = 'SSSS'; token.length <= 9; token += 'S')addRegexToken(token, matchUnsigned);
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for(token = 'S'; token.length <= 9; token += 'S')addParseToken(token, parseMs);
    getSetMillisecond = makeGetSet('Milliseconds', false);
    // FORMATTING
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    // MOMENTS
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) proto[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return 'Moment<' + this.format() + '>';
    };
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale(), utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) return get$1(format, index, field, 'month');
        var i, out = [];
        for(i = 0; i < 12; i++)out[i] = get$1(format, i, field, 'month');
        return out;
    }
    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];
        if (index != null) return get$1(format, (index + shift) % 7, field, 'day');
        for(i = 0; i < 7; i++)out[i] = get$1(format, (i + shift) % 7, field, 'day');
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD'
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC'
            }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    // Side effect imports
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) return Math.floor(number);
        else return Math.ceil(number);
    }
    function bubble() {
        var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays;
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) return NaN;
        var days, months, milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch(units){
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch(units){
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }
    function makeAs(alias) {
        return function() {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms'), asSeconds = makeAs('s'), asMinutes = makeAs('m'), asHours = makeAs('h'), asDays = makeAs('d'), asWeeks = makeAs('w'), asMonths = makeAs('M'), asQuarters = makeAs('Q'), asYears = makeAs('y'), valueOf$1 = asMilliseconds;
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
        return function() {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds = makeGetter('milliseconds'), seconds = makeGetter('seconds'), minutes = makeGetter('minutes'), hours = makeGetter('hours'), days = makeGetter('days'), months = makeGetter('months'), years = makeGetter('years');
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
    };
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), weeks = round(duration.as('w')), years = round(duration.as('y')), a = seconds <= thresholds.ss && [
            's',
            seconds
        ] || seconds < thresholds.s && [
            'ss',
            seconds
        ] || minutes <= 1 && [
            'm'
        ] || minutes < thresholds.m && [
            'mm',
            minutes
        ] || hours <= 1 && [
            'h'
        ] || hours < thresholds.h && [
            'hh',
            hours
        ] || days <= 1 && [
            'd'
        ] || days < thresholds.d && [
            'dd',
            days
        ];
        if (thresholds.w != null) a = a || weeks <= 1 && [
            'w'
        ] || weeks < thresholds.w && [
            'ww',
            weeks
        ];
        a = a || months <= 1 && [
            'M'
        ] || months < thresholds.M && [
            'MM',
            months
        ] || years <= 1 && [
            'y'
        ] || [
            'yy',
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) return round;
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) return false;
        if (limit === undefined) return thresholds[threshold];
        thresholds[threshold] = limit;
        if (threshold === 's') thresholds.ss = limit - 1;
        return true;
    }
    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) return this.localeData().invalidDate();
        var withSuffix = false, th = thresholds, locale, output;
        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') withSuffix = argWithSuffix;
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) th.ss = argThresholds.s - 1;
        }
        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);
        if (withSuffix) output = locale.pastFuture(+this, output);
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) return this.localeData().invalidDate();
        var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    // FORMATTING
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    // PARSING
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function(input, array, config) {
        config._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = '2.30.1';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        DATE: 'YYYY-MM-DD',
        TIME: 'HH:mm',
        TIME_SECONDS: 'HH:mm:ss',
        TIME_MS: 'HH:mm:ss.SSS',
        WEEK: 'GGGG-[W]WW',
        MONTH: 'YYYY-MM'
    };
    return hooks;
});

},{}],"fbE0O":[function(require,module,exports,__globalThis) {
/*!
 * Chart.js v4.4.9
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Animation", ()=>Animation);
parcelHelpers.export(exports, "Animations", ()=>Animations);
parcelHelpers.export(exports, "ArcElement", ()=>ArcElement);
parcelHelpers.export(exports, "BarController", ()=>BarController);
parcelHelpers.export(exports, "BarElement", ()=>BarElement);
parcelHelpers.export(exports, "BasePlatform", ()=>BasePlatform);
parcelHelpers.export(exports, "BasicPlatform", ()=>BasicPlatform);
parcelHelpers.export(exports, "BubbleController", ()=>BubbleController);
parcelHelpers.export(exports, "CategoryScale", ()=>CategoryScale);
parcelHelpers.export(exports, "Chart", ()=>Chart);
parcelHelpers.export(exports, "Colors", ()=>plugin_colors);
parcelHelpers.export(exports, "DatasetController", ()=>DatasetController);
parcelHelpers.export(exports, "Decimation", ()=>plugin_decimation);
parcelHelpers.export(exports, "DomPlatform", ()=>DomPlatform);
parcelHelpers.export(exports, "DoughnutController", ()=>DoughnutController);
parcelHelpers.export(exports, "Element", ()=>Element);
parcelHelpers.export(exports, "Filler", ()=>index);
parcelHelpers.export(exports, "Interaction", ()=>Interaction);
parcelHelpers.export(exports, "Legend", ()=>plugin_legend);
parcelHelpers.export(exports, "LineController", ()=>LineController);
parcelHelpers.export(exports, "LineElement", ()=>LineElement);
parcelHelpers.export(exports, "LinearScale", ()=>LinearScale);
parcelHelpers.export(exports, "LogarithmicScale", ()=>LogarithmicScale);
parcelHelpers.export(exports, "PieController", ()=>PieController);
parcelHelpers.export(exports, "PointElement", ()=>PointElement);
parcelHelpers.export(exports, "PolarAreaController", ()=>PolarAreaController);
parcelHelpers.export(exports, "RadarController", ()=>RadarController);
parcelHelpers.export(exports, "RadialLinearScale", ()=>RadialLinearScale);
parcelHelpers.export(exports, "Scale", ()=>Scale);
parcelHelpers.export(exports, "ScatterController", ()=>ScatterController);
parcelHelpers.export(exports, "SubTitle", ()=>plugin_subtitle);
parcelHelpers.export(exports, "Ticks", ()=>(0, _helpersDatasetJs.aM));
parcelHelpers.export(exports, "TimeScale", ()=>TimeScale);
parcelHelpers.export(exports, "TimeSeriesScale", ()=>TimeSeriesScale);
parcelHelpers.export(exports, "Title", ()=>plugin_title);
parcelHelpers.export(exports, "Tooltip", ()=>plugin_tooltip);
parcelHelpers.export(exports, "_adapters", ()=>adapters);
parcelHelpers.export(exports, "_detectPlatform", ()=>_detectPlatform);
parcelHelpers.export(exports, "animator", ()=>animator);
parcelHelpers.export(exports, "controllers", ()=>controllers);
parcelHelpers.export(exports, "defaults", ()=>(0, _helpersDatasetJs.d));
parcelHelpers.export(exports, "elements", ()=>elements);
parcelHelpers.export(exports, "layouts", ()=>layouts);
parcelHelpers.export(exports, "plugins", ()=>plugins);
parcelHelpers.export(exports, "registerables", ()=>registerables);
parcelHelpers.export(exports, "registry", ()=>registry);
parcelHelpers.export(exports, "scales", ()=>scales);
var _helpersDatasetJs = require("./chunks/helpers.dataset.js");
var _color = require("@kurkle/color");
class Animator {
    constructor(){
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
    }
    _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn)=>fn({
                chart,
                initial: anims.initial,
                numSteps,
                currentStep: Math.min(date - anims.start, numSteps)
            }));
    }
    _refresh() {
        if (this._request) return;
        this._running = true;
        this._request = (0, _helpersDatasetJs.r).call(window, ()=>{
            this._update();
            this._request = null;
            if (this._running) this._refresh();
        });
    }
    _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart)=>{
            if (!anims.running || !anims.items.length) return;
            const items = anims.items;
            let i = items.length - 1;
            let draw = false;
            let item;
            for(; i >= 0; --i){
                item = items[i];
                if (item._active) {
                    if (item._total > anims.duration) anims.duration = item._total;
                    item.tick(date);
                    draw = true;
                } else {
                    items[i] = items[items.length - 1];
                    items.pop();
                }
            }
            if (draw) {
                chart.draw();
                this._notify(chart, anims, date, 'progress');
            }
            if (!items.length) {
                anims.running = false;
                this._notify(chart, anims, date, 'complete');
                anims.initial = false;
            }
            remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) this._running = false;
    }
    _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
            anims = {
                running: false,
                initial: true,
                items: [],
                listeners: {
                    complete: [],
                    progress: []
                }
            };
            charts.set(chart, anims);
        }
        return anims;
    }
    listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
    }
    add(chart, items) {
        if (!items || !items.length) return;
        this._getAnims(chart).items.push(...items);
    }
    has(chart) {
        return this._getAnims(chart).items.length > 0;
    }
    start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) return;
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
        this._refresh();
    }
    running(chart) {
        if (!this._running) return false;
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) return false;
        return true;
    }
    stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) return;
        const items = anims.items;
        let i = items.length - 1;
        for(; i >= 0; --i)items[i].cancel();
        anims.items = [];
        this._notify(chart, anims, Date.now(), 'complete');
    }
    remove(chart) {
        return this._charts.delete(chart);
    }
}
var animator = /* #__PURE__ */ new Animator();
const transparent = 'transparent';
const interpolators = {
    boolean (from, to, factor) {
        return factor > 0.5 ? to : from;
    },
    color (from, to, factor) {
        const c0 = (0, _helpersDatasetJs.c)(from || transparent);
        const c1 = c0.valid && (0, _helpersDatasetJs.c)(to || transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
    },
    number (from, to, factor) {
        return from + (to - from) * factor;
    }
};
class Animation {
    constructor(cfg, target, prop, to){
        const currentValue = target[prop];
        to = (0, _helpersDatasetJs.a)([
            cfg.to,
            to,
            currentValue,
            cfg.from
        ]);
        const from = (0, _helpersDatasetJs.a)([
            cfg.from,
            currentValue,
            to
        ]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = (0, _helpersDatasetJs.e)[cfg.easing] || (0, _helpersDatasetJs.e).linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
    }
    active() {
        return this._active;
    }
    update(cfg, to, date) {
        if (this._active) {
            this._notify(false);
            const currentValue = this._target[this._prop];
            const elapsed = date - this._start;
            const remain = this._duration - elapsed;
            this._start = date;
            this._duration = Math.floor(Math.max(remain, cfg.duration));
            this._total += elapsed;
            this._loop = !!cfg.loop;
            this._to = (0, _helpersDatasetJs.a)([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            this._from = (0, _helpersDatasetJs.a)([
                cfg.from,
                currentValue,
                to
            ]);
        }
    }
    cancel() {
        if (this._active) {
            this.tick(Date.now());
            this._active = false;
            this._notify(false);
        }
    }
    tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || elapsed < duration);
        if (!this._active) {
            this._target[prop] = to;
            this._notify(true);
            return;
        }
        if (elapsed < 0) {
            this._target[prop] = from;
            return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
    }
    wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej)=>{
            promises.push({
                res,
                rej
            });
        });
    }
    _notify(resolved) {
        const method = resolved ? 'res' : 'rej';
        const promises = this._promises || [];
        for(let i = 0; i < promises.length; i++)promises[i][method]();
    }
}
class Animations {
    constructor(chart, config){
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
    }
    configure(config) {
        if (!(0, _helpersDatasetJs.i)(config)) return;
        const animationOptions = Object.keys((0, _helpersDatasetJs.d).animation);
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key)=>{
            const cfg = config[key];
            if (!(0, _helpersDatasetJs.i)(cfg)) return;
            const resolved = {};
            for (const option of animationOptions)resolved[option] = cfg[option];
            ((0, _helpersDatasetJs.b)(cfg.properties) && cfg.properties || [
                key
            ]).forEach((prop)=>{
                if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);
            });
        });
    }
    _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) return [];
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) awaitAll(target.options.$animations, newOptions).then(()=>{
            target.options = newOptions;
        }, ()=>{});
        return animations;
    }
    _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for(i = props.length - 1; i >= 0; --i){
            const prop = props[i];
            if (prop.charAt(0) === '$') continue;
            if (prop === 'options') {
                animations.push(...this._animateOptions(target, values));
                continue;
            }
            const value = values[prop];
            let animation = running[prop];
            const cfg = animatedProps.get(prop);
            if (animation) {
                if (cfg && animation.active()) {
                    animation.update(cfg, value, date);
                    continue;
                } else animation.cancel();
            }
            if (!cfg || !cfg.duration) {
                target[prop] = value;
                continue;
            }
            running[prop] = animation = new Animation(cfg, target, prop, value);
            animations.push(animation);
        }
        return animations;
    }
    update(target, values) {
        if (this._properties.size === 0) {
            Object.assign(target, values);
            return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
            animator.add(this._chart, animations);
            return true;
        }
    }
}
function awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for(let i = 0; i < keys.length; i++){
        const anim = animations[keys[i]];
        if (anim && anim.active()) running.push(anim.wait());
    }
    return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
    if (!newOptions) return;
    let options = target.options;
    if (!options) {
        target.options = newOptions;
        return;
    }
    if (options.$shared) target.options = options = Object.assign({}, options, {
        $shared: false,
        $animations: {}
    });
    return options;
}
function scaleClip(scale, allowedOverflow) {
    const opts = scale && scale.options || {};
    const reverse = opts.reverse;
    const min = opts.min === undefined ? allowedOverflow : 0;
    const max = opts.max === undefined ? allowedOverflow : 0;
    return {
        start: reverse ? max : min,
        end: reverse ? min : max
    };
}
function defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) return false;
    const x = scaleClip(xScale, allowedOverflow);
    const y = scaleClip(yScale, allowedOverflow);
    return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
    };
}
function toClip(value) {
    let t, r, b, l;
    if ((0, _helpersDatasetJs.i)(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
    } else t = r = b = l = value;
    return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
    };
}
function getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i, ilen;
    for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);
    return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
    const keys = stack.keys;
    const singleMode = options.mode === 'single';
    let i, ilen, datasetIndex, otherValue;
    if (value === null) return;
    let found = false;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
            found = true;
            if (options.all) continue;
            break;
        }
        otherValue = stack.values[datasetIndex];
        if ((0, _helpersDatasetJs.g)(otherValue) && (singleMode || value === 0 || (0, _helpersDatasetJs.s)(value) === (0, _helpersDatasetJs.s)(otherValue))) value += otherValue;
    }
    if (!found && !options.all) return 0;
    return value;
}
function convertObjectDataToArray(data, meta) {
    const { iScale, vScale } = meta;
    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';
    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i, ilen, key;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        key = keys[i];
        adata[i] = {
            [iAxisKey]: key,
            [vAxisKey]: data[key]
        };
    }
    return adata;
}
function isStacked(scale, meta) {
    const stacked = scale && scale.options.stacked;
    return stacked || stacked === undefined && meta.stack !== undefined;
}
function getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
    const { min, max, minDefined, maxDefined } = scale.getUserBounds();
    return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
    return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
        const value = stack[meta.index];
        if (positive && value > 0 || !positive && value < 0) return meta.index;
    }
    return null;
}
function updateStacks(controller, parsed) {
    const { chart, _cachedMeta: meta } = controller;
    const stacks = chart._stacks || (chart._stacks = {});
    const { iScale, vScale, index: datasetIndex } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for(let i = 0; i < ilen; ++i){
        const item = parsed[i];
        const { [iAxis]: index, [vAxis]: value } = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
        const visualValues = stack._visualValues || (stack._visualValues = {});
        visualValues[datasetIndex] = value;
    }
}
function getFirstScaleId(chart, axis) {
    const scales = chart.scales;
    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
    return (0, _helpersDatasetJs.j)(parent, {
        active: false,
        dataset: undefined,
        datasetIndex: index,
        index,
        mode: 'default',
        type: 'dataset'
    });
}
function createDataContext(parent, index, element) {
    return (0, _helpersDatasetJs.j)(parent, {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: 'default',
        type: 'data'
    });
}
function clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) return;
    items = items || meta._parsed;
    for (const parsed of items){
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;
        delete stacks[axis][datasetIndex];
        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) delete stacks[axis]._visualValues[datasetIndex];
    }
}
const isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';
const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
        keys: getSortedDatasetIndices(chart, true),
        values: null
    };
class DatasetController {
    static defaults = {};
    static datasetElementType = null;
    static dataElementType = null;
    constructor(chart, datasetIndex){
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.datasetElementType = new.target.datasetElementType;
        this.dataElementType = new.target.dataElementType;
        this.initialize();
    }
    initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
        if (this.options.fill && !this.chart.isPluginEnabled('filler')) console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
    updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) clearStacks(this._cachedMeta);
        this.index = datasetIndex;
    }
    linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;
        const xid = meta.xAxisID = (0, _helpersDatasetJs.v)(dataset.xAxisID, getFirstScaleId(chart, 'x'));
        const yid = meta.yAxisID = (0, _helpersDatasetJs.v)(dataset.yAxisID, getFirstScaleId(chart, 'y'));
        const rid = meta.rAxisID = (0, _helpersDatasetJs.v)(dataset.rAxisID, getFirstScaleId(chart, 'r'));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
        return this.chart.data.datasets[this.index];
    }
    getMeta() {
        return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
    }
    _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
        this._update('reset');
    }
    _destroy() {
        const meta = this._cachedMeta;
        if (this._data) (0, _helpersDatasetJs.u)(this._data, this);
        if (meta._stacked) clearStacks(meta);
    }
    _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if ((0, _helpersDatasetJs.i)(data)) {
            const meta = this._cachedMeta;
            this._data = convertObjectDataToArray(data, meta);
        } else if (_data !== data) {
            if (_data) {
                (0, _helpersDatasetJs.u)(_data, this);
                const meta = this._cachedMeta;
                clearStacks(meta);
                meta._parsed = [];
            }
            if (data && Object.isExtensible(data)) (0, _helpersDatasetJs.l)(data, this);
            this._syncList = [];
            this._data = data;
        }
    }
    addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) meta.dataset = new this.datasetElementType();
    }
    buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
            stackChanged = true;
            clearStacks(meta);
            meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) {
            updateStacks(this, meta._parsed);
            meta._stacked = isStacked(meta.vScale, meta);
        }
    }
    configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
    }
    parse(start, count) {
        const { _cachedMeta: meta, _data: data } = this;
        const { iScale, _stacked } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
            meta._parsed = data;
            meta._sorted = true;
            parsed = data;
        } else {
            if ((0, _helpersDatasetJs.b)(data[start])) parsed = this.parseArrayData(meta, data, start, count);
            else if ((0, _helpersDatasetJs.i)(data[start])) parsed = this.parseObjectData(meta, data, start, count);
            else parsed = this.parsePrimitiveData(meta, data, start, count);
            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
            for(i = 0; i < count; ++i){
                meta._parsed[i + start] = cur = parsed[i];
                if (sorted) {
                    if (isNotInOrderComparedToPrev()) sorted = false;
                    prev = cur;
                }
            }
            meta._sorted = sorted;
        }
        if (_stacked) updateStacks(this, parsed);
    }
    parsePrimitiveData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            parsed[i] = {
                [iAxis]: singleScale || iScale.parse(labels[index], index),
                [vAxis]: vScale.parse(data[index], index)
            };
        }
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse(item[0], index),
                y: yScale.parse(item[1], index)
            };
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const { xAxisKey = 'x', yAxisKey = 'y' } = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse((0, _helpersDatasetJs.f)(item, xAxisKey), index),
                y: yScale.parse((0, _helpersDatasetJs.f)(item, yAxisKey), index)
            };
        }
        return parsed;
    }
    getParsed(index) {
        return this._cachedMeta._parsed[index];
    }
    getDataElement(index) {
        return this._cachedMeta.data[index];
    }
    applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
            keys: getSortedDatasetIndices(chart, true),
            values: parsed._stacks[scale.axis]._visualValues
        };
        return applyStack(stack, value, meta.index, {
            mode
        });
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
            stack.values = values;
            value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
    }
    getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
            parsed = _parsed[i];
            const otherValue = parsed[otherScale.axis];
            return !(0, _helpersDatasetJs.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for(i = 0; i < ilen; ++i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            if (sorted) break;
        }
        if (sorted) for(i = ilen - 1; i >= 0; --i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
        }
        return range;
    }
    getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for(i = 0, ilen = parsed.length; i < ilen; ++i){
            value = parsed[i][scale.axis];
            if ((0, _helpersDatasetJs.g)(value)) values.push(value);
        }
        return values;
    }
    getMaxOverflow() {
        return false;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
        };
    }
    _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || 'default');
        meta._clip = toClip((0, _helpersDatasetJs.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
    update(mode) {}
    draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) meta.dataset.draw(ctx, area, start, count);
        for(i = start; i < start + count; ++i){
            const element = elements[i];
            if (element.hidden) continue;
            if (element.active && drawActiveElementsOnTop) active.push(element);
            else element.draw(ctx, area);
        }
        for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);
    }
    getStyle(index, active) {
        const mode = active ? 'active' : 'default';
        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
    }
    getContext(index, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index >= 0 && index < this._cachedMeta.data.length) {
            const element = this._cachedMeta.data[index];
            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
            context.parsed = this.getParsed(index);
            context.raw = dataset.data[index];
            context.index = context.dataIndex = index;
        } else {
            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
            context.dataset = dataset;
            context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
    }
    resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
    resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
    }
    _resolveElementOptions(elementType, mode = 'default', index) {
        const active = mode === 'active';
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + '-' + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && (0, _helpersDatasetJs.h)(index);
        if (cached) return cloneIfNotShared(cached, sharing);
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
            `${elementType}Hover`,
            'hover',
            elementType,
            ''
        ] : [
            elementType,
            ''
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys((0, _helpersDatasetJs.d).elements[elementType]);
        const context = ()=>this.getContext(index, active, mode);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
            values.$shared = sharing;
            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
    }
    _resolveAnimations(index, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) return cached;
        let options;
        if (chart.options.animation !== false) {
            const config = this.chart.config;
            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
            options = config.createResolver(scopes, this.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);
        return animations;
    }
    getSharedOptions(options) {
        if (!options.$shared) return;
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
    }
    includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
    _getSharedOptions(start, mode) {
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const previouslySharedOptions = this._sharedOptions;
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        return {
            sharedOptions,
            includeOptions
        };
    }
    updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) Object.assign(element, properties);
        else this._resolveAnimations(index, mode).update(element, properties);
    }
    updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
    _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
            options: !active && this.getSharedOptions(options) || options
        });
    }
    removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', false);
    }
    setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', true);
    }
    _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, 'active', false);
    }
    _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, 'active', true);
    }
    _resyncElements(resetNewElements) {
        const data = this._data;
        const elements = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList)this[method](arg1, arg2);
        this._syncList = [];
        const numMeta = elements.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) this.parse(0, count);
        if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);
        else if (numData < numMeta) this._removeElements(numData, numMeta - numData);
    }
    _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr)=>{
            arr.length += count;
            for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];
        };
        move(data);
        for(i = start; i < end; ++i)data[i] = new this.dataElementType();
        if (this._parsing) move(meta._parsed);
        this.parse(start, count);
        if (resetNewElements) this.updateElements(data, start, count, 'reset');
    }
    updateElements(element, start, count, mode) {}
    _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
            const removed = meta._parsed.splice(start, count);
            if (meta._stacked) clearStacks(meta, removed);
        }
        meta.data.splice(start, count);
    }
    _sync(args) {
        if (this._parsing) this._syncList.push(args);
        else {
            const [method, arg1, arg2] = args;
            this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
            this.index,
            ...args
        ]);
    }
    _onDataPush() {
        const count = arguments.length;
        this._sync([
            '_insertElements',
            this.getDataset().data.length - count,
            count
        ]);
    }
    _onDataPop() {
        this._sync([
            '_removeElements',
            this._cachedMeta.data.length - 1,
            1
        ]);
    }
    _onDataShift() {
        this._sync([
            '_removeElements',
            0,
            1
        ]);
    }
    _onDataSplice(start, count) {
        if (count) this._sync([
            '_removeElements',
            start,
            count
        ]);
        const newCount = arguments.length - 2;
        if (newCount) this._sync([
            '_insertElements',
            start,
            newCount
        ]);
    }
    _onDataUnshift() {
        this._sync([
            '_insertElements',
            0,
            arguments.length
        ]);
    }
}
function getAllScaleValues(scale, type) {
    if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        scale._cache.$bar = (0, _helpersDatasetJs._)(values.sort((a, b)=>a - b));
    }
    return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
    const scale = meta.iScale;
    const values = getAllScaleValues(scale, meta.type);
    let min = scale._length;
    let i, ilen, curr, prev;
    const updateMinAndPrev = ()=>{
        if (curr === 32767 || curr === -32768) return;
        if ((0, _helpersDatasetJs.h)(prev)) min = Math.min(min, Math.abs(curr - prev) || min);
        prev = curr;
    };
    for(i = 0, ilen = values.length; i < ilen; ++i){
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
    }
    prev = undefined;
    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
    }
    return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if ((0, _helpersDatasetJs.k)(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
    } else {
        size = thickness * stackCount;
        ratio = 1;
    }
    return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - size / 2
    };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index];
    let prev = index > 0 ? pixels[index - 1] : null;
    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    if (next === null) next = curr + curr - prev;
    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
    };
}
function parseFloatBar(entry, item, vScale, i) {
    const startValue = vScale.parse(entry[0], i);
    const endValue = vScale.parse(entry[1], i);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
    };
}
function parseValue(entry, item, vScale, i) {
    if ((0, _helpersDatasetJs.b)(entry)) parseFloatBar(entry, item, vScale, i);
    else item[vScale.axis] = vScale.parse(entry, i);
    return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i, ilen, item, entry;
    for(i = start, ilen = start + count; i < ilen; ++i){
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
    }
    return parsed;
}
function isFloatBar(custom) {
    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
    if (size !== 0) return (0, _helpersDatasetJs.s)(size);
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
    let reverse, start, end, top, bottom;
    if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = 'left';
        end = 'right';
    } else {
        reverse = properties.base < properties.y;
        start = 'bottom';
        end = 'top';
    }
    if (reverse) {
        top = 'end';
        bottom = 'start';
    } else {
        top = 'start';
        bottom = 'end';
    }
    return {
        start,
        end,
        reverse,
        top,
        bottom
    };
}
function setBorderSkipped(properties, options, stack, index) {
    let edge = options.borderSkipped;
    const res = {};
    if (!edge) {
        properties.borderSkipped = res;
        return;
    }
    if (edge === true) {
        properties.borderSkipped = {
            top: true,
            right: true,
            bottom: true,
            left: true
        };
        return;
    }
    const { start, end, reverse, top, bottom } = borderProps(properties);
    if (edge === 'middle' && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index) edge = top;
        else if ((stack._bottom || 0) === index) edge = bottom;
        else {
            res[parseEdge(bottom, start, end, reverse)] = true;
            edge = top;
        }
    }
    res[parseEdge(edge, start, end, reverse)] = true;
    properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
    if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
    } else edge = startEnd(edge, a, b);
    return edge;
}
function swap(orig, v1, v2) {
    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
    return v === 'start' ? start : v === 'end' ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
    static id = 'bar';
    static defaults = {
        datasetElementType: false,
        dataElementType: 'bar',
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'base',
                    'width',
                    'height'
                ]
            }
        }
    };
    static overrides = {
        scales: {
            _index_: {
                type: 'category',
                offset: true,
                grid: {
                    offset: true
                }
            },
            _value_: {
                type: 'linear',
                beginAtZero: true
            }
        }
    };
    parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseObjectData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const { xAxisKey = 'x', yAxisKey = 'y' } = this._parsing;
        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for(i = start, ilen = start + count; i < ilen; ++i){
            obj = data[i];
            item = {};
            item[iScale.axis] = iScale.parse((0, _helpersDatasetJs.f)(obj, iAxisKey), i);
            parsed.push(parseValue((0, _helpersDatasetJs.f)(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
            range.min = Math.min(range.min, custom.min);
            range.max = Math.max(range.max, custom.max);
        }
    }
    getMaxOverflow() {
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const { iScale, vScale } = meta;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
            value
        };
    }
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
    }
    update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start, count, mode) {
        const reset = mode === 'reset';
        const { index, _cachedMeta: { vScale } } = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        for(let i = start; i < start + count; i++){
            const parsed = this.getParsed(i);
            const vpixels = reset || (0, _helpersDatasetJs.k)(parsed[vScale.axis]) ? {
                base,
                head: base
            } : this._calculateBarValuePixels(i);
            const ipixels = this._calculateBarIndexPixels(i, ruler);
            const stack = (parsed._stacks || {})[vScale.axis];
            const properties = {
                horizontal,
                base: vpixels.base,
                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                x: horizontal ? vpixels.head : ipixels.center,
                y: horizontal ? ipixels.center : vpixels.head,
                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
            const options = properties.options || bars[i].options;
            setBorderSkipped(properties, options, stack, index);
            setInflateAmount(properties, options, ruler.ratio);
            this.updateElement(bars[i], i, properties, mode);
        }
    }
    _getStacks(last, dataIndex) {
        const { iScale } = this._cachedMeta;
        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
        const stacked = iScale.options.stacked;
        const stacks = [];
        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);
        const iScaleValue = currentParsed && currentParsed[iScale.axis];
        const skipNull = (meta)=>{
            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);
            const val = parsed && parsed[meta.vScale.axis];
            if ((0, _helpersDatasetJs.k)(val) || isNaN(val)) return true;
        };
        for (const meta of metasets){
            if (dataIndex !== undefined && skipNull(meta)) continue;
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) stacks.push(meta.stack);
            if (meta.index === last) break;
        }
        if (!stacks.length) stacks.push(undefined);
        return stacks;
    }
    _getStackCount(index) {
        return this._getStacks(undefined, index).length;
    }
    _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = name !== undefined ? stacks.indexOf(name) : -1;
        return index === -1 ? stacks.length - 1 : index;
    }
    _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(meta);
        return {
            min,
            pixels,
            start: iScale._startPixel,
            end: iScale._endPixel,
            stackCount: this._getStackCount(),
            scale: iScale,
            grouped: opts.grouped,
            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
    }
    _calculateBarValuePixels(index) {
        const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
            start = length - value;
            length = value;
        }
        if (floating) {
            value = custom.barStart;
            length = custom.barEnd - custom.barStart;
            if (value !== 0 && (0, _helpersDatasetJs.s)(value) !== (0, _helpersDatasetJs.s)(custom.barEnd)) start = 0;
            start += value;
        }
        const startValue = !(0, _helpersDatasetJs.k)(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) head = vScale.getPixelForValue(start + length);
        else head = base;
        size = head - base;
        if (Math.abs(size) < minBarLength) {
            size = barSign(size, vScale, actualBase) * minBarLength;
            if (value === actualBase) base -= size / 2;
            const startPixel = vScale.getPixelForDecimal(0);
            const endPixel = vScale.getPixelForDecimal(1);
            const min = Math.min(startPixel, endPixel);
            const max = Math.max(startPixel, endPixel);
            base = Math.max(Math.min(base, max), min);
            head = base + size;
            if (_stacked && !floating) parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
        }
        if (base === vScale.getPixelForValue(actualBase)) {
            const halfGrid = (0, _helpersDatasetJs.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
            base += halfGrid;
            size -= halfGrid;
        }
        return {
            size,
            base,
            head,
            center: head + size / 2
        };
    }
    _calculateBarIndexPixels(index, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = (0, _helpersDatasetJs.v)(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
            center = range.start + range.chunk * stackIndex + range.chunk / 2;
            size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
        };
    }
    draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) rects[i].draw(this._ctx);
    }
}
class BubbleController extends DatasetController {
    static id = 'bubble';
    static defaults = {
        datasetElementType: false,
        dataElementType: 'point',
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'borderWidth',
                    'radius'
                ]
            }
        }
    };
    static overrides = {
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
    }
    parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersDatasetJs.v)(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersDatasetJs.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        return max > 0 && max;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
            label: labels[index] || '',
            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
        };
    }
    update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const { iScale, vScale } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const parsed = !reset && this.getParsed(i);
            const properties = {};
            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
            properties.skip = isNaN(iPixel) || isNaN(vPixel);
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                if (reset) properties.options.radius = 0;
            }
            this.updateElement(point, i, properties, mode);
        }
    }
    resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) values = Object.assign({}, values, {
            $shared: false
        });
        const radius = values.radius;
        if (mode !== 'active') values.radius = 0;
        values.radius += (0, _helpersDatasetJs.v)(parsed && parsed._custom, radius);
        return values;
    }
}
function getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < (0, _helpersDatasetJs.T)) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b)=>(0, _helpersDatasetJs.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b)=>(0, _helpersDatasetJs.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax((0, _helpersDatasetJs.H), startY, endY);
        const minX = calcMin((0, _helpersDatasetJs.P), startX, endX);
        const minY = calcMin((0, _helpersDatasetJs.P) + (0, _helpersDatasetJs.H), startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
    }
    return {
        ratioX,
        ratioY,
        offsetX,
        offsetY
    };
}
class DoughnutController extends DatasetController {
    static id = 'doughnut';
    static defaults = {
        datasetElementType: false,
        dataElementType: 'arc',
        animation: {
            animateRotate: true,
            animateScale: false
        },
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'circumference',
                    'endAngle',
                    'innerRadius',
                    'outerRadius',
                    'startAngle',
                    'x',
                    'y',
                    'offset',
                    'borderWidth',
                    'spacing'
                ]
            }
        },
        cutout: '50%',
        rotation: 0,
        circumference: 360,
        radius: '100%',
        spacing: 0,
        indexAxis: 'r'
    };
    static descriptors = {
        _scriptable: (name)=>name !== 'spacing',
        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')
    };
    static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle, color } } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
    }
    linkScales() {}
    parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) meta._parsed = data;
        else {
            let getter = (i)=>+data[i];
            if ((0, _helpersDatasetJs.i)(data[start])) {
                const { key = 'value' } = this._parsing;
                getter = (i)=>+(0, _helpersDatasetJs.f)(data[i], key);
            }
            let i, ilen;
            for(i = start, ilen = start + count; i < ilen; ++i)meta._parsed[i] = getter(i);
        }
    }
    _getRotation() {
        return (0, _helpersDatasetJs.t)(this.options.rotation - 90);
    }
    _getCircumference() {
        return (0, _helpersDatasetJs.t)(this.options.circumference);
    }
    _getRotationExtents() {
        let min = (0, _helpersDatasetJs.T);
        let max = -(0, _helpersDatasetJs.T);
        for(let i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
            const controller = this.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
        }
        return {
            rotation: min,
            circumference: max - min
        };
    }
    update(mode) {
        const chart = this.chart;
        const { chartArea } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min((0, _helpersDatasetJs.m)(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference, rotation } = this._getRotationExtents();
        const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = (0, _helpersDatasetJs.n)(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;
        return this.calculateCircumference(meta._parsed[i] * circumference / (0, _helpersDatasetJs.T));
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === 'reset';
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        let startAngle = this._getRotation();
        let i;
        for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);
        for(i = start; i < start + count; ++i){
            const circumference = this._circumference(i, reset);
            const arc = arcs[i];
            const properties = {
                x: centerX + this.offsetX,
                y: centerY + this.offsetY,
                startAngle,
                endAngle: startAngle + circumference,
                circumference,
                outerRadius,
                innerRadius
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
            startAngle += circumference;
            this.updateElement(arc, i, properties, mode);
        }
    }
    calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for(i = 0; i < metaData.length; i++){
            const value = meta._parsed[i];
            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);
        }
        return total;
    }
    calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) return (0, _helpersDatasetJs.T) * (Math.abs(value) / total);
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersDatasetJs.o)(meta._parsed[index], chart.options.locale);
        return {
            label: labels[index] || '',
            value
        };
    }
    getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);
                arcs = meta.data;
                controller = meta.controller;
                break;
            }
        }
        if (!arcs) return 0;
        for(i = 0, ilen = arcs.length; i < ilen; ++i){
            options = controller.resolveDataElementOptions(i);
            if (options.borderAlign !== 'inner') max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
        return max;
    }
    getMaxOffset(arcs) {
        let max = 0;
        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
            const options = this.resolveDataElementOptions(i);
            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
    }
    _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for(let i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);
        return ringWeightOffset;
    }
    _getRingWeight(datasetIndex) {
        return Math.max((0, _helpersDatasetJs.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
}
class LineController extends DatasetController {
    static id = 'line';
    static defaults = {
        datasetElementType: 'line',
        dataElementType: 'point',
        showLine: true,
        spanGaps: false
    };
    static overrides = {
        scales: {
            _index_: {
                type: 'category'
            },
            _value_: {
                type: 'linear'
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line, data: points = [], _dataset } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersDatasetJs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersDatasetJs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) options.borderWidth = 0;
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
            animated: !animationsDisabled,
            options
        }, mode);
        this.updateElements(points, start, count, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersDatasetJs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
        const end = start + count;
        const pointsCount = points.length;
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = 0; i < pointsCount; ++i){
            const point = points[i];
            const properties = directUpdate ? point : {};
            if (i < start || i >= end) {
                properties.skip = true;
                continue;
            }
            const parsed = this.getParsed(i);
            const nullData = (0, _helpersDatasetJs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
    }
}
class PolarAreaController extends DatasetController {
    static id = 'polarArea';
    static defaults = {
        dataElementType: 'arc',
        animation: {
            animateRotate: true,
            animateScale: true
        },
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'startAngle',
                    'endAngle',
                    'innerRadius',
                    'outerRadius'
                ]
            }
        },
        indexAxis: 'r',
        startAngle: 0
    };
    static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle, color } } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        },
        scales: {
            r: {
                type: 'radialLinear',
                angleLines: {
                    display: false
                },
                beginAtZero: true,
                grid: {
                    circular: true
                },
                pointLabels: {
                    display: false
                },
                startAngle: 0
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersDatasetJs.o)(meta._parsed[index].r, chart.options.locale);
        return {
            label: labels[index] || '',
            value
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersDatasetJs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    getMinMax() {
        const meta = this._cachedMeta;
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index)=>{
            const parsed = this.getParsed(index).r;
            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
                if (parsed < range.min) range.min = parsed;
                if (parsed > range.max) range.max = parsed;
            }
        });
        return range;
    }
    _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === 'reset';
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * (0, _helpersDatasetJs.P);
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);
        for(i = start; i < start + count; i++){
            const arc = arcs[i];
            let startAngle = angle;
            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
            angle = endAngle;
            if (reset) {
                if (animationOpts.animateScale) outerRadius = 0;
                if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;
            }
            const properties = {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius,
                startAngle,
                endAngle,
                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)
            };
            this.updateElement(arc, i, properties, mode);
        }
    }
    countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index)=>{
            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) count++;
        });
        return count;
    }
    _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index) ? (0, _helpersDatasetJs.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
    }
}
class PieController extends DoughnutController {
    static id = 'pie';
    static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: '100%'
    };
}
class RadarController extends DatasetController {
    static id = 'radar';
    static defaults = {
        datasetElementType: 'line',
        dataElementType: 'point',
        indexAxis: 'r',
        showLine: true,
        elements: {
            line: {
                fill: 'start'
            }
        }
    };
    static overrides = {
        aspectRatio: 1,
        scales: {
            r: {
                type: 'radialLinear'
            }
        }
    };
    getLabelAndValue(index) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: vScale.getLabels()[index],
            value: '' + vScale.getLabelForValue(parsed[vScale.axis])
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersDatasetJs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== 'resize') {
            const options = this.resolveDatasetElementOptions(mode);
            if (!this.options.showLine) options.borderWidth = 0;
            const properties = {
                _loop: true,
                _fullLoop: labels.length === points.length,
                options
            };
            this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset = mode === 'reset';
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
            const x = reset ? scale.xCenter : pointPosition.x;
            const y = reset ? scale.yCenter : pointPosition.y;
            const properties = {
                x,
                y,
                angle: pointPosition.angle,
                skip: isNaN(x) || isNaN(y),
                options
            };
            this.updateElement(point, i, properties, mode);
        }
    }
}
class ScatterController extends DatasetController {
    static id = 'scatter';
    static defaults = {
        datasetElementType: false,
        dataElementType: 'point',
        showLine: false,
        fill: false
    };
    static overrides = {
        interaction: {
            mode: 'point'
        },
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    };
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        return {
            label: labels[index] || '',
            value: '(' + x + ', ' + y + ')'
        };
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { data: points = [] } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersDatasetJs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersDatasetJs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        if (this.options.showLine) {
            if (!this.datasetElementType) this.addElements();
            const { dataset: line, _dataset } = meta;
            line._chart = this.chart;
            line._datasetIndex = this.index;
            line._decimated = !!_dataset._decimated;
            line.points = points;
            const options = this.resolveDatasetElementOptions(mode);
            options.segment = this.options.segment;
            this.updateElement(line, undefined, {
                animated: !animationsDisabled,
                options
            }, mode);
        } else if (this.datasetElementType) {
            delete meta.dataset;
            this.datasetElementType = false;
        }
        this.updateElements(points, start, count, mode);
    }
    addElements() {
        const { showLine } = this.options;
        if (!this.datasetElementType && showLine) this.datasetElementType = this.chart.registry.getElement('line');
        super.addElements();
    }
    updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersDatasetJs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {};
            const nullData = (0, _helpersDatasetJs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const data = meta.data || [];
        if (!this.options.showLine) {
            let max = 0;
            for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
            return max > 0 && max;
        }
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
}
var controllers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BarController: BarController,
    BubbleController: BubbleController,
    DoughnutController: DoughnutController,
    LineController: LineController,
    PieController: PieController,
    PolarAreaController: PolarAreaController,
    RadarController: RadarController,
    ScatterController: ScatterController
});
/**
 * @namespace Chart._adapters
 * @since 2.8.0
 * @private
 */ function abstract() {
    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
}
/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */ class DateAdapterBase {
    /**
   * Override default date adapter methods.
   * Accepts type parameter to define options type.
   * @example
   * Chart._adapters._date.override<{myAdapterOption: string}>({
   *   init() {
   *     console.log(this.options.myAdapterOption);
   *   }
   * })
   */ static override(members) {
        Object.assign(DateAdapterBase.prototype, members);
    }
    options;
    constructor(options){
        this.options = options || {};
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    init() {}
    formats() {
        return abstract();
    }
    parse() {
        return abstract();
    }
    format() {
        return abstract();
    }
    add() {
        return abstract();
    }
    diff() {
        return abstract();
    }
    startOf() {
        return abstract();
    }
    endOf() {
        return abstract();
    }
}
var adapters = {
    _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
    const { controller, data, _sorted } = metaset;
    const iScale = controller._cachedMeta.iScale;
    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;
    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? (0, _helpersDatasetJs.A) : (0, _helpersDatasetJs.B);
        if (!intersect) {
            const result = lookupMethod(data, axis, value);
            if (spanGaps) {
                const { vScale } = controller._cachedMeta;
                const { _parsed } = metaset;
                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!(0, _helpersDatasetJs.k)(point[vScale.axis]));
                result.lo -= Math.max(0, distanceToDefinedLo);
                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!(0, _helpersDatasetJs.k)(point[vScale.axis]));
                result.hi += Math.max(0, distanceToDefinedHi);
            }
            return result;
        } else if (controller._sharedOptions) {
            const el = data[0];
            const range = typeof el.getRange === 'function' && el.getRange(axis);
            if (range) {
                const start = lookupMethod(data, axis, value - range);
                const end = lookupMethod(data, axis, value + range);
                return {
                    lo: start.lo,
                    hi: end.hi
                };
            }
        }
    }
    return {
        lo: 0,
        hi: data.length - 1
    };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
        const { index, data } = metasets[i];
        const { lo, hi } = binarySearch(metasets[i], axis, value, intersect);
        for(let j = lo; j <= hi; ++j){
            const element = data[j];
            if (!element.skip) handler(element, index, j);
        }
    }
}
function getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf('x') !== -1;
    const useY = axis.indexOf('y') !== -1;
    return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) return items;
    const evaluationFunc = function(element, datasetIndex, index) {
        if (!includeInvisible && !(0, _helpersDatasetJs.C)(element, chart.chartArea, 0)) return;
        if (element.inRange(position.x, position.y, useFinalPosition)) items.push({
            element,
            datasetIndex,
            index
        });
    };
    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index) {
        const { startAngle, endAngle } = element.getProps([
            'startAngle',
            'endAngle'
        ], useFinalPosition);
        const { angle } = (0, _helpersDatasetJs.D)(element, {
            x: position.x,
            y: position.y
        });
        if ((0, _helpersDatasetJs.p)(angle, startAngle, endAngle)) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index) {
        const inRange = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange) return;
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
        if (!pointInArea && !inRange) return;
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
            items = [
                {
                    element,
                    datasetIndex,
                    index
                }
            ];
            minDistance = distance;
        } else if (distance === minDistance) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) return [];
    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
    let intersectsItem = false;
    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {
            items.push({
                element,
                datasetIndex,
                index
            });
            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
        }
    });
    if (intersect && !intersectsItem) return [];
    return items;
}
var Interaction = {
    evaluateInteractionItems,
    modes: {
        index (chart, e, options, useFinalPosition) {
            const position = (0, _helpersDatasetJs.z)(e, chart);
            const axis = options.axis || 'x';
            const includeInvisible = options.includeInvisible || false;
            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            const elements = [];
            if (!items.length) return [];
            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                const index = items[0].index;
                const element = meta.data[index];
                if (element && !element.skip) elements.push({
                    element,
                    datasetIndex: meta.index,
                    index
                });
            });
            return elements;
        },
        dataset (chart, e, options, useFinalPosition) {
            const position = (0, _helpersDatasetJs.z)(e, chart);
            const axis = options.axis || 'xy';
            const includeInvisible = options.includeInvisible || false;
            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            if (items.length > 0) {
                const datasetIndex = items[0].datasetIndex;
                const data = chart.getDatasetMeta(datasetIndex).data;
                items = [];
                for(let i = 0; i < data.length; ++i)items.push({
                    element: data[i],
                    datasetIndex,
                    index: i
                });
            }
            return items;
        },
        point (chart, e, options, useFinalPosition) {
            const position = (0, _helpersDatasetJs.z)(e, chart);
            const axis = options.axis || 'xy';
            const includeInvisible = options.includeInvisible || false;
            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
        nearest (chart, e, options, useFinalPosition) {
            const position = (0, _helpersDatasetJs.z)(e, chart);
            const axis = options.axis || 'xy';
            const includeInvisible = options.includeInvisible || false;
            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
        },
        x (chart, e, options, useFinalPosition) {
            const position = (0, _helpersDatasetJs.z)(e, chart);
            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
        },
        y (chart, e, options, useFinalPosition) {
            const position = (0, _helpersDatasetJs.z)(e, chart);
            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
        }
    }
};
const STATIC_POSITIONS = [
    'left',
    'top',
    'right',
    'bottom'
];
function filterByPosition(array, position) {
    return array.filter((v)=>v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
    return array.sort((a, b)=>{
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
}
function wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i, ilen, box, pos, stack, stackWeight;
    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
        box = boxes[i];
        ({ position: pos, options: { stack, stackWeight = 1 } } = box);
        layoutBoxes.push({
            index: i,
            box,
            pos,
            horizontal: box.isHorizontal(),
            weight: box.weight,
            stack: stack && pos + stack,
            stackWeight
        });
    }
    return layoutBoxes;
}
function buildStacks(layouts) {
    const stacks = {};
    for (const wrap of layouts){
        const { stack, pos, stackWeight } = wrap;
        if (!stack || !STATIC_POSITIONS.includes(pos)) continue;
        const _stack = stacks[stack] || (stacks[stack] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
        });
        _stack.count++;
        _stack.weight += stackWeight;
    }
    return stacks;
}
function setLayoutDims(layouts, params) {
    const stacks = buildStacks(layouts);
    const { vBoxMaxWidth, hBoxMaxHeight } = params;
    let i, ilen, layout;
    for(i = 0, ilen = layouts.length; i < ilen; ++i){
        layout = layouts[i];
        const { fullSize } = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
            layout.height = hBoxMaxHeight;
        } else {
            layout.width = vBoxMaxWidth;
            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
    }
    return stacks;
}
function buildLayoutBoxes(boxes) {
    const layoutBoxes = wrapBoxes(boxes);
    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
    return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, 'chartArea'),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
    };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
    const { pos, box } = layout;
    const maxPadding = chartArea.maxPadding;
    if (!(0, _helpersDatasetJs.i)(pos)) {
        if (layout.size) chartArea[pos] -= layout.size;
        const stack = stacks[layout.stack] || {
            size: 0,
            count: 1
        };
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
    }
    if (box.getPadding) updateMaxPadding(maxPadding, box.getPadding());
    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? {
        same: widthChanged,
        other: heightChanged
    } : {
        same: heightChanged,
        other: widthChanged
    };
}
function handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
    }
    chartArea.y += updatePos('top');
    chartArea.x += updatePos('left');
    updatePos('right');
    updatePos('bottom');
}
function getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions) {
        const margin = {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        positions.forEach((pos)=>{
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
    }
    return horizontal ? marginForPositions([
        'left',
        'right'
    ]) : marginForPositions([
        'top',
        'bottom'
    ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i, ilen, layout, box, refit, changed;
    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
        layout = boxes[i];
        box = layout.box;
        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
        const { same, other } = updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) refitBoxes.push(layout);
    }
    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x, y } = chartArea;
    for (const layout of boxes){
        const box = layout.box;
        const stack = stacks[layout.stack] || {
            count: 1,
            placed: 0,
            weight: 1
        };
        const weight = layout.stackWeight / stack.weight || 1;
        if (layout.horizontal) {
            const width = chartArea.w * weight;
            const height = stack.size || box.height;
            if ((0, _helpersDatasetJs.h)(stack.start)) y = stack.start;
            if (box.fullSize) setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
            else setBoxDims(box, chartArea.left + stack.placed, y, width, height);
            stack.start = y;
            stack.placed += width;
            y = box.bottom;
        } else {
            const height = chartArea.h * weight;
            const width = stack.size || box.width;
            if ((0, _helpersDatasetJs.h)(stack.start)) x = stack.start;
            if (box.fullSize) setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
            else setBoxDims(box, x, chartArea.top + stack.placed, width, height);
            stack.start = x;
            stack.placed += height;
            x = box.right;
        }
    }
    chartArea.x = x;
    chartArea.y = y;
}
var layouts = {
    addBox (chart, item) {
        if (!chart.boxes) chart.boxes = [];
        item.fullSize = item.fullSize || false;
        item.position = item.position || 'top';
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
            return [
                {
                    z: 0,
                    draw (chartArea) {
                        item.draw(chartArea);
                    }
                }
            ];
        };
        chart.boxes.push(item);
    },
    removeBox (chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) chart.boxes.splice(index, 1);
    },
    configure (chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
    },
    update (chart, width, height, minPadding) {
        if (!chart) return;
        const padding = (0, _helpersDatasetJs.E)(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        (0, _helpersDatasetJs.F)(chart.boxes, (box)=>{
            if (typeof box.beforeLayout === 'function') box.beforeLayout();
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            availableHeight,
            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
            hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, (0, _helpersDatasetJs.E)(minPadding));
        const chartArea = Object.assign({
            maxPadding,
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) fitBoxes(verticalBoxes, chartArea, params, stacks);
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h,
            height: chartArea.h,
            width: chartArea.w
        };
        (0, _helpersDatasetJs.F)(boxes.chartArea, (layout)=>{
            const box = layout.box;
            Object.assign(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h, {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            });
        });
    }
};
class BasePlatform {
    acquireContext(canvas, aspectRatio) {}
    releaseContext(context) {
        return false;
    }
    addEventListener(chart, type, listener) {}
    removeEventListener(chart, type, listener) {}
    getDevicePixelRatio() {
        return 1;
    }
    getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
            width,
            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
    }
    isAttached(canvas) {
        return true;
    }
    updateConfig(config) {}
}
class BasicPlatform extends BasePlatform {
    acquireContext(item) {
        return item && item.getContext && item.getContext('2d') || null;
    }
    updateConfig(config) {
        config.options.animation = false;
    }
}
const EXPANDO_KEY = '$chartjs';
const EVENT_TYPES = {
    touchstart: 'mousedown',
    touchmove: 'mousemove',
    touchend: 'mouseup',
    pointerenter: 'mouseenter',
    pointerdown: 'mousedown',
    pointermove: 'mousemove',
    pointerup: 'mouseup',
    pointerleave: 'mouseout',
    pointerout: 'mouseout'
};
const isNullOrEmpty = (value)=>value === null || value === '';
function initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute('height');
    const renderWidth = canvas.getAttribute('width');
    canvas[EXPANDO_KEY] = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || 'block';
    style.boxSizing = style.boxSizing || 'border-box';
    if (isNullOrEmpty(renderWidth)) {
        const displayWidth = (0, _helpersDatasetJs.J)(canvas, 'width');
        if (displayWidth !== undefined) canvas.width = displayWidth;
    }
    if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === '') canvas.height = canvas.width / (aspectRatio || 2);
        else {
            const displayHeight = (0, _helpersDatasetJs.J)(canvas, 'height');
            if (displayHeight !== undefined) canvas.height = displayHeight;
        }
    }
    return canvas;
}
const eventListenerOptions = (0, _helpersDatasetJs.K) ? {
    passive: true
} : false;
function addListener(node, type, listener) {
    if (node) node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
    if (chart && chart.canvas) chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
    const type = EVENT_TYPES[event.type] || event.type;
    const { x, y } = (0, _helpersDatasetJs.z)(event, chart);
    return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
}
function nodeListContains(nodeList, canvas) {
    for (const node of nodeList){
        if (node === canvas || node.contains(canvas)) return true;
    }
}
function createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
function createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === oldDevicePixelRatio) return;
    oldDevicePixelRatio = dpr;
    drpListeningCharts.forEach((resize, chart)=>{
        if (chart.currentDevicePixelRatio !== dpr) resize();
    });
}
function listenDevicePixelRatioChanges(chart, resize) {
    if (!drpListeningCharts.size) window.addEventListener('resize', onWindowResize);
    drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
    drpListeningCharts.delete(chart);
    if (!drpListeningCharts.size) window.removeEventListener('resize', onWindowResize);
}
function createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && (0, _helpersDatasetJs.I)(canvas);
    if (!container) return;
    const resize = (0, _helpersDatasetJs.L)((width, height)=>{
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) listener();
    }, window);
    const observer = new ResizeObserver((entries)=>{
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) return;
        resize(width, height);
    });
    observer.observe(container);
    listenDevicePixelRatioChanges(chart, resize);
    return observer;
}
function releaseObserver(chart, type, observer) {
    if (observer) observer.disconnect();
    if (type === 'resize') unlistenDevicePixelRatioChanges(chart);
}
function createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = (0, _helpersDatasetJs.L)((event)=>{
        if (chart.ctx !== null) listener(fromNativeEvent(event, chart));
    }, chart);
    addListener(canvas, type, proxy);
    return proxy;
}
class DomPlatform extends BasePlatform {
    acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext('2d');
        if (context && context.canvas === canvas) {
            initCanvas(canvas, aspectRatio);
            return context;
        }
        return null;
    }
    releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) return false;
        const initial = canvas[EXPANDO_KEY].initial;
        [
            'height',
            'width'
        ].forEach((prop)=>{
            const value = initial[prop];
            if ((0, _helpersDatasetJs.k)(value)) canvas.removeAttribute(prop);
            else canvas.setAttribute(prop, value);
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key)=>{
            canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
    }
    addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
            attach: createAttachObserver,
            detach: createDetachObserver,
            resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
    }
    removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) return;
        const handlers = {
            attach: releaseObserver,
            detach: releaseObserver,
            resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
    }
    getDevicePixelRatio() {
        return window.devicePixelRatio;
    }
    getMaximumSize(canvas, width, height, aspectRatio) {
        return (0, _helpersDatasetJs.G)(canvas, width, height, aspectRatio);
    }
    isAttached(canvas) {
        const container = canvas && (0, _helpersDatasetJs.I)(canvas);
        return !!(container && container.isConnected);
    }
}
function _detectPlatform(canvas) {
    if (!(0, _helpersDatasetJs.M)() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) return BasicPlatform;
    return DomPlatform;
}
class Element {
    static defaults = {};
    static defaultRoutes = undefined;
    x;
    y;
    active = false;
    options;
    $animations;
    tooltipPosition(useFinalPosition) {
        const { x, y } = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    hasValue() {
        return (0, _helpersDatasetJs.x)(this.x) && (0, _helpersDatasetJs.x)(this.y);
    }
    getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) // let's not create an object, if not needed
        return this;
        const ret = {};
        props.forEach((prop)=>{
            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
    }
}
function autoSkip(scale, ticks) {
    const tickOpts = scale.options.ticks;
    const determinedMaxTicks = determineMaxTicks(scale);
    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
    }
    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
    if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, (0, _helpersDatasetJs.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        skip(ticks, newTicks, spacing, last, (0, _helpersDatasetJs.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
    }
    skip(ticks, newTicks, spacing);
    return newTicks;
}
function determineMaxTicks(scale) {
    const offset = scale.options.offset;
    const tickLength = scale._tickSize();
    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
    const evenMajorSpacing = getEvenSpacing(majorIndices);
    const spacing = ticks.length / ticksLimit;
    if (!evenMajorSpacing) return Math.max(spacing, 1);
    const factors = (0, _helpersDatasetJs.N)(evenMajorSpacing);
    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
        const factor = factors[i];
        if (factor > spacing) return factor;
    }
    return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
    const result = [];
    let i, ilen;
    for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);
    return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
    let count = 0;
    let next = majorIndices[0];
    let i;
    spacing = Math.ceil(spacing);
    for(i = 0; i < ticks.length; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = majorIndices[count * spacing];
    }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
    const start = (0, _helpersDatasetJs.v)(majorStart, 0);
    const end = Math.min((0, _helpersDatasetJs.v)(majorEnd, ticks.length), ticks.length);
    let count = 0;
    let length, i, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
    }
    next = start;
    while(next < 0){
        count++;
        next = Math.round(start + count * spacing);
    }
    for(i = Math.max(start, 0); i < end; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = Math.round(start + count * spacing);
    }
}
function getEvenSpacing(arr) {
    const len = arr.length;
    let i, diff;
    if (len < 2) return false;
    for(diff = arr[0], i = 1; i < len; ++i){
        if (arr[i] - arr[i - 1] !== diff) return false;
    }
    return diff;
}
const reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;
const offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i = 0;
    for(; i < len; i += increment)result.push(arr[Math.floor(i)]);
    return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
    const length = scale.ticks.length;
    const validIndex = Math.min(index, length - 1);
    const start = scale._startPixel;
    const end = scale._endPixel;
    const epsilon = 1e-6;
    let lineValue = scale.getPixelForTick(validIndex);
    let offset;
    if (offsetGridLines) {
        if (length === 1) offset = Math.max(lineValue - start, end - lineValue);
        else if (index === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;
        else offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) return;
    }
    return lineValue;
}
function garbageCollect(caches, length) {
    (0, _helpersDatasetJs.F)(caches, (cache)=>{
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
            for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];
            gc.splice(0, gcLen);
        }
    });
}
function getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
    if (!options.display) return 0;
    const font = (0, _helpersDatasetJs.a0)(options.font, fallback);
    const padding = (0, _helpersDatasetJs.E)(options.padding);
    const lines = (0, _helpersDatasetJs.b)(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
    return (0, _helpersDatasetJs.j)(parent, {
        scale,
        type: 'scale'
    });
}
function createTickContext(parent, index, tick) {
    return (0, _helpersDatasetJs.j)(parent, {
        tick,
        index,
        type: 'tick'
    });
}
function titleAlign(align, position, reverse) {
    let ret = (0, _helpersDatasetJs.a1)(align);
    if (reverse && position !== 'right' || !reverse && position === 'right') ret = reverseAlign(ret);
    return ret;
}
function titleArgs(scale, offset, position, align) {
    const { top, left, bottom, right, chart } = scale;
    const { chartArea, scales } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale.isHorizontal()) {
        titleX = (0, _helpersDatasetJs.a2)(align, left, right);
        if ((0, _helpersDatasetJs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === 'center') titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        else titleY = offsetFromEdge(scale, position, offset);
        maxWidth = right - left;
    } else {
        if ((0, _helpersDatasetJs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === 'center') titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        else titleX = offsetFromEdge(scale, position, offset);
        titleY = (0, _helpersDatasetJs.a2)(align, bottom, top);
        rotation = position === 'left' ? -(0, _helpersDatasetJs.H) : (0, _helpersDatasetJs.H);
    }
    return {
        titleX,
        titleY,
        maxWidth,
        rotation
    };
}
class Scale extends Element {
    constructor(cfg){
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
    }
    init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
    }
    parse(raw, index) {
        return raw;
    }
    getUserBounds() {
        let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
        _userMin = (0, _helpersDatasetJs.O)(_userMin, Number.POSITIVE_INFINITY);
        _userMax = (0, _helpersDatasetJs.O)(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = (0, _helpersDatasetJs.O)(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = (0, _helpersDatasetJs.O)(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
            min: (0, _helpersDatasetJs.O)(_userMin, _suggestedMin),
            max: (0, _helpersDatasetJs.O)(_userMax, _suggestedMax),
            minDefined: (0, _helpersDatasetJs.g)(_userMin),
            maxDefined: (0, _helpersDatasetJs.g)(_userMax)
        };
    }
    getMinMax(canStack) {
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) return {
            min,
            max
        };
        const metas = this.getMatchingVisibleMetas();
        for(let i = 0, ilen = metas.length; i < ilen; ++i){
            range = metas[i].controller.getMinMax(this, canStack);
            if (!minDefined) min = Math.min(min, range.min);
            if (!maxDefined) max = Math.max(max, range.max);
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
            min: (0, _helpersDatasetJs.O)(min, (0, _helpersDatasetJs.O)(max, min)),
            max: (0, _helpersDatasetJs.O)(max, (0, _helpersDatasetJs.O)(min, max))
        };
    }
    getPadding() {
        return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0
        };
    }
    getTicks() {
        return this.ticks;
    }
    getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
    getLabelItems(chartArea = this.chart.chartArea) {
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        return items;
    }
    beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
    }
    beforeUpdate() {
        (0, _helpersDatasetJs.Q)(this.options.beforeUpdate, [
            this
        ]);
    }
    update(maxWidth, maxHeight, margins) {
        const { beginAtZero, grace, ticks: tickOpts } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
            this.beforeDataLimits();
            this.determineDataLimits();
            this.afterDataLimits();
            this._range = (0, _helpersDatasetJs.R)(this, grace, beginAtZero);
            this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
            this.ticks = autoSkip(this, this.ticks);
            this._labelSizes = null;
            this.afterAutoSkip();
        }
        if (samplingEnabled) this._convertTicksToLabels(this.ticks);
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
    }
    configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
            startPixel = this.left;
            endPixel = this.right;
        } else {
            startPixel = this.top;
            endPixel = this.bottom;
            reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
        (0, _helpersDatasetJs.Q)(this.options.afterUpdate, [
            this
        ]);
    }
    beforeSetDimensions() {
        (0, _helpersDatasetJs.Q)(this.options.beforeSetDimensions, [
            this
        ]);
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = 0;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = 0;
            this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
    }
    afterSetDimensions() {
        (0, _helpersDatasetJs.Q)(this.options.afterSetDimensions, [
            this
        ]);
    }
    _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        (0, _helpersDatasetJs.Q)(this.options[name], [
            this
        ]);
    }
    beforeDataLimits() {
        this._callHooks('beforeDataLimits');
    }
    determineDataLimits() {}
    afterDataLimits() {
        this._callHooks('afterDataLimits');
    }
    beforeBuildTicks() {
        this._callHooks('beforeBuildTicks');
    }
    buildTicks() {
        return [];
    }
    afterBuildTicks() {
        this._callHooks('afterBuildTicks');
    }
    beforeTickToLabelConversion() {
        (0, _helpersDatasetJs.Q)(this.options.beforeTickToLabelConversion, [
            this
        ]);
    }
    generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            tick = ticks[i];
            tick.label = (0, _helpersDatasetJs.Q)(tickOpts.callback, [
                tick.value,
                i,
                ticks
            ], this);
        }
    }
    afterTickToLabelConversion() {
        (0, _helpersDatasetJs.Q)(this.options.afterTickToLabelConversion, [
            this
        ]);
    }
    beforeCalculateLabelRotation() {
        (0, _helpersDatasetJs.Q)(this.options.beforeCalculateLabelRotation, [
            this
        ]);
    }
    calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
            this.labelRotation = minRotation;
            return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = (0, _helpersDatasetJs.S)(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = (0, _helpersDatasetJs.U)(Math.min(Math.asin((0, _helpersDatasetJs.S)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0, _helpersDatasetJs.S)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0, _helpersDatasetJs.S)(maxLabelHeight / maxLabelDiagonal, -1, 1))));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
        (0, _helpersDatasetJs.Q)(this.options.afterCalculateLabelRotation, [
            this
        ]);
    }
    afterAutoSkip() {}
    beforeFit() {
        (0, _helpersDatasetJs.Q)(this.options.beforeFit, [
            this
        ]);
    }
    fit() {
        const minSize = {
            width: 0,
            height: 0
        };
        const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
            if (isHorizontal) {
                minSize.width = this.maxWidth;
                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
            } else {
                minSize.height = this.maxHeight;
                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
            }
            if (tickOpts.display && this.ticks.length) {
                const { first, last, widest, highest } = this._getLabelSizes();
                const tickPadding = tickOpts.padding * 2;
                const angleRadians = (0, _helpersDatasetJs.t)(this.labelRotation);
                const cos = Math.cos(angleRadians);
                const sin = Math.sin(angleRadians);
                if (isHorizontal) {
                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                } else {
                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                }
                this._calculatePadding(first, last, sin, cos);
            }
        }
        this._handleMargins();
        if (isHorizontal) {
            this.width = this._length = chart.width - this._margins.left - this._margins.right;
            this.height = minSize.height;
        } else {
            this.width = minSize.width;
            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
    }
    _calculatePadding(first, last, sin, cos) {
        const { ticks: { align, padding }, position } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== 'top' && this.axis === 'x';
        if (this.isHorizontal()) {
            const offsetLeft = this.getPixelForTick(0) - this.left;
            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
            let paddingLeft = 0;
            let paddingRight = 0;
            if (isRotated) {
                if (labelsBelowTicks) {
                    paddingLeft = cos * first.width;
                    paddingRight = sin * last.height;
                } else {
                    paddingLeft = sin * first.height;
                    paddingRight = cos * last.width;
                }
            } else if (align === 'start') paddingRight = last.width;
            else if (align === 'end') paddingLeft = first.width;
            else if (align !== 'inner') {
                paddingLeft = first.width / 2;
                paddingRight = last.width / 2;
            }
            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
            let paddingTop = last.height / 2;
            let paddingBottom = first.height / 2;
            if (align === 'start') {
                paddingTop = 0;
                paddingBottom = first.height;
            } else if (align === 'end') {
                paddingTop = last.height;
                paddingBottom = 0;
            }
            this.paddingTop = paddingTop + padding;
            this.paddingBottom = paddingBottom + padding;
        }
    }
    _handleMargins() {
        if (this._margins) {
            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
            this._margins.top = Math.max(this.paddingTop, this._margins.top);
            this._margins.right = Math.max(this.paddingRight, this._margins.right);
            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
    }
    afterFit() {
        (0, _helpersDatasetJs.Q)(this.options.afterFit, [
            this
        ]);
    }
    isHorizontal() {
        const { axis, position } = this.options;
        return position === 'top' || position === 'bottom' || axis === 'x';
    }
    isFullSize() {
        return this.options.fullSize;
    }
    _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++)if ((0, _helpersDatasetJs.k)(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
        }
        this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
            const sampleSize = this.options.ticks.sampleSize;
            let ticks = this.ticks;
            if (sampleSize < ticks.length) ticks = sample(ticks, sampleSize);
            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
        }
        return labelSizes;
    }
    _computeLabelSizes(ticks, length, maxTicksLimit) {
        const { ctx, _longestTextCache: caches } = this;
        const widths = [];
        const heights = [];
        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for(i = 0; i < length; i += increment){
            label = ticks[i].label;
            tickFont = this._resolveTickFontOptions(i);
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
                data: {},
                gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0;
            if (!(0, _helpersDatasetJs.k)(label) && !(0, _helpersDatasetJs.b)(label)) {
                width = (0, _helpersDatasetJs.V)(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
            } else if ((0, _helpersDatasetJs.b)(label)) for(j = 0, jlen = label.length; j < jlen; ++j){
                nestedLabel = label[j];
                if (!(0, _helpersDatasetJs.k)(nestedLabel) && !(0, _helpersDatasetJs.b)(nestedLabel)) {
                    width = (0, _helpersDatasetJs.V)(ctx, cache.data, cache.gc, width, nestedLabel);
                    height += lineHeight;
                }
            }
            widths.push(width);
            heights.push(height);
            widestLabelSize = Math.max(width, widestLabelSize);
            highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx)=>({
                width: widths[idx] || 0,
                height: heights[idx] || 0
            });
        return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest),
            widths,
            heights
        };
    }
    getLabelForValue(value) {
        return value;
    }
    getPixelForValue(value, index) {
        return NaN;
    }
    getValueForPixel(pixel) {}
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getPixelForDecimal(decimal) {
        if (this._reversePixels) decimal = 1 - decimal;
        const pixel = this._startPixel + decimal * this._length;
        return (0, _helpersDatasetJs.W)(this._alignToPixels ? (0, _helpersDatasetJs.X)(this.chart, pixel, 0) : pixel);
    }
    getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
    }
    getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
        const { min, max } = this;
        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
    getContext(index) {
        const ticks = this.ticks || [];
        if (index >= 0 && index < ticks.length) {
            const tick = ticks[index];
            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
        }
        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
    _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = (0, _helpersDatasetJs.t)(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
    _isVisible() {
        const display = this.options.display;
        if (display !== 'auto') return !!display;
        return this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const { grid, position, border } = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = borderOpts.display ? borderOpts.width : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
            return (0, _helpersDatasetJs.X)(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === 'top') {
            borderValue = alignBorderValue(this.bottom);
            ty1 = this.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
        } else if (position === 'bottom') {
            borderValue = alignBorderValue(this.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = this.top + tl;
        } else if (position === 'left') {
            borderValue = alignBorderValue(this.right);
            tx1 = this.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
        } else if (position === 'right') {
            borderValue = alignBorderValue(this.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = this.left + tl;
        } else if (axis === 'x') {
            if (position === 'center') borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
            else if ((0, _helpersDatasetJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            y1 = chartArea.top;
            y2 = chartArea.bottom;
            ty1 = borderValue + axisHalfWidth;
            ty2 = ty1 + tl;
        } else if (axis === 'y') {
            if (position === 'center') borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
            else if ((0, _helpersDatasetJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            tx1 = borderValue - axisHalfWidth;
            tx2 = tx1 - tl;
            x1 = chartArea.left;
            x2 = chartArea.right;
        }
        const limit = (0, _helpersDatasetJs.v)(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for(i = 0; i < ticksLength; i += step){
            const context = this.getContext(i);
            const optsAtIndex = grid.setContext(context);
            const optsAtIndexBorder = border.setContext(context);
            const lineWidth = optsAtIndex.lineWidth;
            const lineColor = optsAtIndex.color;
            const borderDash = optsAtIndexBorder.dash || [];
            const borderDashOffset = optsAtIndexBorder.dashOffset;
            const tickWidth = optsAtIndex.tickWidth;
            const tickColor = optsAtIndex.tickColor;
            const tickBorderDash = optsAtIndex.tickBorderDash || [];
            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
            lineValue = getPixelForGridLine(this, i, offset);
            if (lineValue === undefined) continue;
            alignedLineValue = (0, _helpersDatasetJs.X)(chart, lineValue, lineWidth);
            if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;
            else ty1 = ty2 = y1 = y2 = alignedLineValue;
            items.push({
                tx1,
                ty1,
                tx2,
                ty2,
                x1,
                y1,
                x2,
                y2,
                width: lineWidth,
                color: lineColor,
                borderDash,
                borderDashOffset,
                tickWidth,
                tickColor,
                tickBorderDash,
                tickBorderDashOffset
            });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
    }
    _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const { position, ticks: optionTicks } = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align, crossAlign, padding, mirror } = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -(0, _helpersDatasetJs.t)(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = 'middle';
        if (position === 'top') {
            y = this.bottom - hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === 'bottom') {
            y = this.top + hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === 'left') {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (position === 'right') {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (axis === 'x') {
            if (position === 'center') y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
            else if ((0, _helpersDatasetJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
            }
            textAlign = this._getXAxisLabelAlignment();
        } else if (axis === 'y') {
            if (position === 'center') x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
            else if ((0, _helpersDatasetJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                x = this.chart.scales[positionAxisID].getPixelForValue(value);
            }
            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === 'y') {
            if (align === 'start') textBaseline = 'top';
            else if (align === 'end') textBaseline = 'bottom';
        }
        const labelSizes = this._getLabelSizes();
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            label = tick.label;
            const optsAtIndex = optionTicks.setContext(this.getContext(i));
            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
            font = this._resolveTickFontOptions(i);
            lineHeight = font.lineHeight;
            lineCount = (0, _helpersDatasetJs.b)(label) ? label.length : 1;
            const halfCount = lineCount / 2;
            const color = optsAtIndex.color;
            const strokeColor = optsAtIndex.textStrokeColor;
            const strokeWidth = optsAtIndex.textStrokeWidth;
            let tickTextAlign = textAlign;
            if (isHorizontal) {
                x = pixel;
                if (textAlign === 'inner') {
                    if (i === ilen - 1) tickTextAlign = !this.options.reverse ? 'right' : 'left';
                    else if (i === 0) tickTextAlign = !this.options.reverse ? 'left' : 'right';
                    else tickTextAlign = 'center';
                }
                if (position === 'top') {
                    if (crossAlign === 'near' || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;
                    else if (crossAlign === 'center') textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                    else textOffset = -labelSizes.highest.height + lineHeight / 2;
                } else {
                    if (crossAlign === 'near' || rotation !== 0) textOffset = lineHeight / 2;
                    else if (crossAlign === 'center') textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                    else textOffset = labelSizes.highest.height - lineCount * lineHeight;
                }
                if (mirror) textOffset *= -1;
                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) x += lineHeight / 2 * Math.sin(rotation);
            } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
            }
            let backdrop;
            if (optsAtIndex.showLabelBackdrop) {
                const labelPadding = (0, _helpersDatasetJs.E)(optsAtIndex.backdropPadding);
                const height = labelSizes.heights[i];
                const width = labelSizes.widths[i];
                let top = textOffset - labelPadding.top;
                let left = 0 - labelPadding.left;
                switch(textBaseline){
                    case 'middle':
                        top -= height / 2;
                        break;
                    case 'bottom':
                        top -= height;
                        break;
                }
                switch(textAlign){
                    case 'center':
                        left -= width / 2;
                        break;
                    case 'right':
                        left -= width;
                        break;
                    case 'inner':
                        if (i === ilen - 1) left -= width;
                        else if (i > 0) left -= width / 2;
                        break;
                }
                backdrop = {
                    left,
                    top,
                    width: width + labelPadding.width,
                    height: height + labelPadding.height,
                    color: optsAtIndex.backdropColor
                };
            }
            items.push({
                label,
                font,
                textOffset,
                options: {
                    rotation,
                    color,
                    strokeColor,
                    strokeWidth,
                    textAlign: tickTextAlign,
                    textBaseline,
                    translation: [
                        x,
                        y
                    ],
                    backdrop
                }
            });
        }
        return items;
    }
    _getXAxisLabelAlignment() {
        const { position, ticks } = this.options;
        const rotation = -(0, _helpersDatasetJs.t)(this.labelRotation);
        if (rotation) return position === 'top' ? 'left' : 'right';
        let align = 'center';
        if (ticks.align === 'start') align = 'left';
        else if (ticks.align === 'end') align = 'right';
        else if (ticks.align === 'inner') align = 'inner';
        return align;
    }
    _getYAxisLabelAlignment(tl) {
        const { position, ticks: { crossAlign, mirror, padding } } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === 'left') {
            if (mirror) {
                x = this.right + padding;
                if (crossAlign === 'near') textAlign = 'left';
                else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x += widest / 2;
                } else {
                    textAlign = 'right';
                    x += widest;
                }
            } else {
                x = this.right - tickAndPadding;
                if (crossAlign === 'near') textAlign = 'right';
                else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x -= widest / 2;
                } else {
                    textAlign = 'left';
                    x = this.left;
                }
            }
        } else if (position === 'right') {
            if (mirror) {
                x = this.left + padding;
                if (crossAlign === 'near') textAlign = 'right';
                else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x -= widest / 2;
                } else {
                    textAlign = 'left';
                    x -= widest;
                }
            } else {
                x = this.left + tickAndPadding;
                if (crossAlign === 'near') textAlign = 'left';
                else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x += widest / 2;
                } else {
                    textAlign = 'right';
                    x = this.right;
                }
            }
        } else textAlign = 'right';
        return {
            textAlign,
            x
        };
    }
    _computeLabelArea() {
        if (this.options.ticks.mirror) return;
        const chart = this.chart;
        const position = this.options.position;
        if (position === 'left' || position === 'right') return {
            top: 0,
            left: this.left,
            bottom: chart.height,
            right: this.right
        };
        if (position === 'top' || position === 'bottom') return {
            top: this.top,
            left: 0,
            bottom: this.bottom,
            right: chart.width
        };
    }
    drawBackground() {
        const { ctx, options: { backgroundColor }, left, top, width, height } = this;
        if (backgroundColor) {
            ctx.save();
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(left, top, width, height);
            ctx.restore();
        }
    }
    getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) return 0;
        const ticks = this.ticks;
        const index = ticks.findIndex((t)=>t.value === value);
        if (index >= 0) {
            const opts = grid.setContext(this.getContext(index));
            return opts.lineWidth;
        }
        return 0;
    }
    drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style)=>{
            if (!style.width || !style.color) return;
            ctx.save();
            ctx.lineWidth = style.width;
            ctx.strokeStyle = style.color;
            ctx.setLineDash(style.borderDash || []);
            ctx.lineDashOffset = style.borderDashOffset;
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
            ctx.restore();
        };
        if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            if (grid.drawOnChartArea) drawLine({
                x: item.x1,
                y: item.y1
            }, {
                x: item.x2,
                y: item.y2
            }, item);
            if (grid.drawTicks) drawLine({
                x: item.tx1,
                y: item.ty1
            }, {
                x: item.tx2,
                y: item.ty2
            }, {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
            });
        }
    }
    drawBorder() {
        const { chart, ctx, options: { border, grid } } = this;
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = border.display ? borderOpts.width : 0;
        if (!axisWidth) return;
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
            x1 = (0, _helpersDatasetJs.X)(chart, this.left, axisWidth) - axisWidth / 2;
            x2 = (0, _helpersDatasetJs.X)(chart, this.right, lastLineWidth) + lastLineWidth / 2;
            y1 = y2 = borderValue;
        } else {
            y1 = (0, _helpersDatasetJs.X)(chart, this.top, axisWidth) - axisWidth / 2;
            y2 = (0, _helpersDatasetJs.X)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
            x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.width;
        ctx.strokeStyle = borderOpts.color;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
    }
    drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) return;
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) (0, _helpersDatasetJs.Y)(ctx, area);
        const items = this.getLabelItems(chartArea);
        for (const item of items){
            const renderTextOptions = item.options;
            const tickFont = item.font;
            const label = item.label;
            const y = item.textOffset;
            (0, _helpersDatasetJs.Z)(ctx, label, 0, y, tickFont, renderTextOptions);
        }
        if (area) (0, _helpersDatasetJs.$)(ctx);
    }
    drawTitle() {
        const { ctx, options: { position, title, reverse } } = this;
        if (!title.display) return;
        const font = (0, _helpersDatasetJs.a0)(title.font);
        const padding = (0, _helpersDatasetJs.E)(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === 'bottom' || position === 'center' || (0, _helpersDatasetJs.i)(position)) {
            offset += padding.bottom;
            if ((0, _helpersDatasetJs.b)(title.text)) offset += font.lineHeight * (title.text.length - 1);
        } else offset += padding.top;
        const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
        (0, _helpersDatasetJs.Z)(ctx, title.text, 0, 0, font, {
            color: title.color,
            maxWidth,
            rotation,
            textAlign: titleAlign(align, position, reverse),
            textBaseline: 'middle',
            translation: [
                titleX,
                titleY
            ]
        });
    }
    draw(chartArea) {
        if (!this._isVisible()) return;
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
    }
    _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = (0, _helpersDatasetJs.v)(opts.grid && opts.grid.z, -1);
        const bz = (0, _helpersDatasetJs.v)(opts.border && opts.border.z, 0);
        if (!this._isVisible() || this.draw !== Scale.prototype.draw) return [
            {
                z: tz,
                draw: (chartArea)=>{
                    this.draw(chartArea);
                }
            }
        ];
        return [
            {
                z: gz,
                draw: (chartArea)=>{
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawTitle();
                }
            },
            {
                z: bz,
                draw: ()=>{
                    this.drawBorder();
                }
            },
            {
                z: tz,
                draw: (chartArea)=>{
                    this.drawLabels(chartArea);
                }
            }
        ];
    }
    getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + 'AxisID';
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            const meta = metas[i];
            if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);
        }
        return result;
    }
    _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return (0, _helpersDatasetJs.a0)(opts.font);
    }
    _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
}
class TypedRegistry {
    constructor(type, scope, override){
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
    }
    isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
    register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) parentScope = this.register(proto);
        const items = this.items;
        const id = item.id;
        const scope = this.scope + '.' + id;
        if (!id) throw new Error('class does not have id: ' + item);
        if (id in items) return scope;
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) (0, _helpersDatasetJs.d).override(item.id, item.overrides);
        return scope;
    }
    get(id) {
        return this.items[id];
    }
    unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) delete items[id];
        if (scope && id in (0, _helpersDatasetJs.d)[scope]) {
            delete (0, _helpersDatasetJs.d)[scope][id];
            if (this.override) delete (0, _helpersDatasetJs.a3)[id];
        }
    }
}
function registerDefaults(item, scope, parentScope) {
    const itemDefaults = (0, _helpersDatasetJs.a4)(Object.create(null), [
        parentScope ? (0, _helpersDatasetJs.d).get(parentScope) : {},
        (0, _helpersDatasetJs.d).get(scope),
        item.defaults
    ]);
    (0, _helpersDatasetJs.d).set(scope, itemDefaults);
    if (item.defaultRoutes) routeDefaults(scope, item.defaultRoutes);
    if (item.descriptors) (0, _helpersDatasetJs.d).describe(scope, item.descriptors);
}
function routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property)=>{
        const propertyParts = property.split('.');
        const sourceName = propertyParts.pop();
        const sourceScope = [
            scope
        ].concat(propertyParts).join('.');
        const parts = routes[property].split('.');
        const targetName = parts.pop();
        const targetScope = parts.join('.');
        (0, _helpersDatasetJs.d).route(sourceScope, sourceName, targetScope, targetName);
    });
}
function isIChartComponent(proto) {
    return 'id' in proto && 'defaults' in proto;
}
class Registry {
    constructor(){
        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
        this.elements = new TypedRegistry(Element, 'elements');
        this.plugins = new TypedRegistry(Object, 'plugins');
        this.scales = new TypedRegistry(Scale, 'scales');
        this._typedRegistries = [
            this.controllers,
            this.scales,
            this.elements
        ];
    }
    add(...args) {
        this._each('register', args);
    }
    remove(...args) {
        this._each('unregister', args);
    }
    addControllers(...args) {
        this._each('register', args, this.controllers);
    }
    addElements(...args) {
        this._each('register', args, this.elements);
    }
    addPlugins(...args) {
        this._each('register', args, this.plugins);
    }
    addScales(...args) {
        this._each('register', args, this.scales);
    }
    getController(id) {
        return this._get(id, this.controllers, 'controller');
    }
    getElement(id) {
        return this._get(id, this.elements, 'element');
    }
    getPlugin(id) {
        return this._get(id, this.plugins, 'plugin');
    }
    getScale(id) {
        return this._get(id, this.scales, 'scale');
    }
    removeControllers(...args) {
        this._each('unregister', args, this.controllers);
    }
    removeElements(...args) {
        this._each('unregister', args, this.elements);
    }
    removePlugins(...args) {
        this._each('unregister', args, this.plugins);
    }
    removeScales(...args) {
        this._each('unregister', args, this.scales);
    }
    _each(method, args, typedRegistry) {
        [
            ...args
        ].forEach((arg)=>{
            const reg = typedRegistry || this._getRegistryForType(arg);
            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) this._exec(method, reg, arg);
            else (0, _helpersDatasetJs.F)(arg, (item)=>{
                const itemReg = typedRegistry || this._getRegistryForType(item);
                this._exec(method, itemReg, item);
            });
        });
    }
    _exec(method, registry, component) {
        const camelMethod = (0, _helpersDatasetJs.a5)(method);
        (0, _helpersDatasetJs.Q)(component['before' + camelMethod], [], component);
        registry[method](component);
        (0, _helpersDatasetJs.Q)(component['after' + camelMethod], [], component);
    }
    _getRegistryForType(type) {
        for(let i = 0; i < this._typedRegistries.length; i++){
            const reg = this._typedRegistries[i];
            if (reg.isForType(type)) return reg;
        }
        return this.plugins;
    }
    _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) throw new Error('"' + id + '" is not a registered ' + type + '.');
        return item;
    }
}
var registry = /* #__PURE__ */ new Registry();
class PluginService {
    constructor(){
        this._init = [];
    }
    notify(chart, hook, args, filter) {
        if (hook === 'beforeInit') {
            this._init = this._createDescriptors(chart, true);
            this._notify(this._init, chart, 'install');
        }
        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors, chart, hook, args);
        if (hook === 'afterDestroy') {
            this._notify(descriptors, chart, 'stop');
            this._notify(this._init, chart, 'uninstall');
        }
        return result;
    }
    _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors){
            const plugin = descriptor.plugin;
            const method = plugin[hook];
            const params = [
                chart,
                args,
                descriptor.options
            ];
            if ((0, _helpersDatasetJs.Q)(method, params, plugin) === false && args.cancelable) return false;
        }
        return true;
    }
    invalidate() {
        if (!(0, _helpersDatasetJs.k)(this._cache)) {
            this._oldCache = this._cache;
            this._cache = undefined;
        }
    }
    _descriptors(chart) {
        if (this._cache) return this._cache;
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
    }
    _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = (0, _helpersDatasetJs.v)(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
    }
    _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
        this._notify(diff(descriptors, previousDescriptors), chart, 'start');
    }
}
function allPlugins(config) {
    const localIds = {};
    const plugins = [];
    const keys = Object.keys(registry.plugins.items);
    for(let i = 0; i < keys.length; i++)plugins.push(registry.getPlugin(keys[i]));
    const local = config.plugins || [];
    for(let i = 0; i < local.length; i++){
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
            plugins.push(plugin);
            localIds[plugin.id] = true;
        }
    }
    return {
        plugins,
        localIds
    };
}
function getOpts(options, all) {
    if (!all && options === false) return null;
    if (options === true) return {};
    return options;
}
function createDescriptors(chart, { plugins, localIds }, options, all) {
    const result = [];
    const context = chart.getContext();
    for (const plugin of plugins){
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) continue;
        result.push({
            plugin,
            options: pluginOpts(chart.config, {
                plugin,
                local: localIds[id]
            }, opts, context)
        });
    }
    return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
    const keys = config.pluginScopeKeys(plugin);
    const scopes = config.getOptionScopes(opts, keys);
    if (local && plugin.defaults) scopes.push(plugin.defaults);
    return config.createResolver(scopes, context, [
        ''
    ], {
        scriptable: false,
        indexable: false,
        allKeys: true
    });
}
function getIndexAxis(type, options) {
    const datasetDefaults = (0, _helpersDatasetJs.d).datasets[type] || {};
    const datasetOptions = (options.datasets || {})[type] || {};
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
}
function getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === '_index_') axis = indexAxis;
    else if (id === '_value_') axis = indexAxis === 'x' ? 'y' : 'x';
    return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? '_index_' : '_value_';
}
function idMatchesAxis(id) {
    if (id === 'x' || id === 'y' || id === 'r') return id;
}
function axisFromPosition(position) {
    if (position === 'top' || position === 'bottom') return 'x';
    if (position === 'left' || position === 'right') return 'y';
}
function determineAxis(id, ...scaleOptions) {
    if (idMatchesAxis(id)) return id;
    for (const opts of scaleOptions){
        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
        if (axis) return axis;
    }
    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
    if (dataset[axis + 'AxisID'] === id) return {
        axis
    };
}
function retrieveAxisFromDatasets(id, config) {
    if (config.data && config.data.datasets) {
        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
        if (boundDs.length) return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);
    }
    return {};
}
function mergeScaleConfig(config, options) {
    const chartDefaults = (0, _helpersDatasetJs.a3)[config.type] || {
        scales: {}
    };
    const configScales = options.scales || {};
    const chartIndexAxis = getIndexAxis(config.type, options);
    const scales = Object.create(null);
    Object.keys(configScales).forEach((id)=>{
        const scaleConf = configScales[id];
        if (!(0, _helpersDatasetJs.i)(scaleConf)) return console.error(`Invalid scale configuration for scale: ${id}`);
        if (scaleConf._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), (0, _helpersDatasetJs.d).scales[scaleConf.type]);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        scales[id] = (0, _helpersDatasetJs.ab)(Object.create(null), [
            {
                axis
            },
            scaleConf,
            defaultScaleOptions[axis],
            defaultScaleOptions[defaultId]
        ]);
    });
    config.data.datasets.forEach((dataset)=>{
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = (0, _helpersDatasetJs.a3)[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
            const id = dataset[axis + 'AxisID'] || axis;
            scales[id] = scales[id] || Object.create(null);
            (0, _helpersDatasetJs.ab)(scales[id], [
                {
                    axis
                },
                configScales[id],
                defaultScaleOptions[defaultID]
            ]);
        });
    });
    Object.keys(scales).forEach((key)=>{
        const scale = scales[key];
        (0, _helpersDatasetJs.ab)(scale, [
            (0, _helpersDatasetJs.d).scales[scale.type],
            (0, _helpersDatasetJs.d).scale
        ]);
    });
    return scales;
}
function initOptions(config) {
    const options = config.options || (config.options = {});
    options.plugins = (0, _helpersDatasetJs.v)(options.plugins, {});
    options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
    data = data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
}
function initConfig(config) {
    config = config || {};
    config.data = initData(config.data);
    initOptions(config);
    return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
    let keys = keyCache.get(cacheKey);
    if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
    }
    return keys;
}
const addIfFound = (set, obj, key)=>{
    const opts = (0, _helpersDatasetJs.f)(obj, key);
    if (opts !== undefined) set.add(opts);
};
class Config {
    constructor(config){
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
    }
    get platform() {
        return this._config.platform;
    }
    get type() {
        return this._config.type;
    }
    set type(type) {
        this._config.type = type;
    }
    get data() {
        return this._config.data;
    }
    set data(data) {
        this._config.data = initData(data);
    }
    get options() {
        return this._config.options;
    }
    set options(options) {
        this._config.options = options;
    }
    get plugins() {
        return this._config.plugins;
    }
    update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
    }
    clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
    }
    datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType, ()=>[
                [
                    `datasets.${datasetType}`,
                    ''
                ]
            ]);
    }
    datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                [
                    `datasets.${datasetType}.transitions.${transition}`,
                    `transitions.${transition}`
                ],
                [
                    `datasets.${datasetType}`,
                    ''
                ]
            ]);
    }
    datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
                [
                    `datasets.${datasetType}.elements.${elementType}`,
                    `datasets.${datasetType}`,
                    `elements.${elementType}`,
                    ''
                ]
            ]);
    }
    pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`, ()=>[
                [
                    `plugins.${id}`,
                    ...plugin.additionalOptionScopes || []
                ]
            ]);
    }
    _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
            cache = new Map();
            _scopeCache.set(mainScope, cache);
        }
        return cache;
    }
    getOptionScopes(mainScope, keyLists, resetCache) {
        const { options, type } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) return cached;
        const scopes = new Set();
        keyLists.forEach((keys)=>{
            if (mainScope) {
                scopes.add(mainScope);
                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
            }
            keys.forEach((key)=>addIfFound(scopes, options, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersDatasetJs.a3)[type] || {}, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersDatasetJs.d), key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersDatasetJs.a6), key));
        });
        const array = Array.from(scopes);
        if (array.length === 0) array.push(Object.create(null));
        if (keysCached.has(keyLists)) cache.set(keyLists, array);
        return array;
    }
    chartOptionScopes() {
        const { options, type } = this;
        return [
            options,
            (0, _helpersDatasetJs.a3)[type] || {},
            (0, _helpersDatasetJs.d).datasets[type] || {},
            {
                type
            },
            (0, _helpersDatasetJs.d),
            (0, _helpersDatasetJs.a6)
        ];
    }
    resolveNamedOptions(scopes, names, context, prefixes = [
        ''
    ]) {
        const result = {
            $shared: true
        };
        const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
            result.$shared = false;
            context = (0, _helpersDatasetJs.a7)(context) ? context() : context;
            const subResolver = this.createResolver(scopes, context, subPrefixes);
            options = (0, _helpersDatasetJs.a8)(resolver, context, subResolver);
        }
        for (const prop of names)result[prop] = options[prop];
        return result;
    }
    createResolver(scopes, context, prefixes = [
        ''
    ], descriptorDefaults) {
        const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
        return (0, _helpersDatasetJs.i)(context) ? (0, _helpersDatasetJs.a8)(resolver, context, undefined, descriptorDefaults) : resolver;
    }
}
function getResolver(resolverCache, scopes, prefixes) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
    }
    const cacheKey = prefixes.join();
    let cached = cache.get(cacheKey);
    if (!cached) {
        const resolver = (0, _helpersDatasetJs.a9)(scopes, prefixes);
        cached = {
            resolver,
            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))
        };
        cache.set(cacheKey, cached);
    }
    return cached;
}
const hasFunction = (value)=>(0, _helpersDatasetJs.i)(value) && Object.getOwnPropertyNames(value).some((key)=>(0, _helpersDatasetJs.a7)(value[key]));
function needContext(proxy, names) {
    const { isScriptable, isIndexable } = (0, _helpersDatasetJs.aa)(proxy);
    for (const prop of names){
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if (scriptable && ((0, _helpersDatasetJs.a7)(value) || hasFunction(value)) || indexable && (0, _helpersDatasetJs.b)(value)) return true;
    }
    return false;
}
var version = "4.4.9";
const KNOWN_POSITIONS = [
    'top',
    'bottom',
    'left',
    'right',
    'chartArea'
];
function positionIsHorizontal(position, axis) {
    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
}
function compare2Level(l1, l2) {
    return function(a, b) {
        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
    };
}
function onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    chart.notifyPlugins('afterRender');
    (0, _helpersDatasetJs.Q)(animationOptions && animationOptions.onComplete, [
        context
    ], chart);
}
function onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    (0, _helpersDatasetJs.Q)(animationOptions && animationOptions.onProgress, [
        context
    ], chart);
}
function getCanvas(item) {
    if ((0, _helpersDatasetJs.M)() && typeof item === 'string') item = document.getElementById(item);
    else if (item && item.length) item = item[0];
    if (item && item.canvas) item = item.canvas;
    return item;
}
const instances = {};
const getChart = (key)=>{
    const canvas = getCanvas(key);
    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
    const keys = Object.keys(obj);
    for (const key of keys){
        const intKey = +key;
        if (intKey >= start) {
            const value = obj[key];
            delete obj[key];
            if (move > 0 || intKey > start) obj[intKey + move] = value;
        }
    }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e.type === 'mouseout') return null;
    if (isClick) return lastEvent;
    return e;
}
class Chart {
    static defaults = (0, _helpersDatasetJs.d);
    static instances = instances;
    static overrides = (0, _helpersDatasetJs.a3);
    static registry = registry;
    static version = version;
    static getChart = getChart;
    static register(...items) {
        registry.add(...items);
        invalidatePlugins();
    }
    static unregister(...items) {
        registry.remove(...items);
        invalidatePlugins();
    }
    constructor(item, userConfig){
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.');
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = (0, _helpersDatasetJs.ac)();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = (0, _helpersDatasetJs.ad)((mode)=>this.update(mode), options.resizeDelay || 0);
        this._dataChanges = [];
        instances[this.id] = this;
        if (!context || !canvas) {
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
        }
        animator.listen(this, 'complete', onAnimationsComplete);
        animator.listen(this, 'progress', onAnimationProgress);
        this._initialize();
        if (this.attached) this.update();
    }
    get aspectRatio() {
        const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
        if (!(0, _helpersDatasetJs.k)(aspectRatio)) return aspectRatio;
        if (maintainAspectRatio && _aspectRatio) return _aspectRatio;
        return height ? width / height : null;
    }
    get data() {
        return this.config.data;
    }
    set data(data) {
        this.config.data = data;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this.config.options = options;
    }
    get registry() {
        return registry;
    }
    _initialize() {
        this.notifyPlugins('beforeInit');
        if (this.options.responsive) this.resize();
        else (0, _helpersDatasetJs.ae)(this, this.options.devicePixelRatio);
        this.bindEvents();
        this.notifyPlugins('afterInit');
        return this;
    }
    clear() {
        (0, _helpersDatasetJs.af)(this.canvas, this.ctx);
        return this;
    }
    stop() {
        animator.stop(this);
        return this;
    }
    resize(width, height) {
        if (!animator.running(this)) this._resize(width, height);
        else this._resizeBeforeDraw = {
            width,
            height
        };
    }
    _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? 'resize' : 'attach';
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!(0, _helpersDatasetJs.ae)(this, newRatio, true)) return;
        this.notifyPlugins('resize', {
            size: newSize
        });
        (0, _helpersDatasetJs.Q)(options.onResize, [
            this,
            newSize
        ], this);
        if (this.attached) {
            if (this._doResize(mode)) this.render();
        }
    }
    ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        (0, _helpersDatasetJs.F)(scalesOptions, (axisOptions, axisID)=>{
            axisOptions.id = axisID;
        });
    }
    buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales = this.scales;
        const updated = Object.keys(scales).reduce((obj, id)=>{
            obj[id] = false;
            return obj;
        }, {});
        let items = [];
        if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map((id)=>{
            const scaleOptions = scaleOpts[id];
            const axis = determineAxis(id, scaleOptions);
            const isRadial = axis === 'r';
            const isHorizontal = axis === 'x';
            return {
                options: scaleOptions,
                dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
                dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
            };
        }));
        (0, _helpersDatasetJs.F)(items, (item)=>{
            const scaleOptions = item.options;
            const id = scaleOptions.id;
            const axis = determineAxis(id, scaleOptions);
            const scaleType = (0, _helpersDatasetJs.v)(scaleOptions.type, item.dtype);
            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;
            updated[id] = true;
            let scale = null;
            if (id in scales && scales[id].type === scaleType) scale = scales[id];
            else {
                const scaleClass = registry.getScale(scaleType);
                scale = new scaleClass({
                    id,
                    type: scaleType,
                    ctx: this.ctx,
                    chart: this
                });
                scales[scale.id] = scale;
            }
            scale.init(scaleOptions, options);
        });
        (0, _helpersDatasetJs.F)(updated, (hasUpdated, id)=>{
            if (!hasUpdated) delete scales[id];
        });
        (0, _helpersDatasetJs.F)(scales, (scale)=>{
            layouts.configure(this, scale, scale.options);
            layouts.addBox(this, scale);
        });
    }
    _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b)=>a.index - b.index);
        if (numMeta > numData) {
            for(let i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);
            metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
    }
    _removeUnreferencedMetasets() {
        const { _metasets: metasets, data: { datasets } } = this;
        if (metasets.length > datasets.length) delete this._stacks;
        metasets.forEach((meta, index)=>{
            if (datasets.filter((x)=>x === meta._dataset).length === 0) this._destroyDatasetMeta(index);
        });
    }
    buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for(i = 0, ilen = datasets.length; i < ilen; i++){
            const dataset = datasets[i];
            let meta = this.getDatasetMeta(i);
            const type = dataset.type || this.config.type;
            if (meta.type && meta.type !== type) {
                this._destroyDatasetMeta(i);
                meta = this.getDatasetMeta(i);
            }
            meta.type = type;
            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
            meta.order = dataset.order || 0;
            meta.index = i;
            meta.label = '' + dataset.label;
            meta.visible = this.isDatasetVisible(i);
            if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
            } else {
                const ControllerClass = registry.getController(type);
                const { datasetElementType, dataElementType } = (0, _helpersDatasetJs.d).datasets[type];
                Object.assign(ControllerClass, {
                    dataElementType: registry.getElement(dataElementType),
                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                });
                meta.controller = new ControllerClass(this, i);
                newControllers.push(meta.controller);
            }
        }
        this._updateMetasets();
        return newControllers;
    }
    _resetElements() {
        (0, _helpersDatasetJs.F)(this.data.datasets, (dataset, datasetIndex)=>{
            this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
    }
    reset() {
        this._resetElements();
        this.notifyPlugins('reset');
    }
    update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins('beforeUpdate', {
            mode,
            cancelable: true
        }) === false) return;
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins('beforeElementsUpdate');
        let minPadding = 0;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
            const { controller } = this.getDatasetMeta(i);
            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
            controller.buildOrUpdateElements(reset);
            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) (0, _helpersDatasetJs.F)(newControllers, (controller)=>{
            controller.reset();
        });
        this._updateDatasets(mode);
        this.notifyPlugins('afterUpdate', {
            mode
        });
        this._layers.sort(compare2Level('z', '_idx'));
        const { _active, _lastEvent } = this;
        if (_lastEvent) this._eventHandler(_lastEvent, true);
        else if (_active.length) this._updateHoverStyles(_active, _active, true);
        this.render();
    }
    _updateScales() {
        (0, _helpersDatasetJs.F)(this.scales, (scale)=>{
            layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
    }
    _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!(0, _helpersDatasetJs.ag)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
            this.unbindEvents();
            this.bindEvents();
        }
    }
    _updateHiddenIndices() {
        const { _hiddenIndices } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method, start, count } of changes){
            const move = method === '_removeElements' ? -count : count;
            moveNumericKeys(_hiddenIndices, start, move);
        }
    }
    _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) return;
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));
        const changeSet = makeSet(0);
        for(let i = 1; i < datasetCount; i++){
            if (!(0, _helpersDatasetJs.ag)(changeSet, makeSet(i))) return;
        }
        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({
                method: a[1],
                start: +a[2],
                count: +a[3]
            }));
    }
    _updateLayout(minPadding) {
        if (this.notifyPlugins('beforeLayout', {
            cancelable: true
        }) === false) return;
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        (0, _helpersDatasetJs.F)(this.boxes, (box)=>{
            if (noArea && box.position === 'chartArea') return;
            if (box.configure) box.configure();
            this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index)=>{
            item._idx = index;
        });
        this.notifyPlugins('afterLayout');
    }
    _updateDatasets(mode) {
        if (this.notifyPlugins('beforeDatasetsUpdate', {
            mode,
            cancelable: true
        }) === false) return;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._updateDataset(i, (0, _helpersDatasetJs.a7)(mode) ? mode({
            datasetIndex: i
        }) : mode);
        this.notifyPlugins('afterDatasetsUpdate', {
            mode
        });
    }
    _updateDataset(index, mode) {
        const meta = this.getDatasetMeta(index);
        const args = {
            meta,
            index,
            mode,
            cancelable: true
        };
        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) return;
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins('afterDatasetUpdate', args);
    }
    render() {
        if (this.notifyPlugins('beforeRender', {
            cancelable: true
        }) === false) return;
        if (animator.has(this)) {
            if (this.attached && !animator.running(this)) animator.start(this);
        } else {
            this.draw();
            onAnimationsComplete({
                chart: this
            });
        }
    }
    draw() {
        let i;
        if (this._resizeBeforeDraw) {
            const { width, height } = this._resizeBeforeDraw;
            this._resizeBeforeDraw = null;
            this._resize(width, height);
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) return;
        if (this.notifyPlugins('beforeDraw', {
            cancelable: true
        }) === false) return;
        const layers = this._layers;
        for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);
        this._drawDatasets();
        for(; i < layers.length; ++i)layers[i].draw(this.chartArea);
        this.notifyPlugins('afterDraw');
    }
    _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i){
            const meta = metasets[i];
            if (!filterVisible || meta.visible) result.push(meta);
        }
        return result;
    }
    getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
    }
    _drawDatasets() {
        if (this.notifyPlugins('beforeDatasetsDraw', {
            cancelable: true
        }) === false) return;
        const metasets = this.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);
        this.notifyPlugins('afterDatasetsDraw');
    }
    _drawDataset(meta) {
        const ctx = this.ctx;
        const args = {
            meta,
            index: meta.index,
            cancelable: true
        };
        const clip = (0, _helpersDatasetJs.ah)(this, meta);
        if (this.notifyPlugins('beforeDatasetDraw', args) === false) return;
        if (clip) (0, _helpersDatasetJs.Y)(ctx, clip);
        meta.controller.draw();
        if (clip) (0, _helpersDatasetJs.$)(ctx);
        args.cancelable = false;
        this.notifyPlugins('afterDatasetDraw', args);
    }
    isPointInArea(point) {
        return (0, _helpersDatasetJs.C)(point, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === 'function') return method(this, e, options, useFinalPosition);
        return [];
    }
    getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
        if (!meta) {
            meta = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: dataset && dataset.order || 0,
                index: datasetIndex,
                _dataset: dataset,
                _parsed: [],
                _sorted: false
            };
            metasets.push(meta);
        }
        return meta;
    }
    getContext() {
        return this.$context || (this.$context = (0, _helpersDatasetJs.j)(null, {
            chart: this,
            type: 'chart'
        }));
    }
    getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) return false;
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
    }
    toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
    getDataVisibility(index) {
        return !this._hiddenIndices[index];
    }
    _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? 'show' : 'hide';
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if ((0, _helpersDatasetJs.h)(dataIndex)) {
            meta.data[dataIndex].hidden = !visible;
            this.update();
        } else {
            this.setDatasetVisibility(datasetIndex, visible);
            anims.update(meta, {
                visible
            });
            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
        }
    }
    hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
    }
    _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) meta.controller._destroy();
        delete this._metasets[datasetIndex];
    }
    _stop() {
        let i, ilen;
        this.stop();
        animator.remove(this);
        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);
    }
    destroy() {
        this.notifyPlugins('beforeDestroy');
        const { canvas, ctx } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
            this.unbindEvents();
            (0, _helpersDatasetJs.af)(canvas, ctx);
            this.platform.releaseContext(ctx);
            this.canvas = null;
            this.ctx = null;
        }
        delete instances[this.id];
        this.notifyPlugins('afterDestroy');
    }
    toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
    }
    bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) this.bindResponsiveEvents();
        else this.attached = true;
    }
    bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const listener = (e, x, y)=>{
            e.offsetX = x;
            e.offsetY = y;
            this._eventHandler(e);
        };
        (0, _helpersDatasetJs.F)(this.options.events, (type)=>_add(type, listener));
    }
    bindResponsiveEvents() {
        if (!this._responsiveListeners) this._responsiveListeners = {};
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const _remove = (type, listener)=>{
            if (listeners[type]) {
                platform.removeEventListener(this, type, listener);
                delete listeners[type];
            }
        };
        const listener = (width, height)=>{
            if (this.canvas) this.resize(width, height);
        };
        let detached;
        const attached = ()=>{
            _remove('attach', attached);
            this.attached = true;
            this.resize();
            _add('resize', listener);
            _add('detach', detached);
        };
        detached = ()=>{
            this.attached = false;
            _remove('resize', listener);
            this._stop();
            this._resize(0, 0);
            _add('attach', attached);
        };
        if (platform.isAttached(this.canvas)) attached();
        else detached();
    }
    unbindEvents() {
        (0, _helpersDatasetJs.F)(this._listeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        (0, _helpersDatasetJs.F)(this._responsiveListeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
    }
    updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? 'set' : 'remove';
        let meta, item, i, ilen;
        if (mode === 'dataset') {
            meta = this.getDatasetMeta(items[0].datasetIndex);
            meta.controller['_' + prefix + 'DatasetHoverStyle']();
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            item = items[i];
            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
            if (controller) controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error('No dataset found at index ' + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersDatasetJs.ai)(active, lastActive);
        if (changed) {
            this._active = active;
            this._lastEvent = null;
            this._updateHoverStyles(active, lastActive);
        }
    }
    notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
    }
    isPluginEnabled(pluginId) {
        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
    }
    _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
    _eventHandler(e, replay) {
        const args = {
            event: e,
            replay,
            cancelable: true,
            inChartArea: this.isPointInArea(e)
        };
        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) return;
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins('afterEvent', args, eventFilter);
        if (changed || args.changed) this.render();
        return this;
    }
    _handleEvent(e, replay, inChartArea) {
        const { _active: lastActive = [], options } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = (0, _helpersDatasetJs.aj)(e);
        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
            this._lastEvent = null;
            (0, _helpersDatasetJs.Q)(options.onHover, [
                e,
                active,
                this
            ], this);
            if (isClick) (0, _helpersDatasetJs.Q)(options.onClick, [
                e,
                active,
                this
            ], this);
        }
        const changed = !(0, _helpersDatasetJs.ai)(active, lastActive);
        if (changed || replay) {
            this._active = active;
            this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
    }
    _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === 'mouseout') return [];
        if (!inChartArea) return lastActive;
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
}
function invalidatePlugins() {
    return (0, _helpersDatasetJs.F)(Chart.instances, (chart)=>chart._plugins.invalidate());
}
function clipArc(ctx, element, endAngle) {
    const { startAngle, pixelMargin, x, y, outerRadius, innerRadius } = element;
    let angleMargin = pixelMargin / outerRadius;
    // Draw an inner border by clipping the arc and drawing a double-width border
    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else ctx.arc(x, y, pixelMargin, endAngle + (0, _helpersDatasetJs.H), startAngle - (0, _helpersDatasetJs.H));
    ctx.closePath();
    ctx.clip();
}
function toRadiusCorners(value) {
    return (0, _helpersDatasetJs.al)(value, [
        'outerStart',
        'outerEnd',
        'innerStart',
        'innerEnd'
    ]);
}
/**
 * Parse border radius from the provided options
 */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o = toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    // Outer limits are complicated. We want to compute the available angular distance at
    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
    //
    // If the borderRadius is large, that value can become negative.
    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
    // we know that the thickness term will dominate and compute the limits at that point
    const computeOuterLimit = (val)=>{
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return (0, _helpersDatasetJs.S)(val, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: (0, _helpersDatasetJs.S)(o.innerStart, 0, innerLimit),
        innerEnd: (0, _helpersDatasetJs.S)(o.innerEnd, 0, innerLimit)
    };
}
/**
 * Convert (r, 𝜃) to (x, y)
 */ function rThetaToXY(r, theta, x, y) {
    return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta)
    };
}
/**
 * Path the arc, respecting border radius by separating into left and right halves.
 *
 *   Start      End
 *
 *    1--->a--->2    Outer
 *   /           \
 *   8           3
 *   |           |
 *   |           |
 *   7           4
 *   \           /
 *    6<---b<---5    Inner
 */ function pathArc(ctx, element, offset, spacing, end, circular) {
    const { x, y, startAngle: start, pixelMargin, innerRadius: innerR } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha = end - start;
    if (spacing) {
        // When spacing is present, it is the same for all items
        // So we adjust the start and end angle of the arc such that
        // the distance is the same as it would be without the spacing
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
    }
    const beta = Math.max(0.001, alpha * outerRadius - offset / (0, _helpersDatasetJs.P)) / outerRadius;
    const angleOffset = (alpha - beta) / 2;
    const startAngle = start + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx.beginPath();
    if (circular) {
        // The first arc segments from point 1 to point a to point 2
        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
        // The corner segment from point 2 to point 3
        if (outerEnd > 0) {
            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + (0, _helpersDatasetJs.H));
        }
        // The line from point 3 to point 4
        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
        ctx.lineTo(p4.x, p4.y);
        // The corner segment from point 4 to point 5
        if (innerEnd > 0) {
            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + (0, _helpersDatasetJs.H), innerEndAdjustedAngle + Math.PI);
        }
        // The inner arc from point 5 to point b to point 6
        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
        // The corner segment from point 6 to point 7
        if (innerStart > 0) {
            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - (0, _helpersDatasetJs.H));
        }
        // The line from point 7 to point 8
        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
        ctx.lineTo(p8.x, p8.y);
        // The corner segment from point 8 to point 1
        if (outerStart > 0) {
            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - (0, _helpersDatasetJs.H), outerStartAdjustedAngle);
        }
    } else {
        ctx.moveTo(x, y);
        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerStartX, outerStartY);
        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerEndX, outerEndY);
    }
    ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i)ctx.fill();
        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, _helpersDatasetJs.T) || (0, _helpersDatasetJs.T));
    }
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.fill();
    return endAngle;
}
function drawBorder(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference, options } = element;
    const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
    const inner = options.borderAlign === 'inner';
    if (!borderWidth) return;
    ctx.setLineDash(borderDash || []);
    ctx.lineDashOffset = borderDashOffset;
    if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || 'round';
    } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || 'bevel';
    }
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i)ctx.stroke();
        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, _helpersDatasetJs.T) || (0, _helpersDatasetJs.T));
    }
    if (inner) clipArc(ctx, element, endAngle);
    if (!fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        ctx.stroke();
    }
}
class ArcElement extends Element {
    static id = 'arc';
    static defaults = {
        borderAlign: 'center',
        borderColor: '#fff',
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined,
        circular: true
    };
    static defaultRoutes = {
        backgroundColor: 'backgroundColor'
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== 'borderDash'
    };
    circumference;
    endAngle;
    fullCircles;
    innerRadius;
    outerRadius;
    pixelMargin;
    startAngle;
    constructor(cfg){
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        const { angle, distance } = (0, _helpersDatasetJs.D)(point, {
            x: chartX,
            y: chartY
        });
        const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
            'startAngle',
            'endAngle',
            'innerRadius',
            'outerRadius',
            'circumference'
        ], useFinalPosition);
        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
        const _circumference = (0, _helpersDatasetJs.v)(circumference, endAngle - startAngle);
        const nonZeroBetween = (0, _helpersDatasetJs.p)(angle, startAngle, endAngle) && startAngle !== endAngle;
        const betweenAngles = _circumference >= (0, _helpersDatasetJs.T) || nonZeroBetween;
        const withinRadius = (0, _helpersDatasetJs.ak)(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
            'x',
            'y',
            'startAngle',
            'endAngle',
            'innerRadius',
            'outerRadius'
        ], useFinalPosition);
        const { offset, spacing } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
            x: x + Math.cos(halfAngle) * halfRadius,
            y: y + Math.sin(halfAngle) * halfRadius
        };
    }
    tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx) {
        const { options, circumference } = this;
        const offset = (options.offset || 0) / 4;
        const spacing = (options.spacing || 0) / 2;
        const circular = options.circular;
        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
        this.fullCircles = circumference > (0, _helpersDatasetJs.T) ? Math.floor(circumference / (0, _helpersDatasetJs.T)) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;
        ctx.save();
        const halfAngle = (this.startAngle + this.endAngle) / 2;
        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
        const fix = 1 - Math.sin(Math.min((0, _helpersDatasetJs.P), circumference || 0));
        const radiusOffset = offset * fix;
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        drawArc(ctx, this, radiusOffset, spacing, circular);
        drawBorder(ctx, this, radiusOffset, spacing, circular);
        ctx.restore();
    }
}
function setStyle(ctx, options, style = options) {
    ctx.lineCap = (0, _helpersDatasetJs.v)(style.borderCapStyle, options.borderCapStyle);
    ctx.setLineDash((0, _helpersDatasetJs.v)(style.borderDash, options.borderDash));
    ctx.lineDashOffset = (0, _helpersDatasetJs.v)(style.borderDashOffset, options.borderDashOffset);
    ctx.lineJoin = (0, _helpersDatasetJs.v)(style.borderJoinStyle, options.borderJoinStyle);
    ctx.lineWidth = (0, _helpersDatasetJs.v)(style.borderWidth, options.borderWidth);
    ctx.strokeStyle = (0, _helpersDatasetJs.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
    ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
    if (options.stepped) return 0, _helpersDatasetJs.as;
    if (options.tension || options.cubicInterpolationMode === 'monotone') return 0, _helpersDatasetJs.at;
    return lineTo;
}
function pathVars(points, segment, params = {}) {
    const count = points.length;
    const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
    const { start: segmentStart, end: segmentEnd } = segment;
    const start = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
    };
}
function pathSegment(ctx, line, segment, params) {
    const { points, options } = line;
    const { count, start, loop, ilen } = pathVars(points, segment, params);
    const lineMethod = getLineMethod(options);
    let { move = true, reverse } = params || {};
    let i, point, prev;
    for(i = 0; i <= ilen; ++i){
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) continue;
        else if (move) {
            ctx.moveTo(point.x, point.y);
            move = false;
        } else lineMethod(ctx, prev, point, reverse, options.stepped);
        prev = point;
    }
    if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
    const points = line.points;
    const { count, start, ilen } = pathVars(points, segment, params);
    const { move = true, reverse } = params || {};
    let avgX = 0;
    let countX = 0;
    let i, point, prevX, minY, maxY, lastY;
    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
    const drawX = ()=>{
        if (minY !== maxY) {
            ctx.lineTo(avgX, maxY);
            ctx.lineTo(avgX, minY);
            ctx.lineTo(avgX, lastY);
        }
    };
    if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
    }
    for(i = 0; i <= ilen; ++i){
        point = points[pointIndex(i)];
        if (point.skip) continue;
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) minY = y;
            else if (y > maxY) maxY = y;
            avgX = (countX * avgX + x) / ++countX;
        } else {
            drawX();
            ctx.lineTo(x, y);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
        }
        lastY = y;
    }
    drawX();
}
function _getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
    return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
    if (options.stepped) return 0, _helpersDatasetJs.ap;
    if (options.tension || options.cubicInterpolationMode === 'monotone') return 0, _helpersDatasetJs.aq;
    return 0, _helpersDatasetJs.ar;
}
function strokePathWithCache(ctx, line, start, count) {
    let path = line._path;
    if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) path.closePath();
    }
    setStyle(ctx, line.options);
    ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
    const { segments, options } = line;
    const segmentMethod = _getSegmentMethod(line);
    for (const segment of segments){
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {
            start,
            end: start + count - 1
        })) ctx.closePath();
        ctx.stroke();
    }
}
const usePath2D = typeof Path2D === 'function';
function draw(ctx, line, start, count) {
    if (usePath2D && !line.options.segment) strokePathWithCache(ctx, line, start, count);
    else strokePathDirect(ctx, line, start, count);
}
class LineElement extends Element {
    static id = 'line';
    static defaults = {
        borderCapStyle: 'butt',
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: 'miter',
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: 'default',
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
    };
    static defaultRoutes = {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'
    };
    constructor(cfg){
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
            const loop = options.spanGaps ? this._loop : this._fullLoop;
            (0, _helpersDatasetJs.am)(this._points, options, chartArea, loop, indexAxis);
            this._pointsUpdated = true;
        }
    }
    set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
    }
    get points() {
        return this._points;
    }
    get segments() {
        return this._segments || (this._segments = (0, _helpersDatasetJs.an)(this, this.options.segment));
    }
    first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
    }
    last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
    }
    interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = (0, _helpersDatasetJs.ao)(this, {
            property,
            start: value,
            end: value
        });
        if (!segments.length) return;
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for(i = 0, ilen = segments.length; i < ilen; ++i){
            const { start, end } = segments[i];
            const p1 = points[start];
            const p2 = points[end];
            if (p1 === p2) {
                result.push(p1);
                continue;
            }
            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
            const interpolated = _interpolate(p1, p2, t, options.stepped);
            interpolated[property] = point[property];
            result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
    }
    pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
    }
    path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments)loop &= segmentMethod(ctx, this, segment, {
            start,
            end: start + count - 1
        });
        return !!loop;
    }
    draw(ctx, chartArea, start, count) {
        const options = this.options || {};
        const points = this.points || [];
        if (points.length && options.borderWidth) {
            ctx.save();
            draw(ctx, this, start, count);
            ctx.restore();
        }
        if (this.animated) {
            this._pointsUpdated = false;
            this._path = undefined;
        }
    }
}
function inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value } = el.getProps([
        axis
    ], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element {
    static id = 'point';
    parsed;
    skip;
    stop;
    /**
   * @type {any}
   */ static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: 'circle',
        radius: 3,
        rotation: 0
    };
    /**
   * @type {any}
   */ static defaultRoutes = {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const { x, y } = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, 'x', useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, 'y', useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y } = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
    }
    draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !(0, _helpersDatasetJs.C)(this, area, this.size(options) / 2)) return;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        (0, _helpersDatasetJs.au)(ctx, options, this.x, this.y);
    }
    getRange() {
        const options = this.options || {};
        // @ts-expect-error Fallbacks should never be hit in practice
        return options.radius + options.hitRadius;
    }
}
function getBarBounds(bar, useFinalPosition) {
    const { x, y, base, width, height } = bar.getProps([
        'x',
        'y',
        'base',
        'width',
        'height'
    ], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
    } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
    }
    return {
        left,
        top,
        right,
        bottom
    };
}
function skipOrLimit(skip, value, min, max) {
    return skip ? 0 : (0, _helpersDatasetJs.S)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip = bar.borderSkipped;
    const o = (0, _helpersDatasetJs.aw)(value);
    return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
    };
}
function parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius } = bar.getProps([
        'enableBorderRadius'
    ]);
    const value = bar.options.borderRadius;
    const o = (0, _helpersDatasetJs.ax)(value);
    const maxR = Math.min(maxW, maxH);
    const skip = bar.borderSkipped;
    const enableBorder = enableBorderRadius || (0, _helpersDatasetJs.i)(value);
    return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
    };
}
function boundingRects(bar) {
    const bounds = getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = parseBorderWidth(bar, width / 2, height / 2);
    const radius = parseBorderRadius(bar, width / 2, height / 2);
    return {
        outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height,
            radius
        },
        inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b,
            radius: {
                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
            }
        }
    };
}
function inRange(bar, x, y, useFinalPosition) {
    const skipX = x === null;
    const skipY = y === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || (0, _helpersDatasetJs.ak)(x, bounds.left, bounds.right)) && (skipY || (0, _helpersDatasetJs.ak)(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
    ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
    const x = rect.x !== refRect.x ? -amount : 0;
    const y = rect.y !== refRect.y ? -amount : 0;
    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
    return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
    };
}
class BarElement extends Element {
    static id = 'bar';
    static defaults = {
        borderSkipped: 'start',
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: 'auto',
        pointStyle: undefined
    };
    static defaultRoutes = {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    draw(ctx) {
        const { inflateAmount, options: { borderColor, backgroundColor } } = this;
        const { inner, outer } = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? (0, _helpersDatasetJs.av) : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
            ctx.beginPath();
            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
            ctx.clip();
            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
            ctx.fillStyle = borderColor;
            ctx.fill('evenodd');
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, base, horizontal } = this.getProps([
            'x',
            'y',
            'base',
            'horizontal'
        ], useFinalPosition);
        return {
            x: horizontal ? (x + base) / 2 : x,
            y: horizontal ? y : (y + base) / 2
        };
    }
    getRange(axis) {
        return axis === 'x' ? this.width / 2 : this.height / 2;
    }
}
var elements = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcElement: ArcElement,
    BarElement: BarElement,
    LineElement: LineElement,
    PointElement: PointElement
});
const BORDER_COLORS = [
    'rgb(54, 162, 235)',
    'rgb(255, 99, 132)',
    'rgb(255, 159, 64)',
    'rgb(255, 205, 86)',
    'rgb(75, 192, 192)',
    'rgb(153, 102, 255)',
    'rgb(201, 203, 207)' // grey
];
// Border colors with 50% transparency
const BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));
function getBorderColor(i) {
    return BORDER_COLORS[i % BORDER_COLORS.length];
}
function getBackgroundColor(i) {
    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i) {
    dataset.borderColor = getBorderColor(i);
    dataset.backgroundColor = getBackgroundColor(i);
    return ++i;
}
function colorizeDoughnutDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));
    return i;
}
function colorizePolarAreaDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));
    return i;
}
function getColorizer(chart) {
    let i = 0;
    return (dataset, datasetIndex)=>{
        const controller = chart.getDatasetMeta(datasetIndex).controller;
        if (controller instanceof DoughnutController) i = colorizeDoughnutDataset(dataset, i);
        else if (controller instanceof PolarAreaController) i = colorizePolarAreaDataset(dataset, i);
        else if (controller) i = colorizeDefaultDataset(dataset, i);
    };
}
function containsColorsDefinitions(descriptors) {
    let k;
    for(k in descriptors){
        if (descriptors[k].borderColor || descriptors[k].backgroundColor) return true;
    }
    return false;
}
function containsColorsDefinition(descriptor) {
    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
function containsDefaultColorsDefenitions() {
    return (0, _helpersDatasetJs.d).borderColor !== 'rgba(0,0,0,0.1)' || (0, _helpersDatasetJs.d).backgroundColor !== 'rgba(0,0,0,0.1)';
}
var plugin_colors = {
    id: 'colors',
    defaults: {
        enabled: true,
        forceOverride: false
    },
    beforeLayout (chart, _args, options) {
        if (!options.enabled) return;
        const { data: { datasets }, options: chartOptions } = chart.config;
        const { elements } = chartOptions;
        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();
        if (!options.forceOverride && containsColorDefenition) return;
        const colorizer = getColorizer(chart);
        datasets.forEach(colorizer);
    }
};
function lttbDecimation(data, start, count, availableWidth, options) {
    const samples = options.samples || availableWidth;
    if (samples >= count) return data.slice(start, start + count);
    const decimated = [];
    const bucketWidth = (count - 2) / (samples - 2);
    let sampledIndex = 0;
    const endIndex = start + count - 1;
    let a = start;
    let i, maxAreaPoint, maxArea, area, nextA;
    decimated[sampledIndex++] = data[a];
    for(i = 0; i < samples - 2; i++){
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for(j = avgRangeStart; j < avgRangeEnd; j++){
            avgX += data[j].x;
            avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const { x: pointAx, y: pointAy } = data[a];
        maxArea = area = -1;
        for(j = rangeOffs; j < rangeTo; j++){
            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
            if (area > maxArea) {
                maxArea = area;
                maxAreaPoint = data[j];
                nextA = j;
            }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
    }
    decimated[sampledIndex++] = data[endIndex];
    return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
    let avgX = 0;
    let countX = 0;
    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
    const decimated = [];
    const endIndex = start + count - 1;
    const xMin = data[start].x;
    const xMax = data[endIndex].x;
    const dx = xMax - xMin;
    for(i = start; i < start + count; ++i){
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
                minIndex = i;
            } else if (y > maxY) {
                maxY = y;
                maxIndex = i;
            }
            avgX = (countX * avgX + point.x) / ++countX;
        } else {
            const lastIndex = i - 1;
            if (!(0, _helpersDatasetJs.k)(minIndex) && !(0, _helpersDatasetJs.k)(maxIndex)) {
                const intermediateIndex1 = Math.min(minIndex, maxIndex);
                const intermediateIndex2 = Math.max(minIndex, maxIndex);
                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push({
                    ...data[intermediateIndex1],
                    x: avgX
                });
                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push({
                    ...data[intermediateIndex2],
                    x: avgX
                });
            }
            if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);
            decimated.push(point);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
            minIndex = maxIndex = startIndex = i;
        }
    }
    return decimated;
}
function cleanDecimatedDataset(dataset) {
    if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, 'data', {
            configurable: true,
            enumerable: true,
            writable: true,
            value: data
        });
    }
}
function cleanDecimatedData(chart) {
    chart.data.datasets.forEach((dataset)=>{
        cleanDecimatedDataset(dataset);
    });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
    const pointCount = points.length;
    let start = 0;
    let count;
    const { iScale } = meta;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) start = (0, _helpersDatasetJs.S)((0, _helpersDatasetJs.B)(points, iScale.axis, min).lo, 0, pointCount - 1);
    if (maxDefined) count = (0, _helpersDatasetJs.S)((0, _helpersDatasetJs.B)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
    else count = pointCount - start;
    return {
        start,
        count
    };
}
var plugin_decimation = {
    id: 'decimation',
    defaults: {
        algorithm: 'min-max',
        enabled: false
    },
    beforeElementsUpdate: (chart, args, options)=>{
        if (!options.enabled) {
            cleanDecimatedData(chart);
            return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex)=>{
            const { _data, indexAxis } = dataset;
            const meta = chart.getDatasetMeta(datasetIndex);
            const data = _data || dataset.data;
            if ((0, _helpersDatasetJs.a)([
                indexAxis,
                chart.options.indexAxis
            ]) === 'y') return;
            if (!meta.controller.supportsDecimation) return;
            const xAxis = chart.scales[meta.xAxisID];
            if (xAxis.type !== 'linear' && xAxis.type !== 'time') return;
            if (chart.options.parsing) return;
            let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
            const threshold = options.threshold || 4 * availableWidth;
            if (count <= threshold) {
                cleanDecimatedDataset(dataset);
                return;
            }
            if ((0, _helpersDatasetJs.k)(_data)) {
                dataset._data = data;
                delete dataset.data;
                Object.defineProperty(dataset, 'data', {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        return this._decimated;
                    },
                    set: function(d) {
                        this._data = d;
                    }
                });
            }
            let decimated;
            switch(options.algorithm){
                case 'lttb':
                    decimated = lttbDecimation(data, start, count, availableWidth, options);
                    break;
                case 'min-max':
                    decimated = minMaxDecimation(data, start, count, availableWidth);
                    break;
                default:
                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
            }
            dataset._decimated = decimated;
        });
    },
    destroy (chart) {
        cleanDecimatedData(chart);
    }
};
function _segments(line, target, property) {
    const segments = line.segments;
    const points = line.points;
    const tpoints = target.points;
    const parts = [];
    for (const segment of segments){
        let { start, end } = segment;
        end = _findSegmentEnd(start, end, points);
        const bounds = _getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
            parts.push({
                source: segment,
                target: bounds,
                start: points[start],
                end: points[end]
            });
            continue;
        }
        const targetSegments = (0, _helpersDatasetJs.ao)(target, bounds);
        for (const tgt of targetSegments){
            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
            const fillSources = (0, _helpersDatasetJs.ay)(segment, points, subBounds);
            for (const fillSource of fillSources)parts.push({
                source: fillSource,
                target: tgt,
                start: {
                    [property]: _getEdge(bounds, subBounds, 'start', Math.max)
                },
                end: {
                    [property]: _getEdge(bounds, subBounds, 'end', Math.min)
                }
            });
        }
    }
    return parts;
}
function _getBounds(property, first, last, loop) {
    if (loop) return;
    let start = first[property];
    let end = last[property];
    if (property === 'angle') {
        start = (0, _helpersDatasetJs.az)(start);
        end = (0, _helpersDatasetJs.az)(end);
    }
    return {
        property,
        start,
        end
    };
}
function _pointsFromSegments(boundary, line) {
    const { x = null, y = null } = boundary || {};
    const linePoints = line.points;
    const points = [];
    line.segments.forEach(({ start, end })=>{
        end = _findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
            points.push({
                x: first.x,
                y
            });
            points.push({
                x: last.x,
                y
            });
        } else if (x !== null) {
            points.push({
                x,
                y: first.y
            });
            points.push({
                x,
                y: last.y
            });
        }
    });
    return points;
}
function _findSegmentEnd(start, end, points) {
    for(; end > start; end--){
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) break;
    }
    return end;
}
function _getEdge(a, b, prop, fn) {
    if (a && b) return fn(a[prop], b[prop]);
    return a ? a[prop] : b ? b[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
    let points = [];
    let _loop = false;
    if ((0, _helpersDatasetJs.b)(boundary)) {
        _loop = true;
        points = boundary;
    } else points = _pointsFromSegments(boundary, line);
    return points.length ? new LineElement({
        points,
        options: {
            tension: 0
        },
        _loop,
        _fullLoop: _loop
    }) : null;
}
function _shouldApplyFill(source) {
    return source && source.fill !== false;
}
function _resolveTarget(sources, index, propagate) {
    const source = sources[index];
    let fill = source.fill;
    const visited = [
        index
    ];
    let target;
    if (!propagate) return fill;
    while(fill !== false && visited.indexOf(fill) === -1){
        if (!(0, _helpersDatasetJs.g)(fill)) return fill;
        target = sources[fill];
        if (!target) return false;
        if (target.visible) return fill;
        visited.push(fill);
        fill = target.fill;
    }
    return false;
}
function _decodeFill(line, index, count) {
    const fill = parseFillOption(line);
    if ((0, _helpersDatasetJs.i)(fill)) return isNaN(fill.value) ? false : fill;
    let target = parseFloat(fill);
    if ((0, _helpersDatasetJs.g)(target) && Math.floor(target) === target) return decodeTargetIndex(fill[0], index, target, count);
    return [
        'origin',
        'start',
        'end',
        'stack',
        'shape'
    ].indexOf(fill) >= 0 && fill;
}
function decodeTargetIndex(firstCh, index, target, count) {
    if (firstCh === '-' || firstCh === '+') target = index + target;
    if (target === index || target < 0 || target >= count) return false;
    return target;
}
function _getTargetPixel(fill, scale) {
    let pixel = null;
    if (fill === 'start') pixel = scale.bottom;
    else if (fill === 'end') pixel = scale.top;
    else if ((0, _helpersDatasetJs.i)(fill)) pixel = scale.getPixelForValue(fill.value);
    else if (scale.getBasePixel) pixel = scale.getBasePixel();
    return pixel;
}
function _getTargetValue(fill, scale, startValue) {
    let value;
    if (fill === 'start') value = startValue;
    else if (fill === 'end') value = scale.options.reverse ? scale.min : scale.max;
    else if ((0, _helpersDatasetJs.i)(fill)) value = fill.value;
    else value = scale.getBaseValue();
    return value;
}
function parseFillOption(line) {
    const options = line.options;
    const fillOption = options.fill;
    let fill = (0, _helpersDatasetJs.v)(fillOption && fillOption.target, fillOption);
    if (fill === undefined) fill = !!options.backgroundColor;
    if (fill === false || fill === null) return false;
    if (fill === true) return 'origin';
    return fill;
}
function _buildStackLine(source) {
    const { scale, index, line } = source;
    const points = [];
    const segments = line.segments;
    const sourcePoints = line.points;
    const linesBelow = getLinesBelow(scale, index);
    linesBelow.push(_createBoundaryLine({
        x: null,
        y: scale.bottom
    }, line));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        for(let j = segment.start; j <= segment.end; j++)addPointsBelow(points, sourcePoints[j], linesBelow);
    }
    return new LineElement({
        points,
        options: {}
    });
}
function getLinesBelow(scale, index) {
    const below = [];
    const metas = scale.getMatchingVisibleMetas('line');
    for(let i = 0; i < metas.length; i++){
        const meta = metas[i];
        if (meta.index === index) break;
        if (!meta.hidden) below.unshift(meta.dataset);
    }
    return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
    const postponed = [];
    for(let j = 0; j < linesBelow.length; j++){
        const line = linesBelow[j];
        const { first, last, point } = findPoint(line, sourcePoint, 'x');
        if (!point || first && last) continue;
        if (first) postponed.unshift(point);
        else {
            points.push(point);
            if (!last) break;
        }
    }
    points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
    const point = line.interpolate(sourcePoint, property);
    if (!point) return {};
    const pointValue = point[property];
    const segments = line.segments;
    const linePoints = line.points;
    let first = false;
    let last = false;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if ((0, _helpersDatasetJs.ak)(pointValue, firstValue, lastValue)) {
            first = pointValue === firstValue;
            last = pointValue === lastValue;
            break;
        }
    }
    return {
        first,
        last,
        point
    };
}
class simpleArc {
    constructor(opts){
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
    }
    pathSegment(ctx, bounds, opts) {
        const { x, y, radius } = this;
        bounds = bounds || {
            start: 0,
            end: (0, _helpersDatasetJs.T)
        };
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
    }
    interpolate(point) {
        const { x, y, radius } = this;
        const angle = point.angle;
        return {
            x: x + Math.cos(angle) * radius,
            y: y + Math.sin(angle) * radius,
            angle
        };
    }
}
function _getTarget(source) {
    const { chart, fill, line } = source;
    if ((0, _helpersDatasetJs.g)(fill)) return getLineByIndex(chart, fill);
    if (fill === 'stack') return _buildStackLine(source);
    if (fill === 'shape') return true;
    const boundary = computeBoundary(source);
    if (boundary instanceof simpleArc) return boundary;
    return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index) {
    const meta = chart.getDatasetMeta(index);
    const visible = meta && chart.isDatasetVisible(index);
    return visible ? meta.dataset : null;
}
function computeBoundary(source) {
    const scale = source.scale || {};
    if (scale.getPointPositionForValue) return computeCircularBoundary(source);
    return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
    const { scale = {}, fill } = source;
    const pixel = _getTargetPixel(fill, scale);
    if ((0, _helpersDatasetJs.g)(pixel)) {
        const horizontal = scale.isHorizontal();
        return {
            x: horizontal ? pixel : null,
            y: horizontal ? null : pixel
        };
    }
    return null;
}
function computeCircularBoundary(source) {
    const { scale, fill } = source;
    const options = scale.options;
    const length = scale.getLabels().length;
    const start = options.reverse ? scale.max : scale.min;
    const value = _getTargetValue(fill, scale, start);
    const target = [];
    if (options.grid.circular) {
        const center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
            x: center.x,
            y: center.y,
            radius: scale.getDistanceFromCenterForValue(value)
        });
    }
    for(let i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));
    return target;
}
function _drawfill(ctx, source, area) {
    const target = _getTarget(source);
    const { chart, index, line, scale, axis } = source;
    const lineOpts = line.options;
    const fillOption = lineOpts.fill;
    const color = lineOpts.backgroundColor;
    const { above = color, below = color } = fillOption || {};
    const meta = chart.getDatasetMeta(index);
    const clip = (0, _helpersDatasetJs.ah)(chart, meta);
    if (target && line.points.length) {
        (0, _helpersDatasetJs.Y)(ctx, area);
        doFill(ctx, {
            line,
            target,
            above,
            below,
            area,
            scale,
            axis,
            clip
        });
        (0, _helpersDatasetJs.$)(ctx);
    }
}
function doFill(ctx, cfg) {
    const { line, target, above, below, area, scale, clip } = cfg;
    const property = line._loop ? 'angle' : cfg.axis;
    ctx.save();
    if (property === 'x' && below !== above) {
        clipVertical(ctx, target, area.top);
        fill(ctx, {
            line,
            target,
            color: above,
            scale,
            property,
            clip
        });
        ctx.restore();
        ctx.save();
        clipVertical(ctx, target, area.bottom);
    }
    fill(ctx, {
        line,
        target,
        color: below,
        scale,
        property,
        clip
    });
    ctx.restore();
}
function clipVertical(ctx, target, clipY) {
    const { segments, points } = target;
    let first = true;
    let lineLoop = false;
    ctx.beginPath();
    for (const segment of segments){
        const { start, end } = segment;
        const firstPoint = points[start];
        const lastPoint = points[_findSegmentEnd(start, end, points)];
        if (first) {
            ctx.moveTo(firstPoint.x, firstPoint.y);
            first = false;
        } else {
            ctx.lineTo(firstPoint.x, clipY);
            ctx.lineTo(firstPoint.x, firstPoint.y);
        }
        lineLoop = !!target.pathSegment(ctx, segment, {
            move: lineLoop
        });
        if (lineLoop) ctx.closePath();
        else ctx.lineTo(lastPoint.x, clipY);
    }
    ctx.lineTo(target.first().x, clipY);
    ctx.closePath();
    ctx.clip();
}
function fill(ctx, cfg) {
    const { line, target, property, color, scale, clip } = cfg;
    const segments = _segments(line, target, property);
    for (const { source: src, target: tgt, start, end } of segments){
        const { style: { backgroundColor = color } = {} } = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
            if (lineLoop) ctx.closePath();
            else interpolatedLineTo(ctx, target, end, property);
            const targetLoop = !!target.pathSegment(ctx, tgt, {
                move: lineLoop,
                reverse: true
            });
            loop = lineLoop && targetLoop;
            if (!loop) interpolatedLineTo(ctx, target, start, property);
        }
        ctx.closePath();
        ctx.fill(loop ? 'evenodd' : 'nonzero');
        ctx.restore();
    }
}
function clipBounds(ctx, scale, clip, bounds) {
    const chartArea = scale.chart.chartArea;
    const { property, start, end } = bounds || {};
    if (property === 'x' || property === 'y') {
        let left, top, right, bottom;
        if (property === 'x') {
            left = start;
            top = chartArea.top;
            right = end;
            bottom = chartArea.bottom;
        } else {
            left = chartArea.left;
            top = start;
            right = chartArea.right;
            bottom = end;
        }
        ctx.beginPath();
        if (clip) {
            left = Math.max(left, clip.left);
            right = Math.min(right, clip.right);
            top = Math.max(top, clip.top);
            bottom = Math.min(bottom, clip.bottom);
        }
        ctx.rect(left, top, right - left, bottom - top);
        ctx.clip();
    }
}
function interpolatedLineTo(ctx, target, point, property) {
    const interpolatedPoint = target.interpolate(point, property);
    if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
}
var index = {
    id: 'filler',
    afterDatasetsUpdate (chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for(i = 0; i < count; ++i){
            meta = chart.getDatasetMeta(i);
            line = meta.dataset;
            source = null;
            if (line && line.options && line instanceof LineElement) source = {
                visible: chart.isDatasetVisible(i),
                index: i,
                fill: _decodeFill(line, i, count),
                chart,
                axis: meta.controller.options.indexAxis,
                scale: meta.vScale,
                line
            };
            meta.$filler = source;
            sources.push(source);
        }
        for(i = 0; i < count; ++i){
            source = sources[i];
            if (!source || source.fill === false) continue;
            source.fill = _resolveTarget(sources, i, options.propagate);
        }
    },
    beforeDraw (chart, _args, options) {
        const draw = options.drawTime === 'beforeDraw';
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (!source) continue;
            source.line.updateControlPoints(area, source.axis);
            if (draw && source.fill) _drawfill(chart.ctx, source, area);
        }
    },
    beforeDatasetsDraw (chart, _args, options) {
        if (options.drawTime !== 'beforeDatasetsDraw') return;
        const metasets = chart.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (_shouldApplyFill(source)) _drawfill(chart.ctx, source, chart.chartArea);
        }
    },
    beforeDatasetDraw (chart, args, options) {
        const source = args.meta.$filler;
        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') return;
        _drawfill(chart.ctx, source, chart.chartArea);
    },
    defaults: {
        propagate: true,
        drawTime: 'beforeDatasetDraw'
    }
};
const getBoxSize = (labelOpts, fontSize)=>{
    let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
    if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
    }
    return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
    };
};
const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
    constructor(config){
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = this._margins.left;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = this._margins.top;
            this.bottom = this.height;
        }
    }
    buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = (0, _helpersDatasetJs.Q)(labelOpts.generateLabels, [
            this.chart
        ], this) || [];
        if (labelOpts.filter) legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
        if (labelOpts.sort) legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
        if (this.options.reverse) legendItems.reverse();
        this.legendItems = legendItems;
    }
    fit() {
        const { options, ctx } = this;
        if (!options.display) {
            this.width = this.height = 0;
            return;
        }
        const labelOpts = options.labels;
        const labelFont = (0, _helpersDatasetJs.a0)(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
            width = this.maxWidth;
            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
            height = this.maxHeight;
            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx, maxWidth, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
            0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                totalHeight += lineHeight;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                top += lineHeight;
                row++;
            }
            hitboxes[i] = {
                left: 0,
                top,
                row,
                width: itemWidth,
                height: itemHeight
            };
            lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
    }
    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
        const { ctx, maxHeight, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i)=>{
            const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                totalWidth += currentColWidth + padding;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                left += currentColWidth + padding;
                col++;
                currentColWidth = currentColHeight = 0;
            }
            hitboxes[i] = {
                left,
                top: currentColHeight,
                col,
                width: itemWidth,
                height: itemHeight
            };
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
            width: currentColWidth,
            height: currentColHeight
        });
        return totalWidth;
    }
    adjustHitBoxes() {
        if (!this.options.display) return;
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
        const rtlHelper = (0, _helpersDatasetJs.aA)(rtl, this.left, this.width);
        if (this.isHorizontal()) {
            let row = 0;
            let left = (0, _helpersDatasetJs.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
            for (const hitbox of hitboxes){
                if (row !== hitbox.row) {
                    row = hitbox.row;
                    left = (0, _helpersDatasetJs.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
                }
                hitbox.top += this.top + titleHeight + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                left += hitbox.width + padding;
            }
        } else {
            let col = 0;
            let top = (0, _helpersDatasetJs.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            for (const hitbox of hitboxes){
                if (hitbox.col !== col) {
                    col = hitbox.col;
                    top = (0, _helpersDatasetJs.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                }
                hitbox.top = top;
                hitbox.left += this.left + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                top += hitbox.height + padding;
            }
        }
    }
    isHorizontal() {
        return this.options.position === 'top' || this.options.position === 'bottom';
    }
    draw() {
        if (this.options.display) {
            const ctx = this.ctx;
            (0, _helpersDatasetJs.Y)(ctx, this);
            this._draw();
            (0, _helpersDatasetJs.$)(ctx);
        }
    }
    _draw() {
        const { options: opts, columnSizes, lineWidths, ctx } = this;
        const { align, labels: labelOpts } = opts;
        const defaultColor = (0, _helpersDatasetJs.d).color;
        const rtlHelper = (0, _helpersDatasetJs.aA)(opts.rtl, this.left, this.width);
        const labelFont = (0, _helpersDatasetJs.a0)(labelOpts.font);
        const { padding } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign('left');
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;
            ctx.save();
            const lineWidth = (0, _helpersDatasetJs.v)(legendItem.lineWidth, 1);
            ctx.fillStyle = (0, _helpersDatasetJs.v)(legendItem.fillStyle, defaultColor);
            ctx.lineCap = (0, _helpersDatasetJs.v)(legendItem.lineCap, 'butt');
            ctx.lineDashOffset = (0, _helpersDatasetJs.v)(legendItem.lineDashOffset, 0);
            ctx.lineJoin = (0, _helpersDatasetJs.v)(legendItem.lineJoin, 'miter');
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = (0, _helpersDatasetJs.v)(legendItem.strokeStyle, defaultColor);
            ctx.setLineDash((0, _helpersDatasetJs.v)(legendItem.lineDash, []));
            if (labelOpts.usePointStyle) {
                const drawOptions = {
                    radius: boxHeight * Math.SQRT2 / 2,
                    pointStyle: legendItem.pointStyle,
                    rotation: legendItem.rotation,
                    borderWidth: lineWidth
                };
                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                const centerY = y + halfFontSize;
                (0, _helpersDatasetJs.aE)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
            } else {
                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                const borderRadius = (0, _helpersDatasetJs.ax)(legendItem.borderRadius);
                ctx.beginPath();
                if (Object.values(borderRadius).some((v)=>v !== 0)) (0, _helpersDatasetJs.av)(ctx, {
                    x: xBoxLeft,
                    y: yBoxTop,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                ctx.fill();
                if (lineWidth !== 0) ctx.stroke();
            }
            ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
            (0, _helpersDatasetJs.Z)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                strikethrough: legendItem.hidden,
                textAlign: rtlHelper.textAlign(legendItem.textAlign)
            });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) cursor = {
            x: (0, _helpersDatasetJs.a2)(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
        };
        else cursor = {
            x: this.left + padding,
            y: (0, _helpersDatasetJs.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
        };
        (0, _helpersDatasetJs.aB)(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i)=>{
            ctx.strokeStyle = legendItem.fontColor;
            ctx.fillStyle = legendItem.fontColor;
            const textWidth = ctx.measureText(legendItem.text).width;
            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
            const width = boxWidth + halfFontSize + textWidth;
            let x = cursor.x;
            let y = cursor.y;
            rtlHelper.setWidth(this.width);
            if (isHorizontal) {
                if (i > 0 && x + width + padding > this.right) {
                    y = cursor.y += lineHeight;
                    cursor.line++;
                    x = cursor.x = (0, _helpersDatasetJs.a2)(align, this.left + padding, this.right - lineWidths[cursor.line]);
                }
            } else if (i > 0 && y + lineHeight > this.bottom) {
                x = cursor.x = x + columnSizes[cursor.line].width + padding;
                cursor.line++;
                y = cursor.y = (0, _helpersDatasetJs.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
            }
            const realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            x = (0, _helpersDatasetJs.aC)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
            fillText(rtlHelper.x(x), y, legendItem);
            if (isHorizontal) cursor.x += width + padding;
            else if (typeof legendItem.text !== 'string') {
                const fontLineHeight = labelFont.lineHeight;
                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
            } else cursor.y += lineHeight;
        });
        (0, _helpersDatasetJs.aD)(this.ctx, opts.textDirection);
    }
    drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = (0, _helpersDatasetJs.a0)(titleOpts.font);
        const titlePadding = (0, _helpersDatasetJs.E)(titleOpts.padding);
        if (!titleOpts.display) return;
        const rtlHelper = (0, _helpersDatasetJs.aA)(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
            maxWidth = Math.max(...this.lineWidths);
            y = this.top + topPaddingPlusHalfFontSize;
            left = (0, _helpersDatasetJs.a2)(opts.align, left, this.right - maxWidth);
        } else {
            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
            y = topPaddingPlusHalfFontSize + (0, _helpersDatasetJs.a2)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = (0, _helpersDatasetJs.a2)(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign((0, _helpersDatasetJs.a1)(position));
        ctx.textBaseline = 'middle';
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        (0, _helpersDatasetJs.Z)(ctx, titleOpts.text, x, y, titleFont);
    }
    _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = (0, _helpersDatasetJs.a0)(titleOpts.font);
        const titlePadding = (0, _helpersDatasetJs.E)(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
    _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if ((0, _helpersDatasetJs.ak)(x, this.left, this.right) && (0, _helpersDatasetJs.ak)(y, this.top, this.bottom)) {
            lh = this.legendHitBoxes;
            for(i = 0; i < lh.length; ++i){
                hitBox = lh[i];
                if ((0, _helpersDatasetJs.ak)(x, hitBox.left, hitBox.left + hitBox.width) && (0, _helpersDatasetJs.ak)(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];
            }
        }
        return null;
    }
    handleEvent(e) {
        const opts = this.options;
        if (!isListened(e.type, opts)) return;
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === 'mousemove' || e.type === 'mouseout') {
            const previous = this._hoveredItem;
            const sameItem = itemsEqual(previous, hoveredItem);
            if (previous && !sameItem) (0, _helpersDatasetJs.Q)(opts.onLeave, [
                e,
                previous,
                this
            ], this);
            this._hoveredItem = hoveredItem;
            if (hoveredItem && !sameItem) (0, _helpersDatasetJs.Q)(opts.onHover, [
                e,
                hoveredItem,
                this
            ], this);
        } else if (hoveredItem) (0, _helpersDatasetJs.Q)(opts.onClick, [
            e,
            hoveredItem,
            this
        ], this);
    }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
    return {
        itemWidth,
        itemHeight
    };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
    let legendItemText = legendItem.text;
    if (legendItemText && typeof legendItemText !== 'string') legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
    let itemHeight = _itemHeight;
    if (typeof legendItem.text !== 'string') itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
    return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
    const labelHeight = legendItem.text ? legendItem.text.length : 0;
    return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) return true;
    if (opts.onClick && (type === 'click' || type === 'mouseup')) return true;
    return false;
}
var plugin_legend = {
    id: 'legend',
    _element: Legend,
    start (chart, _args, options) {
        const legend = chart.legend = new Legend({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
    },
    stop (chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
    },
    beforeUpdate (chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
    },
    afterUpdate (chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
    },
    afterEvent (chart, args) {
        if (!args.replay) chart.legend.handleEvent(args.event);
    },
    defaults: {
        display: true,
        position: 'top',
        align: 'center',
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick (e, legendItem, legend) {
            const index = legendItem.datasetIndex;
            const ci = legend.chart;
            if (ci.isDatasetVisible(index)) {
                ci.hide(index);
                legendItem.hidden = true;
            } else {
                ci.show(index);
                legendItem.hidden = false;
            }
        },
        onHover: null,
        onLeave: null,
        labels: {
            color: (ctx)=>ctx.chart.options.color,
            boxWidth: 40,
            padding: 10,
            generateLabels (chart) {
                const datasets = chart.data.datasets;
                const { labels: { usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius } } = chart.legend.options;
                return chart._getSortedDatasetMetas().map((meta)=>{
                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                    const borderWidth = (0, _helpersDatasetJs.E)(style.borderWidth);
                    return {
                        text: datasets[meta.index].label,
                        fillStyle: style.backgroundColor,
                        fontColor: color,
                        hidden: !meta.visible,
                        lineCap: style.borderCapStyle,
                        lineDash: style.borderDash,
                        lineDashOffset: style.borderDashOffset,
                        lineJoin: style.borderJoinStyle,
                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
                        strokeStyle: style.borderColor,
                        pointStyle: pointStyle || style.pointStyle,
                        rotation: style.rotation,
                        textAlign: textAlign || style.textAlign,
                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                        datasetIndex: meta.index
                    };
                }, this);
            }
        },
        title: {
            color: (ctx)=>ctx.chart.options.color,
            display: false,
            position: 'center',
            text: ''
        }
    },
    descriptors: {
        _scriptable: (name)=>!name.startsWith('on'),
        labels: {
            _scriptable: (name)=>![
                    'generateLabels',
                    'filter',
                    'sort'
                ].includes(name)
        }
    }
};
class Title extends Element {
    constructor(config){
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = (0, _helpersDatasetJs.b)(opts.text) ? opts.text.length : 1;
        this._padding = (0, _helpersDatasetJs.E)(opts.padding);
        const textSize = lineCount * (0, _helpersDatasetJs.a0)(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) this.height = textSize;
        else this.width = textSize;
    }
    isHorizontal() {
        const pos = this.options.position;
        return pos === 'top' || pos === 'bottom';
    }
    _drawArgs(offset) {
        const { top, left, bottom, right, options } = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
            titleX = (0, _helpersDatasetJs.a2)(align, left, right);
            titleY = top + offset;
            maxWidth = right - left;
        } else {
            if (options.position === 'left') {
                titleX = left + offset;
                titleY = (0, _helpersDatasetJs.a2)(align, bottom, top);
                rotation = (0, _helpersDatasetJs.P) * -0.5;
            } else {
                titleX = right - offset;
                titleY = (0, _helpersDatasetJs.a2)(align, top, bottom);
                rotation = (0, _helpersDatasetJs.P) * 0.5;
            }
            maxWidth = bottom - top;
        }
        return {
            titleX,
            titleY,
            maxWidth,
            rotation
        };
    }
    draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) return;
        const fontOpts = (0, _helpersDatasetJs.a0)(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
        (0, _helpersDatasetJs.Z)(ctx, opts.text, 0, 0, fontOpts, {
            color: opts.color,
            maxWidth,
            rotation,
            textAlign: (0, _helpersDatasetJs.a1)(opts.align),
            textBaseline: 'middle',
            translation: [
                titleX,
                titleY
            ]
        });
    }
}
function createTitle(chart, titleOpts) {
    const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
    });
    layouts.configure(chart, title, titleOpts);
    layouts.addBox(chart, title);
    chart.titleBlock = title;
}
var plugin_title = {
    id: 'title',
    _element: Title,
    start (chart, _args, options) {
        createTitle(chart, options);
    },
    stop (chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
    },
    beforeUpdate (chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: 'center',
        display: false,
        font: {
            weight: 'bold'
        },
        fullSize: true,
        padding: 10,
        position: 'top',
        text: '',
        weight: 2000
    },
    defaultRoutes: {
        color: 'color'
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const map = new WeakMap();
var plugin_subtitle = {
    id: 'subtitle',
    start (chart, _args, options) {
        const title = new Title({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, title, options);
        layouts.addBox(chart, title);
        map.set(chart, title);
    },
    stop (chart) {
        layouts.removeBox(chart, map.get(chart));
        map.delete(chart);
    },
    beforeUpdate (chart, _args, options) {
        const title = map.get(chart);
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: 'center',
        display: false,
        font: {
            weight: 'normal'
        },
        fullSize: true,
        padding: 0,
        position: 'top',
        text: '',
        weight: 1500
    },
    defaultRoutes: {
        color: 'color'
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const positioners = {
    average (items) {
        if (!items.length) return false;
        let i, len;
        let xSet = new Set();
        let y = 0;
        let count = 0;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const pos = el.tooltipPosition();
                xSet.add(pos.x);
                y += pos.y;
                ++count;
            }
        }
        if (count === 0 || xSet.size === 0) return false;
        const xAverage = [
            ...xSet
        ].reduce((a, b)=>a + b) / xSet.size;
        return {
            x: xAverage,
            y: y / count
        };
    },
    nearest (items, eventPosition) {
        if (!items.length) return false;
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const center = el.getCenterPoint();
                const d = (0, _helpersDatasetJs.aF)(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            const tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x,
            y
        };
    }
};
function pushOrConcat(base, toPush) {
    if (toPush) {
        if ((0, _helpersDatasetJs.b)(toPush)) Array.prototype.push.apply(base, toPush);
        else base.push(toPush);
    }
    return base;
}
function splitNewlines(str) {
    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) return str.split('\n');
    return str;
}
function createTooltipItem(chart, item) {
    const { element, datasetIndex, index } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label, value } = controller.getLabelAndValue(index);
    return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
    };
}
function getTooltipSize(tooltip, options) {
    const ctx = tooltip.chart.ctx;
    const { body, footer, title } = tooltip;
    const { boxWidth, boxHeight } = options;
    const bodyFont = (0, _helpersDatasetJs.a0)(options.bodyFont);
    const titleFont = (0, _helpersDatasetJs.a0)(options.titleFont);
    const footerFont = (0, _helpersDatasetJs.a0)(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = (0, _helpersDatasetJs.E)(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    let widthPadding = 0;
    const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.save();
    ctx.font = titleFont.string;
    (0, _helpersDatasetJs.F)(tooltip.title, maxLineWidth);
    ctx.font = bodyFont.string;
    (0, _helpersDatasetJs.F)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    (0, _helpersDatasetJs.F)(body, (bodyItem)=>{
        (0, _helpersDatasetJs.F)(bodyItem.before, maxLineWidth);
        (0, _helpersDatasetJs.F)(bodyItem.lines, maxLineWidth);
        (0, _helpersDatasetJs.F)(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = footerFont.string;
    (0, _helpersDatasetJs.F)(tooltip.footer, maxLineWidth);
    ctx.restore();
    width += padding.width;
    return {
        width,
        height
    };
}
function determineYAlign(chart, size) {
    const { y, height } = size;
    if (y < height / 2) return 'top';
    else if (y > chart.height - height / 2) return 'bottom';
    return 'center';
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x, width } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === 'left' && x + width + caret > chart.width) return true;
    if (xAlign === 'right' && x - width - caret < 0) return true;
}
function determineXAlign(chart, options, size, yAlign) {
    const { x, width } = size;
    const { width: chartWidth, chartArea: { left, right } } = chart;
    let xAlign = 'center';
    if (yAlign === 'center') xAlign = x <= (left + right) / 2 ? 'left' : 'right';
    else if (x <= width / 2) xAlign = 'left';
    else if (x >= chartWidth - width / 2) xAlign = 'right';
    if (doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = 'center';
    return xAlign;
}
function determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
    return {
        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
    };
}
function alignX(size, xAlign) {
    let { x, width } = size;
    if (xAlign === 'right') x -= width;
    else if (xAlign === 'center') x -= width / 2;
    return x;
}
function alignY(size, yAlign, paddingAndSize) {
    let { y, height } = size;
    if (yAlign === 'top') y += paddingAndSize;
    else if (yAlign === 'bottom') y -= height + paddingAndSize;
    else y -= height / 2;
    return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize, caretPadding, cornerRadius } = options;
    const { xAlign, yAlign } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersDatasetJs.ax)(cornerRadius);
    let x = alignX(size, xAlign);
    const y = alignY(size, yAlign, paddingAndSize);
    if (yAlign === 'center') {
        if (xAlign === 'left') x += paddingAndSize;
        else if (xAlign === 'right') x -= paddingAndSize;
    } else if (xAlign === 'left') x -= Math.max(topLeft, bottomLeft) + caretSize;
    else if (xAlign === 'right') x += Math.max(topRight, bottomRight) + caretSize;
    return {
        x: (0, _helpersDatasetJs.S)(x, 0, chart.width - size.width),
        y: (0, _helpersDatasetJs.S)(y, 0, chart.height - size.height)
    };
}
function getAlignedX(tooltip, align, options) {
    const padding = (0, _helpersDatasetJs.E)(options.padding);
    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback) {
    return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
    return (0, _helpersDatasetJs.j)(parent, {
        tooltip,
        tooltipItems,
        type: 'tooltip'
    });
}
function overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
    beforeTitle: (0, _helpersDatasetJs.aG),
    title (tooltipItems) {
        if (tooltipItems.length > 0) {
            const item = tooltipItems[0];
            const labels = item.chart.data.labels;
            const labelCount = labels ? labels.length : 0;
            if (this && this.options && this.options.mode === 'dataset') return item.dataset.label || '';
            else if (item.label) return item.label;
            else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];
        }
        return '';
    },
    afterTitle: (0, _helpersDatasetJs.aG),
    beforeBody: (0, _helpersDatasetJs.aG),
    beforeLabel: (0, _helpersDatasetJs.aG),
    label (tooltipItem) {
        if (this && this.options && this.options.mode === 'dataset') return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
        let label = tooltipItem.dataset.label || '';
        if (label) label += ': ';
        const value = tooltipItem.formattedValue;
        if (!(0, _helpersDatasetJs.k)(value)) label += value;
        return label;
    },
    labelColor (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            borderColor: options.borderColor,
            backgroundColor: options.backgroundColor,
            borderWidth: options.borderWidth,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderRadius: 0
        };
    },
    labelTextColor () {
        return this.options.bodyColor;
    },
    labelPointStyle (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            pointStyle: options.pointStyle,
            rotation: options.rotation
        };
    },
    afterLabel: (0, _helpersDatasetJs.aG),
    afterBody: (0, _helpersDatasetJs.aG),
    beforeFooter: (0, _helpersDatasetJs.aG),
    footer: (0, _helpersDatasetJs.aG),
    afterFooter: (0, _helpersDatasetJs.aG)
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
    const result = callbacks[name].call(ctx, arg);
    if (typeof result === 'undefined') return defaultCallbacks[name].call(ctx, arg);
    return result;
}
class Tooltip extends Element {
    static positioners = positioners;
    constructor(config){
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
    }
    initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
    }
    _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) return cached;
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);
        return animations;
    }
    getContext() {
        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
        const { callbacks } = options;
        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);
        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);
        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
    }
    getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));
    }
    getBody(tooltipItems, options) {
        const { callbacks } = options;
        const bodyItems = [];
        (0, _helpersDatasetJs.F)(tooltipItems, (context)=>{
            const bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            const scoped = overrideCallbacks(callbacks, context);
            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));
            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));
            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));
    }
    getFooter(tooltipItems, options) {
        const { callbacks } = options;
        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);
        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);
        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
    }
    _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for(i = 0, len = active.length; i < len; ++i)tooltipItems.push(createTooltipItem(this.chart, active[i]));
        if (options.filter) tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
        if (options.itemSort) tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
        (0, _helpersDatasetJs.F)(tooltipItems, (context)=>{
            const scoped = overrideCallbacks(options.callbacks, context);
            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));
            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));
            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
    }
    update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
            if (this.opacity !== 0) properties = {
                opacity: 0
            };
        } else {
            const position = positioners[options.position].call(this, active, this._eventPosition);
            tooltipItems = this._createItems(options);
            this.title = this.getTitle(tooltipItems, options);
            this.beforeBody = this.getBeforeBody(tooltipItems, options);
            this.body = this.getBody(tooltipItems, options);
            this.afterBody = this.getAfterBody(tooltipItems, options);
            this.footer = this.getFooter(tooltipItems, options);
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, size);
            const alignment = determineAlignment(this.chart, options, positionAndSize);
            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            properties = {
                opacity: 1,
                x: backgroundPoint.x,
                y: backgroundPoint.y,
                width: size.width,
                height: size.height,
                caretX: position.x,
                caretY: position.y
            };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) this._resolveAnimations().update(this, properties);
        if (changed && options.external) options.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay
        });
    }
    drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
        const { xAlign, yAlign } = this;
        const { caretSize, cornerRadius } = options;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersDatasetJs.ax)(cornerRadius);
        const { x: ptX, y: ptY } = tooltipPoint;
        const { width, height } = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === 'center') {
            y2 = ptY + height / 2;
            if (xAlign === 'left') {
                x1 = ptX;
                x2 = x1 - caretSize;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            }
            x3 = x1;
        } else {
            if (xAlign === 'left') x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
            else if (xAlign === 'right') x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
            else x2 = this.caretX;
            if (yAlign === 'top') {
                y1 = ptY;
                y2 = y1 - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                x1 = x2 + caretSize;
                x3 = x2 - caretSize;
            }
            y3 = y1;
        }
        return {
            x1,
            x2,
            x3,
            y1,
            y2,
            y3
        };
    }
    drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
            const rtlHelper = (0, _helpersDatasetJs.aA)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.titleAlign, options);
            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
            ctx.textBaseline = 'middle';
            titleFont = (0, _helpersDatasetJs.a0)(options.titleFont);
            titleSpacing = options.titleSpacing;
            ctx.fillStyle = options.titleColor;
            ctx.font = titleFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                pt.y += titleFont.lineHeight + titleSpacing;
                if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;
            }
        }
    }
    _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColor = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const { boxHeight, boxWidth } = options;
        const bodyFont = (0, _helpersDatasetJs.a0)(options.bodyFont);
        const colorX = getAlignedX(this, 'left', options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
            const drawOptions = {
                radius: Math.min(boxWidth, boxHeight) / 2,
                pointStyle: labelPointStyle.pointStyle,
                rotation: labelPointStyle.rotation,
                borderWidth: 1
            };
            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
            const centerY = colorY + boxHeight / 2;
            ctx.strokeStyle = options.multiKeyBackground;
            ctx.fillStyle = options.multiKeyBackground;
            (0, _helpersDatasetJs.au)(ctx, drawOptions, centerX, centerY);
            ctx.strokeStyle = labelColor.borderColor;
            ctx.fillStyle = labelColor.backgroundColor;
            (0, _helpersDatasetJs.au)(ctx, drawOptions, centerX, centerY);
        } else {
            ctx.lineWidth = (0, _helpersDatasetJs.i)(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
            ctx.strokeStyle = labelColor.borderColor;
            ctx.setLineDash(labelColor.borderDash || []);
            ctx.lineDashOffset = labelColor.borderDashOffset || 0;
            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
            const borderRadius = (0, _helpersDatasetJs.ax)(labelColor.borderRadius);
            if (Object.values(borderRadius).some((v)=>v !== 0)) {
                ctx.beginPath();
                ctx.fillStyle = options.multiKeyBackground;
                (0, _helpersDatasetJs.av)(ctx, {
                    x: outerX,
                    y: colorY,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.beginPath();
                (0, _helpersDatasetJs.av)(ctx, {
                    x: innerX,
                    y: colorY + 1,
                    w: boxWidth - 2,
                    h: boxHeight - 2,
                    radius: borderRadius
                });
                ctx.fill();
            } else {
                ctx.fillStyle = options.multiKeyBackground;
                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
            }
        }
        ctx.fillStyle = this.labelTextColors[i];
    }
    drawBody(pt, ctx, options) {
        const { body } = this;
        const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
        const bodyFont = (0, _helpersDatasetJs.a0)(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = (0, _helpersDatasetJs.aA)(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
            pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = 'middle';
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        (0, _helpersDatasetJs.F)(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for(i = 0, ilen = body.length; i < ilen; ++i){
            bodyItem = body[i];
            textColor = this.labelTextColors[i];
            ctx.fillStyle = textColor;
            (0, _helpersDatasetJs.F)(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            if (displayColors && lines.length) {
                this._drawColorBox(ctx, pt, i, rtlHelper, options);
                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
            }
            for(j = 0, jlen = lines.length; j < jlen; ++j){
                fillLineOfText(lines[j]);
                bodyLineHeight = bodyFont.lineHeight;
            }
            (0, _helpersDatasetJs.F)(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        (0, _helpersDatasetJs.F)(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    }
    drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
            const rtlHelper = (0, _helpersDatasetJs.aA)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.footerAlign, options);
            pt.y += options.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
            ctx.textBaseline = 'middle';
            footerFont = (0, _helpersDatasetJs.a0)(options.footerFont);
            ctx.fillStyle = options.footerColor;
            ctx.font = footerFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                pt.y += footerFont.lineHeight + options.footerSpacing;
            }
        }
    }
    drawBackground(pt, ctx, tooltipSize, options) {
        const { xAlign, yAlign } = this;
        const { x, y } = pt;
        const { width, height } = tooltipSize;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersDatasetJs.ax)(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === 'top') this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === 'center' && xAlign === 'right') this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === 'bottom') this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === 'center' && xAlign === 'left') this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) ctx.stroke();
    }
    _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
            const position = positioners[options.position].call(this, this._active, this._eventPosition);
            if (!position) return;
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, this._size);
            const alignment = determineAlignment(chart, options, positionAndSize);
            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
            if (animX._to !== point.x || animY._to !== point.y) {
                this.xAlign = alignment.xAlign;
                this.yAlign = alignment.yAlign;
                this.width = size.width;
                this.height = size.height;
                this.caretX = position.x;
                this.caretY = position.y;
                this._resolveAnimations().update(this, point);
            }
        }
    }
    _willRender() {
        return !!this.opacity;
    }
    draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) return;
        this._updateAnimationTarget(options);
        const tooltipSize = {
            width: this.width,
            height: this.height
        };
        const pt = {
            x: this.x,
            y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = (0, _helpersDatasetJs.E)(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, ctx, tooltipSize, options);
            (0, _helpersDatasetJs.aB)(ctx, options.textDirection);
            pt.y += padding.top;
            this.drawTitle(pt, ctx, options);
            this.drawBody(pt, ctx, options);
            this.drawFooter(pt, ctx, options);
            (0, _helpersDatasetJs.aD)(ctx, options.textDirection);
            ctx.restore();
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.chart.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error('Cannot find a dataset at index ' + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersDatasetJs.ai)(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
            this._active = active;
            this._eventPosition = eventPosition;
            this._ignoreReplayEvents = true;
            this.update(true);
        }
    }
    handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) return false;
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !(0, _helpersDatasetJs.ai)(active, lastActive) || positionChanged;
        if (changed) {
            this._active = active;
            if (options.enabled || options.external) {
                this._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                this.update(true, replay);
            }
        }
        return changed;
    }
    _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === 'mouseout') return [];
        if (!inChartArea) return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) active.reverse();
        return active;
    }
    _positionChanged(active, e) {
        const { caretX, caretY, options } = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
    }
}
var plugin_tooltip = {
    id: 'tooltip',
    _element: Tooltip,
    positioners,
    afterInit (chart, _args, options) {
        if (options) chart.tooltip = new Tooltip({
            chart,
            options
        });
    },
    beforeUpdate (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    reset (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    afterDraw (chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
            const args = {
                tooltip
            };
            if (chart.notifyPlugins('beforeTooltipDraw', {
                ...args,
                cancelable: true
            }) === false) return;
            tooltip.draw(chart.ctx);
            chart.notifyPlugins('afterTooltipDraw', args);
        }
    },
    afterEvent (chart, args) {
        if (chart.tooltip) {
            const useFinalPosition = args.replay;
            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;
        }
    },
    defaults: {
        enabled: true,
        external: null,
        position: 'average',
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleColor: '#fff',
        titleFont: {
            weight: 'bold'
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: 'left',
        bodyColor: '#fff',
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: 'left',
        footerColor: '#fff',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
            weight: 'bold'
        },
        footerAlign: 'left',
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts)=>opts.bodyFont.size,
        boxWidth: (ctx, opts)=>opts.bodyFont.size,
        multiKeyBackground: '#fff',
        displayColors: true,
        boxPadding: 0,
        borderColor: 'rgba(0,0,0,0)',
        borderWidth: 0,
        animation: {
            duration: 400,
            easing: 'easeOutQuart'
        },
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'width',
                    'height',
                    'caretX',
                    'caretY'
                ]
            },
            opacity: {
                easing: 'linear',
                duration: 200
            }
        },
        callbacks: defaultCallbacks
    },
    defaultRoutes: {
        bodyFont: 'font',
        footerFont: 'font',
        titleFont: 'font'
    },
    descriptors: {
        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',
        _indexable: false,
        callbacks: {
            _scriptable: false,
            _indexable: false
        },
        animation: {
            _fallback: false
        },
        animations: {
            _fallback: 'animation'
        }
    },
    additionalOptionScopes: [
        'interaction'
    ]
};
var plugins = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Colors: plugin_colors,
    Decimation: plugin_decimation,
    Filler: index,
    Legend: plugin_legend,
    SubTitle: plugin_subtitle,
    Title: plugin_title,
    Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index, addedLabels)=>{
    if (typeof raw === 'string') {
        index = labels.push(raw) - 1;
        addedLabels.unshift({
            index,
            label: raw
        });
    } else if (isNaN(raw)) index = null;
    return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) return addIfString(labels, raw, index, addedLabels);
    const last = labels.lastIndexOf(raw);
    return first !== last ? index : first;
}
const validIndex = (index, max)=>index === null ? null : (0, _helpersDatasetJs.S)(Math.round(index), 0, max);
function _getLabelForValue(value) {
    const labels = this.getLabels();
    if (value >= 0 && value < labels.length) return labels[value];
    return value;
}
class CategoryScale extends Scale {
    static id = 'category';
    static defaults = {
        ticks: {
            callback: _getLabelForValue
        }
    };
    constructor(cfg){
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
    }
    init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
            const labels = this.getLabels();
            for (const { index, label } of added)if (labels[index] === label) labels.splice(index, 1);
            this._addedLabels = [];
        }
        super.init(scaleOptions);
    }
    parse(raw, index) {
        if ((0, _helpersDatasetJs.k)(raw)) return null;
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0, _helpersDatasetJs.v)(index, raw), this._addedLabels);
        return validIndex(index, labels.length - 1);
    }
    determineDataLimits() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this.getMinMax(true);
        if (this.options.bounds === 'ticks') {
            if (!minDefined) min = 0;
            if (!maxDefined) max = this.getLabels().length - 1;
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for(let value = min; value <= max; value++)ticks.push({
            value
        });
        return ticks;
    }
    getLabelForValue(value) {
        return _getLabelForValue.call(this, value);
    }
    configure() {
        super.configure();
        if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;
    }
    getPixelForValue(value) {
        if (typeof value !== 'number') value = this.parse(value);
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
        return this.bottom;
    }
}
function generateTicks$1(generationOptions, dataRange) {
    const ticks = [];
    const MIN_SPACING = 1e-14;
    const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
    const unit = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin, max: rmax } = dataRange;
    const minDefined = !(0, _helpersDatasetJs.k)(min);
    const maxDefined = !(0, _helpersDatasetJs.k)(max);
    const countDefined = !(0, _helpersDatasetJs.k)(count);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = (0, _helpersDatasetJs.aI)((rmax - rmin) / maxSpaces / unit) * unit;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [
        {
            value: rmin
        },
        {
            value: rmax
        }
    ];
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) spacing = (0, _helpersDatasetJs.aI)(numSpaces * spacing / maxSpaces / unit) * unit;
    if (!(0, _helpersDatasetJs.k)(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === 'ticks') {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
        niceMin = rmin;
        niceMax = rmax;
    }
    if (minDefined && maxDefined && step && (0, _helpersDatasetJs.aJ)((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
    } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
    } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if ((0, _helpersDatasetJs.aK)(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);
        else numSpaces = Math.ceil(numSpaces);
    }
    const decimalPlaces = Math.max((0, _helpersDatasetJs.aL)(spacing), (0, _helpersDatasetJs.aL)(niceMin));
    factor = Math.pow(10, (0, _helpersDatasetJs.k)(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j = 0;
    if (minDefined) {
        if (includeBounds && niceMin !== min) {
            ticks.push({
                value: min
            });
            if (niceMin < min) j++;
            if ((0, _helpersDatasetJs.aK)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) j++;
        } else if (niceMin < min) j++;
    }
    for(; j < numSpaces; ++j){
        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
        if (maxDefined && tickValue > max) break;
        ticks.push({
            value: tickValue
        });
    }
    if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && (0, _helpersDatasetJs.aK)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;
        else ticks.push({
            value: max
        });
    } else if (!maxDefined || niceMax === max) ticks.push({
        value: niceMax
    });
    return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
    const rad = (0, _helpersDatasetJs.t)(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
    const length = 0.75 * minSpacing * ('' + value).length;
    return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        if ((0, _helpersDatasetJs.k)(raw)) return null;
        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) return null;
        return +raw;
    }
    handleTickRangeOptions() {
        const { beginAtZero } = this.options;
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (beginAtZero) {
            const minSign = (0, _helpersDatasetJs.s)(min);
            const maxSign = (0, _helpersDatasetJs.s)(max);
            if (minSign < 0 && maxSign < 0) setMax(0);
            else if (minSign > 0 && maxSign > 0) setMin(0);
        }
        if (min === max) {
            let offset = max === 0 ? 1 : Math.abs(max * 0.05);
            setMax(max + offset);
            if (!beginAtZero) setMin(min - offset);
        }
        this.min = min;
        this.max = max;
    }
    getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit, stepSize } = tickOpts;
        let maxTicks;
        if (stepSize) {
            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
            if (maxTicks > 1000) {
                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                maxTicks = 1000;
            }
        } else {
            maxTicks = this.computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);
        return maxTicks;
    }
    computeTickLimit() {
        return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
            maxTicks,
            bounds: opts.bounds,
            min: opts.min,
            max: opts.max,
            precision: tickOpts.precision,
            step: tickOpts.stepSize,
            count: tickOpts.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: tickOpts.minRotation || 0,
            includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === 'ticks') (0, _helpersDatasetJs.aH)(ticks, this, 'value');
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
    }
    getLabelForValue(value) {
        return (0, _helpersDatasetJs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
}
class LinearScale extends LinearScaleBase {
    static id = 'linear';
    static defaults = {
        ticks: {
            callback: (0, _helpersDatasetJs.aM).formatters.numeric
        }
    };
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersDatasetJs.g)(min) ? min : 0;
        this.max = (0, _helpersDatasetJs.g)(max) ? max : 1;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = (0, _helpersDatasetJs.t)(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
}
const log10Floor = (v)=>Math.floor((0, _helpersDatasetJs.aN)(v));
const changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);
function isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, log10Floor(tickVal));
    return remain === 1;
}
function steps(min, max, rangeExp) {
    const rangeStep = Math.pow(10, rangeExp);
    const start = Math.floor(min / rangeStep);
    const end = Math.ceil(max / rangeStep);
    return end - start;
}
function startExp(min, max) {
    const range = max - min;
    let rangeExp = log10Floor(range);
    while(steps(min, max, rangeExp) > 10)rangeExp++;
    while(steps(min, max, rangeExp) < 10)rangeExp--;
    return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
    min = (0, _helpersDatasetJs.O)(generationOptions.min, min);
    const ticks = [];
    const minExp = log10Floor(min);
    let exp = startExp(min, max);
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    const stepSize = Math.pow(10, exp);
    const base = minExp > exp ? Math.pow(10, minExp) : 0;
    const start = Math.round((min - base) * precision) / precision;
    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
    let significand = Math.floor((start - offset) / Math.pow(10, exp));
    let value = (0, _helpersDatasetJs.O)(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
    while(value < max){
        ticks.push({
            value,
            major: isMajor(value),
            significand
        });
        if (significand >= 10) significand = significand < 15 ? 15 : 20;
        else significand++;
        if (significand >= 20) {
            exp++;
            significand = 2;
            precision = exp >= 0 ? 1 : precision;
        }
        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
    }
    const lastTick = (0, _helpersDatasetJs.O)(generationOptions.max, value);
    ticks.push({
        value: lastTick,
        major: isMajor(lastTick),
        significand
    });
    return ticks;
}
class LogarithmicScale extends Scale {
    static id = 'logarithmic';
    static defaults = {
        ticks: {
            callback: (0, _helpersDatasetJs.aM).formatters.logarithmic,
            major: {
                enabled: true
            }
        }
    };
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [
            raw,
            index
        ]);
        if (value === 0) {
            this._zero = true;
            return undefined;
        }
        return (0, _helpersDatasetJs.g)(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersDatasetJs.g)(min) ? Math.max(0, min) : null;
        this.max = (0, _helpersDatasetJs.g)(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) this._zero = true;
        if (this._zero && this.min !== this._suggestedMin && !(0, _helpersDatasetJs.g)(this._userMin)) this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (min === max) {
            if (min <= 0) {
                setMin(1);
                setMax(10);
            } else {
                setMin(changeExponent(min, -1));
                setMax(changeExponent(max, 1));
            }
        }
        if (min <= 0) setMin(changeExponent(max, -1));
        if (max <= 0) setMax(changeExponent(min, 1));
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const opts = this.options;
        const generationOptions = {
            min: this._userMin,
            max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === 'ticks') (0, _helpersDatasetJs.aH)(ticks, this, 'value');
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    getLabelForValue(value) {
        return value === undefined ? '0' : (0, _helpersDatasetJs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
        const start = this.min;
        super.configure();
        this._startValue = (0, _helpersDatasetJs.aN)(start);
        this._valueRange = (0, _helpersDatasetJs.aN)(this.max) - (0, _helpersDatasetJs.aN)(start);
    }
    getPixelForValue(value) {
        if (value === undefined || value === 0) value = this.min;
        if (value === null || isNaN(value)) return NaN;
        return this.getPixelForDecimal(value === this.min ? 0 : ((0, _helpersDatasetJs.aN)(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
}
function getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
        const padding = (0, _helpersDatasetJs.E)(tickOpts.backdropPadding);
        return (0, _helpersDatasetJs.v)(tickOpts.font && tickOpts.font.size, (0, _helpersDatasetJs.d).font.size) + padding.height;
    }
    return 0;
}
function measureLabelSize(ctx, font, label) {
    label = (0, _helpersDatasetJs.b)(label) ? label : [
        label
    ];
    return {
        w: (0, _helpersDatasetJs.aO)(ctx, font.string, label),
        h: label.length * font.lineHeight
    };
}
function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) return {
        start: pos - size / 2,
        end: pos + size / 2
    };
    else if (angle < min || angle > max) return {
        start: pos - size,
        end: pos
    };
    return {
        start: pos,
        end: pos + size
    };
}
function fitWithPointLabels(scale) {
    const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
    };
    const limits = Object.assign({}, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale._pointLabels.length;
    const pointLabelOpts = scale.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? (0, _helpersDatasetJs.P) / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = (0, _helpersDatasetJs.a0)(opts.font);
        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = (0, _helpersDatasetJs.az)(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round((0, _helpersDatasetJs.U)(angleRadians));
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x = 0;
    let y = 0;
    if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
    } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
    }
    if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
    } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
    }
}
function createPointLabelItem(scale, index, itemOpts) {
    const outerDistance = scale.drawingArea;
    const { extra, additionalAngle, padding, size } = itemOpts;
    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);
    const angle = Math.round((0, _helpersDatasetJs.U)((0, _helpersDatasetJs.az)(pointLabelPosition.angle + (0, _helpersDatasetJs.H))));
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    return {
        visible: true,
        x: pointLabelPosition.x,
        y,
        textAlign,
        left,
        top: y,
        right: left + size.w,
        bottom: y + size.h
    };
}
function isNotOverlapped(item, area) {
    if (!area) return true;
    const { left, top, right, bottom } = item;
    const apexesInArea = (0, _helpersDatasetJs.C)({
        x: left,
        y: top
    }, area) || (0, _helpersDatasetJs.C)({
        x: left,
        y: bottom
    }, area) || (0, _helpersDatasetJs.C)({
        x: right,
        y: top
    }, area) || (0, _helpersDatasetJs.C)({
        x: right,
        y: bottom
    }, area);
    return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
    const items = [];
    const valueCount = scale._pointLabels.length;
    const opts = scale.options;
    const { centerPointLabels, display } = opts.pointLabels;
    const itemOpts = {
        extra: getTickBackdropHeight(opts) / 2,
        additionalAngle: centerPointLabels ? (0, _helpersDatasetJs.P) / valueCount : 0
    };
    let area;
    for(let i = 0; i < valueCount; i++){
        itemOpts.padding = padding[i];
        itemOpts.size = labelSizes[i];
        const item = createPointLabelItem(scale, i, itemOpts);
        items.push(item);
        if (display === 'auto') {
            item.visible = isNotOverlapped(item, area);
            if (item.visible) area = item;
        }
    }
    return items;
}
function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) return 'center';
    else if (angle < 180) return 'left';
    return 'right';
}
function leftForTextAlign(x, w, align) {
    if (align === 'right') x -= w;
    else if (align === 'center') x -= w / 2;
    return x;
}
function yForAngle(y, h, angle) {
    if (angle === 90 || angle === 270) y -= h / 2;
    else if (angle > 270 || angle < 90) y -= h;
    return y;
}
function drawPointLabelBox(ctx, opts, item) {
    const { left, top, right, bottom } = item;
    const { backdropColor } = opts;
    if (!(0, _helpersDatasetJs.k)(backdropColor)) {
        const borderRadius = (0, _helpersDatasetJs.ax)(opts.borderRadius);
        const padding = (0, _helpersDatasetJs.E)(opts.backdropPadding);
        ctx.fillStyle = backdropColor;
        const backdropLeft = left - padding.left;
        const backdropTop = top - padding.top;
        const backdropWidth = right - left + padding.width;
        const backdropHeight = bottom - top + padding.height;
        if (Object.values(borderRadius).some((v)=>v !== 0)) {
            ctx.beginPath();
            (0, _helpersDatasetJs.av)(ctx, {
                x: backdropLeft,
                y: backdropTop,
                w: backdropWidth,
                h: backdropHeight,
                radius: borderRadius
            });
            ctx.fill();
        } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
}
function drawPointLabels(scale, labelCount) {
    const { ctx, options: { pointLabels } } = scale;
    for(let i = labelCount - 1; i >= 0; i--){
        const item = scale._pointLabelItems[i];
        if (!item.visible) continue;
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        drawPointLabelBox(ctx, optsAtIndex, item);
        const plFont = (0, _helpersDatasetJs.a0)(optsAtIndex.font);
        const { x, y, textAlign } = item;
        (0, _helpersDatasetJs.Z)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: 'middle'
        });
    }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
    const { ctx } = scale;
    if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, (0, _helpersDatasetJs.T));
    else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for(let i = 1; i < labelCount; i++){
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
    }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
    const ctx = scale.ctx;
    const circular = gridLineOpts.circular;
    const { color, lineWidth } = gridLineOpts;
    if (!circular && !labelCount || !color || !lineWidth || radius < 0) return;
    ctx.save();
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.setLineDash(borderOpts.dash || []);
    ctx.lineDashOffset = borderOpts.dashOffset;
    ctx.beginPath();
    pathRadiusLine(scale, radius, circular, labelCount);
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
}
function createPointLabelContext(parent, index, label) {
    return (0, _helpersDatasetJs.j)(parent, {
        label,
        index,
        type: 'pointLabel'
    });
}
class RadialLinearScale extends LinearScaleBase {
    static id = 'radialLinear';
    static defaults = {
        display: true,
        animate: true,
        position: 'chartArea',
        angleLines: {
            display: true,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0
        },
        grid: {
            circular: false
        },
        startAngle: 0,
        ticks: {
            showLabelBackdrop: true,
            callback: (0, _helpersDatasetJs.aM).formatters.numeric
        },
        pointLabels: {
            backdropColor: undefined,
            backdropPadding: 2,
            display: true,
            font: {
                size: 10
            },
            callback (label) {
                return label;
            },
            padding: 5,
            centerPointLabels: false
        }
    };
    static defaultRoutes = {
        'angleLines.color': 'borderColor',
        'pointLabels.color': 'color',
        'ticks.color': 'color'
    };
    static descriptors = {
        angleLines: {
            _fallback: 'grid'
        }
    };
    constructor(cfg){
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
    }
    setDimensions() {
        const padding = this._padding = (0, _helpersDatasetJs.E)(getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(false);
        this.min = (0, _helpersDatasetJs.g)(min) && !isNaN(min) ? min : 0;
        this.max = (0, _helpersDatasetJs.g)(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index)=>{
            const label = (0, _helpersDatasetJs.Q)(this.options.pointLabels.callback, [
                value,
                index
            ], this);
            return label || label === 0 ? label : '';
        }).filter((v, i)=>this.chart.getDataVisibility(i));
    }
    fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) fitWithPointLabels(this);
        else this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index) {
        const angleMultiplier = (0, _helpersDatasetJs.T) / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return (0, _helpersDatasetJs.az)(index * angleMultiplier + (0, _helpersDatasetJs.t)(startAngle));
    }
    getDistanceFromCenterForValue(value) {
        if ((0, _helpersDatasetJs.k)(value)) return NaN;
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) return (this.max - value) * scalingFactor;
        return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
        if ((0, _helpersDatasetJs.k)(distance)) return NaN;
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index) {
        const pointLabels = this._pointLabels || [];
        if (index >= 0 && index < pointLabels.length) {
            const pointLabel = pointLabels[index];
            return createPointLabelContext(this.getContext(), index, pointLabel);
        }
    }
    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index) - (0, _helpersDatasetJs.H) + additionalAngle;
        return {
            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
            angle
        };
    }
    getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
    getPointLabelPosition(index) {
        const { left, top, right, bottom } = this._pointLabelItems[index];
        return {
            left,
            top,
            right,
            bottom
        };
    }
    drawBackground() {
        const { backgroundColor, grid: { circular } } = this.options;
        if (backgroundColor) {
            const ctx = this.ctx;
            ctx.save();
            ctx.beginPath();
            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
            ctx.closePath();
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
    }
    drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines, grid, border } = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) drawPointLabels(this, labelCount);
        if (grid.display) this.ticks.forEach((tick, index)=>{
            if (index !== 0 || index === 0 && this.min < 0) {
                offset = this.getDistanceFromCenterForValue(tick.value);
                const context = this.getContext(index);
                const optsAtIndex = grid.setContext(context);
                const optsAtIndexBorder = border.setContext(context);
                drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
            }
        });
        if (angleLines.display) {
            ctx.save();
            for(i = labelCount - 1; i >= 0; i--){
                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                const { color, lineWidth } = optsAtIndex;
                if (!lineWidth || !color) continue;
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = color;
                ctx.setLineDash(optsAtIndex.borderDash);
                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);
                position = this.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(this.xCenter, this.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
            }
            ctx.restore();
        }
    }
    drawBorder() {}
    drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) return;
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        this.ticks.forEach((tick, index)=>{
            if (index === 0 && this.min >= 0 && !opts.reverse) return;
            const optsAtIndex = tickOpts.setContext(this.getContext(index));
            const tickFont = (0, _helpersDatasetJs.a0)(optsAtIndex.font);
            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
            if (optsAtIndex.showLabelBackdrop) {
                ctx.font = tickFont.string;
                width = ctx.measureText(tick.label).width;
                ctx.fillStyle = optsAtIndex.backdropColor;
                const padding = (0, _helpersDatasetJs.E)(optsAtIndex.backdropPadding);
                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
            }
            (0, _helpersDatasetJs.Z)(ctx, tick.label, 0, -offset, tickFont, {
                color: optsAtIndex.color,
                strokeColor: optsAtIndex.textStrokeColor,
                strokeWidth: optsAtIndex.textStrokeWidth
            });
        });
        ctx.restore();
    }
    drawTitle() {}
}
const INTERVALS = {
    millisecond: {
        common: true,
        size: 1,
        steps: 1000
    },
    second: {
        common: true,
        size: 1000,
        steps: 60
    },
    minute: {
        common: true,
        size: 60000,
        steps: 60
    },
    hour: {
        common: true,
        size: 3600000,
        steps: 24
    },
    day: {
        common: true,
        size: 86400000,
        steps: 30
    },
    week: {
        common: false,
        size: 604800000,
        steps: 4
    },
    month: {
        common: true,
        size: 2.628e9,
        steps: 12
    },
    quarter: {
        common: false,
        size: 7.884e9,
        steps: 4
    },
    year: {
        common: true,
        size: 3.154e10
    }
};
const UNITS = /* #__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b) {
    return a - b;
}
function parse(scale, input) {
    if ((0, _helpersDatasetJs.k)(input)) return null;
    const adapter = scale._adapter;
    const { parser, round, isoWeekday } = scale._parseOpts;
    let value = input;
    if (typeof parser === 'function') value = parser(value);
    if (!(0, _helpersDatasetJs.g)(value)) value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);
    if (value === null) return null;
    if (round) value = round === 'week' && ((0, _helpersDatasetJs.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
    return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = UNITS.length;
    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return UNITS[i];
    }
    return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;
    }
    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
        if (INTERVALS[UNITS[i]].common) return UNITS[i];
    }
}
function addTick(ticks, time, timestamps) {
    if (!timestamps) ticks[time] = true;
    else if (timestamps.length) {
        const { lo, hi } = (0, _helpersDatasetJs.aQ)(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
    }
}
function setMajorTicks(scale, ticks, map, majorUnit) {
    const adapter = scale._adapter;
    const first = +adapter.startOf(ticks[0].value, majorUnit);
    const last = ticks[ticks.length - 1].value;
    let major, index;
    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
        index = map[major];
        if (index >= 0) ticks[index].major = true;
    }
    return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
    const ticks = [];
    const map = {};
    const ilen = values.length;
    let i, value;
    for(i = 0; i < ilen; ++i){
        value = values[i];
        map[value] = i;
        ticks.push({
            value,
            major: false
        });
    }
    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
    static id = 'time';
    static defaults = {
        bounds: 'data',
        adapters: {},
        time: {
            parser: false,
            unit: false,
            round: false,
            isoWeekday: false,
            minUnit: 'millisecond',
            displayFormats: {}
        },
        ticks: {
            source: 'auto',
            callback: false,
            major: {
                enabled: false
            }
        }
    };
    constructor(props){
        super(props);
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
        this._unit = 'day';
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
    }
    init(scaleOpts, opts = {}) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        adapter.init(opts);
        (0, _helpersDatasetJs.ab)(time.displayFormats, adapter.formats());
        this._parseOpts = {
            parser: time.parser,
            round: time.round,
            isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
    }
    parse(raw, index) {
        if (raw === undefined) return null;
        return parse(this, raw);
    }
    beforeLayout() {
        super.beforeLayout();
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
    }
    determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || 'day';
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        function _applyBounds(bounds) {
            if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);
            if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);
        }
        if (!minDefined || !maxDefined) {
            _applyBounds(this._getLabelBounds());
            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') _applyBounds(this.getMinMax(false));
        }
        min = (0, _helpersDatasetJs.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = (0, _helpersDatasetJs.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
    }
    _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
            min = arr[0];
            max = arr[arr.length - 1];
        }
        return {
            min,
            max
        };
    }
    buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === 'ticks' && timestamps.length) {
            this.min = this._userMin || timestamps[0];
            this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = (0, _helpersDatasetJs.aP)(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) ticks.reverse();
        return ticksFromTimestamps(this, ticks, this._majorUnit);
    }
    afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map((tick)=>+tick.value));
    }
    initOffsets(timestamps = []) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
            first = this.getDecimalForValue(timestamps[0]);
            if (timestamps.length === 1) start = 1 - first;
            else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
            if (timestamps.length === 1) end = last;
            else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = (0, _helpersDatasetJs.S)(start, 0, limit);
        end = (0, _helpersDatasetJs.S)(end, 0, limit);
        this._offsets = {
            start,
            end,
            factor: 1 / (start + 1 + end)
        };
    }
    _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = (0, _helpersDatasetJs.v)(options.ticks.stepSize, 1);
        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
        const hasWeekday = (0, _helpersDatasetJs.x)(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) first = +adapter.startOf(first, 'isoWeek', weekday);
        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)addTick(ticks, time, timestamps);
        if (time === max || options.bounds === 'ticks' || count === 1) addTick(ticks, time, timestamps);
        return Object.keys(ticks).sort(sorter).map((x)=>+x);
    }
    getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);
        return adapter.format(value, timeOpts.displayFormats.datetime);
    }
    format(value, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const fmt = format || formats[unit];
        return this._adapter.format(value, fmt);
    }
    _tickFormatFunction(time, index, ticks, format) {
        const options = this.options;
        const formatter = options.ticks.callback;
        if (formatter) return (0, _helpersDatasetJs.Q)(formatter, [
            time,
            index,
            ticks
        ], this);
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
    }
    generateTickLabels(ticks) {
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
    }
    getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
    getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
    }
    _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = (0, _helpersDatasetJs.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
    }
    _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
            exampleTime
        ], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
    }
    getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);
        for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        return this._cache.data = this.normalize(timestamps);
    }
    getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const labels = this.getLabels();
        for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push(parse(this, labels[i]));
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
    normalize(values) {
        return (0, _helpersDatasetJs._)(values.sort(sorter));
    }
}
function interpolate(table, val, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) ({ lo, hi } = (0, _helpersDatasetJs.B)(table, 'pos', val));
        ({ pos: prevSource, time: prevTarget } = table[lo]);
        ({ pos: nextSource, time: nextTarget } = table[hi]);
    } else {
        if (val >= table[lo].time && val <= table[hi].time) ({ lo, hi } = (0, _helpersDatasetJs.B)(table, 'time', val));
        ({ time: prevSource, pos: prevTarget } = table[lo]);
        ({ time: nextSource, pos: nextTarget } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
    static id = 'timeseries';
    static defaults = TimeScale.defaults;
    constructor(props){
        super(props);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
    }
    initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate(table, this.min);
        this._tableRange = interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
    }
    buildLookupTable(timestamps) {
        const { min, max } = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
            curr = timestamps[i];
            if (curr >= min && curr <= max) items.push(curr);
        }
        if (items.length < 2) return [
            {
                time: min,
                pos: 0
            },
            {
                time: max,
                pos: 1
            }
        ];
        for(i = 0, ilen = items.length; i < ilen; ++i){
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
            if (Math.round((next + prev) / 2) !== curr) table.push({
                time: curr,
                pos: i / (ilen - 1)
            });
        }
        return table;
    }
    _generate() {
        const min = this.min;
        const max = this.max;
        let timestamps = super.getDataTimestamps();
        if (!timestamps.includes(min) || !timestamps.length) timestamps.splice(0, 0, min);
        if (!timestamps.includes(max) || timestamps.length === 1) timestamps.push(max);
        return timestamps.sort((a, b)=>a - b);
    }
    _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) return timestamps;
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) timestamps = this.normalize(data.concat(label));
        else timestamps = data.length ? data : label;
        timestamps = this._cache.all = timestamps;
        return timestamps;
    }
    getDecimalForValue(value) {
        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
    }
}
var scales = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    CategoryScale: CategoryScale,
    LinearScale: LinearScale,
    LogarithmicScale: LogarithmicScale,
    RadialLinearScale: RadialLinearScale,
    TimeScale: TimeScale,
    TimeSeriesScale: TimeSeriesScale
});
const registerables = [
    controllers,
    elements,
    plugins,
    scales
];

},{"./chunks/helpers.dataset.js":"jIBWS","@kurkle/color":"7Vk5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jIBWS":[function(require,module,exports,__globalThis) {
/*!
 * Chart.js v4.4.9
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>unclipArea);
parcelHelpers.export(exports, "A", ()=>_rlookupByKey);
parcelHelpers.export(exports, "B", ()=>_lookupByKey);
parcelHelpers.export(exports, "C", ()=>_isPointInArea);
parcelHelpers.export(exports, "D", ()=>getAngleFromPoint);
parcelHelpers.export(exports, "E", ()=>toPadding);
parcelHelpers.export(exports, "F", ()=>each);
parcelHelpers.export(exports, "G", ()=>getMaximumSize);
parcelHelpers.export(exports, "H", ()=>HALF_PI);
parcelHelpers.export(exports, "I", ()=>_getParentNode);
parcelHelpers.export(exports, "J", ()=>readUsedSize);
parcelHelpers.export(exports, "K", ()=>supportsEventListenerOptions);
parcelHelpers.export(exports, "L", ()=>throttled);
parcelHelpers.export(exports, "M", ()=>_isDomSupported);
parcelHelpers.export(exports, "N", ()=>_factorize);
parcelHelpers.export(exports, "O", ()=>finiteOrDefault);
parcelHelpers.export(exports, "P", ()=>PI);
parcelHelpers.export(exports, "Q", ()=>callback);
parcelHelpers.export(exports, "R", ()=>_addGrace);
parcelHelpers.export(exports, "S", ()=>_limitValue);
parcelHelpers.export(exports, "T", ()=>TAU);
parcelHelpers.export(exports, "U", ()=>toDegrees);
parcelHelpers.export(exports, "V", ()=>_measureText);
parcelHelpers.export(exports, "W", ()=>_int16Range);
parcelHelpers.export(exports, "X", ()=>_alignPixel);
parcelHelpers.export(exports, "Y", ()=>clipArea);
parcelHelpers.export(exports, "Z", ()=>renderText);
parcelHelpers.export(exports, "_", ()=>_arrayUnique);
parcelHelpers.export(exports, "a", ()=>resolve);
parcelHelpers.export(exports, "a$", ()=>getStyle);
parcelHelpers.export(exports, "a0", ()=>toFont);
parcelHelpers.export(exports, "a1", ()=>_toLeftRightCenter);
parcelHelpers.export(exports, "a2", ()=>_alignStartEnd);
parcelHelpers.export(exports, "a3", ()=>overrides);
parcelHelpers.export(exports, "a4", ()=>merge);
parcelHelpers.export(exports, "a5", ()=>_capitalize);
parcelHelpers.export(exports, "a6", ()=>descriptors);
parcelHelpers.export(exports, "a7", ()=>isFunction);
parcelHelpers.export(exports, "a8", ()=>_attachContext);
parcelHelpers.export(exports, "a9", ()=>_createResolver);
parcelHelpers.export(exports, "aA", ()=>getRtlAdapter);
parcelHelpers.export(exports, "aB", ()=>overrideTextDirection);
parcelHelpers.export(exports, "aC", ()=>_textX);
parcelHelpers.export(exports, "aD", ()=>restoreTextDirection);
parcelHelpers.export(exports, "aE", ()=>drawPointLegend);
parcelHelpers.export(exports, "aF", ()=>distanceBetweenPoints);
parcelHelpers.export(exports, "aG", ()=>noop);
parcelHelpers.export(exports, "aH", ()=>_setMinAndMaxByKey);
parcelHelpers.export(exports, "aI", ()=>niceNum);
parcelHelpers.export(exports, "aJ", ()=>almostWhole);
parcelHelpers.export(exports, "aK", ()=>almostEquals);
parcelHelpers.export(exports, "aL", ()=>_decimalPlaces);
parcelHelpers.export(exports, "aM", ()=>Ticks);
parcelHelpers.export(exports, "aN", ()=>log10);
parcelHelpers.export(exports, "aO", ()=>_longestText);
parcelHelpers.export(exports, "aP", ()=>_filterBetween);
parcelHelpers.export(exports, "aQ", ()=>_lookup);
parcelHelpers.export(exports, "aR", ()=>isPatternOrGradient);
parcelHelpers.export(exports, "aS", ()=>getHoverColor);
parcelHelpers.export(exports, "aT", ()=>clone);
parcelHelpers.export(exports, "aU", ()=>_merger);
parcelHelpers.export(exports, "aV", ()=>_mergerIf);
parcelHelpers.export(exports, "aW", ()=>_deprecated);
parcelHelpers.export(exports, "aX", ()=>_splitKey);
parcelHelpers.export(exports, "aY", ()=>toFontString);
parcelHelpers.export(exports, "aZ", ()=>splineCurve);
parcelHelpers.export(exports, "a_", ()=>splineCurveMonotone);
parcelHelpers.export(exports, "aa", ()=>_descriptors);
parcelHelpers.export(exports, "ab", ()=>mergeIf);
parcelHelpers.export(exports, "ac", ()=>uid);
parcelHelpers.export(exports, "ad", ()=>debounce);
parcelHelpers.export(exports, "ae", ()=>retinaScale);
parcelHelpers.export(exports, "af", ()=>clearCanvas);
parcelHelpers.export(exports, "ag", ()=>setsEqual);
parcelHelpers.export(exports, "ah", ()=>getDatasetClipArea);
parcelHelpers.export(exports, "ai", ()=>_elementsEqual);
parcelHelpers.export(exports, "aj", ()=>_isClickEvent);
parcelHelpers.export(exports, "ak", ()=>_isBetween);
parcelHelpers.export(exports, "al", ()=>_readValueToProps);
parcelHelpers.export(exports, "am", ()=>_updateBezierControlPoints);
parcelHelpers.export(exports, "an", ()=>_computeSegments);
parcelHelpers.export(exports, "ao", ()=>_boundSegments);
parcelHelpers.export(exports, "ap", ()=>_steppedInterpolation);
parcelHelpers.export(exports, "aq", ()=>_bezierInterpolation);
parcelHelpers.export(exports, "ar", ()=>_pointInLine);
parcelHelpers.export(exports, "as", ()=>_steppedLineTo);
parcelHelpers.export(exports, "at", ()=>_bezierCurveTo);
parcelHelpers.export(exports, "au", ()=>drawPoint);
parcelHelpers.export(exports, "av", ()=>addRoundedRectPath);
parcelHelpers.export(exports, "aw", ()=>toTRBL);
parcelHelpers.export(exports, "ax", ()=>toTRBLCorners);
parcelHelpers.export(exports, "ay", ()=>_boundSegment);
parcelHelpers.export(exports, "az", ()=>_normalizeAngle);
parcelHelpers.export(exports, "b", ()=>isArray);
parcelHelpers.export(exports, "b0", ()=>fontString);
parcelHelpers.export(exports, "b1", ()=>toLineHeight);
parcelHelpers.export(exports, "b2", ()=>PITAU);
parcelHelpers.export(exports, "b3", ()=>INFINITY);
parcelHelpers.export(exports, "b4", ()=>RAD_PER_DEG);
parcelHelpers.export(exports, "b5", ()=>QUARTER_PI);
parcelHelpers.export(exports, "b6", ()=>TWO_THIRDS_PI);
parcelHelpers.export(exports, "b7", ()=>_angleDiff);
parcelHelpers.export(exports, "c", ()=>color);
parcelHelpers.export(exports, "d", ()=>defaults);
parcelHelpers.export(exports, "e", ()=>effects);
parcelHelpers.export(exports, "f", ()=>resolveObjectKey);
parcelHelpers.export(exports, "g", ()=>isNumberFinite);
parcelHelpers.export(exports, "h", ()=>defined);
parcelHelpers.export(exports, "i", ()=>isObject);
parcelHelpers.export(exports, "j", ()=>createContext);
parcelHelpers.export(exports, "k", ()=>isNullOrUndef);
parcelHelpers.export(exports, "l", ()=>listenArrayEvents);
parcelHelpers.export(exports, "m", ()=>toPercentage);
parcelHelpers.export(exports, "n", ()=>toDimension);
parcelHelpers.export(exports, "o", ()=>formatNumber);
parcelHelpers.export(exports, "p", ()=>_angleBetween);
parcelHelpers.export(exports, "q", ()=>_getStartAndCountOfVisiblePoints);
parcelHelpers.export(exports, "r", ()=>requestAnimFrame);
parcelHelpers.export(exports, "s", ()=>sign);
parcelHelpers.export(exports, "t", ()=>toRadians);
parcelHelpers.export(exports, "u", ()=>unlistenArrayEvents);
parcelHelpers.export(exports, "v", ()=>valueOrDefault);
parcelHelpers.export(exports, "w", ()=>_scaleRangesChanged);
parcelHelpers.export(exports, "x", ()=>isNumber);
parcelHelpers.export(exports, "y", ()=>_parseObjectDataRadialScale);
parcelHelpers.export(exports, "z", ()=>getRelativePosition);
var _color = require("@kurkle/color");
/**
 * @namespace Chart.helpers
 */ /**
 * An empty function that can be used, for example, for optional callback.
 */ function noop() {
/* noop */ }
/**
 * Returns a unique id, sequentially generated from a global variable.
 */ const uid = (()=>{
    let id = 0;
    return ()=>id++;
})();
/**
 * Returns true if `value` is neither null nor undefined, else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isNullOrUndef(value) {
    return value === null || value === undefined;
}
/**
 * Returns true if `value` is an array (including typed arrays), else returns false.
 * @param value - The value to test.
 * @function
 */ function isArray(value) {
    if (Array.isArray && Array.isArray(value)) return true;
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') return true;
    return false;
}
/**
 * Returns true if `value` is an object (excluding null), else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isObject(value) {
    return value !== null && Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * Returns true if `value` is a finite number, else returns false
 * @param value  - The value to test.
 */ function isNumberFinite(value) {
    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
}
/**
 * Returns `value` if finite, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is not finite.
 */ function finiteOrDefault(value, defaultValue) {
    return isNumberFinite(value) ? value : defaultValue;
}
/**
 * Returns `value` if defined, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is undefined.
 */ function valueOrDefault(value, defaultValue) {
    return typeof value === 'undefined' ? defaultValue : value;
}
const toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;
/**
 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
 * @param fn - The function to call.
 * @param args - The arguments with which `fn` should be called.
 * @param [thisArg] - The value of `this` provided for the call to `fn`.
 */ function callback(fn, args, thisArg) {
    if (fn && typeof fn.call === 'function') return fn.apply(thisArg, args);
}
function each(loopable, fn, thisArg, reverse) {
    let i, len, keys;
    if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);
        else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);
    } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
}
/**
 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
 * @param a0 - The array to compare
 * @param a1 - The array to compare
 * @private
 */ function _elementsEqual(a0, a1) {
    let i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) return false;
    for(i = 0, ilen = a0.length; i < ilen; ++i){
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;
    }
    return true;
}
/**
 * Returns a deep copy of `source` without keeping references on objects and arrays.
 * @param source - The value to clone.
 */ function clone(source) {
    if (isArray(source)) return source.map(clone);
    if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for(; k < klen; ++k)target[keys[k]] = clone(source[keys[k]]);
        return target;
    }
    return source;
}
function isValidKey(key) {
    return [
        '__proto__',
        'prototype',
        'constructor'
    ].indexOf(key) === -1;
}
/**
 * The default merger when Chart.helpers.merge is called without merger option.
 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
 * @private
 */ function _merger(key, target, source, options) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) // eslint-disable-next-line @typescript-eslint/no-use-before-define
    merge(tval, sval, options);
    else target[key] = clone(sval);
}
function merge(target, source, options) {
    const sources = isArray(source) ? source : [
        source
    ];
    const ilen = sources.length;
    if (!isObject(target)) return target;
    options = options || {};
    const merger = options.merger || _merger;
    let current;
    for(let i = 0; i < ilen; ++i){
        current = sources[i];
        if (!isObject(current)) continue;
        const keys = Object.keys(current);
        for(let k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, current, options);
    }
    return target;
}
function mergeIf(target, source) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return merge(target, source, {
        merger: _mergerIf
    });
}
/**
 * Merges source[key] in target[key] only if target[key] is undefined.
 * @private
 */ function _mergerIf(key, target, source) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) mergeIf(tval, sval);
    else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = clone(sval);
}
/**
 * @private
 */ function _deprecated(scope, value, previous, current) {
    if (value !== undefined) console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
}
// resolveObjectKey resolver cache
const keyResolvers = {
    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
    '': (v)=>v,
    // default resolvers
    x: (o)=>o.x,
    y: (o)=>o.y
};
/**
 * @private
 */ function _splitKey(key) {
    const parts = key.split('.');
    const keys = [];
    let tmp = '';
    for (const part of parts){
        tmp += part;
        if (tmp.endsWith('\\')) tmp = tmp.slice(0, -1) + '.';
        else {
            keys.push(tmp);
            tmp = '';
        }
    }
    return keys;
}
function _getKeyResolver(key) {
    const keys = _splitKey(key);
    return (obj)=>{
        for (const k of keys){
            if (k === '') break;
            obj = obj && obj[k];
        }
        return obj;
    };
}
function resolveObjectKey(obj, key) {
    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
    return resolver(obj);
}
/**
 * @private
 */ function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value)=>typeof value !== 'undefined';
const isFunction = (value)=>typeof value === 'function';
// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
const setsEqual = (a, b)=>{
    if (a.size !== b.size) return false;
    for (const item of a){
        if (!b.has(item)) return false;
    }
    return true;
};
/**
 * @param e - The event
 * @private
 */ function _isClickEvent(e) {
    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
}
/**
 * @alias Chart.helpers.math
 * @namespace
 */ const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
}
/**
 * Implementation of the nice number algorithm used in determining where axis labels will go
 */ function niceNum(range) {
    const roundedRange = Math.round(range);
    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor(log10(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
}
/**
 * Returns an array of factors sorted from 1 to sqrt(value)
 * @private
 */ function _factorize(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i;
    for(i = 1; i < sqrt; i++)if (value % i === 0) {
        result.push(i);
        result.push(value / i);
    }
    if (sqrt === (sqrt | 0)) result.push(sqrt);
    result.sort((a, b)=>a - b).pop();
    return result;
}
/**
 * Verifies that attempting to coerce n to string or number won't throw a TypeError.
 */ function isNonPrimitive(n) {
    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);
}
function isNumber(n) {
    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x, epsilon) {
    const rounded = Math.round(x);
    return rounded - epsilon <= x && rounded + epsilon >= x;
}
/**
 * @private
 */ function _setMinAndMaxByKey(array, target, property) {
    let i, ilen, value;
    for(i = 0, ilen = array.length; i < ilen; i++){
        value = array[i][property];
        if (!isNaN(value)) {
            target.min = Math.min(target.min, value);
            target.max = Math.max(target.max, value);
        }
    }
}
function toRadians(degrees) {
    return degrees * (PI / 180);
}
function toDegrees(radians) {
    return radians * (180 / PI);
}
/**
 * Returns the number of decimal places
 * i.e. the number of digits after the decimal point, of the value of this Number.
 * @param x - A number.
 * @returns The number of decimal places.
 * @private
 */ function _decimalPlaces(x) {
    if (!isNumberFinite(x)) return;
    let e = 1;
    let p = 0;
    while(Math.round(x * e) / e !== x){
        e *= 10;
        p++;
    }
    return p;
}
// Gets the angle from vertical upright to the point about a centre.
function getAngleFromPoint(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * PI) angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    return {
        angle,
        distance: radialDistanceFromCenter
    };
}
function distanceBetweenPoints(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
/**
 * Shortest distance between angles, in either direction.
 * @private
 */ function _angleDiff(a, b) {
    return (a - b + PITAU) % TAU - PI;
}
/**
 * Normalize angle to be between 0 and 2*PI
 * @private
 */ function _normalizeAngle(a) {
    return (a % TAU + TAU) % TAU;
}
/**
 * @private
 */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
    const a = _normalizeAngle(angle);
    const s = _normalizeAngle(start);
    const e = _normalizeAngle(end);
    const angleToStart = _normalizeAngle(s - a);
    const angleToEnd = _normalizeAngle(e - a);
    const startToAngle = _normalizeAngle(a - s);
    const endToAngle = _normalizeAngle(a - e);
    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
/**
 * Limit `value` between `min` and `max`
 * @param value
 * @param min
 * @param max
 * @private
 */ function _limitValue(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
/**
 * @param {number} value
 * @private
 */ function _int16Range(value) {
    return _limitValue(value, -32768, 32767);
}
/**
 * @param value
 * @param start
 * @param end
 * @param [epsilon]
 * @private
 */ function _isBetween(value, start, end, epsilon = 1e-6) {
    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
    cmp = cmp || ((index)=>table[index] < value);
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while(hi - lo > 1){
        mid = lo + hi >> 1;
        if (cmp(mid)) lo = mid;
        else hi = mid;
    }
    return {
        lo,
        hi
    };
}
/**
 * Binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @param last - lookup last index
 * @private
 */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
        const ti = table[index][key];
        return ti < value || ti === value && table[index + 1][key] === value;
    } : (index)=>table[index][key] < value);
/**
 * Reverse binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @private
 */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
/**
 * Return subset of `values` between `min` and `max` inclusive.
 * Values are assumed to be in sorted order.
 * @param values - sorted array of values
 * @param min - min value
 * @param max - max value
 */ function _filterBetween(values, min, max) {
    let start = 0;
    let end = values.length;
    while(start < end && values[start] < min)start++;
    while(end > start && values[end - 1] > max)end--;
    return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
    'push',
    'pop',
    'shift',
    'splice',
    'unshift'
];
function listenArrayEvents(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, '_chartjs', {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [
                listener
            ]
        }
    });
    arrayEvents.forEach((key)=>{
        const method = '_onData' + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value (...args) {
                const res = base.apply(this, args);
                array._chartjs.listeners.forEach((object)=>{
                    if (typeof object[method] === 'function') object[method](...args);
                });
                return res;
            }
        });
    });
}
function unlistenArrayEvents(array, listener) {
    const stub = array._chartjs;
    if (!stub) return;
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) listeners.splice(index, 1);
    if (listeners.length > 0) return;
    arrayEvents.forEach((key)=>{
        delete array[key];
    });
    delete array._chartjs;
}
/**
 * @param items
 */ function _arrayUnique(items) {
    const set = new Set(items);
    if (set.size === items.length) return items;
    return Array.from(set);
}
function fontString(pixelSize, fontStyle, fontFamily) {
    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
}
/**
* Request animation polyfill
*/ const requestAnimFrame = function() {
    if (typeof window === 'undefined') return function(callback) {
        return callback();
    };
    return window.requestAnimationFrame;
}();
/**
 * Throttles calling `fn` once per animation frame
 * Latest arguments are used on the actual call
 */ function throttled(fn, thisArg) {
    let argsToUse = [];
    let ticking = false;
    return function(...args) {
        // Save the args for use later
        argsToUse = args;
        if (!ticking) {
            ticking = true;
            requestAnimFrame.call(window, ()=>{
                ticking = false;
                fn.apply(thisArg, argsToUse);
            });
        }
    };
}
/**
 * Debounces calling `fn` for `delay` ms
 */ function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        if (delay) {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay, args);
        } else fn.apply(this, args);
        return delay;
    };
}
/**
 * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
 * @private
 */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
/**
 * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
 * @private
 */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
/**
 * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
 * @private
 */ const _textX = (align, left, right, rtl)=>{
    const check = rtl ? 'left' : 'right';
    return align === check ? right : align === 'center' ? (left + right) / 2 : left;
};
/**
 * Return start and count of visible points.
 * @private
 */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start = 0;
    let count = pointCount;
    if (meta._sorted) {
        const { iScale, vScale, _parsed } = meta;
        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;
        const axis = iScale.axis;
        const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
        if (minDefined) {
            start = Math.min(_lookupByKey(_parsed, axis, min).lo, animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);
            if (spanGaps) {
                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));
                start -= Math.max(0, distanceToDefinedLo);
            }
            start = _limitValue(start, 0, pointCount - 1);
        }
        if (maxDefined) {
            let end = Math.max(_lookupByKey(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);
            if (spanGaps) {
                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));
                end += Math.max(0, distanceToDefinedHi);
            }
            count = _limitValue(end, start, pointCount) - start;
        } else count = pointCount - start;
    }
    return {
        start,
        count
    };
}
/**
 * Checks if the scale ranges have changed.
 * @param {object} meta - dataset meta.
 * @returns {boolean}
 * @private
 */ function _scaleRangesChanged(meta) {
    const { xScale, yScale, _scaleRanges } = meta;
    const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
    };
    if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
}
const atEdge = (t)=>t === 0 || t === 1;
const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easing.effects
 * @see http://www.robertpenner.com/easing/
 */ const effects = {
    linear: (t)=>t,
    easeInQuad: (t)=>t * t,
    easeOutQuad: (t)=>-t * (t - 2),
    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
    easeInCubic: (t)=>t * t * t,
    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
    easeInQuart: (t)=>t * t * t * t,
    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
    easeInQuint: (t)=>t * t * t * t * t,
    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
    easeOutSine: (t)=>Math.sin(t * HALF_PI),
    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
    easeInOutElastic (t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
    },
    easeInBack (t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    easeOutBack (t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
    },
    easeInOutBack (t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
    easeOutBounce (t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < 1 / d) return m * t * t;
        if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;
        if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;
        return m * (t -= 2.625 / d) * t + 0.984375;
    },
    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
    if (value && typeof value === 'object') {
        const type = value.toString();
        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
    }
    return false;
}
function color(value) {
    return isPatternOrGradient(value) ? value : new (0, _color.Color)(value);
}
function getHoverColor(value) {
    return isPatternOrGradient(value) ? value : new (0, _color.Color)(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
    'x',
    'y',
    'borderWidth',
    'radius',
    'tension'
];
const colors = [
    'color',
    'borderColor',
    'backgroundColor'
];
function applyAnimationsDefaults(defaults) {
    defaults.set('animation', {
        delay: undefined,
        duration: 1000,
        easing: 'easeOutQuart',
        fn: undefined,
        from: undefined,
        loop: undefined,
        to: undefined,
        type: undefined
    });
    defaults.describe('animation', {
        _fallback: false,
        _indexable: false,
        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
    });
    defaults.set('animations', {
        colors: {
            type: 'color',
            properties: colors
        },
        numbers: {
            type: 'number',
            properties: numbers
        }
    });
    defaults.describe('animations', {
        _fallback: 'animation'
    });
    defaults.set('transitions', {
        active: {
            animation: {
                duration: 400
            }
        },
        resize: {
            animation: {
                duration: 0
            }
        },
        show: {
            animations: {
                colors: {
                    from: 'transparent'
                },
                visible: {
                    type: 'boolean',
                    duration: 0
                }
            }
        },
        hide: {
            animations: {
                colors: {
                    to: 'transparent'
                },
                visible: {
                    type: 'boolean',
                    easing: 'linear',
                    fn: (v)=>v | 0
                }
            }
        }
    });
}
function applyLayoutsDefaults(defaults) {
    defaults.set('layout', {
        autoPadding: true,
        padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        }
    });
}
const intlCache = new Map();
function getNumberFormat(locale, options) {
    options = options || {};
    const cacheKey = locale + JSON.stringify(options);
    let formatter = intlCache.get(cacheKey);
    if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
    }
    return formatter;
}
function formatNumber(num, locale, options) {
    return getNumberFormat(locale, options).format(num);
}
const formatters = {
    values (value) {
        return isArray(value) ? value : '' + value;
    },
    numeric (tickValue, index, ticks) {
        if (tickValue === 0) return '0';
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
            if (maxTick < 1e-4 || maxTick > 1e+15) notation = 'scientific';
            delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {
            notation,
            minimumFractionDigits: numDecimal,
            maximumFractionDigits: numDecimal
        };
        Object.assign(options, this.options.ticks.format);
        return formatNumber(tickValue, locale, options);
    },
    logarithmic (tickValue, index, ticks) {
        if (tickValue === 0) return '0';
        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
        if ([
            1,
            2,
            3,
            5,
            10,
            15
        ].includes(remain) || index > 0.8 * ticks.length) return formatters.numeric.call(this, tickValue, index, ticks);
        return '';
    }
};
function calculateDelta(tickValue, ticks) {
    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);
    return delta;
}
var Ticks = {
    formatters
};
function applyScaleDefaults(defaults) {
    defaults.set('scale', {
        display: true,
        offset: false,
        reverse: false,
        beginAtZero: false,
        bounds: 'ticks',
        clip: true,
        grace: 0,
        grid: {
            display: true,
            lineWidth: 1,
            drawOnChartArea: true,
            drawTicks: true,
            tickLength: 8,
            tickWidth: (_ctx, options)=>options.lineWidth,
            tickColor: (_ctx, options)=>options.color,
            offset: false
        },
        border: {
            display: true,
            dash: [],
            dashOffset: 0.0,
            width: 1
        },
        title: {
            display: false,
            text: '',
            padding: {
                top: 4,
                bottom: 4
            }
        },
        ticks: {
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            textStrokeWidth: 0,
            textStrokeColor: '',
            padding: 3,
            display: true,
            autoSkip: true,
            autoSkipPadding: 3,
            labelOffset: 0,
            callback: Ticks.formatters.values,
            minor: {},
            major: {},
            align: 'center',
            crossAlign: 'near',
            showLabelBackdrop: false,
            backdropColor: 'rgba(255, 255, 255, 0.75)',
            backdropPadding: 2
        }
    });
    defaults.route('scale.ticks', 'color', '', 'color');
    defaults.route('scale.grid', 'color', '', 'borderColor');
    defaults.route('scale.border', 'color', '', 'borderColor');
    defaults.route('scale.title', 'color', '', 'color');
    defaults.describe('scale', {
        _fallback: false,
        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'
    });
    defaults.describe('scales', {
        _fallback: 'scale'
    });
    defaults.describe('scale.ticks', {
        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',
        _indexable: (name)=>name !== 'backdropPadding'
    });
}
const overrides = Object.create(null);
const descriptors = Object.create(null);
function getScope$1(node, key) {
    if (!key) return node;
    const keys = key.split('.');
    for(let i = 0, n = keys.length; i < n; ++i){
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
    }
    return node;
}
function set(root, scope, values) {
    if (typeof scope === 'string') return merge(getScope$1(root, scope), values);
    return merge(getScope$1(root, ''), scope);
}
class Defaults {
    constructor(_descriptors, _appliers){
        this.animation = undefined;
        this.backgroundColor = 'rgba(0,0,0,0.1)';
        this.borderColor = 'rgba(0,0,0,0.1)';
        this.color = '#666';
        this.datasets = {};
        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
            'mousemove',
            'mouseout',
            'click',
            'touchstart',
            'touchmove'
        ];
        this.font = {
            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            size: 12,
            style: 'normal',
            lineHeight: 1.2,
            weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
        this.indexAxis = 'x';
        this.interaction = {
            mode: 'nearest',
            intersect: true,
            includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors);
        this.apply(_appliers);
    }
    set(scope, values) {
        return set(this, scope, values);
    }
    get(scope) {
        return getScope$1(this, scope);
    }
    describe(scope, values) {
        return set(descriptors, scope, values);
    }
    override(scope, values) {
        return set(overrides, scope, values);
    }
    route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = '_' + name;
        Object.defineProperties(scopeObject, {
            [privateName]: {
                value: scopeObject[name],
                writable: true
            },
            [name]: {
                enumerable: true,
                get () {
                    const local = this[privateName];
                    const target = targetScopeObject[targetName];
                    if (isObject(local)) return Object.assign({}, target, local);
                    return valueOrDefault(local, target);
                },
                set (value) {
                    this[privateName] = value;
                }
            }
        });
    }
    apply(appliers) {
        appliers.forEach((apply)=>apply(this));
    }
}
var defaults = /* #__PURE__ */ new Defaults({
    _scriptable: (name)=>!name.startsWith('on'),
    _indexable: (name)=>name !== 'events',
    hover: {
        _fallback: 'interaction'
    },
    interaction: {
        _scriptable: false,
        _indexable: false
    }
}, [
    applyAnimationsDefaults,
    applyLayoutsDefaults,
    applyScaleDefaults
]);
/**
 * Converts the given font object into a CSS font string.
 * @param font - A font object.
 * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */ function toFontString(font) {
    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) return null;
    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
}
/**
 * @private
 */ function _measureText(ctx, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) longest = textWidth;
    return longest;
}
/**
 * @private
 */ // eslint-disable-next-line complexity
function _longestText(ctx, font, arrayOfThings, cache) {
    cache = cache || {};
    let data = cache.data = cache.data || {};
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.save();
    ctx.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i, j, jlen, thing, nestedThing;
    for(i = 0; i < ilen; i++){
        thing = arrayOfThings[i];
        // Undefined strings and arrays should not be measured
        if (thing !== undefined && thing !== null && !isArray(thing)) longest = _measureText(ctx, data, gc, longest, thing);
        else if (isArray(thing)) // if it is an array lets measure each element
        // to do maybe simplify this function a bit so we can do this more recursively?
        for(j = 0, jlen = thing.length; j < jlen; j++){
            nestedThing = thing[j];
            // Undefined strings and arrays should not be measured
            if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
    }
    ctx.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for(i = 0; i < gcLen; i++)delete data[gc[i]];
        gc.splice(0, gcLen);
    }
    return longest;
}
/**
 * Returns the aligned pixel value to avoid anti-aliasing blur
 * @param chart - The chart instance.
 * @param pixel - A pixel value.
 * @param width - The width of the element.
 * @returns The aligned pixel value.
 * @private
 */ function _alignPixel(chart, pixel, width) {
    const devicePixelRatio = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
/**
 * Clears the entire canvas.
 */ function clearCanvas(canvas, ctx) {
    if (!ctx && !canvas) return;
    ctx = ctx || canvas.getContext('2d');
    ctx.save();
    // canvas.width and canvas.height do not consider the canvas transform,
    // while clearRect does
    ctx.resetTransform();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function drawPoint(ctx, options, x, y) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    drawPointLegend(ctx, options, x, y, null);
}
// eslint-disable-next-line complexity
function drawPointLegend(ctx, options, x, y, w) {
    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * RAD_PER_DEG;
    if (style && typeof style === 'object') {
        type = style.toString();
        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rad);
            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
            ctx.restore();
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) return;
    ctx.beginPath();
    switch(style){
        // Default includes circle
        default:
            if (w) ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
            else ctx.arc(x, y, radius, 0, TAU);
            ctx.closePath();
            break;
        case 'triangle':
            width = w ? w / 2 : radius;
            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            ctx.closePath();
            break;
        case 'rectRounded':
            // NOTE: the rounded rect implementation changed to use `arc` instead of
            // `quadraticCurveTo` since it generates better results when rect is
            // almost a circle. 0.516 (instead of 0.5) produces results with visually
            // closer proportion to the previous impl and it is inscribed in the
            // circle with `radius`. For more details, see the following PRs:
            // https://github.com/chartjs/Chart.js/issues/5597
            // https://github.com/chartjs/Chart.js/issues/5858
            cornerRadius = radius * 0.516;
            size = radius - cornerRadius;
            xOffset = Math.cos(rad + QUARTER_PI) * size;
            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            yOffset = Math.sin(rad + QUARTER_PI) * size;
            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
            ctx.closePath();
            break;
        case 'rect':
            if (!rotation) {
                size = Math.SQRT1_2 * radius;
                width = w ? w / 2 : size;
                ctx.rect(x - width, y - size, 2 * width, 2 * size);
                break;
            }
            rad += QUARTER_PI;
        /* falls through */ case 'rectRot':
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            ctx.closePath();
            break;
        case 'crossRot':
            rad += QUARTER_PI;
        /* falls through */ case 'cross':
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case 'star':
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            rad += QUARTER_PI;
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case 'line':
            xOffset = w ? w / 2 : Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            break;
        case 'dash':
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
            break;
        case false:
            ctx.closePath();
            break;
    }
    ctx.fill();
    if (options.borderWidth > 0) ctx.stroke();
}
/**
 * Returns true if the point is inside the rectangle
 * @param point - The point to test
 * @param area - The rectangle
 * @param margin - allowed margin
 * @private
 */ function _isPointInArea(point, area, margin) {
    margin = margin || 0.5; // margin - default is to match rounded decimals
    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx.clip();
}
function unclipArea(ctx) {
    ctx.restore();
}
/**
 * @private
 */ function _steppedLineTo(ctx, previous, target, flip, mode) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    if (mode === 'middle') {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
    } else if (mode === 'after' !== !!flip) ctx.lineTo(previous.x, target.y);
    else ctx.lineTo(target.x, previous.y);
    ctx.lineTo(target.x, target.y);
}
/**
 * @private
 */ function _bezierCurveTo(ctx, previous, target, flip) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
    if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);
    if (!isNullOrUndef(opts.rotation)) ctx.rotate(opts.rotation);
    if (opts.color) ctx.fillStyle = opts.color;
    if (opts.textAlign) ctx.textAlign = opts.textAlign;
    if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;
}
function decorateText(ctx, x, y, line, opts) {
    if (opts.strikethrough || opts.underline) {
        /**
     * Now that IE11 support has been dropped, we can use more
     * of the TextMetrics object. The actual bounding boxes
     * are unflagged in Chrome, Firefox, Edge, and Safari so they
     * can be safely used.
     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
     */ const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
    }
}
function drawBackdrop(ctx, opts) {
    const oldColor = ctx.fillStyle;
    ctx.fillStyle = opts.color;
    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
    ctx.fillStyle = oldColor;
}
/**
 * Render text onto the canvas
 */ function renderText(ctx, text, x, y, font, opts = {}) {
    const lines = isArray(text) ? text : [
        text
    ];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
    let i, line;
    ctx.save();
    ctx.font = font.string;
    setRenderOpts(ctx, opts);
    for(i = 0; i < lines.length; ++i){
        line = lines[i];
        if (opts.backdrop) drawBackdrop(ctx, opts.backdrop);
        if (stroke) {
            if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;
            if (!isNullOrUndef(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;
            ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        decorateText(ctx, x, y, line, opts);
        y += Number(font.lineHeight);
    }
    ctx.restore();
}
/**
 * Add a path of a rectangle with rounded corners to the current sub-path
 * @param ctx - Context
 * @param rect - Bounding rect
 */ function addRoundedRectPath(ctx, rect) {
    const { x, y, w, h, radius } = rect;
    // top left arc
    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
    // line from top left to bottom left
    ctx.lineTo(x, y + h - radius.bottomLeft);
    // bottom left arc
    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
    // line from bottom left to bottom right
    ctx.lineTo(x + w - radius.bottomRight, y + h);
    // bottom right arc
    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
    // line from bottom right to top right
    ctx.lineTo(x + w, y + radius.topRight);
    // top right arc
    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
    // line from top right to top left
    ctx.lineTo(x + radius.topLeft, y);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
/**
 * @alias Chart.helpers.options
 * @namespace
 */ /**
 * Converts the given line height `value` in pixels for a specific font `size`.
 * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
 * @param size - The font size (in pixels) used to resolve relative `value`.
 * @returns The effective line height in pixels (size * 1.2 if value is invalid).
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
 * @since 2.7.0
 */ function toLineHeight(value, size) {
    const matches = ('' + value).match(LINE_HEIGHT);
    if (!matches || matches[1] === 'normal') return size * 1.2;
    value = +matches[2];
    switch(matches[3]){
        case 'px':
            return value;
        case '%':
            value /= 100;
            break;
    }
    return size * value;
}
const numberOrZero = (v)=>+v || 0;
function _readValueToProps(value, props) {
    const ret = {};
    const objProps = isObject(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
    for (const prop of keys)ret[prop] = numberOrZero(read(prop));
    return ret;
}
/**
 * Converts the given value into a TRBL object.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left)
 * @since 3.0.0
 */ function toTRBL(value) {
    return _readValueToProps(value, {
        top: 'y',
        right: 'x',
        bottom: 'y',
        left: 'x'
    });
}
/**
 * Converts the given value into a TRBL corners object (similar with css border-radius).
 * @param value - If a number, set the value to all TRBL corner components,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
 * @since 3.0.0
 */ function toTRBLCorners(value) {
    return _readValueToProps(value, [
        'topLeft',
        'topRight',
        'bottomLeft',
        'bottomRight'
    ]);
}
/**
 * Converts the given value into a padding object with pre-computed width/height.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left, width, height)
 * @since 2.7.0
 */ function toPadding(value) {
    const obj = toTRBL(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
}
/**
 * Parses font options and returns the font object.
 * @param options - A object that contains font options to be parsed.
 * @param fallback - A object that contains fallback font options.
 * @return The font object.
 * @private
 */ function toFont(options, fallback) {
    options = options || {};
    fallback = fallback || defaults.font;
    let size = valueOrDefault(options.size, fallback.size);
    if (typeof size === 'string') size = parseInt(size, 10);
    let style = valueOrDefault(options.style, fallback.style);
    if (style && !('' + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = undefined;
    }
    const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ''
    };
    font.string = toFontString(font);
    return font;
}
/**
 * Evaluates the given `inputs` sequentially and returns the first defined value.
 * @param inputs - An array of values, falling back to the last value.
 * @param context - If defined and the current value is a function, the value
 * is called with `context` as first argument and the result becomes the new input.
 * @param index - If defined and the current value is an array, the value
 * at `index` become the new input.
 * @param info - object to return information about resolution in
 * @param info.cacheable - Will be set to `false` if option is not cacheable.
 * @since 2.7.0
 */ function resolve(inputs, context, index, info) {
    let cacheable = true;
    let i, ilen, value;
    for(i = 0, ilen = inputs.length; i < ilen; ++i){
        value = inputs[i];
        if (value === undefined) continue;
        if (context !== undefined && typeof value === 'function') {
            value = value(context);
            cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
            value = value[index % value.length];
            cacheable = false;
        }
        if (value !== undefined) {
            if (info && !cacheable) info.cacheable = false;
            return value;
        }
    }
}
/**
 * @param minmax
 * @param grace
 * @param beginAtZero
 * @private
 */ function _addGrace(minmax, grace, beginAtZero) {
    const { min, max } = minmax;
    const change = toDimension(grace, (max - min) / 2);
    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
    return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
    };
}
function createContext(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
}
/**
 * Creates a Proxy for resolving raw values for options.
 * @param scopes - The option scopes to look for values, in resolution order
 * @param prefixes - The prefixes for values, in resolution order.
 * @param rootScopes - The root option scopes
 * @param fallback - Parent scopes fallback
 * @param getTarget - callback for getting the target for changed values
 * @returns Proxy
 * @private
 */ function _createResolver(scopes, prefixes = [
    ''
], rootScopes, fallback, getTarget = ()=>scopes[0]) {
    const finalRootScopes = rootScopes || scopes;
    if (typeof fallback === 'undefined') fallback = _resolve('_fallback', scopes);
    const cache = {
        [Symbol.toStringTag]: 'Object',
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: finalRootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope)=>_createResolver([
                scope,
                ...scopes
            ], prefixes, finalRootScopes, fallback)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete target._keys; // remove cached keys
            delete scopes[0][prop]; // remove from top level scope
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop) {
            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(scopes[0]);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return getKeysFromAllScopes(target).includes(prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys (target) {
            return getKeysFromAllScopes(target);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            const storage = target._storage || (target._storage = getTarget());
            target[prop] = storage[prop] = value; // set to top level scope + cache
            delete target._keys; // remove cached keys
            return true;
        }
    });
}
/**
 * Returns an Proxy for resolving option values with context.
 * @param proxy - The Proxy returned by `_createResolver`
 * @param context - Context object for scriptable/indexable options
 * @param subProxy - The proxy provided for scriptable options
 * @param descriptorDefaults - Defaults for descriptors
 * @private
 */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete proxy[prop]; // remove from proxy
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop, receiver) {
            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                enumerable: true,
                configurable: true
            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(proxy);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return Reflect.has(proxy, prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys () {
            return Reflect.ownKeys(proxy);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            proxy[prop] = value; // set to proxy
            delete target[prop]; // remove from cache
            return true;
        }
    });
}
/**
 * @private
 */ function _descriptors(proxy, defaults = {
    scriptable: true,
    indexable: true
}) {
    const { _scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys } = proxy;
    return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
    };
}
const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve) {
    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') return target[prop];
    const value = resolve();
    // cache the resolved value
    target[prop] = value;
    return value;
}
function _resolveWithContext(target, prop, receiver) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    let value = _proxy[prop]; // resolve from proxy
    // resolve with context
    if (isFunction(value) && descriptors.isScriptable(prop)) value = _resolveScriptable(prop, value, target, receiver);
    if (isArray(value) && value.length) value = _resolveArray(prop, value, target, descriptors.isIndexable);
    if (needsSubResolver(prop, value)) // if the resolved value is an object, create a sub resolver for it
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
    return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
    const { _proxy, _context, _subProxy, _stack } = target;
    if (_stack.has(prop)) throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
    _stack.add(prop);
    let value = getValue(_context, _subProxy || receiver);
    _stack.delete(prop);
    if (needsSubResolver(prop, value)) // When scriptable option returns an object, create a resolver on that.
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
    return value;
}
function _resolveArray(prop, value, target, isIndexable) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    if (typeof _context.index !== 'undefined' && isIndexable(prop)) return value[_context.index % value.length];
    else if (isObject(value[0])) {
        // Array of objects, return array or resolvers
        const arr = value;
        const scopes = _proxy._scopes.filter((s)=>s !== arr);
        value = [];
        for (const item of arr){
            const resolver = createSubResolver(scopes, _proxy, prop, item);
            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
    }
    return value;
}
function resolveFallback(fallback, prop, value) {
    return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes){
        const scope = getScope(key, parent);
        if (scope) {
            set.add(scope);
            const fallback = resolveFallback(scope._fallback, key, value);
            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) // When we reach the descriptor that defines a new _fallback, return that.
            // The fallback will resume to that new scope.
            return fallback;
        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) // Fallback to `false` results to `false`, when falling back to different key.
        // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
        return null;
    }
    return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = resolveFallback(resolver._fallback, prop, value);
    const allScopes = [
        ...parentScopes,
        ...rootScopes
    ];
    const set = new Set();
    set.add(value);
    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
    if (key === null) return false;
    if (typeof fallback !== 'undefined' && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key, value);
        if (key === null) return false;
    }
    return _createResolver(Array.from(set), [
        ''
    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback, item) {
    while(key)key = addScopes(set, allScopes, key, fallback, item);
    return key;
}
function subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) parent[prop] = {};
    const target = parent[prop];
    if (isArray(target) && isObject(value)) // For array of objects, the object is used to store updated values
    return value;
    return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
    let value;
    for (const prefix of prefixes){
        value = _resolve(readKey(prefix, prop), scopes);
        if (typeof value !== 'undefined') return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
}
function _resolve(key, scopes) {
    for (const scope of scopes){
        if (!scope) continue;
        const value = scope[key];
        if (typeof value !== 'undefined') return value;
    }
}
function getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) keys = target._keys = resolveKeysFromAllScopes(target._scopes);
    return keys;
}
function resolveKeysFromAllScopes(scopes) {
    const set = new Set();
    for (const scope of scopes)for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_')))set.add(key);
    return Array.from(set);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
    const { iScale } = meta;
    const { key = 'r' } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for(i = 0, ilen = count; i < ilen; ++i){
        index = i + start;
        item = data[index];
        parsed[i] = {
            r: iScale.parse(resolveObjectKey(item, key), index)
        };
    }
    return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
    // Props to Rob Spencer at scaled innovation for his post on splining between points
    // http://scaledinnovation.com/analytics/splines/aboutSplines.html
    // This function must also respect "skipped" points
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = distanceBetweenPoints(current, previous);
    const d12 = distanceBetweenPoints(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    // If all points are the same, s01 & s02 will be inf
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t * s01; // scaling factor for triangle Ta
    const fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
}
/**
 * Adjust tangents to ensure monotonic properties
 */ function monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen - 1; ++i){
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) continue;
        if (almostEquals(deltaK[i], 0, EPSILON)) {
            mK[i] = mK[i + 1] = 0;
            continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) continue;
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
    }
}
function monotoneCompute(points, mK, indexAxis = 'x') {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
            delta = (iPixel - pointBefore[indexAxis]) / 3;
            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
            delta = (pointAfter[indexAxis] - iPixel) / 3;
            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
    }
}
/**
 * This function calculates Bézier control points in a similar way than |splineCurve|,
 * but preserves monotonicity of the provided data and ensures no local extremums are added
 * between the dataset discrete points due to the interpolation.
 * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
 */ function splineCurveMonotone(points, indexAxis = 'x') {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    // Calculate slopes (deltaK) and initialize tangents (mK)
    let i, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        if (pointAfter) {
            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
    }
    monotoneAdjust(points, deltaK, mK);
    monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
    let i, ilen, point, inArea, inAreaPrev;
    let inAreaNext = _isPointInArea(points[0], area);
    for(i = 0, ilen = points.length; i < ilen; ++i){
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) continue;
        point = points[i];
        if (inAreaPrev) {
            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
    }
}
/**
 * @private
 */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
    let i, ilen, point, controlPoints;
    // Only consider points that are drawn in case the spanGaps option is used
    if (options.spanGaps) points = points.filter((pt)=>!pt.skip);
    if (options.cubicInterpolationMode === 'monotone') splineCurveMonotone(points, indexAxis);
    else {
        let prev = loop ? points[points.length - 1] : points[0];
        for(i = 0, ilen = points.length; i < ilen; ++i){
            point = points[i];
            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
            point.cp1x = controlPoints.previous.x;
            point.cp1y = controlPoints.previous.y;
            point.cp2x = controlPoints.next.x;
            point.cp2y = controlPoints.next.y;
            prev = point;
        }
    }
    if (options.capBezierPoints) capBezierPoints(points, area);
}
/**
 * @private
 */ function _isDomSupported() {
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * @private
 */ function _getParentNode(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === '[object ShadowRoot]') parent = parent.host;
    return parent;
}
/**
 * convert max-width/max-height values that may be percentages into a number
 * @private
 */ function parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === 'string') {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf('%') !== -1) // percentage * size in dimension
        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    } else valueInPixels = styleValue;
    return valueInPixels;
}
const getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el, property) {
    return getComputedStyle(el).getPropertyValue(property);
}
const positions = [
    'top',
    'right',
    'bottom',
    'left'
];
function getPositionedStyle(styles, style, suffix) {
    const result = {};
    suffix = suffix ? '-' + suffix : '';
    for(let i = 0; i < 4; i++){
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
}
const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
/**
 * @param e
 * @param canvas
 * @returns Canvas position
 */ function getCanvasPosition(e, canvas) {
    const touches = e.touches;
    const source = touches && touches.length ? touches[0] : e;
    const { offsetX, offsetY } = source;
    let box = false;
    let x, y;
    if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
    } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
    }
    return {
        x,
        y,
        box
    };
}
/**
 * Gets an event's x, y coordinates, relative to the chart area
 * @param event
 * @param chart
 * @returns x and y coordinates of the event
 */ function getRelativePosition(event, chart) {
    if ('native' in event) return event;
    const { canvas, currentDevicePixelRatio } = chart;
    const style = getComputedStyle(canvas);
    const borderBox = style.boxSizing === 'border-box';
    const paddings = getPositionedStyle(style, 'padding');
    const borders = getPositionedStyle(style, 'border', 'width');
    const { x, y, box } = getCanvasPosition(event, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width, height } = chart;
    if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
}
function getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === undefined || height === undefined) {
        const container = canvas && _getParentNode(canvas);
        if (!container) {
            width = canvas.clientWidth;
            height = canvas.clientHeight;
        } else {
            const rect = container.getBoundingClientRect(); // this is the border box of the container
            const containerStyle = getComputedStyle(container);
            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
            const containerPadding = getPositionedStyle(containerStyle, 'padding');
            width = rect.width - containerPadding.width - containerBorder.width;
            height = rect.height - containerPadding.height - containerBorder.height;
            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
        }
    }
    return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
    };
}
const round1 = (v)=>Math.round(v * 10) / 10;
// eslint-disable-next-line complexity
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = getComputedStyle(canvas);
    const margins = getPositionedStyle(style, 'margin');
    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
    let { width, height } = containerSize;
    if (style.boxSizing === 'content-box') {
        const borders = getPositionedStyle(style, 'border', 'width');
        const paddings = getPositionedStyle(style, 'padding');
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) // https://github.com/chartjs/Chart.js/issues/4659
    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
    height = round1(width / 2);
    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
        height = containerSize.height;
        width = round1(Math.floor(height * aspectRatio));
    }
    return {
        width,
        height
    };
}
/**
 * @param chart
 * @param forceRatio
 * @param forceStyle
 * @returns True if the canvas context size or transformation has changed.
 */ function retinaScale(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = Math.floor(chart.height);
    chart.width = Math.floor(chart.width);
    const canvas = chart.canvas;
    // If no style has been set on the canvas, the render size is used as display size,
    // making the chart visually bigger, so let's enforce it to the "correct" values.
    // See https://github.com/chartjs/Chart.js/issues/3575
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
    }
    return false;
}
/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */ const supportsEventListenerOptions = function() {
    let passiveSupported = false;
    try {
        const options = {
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        if (_isDomSupported()) {
            window.addEventListener('test', null, options);
            window.removeEventListener('test', null, options);
        }
    } catch (e) {
    // continue regardless of error
    }
    return passiveSupported;
}();
/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns Size in pixels or undefined if unknown.
 */ function readUsedSize(element, property) {
    const value = getStyle(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : undefined;
}
/**
 * @private
 */ function _pointInLine(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
    };
}
/**
 * @private
 */ function _steppedInterpolation(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
    };
}
/**
 * @private
 */ function _bezierInterpolation(p1, p2, t, mode) {
    const cp1 = {
        x: p1.cp2x,
        y: p1.cp2y
    };
    const cp2 = {
        x: p2.cp1x,
        y: p2.cp1y
    };
    const a = _pointInLine(p1, cp1, t);
    const b = _pointInLine(cp1, cp2, t);
    const c = _pointInLine(cp2, p2, t);
    const d = _pointInLine(a, b, t);
    const e = _pointInLine(b, c, t);
    return _pointInLine(d, e, t);
}
const getRightToLeftAdapter = function(rectX, width) {
    return {
        x (x) {
            return rectX + rectX + width - x;
        },
        setWidth (w) {
            width = w;
        },
        textAlign (align) {
            if (align === 'center') return align;
            return align === 'right' ? 'left' : 'right';
        },
        xPlus (x, value) {
            return x - value;
        },
        leftForLtr (x, itemWidth) {
            return x - itemWidth;
        }
    };
};
const getLeftToRightAdapter = function() {
    return {
        x (x) {
            return x;
        },
        setWidth (w) {},
        textAlign (align) {
            return align;
        },
        xPlus (x, value) {
            return x + value;
        },
        leftForLtr (x, _itemWidth) {
            return x;
        }
    };
};
function getRtlAdapter(rtl, rectX, width) {
    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
    let style, original;
    if (direction === 'ltr' || direction === 'rtl') {
        style = ctx.canvas.style;
        original = [
            style.getPropertyValue('direction'),
            style.getPropertyPriority('direction')
        ];
        style.setProperty('direction', direction, 'important');
        ctx.prevTextDirection = original;
    }
}
function restoreTextDirection(ctx, original) {
    if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty('direction', original[0], original[1]);
    }
}
function propertyFn(property) {
    if (property === 'angle') return {
        between: _angleBetween,
        compare: _angleDiff,
        normalize: _normalizeAngle
    };
    return {
        between: _isBetween,
        compare: (a, b)=>a - b,
        normalize: (x)=>x
    };
}
function normalizeSegment({ start, end, count, loop, style }) {
    return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
    };
}
function getSegment(segment, points, bounds) {
    const { property, start: startBound, end: endBound } = bounds;
    const { between, normalize } = propertyFn(property);
    const count = points.length;
    let { start, end, loop } = segment;
    let i, ilen;
    if (loop) {
        start += count;
        end += count;
        for(i = 0, ilen = count; i < ilen; ++i){
            if (!between(normalize(points[start % count][property]), startBound, endBound)) break;
            start--;
            end--;
        }
        start %= count;
        end %= count;
    }
    if (end < start) end += count;
    return {
        start,
        end,
        loop,
        style: segment.style
    };
}
function _boundSegment(segment, points, bounds) {
    if (!bounds) return [
        segment
    ];
    const { property, start: startBound, end: endBound } = bounds;
    const count = points.length;
    const { compare, between, normalize } = propertyFn(property);
    const { start, end, loop, style } = getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point, prevValue;
    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
    const shouldStart = ()=>inside || startIsBefore();
    const shouldStop = ()=>!inside || endIsBefore();
    for(let i = start, prev = start; i <= end; ++i){
        point = points[i % count];
        if (point.skip) continue;
        value = normalize(point[property]);
        if (value === prevValue) continue;
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;
        if (subStart !== null && shouldStop()) {
            result.push(normalizeSegment({
                start: subStart,
                end: i,
                loop,
                count,
                style
            }));
            subStart = null;
        }
        prev = i;
        prevValue = value;
    }
    if (subStart !== null) result.push(normalizeSegment({
        start: subStart,
        end,
        loop,
        count,
        style
    }));
    return result;
}
function _boundSegments(line, bounds) {
    const result = [];
    const segments = line.segments;
    for(let i = 0; i < segments.length; i++){
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) result.push(...sub);
    }
    return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
    let start = 0;
    let end = count - 1;
    if (loop && !spanGaps) while(start < count && !points[start].skip)start++;
    while(start < count && points[start].skip)start++;
    start %= count;
    if (loop) end += start;
    while(end > start && points[end % count].skip)end--;
    end %= count;
    return {
        start,
        end
    };
}
function solidSegments(points, start, max, loop) {
    const count = points.length;
    const result = [];
    let last = start;
    let prev = points[start];
    let end;
    for(end = start + 1; end <= max; ++end){
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
            if (!prev.skip) {
                loop = false;
                result.push({
                    start: start % count,
                    end: (end - 1) % count,
                    loop
                });
                start = last = cur.stop ? end : null;
            }
        } else {
            last = end;
            if (prev.skip) start = end;
        }
        prev = cur;
    }
    if (last !== null) result.push({
        start: start % count,
        end: last % count,
        loop
    });
    return result;
}
function _computeSegments(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count = points.length;
    if (!count) return [];
    const loop = !!line._loop;
    const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
    if (spanGaps === true) return splitByStyles(line, [
        {
            start,
            end,
            loop
        }
    ], points, segmentOptions);
    const max = end < start ? end + count : end;
    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) return segments;
    return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = readStyle(line.options);
    const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
    const count = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start = segments[0].start;
    let i = start;
    function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) return;
        s += count;
        while(points[s % count].skip)s -= dir;
        while(points[e % count].skip)e += dir;
        if (s % count !== e % count) {
            result.push({
                start: s % count,
                end: e % count,
                loop: l,
                style: st
            });
            prevStyle = st;
            start = e % count;
        }
    }
    for (const segment of segments){
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for(i = start + 1; i <= segment.end; i++){
            const pt = points[i % count];
            style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                type: 'segment',
                p0: prev,
                p1: pt,
                p0DataIndex: (i - 1) % count,
                p1DataIndex: i % count,
                datasetIndex
            })));
            if (styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);
            prev = pt;
            prevStyle = style;
        }
        if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);
    }
    return result;
}
function readStyle(options) {
    return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
    };
}
function styleChanged(style, prevStyle) {
    if (!prevStyle) return false;
    const cache = [];
    const replacer = function(key, value) {
        if (!isPatternOrGradient(value)) return value;
        if (!cache.includes(value)) cache.push(value);
        return cache.indexOf(value);
    };
    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
function getSizeForArea(scale, chartArea, field) {
    return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
    const { xScale, yScale } = meta;
    if (xScale && yScale) return {
        left: getSizeForArea(xScale, chartArea, 'left'),
        right: getSizeForArea(xScale, chartArea, 'right'),
        top: getSizeForArea(yScale, chartArea, 'top'),
        bottom: getSizeForArea(yScale, chartArea, 'bottom')
    };
    return chartArea;
}
function getDatasetClipArea(chart, meta) {
    const clip = meta._clip;
    if (clip.disabled) return false;
    const area = getDatasetArea(meta, chart.chartArea);
    return {
        left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),
        right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),
        top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),
        bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)
    };
}

},{"@kurkle/color":"7Vk5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7Vk5O":[function(require,module,exports,__globalThis) {
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "b2n", ()=>b2n);
parcelHelpers.export(exports, "b2p", ()=>b2p);
parcelHelpers.export(exports, "default", ()=>index_esm);
parcelHelpers.export(exports, "hexParse", ()=>hexParse);
parcelHelpers.export(exports, "hexString", ()=>hexString);
parcelHelpers.export(exports, "hsl2rgb", ()=>hsl2rgb);
parcelHelpers.export(exports, "hslString", ()=>hslString);
parcelHelpers.export(exports, "hsv2rgb", ()=>hsv2rgb);
parcelHelpers.export(exports, "hueParse", ()=>hueParse);
parcelHelpers.export(exports, "hwb2rgb", ()=>hwb2rgb);
parcelHelpers.export(exports, "lim", ()=>lim);
parcelHelpers.export(exports, "n2b", ()=>n2b);
parcelHelpers.export(exports, "n2p", ()=>n2p);
parcelHelpers.export(exports, "nameParse", ()=>nameParse);
parcelHelpers.export(exports, "p2b", ()=>p2b);
parcelHelpers.export(exports, "rgb2hsl", ()=>rgb2hsl);
parcelHelpers.export(exports, "rgbParse", ()=>rgbParse);
parcelHelpers.export(exports, "rgbString", ()=>rgbString);
parcelHelpers.export(exports, "rotate", ()=>rotate);
parcelHelpers.export(exports, "round", ()=>round);
function round(v) {
    return v + 0.5 | 0;
}
const lim = (v, l, h)=>Math.max(Math.min(v, h), l);
function p2b(v) {
    return lim(round(v * 2.55), 0, 255);
}
function b2p(v) {
    return lim(round(v / 2.55), 0, 100);
}
function n2b(v) {
    return lim(round(v * 255), 0, 255);
}
function b2n(v) {
    return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
    return lim(round(v * 100), 0, 100);
}
const map$1 = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
};
const hex = [
    ...'0123456789ABCDEF'
];
const h1 = (b)=>hex[b & 0xF];
const h2 = (b)=>hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);
const isShort = (v)=>eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === '#') {
        if (len === 4 || len === 5) ret = {
            r: 255 & map$1[str[1]] * 17,
            g: 255 & map$1[str[2]] * 17,
            b: 255 & map$1[str[3]] * 17,
            a: len === 5 ? map$1[str[4]] * 17 : 255
        };
        else if (len === 7 || len === 9) ret = {
            r: map$1[str[1]] << 4 | map$1[str[2]],
            g: map$1[str[3]] << 4 | map$1[str[4]],
            b: map$1[str[5]] << 4 | map$1[str[6]],
            a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
        };
    }
    return ret;
}
const alpha = (a, f)=>a < 255 ? f(a) : '';
function hexString(v) {
    var f = isShort(v) ? h1 : h2;
    return v ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return [
        f(0),
        f(8),
        f(4)
    ];
}
function hsv2rgbn(h, s, v) {
    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    return [
        f(5),
        f(3),
        f(1)
    ];
}
function hwb2rgbn(h, w, b) {
    const rgb = hsl2rgbn(h, 1, 0.5);
    let i;
    if (w + b > 1) {
        i = 1 / (w + b);
        w *= i;
        b *= i;
    }
    for(i = 0; i < 3; i++){
        rgb[i] *= 1 - w - b;
        rgb[i] += w;
    }
    return rgb;
}
function hueValue(r, g, b, d, max) {
    if (r === max) return (g - b) / d + (g < b ? 6 : 0);
    if (g === max) return (b - r) / d + 2;
    return (r - g) / d + 4;
}
function rgb2hsl(v) {
    const range = 255;
    const r = v.r / range;
    const g = v.g / range;
    const b = v.b / range;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    let h, s, d;
    if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = hueValue(r, g, b, d, max);
        h = h * 60 + 0.5;
    }
    return [
        h | 0,
        s || 0,
        l
    ];
}
function calln(f, a, b, c) {
    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}
function hsl2rgb(h, s, l) {
    return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
    return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
    return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
    return (h % 360 + 360) % 360;
}
function hueParse(str) {
    const m = HUE_RE.exec(str);
    let a = 255;
    let v;
    if (!m) return;
    if (m[5] !== v) a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    const h = hue(+m[2]);
    const p1 = +m[3] / 100;
    const p2 = +m[4] / 100;
    if (m[1] === 'hwb') v = hwb2rgb(h, p1, p2);
    else if (m[1] === 'hsv') v = hsv2rgb(h, p1, p2);
    else v = hsl2rgb(h, p1, p2);
    return {
        r: v[0],
        g: v[1],
        b: v[2],
        a: a
    };
}
function rotate(v, deg) {
    var h = rgb2hsl(v);
    h[0] = hue(h[0] + deg);
    h = hsl2rgb(h);
    v.r = h[0];
    v.g = h[1];
    v.b = h[2];
}
function hslString(v) {
    if (!v) return;
    const a = rgb2hsl(v);
    const h = a[0];
    const s = n2p(a[1]);
    const l = n2p(a[2]);
    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}
const map = {
    x: 'dark',
    Z: 'light',
    Y: 're',
    X: 'blu',
    W: 'gr',
    V: 'medium',
    U: 'slate',
    A: 'ee',
    T: 'ol',
    S: 'or',
    B: 'ra',
    C: 'lateg',
    D: 'ights',
    R: 'in',
    Q: 'turquois',
    E: 'hi',
    P: 'ro',
    O: 'al',
    N: 'le',
    M: 'de',
    L: 'yello',
    F: 'en',
    K: 'ch',
    G: 'arks',
    H: 'ea',
    I: 'ightg',
    J: 'wh'
};
const names$1 = {
    OiceXe: 'f0f8ff',
    antiquewEte: 'faebd7',
    aqua: 'ffff',
    aquamarRe: '7fffd4',
    azuY: 'f0ffff',
    beige: 'f5f5dc',
    bisque: 'ffe4c4',
    black: '0',
    blanKedOmond: 'ffebcd',
    Xe: 'ff',
    XeviTet: '8a2be2',
    bPwn: 'a52a2a',
    burlywood: 'deb887',
    caMtXe: '5f9ea0',
    KartYuse: '7fff00',
    KocTate: 'd2691e',
    cSO: 'ff7f50',
    cSnflowerXe: '6495ed',
    cSnsilk: 'fff8dc',
    crimson: 'dc143c',
    cyan: 'ffff',
    xXe: '8b',
    xcyan: '8b8b',
    xgTMnPd: 'b8860b',
    xWay: 'a9a9a9',
    xgYF: '6400',
    xgYy: 'a9a9a9',
    xkhaki: 'bdb76b',
    xmagFta: '8b008b',
    xTivegYF: '556b2f',
    xSange: 'ff8c00',
    xScEd: '9932cc',
    xYd: '8b0000',
    xsOmon: 'e9967a',
    xsHgYF: '8fbc8f',
    xUXe: '483d8b',
    xUWay: '2f4f4f',
    xUgYy: '2f4f4f',
    xQe: 'ced1',
    xviTet: '9400d3',
    dAppRk: 'ff1493',
    dApskyXe: 'bfff',
    dimWay: '696969',
    dimgYy: '696969',
    dodgerXe: '1e90ff',
    fiYbrick: 'b22222',
    flSOwEte: 'fffaf0',
    foYstWAn: '228b22',
    fuKsia: 'ff00ff',
    gaRsbSo: 'dcdcdc',
    ghostwEte: 'f8f8ff',
    gTd: 'ffd700',
    gTMnPd: 'daa520',
    Way: '808080',
    gYF: '8000',
    gYFLw: 'adff2f',
    gYy: '808080',
    honeyMw: 'f0fff0',
    hotpRk: 'ff69b4',
    RdianYd: 'cd5c5c',
    Rdigo: '4b0082',
    ivSy: 'fffff0',
    khaki: 'f0e68c',
    lavFMr: 'e6e6fa',
    lavFMrXsh: 'fff0f5',
    lawngYF: '7cfc00',
    NmoncEffon: 'fffacd',
    ZXe: 'add8e6',
    ZcSO: 'f08080',
    Zcyan: 'e0ffff',
    ZgTMnPdLw: 'fafad2',
    ZWay: 'd3d3d3',
    ZgYF: '90ee90',
    ZgYy: 'd3d3d3',
    ZpRk: 'ffb6c1',
    ZsOmon: 'ffa07a',
    ZsHgYF: '20b2aa',
    ZskyXe: '87cefa',
    ZUWay: '778899',
    ZUgYy: '778899',
    ZstAlXe: 'b0c4de',
    ZLw: 'ffffe0',
    lime: 'ff00',
    limegYF: '32cd32',
    lRF: 'faf0e6',
    magFta: 'ff00ff',
    maPon: '800000',
    VaquamarRe: '66cdaa',
    VXe: 'cd',
    VScEd: 'ba55d3',
    VpurpN: '9370db',
    VsHgYF: '3cb371',
    VUXe: '7b68ee',
    VsprRggYF: 'fa9a',
    VQe: '48d1cc',
    VviTetYd: 'c71585',
    midnightXe: '191970',
    mRtcYam: 'f5fffa',
    mistyPse: 'ffe4e1',
    moccasR: 'ffe4b5',
    navajowEte: 'ffdead',
    navy: '80',
    Tdlace: 'fdf5e6',
    Tive: '808000',
    TivedBb: '6b8e23',
    Sange: 'ffa500',
    SangeYd: 'ff4500',
    ScEd: 'da70d6',
    pOegTMnPd: 'eee8aa',
    pOegYF: '98fb98',
    pOeQe: 'afeeee',
    pOeviTetYd: 'db7093',
    papayawEp: 'ffefd5',
    pHKpuff: 'ffdab9',
    peru: 'cd853f',
    pRk: 'ffc0cb',
    plum: 'dda0dd',
    powMrXe: 'b0e0e6',
    purpN: '800080',
    YbeccapurpN: '663399',
    Yd: 'ff0000',
    Psybrown: 'bc8f8f',
    PyOXe: '4169e1',
    saddNbPwn: '8b4513',
    sOmon: 'fa8072',
    sandybPwn: 'f4a460',
    sHgYF: '2e8b57',
    sHshell: 'fff5ee',
    siFna: 'a0522d',
    silver: 'c0c0c0',
    skyXe: '87ceeb',
    UXe: '6a5acd',
    UWay: '708090',
    UgYy: '708090',
    snow: 'fffafa',
    sprRggYF: 'ff7f',
    stAlXe: '4682b4',
    tan: 'd2b48c',
    teO: '8080',
    tEstN: 'd8bfd8',
    tomato: 'ff6347',
    Qe: '40e0d0',
    viTet: 'ee82ee',
    JHt: 'f5deb3',
    wEte: 'ffffff',
    wEtesmoke: 'f5f5f5',
    Lw: 'ffff00',
    LwgYF: '9acd32'
};
function unpack() {
    const unpacked = {};
    const keys = Object.keys(names$1);
    const tkeys = Object.keys(map);
    let i, j, k, ok, nk;
    for(i = 0; i < keys.length; i++){
        ok = nk = keys[i];
        for(j = 0; j < tkeys.length; j++){
            k = tkeys[j];
            nk = nk.replace(k, map[k]);
        }
        k = parseInt(names$1[ok], 16);
        unpacked[nk] = [
            k >> 16 & 0xFF,
            k >> 8 & 0xFF,
            k & 0xFF
        ];
    }
    return unpacked;
}
let names;
function nameParse(str) {
    if (!names) {
        names = unpack();
        names.transparent = [
            0,
            0,
            0,
            0
        ];
    }
    const a = names[str.toLowerCase()];
    return a && {
        r: a[0],
        g: a[1],
        b: a[2],
        a: a.length === 4 ? a[3] : 255
    };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
    const m = RGB_RE.exec(str);
    let a = 255;
    let r, g, b;
    if (!m) return;
    if (m[7] !== r) {
        const v = +m[7];
        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
    }
    r = +m[1];
    g = +m[3];
    b = +m[5];
    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
    return {
        r: r,
        g: g,
        b: b,
        a: a
    };
}
function rgbString(v) {
    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
const from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate(rgb1, rgb2, t) {
    const r = from(b2n(rgb1.r));
    const g = from(b2n(rgb1.g));
    const b = from(b2n(rgb1.b));
    return {
        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
        a: rgb1.a + t * (rgb2.a - rgb1.a)
    };
}
function modHSL(v, i, ratio) {
    if (v) {
        let tmp = rgb2hsl(v);
        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
        tmp = hsl2rgb(tmp);
        v.r = tmp[0];
        v.g = tmp[1];
        v.b = tmp[2];
    }
}
function clone(v, proto) {
    return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
    var v = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
    };
    if (Array.isArray(input)) {
        if (input.length >= 3) {
            v = {
                r: input[0],
                g: input[1],
                b: input[2],
                a: 255
            };
            if (input.length > 3) v.a = n2b(input[3]);
        }
    } else {
        v = clone(input, {
            r: 0,
            g: 0,
            b: 0,
            a: 1
        });
        v.a = n2b(v.a);
    }
    return v;
}
function functionParse(str) {
    if (str.charAt(0) === 'r') return rgbParse(str);
    return hueParse(str);
}
class Color {
    constructor(input){
        if (input instanceof Color) return input;
        const type = typeof input;
        let v;
        if (type === 'object') v = fromObject(input);
        else if (type === 'string') v = hexParse(input) || nameParse(input) || functionParse(input);
        this._rgb = v;
        this._valid = !!v;
    }
    get valid() {
        return this._valid;
    }
    get rgb() {
        var v = clone(this._rgb);
        if (v) v.a = b2n(v.a);
        return v;
    }
    set rgb(obj) {
        this._rgb = fromObject(obj);
    }
    rgbString() {
        return this._valid ? rgbString(this._rgb) : undefined;
    }
    hexString() {
        return this._valid ? hexString(this._rgb) : undefined;
    }
    hslString() {
        return this._valid ? hslString(this._rgb) : undefined;
    }
    mix(color, weight) {
        if (color) {
            const c1 = this.rgb;
            const c2 = color.rgb;
            let w2;
            const p = weight === w2 ? 0.5 : weight;
            const w = 2 * p - 1;
            const a = c1.a - c2.a;
            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
            w2 = 1 - w1;
            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
            c1.a = p * c1.a + (1 - p) * c2.a;
            this.rgb = c1;
        }
        return this;
    }
    interpolate(color, t) {
        if (color) this._rgb = interpolate(this._rgb, color._rgb, t);
        return this;
    }
    clone() {
        return new Color(this.rgb);
    }
    alpha(a) {
        this._rgb.a = n2b(a);
        return this;
    }
    clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
    }
    greyscale() {
        const rgb = this._rgb;
        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
    }
    opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
    }
    negate() {
        const v = this._rgb;
        v.r = 255 - v.r;
        v.g = 255 - v.g;
        v.b = 255 - v.b;
        return this;
    }
    lighten(ratio) {
        modHSL(this._rgb, 2, ratio);
        return this;
    }
    darken(ratio) {
        modHSL(this._rgb, 2, -ratio);
        return this;
    }
    saturate(ratio) {
        modHSL(this._rgb, 1, ratio);
        return this;
    }
    desaturate(ratio) {
        modHSL(this._rgb, 1, -ratio);
        return this;
    }
    rotate(deg) {
        rotate(this._rgb, deg);
        return this;
    }
}
function index_esm(input) {
    return new Color(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"avKfP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chartJs = require("../dist/chart.js");
parcelHelpers.exportAll(_chartJs, exports);
(0, _chartJs.Chart).register(...(0, _chartJs.registerables));
exports.default = (0, _chartJs.Chart);

},{"../dist/chart.js":"fbE0O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"gBHif":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PROPS", ()=>PROPS);
parcelHelpers.export(exports, "chartGradient", ()=>chartGradient);
parcelHelpers.export(exports, "CHART_TOOLTIP", ()=>CHART_TOOLTIP);
parcelHelpers.export(exports, "chartTicks", ()=>chartTicks);
parcelHelpers.export(exports, "CHART_LEGEND_LABEL", ()=>CHART_LEGEND_LABEL);
parcelHelpers.export(exports, "CHART_GRID", ()=>CHART_GRID);
parcelHelpers.export(exports, "reloadChart", ()=>reloadChart);
parcelHelpers.export(exports, "generateTimeSeriesData", ()=>generateTimeSeriesData);
parcelHelpers.export(exports, "getDatesBetweenDates", ()=>getDatesBetweenDates);
var _utils = require("../utils");
const PROPS = {
    font: {
        family: "Roboto Condensed",
        size: "10px"
    }
};
const chartGradient = (ctx, chartArea, gradientHeight, colorStart, colorEnd)=>{
    let width, height, gradient;
    const chartWidth = chartArea.right - chartArea.left;
    const chartHeight = chartArea.bottom - chartArea.top;
    if (gradient === null || width !== chartWidth || height !== chartHeight) {
        width = chartWidth;
        height = chartHeight;
        gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
        gradient.addColorStop(0, colorEnd);
        gradient.addColorStop(gradientHeight, colorStart);
    }
    return gradient;
};
const CHART_TOOLTIP = {
    titleFont: {
        family: PROPS.font.family,
        size: PROPS.font.size,
        weight: "normal"
    },
    titleColor: (0, _utils.cssVar)("--bs-body-color"),
    bodyColor: (0, _utils.cssVar)("--bs-body-color"),
    bodyFont: {
        family: PROPS.font.family,
        size: PROPS.font.size
    },
    titleMarginBottom: 3,
    backgroundColor: (0, _utils.cssVar)("--bs-tooltips-bg"),
    padding: 10,
    cornerRadius: 6,
    multiKeyBackground: (0, _utils.COLORS).transparent,
    displayColors: false,
    borderColor: (0, _utils.cssVar)("--bs-tooltips-border-color"),
    borderWidth: 6,
    caretSize: 0
};
const chartTicks = (padding = 8, align = "inner")=>({
        font: {
            family: PROPS.font.family,
            size: PROPS.font.size
        },
        color: (0, _utils.cssVar)("--bs-secondary-color"),
        padding: padding,
        source: "auto",
        align: align,
        distribution: "linear",
        autoSkip: true,
        maxRotation: 0
    });
const CHART_LEGEND_LABEL = {
    pointStyle: "circle",
    boxWidth: 7,
    boxHeight: 7,
    padding: 20,
    color: (0, _utils.cssVar)("--bs-secondary-color"),
    font: {
        family: PROPS.font.family,
        size: PROPS.font.size
    }
};
const CHART_GRID = {
    drawBorder: false,
    drawTicks: false,
    color: (0, _utils.cssVar)("--bs-border-50")
};
const reloadChart = (chart, callback)=>{
    callback;
    if (chart.config.type !== "doughnut" && chart.config.type !== "pie") {
        // Grid
        chart.config.options.scales.x.grid.color = (0, _utils.cssVar)("--bs-border-50");
        chart.config.options.scales.y.grid.color = (0, _utils.cssVar)("--bs-border-50");
        // Ticks
        chart.config.options.scales.x.ticks.color = (0, _utils.cssVar)("--bs-secondary-color");
        chart.config.options.scales.y.ticks.color = (0, _utils.cssVar)("--bs-secondary-color");
    }
    // Tooltip
    chart.config.options.plugins.tooltip.backgroundColor = (0, _utils.cssVar)("--bs-tooltips-bg");
    chart.config.options.plugins.tooltip.borderColor = (0, _utils.cssVar)("--bs-tooltips-border-color");
    chart.config.options.plugins.tooltip.titleColor = (0, _utils.cssVar)("--bs-body-color");
    chart.config.options.plugins.tooltip.bodyColor = (0, _utils.cssVar)("--bs-body-color");
    // Update chart
    chart.update();
};
const generateTimeSeriesData = (baseval, count, yrange)=>{
    let i = 0;
    const series = [];
    while(i < count){
        const x = baseval;
        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;
        series.push({
            x,
            y
        });
        baseval += 86400000;
        i++;
    }
    return series;
};
const getDatesBetweenDates = (startDate, endDate)=>{
    let dates = [];
    const date = new Date(startDate);
    while(date < endDate){
        dates = [
            ...dates,
            new Date(date)
        ];
        date.setDate(date.getDate() + 1);
    }
    return dates;
};

},{"../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"k1tFS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "storeSessions", ()=>storeSessions);
parcelHelpers.export(exports, "storeSessionsUpdate", ()=>storeSessionsUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-store-sessions");
let storeSessionsChart;
const storeSessions = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const LAST_MONTH_DATA = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 19, {
        min: 50,
        max: 30
    });
    const CURRENT_MONTH_DATA = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 19, {
        min: 70,
        max: 40
    });
    const CHART_DATA = {
        datasets: [
            {
                label: "Current Month",
                data: CURRENT_MONTH_DATA,
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(16, 185, 129, 0.15)", "rgba(16, 185, 129, 0)"),
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            },
            {
                label: "Last Month",
                data: LAST_MONTH_DATA,
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.3)", "rgba(254, 168, 76, 0)"),
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: "-5"
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    type: "time",
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 8
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 0,
                    max: 100,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 8,
                        padding: 8,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) storeSessionsChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const storeSessionsUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(storeSessionsChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9NdW4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topProducts", ()=>topProducts);
var _jpg = require("../../../img/products/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const topProducts = ()=>{
    const WRAPPER = document.getElementById("top-products");
    if (WRAPPER) {
        let list = "";
        const DATA = [
            {
                img: 1,
                name: "Hempthon Professional Makeup Setting Oil, 60ml",
                orders: 4532,
                sales: "$12,924.00",
                up: false,
                percentage: 9.43,
                category: "Skin Care"
            },
            {
                img: 2,
                name: "Fenton Shaker Bottle for Protein Mixes BPA-Free Leak Proof 750ml",
                orders: 4487,
                sales: "$11,324.67",
                up: true,
                percentage: 12.43,
                category: "Sports Nutrition"
            },
            {
                img: 3,
                name: "Bioskep Simple Hydrating Light Daily Face Moisturizer, 125ml",
                orders: 3982,
                sales: "$10,924.00",
                up: false,
                percentage: 32.38,
                category: "Men's Grooming"
            },
            {
                img: 4,
                name: "Fantasi Shaving Foam, DEEP Smooth Shave Antibacterial, 200ml",
                orders: 3241,
                sales: "$8,093.21",
                up: true,
                percentage: 8.23,
                category: "Men's Grooming"
            },
            {
                img: 5,
                name: "Davids Perfume Cool Water for women, 250ml",
                orders: 2985,
                sales: "$7,653.63",
                up: true,
                percentage: 24.54,
                category: "Perfumes"
            },
            {
                img: 6,
                name: "Turmeric Healing Night Beauty Balm for Dark Spots, 40gm",
                orders: 2543,
                sales: "$7,012.93",
                up: false,
                percentage: 2.43,
                category: "Skin Care"
            },
            {
                img: 7,
                name: "ChoicePerfect Boost 10% Azelaic Acid Booster, 1oz Tube",
                orders: 2134,
                sales: "$6,837.90",
                up: true,
                percentage: 4.56,
                category: "Hair Care"
            }
        ];
        DATA.forEach((item)=>{
            list += `<a href="" class="bg-hover d-flex align-items-start py-3 px-3 mx-n3 rounded">
                        <img alt="" class="w-12 rounded me-4" src="${(0, _jpgDefault.default)[item.img]}" />
                        <div class="flex-grow-1 pe-5 text-truncate">
                            <div class="text-body-emphasis mb-1 text-truncate">${item.name}</div>
                            <div class="fs-7 text-body-secondary ts-none">${item.orders} items sold</div>
                        </div>
                        <div class="fs-7 d-flex align-items-center justify-content-end ms-auto w-16 ts-none ${item.up ? "text-success" : "text-danger"}">
                            <i class="ph ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"} fs-4 me-1"></i>
                            ${item.percentage}%
                        </div>
                    </a>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/products/*.jpg":"dDnLY","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dDnLY":[function(require,module,exports,__globalThis) {
const _temp0 = require("abe4ab86c0aa11f4");
const _temp1 = require("9632a326864fc2b1");
const _temp2 = require("aff4801e7bb82e24");
const _temp3 = require("f94c1c5f31a67cdf");
const _temp4 = require("6e82843fde5c88d1");
const _temp5 = require("449be095a1a2edc");
const _temp6 = require("75d59cbaed59a09b");
const _temp7 = require("dc8d47f5ae3c8c70");
const _temp8 = require("bb64aae90c41d6d");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8
};

},{"abe4ab86c0aa11f4":"2oiJi","9632a326864fc2b1":"d3bLB","aff4801e7bb82e24":"7hPhP","f94c1c5f31a67cdf":"l07De","6e82843fde5c88d1":"9B3qX","449be095a1a2edc":"2AnTh","75d59cbaed59a09b":"jsJ86","dc8d47f5ae3c8c70":"GPeMb","bb64aae90c41d6d":"iQNDa"}],"2oiJi":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("1.3d23fe3c.jpg") + "?" + Date.now();

},{}],"d3bLB":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("2.eb0a2210.jpg") + "?" + Date.now();

},{}],"7hPhP":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("3.41f9cfd7.jpg") + "?" + Date.now();

},{}],"l07De":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("4.4d71b621.jpg") + "?" + Date.now();

},{}],"9B3qX":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("5.699ab732.jpg") + "?" + Date.now();

},{}],"2AnTh":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("6.bb089a04.jpg") + "?" + Date.now();

},{}],"jsJ86":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("7.91b49901.jpg") + "?" + Date.now();

},{}],"GPeMb":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("8.60c4ed16.jpg") + "?" + Date.now();

},{}],"iQNDa":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("9.54adfc08.jpg") + "?" + Date.now();

},{}],"8B4JB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crm", ()=>crm);
var _convertedLeads = require("./convertedLeads");
var _leadsByIndustry = require("./leadsByIndustry");
var _leadsDistribution = require("./leadsDistribution");
var _leadsGenerationRate = require("./leadsGenerationRate");
var _leadsSources = require("./leadsSources");
var _opportunities = require("./opportunities");
var _outboundCalls = require("./outboundCalls");
var _resolutionByChannel = require("./resolutionByChannel");
var _topRainmakers = require("./topRainmakers");
const crm = ()=>{
    (0, _leadsGenerationRate.leadsGenerationRate)();
    (0, _convertedLeads.convertedLeads)();
    (0, _leadsDistribution.leadsDistribution)();
    (0, _leadsByIndustry.leadsByIndustry)();
    (0, _leadsSources.leadsSources)();
    (0, _opportunities.opportunities)();
    (0, _topRainmakers.topRainmakers)();
    (0, _resolutionByChannel.resolutionByChannel)();
    (0, _outboundCalls.outboundCals)();
};

},{"./convertedLeads":"bEkql","./leadsByIndustry":"7LvUU","./leadsDistribution":"4ipL1","./leadsGenerationRate":"a8diU","./leadsSources":"04VtS","./opportunities":"2oBi5","./outboundCalls":"jpAue","./resolutionByChannel":"cPswT","./topRainmakers":"f7ywB","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bEkql":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertedLeads", ()=>convertedLeads);
parcelHelpers.export(exports, "convertedLeadsUpdate", ()=>convertedLeadsUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-converted-leads");
let convertedLeadsChart;
const convertedLeads = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "15",
            "16",
            "17",
            "18"
        ],
        datasets: [
            {
                label: "Receieved",
                data: [
                    109,
                    106,
                    105,
                    106,
                    108,
                    109,
                    106,
                    109,
                    107,
                    105,
                    105,
                    105,
                    105,
                    108,
                    105,
                    107,
                    106,
                    109,
                    107
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            },
            {
                label: "Converted",
                data: [
                    112,
                    113,
                    112,
                    111,
                    111,
                    113,
                    113,
                    110,
                    113,
                    112,
                    113,
                    113,
                    112,
                    114,
                    111,
                    113,
                    115,
                    115,
                    111
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: "-5",
                    bottom: "-5"
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 12
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 100,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) convertedLeadsChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const convertedLeadsUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(convertedLeadsChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7LvUU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leadsByIndustry", ()=>leadsByIndustry);
parcelHelpers.export(exports, "leadsByIndustryUpdate", ()=>leadsByIndustryUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _chartJs = require("chart.js");
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-leads-industry");
let leadsByIndustryChart;
const leadsByIndustry = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Chart data
    const CHART_DATA = {
        labels: [
            "Software and Technology",
            "Energy",
            "Project Development",
            "Consultant",
            "Others"
        ],
        datasets: [
            {
                data: [
                    23981,
                    16342,
                    9736,
                    7632,
                    4535
                ],
                backgroundColor: [
                    (0, _utils.COLORS).blue,
                    (0, _utils.COLORS).teal,
                    (0, _utils.COLORS).purple,
                    (0, _utils.COLORS).cyan,
                    (0, _utils.COLORS).orange
                ],
                borderWidth: 3,
                borderColor: (0, _utils.cssVar)("--bs-chart-pie-border-color"),
                hoverOffset: 1,
                hoverBorderWidth: 0,
                borderRadius: 5
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "doughnut",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            responsive: true,
            animation: false,
            cutout: 80,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) leadsByIndustryChart = new (0, _chartJs.Chart)(CHART_WRAPPER, CHART_CONFIG);
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    let list = "";
    const LIST_WRAPPER = document.getElementById("list-leads-industry");
    const DATA = [
        {
            source: "Software and Technology",
            percentage: 43,
            change: 52.6,
            className: "bg-primary",
            leads: 23981,
            up: true
        },
        {
            source: "Energy",
            percentage: 37,
            change: 31.3,
            className: "bg-teal",
            leads: 16342,
            up: true
        },
        {
            source: "Project Development",
            percentage: 32,
            change: 10.5,
            className: "bg-purple",
            leads: 9736,
            up: false
        },
        {
            source: "Consultant",
            percentage: 19,
            change: 17.2,
            className: "bg-info",
            leads: 7632,
            up: false
        },
        {
            source: "Miscellaneous",
            percentage: 12,
            change: 23.1,
            className: "bg-warning",
            leads: 4535,
            up: false
        }
    ];
    if (LIST_WRAPPER) DATA.forEach((item)=>{
        list += `<div class="d-flex align-items-start">
                        <i class="${item.className} w-2.5 h-2.5 mt-1.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1 text-body-emphasis">${item.source}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${item.up ? "text-success" : "text-danger"}">
								${item.change}%

								<i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
							</div>

							<div class="fs-5 text-body-emphasis text-end w-12">${item.percentage}%</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${item.percentage}" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${item.className}" style="width: ${item.percentage}%"></div>
							</div>
						</div>
                    </div>`;
        LIST_WRAPPER.innerHTML = list;
    });
};
const leadsByIndustryUpdate = ()=>{
    const updateBorderColors = ()=>{
        leadsByIndustryChart.data.datasets[0].borderColor = (0, _utils.cssVar)("--bs-chart-pie-border-color");
    };
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(leadsByIndustryChart, updateBorderColors());
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js":"fbE0O","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"4ipL1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leadsDistribution", ()=>leadsDistribution);
var _jsvectormap = require("jsvectormap");
var _jsvectormapDefault = parcelHelpers.interopDefault(_jsvectormap);
var _worldJs = require("jsvectormap/dist/maps/world.js");
var _jsVectorMap = require("../../vendors/jsvectormap/jsVectorMap");
var _svg = require("../../../img/flags/*.svg");
var _svgDefault = parcelHelpers.interopDefault(_svg);
const leadsDistribution = ()=>{
    //---------------------------------------------------------
    // Map
    //---------------------------------------------------------
    const MAP_WRAPPER = document.getElementById("map-leads-distribution");
    const c = [];
    if (MAP_WRAPPER) {
        // Resize map on load
        (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
        // Initiate map
        new (0, _jsvectormapDefault.default)({
            selector: "#map-leads-distribution",
            map: "world",
            draggable: false,
            zoomButtons: false,
            zoomOnScroll: false,
            regionStyle: {
                initial: {
                    fill: "INITIAL_FILL",
                    fillOpacity: 1,
                    stroke: "INITIAL_FILL",
                    strokeWidth: 1
                },
                hover: {
                    fillOpacity: 0.95
                }
            },
            visualizeData: {
                scale: [
                    "",
                    ""
                ],
                values: {
                    US: 500,
                    RU: 490,
                    BR: 450,
                    ZA: 400,
                    IN: 350,
                    AE: 300,
                    AU: 260,
                    SG: 250,
                    FR: 200,
                    ES: 190,
                    PL: 150,
                    SE: 120,
                    ID: 110,
                    JP: 90,
                    EG: 45
                }
            },
            onLoaded (map) {
                window.addEventListener("resize", ()=>{
                    // Set map size on window resize
                    (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
                    setTimeout(()=>{
                        map.updateSize();
                    });
                });
            }
        });
    }
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    const LIST_WRAPPER = document.getElementById("list-leads-distribution");
    if (LIST_WRAPPER) {
        let list = "";
        const DATA = [
            {
                img: "us",
                country: "United States of America",
                leads: 6732,
                up: true,
                percentage: 44,
                change: 4.58
            },
            {
                img: "japan",
                country: "Japan",
                leads: 4532,
                up: true,
                percentage: 32,
                change: 0.43
            },
            {
                img: "england",
                country: "United Kingdom",
                leads: 4487,
                up: false,
                percentage: 24,
                change: 5.43
            },
            {
                img: "china",
                country: "China",
                leads: 3982,
                up: true,
                percentage: 19,
                change: 21.54
            },
            {
                img: "germany",
                country: "Germany",
                leads: 3241,
                up: false,
                percentage: 16,
                change: 10.32
            },
            {
                img: "france",
                country: "France",
                leads: 2985,
                up: true,
                percentage: 9,
                change: 0.54
            }
        ];
        let last = DATA.length - 1;
        DATA.forEach((item, index)=>{
            list += `<div class="d-flex align-items-start">
                        <img class="w-6 me-4 rounded-circle" src="${(0, _svgDefault.default)[item.img]}" alt="${item.country}" />

                        <div class="d-flex align-items-center flex-grow-1 ${index !== last ? "border-bottom mb-2 pb-2" : ""}">
                            <div class="flex-grow-1">
                                <div class="text-body-emphasis">${item.country}</div>
                                <span class="text-body-secondary fs-7">${item.leads} Leads</span>
                            </div>

                            <div class="fs-7 d-flex align-items-center justify-content-end ms-auto ${item.up ? "text-success" : "text-danger"}">
                                <i class="ph ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"} fs-4 me-1"></i>
                                ${item.change}%
                            </div>

							<div class="fs-5 text-body-emphasis text-end w-12">${item.percentage}%</div>
                        </div> 
                    </div>`;
        });
        LIST_WRAPPER.innerHTML = list;
    }
};

},{"jsvectormap":"17NmK","jsvectormap/dist/maps/world.js":"Zvkp7","../../vendors/jsvectormap/jsVectorMap":"2cM0S","../../../img/flags/*.svg":"9jtBu","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"17NmK":[function(require,module,exports,__globalThis) {
!function(t, e) {
    module.exports = e();
}(this, function() {
    "use strict";
    var t = function(t) {
        return function(t) {
            return !!t && "object" == typeof t;
        }(t) && !function(t) {
            var i = Object.prototype.toString.call(t);
            return "[object RegExp]" === i || "[object Date]" === i || function(t) {
                return t instanceof Node;
            }(t) || function(t) {
                return t.$$typeof === e;
            }(t);
        }(t);
    };
    var e = "function" == typeof Symbol && Symbol.for ? Symbol.for("react.element") : 60103;
    function i(t, e) {
        var i;
        return !1 !== e.clone && e.isMergeableObject(t) ? o((i = t, Array.isArray(i) ? [] : {}), t, e) : t;
    }
    function s(t, e, s) {
        return t.concat(e).map(function(t) {
            return i(t, s);
        });
    }
    function a(t) {
        return Object.keys(t).concat(function(t) {
            return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(t).filter(function(e) {
                return t.propertyIsEnumerable(e);
            }) : [];
        }(t));
    }
    function n(t, e) {
        try {
            return e in t;
        } catch (t) {
            return !1;
        }
    }
    function r(t, e, s) {
        var r = {};
        return s.isMergeableObject(t) && a(t).forEach(function(e) {
            r[e] = i(t[e], s);
        }), a(e).forEach(function(a) {
            (function(t, e) {
                return n(t, e) && !(Object.hasOwnProperty.call(t, e) && Object.propertyIsEnumerable.call(t, e));
            })(t, a) || (n(t, a) && s.isMergeableObject(e[a]) ? r[a] = (function(t, e) {
                if (!e.customMerge) return o;
                var i = e.customMerge(t);
                return "function" == typeof i ? i : o;
            })(a, s)(t[a], e[a], s) : r[a] = i(e[a], s));
        }), r;
    }
    var o = function(e, a, n) {
        (n = n || {}).arrayMerge = n.arrayMerge || s, n.isMergeableObject = n.isMergeableObject || t, n.cloneUnlessOtherwiseSpecified = i;
        var o = Array.isArray(a);
        return o === Array.isArray(e) ? o ? n.arrayMerge(e, a, n) : r(e, a, n) : i(a, n);
    }, h = function(t) {
        return "object" == typeof t && void 0 !== t.nodeType ? t : "string" == typeof t ? document.querySelector(t) : null;
    }, l = function(t, e, i, s) {
        void 0 === s && (s = !1);
        var a = document.createElement(t);
        return i && (a[s ? "innerHTML" : "textContent"] = i), e && (a.className = e), a;
    }, c = function(t) {
        t.parentNode.removeChild(t);
    }, u = function(t, e, i) {
        return void 0 === i && (i = !1), i ? o(t, e) : Object.assign(t, e);
    }, p = function(t, e) {
        return t.toLowerCase() + ":to:" + e.toLowerCase();
    }, d = function(t, e) {
        Object.assign(t.prototype, e);
    }, f = {}, m = 1, g = {
        on: function(t, e, i, s) {
            void 0 === s && (s = {});
            var a = "jvm:" + e + "::" + m++;
            f[a] = {
                selector: t,
                handler: i
            }, i._uid = a, t.addEventListener(e, i, s);
        },
        delegate: function(t, e, i, s) {
            (e = e.split(" ")).forEach(function(e) {
                g.on(t, e, function(t) {
                    var e = t.target;
                    e.matches(i) && s.call(e, t);
                });
            });
        },
        off: function(t, e, i) {
            var s = e.split(":")[1];
            t.removeEventListener(s, i), delete f[i._uid];
        },
        flush: function() {
            Object.keys(f).forEach(function(t) {
                g.off(f[t].selector, t, f[t].handler);
            });
        },
        getEventRegistry: function() {
            return f;
        }
    };
    var v = {
        onLoaded: "map:loaded",
        onViewportChange: "viewport:changed",
        onRegionClick: "region:clicked",
        onMarkerClick: "marker:clicked",
        onRegionSelected: "region:selected",
        onMarkerSelected: "marker:selected",
        onRegionTooltipShow: "region.tooltip:show",
        onMarkerTooltipShow: "marker.tooltip:show",
        onDestroyed: "map:destroyed"
    }, _ = function(t, e, i) {
        var s = h(e), a = -1 === s.getAttribute("class").indexOf("jvm-region") ? "marker" : "region", n = "region" === a, r = n ? s.getAttribute("data-code") : s.getAttribute("data-index"), o = n ? v.onRegionSelected : v.onMarkerSelected;
        return i && (o = n ? v.onRegionTooltipShow : v.onMarkerTooltipShow), {
            type: a,
            code: r,
            event: o,
            element: n ? t.regions[r].element : t._markers[r].element,
            tooltipText: n ? t._mapData.paths[r].name || "" : t._markers[r].config.name || ""
        };
    };
    function y(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, s = Array(e); i < e; i++)s[i] = t[i];
        return s;
    }
    function b(t, e) {
        var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
        if (i) return (i = i.call(t)).next.bind(i);
        if (Array.isArray(t) || (i = function(t, e) {
            if (t) {
                if ("string" == typeof t) return y(t, e);
                var i = ({}).toString.call(t).slice(8, -1);
                return "Object" === i && t.constructor && (i = t.constructor.name), "Map" === i || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? y(t, e) : void 0;
            }
        }(t)) || e && t && "number" == typeof t.length) {
            i && (t = i);
            var s = 0;
            return function() {
                return s >= t.length ? {
                    done: !0
                } : {
                    done: !1,
                    value: t[s++]
                };
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function S() {
        return S = Object.assign ? Object.assign.bind() : function(t) {
            for(var e = 1; e < arguments.length; e++){
                var i = arguments[e];
                for(var s in i)({}).hasOwnProperty.call(i, s) && (t[s] = i[s]);
            }
            return t;
        }, S.apply(null, arguments);
    }
    function k(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, w(t, e);
    }
    function w(t, e) {
        return w = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
            return t.__proto__ = e, t;
        }, w(t, e);
    }
    var x = function() {
        function t() {}
        return t.prototype.dispose = function() {
            this._tooltip ? c(this._tooltip) : this.shape.remove();
            for(var t, e = b(Object.getOwnPropertyNames(this)); !(t = e()).done;)this[t.value] = null;
        }, t;
    }(), M = {
        getLabelText: function(t, e) {
            if (e) {
                if ("function" == typeof e.render) {
                    var i = [];
                    return this.config && this.config.marker && i.push(this.config.marker), i.push(t), e.render.apply(this, i);
                }
                return t;
            }
        },
        getLabelOffsets: function(t, e) {
            return "function" == typeof e.offsets ? e.offsets(t) : Array.isArray(e.offsets) ? e.offsets[t] : [
                0,
                0
            ];
        },
        setStyle: function(t, e) {
            this.shape.setStyle(t, e);
        },
        remove: function() {
            this.shape.remove(), this.label && this.label.remove();
        },
        hover: function(t) {
            this._setStatus("isHovered", t);
        },
        select: function(t) {
            this._setStatus("isSelected", t);
        },
        _setStatus: function(t, e) {
            this.shape[t] = e, this.shape.updateStyle(), this[t] = e, this.label && (this.label[t] = e, this.label.updateStyle());
        }
    }, j = function(t) {
        function e(e) {
            var i, s = e.map, a = e.code, n = e.path, r = e.style, o = e.label, h = e.labelStyle, l = e.labelsGroup;
            (i = t.call(this) || this)._map = s, i.shape = i._createRegion(n, a, r);
            var c = i.getLabelText(a, o);
            if (o && c) {
                var u = i.shape.getBBox(), p = i.getLabelOffsets(a, o);
                i.labelX = u.x + u.width / 2 + p[0], i.labelY = u.y + u.height / 2 + p[1], i.label = i._map.canvas.createText({
                    text: c,
                    textAnchor: "middle",
                    alignmentBaseline: "central",
                    dataCode: a,
                    x: i.labelX,
                    y: i.labelY
                }, h, l), i.label.addClass("jvm-region jvm-element");
            }
            return i;
        }
        k(e, t);
        var i = e.prototype;
        return i._createRegion = function(t, e, i) {
            return (t = this._map.canvas.createPath({
                d: t,
                dataCode: e
            }, i)).addClass("jvm-region jvm-element"), t;
        }, i.updateLabelPosition = function() {
            this.label && this.label.set({
                x: this.labelX * this._map.scale + this._map.transX * this._map.scale,
                y: this.labelY * this._map.scale + this._map.transY * this._map.scale
            });
        }, e;
    }(x);
    d(j, M);
    var C = function(t) {
        function e(e) {
            var i, s = e.index, a = e.map, n = e.style, r = e.x1, o = e.y1, h = e.x2, l = e.y2, c = e.group, u = e.config;
            return (i = t.call(this) || this).config = u, i.shape = a.canvas.createLine({
                x1: r,
                y1: o,
                x2: h,
                y2: l,
                dataIndex: s
            }, n, c), i.shape.addClass("jvm-line"), i;
        }
        return k(e, t), e.prototype.setStyle = function(t, e) {
            this.shape.setStyle(t, e);
        }, e;
    }(x);
    var L = function(t) {
        function e(e) {
            var i, s = e.index, a = e.style, n = e.label, r = e.cx, o = e.cy, h = e.map, l = e.group;
            return (i = t.call(this) || this)._map = h, i._isImage = !!a.initial.image, i.config = arguments[0], i.shape = h.canvas[i._isImage ? "createImage" : "createCircle"]({
                dataIndex: s,
                cx: r,
                cy: o
            }, a, l), i.shape.addClass("jvm-marker jvm-element"), i._isImage && i.updateLabelPosition(), n && i._createLabel(i.config), i;
        }
        k(e, t);
        var i = e.prototype;
        return i.updateLabelPosition = function() {
            this.label && this.label.set({
                x: this._labelX * this._map.scale + this._offsets[0] + this._map.transX * this._map.scale + 5 + (this._isImage ? (this.shape.width || 0) / 2 : this.shape.node.r.baseVal.value),
                y: this._labelY * this._map.scale + this._map.transY * this._map.scale + this._offsets[1]
            });
        }, i._createLabel = function(t) {
            var e = t.index, i = t.map, s = t.label, a = t.labelsGroup, n = t.cx, r = t.cy, o = t.marker, h = t.isRecentlyCreated, l = this.getLabelText(e, s);
            this._labelX = n / i.scale - i.transX, this._labelY = r / i.scale - i.transY, this._offsets = h && o.offsets ? o.offsets : this.getLabelOffsets(e, s), this.label = i.canvas.createText({
                text: l,
                dataIndex: e,
                x: this._labelX,
                y: this._labelY,
                dy: "0.6ex"
            }, i.params.markerLabelStyle, a), this.label.addClass("jvm-marker jvm-element"), h && this.updateLabelPosition();
        }, e;
    }(x);
    d(L, M);
    var A = function() {
        function t(t) {
            void 0 === t && (t = {}), this._options = t, this._map = this._options.map, this._series = this._options.series, this._body = l("div", "jvm-legend"), this._options.cssClass && this._body.setAttribute("class", this._options.cssClass), t.vertical ? this._map.legendVertical.appendChild(this._body) : this._map.legendHorizontal.appendChild(this._body), this.render();
        }
        return t.prototype.render = function() {
            var t, e = this._series.scale.getTicks(), i = l("div", "jvm-legend-inner");
            if (this._body.innderHTML = "", this._options.title) {
                var s = l("div", "jvm-legend-title", this._options.title);
                this._body.appendChild(s);
            }
            this._body.appendChild(i);
            for(var a = 0; a < e.length; a++){
                var n = l("div", "jvm-legend-tick"), r = l("div", "jvm-legend-tick-sample");
                switch(this._series.config.attribute){
                    case "fill":
                        t = e[a].value, /\.(jpg|gif|png)$/.test(t) ? r.style.background = "url(" + e[a].value + ")" : r.style.background = e[a].value;
                        break;
                    case "stroke":
                        r.style.background = e[a].value;
                        break;
                    case "image":
                        r.style.background = "url(" + ("object" == typeof e[a].value ? e[a].value.url : e[a].value) + ") no-repeat center center", r.style.backgroundSize = "cover";
                }
                n.appendChild(r);
                var o = e[a].label;
                this._options.labelRender && (o = this._options.labelRender(o));
                var h = l("div", "jvm-legend-tick-text", o);
                n.appendChild(h), i.appendChild(n);
            }
        }, t;
    }(), X = function() {
        function t(t) {
            this._scale = t;
        }
        var e = t.prototype;
        return e.getValue = function(t) {
            return this._scale[t];
        }, e.getTicks = function() {
            var t = [];
            for(var e in this._scale)t.push({
                label: e,
                value: this._scale[e]
            });
            return t;
        }, t;
    }(), Y = function() {
        function t(t, e, i) {
            void 0 === t && (t = {}), this._map = i, this._elements = e, this._values = t.values || {}, this.config = t, this.config.attribute = t.attribute || "fill", t.attributes && this.setAttributes(t.attributes), "object" == typeof t.scale && (this.scale = new X(t.scale)), this.config.legend && (this.legend = new A(u({
                map: this._map,
                series: this
            }, this.config.legend))), this.setValues(this._values);
        }
        var e = t.prototype;
        return e.setValues = function(t) {
            var e = {};
            for(var i in t)t[i] && (e[i] = this.scale.getValue(t[i]));
            this.setAttributes(e);
        }, e.setAttributes = function(t) {
            for(var e in t)this._elements[e] && this._elements[e].element.setStyle(this.config.attribute, t[e]);
        }, e.clear = function() {
            var t, e = {};
            for(t in this._values)this._elements[t] && (e[t] = this._elements[t].element.shape.style.initial[this.config.attribute]);
            this.setAttributes(e), this._values = {};
        }, t;
    }();
    var O = {
        mill: function(t, e, i) {
            return {
                x: this.radius * (e - i) * this.radDeg,
                y: -this.radius * Math.log(Math.tan((45 + .4 * t) * this.radDeg)) / .8
            };
        },
        merc: function(t, e, i) {
            return {
                x: this.radius * (e - i) * this.radDeg,
                y: -this.radius * Math.log(Math.tan(Math.PI / 4 + t * Math.PI / 360))
            };
        },
        aea: function(t, e, i) {
            var s = i * this.radDeg, a = 29.5 * this.radDeg, n = 45.5 * this.radDeg, r = t * this.radDeg, o = e * this.radDeg, h = (Math.sin(a) + Math.sin(n)) / 2, l = Math.cos(a) * Math.cos(a) + 2 * h * Math.sin(a), c = h * (o - s), u = Math.sqrt(l - 2 * h * Math.sin(r)) / h, p = Math.sqrt(l - 2 * h * Math.sin(0)) / h;
            return {
                x: u * Math.sin(c) * this.radius,
                y: -(p - u * Math.cos(c)) * this.radius
            };
        },
        lcc: function(t, e, i) {
            var s = i * this.radDeg, a = e * this.radDeg, n = 33 * this.radDeg, r = 45 * this.radDeg, o = t * this.radDeg, h = Math.log(Math.cos(n) * (1 / Math.cos(r))) / Math.log(Math.tan(Math.PI / 4 + r / 2) * (1 / Math.tan(Math.PI / 4 + n / 2))), l = Math.cos(n) * Math.pow(Math.tan(Math.PI / 4 + n / 2), h) / h, c = l * Math.pow(1 / Math.tan(Math.PI / 4 + o / 2), h), u = l * Math.pow(1 / Math.tan(Math.PI / 4 + 0), h);
            return {
                x: c * Math.sin(h * (a - s)) * this.radius,
                y: -(u - c * Math.cos(h * (a - s))) * this.radius
            };
        }
    };
    O.degRad = 180 / Math.PI, O.radDeg = Math.PI / 180, O.radius = 6381372;
    var T = {
        _setupContainerEvents: function() {
            var t, e, i = this, s = this, a = !1;
            this.params.draggable && (g.on(this.container, "mousemove", function(i) {
                if (!a) return !1;
                s.transX -= (t - i.pageX) / s.scale, s.transY -= (e - i.pageY) / s.scale, s._applyTransform(), t = i.pageX, e = i.pageY;
            }), g.on(this.container, "mousedown", function(i) {
                return a = !0, t = i.pageX, e = i.pageY, !1;
            }), g.on(document.body, "mouseup", function() {
                a = !1;
            })), this.params.zoomOnScroll && g.on(this.container, "wheel", function(t) {
                var e = 75 * ((t.deltaY || -t.wheelDelta || t.detail) >> 10 || 1), a = i.container.getBoundingClientRect(), n = t.pageX - a.left - window.pageXOffset, r = t.pageY - a.top - window.pageYOffset, o = Math.pow(1 + s.params.zoomOnScrollSpeed / 1e3, -1.5 * e);
                s.tooltip && s._tooltip.hide(), s._setScale(s.scale * o, n, r), t.preventDefault();
            });
        },
        _setupElementEvents: function() {
            var t, e, i, s = this, a = this.container;
            g.on(a, "mousemove", function(s) {
                Math.abs(t - s.pageX) + Math.abs(e - s.pageY) > 2 && (i = !0);
            }), g.delegate(a, "mousedown", ".jvm-element", function(s) {
                t = s.pageX, e = s.pageY, i = !1;
            }), g.delegate(a, "mouseover mouseout", ".jvm-element", function(t) {
                var e = _(s, this, !0), i = s.params.showTooltip;
                "mouseover" === t.type ? (e.element.hover(!0), i && (s._tooltip.text(e.tooltipText), s._tooltip.show(), s._emit(e.event, [
                    t,
                    s._tooltip,
                    e.code
                ]))) : (e.element.hover(!1), i && s._tooltip.hide());
            }), g.delegate(a, "mouseup", ".jvm-element", function(t) {
                var e = _(s, this);
                if (!i && ("region" === e.type && s.params.regionsSelectable || "marker" === e.type && s.params.markersSelectable)) {
                    var a = e.element;
                    s.params[e.type + "sSelectableOne"] && s._clearSelected(e.type + "s"), e.element.isSelected ? a.select(!1) : a.select(!0), s._emit(e.event, [
                        e.code,
                        a.isSelected,
                        s._getSelected(e.type + "s")
                    ]);
                }
            }), g.delegate(a, "click", ".jvm-element", function(t) {
                var e = _(s, this), i = e.type, a = e.code;
                s._emit("region" === i ? v.onRegionClick : v.onMarkerClick, [
                    t,
                    a
                ]);
            });
        },
        _setupZoomButtons: function() {
            var t = this, e = l("div", "jvm-zoom-btn jvm-zoomin", "&#43;", !0), i = l("div", "jvm-zoom-btn jvm-zoomout", "&#x2212", !0);
            this.container.appendChild(e), this.container.appendChild(i);
            var s = function(e) {
                return void 0 === e && (e = !0), function() {
                    return t._setScale(e ? t.scale * t.params.zoomStep : t.scale / t.params.zoomStep, t._width / 2, t._height / 2, !1, t.params.zoomAnimate);
                };
            };
            g.on(e, "click", s()), g.on(i, "click", s(!1));
        },
        _setupContainerTouchEvents: function() {
            var t, e, i, s, a, n, r, o = this, h = function(h) {
                var l, c, u, p, d = h.touches;
                if ("touchstart" == h.type && (r = 0), 1 == d.length) 1 == r && (u = o.transX, p = o.transY, o.transX -= (i - d[0].pageX) / o.scale, o.transY -= (s - d[0].pageY) / o.scale, o._tooltip.hide(), o._applyTransform(), u == o.transX && p == o.transY || h.preventDefault()), i = d[0].pageX, s = d[0].pageY;
                else if (2 == d.length) {
                    if (2 == r) c = Math.sqrt(Math.pow(d[0].pageX - d[1].pageX, 2) + Math.pow(d[0].pageY - d[1].pageY, 2)) / e, o._setScale(t * c, a, n), o._tooltip.hide(), h.preventDefault();
                    else {
                        var f = o.container.getBoundingClientRect();
                        l = {
                            top: f.top + window.scrollY,
                            left: f.left + window.scrollX
                        }, a = d[0].pageX > d[1].pageX ? d[1].pageX + (d[0].pageX - d[1].pageX) / 2 : d[0].pageX + (d[1].pageX - d[0].pageX) / 2, n = d[0].pageY > d[1].pageY ? d[1].pageY + (d[0].pageY - d[1].pageY) / 2 : d[0].pageY + (d[1].pageY - d[0].pageY) / 2, a -= l.left, n -= l.top, t = o.scale, e = Math.sqrt(Math.pow(d[0].pageX - d[1].pageX, 2) + Math.pow(d[0].pageY - d[1].pageY, 2));
                    }
                }
                r = d.length;
            };
            g.on(o.container, "touchstart", h), g.on(o.container, "touchmove", h);
        },
        _createRegions: function() {
            for(var t in this._regionLabelsGroup = this._regionLabelsGroup || this.canvas.createGroup("jvm-regions-labels-group"), this._mapData.paths){
                var e = new j({
                    map: this,
                    code: t,
                    path: this._mapData.paths[t].path,
                    style: u({}, this.params.regionStyle),
                    labelStyle: this.params.regionLabelStyle,
                    labelsGroup: this._regionLabelsGroup,
                    label: this.params.labels && this.params.labels.regions
                });
                this.regions[t] = {
                    config: this._mapData.paths[t],
                    element: e
                };
            }
        },
        _createLines: function(t, e, i) {
            void 0 === i && (i = !1);
            var s = !1, a = !1;
            for(var n in this.linesGroup = this.linesGroup || this.canvas.createGroup("jvm-lines-group"), t){
                var r = t[n];
                for(var o in e){
                    var h = i ? e[o].config : e[o];
                    h.name === r.from && (s = this.getMarkerPosition(h)), h.name === r.to && (a = this.getMarkerPosition(h));
                }
                !1 !== s && !1 !== a && (this._lines[p(r.from, r.to)] = new C({
                    index: n,
                    map: this,
                    style: u({
                        initial: this.params.lineStyle
                    }, {
                        initial: r.style || {}
                    }, !0),
                    x1: s.x,
                    y1: s.y,
                    x2: a.x,
                    y2: a.y,
                    group: this.linesGroup,
                    config: r
                }));
            }
        },
        _createMarkers: function(t, e) {
            var i = this;
            void 0 === t && (t = {}), void 0 === e && (e = !1), this._markersGroup = this._markersGroup || this.canvas.createGroup("jvm-markers-group"), this._markerLabelsGroup = this._markerLabelsGroup || this.canvas.createGroup("jvm-markers-labels-group");
            var s = function() {
                var s = t[a], n = i.getMarkerPosition(s), r = s.coords.join(":");
                if (!n) return 0;
                if (e) {
                    if (Object.keys(i._markers).filter(function(t) {
                        return i._markers[t]._uid === r;
                    }).length) return 0;
                    a = Object.keys(i._markers).length;
                }
                var o = new L({
                    index: a,
                    map: i,
                    style: u(i.params.markerStyle, S({}, s.style || {}), !0),
                    label: i.params.labels && i.params.labels.markers,
                    labelsGroup: i._markerLabelsGroup,
                    cx: n.x,
                    cy: n.y,
                    group: i._markersGroup,
                    marker: s,
                    isRecentlyCreated: e
                });
                i._markers[a] && i.removeMarkers([
                    a
                ]), i._markers[a] = {
                    _uid: r,
                    config: s,
                    element: o
                };
            };
            for(var a in t)s();
        },
        _createSeries: function() {
            for(var t in this.series = {
                markers: [],
                regions: []
            }, this.params.series)for(var e = 0; e < this.params.series[t].length; e++)this.series[t][e] = new Y(this.params.series[t][e], "markers" === t ? this._markers : this.regions, this);
        },
        _applyTransform: function() {
            var t, e, i, s;
            this._defaultWidth * this.scale <= this._width ? (t = (this._width - this._defaultWidth * this.scale) / (2 * this.scale), i = (this._width - this._defaultWidth * this.scale) / (2 * this.scale)) : (t = 0, i = (this._width - this._defaultWidth * this.scale) / this.scale), this._defaultHeight * this.scale <= this._height ? (e = (this._height - this._defaultHeight * this.scale) / (2 * this.scale), s = (this._height - this._defaultHeight * this.scale) / (2 * this.scale)) : (e = 0, s = (this._height - this._defaultHeight * this.scale) / this.scale), this.transY > e ? this.transY = e : this.transY < s && (this.transY = s), this.transX > t ? this.transX = t : this.transX < i && (this.transX = i), this.canvas.applyTransformParams(this.scale, this.transX, this.transY), this._markers && this._repositionMarkers(), this._lines && this._repositionLines(), this._repositionLabels();
        },
        _resize: function() {
            var t = this._baseScale;
            this._width / this._height > this._defaultWidth / this._defaultHeight ? (this._baseScale = this._height / this._defaultHeight, this._baseTransX = Math.abs(this._width - this._defaultWidth * this._baseScale) / (2 * this._baseScale)) : (this._baseScale = this._width / this._defaultWidth, this._baseTransY = Math.abs(this._height - this._defaultHeight * this._baseScale) / (2 * this._baseScale)), this.scale *= this._baseScale / t, this.transX *= this._baseScale / t, this.transY *= this._baseScale / t;
        },
        _setScale: function(t, e, i, s, a) {
            var n, r, o, h, l, c, u, p, d, f, m = this, g = 0, _ = Math.abs(Math.round(60 * (t - this.scale) / Math.max(t, this.scale)));
            t > this.params.zoomMax * this._baseScale ? t = this.params.zoomMax * this._baseScale : t < this.params.zoomMin * this._baseScale && (t = this.params.zoomMin * this._baseScale), void 0 !== e && void 0 !== i && (n = t / this.scale, s ? (d = e + this._defaultWidth * (this._width / (this._defaultWidth * t)) / 2, f = i + this._defaultHeight * (this._height / (this._defaultHeight * t)) / 2) : (d = this.transX - (n - 1) / t * e, f = this.transY - (n - 1) / t * i)), a && _ > 0 ? (o = this.scale, h = (t - o) / _, l = this.transX * this.scale, u = this.transY * this.scale, c = (d * t - l) / _, p = (f * t - u) / _, r = setInterval(function() {
                g += 1, m.scale = o + h * g, m.transX = (l + c * g) / m.scale, m.transY = (u + p * g) / m.scale, m._applyTransform(), g == _ && (clearInterval(r), m._emit(v.onViewportChange, [
                    m.scale,
                    m.transX,
                    m.transY
                ]));
            }, 10)) : (this.transX = d, this.transY = f, this.scale = t, this._applyTransform(), this._emit(v.onViewportChange, [
                this.scale,
                this.transX,
                this.transY
            ]));
        },
        setFocus: function(t) {
            var e = this;
            void 0 === t && (t = {});
            var i, s = [];
            if (t.region ? s.push(t.region) : t.regions && (s = t.regions), s.length) return s.forEach(function(t) {
                if (e.regions[t]) {
                    var s = e.regions[t].element.shape.getBBox();
                    s && (i = void 0 === i ? s : {
                        x: Math.min(i.x, s.x),
                        y: Math.min(i.y, s.y),
                        width: Math.max(i.x + i.width, s.x + s.width) - Math.min(i.x, s.x),
                        height: Math.max(i.y + i.height, s.y + s.height) - Math.min(i.y, s.y)
                    });
                }
            }), this._setScale(Math.min(this._width / i.width, this._height / i.height), -(i.x + i.width / 2), -(i.y + i.height / 2), !0, t.animate);
            if (t.coords) {
                var a = this.coordsToPoint(t.coords[0], t.coords[1]), n = this.transX - a.x / this.scale, r = this.transY - a.y / this.scale;
                return this._setScale(t.scale * this._baseScale, n, r, !0, t.animate);
            }
        },
        updateSize: function() {
            this._width = this.container.offsetWidth, this._height = this.container.offsetHeight, this._resize(), this.canvas.setSize(this._width, this._height), this._applyTransform();
        },
        coordsToPoint: function(t, e) {
            var i = V.maps[this.params.map].projection, s = O[i.type](t, e, i.centralMeridian), a = s.x, n = s.y, r = this.getInsetForPoint(a, n);
            if (!r) return !1;
            var o = r.bbox;
            return a = (a - o[0].x) / (o[1].x - o[0].x) * r.width * this.scale, n = (n - o[0].y) / (o[1].y - o[0].y) * r.height * this.scale, {
                x: a + this.transX * this.scale + r.left * this.scale,
                y: n + this.transY * this.scale + r.top * this.scale
            };
        },
        getInsetForPoint: function(t, e) {
            for(var i = V.maps[this.params.map].insets, s = 0; s < i.length; s++){
                var a = i[s].bbox, n = a[0], r = a[1];
                if (t > n.x && t < r.x && e > n.y && e < r.y) return i[s];
            }
        },
        getMarkerPosition: function(t) {
            var e = t.coords;
            return V.maps[this.params.map].projection ? this.coordsToPoint.apply(this, e) : {
                x: e[0] * this.scale + this.transX * this.scale,
                y: e[1] * this.scale + this.transY * this.scale
            };
        },
        _repositionLines: function() {
            var t = !1, e = !1;
            for(var i in this._lines){
                for(var s in this._markers){
                    var a = this._markers[s];
                    a.config.name === this._lines[i].config.from && (t = this.getMarkerPosition(a.config)), a.config.name === this._lines[i].config.to && (e = this.getMarkerPosition(a.config));
                }
                !1 !== t && !1 !== e && this._lines[i].setStyle({
                    x1: t.x,
                    y1: t.y,
                    x2: e.x,
                    y2: e.y
                });
            }
        },
        _repositionMarkers: function() {
            for(var t in this._markers){
                var e = this.getMarkerPosition(this._markers[t].config);
                !1 !== e && this._markers[t].element.setStyle({
                    cx: e.x,
                    cy: e.y
                });
            }
        },
        _repositionLabels: function() {
            var t = this.params.labels;
            if (t) {
                if (t.regions) for(var e in this.regions)this.regions[e].element.updateLabelPosition();
                if (t.markers) for(var i in this._markers)this._markers[i].element.updateLabelPosition();
            }
        }
    }, E = function() {
        function t(t, e) {
            this.node = this._createElement(t), e && this.set(e);
        }
        var e = t.prototype;
        return e._createElement = function(t) {
            return document.createElementNS("http://www.w3.org/2000/svg", t);
        }, e.addClass = function(t) {
            this.node.setAttribute("class", t);
        }, e.getBBox = function() {
            return this.node.getBBox();
        }, e.set = function(t, e) {
            if ("object" == typeof t) for(var i in t)this.applyAttr(i, t[i]);
            else this.applyAttr(t, e);
        }, e.get = function(t) {
            return this.style.initial[t];
        }, e.applyAttr = function(t, e) {
            this.node.setAttribute(t.replace(/[\w]([A-Z])/g, function(t) {
                return t[0] + "-" + t[1];
            }).toLowerCase(), e);
        }, e.remove = function() {
            c(this.node);
        }, t;
    }(), z = function(t) {
        function e(e, i, s) {
            var a;
            return void 0 === s && (s = {}), (a = t.call(this, e, i) || this).isHovered = !1, a.isSelected = !1, a.style = s, a.style.current = {}, a.updateStyle(), a;
        }
        k(e, t);
        var i = e.prototype;
        return i.setStyle = function(t, e) {
            var i;
            "object" == typeof t ? u(this.style.current, t) : u(this.style.current, ((i = {})[t] = e, i));
            this.updateStyle();
        }, i.updateStyle = function() {
            var t = {};
            u(t, this.style.initial), u(t, this.style.current), this.isHovered && u(t, this.style.hover), this.isSelected && (u(t, this.style.selected), this.isHovered && u(t, this.style.selectedHover)), this.set(t);
        }, e;
    }(E), P = function(t) {
        function e(e, i) {
            return t.call(this, "text", e, i) || this;
        }
        return k(e, t), e.prototype.applyAttr = function(e, i) {
            "text" === e ? this.node.textContent = i : t.prototype.applyAttr.call(this, e, i);
        }, e;
    }(z), R = function(t) {
        function e(e, i) {
            return t.call(this, "image", e, i) || this;
        }
        return k(e, t), e.prototype.applyAttr = function(e, i) {
            var s;
            "image" === e ? ("object" == typeof i ? (s = i.url, this.offset = i.offset || [
                0,
                0
            ]) : (s = i, this.offset = [
                0,
                0
            ]), this.node.setAttributeNS("http://www.w3.org/1999/xlink", "href", s), this.width = 23, this.height = 23, this.applyAttr("width", this.width), this.applyAttr("height", this.height), this.applyAttr("x", this.cx - this.width / 2 + this.offset[0]), this.applyAttr("y", this.cy - this.height / 2 + this.offset[1])) : "cx" == e ? (this.cx = i, this.width && this.applyAttr("x", i - this.width / 2 + this.offset[0])) : "cy" == e ? (this.cy = i, this.height && this.applyAttr("y", i - this.height / 2 + this.offset[1])) : t.prototype.applyAttr.apply(this, arguments);
        }, e;
    }(z), D = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, "svg") || this)._container = e, i._defsElement = new E("defs"), i._rootElement = new E("g", {
                id: "jvm-regions-group"
            }), i.node.appendChild(i._defsElement.node), i.node.appendChild(i._rootElement.node), i._container.appendChild(i.node), i;
        }
        k(e, t);
        var i = e.prototype;
        return i.setSize = function(t, e) {
            this.node.setAttribute("width", t), this.node.setAttribute("height", e);
        }, i.applyTransformParams = function(t, e, i) {
            this._rootElement.node.setAttribute("transform", "scale(" + t + ") translate(" + e + ", " + i + ")");
        }, i.createPath = function(t, e) {
            var i = new z("path", t, e);
            return i.node.setAttribute("fill-rule", "evenodd"), this._add(i);
        }, i.createCircle = function(t, e, i) {
            var s = new z("circle", t, e);
            return this._add(s, i);
        }, i.createLine = function(t, e, i) {
            var s = new z("line", t, e);
            return this._add(s, i);
        }, i.createText = function(t, e, i) {
            var s = new P(t, e);
            return this._add(s, i);
        }, i.createImage = function(t, e, i) {
            var s = new R(t, e);
            return this._add(s, i);
        }, i.createGroup = function(t) {
            var e = new E("g");
            return this.node.appendChild(e.node), t && (e.node.id = t), e.canvas = this, e;
        }, i._add = function(t, e) {
            return (e = e || this._rootElement).node.appendChild(t.node), t;
        }, e;
    }(E), I = function(t) {
        function e(e) {
            var i;
            i = t.call(this) || this;
            var s = l("div", "jvm-tooltip");
            return i._map = e, i._tooltip = document.body.appendChild(s), i._bindEventListeners(), i || function(t) {
                if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t;
            }(i);
        }
        k(e, t);
        var i = e.prototype;
        return i._bindEventListeners = function() {
            var t = this;
            g.on(this._map.container, "mousemove", function(e) {
                if (t._tooltip.classList.contains("active")) {
                    var i, s, a = (i = t._map.container, s = "#jvm-regions-group", Element.prototype.querySelector.call(i, s)).getBoundingClientRect(), n = t._tooltip.getBoundingClientRect(), r = n.height, o = n.width, h = e.clientY <= a.top + r + 5, l = e.pageY - r - 5, c = e.pageX - o - 5;
                    h && (l += r + 5, c -= 10), e.clientX < a.left + o + 5 && (c = e.pageX + 5 + 2, h && (c += 10)), t.css({
                        top: l + "px",
                        left: c + "px"
                    });
                }
            });
        }, i.getElement = function() {
            return this._tooltip;
        }, i.show = function() {
            this._tooltip.classList.add("active");
        }, i.hide = function() {
            this._tooltip.classList.remove("active");
        }, i.text = function(t, e) {
            void 0 === e && (e = !1);
            var i = e ? "innerHTML" : "textContent";
            if (!t) return this._tooltip[i];
            this._tooltip[i] = t;
        }, i.css = function(t) {
            for(var e in t)this._tooltip.style[e] = t[e];
            return this;
        }, e;
    }(x), H = function() {
        function t(t, e) {
            var i = t.scale, s = t.values;
            this._scale = i, this._values = s, this._fromColor = this.hexToRgb(i[0]), this._toColor = this.hexToRgb(i[1]), this._map = e, this.setMinMaxValues(s), this.visualize();
        }
        var e = t.prototype;
        return e.setMinMaxValues = function(t) {
            for(var e in this.min = Number.MAX_VALUE, this.max = 0, t)(e = parseFloat(t[e])) > this.max && (this.max = e), e < this.min && (this.min = e);
        }, e.visualize = function() {
            var t, e = {};
            for(var i in this._values)t = parseFloat(this._values[i]), isNaN(t) || (e[i] = this.getValue(t));
            this.setAttributes(e);
        }, e.setAttributes = function(t) {
            for(var e in t)this._map.regions[e] && this._map.regions[e].element.setStyle("fill", t[e]);
        }, e.getValue = function(t) {
            if (this.min === this.max) return "#" + this._toColor.join("");
            for(var e, i = "#", s = 0; s < 3; s++)i += (1 === (e = Math.round(this._fromColor[s] + (this._toColor[s] - this._fromColor[s]) * ((t - this.min) / (this.max - this.min))).toString(16)).length ? "0" : "") + e;
            return i;
        }, e.hexToRgb = function(t) {
            var e = 0, i = 0, s = 0;
            return 4 == t.length ? (e = "0x" + t[1] + t[1], i = "0x" + t[2] + t[2], s = "0x" + t[3] + t[3]) : 7 == t.length && (e = "0x" + t[1] + t[2], i = "0x" + t[3] + t[4], s = "0x" + t[5] + t[6]), [
                parseInt(e),
                parseInt(i),
                parseInt(s)
            ];
        }, t;
    }(), V = function() {
        function t(e) {
            var i = this;
            if (void 0 === e && (e = {}), this.params = u(t.defaults, e, !0), !t.maps[this.params.map]) throw new Error("Attempt to use map which was not loaded: " + e.map);
            this.regions = {}, this.scale = 1, this.transX = 0, this.transY = 0, this._mapData = t.maps[this.params.map], this._markers = {}, this._lines = {}, this._defaultWidth = this._mapData.width, this._defaultHeight = this._mapData.height, this._height = 0, this._width = 0, this._baseScale = 1, this._baseTransX = 0, this._baseTransY = 0, "loading" !== document.readyState ? this._init() : window.addEventListener("DOMContentLoaded", function() {
                return i._init();
            });
        }
        var e = t.prototype;
        return e._init = function() {
            var t = this.params;
            this.container = h(t.selector), this.container.classList.add("jvm-container"), this.canvas = new D(this.container), this.setBackgroundColor(t.backgroundColor), this._createRegions(), this.updateSize(), this._createLines(t.lines || {}, t.markers || {}), this._createMarkers(t.markers), this._repositionLabels(), this._setupContainerEvents(), this._setupElementEvents(), t.zoomButtons && this._setupZoomButtons(), t.showTooltip && (this._tooltip = new I(this)), t.selectedRegions && this._setSelected("regions", t.selectedRegions), t.selectedMarkers && this._setSelected("_markers", t.selectedMarkers), t.focusOn && this.setFocus(t.focusOn), t.visualizeData && (this.dataVisualization = new H(t.visualizeData, this)), t.bindTouchEvents && ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch) && this._setupContainerTouchEvents(), t.series && (this.container.appendChild(this.legendHorizontal = l("div", "jvm-series-container jvm-series-h")), this.container.appendChild(this.legendVertical = l("div", "jvm-series-container jvm-series-v")), this._createSeries()), this._emit(v.onLoaded, [
                this
            ]);
        }, e.setBackgroundColor = function(t) {
            this.container.style.backgroundColor = t;
        }, e.getSelectedRegions = function() {
            return this._getSelected("regions");
        }, e.clearSelectedRegions = function(t) {
            var e = this;
            void 0 === t && (t = void 0), (t = this._normalizeRegions(t) || this._getSelected("regions")).forEach(function(t) {
                e.regions[t].element.select(!1);
            });
        }, e.setSelectedRegions = function(t) {
            this.clearSelectedRegions(), this._setSelected("regions", this._normalizeRegions(t));
        }, e.getSelectedMarkers = function() {
            return this._getSelected("_markers");
        }, e.clearSelectedMarkers = function() {
            this._clearSelected("_markers");
        }, e.addMarkers = function(t) {
            t = Array.isArray(t) ? t : [
                t
            ], this._createMarkers(t, !0);
        }, e.removeMarkers = function(t) {
            var e = this;
            t || (t = Object.keys(this._markers)), t.forEach(function(t) {
                e._markers[t].element.remove(), delete e._markers[t];
            });
        }, e.addLine = function(t, e, i) {
            void 0 === i && (i = {}), console.warn("`addLine` method is deprecated, please use `addLines` instead."), this._createLines([
                {
                    from: t,
                    to: e,
                    style: i
                }
            ], this._markers, !0);
        }, e.addLines = function(t) {
            var e = this._getLinesAsUids();
            Array.isArray(t) || (t = [
                t
            ]), this._createLines(t.filter(function(t) {
                return !(e.indexOf(p(t.from, t.to)) > -1);
            }), this._markers, !0);
        }, e.removeLines = function(t) {
            var e = this;
            (t = Array.isArray(t) ? t.map(function(t) {
                return p(t.from, t.to);
            }) : this._getLinesAsUids()).forEach(function(t) {
                e._lines[t].dispose(), delete e._lines[t];
            });
        }, e.removeLine = function(t, e) {
            console.warn("`removeLine` method is deprecated, please use `removeLines` instead.");
            var i = p(t, e);
            this._lines.hasOwnProperty(i) && (this._lines[i].element.remove(), delete this._lines[i]);
        }, e.reset = function() {
            for(var t in this.series)for(var e = 0; e < this.series[t].length; e++)this.series[t][e].clear();
            this.legendHorizontal && (c(this.legendHorizontal), this.legendHorizontal = null), this.legendVertical && (c(this.legendVertical), this.legendVertical = null), this.scale = this._baseScale, this.transX = this._baseTransX, this.transY = this._baseTransY, this._applyTransform(), this.clearSelectedMarkers(), this.clearSelectedRegions(), this.removeMarkers();
        }, e.destroy = function(t) {
            var e = this;
            void 0 === t && (t = !0), g.flush(), this._tooltip.dispose(), this._emit(v.onDestroyed), t && Object.keys(this).forEach(function(t) {
                try {
                    delete e[t];
                } catch (t) {}
            });
        }, e.extend = function(e, i) {
            if ("function" == typeof this[e]) throw new Error("The method [" + e + "] does already exist, please use another name.");
            t.prototype[e] = i;
        }, e._emit = function(t, e) {
            for(var i in v)v[i] === t && "function" == typeof this.params[i] && this.params[i].apply(this, e);
        }, e._getSelected = function(t) {
            var e = [];
            for(var i in this[t])this[t][i].element.isSelected && e.push(i);
            return e;
        }, e._setSelected = function(t, e) {
            var i = this;
            e.forEach(function(e) {
                i[t][e] && i[t][e].element.select(!0);
            });
        }, e._clearSelected = function(t) {
            var e = this;
            this._getSelected(t).forEach(function(i) {
                e[t][i].element.select(!1);
            });
        }, e._getLinesAsUids = function() {
            return Object.keys(this._lines);
        }, e._normalizeRegions = function(t) {
            return "string" == typeof t ? [
                t
            ] : t;
        }, t;
    }();
    V.maps = {}, V.defaults = {
        map: "world",
        backgroundColor: "transparent",
        draggable: !0,
        zoomButtons: !0,
        zoomOnScroll: !0,
        zoomOnScrollSpeed: 3,
        zoomMax: 12,
        zoomMin: 1,
        zoomAnimate: !0,
        showTooltip: !0,
        zoomStep: 1.5,
        bindTouchEvents: !0,
        lineStyle: {
            stroke: "#808080",
            strokeWidth: 1,
            strokeLinecap: "round"
        },
        markersSelectable: !1,
        markersSelectableOne: !1,
        markerStyle: {
            initial: {
                r: 7,
                fill: "#374151",
                fillOpacity: 1,
                stroke: "#FFF",
                strokeWidth: 5,
                strokeOpacity: .5
            },
            hover: {
                fill: "#3cc0ff",
                cursor: "pointer"
            },
            selected: {
                fill: "blue"
            },
            selectedHover: {}
        },
        markerLabelStyle: {
            initial: {
                fontFamily: "Verdana",
                fontSize: 12,
                fontWeight: 500,
                cursor: "default",
                fill: "#374151"
            },
            hover: {
                cursor: "pointer"
            },
            selected: {},
            selectedHover: {}
        },
        regionsSelectable: !1,
        regionsSelectableOne: !1,
        regionStyle: {
            initial: {
                fill: "#dee2e8",
                fillOpacity: 1,
                stroke: "none",
                strokeWidth: 0
            },
            hover: {
                fillOpacity: .7,
                cursor: "pointer"
            },
            selected: {
                fill: "#9ca3af"
            },
            selectedHover: {}
        },
        regionLabelStyle: {
            initial: {
                fontFamily: "Verdana",
                fontSize: "12",
                fontWeight: "bold",
                cursor: "default",
                fill: "#35373e"
            },
            hover: {
                cursor: "pointer"
            }
        }
    }, Object.assign(V.prototype, T);
    var G = function() {
        function t(t) {
            if (void 0 === t && (t = {}), !t.selector) throw new Error("Selector is not given.");
            return new V(t);
        }
        return t.addMap = function(t, e) {
            V.maps[t] = e;
        }, t;
    }();
    return window.jsVectorMap = G;
});

},{}],"Zvkp7":[function(require,module,exports,__globalThis) {
"use strict";
jsVectorMap.addMap("world", {
    insets: [
        {
            width: 900,
            top: 0,
            left: 0,
            height: 440.70631074413296,
            bbox: [
                {
                    y: -12671671.123330014,
                    x: -20004297.151525836
                },
                {
                    y: 6930392.025135122,
                    x: 20026572.39474939
                }
            ]
        }
    ],
    paths: {
        BD: {
            path: "M651.84,230.21l-0.6,-2.0l-1.36,-1.71l-2.31,-0.11l-0.41,0.48l0.2,0.94l-0.53,0.99l-0.72,-0.36l-0.68,0.35l-1.2,-0.36l-0.37,-2.0l-0.81,-1.86l0.39,-1.46l-0.22,-0.47l-1.14,-0.53l0.29,-0.5l1.48,-0.94l0.03,-0.65l-1.55,-1.22l0.55,-1.14l1.61,0.94l1.04,0.15l0.18,1.54l0.34,0.35l5.64,0.63l-0.84,1.64l-1.22,0.34l-0.77,1.51l0.07,0.47l1.37,1.37l0.67,-0.19l0.42,-1.39l1.21,3.84l-0.03,1.21l-0.33,-0.15l-0.4,0.28Z",
            name: "Bangladesh"
        },
        BE: {
            path: "M429.29,144.05l1.91,0.24l2.1,-0.63l2.63,1.99l-0.21,1.66l-0.69,0.4l-0.18,1.2l-1.66,-1.13l-1.39,0.15l-2.73,-2.7l-1.17,-0.18l-0.16,-0.52l1.54,-0.5Z",
            name: "Belgium"
        },
        BF: {
            path: "M421.42,247.64l-0.11,0.95l0.34,1.16l1.4,1.71l0.07,1.1l0.32,0.37l2.55,0.51l-0.04,1.28l-0.38,0.53l-1.07,0.21l-0.72,1.18l-0.63,0.21l-3.22,-0.25l-0.94,0.39l-5.4,-0.05l-0.39,0.38l0.16,2.73l-1.23,-0.43l-1.17,0.1l-0.89,0.57l-2.27,-1.72l-0.13,-1.11l0.61,-0.96l0.02,-0.93l1.87,-1.98l0.44,-1.81l0.43,-0.39l1.28,0.26l1.05,-0.52l0.47,-0.73l1.84,-1.09l0.55,-0.83l2.2,-1.0l1.15,-0.3l0.72,0.45l1.13,-0.01Z",
            name: "Burkina Faso"
        },
        BG: {
            path: "M491.65,168.18l-0.86,0.88l-0.91,2.17l0.48,1.34l-1.6,-0.24l-2.55,0.95l-0.28,1.51l-1.8,0.22l-2.0,-1.0l-1.92,0.79l-1.42,-0.07l-0.15,-1.63l-1.05,-0.97l0.0,-0.8l1.2,-1.57l0.01,-0.56l-1.14,-1.23l-0.05,-0.94l0.88,0.97l0.88,-0.2l1.91,0.47l3.68,0.16l1.42,-0.81l2.72,-0.66l2.55,1.24Z",
            name: "Bulgaria"
        },
        BA: {
            path: "M463.49,163.65l2.1,0.5l1.72,-0.03l1.52,0.68l-0.36,0.78l0.08,0.45l1.04,1.02l-0.25,0.98l-1.81,1.15l-0.38,1.38l-1.67,-0.87l-0.89,-1.2l-2.11,-1.83l-1.63,-2.22l0.23,-0.57l0.48,0.38l0.55,-0.06l0.43,-0.51l0.94,-0.06Z",
            name: "Bosnia and Herz."
        },
        BN: {
            path: "M707.48,273.58l0.68,-0.65l1.41,-0.91l-0.15,1.63l-0.81,-0.05l-0.61,0.58l-0.53,-0.6Z",
            name: "Brunei"
        },
        BO: {
            path: "M263.83,340.69l-3.09,-0.23l-0.38,0.23l-0.7,1.52l-1.31,-1.53l-3.28,-0.64l-2.37,2.4l-1.31,0.26l-0.88,-3.26l-1.3,-2.86l0.74,-2.37l-0.13,-0.43l-1.2,-1.01l-0.37,-1.89l-1.08,-1.55l1.45,-2.56l-0.96,-2.33l0.47,-1.06l-0.34,-0.73l0.91,-1.32l0.16,-3.84l0.5,-1.18l-1.81,-3.41l2.46,0.07l0.8,-0.85l3.4,-1.91l2.66,-0.35l-0.19,1.38l0.3,1.07l-0.05,1.97l2.72,2.27l2.88,0.49l0.89,0.86l1.79,0.58l0.98,0.7l1.71,0.05l1.17,0.61l0.6,2.7l-0.7,0.54l0.96,2.99l0.37,0.28l4.3,0.1l-0.25,1.2l0.27,1.02l1.43,0.9l0.5,1.35l-0.41,1.86l-0.65,1.08l0.12,1.35l-2.69,-1.65l-2.4,-0.03l-4.36,0.76l-1.49,2.5l-0.11,1.52l-0.75,2.37Z",
            name: "Bolivia"
        },
        JP: {
            path: "M781.12,166.87l1.81,0.68l1.62,-0.97l0.39,2.42l-3.35,0.75l-2.23,2.88l-3.63,-1.9l-0.56,0.2l-1.26,3.05l-2.16,0.03l-0.29,-2.51l1.08,-2.03l2.45,-0.16l0.37,-0.33l1.25,-5.94l2.47,2.71l2.03,1.12ZM773.56,187.34l-0.91,2.22l0.37,1.52l-1.14,1.75l-3.02,1.26l-4.58,0.27l-3.34,3.01l-1.25,-0.8l-0.09,-1.9l-0.46,-0.38l-4.35,0.62l-3.0,1.32l-2.85,0.05l-0.37,0.27l0.13,0.44l2.32,1.89l-1.54,4.34l-1.26,0.9l-0.79,-0.7l0.56,-2.27l-0.21,-0.45l-1.47,-0.75l-0.74,-1.4l2.12,-0.84l1.26,-1.7l2.45,-1.42l1.83,-1.91l4.78,-0.81l2.6,0.57l0.44,-0.21l2.39,-4.66l1.29,1.06l0.5,0.01l5.1,-4.02l1.69,-3.73l-0.38,-3.4l0.9,-1.61l2.14,-0.44l1.23,3.72l-0.07,2.18l-2.23,2.84l-0.04,3.16ZM757.78,196.26l0.19,0.56l-1.01,1.21l-1.16,-0.68l-1.28,0.65l-0.69,1.45l-1.02,-0.5l0.01,-0.93l1.14,-1.38l1.57,0.14l0.85,-0.98l1.4,0.46Z",
            name: "Japan"
        },
        BI: {
            path: "M495.45,295.49l-1.08,-2.99l1.14,-0.11l0.64,-1.19l0.76,0.09l0.65,1.83l-2.1,2.36Z",
            name: "Burundi"
        },
        BJ: {
            path: "M429.57,255.75l-0.05,0.8l0.5,1.34l-0.42,0.86l0.17,0.79l-1.81,2.12l-0.57,1.76l-0.08,5.42l-1.41,0.2l-0.48,-1.36l0.11,-5.71l-0.52,-0.7l-0.2,-1.35l-1.48,-1.48l0.21,-0.9l0.89,-0.43l0.42,-0.92l1.27,-0.36l1.22,-1.34l0.61,-0.0l1.62,1.24Z",
            name: "Benin"
        },
        BT: {
            path: "M650.32,213.86l0.84,0.71l-0.12,1.1l-3.76,-0.11l-1.57,0.4l-1.93,-0.87l1.48,-1.96l1.13,-0.57l1.63,0.57l1.33,0.08l0.99,0.65Z",
            name: "Bhutan"
        },
        JM: {
            path: "M228.38,239.28l-0.8,0.4l-2.26,-1.06l0.84,-0.23l2.14,0.3l1.17,0.56l-1.08,0.03Z",
            name: "Jamaica"
        },
        BW: {
            path: "M483.92,330.07l2.27,4.01l2.83,2.86l0.96,0.31l0.78,2.43l2.13,0.61l1.02,0.76l-3.0,1.64l-2.32,2.02l-1.54,2.69l-1.52,0.45l-0.64,1.94l-1.34,0.52l-1.85,-0.12l-1.21,-0.74l-1.35,-0.3l-1.22,0.62l-0.75,1.37l-2.31,1.9l-1.4,0.21l-0.35,-0.59l0.16,-1.75l-1.48,-2.54l-0.62,-0.43l-0.0,-7.1l2.08,-0.08l0.39,-0.4l0.07,-8.9l5.19,-0.93l0.8,0.89l0.51,0.07l1.5,-0.95l2.21,-0.49Z",
            name: "Botswana"
        },
        BR: {
            path: "M259.98,275.05l3.24,0.7l0.65,-0.53l4.55,-1.32l1.08,-1.06l-0.02,-0.63l0.55,-0.05l0.28,0.28l-0.26,0.87l0.22,0.48l0.73,0.32l0.4,0.81l-0.62,0.86l-0.4,2.13l0.82,2.56l1.69,1.43l1.43,0.2l3.17,-1.68l3.18,0.3l0.65,-0.75l-0.27,-0.92l1.9,-0.09l2.39,0.99l1.06,-0.61l0.84,0.78l1.2,-0.18l1.18,-1.06l0.84,-1.94l1.36,-2.11l0.37,-0.05l1.89,5.45l1.33,0.59l0.05,1.28l-1.77,1.94l0.02,0.56l1.02,0.87l4.07,0.36l0.08,2.16l0.66,0.29l1.74,-1.5l6.97,2.32l1.02,1.22l-0.35,1.18l0.49,0.5l2.81,-0.74l4.77,1.3l3.75,-0.08l3.57,2.0l3.29,2.86l1.93,0.72l2.12,0.12l0.71,0.62l1.21,4.51l-0.95,3.98l-4.72,5.06l-1.64,2.92l-1.72,2.05l-0.8,0.3l-0.72,2.03l0.18,4.75l-0.94,5.53l-0.81,1.13l-0.43,3.36l-2.55,3.5l-0.4,2.51l-1.86,1.04l-0.67,1.53l-2.54,0.01l-3.94,1.01l-1.83,1.2l-2.87,0.82l-3.03,2.19l-2.2,2.83l-0.36,2.0l0.4,1.58l-0.44,2.6l-0.51,1.2l-1.77,1.54l-2.75,4.78l-3.83,3.42l-1.24,2.74l-1.18,1.15l-0.36,-0.83l0.95,-1.14l0.01,-0.5l-1.52,-1.97l-4.56,-3.32l-1.03,-0.0l-2.38,-2.02l-0.81,-0.0l5.34,-5.45l3.77,-2.58l0.22,-2.46l-1.35,-1.81l-0.91,0.07l0.58,-2.33l0.01,-1.54l-1.11,-0.83l-1.75,0.3l-0.44,-3.11l-0.52,-0.95l-1.88,-0.88l-1.24,0.47l-2.17,-0.41l0.15,-3.21l-0.62,-1.34l0.66,-0.73l-0.22,-1.34l0.66,-1.13l0.44,-2.04l-0.61,-1.83l-1.4,-0.86l-0.2,-0.75l0.34,-1.39l-0.38,-0.5l-4.52,-0.1l-0.72,-2.22l0.59,-0.42l-0.03,-1.1l-0.5,-0.87l-0.32,-1.7l-1.45,-0.76l-1.63,-0.02l-1.05,-0.72l-1.6,-0.48l-1.13,-0.99l-2.69,-0.4l-2.47,-2.06l0.13,-4.35l-0.45,-0.45l-3.46,0.5l-3.44,1.94l-0.6,0.74l-2.9,-0.17l-1.47,0.42l-0.72,-0.18l0.15,-3.52l-0.63,-0.34l-1.94,1.41l-1.87,-0.06l-0.83,-1.18l-1.37,-0.26l0.21,-1.01l-1.35,-1.49l-0.88,-1.91l0.56,-0.6l-0.0,-0.81l1.29,-0.62l0.22,-0.43l-0.22,-1.19l0.61,-0.91l0.15,-0.99l2.65,-1.58l1.99,-0.47l0.42,-0.36l2.06,0.11l0.42,-0.33l1.19,-8.0l-0.41,-1.56l-1.1,-1.0l0.01,-1.33l1.91,-0.42l0.08,-0.96l-0.33,-0.43l-1.14,-0.2l-0.02,-0.83l4.47,0.05l0.82,-0.67l0.82,1.81l0.8,0.07l1.15,1.1l2.26,-0.05l0.71,-0.83l2.78,-0.96l0.48,-1.13l1.6,-0.64l0.24,-0.47l-0.48,-0.82l-1.83,-0.19l-0.36,-3.22Z",
            name: "Brazil"
        },
        BS: {
            path: "M226.4,223.87l-0.48,-1.15l-0.84,-0.75l0.36,-1.11l0.95,1.95l0.01,1.06ZM225.56,216.43l-1.87,0.29l-0.04,-0.22l0.74,-0.14l1.17,0.06Z",
            name: "Bahamas"
        },
        BY: {
            path: "M493.84,128.32l0.29,0.7l0.49,0.23l1.19,-0.38l2.09,0.72l0.19,1.26l-0.45,1.24l1.57,2.26l0.89,0.59l0.17,0.81l1.58,0.56l0.4,0.5l-0.53,0.41l-1.87,-0.11l-0.73,0.38l-0.13,0.52l1.04,2.74l-1.91,0.26l-0.89,0.99l-0.11,1.18l-2.73,-0.04l-0.53,-0.62l-0.52,-0.08l-0.75,0.46l-0.91,-0.42l-1.92,-0.07l-2.75,-0.79l-2.6,-0.28l-2.0,0.07l-1.5,0.92l-0.67,0.07l-0.08,-1.22l-0.59,-1.19l1.36,-0.88l0.01,-1.35l-0.7,-1.41l-0.07,-1.0l2.16,-0.02l2.72,-1.3l0.75,-2.04l1.91,-1.04l0.2,-0.41l-0.19,-1.25l3.8,-1.78l2.3,0.77Z",
            name: "Belarus"
        },
        BZ: {
            path: "M198.03,244.38l0.1,-4.49l0.69,-0.06l0.74,-1.3l0.34,0.28l-0.4,1.3l0.17,0.58l-0.34,2.25l-1.3,1.42Z",
            name: "Belize"
        },
        RU: {
            path: "M491.55,115.25l2.55,-1.85l-0.01,-0.65l-2.2,-1.5l7.32,-6.76l1.03,-2.11l-0.13,-0.49l-3.46,-2.52l0.86,-2.7l-2.11,-2.81l1.56,-3.67l-2.77,-4.52l2.15,-2.99l-0.08,-0.55l-3.65,-2.73l0.3,-2.54l1.81,-0.37l4.26,-1.77l2.42,-1.45l4.06,2.61l6.79,1.04l9.34,4.85l1.78,1.88l0.14,2.46l-2.55,2.02l-3.9,1.06l-11.07,-3.14l-2.06,0.53l-0.13,0.7l3.94,2.94l0.31,5.86l0.26,0.36l5.14,2.24l0.58,-0.29l0.32,-1.94l-1.35,-1.78l1.13,-1.09l6.13,2.42l2.11,-0.98l0.18,-0.56l-1.51,-2.67l5.41,-3.76l2.07,0.22l2.26,1.41l0.57,-0.16l1.46,-2.87l-0.05,-0.44l-1.92,-2.32l1.12,-2.32l-1.32,-2.27l5.87,1.16l1.04,1.75l-2.59,0.43l-0.33,0.4l0.02,2.36l2.46,1.83l3.87,-0.91l0.86,-2.8l13.69,-5.65l0.99,0.11l-1.92,2.06l0.23,0.67l3.11,0.45l2.0,-1.48l4.56,-0.12l3.64,-1.73l2.65,2.44l0.56,-0.01l2.85,-2.88l-0.01,-0.57l-2.35,-2.29l0.9,-1.01l7.14,1.3l3.41,1.36l9.05,4.97l0.51,-0.11l1.67,-2.27l-0.05,-0.53l-2.43,-2.21l-0.06,-0.78l-0.34,-0.36l-2.52,-0.36l0.64,-1.93l-1.32,-3.46l-0.06,-1.21l4.48,-4.06l1.69,-4.29l1.6,-0.81l6.23,1.18l0.44,2.21l-2.29,3.64l0.06,0.5l1.47,1.39l0.76,3.0l-0.56,6.03l2.69,2.82l-0.96,2.57l-4.86,5.95l0.23,0.64l2.86,0.61l0.42,-0.17l0.93,-1.4l2.64,-1.03l0.87,-2.24l2.09,-1.96l0.07,-0.5l-1.36,-2.28l1.09,-2.69l-0.32,-0.55l-2.47,-0.33l-0.5,-2.06l1.94,-4.38l-0.06,-0.42l-2.96,-3.4l4.12,-2.88l0.16,-0.4l-0.51,-2.93l0.54,-0.05l1.13,2.25l-0.96,4.35l0.27,0.47l2.68,0.84l0.5,-0.51l-1.02,-2.99l3.79,-1.66l5.01,-0.24l4.53,2.61l0.48,-0.06l0.07,-0.48l-2.18,-3.82l-0.23,-4.67l3.98,-0.9l5.97,0.21l5.49,-0.64l0.27,-0.65l-1.83,-2.31l2.56,-2.9l2.87,-0.17l4.8,-2.47l6.54,-0.67l1.03,-1.42l6.25,-0.45l2.32,1.11l5.53,-2.7l4.5,0.08l0.39,-0.28l0.66,-2.15l2.26,-2.12l5.69,-2.11l3.21,1.29l-2.46,0.94l-0.25,0.42l0.34,0.35l5.41,0.77l0.61,2.33l0.58,0.25l2.2,-1.22l7.13,0.07l5.51,2.47l1.79,1.72l-0.53,2.24l-9.16,4.15l-1.97,1.52l0.16,0.71l6.77,1.91l2.16,-0.78l1.13,2.74l0.67,0.11l1.01,-1.15l3.81,-0.73l7.7,0.77l0.54,1.99l0.36,0.29l10.47,0.71l0.43,-0.38l0.13,-3.23l4.87,0.78l3.95,-0.02l3.83,2.4l1.03,2.71l-1.35,1.79l0.02,0.5l3.15,3.64l4.07,1.96l0.53,-0.18l2.23,-4.47l3.95,1.93l4.16,-1.21l4.73,1.39l2.05,-1.26l3.94,0.62l0.43,-0.55l-1.68,-4.02l2.89,-1.8l22.31,3.03l2.16,2.75l6.55,3.51l10.29,-0.81l4.82,0.73l1.85,1.66l-0.29,3.08l0.25,0.41l3.08,1.26l3.56,-0.88l4.35,-0.11l4.8,0.87l4.57,-0.47l4.23,3.79l0.43,0.07l3.1,-1.4l0.16,-0.6l-1.88,-2.62l0.85,-1.52l7.71,1.21l5.22,-0.26l7.09,2.09l9.59,5.22l6.35,4.11l-0.2,2.38l1.88,1.41l0.6,-0.42l-0.48,-2.53l6.15,0.57l4.4,3.51l-1.97,1.43l-4.0,0.41l-0.36,0.39l-0.06,3.79l-0.74,0.62l-2.07,-0.11l-1.91,-1.39l-3.14,-1.11l-0.78,-1.85l-2.72,-0.68l-2.63,0.49l-1.04,-1.1l0.46,-1.31l-0.5,-0.51l-3.0,0.98l-0.22,0.58l0.99,1.7l-1.21,1.48l-3.04,1.68l-3.12,-0.28l-0.4,0.23l0.09,0.46l2.2,2.09l1.46,3.2l1.15,1.1l0.24,1.33l-0.42,0.67l-4.63,-0.77l-6.96,2.9l-2.19,0.44l-7.6,5.06l-0.84,1.45l-3.61,-2.37l-6.24,2.82l-0.94,-1.15l-0.53,-0.08l-2.28,1.52l-3.2,-0.49l-0.44,0.27l-0.78,2.37l-3.05,3.78l0.09,1.47l0.29,0.36l2.54,0.72l-0.29,4.53l-1.97,0.11l-0.35,0.26l-1.07,2.94l0.8,1.45l-3.91,1.58l-1.05,3.95l-3.48,0.77l-0.3,0.3l-0.72,3.29l-3.09,2.65l-0.7,-1.74l-2.44,-12.44l1.16,-4.71l2.04,-2.06l0.22,-1.64l3.8,-0.86l4.46,-4.61l4.28,-3.81l4.48,-3.01l2.17,-5.63l-0.42,-0.54l-3.04,0.33l-1.77,3.31l-5.86,3.86l-1.86,-4.25l-0.45,-0.23l-6.46,1.3l-6.47,6.44l-0.01,0.55l1.58,1.74l-8.24,1.17l0.15,-2.2l-0.34,-0.42l-3.89,-0.56l-3.25,1.81l-7.62,-0.62l-8.45,1.19l-17.71,15.41l0.22,0.7l3.74,0.41l1.36,2.17l2.43,0.76l1.88,-1.68l2.4,0.2l3.4,3.54l0.08,2.6l-1.95,3.42l-0.21,3.9l-1.1,5.06l-3.71,4.54l-0.87,2.21l-8.29,8.89l-3.19,1.7l-1.32,0.03l-1.45,-1.36l-0.49,-0.04l-2.27,1.5l0.41,-3.65l-0.59,-2.47l1.75,-0.89l2.91,0.53l0.42,-0.2l1.68,-3.03l0.87,-3.46l0.97,-1.18l1.32,-2.88l-0.45,-0.56l-4.14,0.95l-2.19,1.25l-3.41,-0.0l-1.06,-2.93l-2.97,-2.3l-4.28,-1.06l-1.75,-5.07l-2.66,-5.01l-2.29,-1.29l-3.75,-1.01l-3.44,0.08l-3.18,0.62l-2.24,1.77l0.05,0.66l1.18,0.69l0.02,1.43l-1.33,1.05l-2.26,3.51l-0.04,1.43l-3.16,1.84l-2.82,-1.16l-3.01,0.23l-1.35,-1.07l-1.5,-0.35l-3.9,2.31l-3.22,0.52l-2.27,0.79l-3.05,-0.51l-2.21,0.03l-1.48,-1.6l-2.6,-1.63l-2.63,-0.43l-5.46,1.01l-3.23,-1.25l-0.72,-2.57l-5.2,-1.24l-2.75,-1.36l-0.5,0.12l-2.59,3.45l0.84,2.1l-2.06,1.93l-3.41,-0.77l-2.42,-0.12l-1.83,-1.54l-2.53,-0.05l-2.42,-0.98l-3.86,1.57l-4.72,2.78l-3.3,0.75l-1.55,-1.92l-3.0,0.41l-1.11,-1.33l-1.62,-0.59l-1.31,-1.94l-1.38,-0.6l-3.7,0.79l-3.31,-1.83l-0.51,0.11l-0.99,1.29l-5.29,-8.05l-2.96,-2.48l0.65,-0.77l0.01,-0.51l-0.5,-0.11l-6.2,3.21l-1.84,0.15l0.15,-1.39l-0.26,-0.42l-3.22,-1.17l-2.46,0.7l-0.69,-3.16l-0.32,-0.31l-4.5,-0.75l-2.47,1.47l-6.19,1.27l-1.29,0.86l-9.51,1.3l-1.15,1.17l-0.03,0.53l1.47,1.9l-1.89,0.69l-0.22,0.56l0.31,0.6l-2.11,1.44l0.03,0.68l3.75,2.12l-0.39,0.98l-3.23,-0.13l-0.86,0.86l-3.09,-1.59l-3.97,0.07l-2.66,1.35l-8.32,-3.56l-4.07,0.06l-5.39,3.68l-0.39,2.0l-2.03,-1.5l-0.59,0.13l-2.0,3.59l0.57,0.93l-1.28,2.16l0.06,0.48l2.13,2.17l1.95,0.04l1.37,1.82l-0.23,1.46l0.25,0.43l0.83,0.33l-0.8,1.31l-2.49,0.62l-2.49,3.2l0.0,0.49l2.17,2.78l-0.15,2.18l2.5,3.24l-1.58,1.59l-0.7,-0.13l-1.63,-1.72l-2.29,-0.84l-0.94,-1.31l-2.34,-0.63l-1.48,0.4l-0.43,-0.47l-3.51,-1.48l-5.76,-1.01l-0.45,0.19l-2.89,-2.34l-2.9,-1.2l-1.53,-1.29l1.29,-0.43l2.08,-2.61l-0.05,-0.55l-0.89,-0.79l3.05,-1.06l0.27,-0.42l-0.07,-0.69l-0.49,-0.35l-1.73,0.39l0.04,-0.68l1.04,-0.72l2.66,-0.48l0.4,-1.32l-0.5,-1.6l0.92,-1.54l0.03,-1.17l-0.29,-0.37l-3.69,-1.06l-1.41,0.02l-1.42,-1.41l-2.19,0.38l-2.77,-1.01l-0.03,-0.59l-0.89,-1.43l-2.0,-0.32l-0.11,-0.54l0.49,-0.53l0.01,-0.53l-1.6,-1.9l-3.58,0.02l-0.88,0.73l-0.46,-0.07l-1.0,-2.79l2.22,-0.02l0.97,-0.74l0.07,-0.57l-0.9,-1.04l-1.35,-0.48l-0.11,-0.7l-0.95,-0.58l-1.38,-1.99l0.46,-0.98l-0.51,-1.96l-2.45,-0.84l-1.21,0.3l-0.46,-0.76l-2.46,-0.83l-0.72,-1.87l-0.21,-1.69l-0.99,-0.85l0.85,-1.17l-0.7,-3.21l1.66,-1.97l-0.16,-0.79ZM749.2,170.72l-0.6,0.4l-0.13,0.16l-0.01,-0.51l0.74,-0.05ZM874.85,67.94l-5.63,0.48l-0.26,-0.84l3.15,-1.89l1.94,0.01l3.19,1.16l-2.39,1.09ZM797.39,48.49l-2.0,1.36l-3.8,-0.42l-4.25,-1.8l0.35,-0.97l9.69,1.83ZM783.67,46.12l-1.63,3.09l-8.98,-0.13l-4.09,1.14l-4.54,-2.97l1.16,-3.01l3.05,-0.89l6.5,0.22l8.54,2.56ZM778.2,134.98l-0.56,-0.9l0.27,-0.12l0.29,1.01ZM778.34,135.48l0.94,3.53l-0.05,3.38l1.05,3.39l2.18,5.0l-2.89,-0.83l-0.49,0.26l-1.54,4.65l2.42,3.5l-0.04,1.13l-1.24,-1.24l-0.61,0.06l-1.09,1.61l-0.28,-1.61l0.27,-3.1l-0.28,-3.4l0.58,-2.47l0.11,-4.39l-1.46,-3.36l0.21,-4.32l2.15,-1.46l0.07,-0.34ZM771.95,56.61l1.76,-1.42l2.89,-0.42l3.28,1.71l0.14,0.6l-3.27,0.03l-4.81,-0.5ZM683.76,31.09l-13.01,1.93l4.03,-6.35l1.82,-0.56l1.73,0.34l5.99,2.98l-0.56,1.66ZM670.85,27.93l-5.08,0.64l-6.86,-1.57l-3.99,-2.05l-2.1,-4.16l-2.6,-0.87l5.72,-3.5l5.2,-1.28l4.69,2.85l5.59,5.4l-0.56,4.53ZM564.15,68.94l-0.64,0.17l-7.85,-0.57l-0.86,-2.04l-4.28,-1.17l-0.28,-1.94l2.27,-0.89l0.25,-0.39l-0.08,-2.38l4.81,-3.97l-0.15,-0.7l-1.47,-0.38l5.3,-3.81l0.15,-0.44l-0.58,-1.94l5.28,-2.51l8.21,-3.27l8.28,-0.96l4.35,-1.94l4.6,-0.64l1.36,1.61l-1.34,1.28l-16.43,4.94l-7.97,4.88l-7.74,9.63l0.66,4.14l4.16,3.27ZM548.81,18.48l-5.5,1.18l-0.58,1.02l-2.59,0.84l-2.13,-1.07l1.12,-1.42l-0.3,-0.65l-2.33,-0.07l1.68,-0.36l3.47,-0.06l0.42,1.29l0.66,0.16l1.38,-1.34l2.15,-0.88l2.94,1.01l-0.39,0.36ZM477.37,133.15l-4.08,0.05l-2.56,-0.32l0.33,-0.87l3.17,-1.03l3.24,0.96l-0.09,1.23Z",
            name: "Russia"
        },
        RW: {
            path: "M497.0,288.25l0.71,1.01l-0.11,1.09l-1.63,0.03l-1.04,1.39l-0.83,-0.11l0.51,-1.2l0.08,-1.34l0.42,-0.41l0.7,0.14l1.19,-0.61Z",
            name: "Rwanda"
        },
        RS: {
            path: "M469.4,163.99l0.42,-0.5l-0.01,-0.52l-1.15,-1.63l1.43,-0.62l1.33,0.12l1.17,1.06l0.46,1.13l1.34,0.64l0.35,1.35l1.46,0.9l0.76,-0.29l0.2,0.69l-0.48,0.78l0.22,1.12l1.05,1.22l-0.77,0.8l-0.37,1.52l-1.21,0.08l0.24,-0.64l-0.39,-0.54l-2.08,-1.64l-0.9,0.05l-0.48,0.94l-2.12,-1.37l0.53,-1.6l-1.11,-1.37l0.51,-1.1l-0.41,-0.57Z",
            name: "Serbia"
        },
        LT: {
            path: "M486.93,129.3l0.17,1.12l-1.81,0.98l-0.72,2.02l-2.47,1.18l-2.1,-0.02l-0.73,-1.05l-1.06,-0.3l-0.09,-1.87l-3.56,-1.13l-0.43,-2.36l2.48,-0.94l4.12,0.22l2.25,-0.31l0.52,0.69l1.24,0.21l2.19,1.56Z",
            name: "Lithuania"
        },
        LU: {
            path: "M436.08,149.45l-0.48,-0.07l0.3,-1.28l0.27,0.4l-0.09,0.96Z",
            name: "Luxembourg"
        },
        LR: {
            path: "M399.36,265.97l0.18,1.54l-0.48,0.99l0.08,0.47l2.47,1.8l-0.33,2.8l-2.65,-1.13l-5.78,-4.61l0.58,-1.32l2.1,-2.33l0.86,-0.22l0.77,1.14l-0.14,0.85l0.59,0.87l1.0,0.14l0.76,-0.99Z",
            name: "Liberia"
        },
        RO: {
            path: "M487.53,154.23l0.6,0.24l2.87,3.98l-0.17,2.69l0.45,1.42l1.32,0.81l1.35,-0.42l0.76,0.36l0.02,0.31l-0.83,0.45l-0.59,-0.22l-0.54,0.3l-0.62,3.3l-1.0,-0.22l-2.07,-1.13l-2.95,0.71l-1.25,0.76l-3.51,-0.15l-1.89,-0.47l-0.87,0.16l-0.82,-1.3l0.29,-0.26l-0.06,-0.64l-1.09,-0.34l-0.56,0.5l-1.05,-0.64l-0.39,-1.39l-1.36,-0.65l-0.35,-1.0l-0.83,-0.75l1.54,-0.54l2.66,-4.21l2.4,-1.24l2.96,0.34l1.48,0.73l0.79,-0.45l1.78,-0.3l0.75,-0.74l0.79,0.0Z",
            name: "Romania"
        },
        GW: {
            path: "M386.23,253.6l-0.29,0.84l0.15,0.6l-2.21,0.59l-0.86,0.96l-1.04,-0.83l-1.09,-0.23l-0.54,-1.06l-0.66,-0.49l2.41,-0.48l4.13,0.1Z",
            name: "Guinea-Bissau"
        },
        GT: {
            path: "M195.08,249.77l-2.48,-0.37l-1.03,-0.45l-1.14,-0.89l0.3,-0.99l-0.24,-0.68l0.96,-1.66l2.98,-0.01l0.4,-0.37l-0.19,-1.28l-1.67,-1.4l0.51,-0.4l0.0,-1.05l3.85,0.02l-0.21,4.53l0.4,0.43l1.46,0.38l-1.48,0.98l-0.35,0.7l0.12,0.57l-2.2,1.96Z",
            name: "Guatemala"
        },
        GR: {
            path: "M487.07,174.59l-0.59,1.43l-0.37,0.21l-2.84,-0.35l-3.03,0.77l-0.18,0.68l1.28,1.23l-0.61,0.23l-1.14,0.0l-1.2,-1.39l-0.63,0.03l-0.53,1.01l0.56,1.76l1.03,1.19l-0.56,0.38l-0.05,0.62l2.52,2.12l0.02,0.87l-1.78,-0.59l-0.48,0.56l0.5,1.0l-1.07,0.2l-0.3,0.53l0.75,2.01l-0.98,0.02l-1.84,-1.12l-1.37,-4.2l-2.21,-2.95l-0.11,-0.56l1.04,-1.28l0.2,-0.95l0.85,-0.66l0.03,-0.46l1.32,-0.21l1.01,-0.64l1.22,0.05l0.65,-0.56l2.26,-0.0l1.82,-0.75l1.85,1.0l2.28,-0.28l0.35,-0.39l0.01,-0.77l0.34,0.22ZM480.49,192.16l0.58,0.4l-0.68,-0.12l0.11,-0.28ZM482.52,192.82l2.51,0.06l0.24,0.32l-1.99,0.13l-0.77,-0.51Z",
            name: "Greece"
        },
        GQ: {
            path: "M448.79,279.62l0.02,2.22l-4.09,0.0l0.69,-2.27l3.38,0.05Z",
            name: "Eq. Guinea"
        },
        GY: {
            path: "M277.42,270.07l-0.32,1.83l-1.32,0.57l-0.23,0.46l-0.28,2.0l1.11,1.82l0.83,0.19l0.32,1.25l1.13,1.62l-1.21,-0.19l-1.08,0.71l-1.77,0.5l-0.44,0.46l-0.86,-0.09l-1.32,-1.01l-0.77,-2.27l0.36,-1.9l0.68,-1.23l-0.57,-1.17l-0.74,-0.43l0.12,-1.16l-0.9,-0.69l-1.1,0.09l-1.31,-1.48l0.53,-0.72l-0.04,-0.84l1.99,-0.86l0.05,-0.59l-0.71,-0.78l0.14,-0.57l1.66,-1.24l1.36,0.77l1.41,1.49l0.06,1.15l0.37,0.38l0.8,0.05l2.06,1.86Z",
            name: "Guyana"
        },
        GE: {
            path: "M521.71,168.93l5.29,0.89l4.07,2.01l1.41,-0.44l2.07,0.56l0.68,1.1l1.07,0.55l-0.12,0.59l0.98,1.29l-1.01,-0.13l-1.81,-0.83l-0.94,0.47l-3.23,0.43l-2.29,-1.39l-2.33,0.05l0.21,-0.97l-0.76,-2.26l-1.45,-1.12l-1.43,-0.39l-0.41,-0.42Z",
            name: "Georgia"
        },
        GB: {
            path: "M412.61,118.72l-2.19,3.22l-0.0,0.45l5.13,-0.3l-0.53,2.37l-2.2,3.12l0.29,0.63l2.37,0.21l2.33,4.3l1.76,0.69l2.2,5.12l2.94,0.77l-0.23,1.62l-1.15,0.88l-0.1,0.52l0.82,1.42l-1.86,1.43l-3.3,-0.02l-4.12,0.87l-1.04,-0.58l-0.47,0.06l-1.51,1.41l-2.12,-0.34l-1.86,1.18l-0.6,-0.29l3.19,-3.0l2.16,-0.69l0.28,-0.41l-0.34,-0.36l-3.73,-0.53l-0.4,-0.76l2.2,-0.87l0.17,-0.61l-1.26,-1.67l0.36,-1.7l3.38,0.28l0.43,-0.33l0.37,-1.99l-1.79,-2.49l-3.11,-0.72l-0.38,-0.59l0.79,-1.35l-0.04,-0.46l-0.82,-0.97l-0.61,0.01l-0.68,0.84l-0.1,-2.34l-1.23,-1.88l0.85,-3.47l1.77,-2.68l1.85,0.26l2.17,-0.22ZM406.26,132.86l-1.01,1.77l-1.57,-0.59l-1.16,0.01l0.37,-1.54l-0.39,-1.39l1.45,-0.1l2.3,1.84Z",
            name: "United Kingdom"
        },
        GA: {
            path: "M453.24,279.52l-0.08,0.98l0.7,1.29l2.36,0.24l-0.98,2.63l1.18,1.79l0.25,1.78l-0.29,1.52l-0.6,0.93l-1.84,-0.09l-1.23,-1.11l-0.66,0.23l-0.15,0.84l-1.42,0.26l-1.02,0.7l-0.11,0.52l0.77,1.35l-1.34,0.97l-3.94,-4.3l-1.44,-2.45l0.06,-0.6l0.54,-0.81l1.05,-3.46l4.17,-0.07l0.4,-0.4l-0.02,-2.66l2.39,0.21l1.25,-0.27Z",
            name: "Gabon"
        },
        GN: {
            path: "M391.8,254.11l0.47,0.8l1.11,-0.32l0.98,0.7l1.07,0.2l2.26,-1.22l0.64,0.44l1.13,1.56l-0.48,1.4l0.8,0.3l-0.08,0.48l0.46,0.68l-0.35,1.36l1.05,2.61l-1.0,0.69l0.03,1.41l-0.72,-0.06l-1.08,1.0l-0.24,-0.27l0.07,-1.11l-1.05,-1.54l-1.79,0.21l-0.35,-2.01l-1.6,-2.18l-2.0,-0.0l-1.31,0.54l-1.95,2.18l-1.86,-2.19l-1.2,-0.78l-0.3,-1.11l-0.8,-0.85l0.65,-0.72l0.81,-0.03l1.64,-0.8l0.23,-1.87l2.67,0.64l0.89,-0.3l1.21,0.15Z",
            name: "Guinea"
        },
        GM: {
            path: "M379.31,251.39l0.1,-0.35l2.43,-0.07l0.74,-0.61l0.51,-0.03l0.77,0.49l-1.03,-0.3l-1.87,0.9l-1.65,-0.04ZM384.03,250.91l0.91,0.05l0.75,-0.24l-0.59,0.31l-1.08,-0.13Z",
            name: "Gambia"
        },
        GL: {
            path: "M353.02,1.2l14.69,4.67l-3.68,1.89l-22.97,0.86l-0.36,0.27l0.12,0.43l1.55,1.18l8.79,-0.66l7.48,2.07l4.86,-1.77l1.66,1.73l-2.53,3.19l-0.01,0.48l0.46,0.15l6.35,-2.2l12.06,-2.31l7.24,1.13l1.09,1.99l-9.79,4.01l-1.44,1.32l-7.87,0.98l-0.35,0.41l0.38,0.38l5.07,0.24l-2.53,3.58l-2.07,3.81l0.08,6.05l2.57,3.11l-3.22,0.2l-4.12,1.66l-0.05,0.72l4.45,2.65l0.51,3.75l-2.3,0.4l-0.25,0.64l2.79,3.69l-4.82,0.31l-0.36,0.29l0.16,0.44l2.62,1.8l-0.59,1.22l-3.3,0.7l-3.45,0.01l-0.29,0.68l3.03,3.12l0.02,1.34l-4.4,-1.73l-1.72,1.35l0.15,0.66l3.31,1.15l3.13,2.71l0.81,3.16l-3.85,0.75l-4.89,-4.26l-0.47,-0.03l-0.17,0.44l0.79,2.86l-2.71,2.21l-0.13,0.44l0.37,0.27l8.73,0.34l-12.32,6.64l-7.24,1.48l-2.94,0.08l-2.69,1.75l-3.43,4.41l-5.24,2.84l-1.73,0.18l-7.12,2.1l-2.15,2.52l-0.13,2.99l-1.19,2.45l-4.01,3.09l-0.14,0.44l0.97,2.9l-2.28,6.48l-3.1,0.2l-3.83,-3.07l-4.86,-0.02l-2.25,-1.93l-1.7,-3.79l-4.3,-4.84l-1.21,-2.49l-0.44,-3.8l-3.32,-3.63l0.84,-2.86l-1.56,-1.7l2.28,-4.6l3.83,-1.74l1.03,-1.96l0.52,-3.47l-0.59,-0.41l-4.17,2.21l-2.07,0.58l-2.72,-1.28l-0.15,-2.71l0.85,-2.09l2.01,-0.06l5.06,1.2l0.46,-0.23l-0.14,-0.49l-6.54,-4.47l-2.67,0.55l-1.58,-0.86l2.56,-4.01l-0.03,-0.48l-1.5,-1.74l-4.98,-8.5l-3.13,-1.96l0.03,-1.88l-0.24,-0.37l-6.85,-3.02l-5.36,-0.38l-12.7,0.58l-2.78,-1.57l-3.66,-2.77l5.73,-1.45l5.0,-0.28l0.38,-0.38l-0.35,-0.41l-10.67,-1.38l-5.3,-2.06l0.25,-1.54l18.41,-5.26l1.22,-2.27l-0.25,-0.55l-6.14,-1.86l1.68,-1.77l8.55,-4.03l3.59,-0.63l0.3,-0.54l-0.88,-2.27l5.47,-1.47l7.65,-0.95l7.55,-0.05l3.04,1.85l6.48,-3.27l5.81,2.22l3.56,0.5l5.16,1.94l0.5,-0.21l-0.17,-0.52l-5.71,-3.13l0.28,-2.13l8.12,-3.6l8.7,0.28l3.35,-2.34l8.71,-0.6l19.93,0.8Z",
            name: "Greenland"
        },
        KW: {
            path: "M540.81,207.91l0.37,0.86l-0.17,0.76l0.6,1.53l-0.95,0.04l-0.82,-1.28l-1.57,-0.18l1.31,-1.88l1.22,0.17Z",
            name: "Kuwait"
        },
        GH: {
            path: "M420.53,257.51l-0.01,0.72l0.96,1.2l0.24,3.73l0.59,0.95l-0.51,2.1l0.19,1.41l1.02,2.21l-6.97,2.84l-1.8,-0.57l0.04,-0.89l-1.02,-2.04l0.61,-2.65l1.07,-2.32l-0.96,-6.47l5.01,0.07l0.94,-0.39l0.61,0.11Z",
            name: "Ghana"
        },
        OM: {
            path: "M568.09,230.93l-0.91,1.67l-1.22,0.04l-0.6,0.76l-0.41,1.51l0.27,1.58l-1.16,0.05l-1.56,0.97l-0.76,1.74l-1.62,0.05l-0.98,0.65l-0.17,1.15l-0.89,0.52l-1.49,-0.18l-2.4,0.94l-2.47,-5.4l7.35,-2.71l1.67,-5.23l-1.12,-2.09l0.05,-0.83l0.67,-1.0l0.07,-1.05l0.9,-0.42l-0.05,-2.07l0.7,-0.01l1.0,1.62l1.51,1.08l3.3,0.84l1.73,2.29l0.81,0.37l-1.23,2.35l-0.99,0.79Z",
            name: "Oman"
        },
        _2: {
            path: "M531.15,258.94l1.51,0.12l5.13,-0.95l5.3,-1.48l-0.01,4.4l-2.67,3.39l-1.85,0.01l-8.04,-2.94l-2.55,-3.17l1.12,-1.71l2.04,2.34Z",
            name: "Somaliland"
        },
        _1: {
            path: "M472.77,172.64l-1.08,-1.29l0.96,-0.77l0.29,-0.83l1.98,1.64l-0.36,0.67l-1.79,0.58Z",
            name: "Kosovo"
        },
        _0: {
            path: "M504.91,192.87l0.34,0.01l0.27,-0.07l-0.29,0.26l-0.31,-0.2Z",
            name: "N. Cyprus"
        },
        JO: {
            path: "M518.64,201.38l-5.14,1.56l-0.19,0.65l2.16,2.39l-0.89,1.14l-1.71,0.34l-1.71,1.8l-2.34,-0.37l1.21,-4.32l0.56,-4.07l2.8,0.94l4.46,-2.71l0.79,2.66Z",
            name: "Jordan"
        },
        HR: {
            path: "M455.59,162.84l1.09,0.07l-0.82,0.94l-0.27,-1.01ZM456.96,162.92l0.62,-0.41l1.73,0.45l0.42,-0.4l-0.01,-0.59l0.86,-0.52l0.2,-1.05l1.63,-0.68l2.57,1.68l2.07,0.6l0.87,-0.31l1.05,1.57l-0.52,0.63l-1.05,-0.56l-1.68,0.04l-2.1,-0.5l-1.29,0.06l-0.57,0.49l-0.59,-0.47l-0.62,0.16l-0.46,1.7l1.79,2.42l2.79,2.75l-1.18,-0.87l-2.21,-0.87l-1.67,-1.78l0.13,-0.63l-1.05,-1.19l-0.32,-1.27l-1.42,-0.43Z",
            name: "Croatia"
        },
        HT: {
            path: "M237.05,238.38l-1.16,0.43l-0.91,-0.55l0.05,-0.2l2.02,0.31ZM237.53,238.43l1.06,0.12l-0.05,0.01l-1.01,-0.12ZM239.25,238.45l0.79,-0.51l0.06,-0.62l-1.02,-1.0l0.02,-0.82l-0.3,-0.4l-0.93,-0.32l3.16,0.45l0.02,1.84l-0.48,0.34l-0.08,0.58l0.54,0.72l-1.78,-0.26Z",
            name: "Haiti"
        },
        HU: {
            path: "M462.08,157.89l0.65,-1.59l-0.09,-0.44l0.64,-0.0l0.39,-0.34l0.1,-0.69l1.75,0.87l2.32,-0.37l0.43,-0.66l3.49,-0.78l0.69,-0.78l0.57,-0.14l2.57,0.93l0.67,-0.23l1.03,0.65l0.08,0.37l-1.42,0.71l-2.59,4.14l-1.8,0.53l-1.68,-0.1l-2.74,1.23l-1.85,-0.54l-2.54,-1.66l-0.66,-1.1Z",
            name: "Hungary"
        },
        HN: {
            path: "M199.6,249.52l-1.7,-1.21l0.06,-0.94l3.04,-2.14l2.37,0.28l1.27,-0.09l1.1,-0.52l1.3,0.28l1.14,-0.25l1.38,0.37l2.23,1.37l-2.36,0.93l-1.23,-0.39l-0.88,1.3l-1.28,0.99l-0.98,-0.22l-0.42,0.52l-0.96,0.05l-0.36,0.41l0.04,0.88l-0.52,0.6l-0.3,0.04l-0.3,-0.55l-0.66,-0.31l0.11,-0.67l-0.48,-0.65l-0.87,-0.26l-0.73,0.2Z",
            name: "Honduras"
        },
        PR: {
            path: "M256.17,238.73l-0.26,0.27l-2.83,0.05l-0.07,-0.55l1.95,-0.1l1.22,0.33Z",
            name: "Puerto Rico"
        },
        PS: {
            path: "M509.21,203.07l0.1,-0.06l-0.02,0.03l-0.09,0.03ZM509.36,202.91l-0.02,-0.63l-0.33,-0.16l0.31,-1.09l0.24,0.1l-0.2,1.78Z",
            name: "Palestine"
        },
        PT: {
            path: "M401.84,187.38l-0.64,0.47l-1.13,-0.35l-0.91,0.17l0.28,-1.78l-0.24,-1.78l-1.25,-0.56l-0.45,-0.84l0.17,-1.66l1.01,-1.18l0.69,-2.92l-0.04,-1.39l-0.59,-1.9l1.3,-0.85l0.84,1.35l3.1,-0.3l0.46,0.99l-1.05,0.94l-0.03,2.16l-0.41,0.57l-0.08,1.1l-0.79,0.18l-0.26,0.59l0.91,1.6l-0.63,1.75l0.76,1.09l-1.1,1.52l0.07,1.05Z",
            name: "Portugal"
        },
        PY: {
            path: "M274.9,336.12l0.74,1.52l-0.16,3.45l0.32,0.41l2.64,0.5l1.11,-0.47l1.4,0.59l0.36,0.6l0.53,3.42l1.27,0.4l0.98,-0.38l0.51,0.27l-0.0,1.18l-1.21,5.32l-2.09,1.9l-1.8,0.4l-4.71,-0.98l2.2,-3.63l-0.32,-1.5l-2.78,-1.28l-3.03,-1.94l-2.07,-0.44l-4.34,-4.06l0.91,-2.9l0.08,-1.42l1.07,-2.04l4.13,-0.72l2.18,0.03l2.05,1.17l0.03,0.59Z",
            name: "Paraguay"
        },
        PA: {
            path: "M213.8,263.68l0.26,-1.52l-0.36,-0.26l-0.01,-0.49l0.44,-0.1l0.93,1.4l1.26,0.03l0.77,0.49l1.38,-0.23l2.51,-1.11l0.86,-0.72l3.45,0.85l1.4,1.18l0.41,1.74l-0.21,0.34l-0.53,-0.12l-0.47,0.29l-0.16,0.6l-0.68,-1.28l0.45,-0.49l-0.19,-0.66l-0.47,-0.13l-0.54,-0.84l-1.5,-0.75l-1.1,0.16l-0.75,0.99l-1.62,0.84l-0.18,0.96l0.85,0.97l-0.58,0.45l-0.69,0.08l-0.34,-1.18l-1.27,0.03l-0.71,-1.05l-2.59,-0.46Z",
            name: "Panama"
        },
        PG: {
            path: "M808.58,298.86l2.54,2.56l-0.13,0.26l-0.33,0.12l-0.87,-0.78l-1.22,-2.16ZM801.41,293.04l0.5,0.29l0.26,0.27l-0.49,-0.35l-0.27,-0.21ZM803.17,294.58l0.59,0.5l0.08,1.06l-0.29,-0.91l-0.38,-0.65ZM796.68,298.41l0.52,0.75l1.43,-0.19l2.27,-1.81l-0.01,-1.43l1.12,0.16l-0.04,1.1l-0.7,1.28l-1.12,0.18l-0.62,0.79l-2.46,1.11l-1.17,-0.0l-3.08,-1.25l3.41,0.0l0.45,-0.68ZM789.15,303.55l2.31,1.8l1.59,2.61l1.34,0.13l-0.06,0.66l0.31,0.43l1.06,0.24l0.06,0.65l2.25,1.05l-1.22,0.13l-0.72,-0.63l-4.56,-0.65l-3.22,-2.87l-1.49,-2.34l-3.27,-1.1l-2.38,0.72l-1.59,0.86l-0.2,0.42l0.27,1.55l-1.55,0.68l-1.36,-0.4l-2.21,-0.09l-0.08,-15.41l8.39,2.93l2.95,2.4l0.6,1.64l4.02,1.49l0.31,0.68l-1.76,0.21l-0.33,0.52l0.55,1.68Z",
            name: "Papua New Guinea"
        },
        PE: {
            path: "M244.96,295.21l-1.26,-0.07l-0.57,0.42l-1.93,0.45l-2.98,1.75l-0.36,1.36l-0.58,0.8l0.12,1.37l-1.24,0.59l-0.22,1.22l-0.62,0.84l1.04,2.27l1.28,1.44l-0.41,0.84l0.32,0.57l1.48,0.13l1.16,1.37l2.21,0.07l1.63,-1.08l-0.13,3.02l0.3,0.4l1.14,0.29l1.31,-0.34l1.9,3.59l-0.48,0.85l-0.17,3.85l-0.94,1.59l0.35,0.75l-0.47,1.07l0.98,1.97l-2.1,3.82l-0.98,0.5l-2.17,-1.28l-0.39,-1.16l-4.95,-2.58l-4.46,-2.79l-1.84,-1.51l-0.91,-1.84l0.3,-0.96l-2.11,-3.33l-4.82,-9.68l-1.04,-1.2l-0.87,-1.94l-3.4,-2.48l0.58,-1.18l-1.13,-2.23l0.66,-1.49l1.45,-1.15l-0.6,0.98l0.07,0.92l0.47,0.36l1.74,0.03l0.97,1.17l0.54,0.07l1.42,-1.03l0.6,-1.84l1.42,-2.02l3.04,-1.04l2.73,-2.62l0.86,-1.74l-0.1,-1.87l1.44,1.02l0.9,1.25l1.06,0.59l1.7,2.73l1.86,0.31l1.45,-0.61l0.96,0.39l1.36,-0.19l1.45,0.89l-1.4,2.21l0.31,0.61l0.59,0.05l0.47,0.5Z",
            name: "Peru"
        },
        PK: {
            path: "M615.09,192.34l-1.83,1.81l-2.6,0.39l-3.73,-0.68l-1.58,1.33l-0.09,0.42l1.77,4.39l1.7,1.23l-1.69,1.27l-0.12,2.14l-2.33,2.64l-1.6,2.8l-2.46,2.67l-3.03,-0.07l-2.76,2.83l0.05,0.6l1.5,1.11l0.26,1.9l1.44,1.5l0.37,1.68l-5.01,-0.01l-1.78,1.7l-1.42,-0.52l-0.76,-1.87l-2.27,-2.15l-11.61,0.86l0.71,-2.34l3.43,-1.32l0.25,-0.44l-0.21,-1.24l-1.2,-0.65l-0.28,-2.46l-2.29,-1.14l-1.28,-1.94l2.82,0.94l2.62,-0.38l1.42,0.33l0.76,-0.56l1.71,0.19l3.25,-1.14l0.27,-0.36l0.08,-2.19l1.18,-1.32l1.68,0.0l0.58,-0.82l1.6,-0.3l1.19,0.16l0.98,-0.78l0.02,-1.88l0.93,-1.47l1.48,-0.66l0.19,-0.55l-0.66,-1.25l2.04,-0.11l0.69,-1.01l-0.02,-1.16l1.11,-1.06l-0.17,-1.78l-0.49,-1.03l1.15,-0.98l5.42,-0.91l2.6,-0.82l1.6,1.16l0.97,2.34l3.45,0.97Z",
            name: "Pakistan"
        },
        PH: {
            path: "M737.01,263.84l0.39,2.97l-0.44,1.18l-0.55,-1.53l-0.67,-0.14l-1.17,1.28l0.65,2.09l-0.42,0.69l-2.48,-1.23l-0.57,-1.49l0.65,-1.03l-0.1,-0.54l-1.59,-1.19l-0.56,0.08l-0.65,0.87l-1.23,0.0l-1.58,0.97l0.83,-1.8l2.56,-1.42l0.65,0.84l0.45,0.13l1.9,-0.69l0.56,-1.11l1.5,-0.06l0.38,-0.43l-0.09,-1.19l1.21,0.71l0.36,2.02ZM733.59,256.58l0.05,0.75l0.08,0.26l-0.8,-0.42l-0.18,-0.71l0.85,0.12ZM734.08,256.1l-0.12,-1.12l-1.0,-1.27l1.36,0.03l0.53,0.73l0.51,2.04l-1.27,-0.4ZM733.76,257.68l0.38,0.98l-0.32,0.15l-0.07,-1.13ZM724.65,238.43l1.46,0.7l0.72,-0.31l-0.32,1.17l0.79,1.71l-0.57,1.84l-1.53,1.04l-0.39,2.25l0.56,2.04l1.63,0.57l1.16,-0.27l2.71,1.23l-0.19,1.08l0.76,0.84l-0.08,0.36l-1.4,-0.9l-0.88,-1.27l-0.66,0.0l-0.38,0.55l-1.6,-1.31l-2.15,0.36l-0.87,-0.39l0.07,-0.61l0.66,-0.55l-0.01,-0.62l-0.75,-0.59l-0.72,0.44l-0.74,-0.87l-0.39,-2.49l0.32,0.27l0.66,-0.28l0.26,-3.97l0.7,-2.02l1.14,0.0ZM731.03,258.87l-0.88,0.85l-1.19,1.94l-1.05,-1.19l0.93,-1.1l0.32,-1.47l0.52,-0.06l-0.27,1.15l0.22,0.45l0.49,-0.12l1.0,-1.32l-0.08,0.85ZM726.83,255.78l0.83,0.38l1.17,-0.0l-0.02,0.48l-2.0,1.4l0.03,-2.26ZM724.81,252.09l-0.38,1.27l-1.42,-1.95l1.2,0.05l0.6,0.63ZM716.55,261.82l1.1,-0.95l0.03,-0.03l-0.28,0.36l-0.85,0.61ZM719.22,259.06l0.04,-0.06l0.8,-1.53l0.16,0.75l-1.0,0.84Z",
            name: "Philippines"
        },
        PL: {
            path: "M468.44,149.42l-1.11,-1.54l-1.86,-0.33l-0.48,-1.05l-1.72,-0.37l-0.65,0.69l-0.72,-0.36l0.11,-0.61l-0.33,-0.46l-1.75,-0.27l-1.04,-0.93l-0.94,-1.94l0.16,-1.22l-0.62,-1.8l-0.78,-1.07l0.57,-1.04l-0.48,-1.43l1.41,-0.83l6.91,-2.71l2.14,0.5l0.52,0.91l5.51,0.44l4.55,-0.05l1.07,0.31l0.48,0.84l0.15,1.58l0.65,1.2l-0.01,0.99l-1.27,0.58l-0.19,0.54l0.73,1.48l0.08,1.55l1.2,2.76l-0.17,0.58l-1.23,0.44l-2.27,2.72l0.18,0.95l-1.97,-1.03l-1.98,0.4l-1.36,-0.28l-1.24,0.58l-1.07,-0.97l-1.16,0.24Z",
            name: "Poland"
        },
        ZM: {
            path: "M481.47,313.3l0.39,0.31l2.52,0.14l0.99,1.17l2.01,0.35l1.4,-0.64l0.69,1.17l1.78,0.33l1.84,2.35l2.23,0.18l0.4,-0.43l-0.21,-2.74l-0.62,-0.3l-0.48,0.32l-1.98,-1.17l0.72,-5.29l-0.51,-1.18l0.57,-1.3l3.68,-0.62l0.26,0.63l1.21,0.63l0.9,-0.22l2.16,0.67l1.33,0.71l1.07,1.02l0.56,1.87l-0.88,2.7l0.43,2.09l-0.73,0.87l-0.76,2.37l0.59,0.68l-6.6,1.83l-0.29,0.44l0.19,1.45l-1.68,0.35l-1.43,1.02l-0.38,0.87l-0.87,0.26l-3.48,3.69l-4.16,-0.53l-1.52,-1.0l-1.77,-0.13l-1.83,0.52l-3.04,-3.4l0.11,-7.59l4.82,0.03l0.39,-0.49l-0.18,-0.76l0.33,-0.83l-0.4,-1.36l0.24,-1.05Z",
            name: "Zambia"
        },
        EH: {
            path: "M384.42,230.28l0.25,-0.79l1.06,-1.29l0.8,-3.51l3.38,-2.78l0.7,-1.81l0.06,4.84l-1.98,0.2l-0.94,1.59l0.39,3.56l-3.7,-0.01ZM392.01,218.1l0.7,-1.8l1.77,-0.24l2.09,0.34l0.95,-0.62l1.28,-0.07l-0.0,2.51l-6.79,-0.12Z",
            name: "W. Sahara"
        },
        EE: {
            path: "M485.71,115.04l2.64,0.6l2.56,0.11l-1.6,1.91l0.61,3.54l-0.81,0.87l-1.78,-0.01l-3.22,-1.76l-1.8,0.45l0.21,-1.53l-0.58,-0.41l-0.69,0.34l-1.26,-1.03l-0.17,-1.63l2.83,-0.92l3.05,-0.52Z",
            name: "Estonia"
        },
        EG: {
            path: "M492.06,205.03l1.46,0.42l2.95,-1.64l2.04,-0.21l1.53,0.3l0.59,1.19l0.69,0.04l0.41,-0.64l1.81,0.58l1.95,0.16l1.04,-0.51l1.42,4.08l-2.03,4.54l-1.66,-1.77l-1.76,-3.85l-0.64,-0.12l-0.36,0.67l1.04,2.88l3.44,6.95l1.78,3.04l2.03,2.65l-0.36,0.53l0.23,2.01l2.7,2.19l-28.41,0.0l0.0,-18.96l-0.73,-2.2l0.59,-1.56l-0.32,-1.26l0.68,-0.99l3.06,-0.04l4.82,1.52Z",
            name: "Egypt"
        },
        ZA: {
            path: "M467.14,373.21l-0.13,-1.96l-0.68,-1.56l0.7,-0.68l-0.13,-2.33l-4.56,-8.19l0.77,-0.86l0.6,0.45l0.69,1.31l2.83,0.72l1.5,-0.26l2.24,-1.39l0.19,-9.55l1.35,2.3l-0.21,1.5l0.61,1.2l0.4,0.19l1.79,-0.27l2.6,-2.07l0.69,-1.32l0.96,-0.48l2.19,1.04l2.04,0.13l1.77,-0.65l0.85,-2.12l1.38,-0.33l1.59,-2.76l2.15,-1.89l3.41,-1.87l2.0,0.45l1.02,-0.28l0.99,0.2l1.75,5.29l-0.38,3.25l-0.81,-0.23l-1.0,0.46l-0.87,1.68l-0.05,1.16l1.97,1.84l1.47,-0.29l0.69,-1.18l1.09,0.01l-0.76,3.69l-0.58,1.09l-2.2,1.79l-3.17,4.76l-2.8,2.83l-3.57,2.88l-2.53,1.05l-1.22,0.14l-0.51,0.7l-1.18,-0.32l-1.39,0.5l-2.59,-0.52l-1.61,0.33l-1.18,-0.11l-2.55,1.1l-2.1,0.44l-1.6,1.07l-0.85,0.05l-0.93,-0.89l-0.93,-0.15l-0.97,-1.13l-0.25,0.05ZM491.45,364.19l0.62,-0.93l1.48,-0.59l1.18,-2.19l-0.07,-0.49l-1.99,-1.69l-1.66,0.56l-1.43,1.14l-1.34,1.73l0.02,0.51l1.88,2.11l1.31,-0.16Z",
            name: "South Africa"
        },
        EC: {
            path: "M231.86,285.53l0.29,1.59l-0.69,1.45l-2.61,2.51l-3.13,1.11l-1.53,2.18l-0.49,1.68l-1.0,0.73l-1.02,-1.11l-1.78,-0.16l0.67,-1.15l-0.24,-0.86l1.25,-2.13l-0.54,-1.09l-0.67,-0.08l-0.72,0.87l-0.87,-0.64l0.35,-0.69l-0.36,-1.96l0.81,-0.51l0.45,-1.51l0.92,-1.57l-0.07,-0.97l2.65,-1.33l2.75,1.35l0.77,1.05l2.12,0.35l0.76,-0.32l1.96,1.21Z",
            name: "Ecuador"
        },
        AL: {
            path: "M470.32,171.8l0.74,0.03l0.92,0.89l-0.17,1.95l0.36,1.28l1.01,0.82l-1.82,2.83l-0.19,-0.61l-1.25,-0.89l-0.18,-1.2l0.53,-2.82l-0.54,-1.47l0.6,-0.83Z",
            name: "Albania"
        },
        AO: {
            path: "M461.55,300.03l1.26,3.15l1.94,2.36l2.47,-0.53l1.25,0.32l0.44,-0.18l0.93,-1.92l1.31,-0.08l0.41,-0.44l0.47,-0.0l-0.1,0.41l0.39,0.49l2.65,-0.02l0.03,1.19l0.48,1.01l-0.34,1.52l0.18,1.55l0.83,1.04l-0.13,2.85l0.54,0.39l3.96,-0.41l-0.1,1.79l0.39,1.05l-0.24,1.43l-4.7,-0.03l-0.4,0.39l-0.12,8.13l2.92,3.49l-3.83,0.88l-5.89,-0.36l-1.88,-1.24l-10.47,0.22l-1.3,-1.01l-1.85,-0.16l-2.4,0.77l-0.15,-1.06l0.33,-2.16l1.0,-3.45l1.35,-3.2l2.24,-2.8l0.33,-2.06l-0.13,-1.53l-0.8,-1.08l-1.21,-2.87l0.87,-1.62l-1.27,-4.12l-1.17,-1.53l2.47,-0.63l7.03,0.03ZM451.71,298.87l-0.47,-1.25l1.25,-1.11l0.32,0.3l-0.99,1.03l-0.12,1.03Z",
            name: "Angola"
        },
        KZ: {
            path: "M552.8,172.89l0.46,-1.27l-0.48,-1.05l-2.96,-1.19l-1.06,-2.58l-1.37,-0.87l-0.03,-0.3l1.95,0.23l0.45,-0.38l0.08,-1.96l1.75,-0.41l2.1,0.45l0.48,-0.33l0.45,-3.04l-0.45,-2.09l-0.41,-0.31l-2.42,0.15l-2.36,-0.73l-2.87,1.37l-2.17,0.61l-0.85,-0.34l0.13,-1.61l-1.6,-2.12l-2.02,-0.08l-1.78,-1.82l1.29,-2.18l-0.57,-0.95l1.62,-2.91l2.21,1.63l0.63,-0.27l0.29,-2.22l4.92,-3.43l3.71,-0.08l8.4,3.6l2.92,-1.36l3.77,-0.06l3.11,1.66l0.51,-0.11l0.6,-0.81l3.31,0.13l0.39,-0.25l0.63,-1.57l-0.17,-0.5l-3.5,-1.98l1.87,-1.27l-0.13,-1.03l1.98,-0.72l0.18,-0.62l-1.59,-2.06l0.81,-0.82l9.23,-1.18l1.33,-0.88l6.18,-1.26l2.26,-1.42l4.08,0.68l0.73,3.33l0.51,0.3l2.48,-0.8l2.79,1.02l-0.17,1.56l0.43,0.44l2.55,-0.24l4.89,-2.53l0.03,0.32l3.15,2.61l5.56,8.47l0.65,0.02l1.12,-1.46l3.15,1.74l3.76,-0.78l1.15,0.49l1.14,1.8l1.84,0.76l0.99,1.29l3.35,-0.25l1.02,1.52l-1.6,1.81l-1.93,0.28l-0.34,0.38l-0.11,3.05l-1.13,1.16l-4.75,-1.0l-0.46,0.27l-1.76,5.47l-1.1,0.59l-4.91,1.23l-0.27,0.54l2.1,4.97l-1.37,0.63l-0.23,0.41l0.13,1.13l-0.88,-0.25l-1.42,-1.13l-7.89,-0.4l-0.92,0.31l-3.73,-1.22l-1.42,0.63l-0.53,1.66l-3.72,-0.94l-1.85,0.43l-0.76,1.4l-4.65,2.62l-1.13,2.08l-0.44,0.01l-0.92,-1.4l-2.87,-0.09l-0.45,-2.14l-0.38,-0.32l-0.8,-0.01l0.0,-2.96l-3.0,-2.22l-7.31,0.58l-2.35,-2.68l-6.71,-3.69l-6.45,1.83l-0.29,0.39l0.1,10.85l-0.7,0.08l-1.62,-2.17l-1.83,-0.96l-3.11,0.59l-0.64,0.51Z",
            name: "Kazakhstan"
        },
        ET: {
            path: "M516.04,247.79l1.1,0.84l1.63,-0.45l0.68,0.47l1.63,0.03l2.01,0.94l1.73,1.66l1.64,2.07l-1.52,2.04l0.16,1.72l0.39,0.38l2.05,0.0l-0.36,1.03l2.86,3.58l8.32,3.08l1.31,0.02l-6.32,6.75l-3.1,0.11l-2.36,1.77l-1.47,0.04l-0.86,0.79l-1.38,-0.0l-1.32,-0.81l-2.29,1.05l-0.76,0.98l-3.29,-0.41l-3.07,-2.07l-1.8,-0.07l-0.62,-0.6l0.0,-1.24l-0.28,-0.38l-1.15,-0.37l-1.4,-2.59l-1.19,-0.68l-0.47,-1.0l-1.27,-1.23l-1.16,-0.22l0.43,-0.72l1.45,-0.28l0.41,-0.95l-0.03,-2.21l0.68,-2.44l1.05,-0.63l1.43,-3.06l1.57,-1.37l1.02,-2.51l0.35,-1.88l2.52,0.46l0.44,-0.24l0.58,-1.43Z",
            name: "Ethiopia"
        },
        ZW: {
            path: "M498.91,341.09l-1.11,-0.22l-0.92,0.28l-2.09,-0.44l-1.5,-1.11l-1.89,-0.43l-0.62,-1.4l-0.01,-0.84l-0.3,-0.38l-0.97,-0.25l-2.71,-2.74l-1.92,-3.32l3.83,0.45l3.73,-3.82l1.08,-0.44l0.26,-0.77l1.25,-0.9l1.41,-0.26l0.5,0.89l1.99,-0.05l1.72,1.17l1.11,0.17l1.05,0.66l0.01,2.99l-0.59,3.76l0.38,0.86l-0.23,1.23l-0.39,0.35l-0.63,1.81l-2.43,2.75Z",
            name: "Zimbabwe"
        },
        ES: {
            path: "M416.0,169.21l1.07,1.17l4.61,1.38l1.06,-0.57l2.6,1.26l2.71,-0.3l0.09,1.12l-2.14,1.8l-3.11,0.61l-0.31,0.31l-0.2,0.89l-1.54,1.69l-0.97,2.4l0.84,1.74l-1.32,1.27l-0.48,1.68l-1.88,0.65l-1.66,2.07l-5.36,-0.01l-1.79,1.08l-0.89,0.98l-0.88,-0.17l-0.79,-0.82l-0.68,-1.59l-2.37,-0.63l-0.11,-0.5l1.21,-1.82l-0.77,-1.13l0.61,-1.68l-0.76,-1.62l0.87,-0.49l0.09,-1.25l0.42,-0.6l0.03,-2.11l0.99,-0.69l0.13,-0.5l-1.03,-1.73l-1.46,-0.11l-0.61,0.38l-1.06,0.0l-0.52,-1.23l-0.53,-0.21l-1.32,0.67l-0.01,-1.49l-0.75,-0.96l3.03,-1.88l2.99,0.53l3.32,-0.02l2.63,0.51l6.01,-0.06Z",
            name: "Spain"
        },
        ER: {
            path: "M520.38,246.23l3.42,2.43l3.5,3.77l0.84,0.54l-0.95,-0.01l-3.51,-3.89l-2.33,-1.15l-1.73,-0.07l-0.91,-0.51l-1.26,0.51l-1.34,-1.02l-0.61,0.17l-0.66,1.61l-2.35,-0.43l-0.17,-0.67l1.29,-5.29l0.61,-0.61l1.95,-0.53l0.87,-1.01l1.17,2.41l0.68,2.33l1.49,1.43Z",
            name: "Eritrea"
        },
        ME: {
            path: "M468.91,172.53l-1.22,-1.02l0.47,-1.81l0.89,-0.72l2.26,1.51l-0.5,0.57l-0.75,-0.27l-1.14,1.73Z",
            name: "Montenegro"
        },
        MD: {
            path: "M488.41,153.73l1.4,-0.27l1.72,0.93l1.07,0.15l0.85,0.65l-0.14,0.84l0.96,0.85l1.12,2.47l-1.15,-0.07l-0.66,-0.41l-0.52,0.25l-0.09,0.86l-1.08,1.89l-0.27,-0.86l0.25,-1.34l-0.16,-1.6l-3.29,-4.34Z",
            name: "Moldova"
        },
        MG: {
            path: "M545.91,319.14l0.4,3.03l0.62,1.21l-0.21,1.02l-0.57,-0.8l-0.69,-0.01l-0.47,0.76l0.41,2.12l-0.18,0.87l-0.73,0.78l-0.15,2.14l-4.71,15.2l-1.06,2.88l-3.92,1.64l-3.12,-1.49l-0.6,-1.21l-0.19,-2.4l-0.86,-2.05l-0.21,-1.77l0.38,-1.62l1.21,-0.75l0.01,-0.76l1.19,-2.04l0.23,-1.66l-1.06,-2.99l-0.19,-2.21l0.81,-1.33l0.32,-1.46l4.63,-1.22l3.44,-3.0l0.85,-1.4l-0.08,-0.7l0.78,-0.04l1.38,-1.77l0.13,-1.64l0.45,-0.61l1.16,1.69l0.59,1.6Z",
            name: "Madagascar"
        },
        MA: {
            path: "M378.78,230.02l0.06,-0.59l0.92,-0.73l0.82,-1.37l-0.09,-1.04l0.79,-1.7l1.31,-1.58l0.96,-0.59l0.66,-1.55l0.09,-1.47l0.81,-1.48l1.72,-1.07l1.55,-2.69l1.16,-0.96l2.44,-0.39l1.94,-1.82l1.31,-0.78l2.09,-2.28l-0.51,-3.65l1.24,-3.7l1.5,-1.75l4.46,-2.57l2.37,-4.47l1.44,0.01l1.68,1.21l2.32,-0.19l3.47,0.65l0.8,1.54l0.16,1.71l0.86,2.96l0.56,0.59l-0.26,0.61l-3.05,0.44l-1.26,1.05l-1.33,0.22l-0.33,0.37l-0.09,1.78l-2.68,1.0l-1.07,1.42l-4.47,1.13l-4.04,2.01l-0.54,4.64l-1.15,0.06l-0.92,0.61l-1.96,-0.35l-2.42,0.54l-0.74,1.9l-0.86,0.4l-1.14,3.26l-3.53,3.01l-0.8,3.55l-0.96,1.1l-0.29,0.82l-4.95,0.18Z",
            name: "Morocco"
        },
        UZ: {
            path: "M598.64,172.75l-1.63,1.52l0.06,0.64l1.85,1.12l1.97,-0.64l2.21,1.17l-2.52,1.68l-2.59,-0.22l-0.18,-0.41l0.46,-1.23l-0.45,-0.53l-3.35,0.69l-2.1,3.51l-1.87,-0.12l-1.03,1.51l0.22,0.55l1.64,0.62l0.46,1.83l-1.19,2.49l-2.66,-0.53l0.05,-1.36l-0.26,-0.39l-3.3,-1.23l-2.56,-1.4l-4.4,-3.34l-1.34,-3.14l-1.08,-0.6l-2.58,0.13l-0.69,-0.44l-0.47,-2.52l-3.37,-1.6l-0.43,0.05l-2.07,1.72l-2.1,1.01l-0.21,0.47l0.28,1.01l-1.91,0.03l-0.09,-10.5l5.99,-1.7l6.19,3.54l2.71,2.84l7.05,-0.67l2.71,2.01l-0.17,2.81l0.39,0.42l0.9,0.02l0.44,2.14l0.38,0.32l2.94,0.09l0.95,1.42l1.28,-0.24l1.05,-2.04l4.43,-2.5Z",
            name: "Uzbekistan"
        },
        MM: {
            path: "M673.9,230.21l-1.97,1.57l-0.57,0.96l-1.4,0.6l-1.36,1.05l-1.99,0.36l-1.08,2.66l-0.91,0.4l-0.19,0.55l1.21,2.27l2.52,3.43l-0.79,1.91l-0.74,0.41l-0.17,0.52l0.65,1.37l1.61,1.95l0.25,2.58l0.9,2.13l-1.92,3.57l0.68,-2.25l-0.81,-1.74l0.19,-2.65l-1.05,-1.53l-1.24,-6.17l-1.12,-2.26l-0.6,-0.13l-4.34,3.02l-2.39,-0.65l0.77,-2.84l-0.52,-2.61l-1.91,-2.96l0.25,-0.75l-0.29,-0.51l-1.33,-0.3l-1.61,-1.93l-0.1,-1.3l0.82,-0.24l0.04,-1.64l1.02,-0.52l0.21,-0.45l-0.23,-0.95l0.54,-0.96l0.08,-2.22l1.46,0.45l0.47,-0.2l1.12,-2.19l0.16,-1.35l1.33,-2.16l-0.0,-1.52l2.89,-1.66l1.63,0.44l0.5,-0.44l-0.17,-1.4l0.64,-0.36l0.08,-1.04l0.77,-0.11l0.71,1.35l1.06,0.69l-0.03,3.86l-2.38,2.37l-0.3,3.15l0.46,0.43l2.28,-0.38l0.51,2.08l1.47,0.67l-0.6,1.8l0.19,0.48l2.97,1.48l1.64,-0.55l0.02,0.32Z",
            name: "Myanmar"
        },
        ML: {
            path: "M392.61,254.08l-0.19,-2.37l-0.99,-0.87l-0.44,-1.3l-0.09,-1.28l0.81,-0.58l0.35,-1.24l2.37,0.65l1.31,-0.47l0.86,0.15l0.66,-0.56l9.83,-0.04l0.38,-0.28l0.56,-1.8l-0.44,-0.65l-2.35,-21.95l3.27,-0.04l16.7,11.38l0.74,1.31l2.5,1.09l0.02,1.38l0.44,0.39l2.34,-0.21l0.01,5.38l-1.28,1.61l-0.26,1.49l-5.31,0.57l-1.07,0.92l-2.9,0.1l-0.86,-0.48l-1.38,0.36l-2.4,1.08l-0.6,0.87l-1.85,1.09l-0.43,0.7l-0.79,0.39l-1.44,-0.21l-0.81,0.84l-0.34,1.64l-1.91,2.02l-0.06,1.03l-0.67,1.22l0.13,1.16l-0.97,0.39l-0.23,-0.64l-0.52,-0.24l-1.35,0.4l-0.34,0.55l-2.69,-0.28l-0.37,-0.35l-0.02,-0.9l-0.65,-0.35l0.45,-0.64l-0.03,-0.53l-2.12,-2.44l-0.76,-0.01l-2.0,1.16l-0.78,-0.15l-0.8,-0.67l-1.21,0.23Z",
            name: "Mali"
        },
        MN: {
            path: "M676.61,146.48l3.81,1.68l5.67,-1.0l2.37,0.41l2.34,1.5l1.79,1.75l2.29,-0.03l3.12,0.52l2.47,-0.81l3.41,-0.59l3.53,-2.21l1.25,0.29l1.53,1.13l2.27,-0.21l-2.66,5.01l0.64,1.68l0.47,0.21l1.32,-0.38l2.38,0.48l2.02,-1.11l1.76,0.89l2.06,2.02l-0.13,0.53l-1.72,-0.29l-3.77,0.46l-1.88,0.99l-1.76,1.99l-3.71,1.17l-2.45,1.6l-3.83,-0.87l-0.41,0.17l-1.31,1.99l1.04,2.24l-1.52,0.9l-1.74,1.57l-2.79,1.02l-3.78,0.13l-4.05,1.05l-2.77,1.52l-1.16,-0.85l-2.94,0.0l-3.62,-1.79l-2.58,-0.49l-3.4,0.41l-5.12,-0.67l-2.63,0.06l-1.31,-1.6l-1.4,-3.0l-1.48,-0.33l-3.13,-1.94l-6.16,-0.93l-0.71,-1.06l0.86,-3.82l-1.93,-2.71l-3.5,-1.18l-1.95,-1.58l-0.5,-1.72l2.34,-0.52l4.75,-2.8l3.62,-1.47l2.18,0.97l2.46,0.05l1.81,1.53l2.46,0.12l3.95,0.71l2.43,-2.28l0.08,-0.48l-0.9,-1.72l2.24,-2.98l2.62,1.27l4.94,1.17l0.43,2.24Z",
            name: "Mongolia"
        },
        MK: {
            path: "M472.8,173.98l0.49,-0.71l3.57,-0.71l1.0,0.77l0.13,1.45l-0.65,0.53l-1.15,-0.05l-1.12,0.67l-1.39,0.22l-0.79,-0.55l-0.29,-1.03l0.19,-0.6Z",
            name: "Macedonia"
        },
        MW: {
            path: "M505.5,309.31l0.85,1.95l0.15,2.86l-0.69,1.65l0.71,1.8l0.06,1.28l0.49,0.64l0.07,1.06l0.4,0.55l0.8,-0.23l0.55,0.61l0.69,-0.21l0.34,0.6l0.19,2.94l-1.04,0.62l-0.54,1.25l-1.11,-1.08l-0.16,-1.56l0.51,-1.31l-0.32,-1.3l-0.99,-0.65l-0.82,0.12l-2.36,-1.64l0.63,-1.96l0.82,-1.18l-0.46,-2.01l0.9,-2.86l-0.94,-2.51l0.96,0.18l0.29,0.4Z",
            name: "Malawi"
        },
        MR: {
            path: "M407.36,220.66l-2.58,0.03l-0.39,0.44l2.42,22.56l0.36,0.43l-0.39,1.24l-9.75,0.04l-0.56,0.53l-0.91,-0.11l-1.27,0.45l-1.61,-0.66l-0.97,0.03l-0.36,0.29l-0.38,1.35l-0.42,0.23l-2.93,-3.4l-2.96,-1.52l-1.62,-0.03l-1.27,0.54l-1.12,-0.2l-0.65,0.4l-0.08,-0.49l0.68,-1.29l0.31,-2.43l-0.57,-3.91l0.23,-1.21l-0.69,-1.5l-1.15,-1.02l0.25,-0.39l9.58,0.02l0.4,-0.45l-0.46,-3.68l0.47,-1.04l2.12,-0.21l0.36,-0.4l-0.08,-6.4l7.81,0.13l0.41,-0.4l0.01,-3.31l7.76,5.35Z",
            name: "Mauritania"
        },
        UG: {
            path: "M498.55,276.32l0.7,-0.46l1.65,0.5l1.96,-0.57l1.7,0.01l1.45,-0.98l0.91,1.33l1.33,3.95l-2.57,4.03l-1.46,-0.4l-2.54,0.91l-1.37,1.61l-0.01,0.81l-2.42,-0.01l-2.26,1.01l-0.17,-1.59l0.58,-1.04l0.14,-1.94l1.37,-2.28l1.78,-1.58l-0.17,-0.65l-0.72,-0.24l0.13,-2.43Z",
            name: "Uganda"
        },
        MY: {
            path: "M717.47,273.46l-1.39,0.65l-2.12,-0.41l-2.88,-0.0l-0.38,0.28l-0.84,2.75l-0.99,0.96l-1.21,3.29l-1.73,0.45l-2.45,-0.68l-1.39,0.31l-1.33,1.15l-1.59,-0.14l-1.41,0.44l-1.44,-1.19l-0.18,-0.73l1.34,0.53l1.93,-0.47l0.75,-2.22l4.02,-1.03l2.75,-3.21l0.82,0.94l0.64,-0.05l0.4,-0.65l0.96,0.06l0.42,-0.36l0.24,-2.68l1.81,-1.64l1.21,-1.86l0.63,-0.01l1.07,1.05l0.34,1.28l3.44,1.35l-0.06,0.35l-1.37,0.1l-0.35,0.54l0.32,0.88ZM673.68,269.59l0.17,1.09l0.47,0.33l1.65,-0.3l0.87,-0.94l1.61,1.52l0.98,1.56l-0.12,2.81l0.41,2.29l0.95,0.9l0.88,2.44l-1.27,0.12l-5.1,-3.67l-0.34,-1.29l-1.37,-1.59l-0.33,-1.97l-0.88,-1.4l0.25,-1.68l-0.46,-1.05l1.63,0.84Z",
            name: "Malaysia"
        },
        MX: {
            path: "M133.12,200.41l0.2,0.47l9.63,3.33l6.96,-0.02l0.4,-0.4l0.0,-0.74l3.77,0.0l3.55,2.93l1.39,2.83l1.52,1.04l2.08,0.82l0.47,-0.14l1.46,-2.0l1.73,-0.04l1.59,0.98l2.05,3.35l1.47,1.56l1.26,3.14l2.18,1.02l2.26,0.58l-1.18,3.72l-0.42,5.04l1.79,4.89l1.62,1.89l0.61,1.52l1.2,1.42l2.55,0.66l1.37,1.1l7.54,-1.89l1.86,-1.3l1.14,-4.3l4.1,-1.21l3.57,-0.11l0.32,0.3l-0.06,0.94l-1.26,1.45l-0.67,1.71l0.38,0.7l-0.72,2.27l-0.49,-0.3l-1.0,0.08l-1.0,1.39l-0.47,-0.11l-0.53,0.47l-4.26,-0.02l-0.4,0.4l-0.0,1.06l-1.1,0.26l0.1,0.44l1.82,1.44l0.56,0.91l-3.19,0.21l-1.21,2.09l0.24,0.72l-0.2,0.44l-2.24,-2.18l-1.45,-0.93l-2.22,-0.69l-1.52,0.22l-3.07,1.16l-10.55,-3.85l-2.86,-1.96l-3.78,-0.92l-1.08,-1.19l-2.62,-1.43l-1.18,-1.54l-0.38,-0.81l0.66,-0.63l-0.18,-0.53l0.52,-0.76l0.01,-0.91l-2.0,-3.82l-2.21,-2.63l-2.53,-2.09l-1.19,-1.62l-2.2,-1.17l-0.3,-0.43l0.34,-1.48l-0.21,-0.45l-1.23,-0.6l-1.36,-1.2l-0.59,-1.78l-1.54,-0.47l-2.44,-2.55l-0.16,-0.9l-1.33,-2.03l-0.84,-1.99l-0.16,-1.33l-1.81,-1.1l-0.97,0.05l-1.31,-0.7l-0.57,0.22l-0.4,1.12l0.72,3.77l3.51,3.89l0.28,0.78l0.53,0.26l0.41,1.43l1.33,1.73l1.58,1.41l0.8,2.39l1.43,2.41l0.13,1.32l0.37,0.36l1.04,0.08l1.67,2.28l-0.85,0.76l-0.66,-1.51l-1.68,-1.54l-2.91,-1.87l0.06,-1.82l-0.54,-1.68l-2.91,-2.03l-0.55,0.09l-1.95,-1.1l-0.88,-0.94l0.68,-0.08l0.93,-1.01l0.08,-1.78l-1.93,-1.94l-1.46,-0.77l-3.75,-7.56l4.88,-0.42Z",
            name: "Mexico"
        },
        VU: {
            path: "M839.04,322.8l0.22,1.14l-0.44,0.03l-0.2,-1.45l0.42,0.27Z",
            name: "Vanuatu"
        },
        FR: {
            path: "M444.48,172.62l-0.64,1.78l-0.58,-0.31l-0.49,-1.72l0.4,-0.89l1.0,-0.72l0.3,1.85ZM429.64,147.1l1.78,1.58l1.46,-0.13l2.1,1.42l1.35,0.27l1.23,0.83l3.04,0.5l-1.03,1.85l-0.3,2.12l-0.41,0.32l-0.95,-0.24l-0.5,0.43l0.06,0.61l-1.81,1.92l-0.04,1.42l0.55,0.38l0.88,-0.36l0.61,0.97l-0.03,1.0l0.57,0.91l-0.75,1.09l0.65,2.39l1.27,0.57l-0.18,0.82l-2.01,1.53l-4.77,-0.8l-3.82,1.0l-0.53,1.85l-2.49,0.34l-2.71,-1.31l-1.16,0.57l-4.31,-1.29l-0.72,-0.86l1.19,-1.78l0.39,-6.45l-2.58,-3.3l-1.9,-1.66l-3.72,-1.23l-0.19,-1.72l2.81,-0.61l4.12,0.81l0.47,-0.48l-0.6,-2.77l1.94,0.95l5.83,-2.54l0.92,-2.74l1.6,-0.49l0.24,0.78l1.36,0.33l1.05,1.19ZM289.01,278.39l-0.81,0.8l-0.78,0.12l-0.5,-0.66l-0.56,-0.1l-0.91,0.6l-0.46,-0.22l1.09,-2.96l-0.96,-1.77l-0.17,-1.49l1.07,-1.77l2.32,0.75l2.51,2.01l0.3,0.74l-2.14,3.96Z",
            name: "France"
        },
        FI: {
            path: "M492.17,76.39l-0.23,3.5l3.52,2.63l-2.08,2.88l-0.02,0.44l2.8,4.56l-1.59,3.31l2.16,3.24l-0.94,2.39l0.14,0.47l3.44,2.51l-0.77,1.62l-7.52,6.95l-4.5,0.31l-4.38,1.37l-3.8,0.74l-1.44,-1.96l-2.17,-1.11l0.5,-3.66l-1.16,-3.33l1.09,-2.08l2.21,-2.42l5.67,-4.32l1.64,-0.83l0.21,-0.42l-0.46,-2.02l-3.38,-1.89l-0.75,-1.43l-0.22,-6.74l-6.79,-4.8l0.8,-0.62l2.54,2.12l3.46,-0.12l3.0,0.96l2.51,-2.11l1.17,-3.08l3.55,-1.38l2.76,1.53l-0.95,2.79Z",
            name: "Finland"
        },
        FJ: {
            path: "M871.53,326.34l-2.8,1.05l-0.08,-0.23l2.97,-1.21l-0.1,0.39ZM867.58,329.25l0.43,0.37l-0.27,0.88l-1.24,0.28l-1.04,-0.24l-0.14,-0.66l0.63,-0.58l0.92,0.26l0.7,-0.31Z",
            name: "Fiji"
        },
        FK: {
            path: "M274.36,425.85l1.44,1.08l-0.47,0.73l-3.0,0.89l-0.96,-1.0l-0.52,-0.05l-1.83,1.29l-0.73,-0.88l2.46,-1.64l1.93,0.76l1.67,-1.19Z",
            name: "Falkland Is."
        },
        NI: {
            path: "M202.33,252.67l0.81,-0.18l1.03,-1.02l-0.04,-0.88l0.68,-0.0l0.63,-0.54l0.97,0.22l1.53,-1.26l0.58,-0.99l1.17,0.34l2.41,-0.94l0.13,1.32l-0.81,1.94l0.1,2.74l-0.36,0.37l-0.11,1.75l-0.47,0.81l0.18,1.14l-1.73,-0.85l-0.71,0.27l-1.47,-0.6l-0.52,0.16l-4.01,-3.81Z",
            name: "Nicaragua"
        },
        NL: {
            path: "M430.31,143.39l0.6,-0.5l2.13,-4.8l3.2,-1.33l1.74,0.08l0.33,0.8l-0.59,2.92l-0.5,0.99l-1.26,0.0l-0.4,0.45l0.33,2.7l-2.2,-1.78l-2.62,0.58l-0.75,-0.11Z",
            name: "Netherlands"
        },
        NO: {
            path: "M491.44,67.41l6.8,2.89l-2.29,0.86l-0.15,0.65l2.33,2.38l-4.98,1.79l0.84,-2.45l-0.18,-0.48l-3.55,-1.8l-3.89,1.52l-1.42,3.38l-2.12,1.72l-2.64,-1.0l-3.11,0.21l-2.66,-2.22l-0.5,-0.01l-1.41,1.1l-1.44,0.17l-0.35,0.35l-0.32,2.47l-4.32,-0.64l-0.44,0.29l-0.58,2.11l-2.45,0.2l-4.15,7.68l-3.88,5.76l0.78,1.62l-0.64,1.16l-2.24,-0.06l-0.38,0.24l-1.66,3.89l0.15,5.17l1.57,2.04l-0.78,4.16l-2.02,2.48l-0.85,1.63l-1.3,-1.75l-0.58,-0.07l-4.87,4.19l-3.1,0.79l-3.16,-1.7l-0.85,-3.77l-0.77,-8.55l2.14,-2.31l6.55,-3.27l5.02,-4.17l10.63,-13.84l10.98,-8.7l5.35,-1.91l4.34,0.12l3.69,-3.64l4.49,0.19l4.37,-0.89ZM484.55,20.04l4.26,1.75l-3.1,2.55l-7.1,0.65l-7.08,-0.9l-0.37,-1.31l-0.37,-0.29l-3.44,-0.1l-2.08,-2.0l6.87,-1.44l3.9,1.31l2.39,-1.64l6.13,1.4ZM481.69,33.93l-4.45,1.74l-3.54,-0.99l1.12,-0.9l0.05,-0.58l-1.06,-1.22l4.22,-0.89l1.09,1.97l2.57,0.87ZM466.44,24.04l7.43,3.77l-5.41,1.86l-1.58,4.08l-2.26,1.2l-1.12,4.11l-2.61,0.18l-4.79,-2.86l1.84,-1.54l-0.1,-0.68l-3.69,-1.53l-4.77,-4.51l-1.73,-3.89l6.11,-1.82l1.54,1.92l3.57,-0.08l1.2,-1.96l3.32,-0.18l3.05,1.92Z",
            name: "Norway"
        },
        NA: {
            path: "M474.26,330.66l-0.97,0.04l-0.38,0.4l-0.07,8.9l-2.09,0.08l-0.39,0.4l-0.0,17.42l-1.98,1.23l-1.17,0.17l-2.44,-0.66l-0.48,-1.13l-0.99,-0.74l-0.54,0.05l-0.9,1.01l-1.53,-1.68l-0.93,-1.88l-1.99,-8.56l-0.06,-3.12l-0.33,-1.52l-2.3,-3.34l-1.91,-4.83l-1.96,-2.43l-0.12,-1.57l2.33,-0.79l1.43,0.07l1.81,1.13l10.23,-0.25l1.84,1.23l5.87,0.35ZM474.66,330.64l6.51,-1.6l1.9,0.39l-1.69,0.4l-1.31,0.83l-1.12,-0.94l-4.29,0.92Z",
            name: "Namibia"
        },
        NC: {
            path: "M838.78,341.24l-0.33,0.22l-2.9,-1.75l-3.26,-3.37l1.65,0.83l4.85,4.07Z",
            name: "New Caledonia"
        },
        NE: {
            path: "M454.75,226.53l1.33,1.37l0.48,0.07l1.27,-0.7l0.53,3.52l0.94,0.83l0.17,0.92l0.81,0.69l-0.44,0.95l-0.96,5.26l-0.13,3.22l-3.04,2.31l-1.22,3.57l1.02,1.24l-0.0,1.46l0.39,0.4l1.13,0.04l-0.9,1.25l-1.47,-2.42l-0.86,-0.29l-2.09,1.37l-1.74,-0.67l-1.45,-0.17l-0.85,0.35l-1.36,-0.07l-1.64,1.09l-1.06,0.05l-2.94,-1.28l-1.44,0.59l-1.01,-0.03l-0.97,-0.94l-2.7,-0.98l-2.69,0.3l-0.87,0.64l-0.47,1.6l-0.75,1.16l-0.12,1.53l-1.57,-1.1l-1.31,0.24l0.03,-0.81l-0.32,-0.41l-2.59,-0.52l-0.15,-1.16l-1.35,-1.6l-0.29,-1.0l0.13,-0.84l1.29,-0.08l1.08,-0.92l3.31,-0.22l2.22,-0.41l0.32,-0.34l0.2,-1.47l1.39,-1.88l-0.01,-5.66l3.36,-1.12l7.24,-5.12l8.42,-4.92l3.69,1.06Z",
            name: "Niger"
        },
        NG: {
            path: "M456.32,253.89l0.64,0.65l-0.28,1.04l-2.11,2.01l-2.03,5.18l-1.37,1.16l-1.15,3.18l-1.33,0.66l-1.46,-0.97l-1.21,0.16l-1.38,1.36l-0.91,0.24l-1.79,4.06l-2.33,0.81l-1.11,-0.07l-0.86,0.5l-1.71,-0.05l-1.19,-1.39l-0.89,-1.89l-1.77,-1.66l-3.95,-0.08l0.07,-5.21l0.42,-1.43l1.95,-2.3l-0.14,-0.91l0.43,-1.18l-0.53,-1.41l0.25,-2.92l0.72,-1.07l0.32,-1.34l0.46,-0.39l2.47,-0.28l2.34,0.89l1.15,1.02l1.28,0.04l1.22,-0.58l3.03,1.27l1.49,-0.14l1.36,-1.0l1.33,0.07l0.82,-0.35l3.45,0.8l1.82,-1.32l1.84,2.67l0.66,0.16Z",
            name: "Nigeria"
        },
        NZ: {
            path: "M857.8,379.65l1.86,3.12l0.44,0.18l0.3,-0.38l0.03,-1.23l0.38,0.27l0.57,2.31l2.02,0.94l1.81,0.27l1.57,-1.06l0.7,0.18l-1.15,3.59l-1.98,0.11l-0.74,1.2l0.2,1.11l-2.42,3.98l-1.49,0.92l-1.04,-0.85l1.21,-2.05l-0.81,-2.01l-2.63,-1.25l0.04,-0.57l1.82,-1.19l0.43,-2.34l-0.16,-2.03l-0.95,-1.82l-0.06,-0.72l-3.11,-3.64l-0.79,-1.52l1.56,1.45l1.76,0.66l0.65,2.34ZM853.83,393.59l0.57,1.24l0.59,0.16l1.42,-0.97l0.46,0.79l0.0,1.03l-2.47,3.48l-1.26,1.2l-0.06,0.5l0.55,0.87l-1.41,0.07l-2.33,1.38l-2.03,5.02l-3.02,2.16l-2.06,-0.06l-1.71,-1.04l-2.47,-0.2l-0.27,-0.73l1.22,-2.1l3.05,-2.94l1.62,-0.59l4.02,-2.82l1.57,-1.67l1.07,-2.16l0.88,-0.7l0.48,-1.75l1.24,-0.97l0.35,0.79Z",
            name: "New Zealand"
        },
        NP: {
            path: "M641.14,213.62l0.01,3.19l-1.74,0.04l-4.8,-0.86l-1.58,-1.39l-3.37,-0.34l-7.65,-3.7l0.8,-2.09l2.33,-1.7l1.77,0.75l2.49,1.76l1.38,0.41l0.99,1.35l1.9,0.52l1.99,1.17l5.49,0.9Z",
            name: "Nepal"
        },
        CI: {
            path: "M407.4,259.27l0.86,0.42l0.56,0.9l1.13,0.53l1.19,-0.61l0.97,-0.08l1.42,0.54l0.6,3.24l-1.03,2.08l-0.65,2.84l1.06,2.33l-0.06,0.53l-2.54,-0.47l-1.66,0.03l-3.06,0.46l-4.11,1.6l0.32,-3.06l-1.18,-1.31l-1.32,-0.66l0.42,-0.85l-0.2,-1.4l0.5,-0.67l0.01,-1.59l0.84,-0.32l0.26,-0.5l-1.15,-3.01l0.12,-0.5l0.51,-0.25l0.66,0.31l1.93,0.02l0.67,-0.71l0.71,-0.14l0.25,0.69l0.57,0.22l1.4,-0.61Z",
            name: "C\xf4te d'Ivoire"
        },
        CH: {
            path: "M444.62,156.35l-0.29,0.87l0.18,0.53l1.13,0.58l1.0,0.1l-0.1,0.65l-0.79,0.38l-1.72,-0.37l-0.45,0.23l-0.45,1.04l-0.75,0.06l-0.84,-0.4l-1.32,1.0l-0.96,0.12l-0.88,-0.55l-0.81,-1.3l-0.49,-0.16l-0.63,0.26l0.02,-0.65l1.71,-1.66l0.1,-0.56l0.93,0.08l0.58,-0.46l1.99,0.02l0.66,-0.61l2.19,0.79Z",
            name: "Switzerland"
        },
        CO: {
            path: "M242.07,254.93l-1.7,0.59l-0.59,1.18l-1.7,1.69l-0.38,1.93l-0.67,1.43l0.31,0.57l1.03,0.13l0.25,0.9l0.57,0.64l-0.04,2.34l1.64,1.42l3.16,-0.24l1.26,0.28l1.67,2.06l0.41,0.13l4.09,-0.39l0.45,0.22l-0.92,1.95l-0.2,1.8l0.52,1.83l0.75,1.05l-1.12,1.1l0.07,0.63l0.84,0.51l0.74,1.29l-0.39,-0.45l-0.59,-0.01l-0.71,0.74l-4.71,-0.05l-0.4,0.41l0.03,1.57l0.33,0.39l1.11,0.2l-1.68,0.4l-0.29,0.38l-0.01,1.82l1.16,1.14l0.34,1.25l-1.05,7.05l-1.04,-0.87l1.26,-1.99l-0.13,-0.56l-2.18,-1.23l-1.38,0.2l-1.14,-0.38l-1.27,0.61l-1.55,-0.26l-1.38,-2.46l-1.23,-0.75l-0.85,-1.2l-1.67,-1.19l-0.86,0.13l-2.11,-1.32l-1.01,0.31l-1.8,-0.29l-0.52,-0.91l-3.09,-1.68l0.77,-0.52l-0.1,-1.12l0.41,-0.64l1.34,-0.32l2.0,-2.88l-0.11,-0.57l-0.66,-0.43l0.39,-1.38l-0.52,-2.1l0.49,-0.83l-0.4,-2.13l-0.97,-1.35l0.17,-0.66l0.86,-0.08l0.47,-0.75l-0.46,-1.63l1.41,-0.07l1.8,-1.69l0.93,-0.24l0.3,-0.38l0.45,-2.76l1.22,-1.0l1.44,-0.04l0.45,-0.5l1.91,0.12l2.93,-1.84l1.15,-1.14l0.91,0.46l-0.25,0.45Z",
            name: "Colombia"
        },
        CN: {
            path: "M740.23,148.97l4.57,1.3l2.8,2.17l0.98,2.9l0.38,0.27l3.8,0.0l2.32,-1.28l3.29,-0.75l-0.96,2.09l-1.02,1.28l-0.85,3.4l-1.52,2.73l-2.76,-0.5l-2.4,1.13l-0.21,0.45l0.64,2.57l-0.32,3.2l-0.94,0.06l-0.37,0.89l-0.91,-1.01l-0.64,0.07l-0.92,1.57l-3.73,1.25l-0.26,0.48l0.26,1.06l-1.5,-0.08l-1.09,-0.86l-0.56,0.06l-1.67,2.06l-2.7,1.56l-2.03,1.88l-3.4,0.83l-1.93,1.4l-1.15,0.34l0.33,-0.7l-0.41,-0.89l1.79,-1.79l0.02,-0.54l-1.32,-1.56l-0.48,-0.1l-2.24,1.09l-2.83,2.06l-1.51,1.83l-2.28,0.13l-1.55,1.49l-0.04,0.5l1.32,1.97l2.0,0.58l0.31,1.35l1.98,0.84l3.0,-1.96l2.0,1.02l1.49,0.11l0.22,0.83l-3.37,0.86l-1.12,1.48l-2.5,1.52l-1.29,1.99l0.14,0.56l2.57,1.48l0.97,2.7l3.17,4.63l-0.03,1.66l-1.35,0.65l-0.2,0.51l0.6,1.47l1.4,0.91l-0.89,3.82l-1.43,0.38l-3.85,6.44l-2.27,3.11l-6.78,4.57l-2.73,0.29l-1.45,1.04l-0.62,-0.61l-0.55,-0.01l-1.36,1.25l-3.39,1.27l-2.61,0.4l-1.1,2.79l-0.81,0.09l-0.49,-1.42l0.5,-0.85l-0.25,-0.59l-3.36,-0.84l-1.3,0.4l-2.31,-0.62l-0.94,-0.84l0.33,-1.28l-0.3,-0.49l-2.19,-0.46l-1.13,-0.93l-0.47,-0.02l-2.06,1.36l-4.29,0.28l-2.76,1.05l-0.28,0.43l0.32,2.53l-0.59,-0.03l-0.19,-1.34l-0.55,-0.34l-1.68,0.7l-2.46,-1.23l0.62,-1.87l-0.26,-0.51l-1.37,-0.44l-0.54,-2.22l-0.45,-0.3l-2.13,0.35l0.24,-2.48l2.39,-2.4l0.03,-4.31l-1.19,-0.92l-0.78,-1.49l-0.41,-0.21l-1.41,0.19l-1.98,-0.3l0.46,-1.07l-1.17,-1.7l-0.55,-0.11l-1.63,1.05l-2.25,-0.57l-2.89,1.73l-2.25,1.98l-1.75,0.29l-1.17,-0.71l-3.31,-0.65l-1.48,0.79l-1.04,1.27l-0.12,-1.17l-0.54,-0.34l-1.44,0.54l-5.55,-0.86l-1.98,-1.16l-1.89,-0.54l-0.99,-1.35l-1.34,-0.37l-2.55,-1.79l-2.01,-0.84l-1.21,0.56l-5.57,-3.45l-0.53,-2.31l1.19,0.25l0.48,-0.37l0.08,-1.42l-0.98,-1.56l0.15,-2.44l-2.69,-3.32l-4.12,-1.23l-0.67,-2.0l-1.92,-1.48l-0.38,-0.7l-0.51,-3.01l-1.52,-0.66l-0.7,0.13l-0.48,-2.05l0.55,-0.51l-0.09,-0.82l2.03,-1.19l1.6,-0.54l2.56,0.38l0.42,-0.22l0.85,-1.7l3.0,-0.33l1.1,-1.26l4.05,-1.77l0.39,-0.91l-0.17,-1.44l1.45,-0.67l0.2,-0.52l-2.07,-4.9l4.51,-1.12l1.37,-0.73l1.89,-5.51l4.98,0.86l1.51,-1.7l0.11,-2.87l1.99,-0.38l1.83,-2.06l0.49,-0.13l0.68,2.08l2.23,1.77l3.44,1.16l1.55,2.29l-0.92,3.49l0.96,1.67l6.54,1.13l2.95,1.87l1.47,0.35l1.06,2.62l1.53,1.91l3.05,0.08l5.14,0.67l3.37,-0.41l2.36,0.43l3.65,1.8l3.06,0.04l1.45,0.88l2.87,-1.59l3.95,-1.02l3.83,-0.14l3.06,-1.14l1.77,-1.6l1.72,-1.01l0.17,-0.49l-1.1,-2.05l1.02,-1.54l4.02,0.8l2.45,-1.61l3.76,-1.19l1.96,-2.13l1.63,-0.83l3.51,-0.4l1.92,0.34l0.46,-0.3l0.17,-1.5l-2.27,-2.22l-2.11,-1.09l-2.18,1.11l-2.32,-0.47l-1.29,0.32l-0.4,-0.82l2.73,-5.16l3.02,1.06l3.53,-2.06l0.18,-1.68l2.16,-3.35l1.49,-1.35l-0.03,-1.85l-1.07,-0.85l1.54,-1.26l2.98,-0.59l3.23,-0.09l3.64,0.99l2.04,1.16l3.29,6.71l0.92,3.19ZM696.92,237.31l-1.87,1.08l-1.63,-0.64l-0.06,-1.79l1.03,-0.98l2.58,-0.69l1.16,0.05l0.3,0.54l-0.98,1.06l-0.53,1.37Z",
            name: "China"
        },
        CM: {
            path: "M457.92,257.49l1.05,1.91l-1.4,0.16l-1.05,-0.23l-0.45,0.22l-0.54,1.19l0.08,0.45l1.48,1.47l1.05,0.45l1.01,2.46l-1.52,2.99l-0.68,0.68l-0.13,3.69l2.38,3.84l1.09,0.8l0.24,2.48l-3.67,-1.14l-11.27,-0.13l0.23,-1.79l-0.98,-1.66l-1.19,-0.54l-0.44,-0.97l-0.6,-0.42l1.71,-4.27l0.75,-0.13l1.38,-1.36l0.65,-0.03l1.71,0.99l1.93,-1.12l1.14,-3.18l1.38,-1.17l2.0,-5.14l2.17,-2.13l0.3,-1.64l-0.86,-0.88l0.03,-0.33l0.94,1.28l0.07,3.22Z",
            name: "Cameroon"
        },
        CL: {
            path: "M246.5,429.18l-3.14,1.83l-0.57,3.16l-0.64,0.05l-2.68,-1.06l-2.82,-2.33l-3.04,-1.89l-0.69,-1.85l0.63,-2.14l-1.21,-2.11l-0.31,-5.37l1.01,-2.91l2.57,-2.38l-0.18,-0.68l-3.16,-0.77l2.05,-2.47l0.77,-4.65l2.32,0.9l0.54,-0.29l1.31,-6.31l-0.22,-0.44l-1.68,-0.8l-0.56,0.28l-0.7,3.36l-0.81,-0.22l1.56,-9.41l1.15,-2.24l-0.71,-2.82l-0.18,-2.84l1.01,-0.33l3.26,-9.14l1.07,-4.22l-0.56,-4.21l0.74,-2.34l-0.29,-3.27l1.46,-3.34l2.04,-16.59l-0.66,-7.76l1.03,-0.53l0.54,-0.9l0.79,1.14l0.32,1.78l1.25,1.16l-0.69,2.55l1.33,2.9l0.97,3.59l0.46,0.29l1.5,-0.3l0.11,0.23l-0.76,2.44l-2.57,1.23l-0.23,0.37l0.08,4.33l-0.46,0.77l0.56,1.21l-1.58,1.51l-1.68,2.62l-0.89,2.47l0.2,2.7l-1.48,2.73l1.12,5.09l0.64,0.61l-0.01,2.29l-1.38,2.68l0.01,2.4l-1.89,2.04l0.02,2.75l0.69,2.57l-1.43,1.13l-1.26,5.68l0.39,3.51l-0.97,0.89l0.58,3.5l1.02,1.14l-0.65,1.02l0.15,0.57l1.0,0.53l0.16,0.69l-1.03,0.85l0.26,1.75l-0.89,4.03l-1.31,2.66l0.24,1.75l-0.71,1.83l-1.99,1.7l0.3,3.67l0.88,1.19l1.58,0.01l0.01,2.21l1.04,1.95l5.98,0.63ZM248.69,430.79l0.0,7.33l0.4,0.4l3.52,0.05l-0.44,0.75l-1.94,0.98l-2.49,-0.37l-1.88,-1.06l-2.55,-0.49l-5.59,-3.71l-2.38,-2.63l4.1,2.48l3.32,1.23l0.45,-0.12l1.29,-1.57l0.83,-2.32l2.05,-1.24l1.31,0.29Z",
            name: "Chile"
        },
        CA: {
            path: "M280.06,145.6l-1.67,2.88l0.07,0.49l0.5,0.04l1.46,-0.98l1.0,0.42l-0.56,0.72l0.17,0.62l2.22,0.89l1.35,-0.71l1.95,0.78l-0.66,2.01l0.5,0.51l1.32,-0.42l0.98,3.17l-0.91,2.41l-0.8,0.08l-1.23,-0.45l0.47,-2.25l-0.89,-0.83l-0.48,0.06l-2.78,2.63l-0.34,-0.02l1.02,-0.85l-0.14,-0.69l-2.4,-0.77l-7.4,0.08l-0.17,-0.41l1.3,-0.94l0.02,-0.64l-0.73,-0.58l1.85,-1.74l2.57,-5.16l1.47,-1.79l1.99,-1.05l0.46,0.06l-1.53,2.45ZM68.32,74.16l4.13,0.95l4.02,2.14l2.61,0.4l2.47,-1.89l2.88,-1.31l3.85,0.48l3.71,-1.94l3.82,-1.04l1.56,1.68l0.49,0.08l1.87,-1.04l0.65,-1.98l1.24,0.35l4.16,3.94l0.54,0.01l2.75,-2.49l0.26,2.59l0.49,0.35l3.08,-0.73l1.04,-1.27l2.73,0.23l3.83,1.86l5.86,1.61l3.47,0.75l2.44,-0.26l2.73,1.78l-2.98,1.81l-0.19,0.41l0.31,0.32l4.53,0.92l6.87,-0.5l2.0,-0.69l2.49,2.39l0.53,0.02l2.72,-2.16l-0.02,-0.64l-2.16,-1.54l1.15,-1.06l4.83,-0.61l1.84,0.95l2.48,2.31l3.01,-0.23l4.55,1.92l3.85,-0.67l3.61,0.1l0.41,-0.44l-0.25,-2.36l1.79,-0.61l3.49,1.32l-0.01,3.77l0.31,0.39l0.45,-0.22l1.48,-3.16l1.74,0.1l0.41,-0.3l1.13,-4.37l-2.78,-3.11l-2.8,-1.74l0.19,-4.64l2.71,-3.07l2.98,0.67l2.41,1.95l3.19,4.8l-1.99,1.97l0.21,0.68l4.33,0.84l-0.01,4.15l0.25,0.37l0.44,-0.09l3.07,-3.15l2.54,2.39l-0.61,3.33l2.42,2.88l0.61,0.0l2.61,-3.08l1.88,-3.82l0.17,-4.58l6.72,0.94l3.13,2.04l0.13,1.82l-1.76,2.19l-0.01,0.49l1.66,2.16l-0.26,1.71l-4.68,2.8l-3.28,0.61l-2.47,-1.2l-0.55,0.23l-0.73,2.04l-2.38,3.43l-0.74,1.77l-2.74,2.57l-3.44,0.25l-2.21,1.78l-0.28,2.53l-2.82,0.55l-3.12,3.22l-2.72,4.31l-1.03,3.17l-0.14,4.31l0.33,0.41l3.44,0.57l2.24,5.95l0.45,0.23l3.4,-0.69l4.52,1.51l2.43,1.31l1.91,1.73l3.1,0.96l2.62,1.46l6.6,0.54l-0.35,2.74l0.81,3.53l1.81,3.78l3.83,3.3l0.45,0.04l2.1,-1.28l1.37,-3.69l-1.31,-5.38l-1.45,-1.58l3.57,-1.47l2.84,-2.46l1.52,-2.8l-0.25,-2.55l-1.7,-3.07l-2.85,-2.61l2.8,-3.95l-1.08,-3.37l-0.79,-5.67l1.36,-0.7l6.76,1.41l2.12,-0.96l5.12,3.36l1.05,1.61l4.08,0.26l-0.06,2.87l0.83,4.7l0.3,0.32l2.16,0.54l1.73,2.06l0.5,0.09l3.63,-2.03l2.52,-4.19l1.26,-1.32l7.6,11.72l-0.92,2.04l0.16,0.51l3.3,1.97l2.22,1.98l4.1,0.98l1.43,0.99l0.95,2.79l2.1,0.68l0.84,1.08l0.17,3.45l-3.37,2.26l-4.22,1.24l-3.06,2.63l-4.06,0.51l-5.35,-0.69l-6.39,0.2l-2.3,2.41l-3.26,1.51l-6.47,7.15l-0.06,0.48l0.44,0.19l2.13,-0.52l4.17,-4.24l5.12,-2.62l3.52,-0.3l1.69,1.21l-2.12,2.21l0.81,3.47l1.02,2.61l3.47,1.6l4.14,-0.45l2.15,-2.8l0.26,1.48l1.14,0.8l-2.56,1.69l-5.5,1.82l-2.54,1.27l-2.74,2.15l-1.4,-0.16l-0.07,-2.01l4.14,-2.44l0.18,-0.45l-0.39,-0.29l-6.63,0.45l-1.39,-1.49l-0.14,-4.43l-1.11,-0.91l-1.82,0.39l-0.66,-0.66l-0.6,0.03l-1.91,2.39l-0.82,2.52l-0.8,1.27l-1.67,0.56l-0.46,0.76l-8.31,0.07l-1.21,0.62l-2.35,1.97l-0.71,-0.14l-1.37,0.96l-1.12,-0.48l-4.74,1.26l-0.9,1.17l0.21,0.62l1.73,0.3l-1.81,0.31l-1.85,0.81l-2.11,-0.13l-2.95,1.78l-0.69,-0.09l1.39,-2.1l1.73,-1.21l0.1,-2.29l1.16,-1.99l0.49,0.53l2.03,0.42l1.2,-1.16l0.02,-0.47l-2.66,-3.51l-2.28,-0.61l-5.64,-0.71l-0.4,-0.57l-0.79,0.13l0.2,-0.41l-0.22,-0.55l-0.68,-0.26l0.19,-1.26l-0.78,-0.73l0.31,-0.64l-0.29,-0.57l-2.6,-0.44l-0.75,-1.63l-0.94,-0.66l-4.31,-0.65l-1.13,1.19l-1.48,0.59l-0.85,1.06l-2.83,-0.76l-2.09,0.39l-2.39,-0.97l-4.24,-0.7l-0.57,-0.4l-0.41,-1.63l-0.4,-0.3l-0.85,0.02l-0.39,0.4l-0.01,0.85l-69.13,-0.01l-6.51,-4.52l-4.5,-1.38l-1.26,-2.66l0.33,-1.93l-0.23,-0.43l-3.01,-1.35l-0.55,-2.77l-2.89,-2.38l-0.04,-1.45l1.39,-1.83l-0.28,-2.55l-4.16,-2.2l-4.07,-6.6l-4.02,-3.22l-1.3,-1.88l-0.5,-0.13l-2.51,1.21l-2.23,1.87l-3.85,-3.88l-2.44,-1.04l-2.22,-0.13l0.03,-37.49ZM260.37,148.65l3.04,0.76l2.26,1.2l-3.78,-0.95l-1.53,-1.01ZM249.4,3.81l6.68,0.49l5.32,0.79l4.26,1.57l-0.07,1.1l-5.85,2.53l-6.02,1.21l-2.39,1.39l-0.18,0.45l0.39,0.29l4.01,-0.02l-4.65,2.82l-4.2,1.74l-4.19,4.59l-5.03,0.92l-1.67,1.15l-7.47,0.59l-0.37,0.37l0.32,0.42l2.41,0.49l-0.81,0.47l-0.12,0.59l1.83,2.41l-2.02,1.59l-3.81,1.51l-1.32,2.16l-3.38,1.53l-0.22,0.48l0.35,1.19l0.4,0.29l3.88,-0.18l0.03,0.61l-6.33,2.95l-6.41,-1.4l-7.43,0.79l-3.72,-0.62l-4.4,-0.25l-0.23,-1.83l4.29,-1.11l0.28,-0.51l-1.1,-3.45l1.0,-0.25l6.58,2.28l0.47,-0.16l-0.05,-0.49l-3.41,-3.45l-3.58,-0.98l1.48,-1.55l4.34,-1.29l0.97,-2.19l-0.16,-0.48l-3.42,-2.13l-0.81,-2.26l6.2,0.22l2.24,0.58l3.91,-2.1l0.2,-0.43l-0.35,-0.32l-5.64,-0.67l-8.73,0.36l-4.26,-1.9l-2.12,-2.4l-2.78,-1.66l-0.41,-1.52l3.31,-1.03l2.93,-0.2l4.91,-0.99l3.7,-2.27l2.87,0.3l2.62,1.67l0.56,-0.14l1.82,-3.2l3.13,-0.94l4.44,-0.69l7.53,-0.26l1.48,0.67l7.19,-1.06l10.8,0.79ZM203.85,57.54l0.01,0.42l1.97,2.97l0.68,-0.02l2.24,-3.72l5.95,-1.86l4.01,4.64l-0.35,2.91l0.5,0.43l4.95,-1.36l2.32,-1.8l5.31,2.28l3.27,2.11l0.3,1.84l0.48,0.33l4.42,-0.99l2.64,2.87l5.97,1.77l2.06,1.72l2.11,3.71l-4.19,1.86l-0.01,0.73l5.9,2.83l3.94,0.94l3.78,3.95l3.46,0.25l-0.63,2.37l-4.11,4.47l-2.76,-1.56l-3.9,-3.94l-3.59,0.41l-0.33,0.34l-0.19,2.72l2.63,2.38l3.42,1.89l0.94,0.97l1.55,3.75l-0.7,2.29l-2.74,-0.92l-6.25,-3.15l-0.51,0.13l0.05,0.52l6.07,5.69l0.18,0.59l-6.09,-1.39l-5.31,-2.24l-2.63,-1.66l0.6,-0.77l-0.12,-0.6l-7.39,-4.01l-0.59,0.37l0.03,0.79l-6.73,0.6l-1.69,-1.1l1.36,-2.46l4.51,-0.07l5.15,-0.52l0.31,-0.6l-0.74,-1.3l0.78,-1.84l3.21,-4.05l-0.67,-2.35l-1.11,-1.6l-3.84,-2.1l-4.35,-1.28l0.91,-0.63l0.06,-0.61l-2.65,-2.75l-2.34,-0.36l-1.89,-1.46l-0.53,0.03l-1.24,1.23l-4.36,0.55l-9.04,-0.99l-9.26,-1.98l-1.6,-1.22l2.22,-1.77l0.13,-0.44l-0.38,-0.27l-3.22,-0.02l-0.72,-4.25l1.83,-4.04l2.42,-1.85l5.5,-1.1l-1.39,2.35ZM261.19,159.33l2.07,0.61l1.44,-0.04l-1.15,0.63l-2.94,-1.23l-0.4,-0.68l0.36,-0.37l0.61,1.07ZM230.83,84.39l-2.37,0.18l-0.49,-1.63l0.93,-2.09l1.94,-0.51l1.62,0.99l0.02,1.52l-1.66,1.54ZM229.43,58.25l0.11,0.65l-4.87,-0.21l-2.72,0.62l-3.1,-2.57l0.08,-1.26l0.86,-0.23l5.57,0.51l4.08,2.5ZM222.0,105.02l-0.72,1.49l-0.63,-0.19l-0.48,-0.84l0.81,-0.99l0.65,0.05l0.37,0.46ZM183.74,38.32l2.9,1.7l4.79,-0.01l1.84,1.46l-0.49,1.68l0.23,0.48l2.82,1.14l1.76,1.26l7.01,0.65l4.1,-1.1l5.03,-0.43l3.93,0.35l2.48,1.77l0.46,1.7l-1.3,1.1l-3.56,1.01l-3.23,-0.59l-7.17,0.76l-5.09,0.09l-3.99,-0.6l-6.42,-1.54l-0.79,-2.51l-0.3,-2.49l-2.64,-2.5l-5.32,-0.72l-2.52,-1.4l0.68,-1.57l4.78,0.31ZM207.38,91.35l0.4,1.56l0.56,0.26l1.06,-0.52l1.32,0.96l5.42,2.57l0.2,1.68l0.46,0.35l1.68,-0.28l1.15,0.85l-1.55,0.87l-3.61,-0.88l-1.32,-1.69l-0.57,-0.06l-2.45,2.1l-3.12,1.79l-0.7,-1.87l-0.42,-0.26l-2.16,0.24l1.39,-1.39l0.32,-3.14l0.76,-3.35l1.18,0.22ZM215.49,102.6l-2.67,1.95l-1.4,-0.07l-0.3,-0.58l1.53,-1.48l2.84,0.18ZM202.7,24.12l2.53,1.59l-2.87,1.4l-4.53,4.05l-4.25,0.38l-5.03,-0.68l-2.45,-2.04l0.03,-1.62l1.82,-1.37l0.14,-0.45l-0.38,-0.27l-4.45,0.04l-2.59,-1.76l-1.41,-2.29l1.57,-2.32l1.62,-1.66l2.44,-0.39l0.25,-0.65l-0.6,-0.74l4.86,-0.25l3.24,3.11l8.16,2.3l1.9,3.61ZM187.47,59.2l-2.76,3.49l-2.38,-0.15l-1.44,-3.84l0.04,-2.2l1.19,-1.88l2.3,-1.23l5.07,0.17l4.11,1.02l-3.24,3.72l-2.88,0.89ZM186.07,48.79l-1.08,1.53l-3.34,-0.34l-2.56,-1.1l1.03,-1.75l3.25,-1.23l1.95,1.58l0.75,1.3ZM185.71,35.32l-5.3,-0.2l-0.32,-0.71l4.31,0.07l1.3,0.84ZM180.68,32.48l-3.34,1.0l-1.79,-1.1l-0.98,-1.87l-0.15,-1.73l4.1,0.53l2.67,1.7l-0.51,1.47ZM180.9,76.31l-1.1,1.08l-3.13,-1.23l-2.12,0.43l-2.71,-1.57l1.72,-1.09l1.55,-1.72l3.81,1.9l1.98,2.2ZM169.74,54.87l2.96,0.97l4.17,-0.57l0.41,0.88l-2.14,2.11l0.09,0.64l3.55,1.92l-0.4,3.72l-3.79,1.65l-2.17,-0.35l-1.72,-1.74l-6.02,-3.5l0.03,-0.85l4.68,0.54l0.4,-0.21l-0.05,-0.45l-2.48,-2.81l2.46,-1.95ZM174.45,40.74l1.37,1.73l0.07,2.44l-1.05,3.45l-3.79,0.47l-2.32,-0.69l0.05,-2.64l-0.44,-0.41l-3.68,0.35l-0.12,-3.1l2.45,0.1l3.67,-1.73l3.41,0.29l0.37,-0.26ZM170.05,31.55l0.67,1.56l-3.33,-0.49l-4.22,-1.77l-4.35,-0.16l1.4,-0.94l-0.06,-0.7l-2.81,-1.23l-0.12,-1.39l4.39,0.68l6.62,1.98l1.81,2.47ZM134.5,58.13l-1.02,1.82l0.45,0.58l5.4,-1.39l3.33,2.29l0.49,-0.03l2.6,-2.23l1.94,1.32l2.0,4.5l0.7,0.06l1.3,-2.29l-1.63,-4.46l1.69,-0.54l2.31,0.71l2.65,1.81l2.49,7.92l8.48,4.27l-0.19,1.35l-3.79,0.33l-0.26,0.67l1.4,1.49l-0.58,1.1l-4.23,-0.64l-4.43,-1.19l-3.0,0.28l-4.66,1.47l-10.52,1.04l-1.43,-2.02l-3.42,-1.2l-2.21,0.43l-2.51,-2.86l4.84,-1.05l3.6,0.19l3.27,-0.78l0.31,-0.39l-0.31,-0.39l-4.84,-1.06l-8.79,0.27l-0.85,-1.07l5.26,-1.66l0.27,-0.45l-0.4,-0.34l-3.8,0.06l-3.81,-1.06l1.81,-3.01l1.66,-1.79l6.48,-2.81l1.97,0.71ZM158.7,56.61l-1.7,2.44l-3.2,-2.75l0.37,-0.3l3.11,-0.18l1.42,0.79ZM149.61,42.73l1.01,1.89l0.5,0.18l2.14,-0.82l2.23,0.19l0.36,2.04l-1.33,2.09l-8.28,0.76l-6.35,2.15l-3.41,0.1l-0.19,-0.96l4.9,-2.08l0.23,-0.46l-0.41,-0.31l-11.25,0.59l-2.89,-0.74l3.04,-4.44l2.14,-1.32l6.81,1.69l4.58,3.06l4.37,0.39l0.36,-0.63l-3.36,-4.6l1.85,-1.53l2.18,0.51l0.77,2.26ZM144.76,34.41l-4.36,1.44l-3.0,-1.4l1.46,-1.24l3.47,-0.52l2.96,0.71l-0.52,1.01ZM145.13,29.83l-1.9,0.66l-3.67,-0.0l2.27,-1.61l3.3,0.95ZM118.92,65.79l-6.03,2.02l-1.33,-1.9l-5.38,-2.28l2.59,-5.05l2.16,-3.14l-0.02,-0.48l-1.97,-2.41l7.64,-0.7l3.6,1.02l6.3,0.27l4.42,2.95l-2.53,0.98l-6.24,3.43l-3.1,3.28l-0.11,2.01ZM129.54,35.53l-0.28,3.37l-1.72,1.62l-2.33,0.28l-4.61,2.19l-3.86,0.76l-2.64,-0.87l3.72,-3.4l5.01,-3.34l3.72,0.07l3.0,-0.67ZM111.09,152.69l-0.67,0.24l-3.85,-1.37l-0.83,-1.17l-2.12,-1.07l-0.66,-1.02l-2.4,-0.55l-0.74,-1.71l6.02,1.45l2.0,2.55l2.52,1.39l0.73,1.27ZM87.8,134.64l0.89,0.29l1.86,-0.21l-0.65,3.34l1.69,2.33l-1.31,-1.33l-0.99,-1.62l-1.17,-0.98l-0.33,-1.82Z",
            name: "Canada"
        },
        CG: {
            path: "M466.72,276.48l-0.1,1.03l-1.25,2.97l-0.19,3.62l-0.46,1.78l-0.23,0.63l-1.61,1.19l-1.21,1.39l-1.09,2.43l0.04,2.09l-3.25,3.24l-0.5,-0.24l-0.5,-0.83l-1.36,-0.02l-0.98,0.89l-1.68,-0.99l-1.54,1.24l-1.52,-1.96l1.57,-1.14l0.11,-0.52l-0.77,-1.35l2.1,-0.66l0.39,-0.73l1.05,0.82l2.21,0.11l1.12,-1.37l0.37,-1.81l-0.27,-2.09l-1.13,-1.5l1.0,-2.69l-0.13,-0.45l-0.92,-0.58l-1.6,0.17l-0.51,-0.94l0.1,-0.61l2.75,0.09l3.97,1.24l0.51,-0.33l0.17,-1.28l1.24,-2.21l1.28,-1.14l2.76,0.49Z",
            name: "Congo"
        },
        CF: {
            path: "M461.16,278.2l-0.26,-1.19l-1.09,-0.77l-0.84,-1.17l-0.29,-1.0l-1.04,-1.15l0.08,-3.43l0.58,-0.49l1.16,-2.35l1.85,-0.17l0.61,-0.62l0.97,0.58l3.15,-0.96l2.48,-1.92l0.02,-0.96l2.81,0.02l2.36,-1.17l1.93,-2.85l1.16,-0.93l1.11,-0.3l0.27,0.86l1.34,1.47l-0.39,2.01l0.3,1.01l4.01,2.75l0.17,0.93l2.63,2.31l0.6,1.44l2.08,1.4l-3.84,-0.21l-1.94,0.88l-1.23,-0.49l-2.67,1.2l-1.29,-0.18l-0.51,0.36l-0.6,1.22l-3.35,-0.65l-1.57,-0.91l-2.42,-0.83l-1.45,0.91l-0.97,1.27l-0.26,1.56l-3.22,-0.43l-1.49,1.33l-0.94,1.62Z",
            name: "Central African Rep."
        },
        CD: {
            path: "M487.01,272.38l2.34,-0.14l1.35,1.84l1.34,0.45l0.86,-0.39l1.21,0.12l1.07,-0.41l0.54,0.89l2.04,1.54l-0.14,2.72l0.7,0.54l-1.38,1.13l-1.53,2.54l-0.17,2.05l-0.59,1.08l-0.02,1.72l-0.72,0.84l-0.66,3.01l0.63,1.32l-0.44,4.26l0.64,1.47l-0.37,1.22l0.86,1.8l1.53,1.41l0.3,1.26l0.44,0.5l-4.08,0.75l-0.92,1.81l0.51,1.34l-0.74,5.43l0.17,0.38l2.45,1.46l0.54,-0.1l0.12,1.62l-1.28,-0.01l-1.85,-2.35l-1.94,-0.45l-0.48,-1.13l-0.55,-0.2l-1.41,0.74l-1.71,-0.3l-1.01,-1.18l-2.49,-0.19l-0.44,-0.77l-1.98,-0.21l-2.88,0.36l0.11,-2.41l-0.85,-1.13l-0.16,-1.36l0.32,-1.73l-0.46,-0.89l-0.04,-1.49l-0.4,-0.39l-2.53,0.02l0.1,-0.41l-0.39,-0.49l-1.28,0.01l-0.43,0.45l-1.62,0.32l-0.83,1.79l-1.09,-0.28l-2.4,0.52l-1.37,-1.91l-1.3,-3.3l-0.38,-0.27l-7.39,-0.03l-2.46,0.42l0.5,-0.45l0.37,-1.47l0.66,-0.38l0.92,0.08l0.73,-0.82l0.87,0.02l0.31,0.68l1.4,0.36l3.59,-3.63l0.01,-2.23l1.02,-2.29l2.69,-2.39l0.43,-0.99l0.49,-1.96l0.17,-3.51l1.25,-2.95l0.36,-3.14l0.86,-1.13l1.1,-0.66l3.57,1.73l3.65,0.73l0.46,-0.21l0.8,-1.46l1.24,0.19l2.61,-1.17l0.81,0.44l1.04,-0.03l0.59,-0.66l0.7,-0.16l1.81,0.25Z",
            name: "Dem. Rep. Congo"
        },
        CZ: {
            path: "M458.46,144.88l1.22,1.01l1.47,0.23l0.13,0.93l1.36,0.68l0.54,-0.2l0.24,-0.55l1.15,0.25l0.53,1.09l1.68,0.18l0.6,0.84l-1.04,0.73l-0.96,1.28l-1.6,0.17l-0.55,0.56l-1.04,-0.46l-1.05,0.15l-2.12,-0.96l-1.05,0.34l-1.2,1.12l-1.56,-0.87l-2.57,-2.1l-0.53,-1.88l4.7,-2.52l0.71,0.26l0.9,-0.28Z",
            name: "Czech Rep."
        },
        CY: {
            path: "M504.36,193.47l0.43,0.28l-1.28,0.57l-0.92,-0.28l-0.24,-0.46l2.01,-0.13Z",
            name: "Cyprus"
        },
        CR: {
            path: "M211.34,258.05l0.48,0.99l1.6,1.6l-0.54,0.45l0.29,1.42l-0.25,1.19l-1.09,-0.59l-0.05,-1.25l-2.46,-1.42l-0.28,-0.77l-0.66,-0.45l-0.45,-0.0l-0.11,1.04l-1.32,-0.95l0.31,-1.3l-0.36,-0.6l0.31,-0.27l1.42,0.58l1.29,-0.14l0.56,0.56l0.74,0.17l0.55,-0.27Z",
            name: "Costa Rica"
        },
        CU: {
            path: "M221.21,227.25l1.27,1.02l2.19,-0.28l4.43,3.33l2.08,0.43l-0.1,0.38l0.36,0.5l1.75,0.1l1.48,0.84l-3.11,0.51l-4.15,-0.03l0.77,-0.67l-0.04,-0.64l-1.2,-0.74l-1.49,-0.16l-0.7,-0.61l-0.56,-1.4l-0.4,-0.25l-1.34,0.1l-2.2,-0.66l-0.88,-0.58l-3.18,-0.4l-0.27,-0.16l0.58,-0.74l-0.36,-0.29l-2.72,-0.05l-1.7,1.29l-0.91,0.03l-0.61,0.69l-1.01,0.22l1.11,-1.29l1.01,-0.52l3.69,-1.01l3.98,0.21l2.21,0.84Z",
            name: "Cuba"
        },
        SZ: {
            path: "M500.35,351.36l0.5,2.04l-0.38,0.89l-1.05,0.21l-1.23,-1.2l-0.02,-0.64l0.83,-1.57l1.34,0.27Z",
            name: "Swaziland"
        },
        SY: {
            path: "M511.0,199.79l0.05,-1.33l0.54,-1.36l1.28,-0.99l0.13,-0.45l-0.41,-1.11l-1.14,-0.36l-0.19,-1.74l0.52,-1.0l1.29,-1.21l0.2,-1.18l0.59,0.23l2.62,-0.76l1.36,0.52l2.06,-0.01l2.95,-1.08l3.25,-0.26l-0.67,0.94l-1.28,0.66l-0.21,0.4l0.23,2.01l-0.88,3.19l-10.15,5.73l-2.15,-0.85Z",
            name: "Syria"
        },
        KG: {
            path: "M621.35,172.32l-3.87,1.69l-0.96,1.18l-3.04,0.34l-1.13,1.86l-2.36,-0.35l-1.99,0.63l-2.39,1.4l0.06,0.95l-0.4,0.37l-4.52,0.43l-3.02,-0.93l-2.37,0.17l0.11,-0.79l2.32,0.42l1.13,-0.88l1.99,0.2l3.21,-2.14l-0.03,-0.69l-2.97,-1.57l-1.94,0.65l-1.22,-0.74l1.71,-1.58l-0.12,-0.67l-0.36,-0.15l0.32,-0.77l1.36,-0.35l4.02,1.02l0.49,-0.3l0.35,-1.59l1.09,-0.48l3.42,1.22l1.11,-0.31l7.64,0.39l1.16,1.0l1.23,0.39Z",
            name: "Kyrgyzstan"
        },
        KE: {
            path: "M506.26,284.69l1.87,-2.56l0.93,-2.15l-1.38,-4.08l-1.06,-1.6l2.82,-2.75l0.79,0.26l0.12,1.41l0.86,0.83l1.9,0.11l3.28,2.13l3.57,0.44l1.05,-1.12l1.96,-0.9l0.82,0.68l1.16,0.09l-1.78,2.45l0.03,9.12l1.3,1.94l-1.37,0.78l-0.67,1.03l-1.08,0.46l-0.34,1.67l-0.81,1.07l-0.45,1.55l-0.68,0.56l-3.2,-2.23l-0.35,-1.58l-8.86,-4.98l0.14,-1.6l-0.57,-1.04Z",
            name: "Kenya"
        },
        SS: {
            path: "M481.71,263.34l1.07,-0.72l1.2,-3.18l1.36,-0.26l1.61,1.99l0.87,0.34l1.1,-0.41l1.5,0.07l0.57,0.53l2.49,0.0l0.44,-0.63l1.07,-0.4l0.45,-0.84l0.59,-0.33l1.9,1.33l1.6,-0.2l2.83,-3.33l-0.32,-2.21l1.59,-0.52l-0.24,1.6l0.3,1.83l1.35,1.18l0.2,1.87l0.35,0.41l0.02,1.53l-0.23,0.47l-1.42,0.25l-0.85,1.44l0.3,0.6l1.4,0.16l1.11,1.08l0.59,1.13l1.03,0.53l1.28,2.36l-4.41,3.98l-1.74,0.01l-1.89,0.55l-1.47,-0.52l-1.15,0.57l-2.96,-2.62l-1.3,0.49l-1.06,-0.15l-0.79,0.39l-0.82,-0.22l-1.8,-2.7l-1.91,-1.1l-0.66,-1.5l-2.62,-2.32l-0.18,-0.94l-2.37,-1.6Z",
            name: "S. Sudan"
        },
        SR: {
            path: "M283.12,270.19l2.1,0.53l-1.08,1.95l0.2,1.72l0.93,1.49l-0.59,2.03l-0.43,0.71l-1.12,-0.42l-1.32,0.22l-0.93,-0.2l-0.46,0.26l-0.25,0.73l0.33,0.7l-0.89,-0.13l-1.39,-1.97l-0.31,-1.34l-0.97,-0.31l-0.89,-1.47l0.35,-1.61l1.45,-0.82l0.33,-1.87l2.61,0.44l0.57,-0.47l1.75,-0.16Z",
            name: "Suriname"
        },
        KH: {
            path: "M689.52,249.39l0.49,1.45l-0.28,2.74l-4.0,1.86l-0.16,0.6l0.68,0.95l-2.06,0.17l-2.05,0.97l-1.82,-0.32l-2.12,-3.7l-0.55,-2.85l1.4,-1.85l3.02,-0.45l2.23,0.35l2.01,0.98l0.51,-0.14l0.95,-1.48l1.74,0.74Z",
            name: "Cambodia"
        },
        SV: {
            path: "M195.8,250.13l1.4,-1.19l2.24,1.45l0.98,-0.27l0.44,0.2l-0.27,1.05l-1.14,-0.03l-3.64,-1.21Z",
            name: "El Salvador"
        },
        SK: {
            path: "M476.82,151.17l-1.14,1.9l-2.73,-0.92l-0.82,0.2l-0.74,0.8l-3.46,0.73l-0.47,0.69l-1.76,0.33l-1.88,-1.0l-0.18,-0.81l0.38,-0.75l1.87,-0.32l1.74,-1.89l0.83,0.16l0.79,-0.34l1.51,1.04l1.34,-0.63l1.25,0.3l1.65,-0.42l1.81,0.95Z",
            name: "Slovakia"
        },
        KR: {
            path: "M737.51,185.84l0.98,-0.1l0.87,-1.17l2.69,-0.32l0.33,-0.29l1.76,2.79l0.58,1.76l0.02,3.12l-0.8,1.32l-2.21,0.55l-1.93,1.13l-1.8,0.19l-0.2,-1.1l0.43,-2.28l-0.95,-2.56l1.43,-0.37l0.23,-0.62l-1.43,-2.06Z",
            name: "Korea"
        },
        SI: {
            path: "M456.18,162.07l-0.51,-1.32l0.18,-1.05l1.69,0.2l1.42,-0.71l2.09,-0.07l0.62,-0.51l0.21,0.47l-1.61,0.67l-0.44,1.34l-0.66,0.24l-0.26,0.82l-1.22,-0.49l-0.84,0.46l-0.69,-0.04Z",
            name: "Slovenia"
        },
        KP: {
            path: "M736.77,185.16l-0.92,-0.42l-0.88,0.62l-1.21,-0.88l0.96,-1.15l0.59,-2.59l-0.46,-0.74l-2.09,-0.77l1.64,-1.52l2.72,-1.58l1.58,-1.91l1.11,0.78l2.17,0.11l0.41,-0.5l-0.3,-1.22l3.52,-1.18l0.94,-1.4l0.98,1.08l-2.19,2.18l0.01,2.14l-1.06,0.54l-1.41,1.4l-1.7,0.52l-1.25,1.09l-0.14,1.98l0.94,0.45l1.15,1.04l-0.13,0.26l-2.6,0.29l-1.13,1.29l-1.22,0.08Z",
            name: "Dem. Rep. Korea"
        },
        SO: {
            path: "M525.13,288.48l-1.13,-1.57l-0.03,-8.86l2.66,-3.38l1.67,-0.13l2.13,-1.69l3.41,-0.23l7.08,-7.55l2.91,-3.69l0.08,-4.82l2.98,-0.67l1.24,-0.86l0.45,-0.0l-0.2,3.0l-1.21,3.62l-2.73,5.97l-2.13,3.65l-5.03,6.16l-8.56,6.4l-2.78,3.08l-0.8,1.56Z",
            name: "Somalia"
        },
        SN: {
            path: "M390.09,248.21l0.12,1.55l0.49,1.46l0.96,0.82l0.05,1.28l-1.26,-0.19l-0.75,0.33l-1.84,-0.61l-5.84,-0.13l-2.54,0.51l-0.22,-1.03l1.77,0.04l2.01,-0.91l1.03,0.48l1.09,0.04l1.29,-0.62l0.14,-0.58l-0.51,-0.74l-1.81,0.25l-1.13,-0.63l-0.79,0.04l-0.72,0.61l-2.31,0.06l-0.92,-1.77l-0.81,-0.64l0.64,-0.35l2.46,-3.74l1.04,0.19l1.38,-0.56l1.19,-0.02l2.72,1.37l3.03,3.48Z",
            name: "Senegal"
        },
        SL: {
            path: "M394.46,264.11l-1.73,1.98l-0.58,1.33l-2.07,-1.06l-1.22,-1.26l-0.65,-2.39l1.16,-0.96l0.67,-1.17l1.21,-0.52l1.66,0.0l1.03,1.64l0.52,2.41Z",
            name: "Sierra Leone"
        },
        SB: {
            path: "M826.69,311.6l-0.61,0.09l-0.2,-0.33l0.37,0.15l0.44,0.09ZM824.18,307.38l-0.26,-0.3l-0.31,-0.91l0.03,0.0l0.54,1.21ZM823.04,309.33l-1.66,-0.22l-0.2,-0.52l1.16,0.28l0.69,0.46ZM819.28,304.68l1.14,0.65l0.02,0.03l-0.81,-0.44l-0.35,-0.23Z",
            name: "Solomon Is."
        },
        SA: {
            path: "M537.53,210.34l2.0,0.24l0.9,1.32l1.49,-0.06l0.87,2.08l1.29,0.76l0.51,0.99l1.56,1.03l-0.1,1.9l0.32,0.9l1.58,2.47l0.76,0.53l0.7,-0.04l1.68,4.23l7.53,1.33l0.51,-0.29l0.77,1.25l-1.55,4.87l-7.29,2.52l-7.3,1.03l-2.34,1.17l-1.88,2.74l-0.76,0.28l-0.82,-0.78l-0.91,0.12l-2.88,-0.51l-3.51,0.25l-0.86,-0.56l-0.57,0.15l-0.66,1.27l0.16,1.11l-0.43,0.32l-0.93,-1.4l-0.33,-1.16l-1.23,-0.88l-1.27,-2.06l-0.78,-2.22l-1.73,-1.79l-1.14,-0.48l-1.54,-2.31l-0.21,-3.41l-1.44,-2.93l-1.27,-1.16l-1.33,-0.57l-1.31,-3.37l-0.77,-0.67l-0.97,-1.97l-2.8,-4.03l-1.06,-0.17l0.37,-1.96l0.2,-0.72l2.74,0.3l1.08,-0.84l0.6,-0.94l1.74,-0.35l0.65,-1.03l0.71,-0.4l0.1,-0.62l-2.06,-2.28l4.39,-1.22l0.48,-0.37l2.77,0.69l3.66,1.9l7.03,5.5l4.87,0.3Z",
            name: "Saudi Arabia"
        },
        SE: {
            path: "M480.22,89.3l-4.03,1.17l-2.43,2.86l0.26,2.57l-8.77,6.64l-1.78,5.79l1.78,2.68l2.22,1.96l-2.07,3.77l-2.72,1.13l-0.95,6.04l-1.29,3.01l-2.74,-0.31l-0.4,0.22l-1.31,2.59l-2.34,0.13l-0.75,-3.09l-2.08,-4.03l-1.83,-4.96l1.0,-1.93l2.14,-2.7l0.83,-4.45l-1.6,-2.17l-0.15,-4.94l1.48,-3.39l2.58,-0.15l0.87,-1.59l-0.78,-1.57l3.76,-5.59l4.04,-7.48l2.17,0.01l0.39,-0.29l0.57,-2.07l4.37,0.64l0.46,-0.34l0.33,-2.56l1.1,-0.13l6.94,4.87l0.06,6.32l0.66,1.36Z",
            name: "Sweden"
        },
        SD: {
            path: "M505.98,259.4l-0.34,-0.77l-1.17,-0.9l-0.26,-1.61l0.29,-1.81l-0.34,-0.46l-1.16,-0.17l-0.54,0.59l-1.23,0.11l-0.28,0.65l0.53,0.65l0.17,1.22l-2.44,3.0l-0.96,0.19l-2.39,-1.4l-0.95,0.52l-0.38,0.78l-1.11,0.41l-0.29,0.5l-1.94,0.0l-0.54,-0.52l-1.81,-0.09l-0.95,0.4l-2.45,-2.35l-2.07,0.54l-0.73,1.26l-0.6,2.1l-1.25,0.58l-0.75,-0.62l0.27,-2.65l-1.48,-1.78l-0.22,-1.48l-0.92,-0.96l-0.02,-1.29l-0.57,-1.16l-0.68,-0.16l0.69,-1.29l-0.18,-1.14l0.65,-0.62l0.03,-0.55l-0.36,-0.41l1.55,-2.97l1.91,0.16l0.43,-0.4l-0.1,-10.94l2.49,-0.01l0.4,-0.4l-0.0,-4.82l29.02,0.0l0.64,2.04l-0.49,0.66l0.36,2.69l0.93,3.16l2.12,1.55l-0.89,1.04l-1.72,0.39l-0.98,0.9l-1.43,5.65l0.24,1.15l-0.38,2.06l-0.96,2.38l-1.53,1.31l-1.32,2.91l-1.22,0.86l-0.37,1.34Z",
            name: "Sudan"
        },
        DO: {
            path: "M241.8,239.2l0.05,-0.65l-0.46,-0.73l0.42,-0.44l0.19,-1.0l-0.09,-1.53l1.66,0.01l1.99,0.63l0.33,0.67l1.28,0.19l0.33,0.76l1.0,0.08l0.8,0.62l-0.45,0.51l-1.13,-0.47l-1.88,-0.01l-1.27,0.59l-0.75,-0.55l-1.01,0.54l-0.79,1.4l-0.23,-0.61Z",
            name: "Dominican Rep."
        },
        DJ: {
            path: "M528.43,256.18l-0.45,0.66l-0.58,-0.25l-1.51,0.13l-0.18,-1.01l1.45,-1.95l0.83,0.17l0.77,-0.44l0.2,1.0l-1.2,0.51l-0.06,0.7l0.73,0.47Z",
            name: "Djibouti"
        },
        DK: {
            path: "M452.28,129.07l-1.19,2.24l-2.13,-1.6l-0.23,-0.95l2.98,-0.95l0.57,1.26ZM447.74,126.31l-0.26,0.57l-0.88,-0.07l-1.8,2.53l0.48,1.69l-1.09,0.36l-1.61,-0.39l-0.89,-1.69l-0.07,-3.43l0.96,-1.73l2.02,-0.2l1.09,-1.07l1.33,-0.67l-0.05,1.06l-0.73,1.41l0.3,1.0l1.2,0.64Z",
            name: "Denmark"
        },
        DE: {
            path: "M453.14,155.55l-0.55,-0.36l-1.2,-0.1l-1.87,0.57l-2.13,-0.13l-0.56,0.63l-0.86,-0.6l-0.96,0.09l-2.57,-0.93l-0.85,0.67l-1.47,-0.02l0.24,-1.75l1.23,-2.14l-0.28,-0.59l-3.52,-0.58l-0.92,-0.66l0.12,-1.2l-0.48,-0.88l0.27,-2.17l-0.37,-3.03l1.41,-0.22l0.63,-1.26l0.66,-3.19l-0.41,-1.18l0.26,-0.39l1.66,-0.15l0.33,0.54l0.62,0.07l1.7,-1.69l-0.54,-3.02l1.37,0.33l1.31,-0.37l0.31,1.18l2.25,0.71l-0.02,0.92l0.5,0.4l2.55,-0.65l1.34,-0.87l2.57,1.24l1.06,0.98l0.48,1.44l-0.57,0.74l-0.0,0.48l0.87,1.15l0.57,1.64l-0.14,1.29l0.82,1.7l-1.5,-0.07l-0.56,0.57l-4.47,2.15l-0.22,0.54l0.68,2.26l2.58,2.16l-0.66,1.11l-0.79,0.36l-0.23,0.43l0.32,1.87Z",
            name: "Germany"
        },
        YE: {
            path: "M528.27,246.72l0.26,-0.42l-0.22,-1.01l0.19,-1.5l0.92,-0.69l-0.07,-1.35l0.39,-0.75l1.01,0.47l3.34,-0.27l3.76,0.41l0.95,0.81l1.36,-0.58l1.74,-2.62l2.18,-1.09l6.86,-0.94l2.48,5.41l-1.64,0.76l-0.56,1.9l-6.23,2.16l-2.29,1.8l-1.93,0.05l-1.41,1.02l-4.24,0.74l-1.72,1.49l-3.28,0.19l-0.52,-1.18l0.02,-1.51l-1.34,-3.29Z",
            name: "Yemen"
        },
        AT: {
            path: "M462.89,152.8l0.04,2.25l-1.07,0.0l-0.33,0.63l0.36,0.51l-1.04,2.13l-2.02,0.07l-1.33,0.7l-5.29,-0.99l-0.47,-0.93l-0.44,-0.21l-2.47,0.55l-0.42,0.51l-3.18,-0.81l0.43,-0.91l1.12,0.78l0.6,-0.17l0.25,-0.58l1.93,0.12l1.86,-0.56l1.0,0.08l0.68,0.57l0.62,-0.15l0.26,-0.77l-0.3,-1.78l0.8,-0.44l0.68,-1.15l1.52,0.85l0.47,-0.06l1.34,-1.25l0.64,-0.17l1.81,0.92l1.28,-0.11l0.7,0.37Z",
            name: "Austria"
        },
        DZ: {
            path: "M441.46,188.44l-0.32,1.07l0.39,2.64l-0.54,2.16l-1.58,1.82l0.37,2.39l1.91,1.55l0.18,0.8l1.42,1.03l1.84,7.23l0.12,1.16l-0.57,5.0l0.2,1.51l-0.87,0.99l-0.02,0.51l1.41,1.86l0.14,1.2l0.89,1.48l0.5,0.16l0.98,-0.41l1.73,1.08l0.82,1.23l-8.22,4.81l-7.23,5.11l-3.43,1.13l-2.3,0.21l-0.28,-1.59l-2.56,-1.09l-0.67,-1.25l-26.12,-17.86l0.01,-3.47l3.77,-1.88l2.44,-0.41l2.12,-0.75l1.08,-1.42l2.81,-1.05l0.35,-2.08l1.33,-0.29l1.04,-0.94l3.47,-0.69l0.46,-1.08l-0.1,-0.45l-0.58,-0.52l-0.82,-2.81l-0.19,-1.83l-0.78,-1.49l2.03,-1.31l2.63,-0.48l1.7,-1.22l2.31,-0.84l8.24,-0.73l1.49,0.38l2.28,-1.1l2.46,-0.02l0.92,0.6l1.35,-0.05Z",
            name: "Algeria"
        },
        US: {
            path: "M892.72,99.2l1.31,0.53l1.41,-0.37l1.89,0.98l1.89,0.42l-1.32,0.58l-2.9,-1.53l-2.08,0.22l-0.26,-0.15l0.07,-0.67ZM183.22,150.47l0.37,1.47l1.12,0.85l4.23,0.7l2.39,0.98l2.17,-0.38l1.85,0.5l-1.55,0.65l-3.49,2.61l-0.16,0.77l0.5,0.39l2.33,-0.61l1.77,1.02l5.15,-2.4l-0.31,0.65l0.25,0.56l1.36,0.38l1.71,1.16l4.7,-0.88l0.67,0.85l1.31,0.21l0.58,0.58l-1.34,0.17l-2.18,-0.32l-3.6,0.89l-2.71,3.25l0.35,0.9l0.59,-0.0l0.55,-0.6l-1.36,4.65l0.29,3.09l0.67,1.58l0.61,0.45l1.77,-0.44l1.6,-1.96l0.14,-2.21l-0.82,-1.96l0.11,-1.13l1.19,-2.37l0.44,-0.33l0.48,0.75l0.4,-0.29l0.4,-1.37l0.6,-0.47l0.24,-0.8l1.69,0.49l1.65,1.08l-0.03,2.37l-1.27,1.13l-0.0,1.13l0.87,0.36l1.66,-1.29l0.5,0.17l0.5,2.6l-2.49,3.75l0.17,0.61l1.54,0.62l1.48,0.17l1.92,-0.44l4.72,-2.15l2.16,-1.8l-0.05,-1.24l0.75,-0.22l3.92,0.36l2.12,-1.05l0.21,-0.4l-0.28,-1.48l3.27,-2.4l8.32,-0.02l0.56,-0.82l1.9,-0.77l0.93,-1.51l0.74,-2.37l1.58,-1.98l0.92,0.62l1.47,-0.47l0.8,0.66l-0.0,4.09l1.96,2.6l-2.34,1.31l-5.37,2.09l-1.83,2.72l0.02,1.79l0.83,1.59l0.54,0.23l-6.19,0.94l-2.2,0.89l-0.23,0.48l0.45,0.29l2.99,-0.46l-2.19,0.56l-1.13,0.0l-0.15,-0.32l-0.48,0.08l-0.76,0.82l0.22,0.67l0.32,0.06l-0.41,1.62l-1.27,1.58l-1.48,-1.07l-0.49,-0.04l-0.16,0.46l0.52,1.58l0.61,0.59l0.03,0.79l-0.95,1.38l-1.21,-1.22l-0.27,-2.27l-0.35,-0.35l-0.42,0.25l-0.48,1.27l0.33,1.41l-0.97,-0.27l-0.48,0.24l0.18,0.5l1.52,0.83l0.1,2.52l0.79,0.51l0.52,3.42l-1.42,1.88l-2.47,0.8l-1.71,1.66l-1.31,0.25l-1.27,1.03l-0.43,0.99l-2.69,1.78l-2.64,3.03l-0.45,2.12l0.45,2.08l0.85,2.38l1.09,1.9l0.04,1.2l1.16,3.06l-0.18,2.69l-0.55,1.43l-0.47,0.21l-0.89,-0.23l-0.49,-1.18l-0.87,-0.56l-2.75,-5.16l0.48,-1.68l-0.72,-1.78l-2.01,-2.38l-1.12,-0.53l-2.72,1.18l-1.47,-1.35l-1.57,-0.68l-2.99,0.31l-2.17,-0.3l-2.0,0.19l-1.15,0.46l-0.19,0.58l0.39,0.63l0.14,1.34l-0.84,-0.2l-0.84,0.46l-1.58,-0.07l-2.08,-1.44l-2.09,0.33l-1.91,-0.62l-3.73,0.84l-2.39,2.07l-2.54,1.22l-1.45,1.41l-0.61,1.38l0.34,3.71l-0.29,0.02l-3.5,-1.33l-1.25,-3.11l-1.44,-1.5l-2.24,-3.56l-1.76,-1.09l-2.27,-0.01l-1.71,2.07l-1.76,-0.69l-1.16,-0.74l-1.52,-2.98l-3.93,-3.16l-4.34,-0.0l-0.4,0.4l-0.0,0.74l-6.5,0.02l-9.02,-3.14l-0.34,-0.71l-5.7,0.49l-0.43,-1.29l-1.62,-1.61l-1.14,-0.38l-0.55,-0.88l-1.28,-0.13l-1.01,-0.77l-2.22,-0.27l-0.43,-0.3l-0.36,-1.58l-2.4,-2.83l-2.01,-3.85l-0.06,-0.9l-2.92,-3.26l-0.33,-2.29l-1.3,-1.66l0.52,-2.37l-0.09,-2.57l-0.78,-2.3l0.95,-2.82l0.61,-5.68l-0.47,-4.27l-1.46,-4.08l3.19,0.79l1.26,2.83l0.69,0.08l0.69,-1.14l-1.1,-4.79l68.76,-0.0l0.4,-0.4l0.14,-0.86ZM32.44,67.52l1.73,1.97l0.55,0.05l0.99,-0.79l3.65,0.24l-0.09,0.62l0.32,0.45l3.83,0.77l2.61,-0.43l5.19,1.4l4.84,0.43l1.89,0.57l3.42,-0.7l6.14,1.87l-0.03,38.06l0.38,0.4l2.39,0.11l2.31,0.98l3.9,3.99l0.55,0.04l2.4,-2.03l2.16,-1.04l1.2,1.71l3.95,3.14l4.09,6.63l4.2,2.29l0.06,1.83l-1.02,1.23l-1.16,-1.08l-2.04,-1.03l-0.67,-2.89l-3.28,-3.03l-1.65,-3.57l-6.35,-0.32l-2.82,-1.01l-5.26,-3.85l-6.77,-2.04l-3.53,0.3l-4.81,-1.69l-3.25,-1.63l-2.78,0.8l-0.28,0.46l0.44,2.21l-3.91,0.96l-2.26,1.27l-2.3,0.65l-0.27,-1.65l1.05,-3.42l2.49,-1.09l0.16,-0.6l-0.69,-0.96l-0.55,-0.1l-3.19,2.12l-1.78,2.56l-3.55,2.61l-0.04,0.61l1.56,1.52l-2.07,2.29l-5.11,2.57l-0.77,1.66l-3.76,1.77l-0.92,1.73l-2.69,1.38l-1.81,-0.22l-6.95,3.32l-3.97,0.91l4.85,-2.5l2.59,-1.86l3.26,-0.52l1.19,-1.4l3.42,-2.1l2.59,-2.27l0.42,-2.68l1.23,-2.1l-0.04,-0.46l-0.45,-0.11l-2.68,1.03l-0.63,-0.49l-0.53,0.03l-1.05,1.04l-1.36,-1.54l-0.66,0.08l-0.32,0.62l-0.58,-1.14l-0.56,-0.16l-2.41,1.42l-1.07,-0.0l-0.17,-1.75l0.3,-1.71l-1.61,-1.33l-3.41,0.59l-1.96,-1.63l-1.57,-0.84l-0.15,-2.21l-1.7,-1.43l0.82,-1.88l1.99,-2.12l0.88,-1.92l1.71,-0.24l2.04,0.51l1.87,-1.77l1.91,0.25l1.91,-1.23l0.17,-0.43l-0.47,-1.82l-1.07,-0.7l1.39,-1.17l0.12,-0.45l-0.39,-0.26l-1.65,0.07l-2.66,0.88l-0.75,0.78l-1.92,-0.8l-3.46,0.44l-3.44,-0.91l-1.06,-1.61l-2.65,-1.99l2.91,-1.43l5.5,-2.0l1.52,0.0l-0.26,1.62l0.41,0.46l5.29,-0.16l0.3,-0.65l-2.03,-2.59l-3.14,-1.68l-1.79,-2.12l-2.4,-1.83l-3.09,-1.24l1.04,-1.69l4.23,-0.14l3.36,-2.07l0.73,-2.27l2.39,-1.99l2.42,-0.52l4.65,-1.97l2.46,0.23l3.71,-2.35l3.5,0.89ZM37.6,123.41l-2.25,1.23l-0.95,-0.69l-0.29,-1.24l3.21,-1.63l1.42,0.21l0.67,0.7l-1.8,1.42ZM31.06,234.03l0.98,0.47l0.74,0.87l-1.77,1.07l-0.44,-1.53l0.49,-0.89ZM29.34,232.07l0.18,0.05l0.08,0.05l-0.16,0.03l-0.11,-0.14ZM25.16,230.17l0.05,-0.03l0.18,0.22l-0.13,-0.01l-0.1,-0.18ZM5.89,113.26l-1.08,0.41l-2.21,-1.12l1.53,-0.4l1.62,0.28l0.14,0.83Z",
            name: "United States"
        },
        LV: {
            path: "M489.16,122.85l0.96,0.66l0.22,1.65l0.68,1.76l-3.65,1.7l-2.23,-1.58l-1.29,-0.26l-0.68,-0.77l-2.42,0.34l-4.16,-0.23l-2.47,0.9l0.06,-1.98l1.13,-2.06l1.95,-1.02l2.12,2.58l2.01,-0.07l0.38,-0.33l0.44,-2.52l1.76,-0.53l3.06,1.7l2.15,0.07Z",
            name: "Latvia"
        },
        UY: {
            path: "M286.85,372.74l-0.92,1.5l-2.59,1.44l-1.69,-0.52l-1.42,0.26l-2.39,-1.19l-1.52,0.08l-1.27,-1.3l0.16,-1.5l0.56,-0.79l-0.02,-2.73l1.21,-4.74l1.19,-0.21l2.37,2.0l1.08,0.03l4.36,3.17l1.22,1.6l-0.96,1.5l0.61,1.4Z",
            name: "Uruguay"
        },
        LB: {
            path: "M510.37,198.01l-0.88,0.51l1.82,-3.54l0.62,0.08l0.22,0.61l-1.13,0.88l-0.65,1.47Z",
            name: "Lebanon"
        },
        LA: {
            path: "M689.54,248.53l-1.76,-0.74l-0.49,0.15l-0.94,1.46l-1.32,-0.64l0.62,-0.98l0.11,-2.17l-2.04,-2.42l-0.25,-2.65l-1.9,-2.1l-2.15,-0.31l-0.78,0.91l-1.12,0.06l-1.05,-0.4l-2.06,1.2l-0.04,-1.59l0.61,-2.68l-0.36,-0.49l-1.35,-0.1l-0.11,-1.23l-0.96,-0.88l1.96,-1.89l0.39,0.36l1.33,0.07l0.42,-0.45l-0.34,-2.66l0.7,-0.21l1.28,1.81l1.11,2.35l0.36,0.23l2.82,0.02l0.71,1.67l-1.39,0.65l-0.72,0.93l0.13,0.6l2.91,1.51l3.6,5.25l1.88,1.78l0.56,1.62l-0.35,1.96Z",
            name: "Lao PDR"
        },
        TW: {
            path: "M724.01,226.68l-0.74,1.48l-0.9,-1.52l-0.25,-1.74l1.38,-2.44l1.73,-1.74l0.64,0.44l-1.85,5.52Z",
            name: "Taiwan"
        },
        TT: {
            path: "M266.64,259.32l0.28,-1.16l1.13,-0.22l-0.06,1.2l-1.35,0.18Z",
            name: "Trinidad and Tobago"
        },
        TR: {
            path: "M513.21,175.47l3.64,1.17l3.05,-0.44l2.1,0.26l3.11,-1.56l2.46,-0.13l2.19,1.33l0.33,0.82l-0.22,1.33l0.25,0.44l2.28,1.13l-1.17,0.57l-0.21,0.45l0.75,3.2l-0.41,1.16l1.13,1.92l-0.55,0.22l-0.9,-0.67l-2.91,-0.37l-1.24,0.46l-4.23,0.41l-2.81,1.05l-1.91,0.01l-1.52,-0.53l-2.58,0.75l-0.66,-0.45l-0.62,0.3l-0.12,1.45l-0.89,0.84l-0.47,-0.67l0.79,-1.3l-0.41,-0.2l-1.43,0.23l-2.0,-0.63l-2.02,1.65l-3.51,0.3l-2.13,-1.53l-2.7,-0.1l-0.86,1.24l-1.38,0.27l-2.29,-1.44l-2.71,-0.01l-1.37,-2.65l-1.68,-1.52l1.07,-1.99l-0.09,-0.49l-1.27,-1.12l2.37,-2.41l3.7,-0.11l1.28,-2.24l4.49,0.37l3.21,-1.97l2.81,-0.82l3.99,-0.06l4.29,2.07ZM488.79,176.72l-1.72,1.31l-0.5,-0.88l1.37,-2.57l-0.7,-0.85l1.7,-0.63l1.8,0.34l0.46,1.17l1.76,0.78l-2.87,0.32l-1.3,1.01Z",
            name: "Turkey"
        },
        LK: {
            path: "M624.16,268.99l-1.82,0.48l-0.99,-1.67l-0.42,-3.46l0.95,-3.43l1.21,0.98l2.26,4.19l-0.34,2.33l-0.85,0.58Z",
            name: "Sri Lanka"
        },
        TN: {
            path: "M448.1,188.24l-1.0,1.27l-0.02,1.32l0.84,0.88l-0.28,2.09l-1.53,1.32l-0.12,0.42l0.48,1.54l1.42,0.32l0.53,1.11l0.9,0.52l-0.11,1.67l-3.54,2.64l-0.1,2.38l-0.58,0.3l-0.96,-4.45l-1.54,-1.25l-0.16,-0.78l-1.92,-1.56l-0.18,-1.76l1.51,-1.62l0.59,-2.34l-0.38,-2.78l0.42,-1.21l2.45,-1.05l1.29,0.26l-0.06,1.11l0.58,0.38l1.47,-0.73Z",
            name: "Tunisia"
        },
        TL: {
            path: "M734.55,307.93l-0.1,-0.97l4.5,-0.86l-2.82,1.28l-1.59,0.55Z",
            name: "Timor-Leste"
        },
        TM: {
            path: "M553.03,173.76l-0.04,0.34l-0.09,-0.22l0.13,-0.12ZM555.87,172.66l0.45,-0.1l1.48,0.74l2.06,2.43l4.07,-0.18l0.38,-0.51l-0.32,-1.19l1.92,-0.94l1.91,-1.59l2.94,1.39l0.43,2.47l1.19,0.67l2.58,-0.13l0.62,0.4l1.32,3.12l4.54,3.44l2.67,1.45l3.06,1.14l-0.04,1.05l-1.33,-0.75l-0.59,0.19l-0.32,0.84l-2.2,0.81l-0.46,2.13l-1.21,0.74l-1.91,0.42l-0.73,1.33l-1.56,0.31l-2.22,-0.94l-0.2,-2.17l-0.38,-0.36l-1.73,-0.09l-2.76,-2.46l-2.14,-0.4l-2.84,-1.48l-1.78,-0.27l-1.24,0.53l-1.57,-0.08l-2.0,1.69l-1.7,0.43l-0.36,-1.58l0.36,-2.98l-0.22,-0.4l-1.65,-0.84l0.54,-1.69l-0.34,-0.52l-1.22,-0.13l0.36,-1.64l2.22,0.59l2.2,-0.95l0.12,-0.65l-1.77,-1.74l-0.66,-1.57Z",
            name: "Turkmenistan"
        },
        TJ: {
            path: "M597.75,178.82l-2.54,-0.44l-0.47,0.34l-0.24,1.7l0.43,0.45l2.64,-0.22l3.18,0.95l4.39,-0.41l0.56,2.37l0.52,0.29l0.67,-0.24l1.11,0.49l0.21,2.13l-3.76,-0.21l-1.8,1.32l-1.76,0.74l-0.61,-0.58l0.21,-2.23l-0.64,-0.49l-0.07,-0.93l-1.36,-0.66l-0.45,0.07l-1.08,1.01l-0.55,1.48l-1.31,-0.05l-0.95,1.16l-0.9,-0.35l-1.86,0.74l1.26,-2.83l-0.54,-2.17l-1.67,-0.82l0.33,-0.66l2.18,-0.04l1.19,-1.63l0.76,-1.79l2.43,-0.5l-0.26,1.0l0.73,1.05Z",
            name: "Tajikistan"
        },
        LS: {
            path: "M491.06,363.48l-0.49,0.15l-1.49,-1.67l1.1,-1.43l2.19,-1.44l1.51,1.27l-0.98,1.82l-1.23,0.38l-0.62,0.93Z",
            name: "Lesotho"
        },
        TH: {
            path: "M670.27,255.86l-1.41,3.87l0.15,2.0l0.38,0.36l1.38,0.07l0.9,2.04l0.55,2.34l1.4,1.44l1.61,0.38l0.96,0.97l-0.5,0.64l-1.1,0.2l-0.34,-1.18l-2.04,-1.1l-0.63,0.23l-0.63,-0.62l-0.48,-1.3l-2.56,-2.63l-0.73,0.41l0.95,-3.89l2.16,-4.22ZM670.67,254.77l-0.92,-2.18l-0.26,-2.61l-2.14,-3.06l0.71,-0.49l0.89,-2.59l-3.61,-5.45l0.87,-0.51l1.05,-2.58l1.74,-0.18l2.6,-1.59l0.76,0.56l0.13,1.39l0.37,0.36l1.23,0.09l-0.51,2.28l0.05,2.42l0.6,0.34l2.43,-1.42l0.77,0.39l1.47,-0.07l0.71,-0.88l1.48,0.14l1.71,1.88l0.25,2.65l1.92,2.11l-0.1,1.89l-0.61,0.86l-2.22,-0.33l-3.5,0.64l-1.6,2.12l0.36,2.58l-1.51,-0.79l-1.84,-0.01l0.28,-1.52l-0.4,-0.47l-2.21,0.01l-0.4,0.37l-0.19,2.74l-0.34,0.93Z",
            name: "Thailand"
        },
        TF: {
            path: "M596.68,420.38l-3.2,0.18l-0.05,-1.26l0.39,-1.41l1.3,0.78l2.08,0.35l-0.52,1.36Z",
            name: "Fr. S. Antarctic Lands"
        },
        TG: {
            path: "M422.7,257.63l-0.09,1.23l1.53,1.52l0.08,1.09l0.5,0.65l-0.11,5.62l0.49,1.47l-1.31,0.35l-1.02,-2.13l-0.18,-1.12l0.53,-2.19l-0.63,-1.16l-0.22,-3.68l-1.01,-1.4l0.07,-0.28l1.37,0.03Z",
            name: "Togo"
        },
        TD: {
            path: "M480.25,235.49l0.12,9.57l-2.1,0.05l-1.14,1.89l-0.69,1.63l0.34,0.73l-0.66,0.91l0.24,0.89l-0.86,1.95l0.45,0.5l0.6,-0.1l0.34,0.64l0.03,1.38l0.9,1.04l-1.45,0.43l-1.27,1.03l-1.83,2.76l-2.16,1.07l-2.31,-0.15l-0.86,0.25l-0.26,0.49l0.17,0.61l-2.11,1.68l-2.85,0.87l-1.09,-0.57l-0.73,0.66l-1.12,0.1l-1.1,-3.12l-1.25,-0.64l-1.22,-1.22l0.29,-0.64l3.01,0.04l0.35,-0.6l-1.3,-2.2l-0.08,-3.31l-0.97,-1.66l0.22,-1.04l-0.38,-0.48l-1.22,-0.04l0.0,-1.25l-0.98,-1.07l0.96,-3.01l3.25,-2.65l0.13,-3.33l0.95,-5.18l0.52,-1.07l-0.1,-0.48l-0.91,-0.78l-0.2,-0.96l-0.8,-0.58l-0.55,-3.65l2.1,-1.2l19.57,9.83Z",
            name: "Chad"
        },
        LY: {
            path: "M483.48,203.15l-0.75,1.1l0.29,1.39l-0.6,1.83l0.73,2.14l0.0,24.12l-2.48,0.01l-0.41,0.85l-19.41,-9.76l-4.41,2.28l-1.37,-1.33l-3.82,-1.1l-1.14,-1.65l-1.98,-1.23l-1.22,0.32l-0.66,-1.11l-0.17,-1.26l-1.28,-1.69l0.87,-1.19l-0.07,-4.34l0.43,-2.27l-0.86,-3.45l1.13,-0.76l0.22,-1.16l-0.2,-1.03l3.48,-2.61l0.29,-1.94l2.45,0.8l1.18,-0.21l1.98,0.44l3.15,1.18l1.37,2.54l5.72,1.67l2.64,1.35l1.61,-0.72l1.29,-1.34l-0.44,-2.34l0.66,-1.13l1.67,-1.21l1.57,-0.35l3.14,0.53l1.08,1.28l3.99,0.78l0.36,0.54Z",
            name: "Libya"
        },
        AE: {
            path: "M550.76,223.97l1.88,-0.4l3.84,0.02l4.78,-4.75l0.19,0.36l0.26,1.58l-0.81,0.01l-0.39,0.35l-0.08,2.04l-0.81,0.63l-0.01,0.96l-0.66,0.99l-0.39,1.41l-7.08,-1.25l-0.7,-1.96Z",
            name: "United Arab Emirates"
        },
        VE: {
            path: "M240.68,256.69l0.53,0.75l-0.02,1.06l-1.07,1.78l0.95,2.0l0.42,0.22l1.4,-0.44l0.56,-1.83l-0.77,-1.17l-0.1,-1.47l2.82,-0.93l0.26,-0.49l-0.28,-0.96l0.3,-0.28l0.66,1.31l1.96,0.26l1.4,1.22l0.08,0.68l0.39,0.35l4.81,-0.22l1.49,1.11l1.92,0.31l1.67,-0.84l0.22,-0.6l3.44,-0.14l-0.17,0.55l0.86,1.19l2.19,0.35l1.67,1.1l0.37,1.86l0.41,0.32l1.55,0.17l-1.66,1.35l-0.22,0.92l0.65,0.97l-1.67,0.54l-0.3,0.4l0.04,0.99l-0.56,0.57l-0.01,0.55l1.85,2.27l-0.66,0.69l-4.47,1.29l-0.72,0.54l-3.69,-0.9l-0.71,0.27l-0.02,0.7l0.91,0.53l-0.08,1.54l0.35,1.58l0.35,0.31l1.66,0.17l-1.3,0.52l-0.48,1.13l-2.68,0.91l-0.6,0.77l-1.57,0.13l-1.17,-1.13l-0.8,-2.52l-1.25,-1.26l1.02,-1.23l-1.29,-2.95l0.18,-1.62l1.0,-2.21l-0.2,-0.49l-1.14,-0.46l-4.02,0.36l-1.82,-2.1l-1.57,-0.33l-2.99,0.22l-1.06,-0.97l0.25,-1.23l-0.2,-1.01l-0.59,-0.69l-0.29,-1.06l-1.08,-0.39l0.78,-2.79l1.9,-2.11Z",
            name: "Venezuela"
        },
        AF: {
            path: "M600.7,188.88l-1.57,1.3l-0.1,0.48l0.8,2.31l-1.09,1.04l-0.03,1.27l-0.48,0.71l-2.16,-0.08l-0.37,0.59l0.78,1.48l-1.38,0.69l-1.06,1.69l0.06,1.7l-0.65,0.52l-0.91,-0.21l-1.91,0.36l-0.48,0.77l-1.88,0.13l-1.4,1.56l-0.18,2.32l-2.91,1.02l-1.65,-0.23l-0.71,0.55l-1.41,-0.3l-2.41,0.39l-3.52,-1.17l1.96,-2.35l-0.21,-1.78l-0.3,-0.34l-1.63,-0.4l-0.19,-1.58l-0.75,-2.03l0.95,-1.36l-0.19,-0.6l-0.73,-0.28l1.47,-4.8l2.14,0.9l2.12,-0.36l0.74,-1.34l1.77,-0.39l1.54,-0.92l0.63,-2.31l1.87,-0.5l0.49,-0.81l0.94,0.56l2.13,0.11l2.55,0.92l1.95,-0.83l0.65,0.43l0.56,-0.13l0.69,-1.12l1.57,-0.08l0.72,-1.66l0.79,-0.74l0.8,0.39l-0.17,0.56l0.71,0.58l-0.08,2.39l1.11,0.95ZM601.37,188.71l1.73,-0.71l1.43,-1.18l4.03,0.35l-2.23,0.74l-4.95,0.8Z",
            name: "Afghanistan"
        },
        IQ: {
            path: "M530.82,187.47l0.79,0.66l1.26,-0.28l1.46,3.08l1.63,0.94l0.14,1.23l-1.22,1.05l-0.53,2.52l1.73,2.67l3.12,1.62l1.15,1.88l-0.38,1.85l0.39,0.48l0.41,-0.0l0.02,1.07l0.76,0.94l-2.47,-0.1l-1.71,2.44l-4.31,-0.2l-7.02,-5.48l-3.73,-1.94l-2.88,-0.73l-0.85,-2.87l5.45,-3.02l0.95,-3.43l-0.19,-1.96l1.27,-0.7l1.22,-1.7l0.87,-0.36l2.69,0.34Z",
            name: "Iraq"
        },
        IS: {
            path: "M384.14,88.06l-0.37,2.61l2.54,2.51l-2.9,2.75l-9.19,3.4l-9.25,-1.66l1.7,-1.22l-0.1,-0.7l-4.05,-1.47l2.96,-0.53l0.33,-0.43l-0.11,-1.2l-0.33,-0.36l-4.67,-0.85l1.28,-2.04l3.45,-0.56l3.77,2.72l0.44,0.02l3.64,-2.16l3.3,1.08l3.98,-2.16l3.58,0.26Z",
            name: "Iceland"
        },
        IR: {
            path: "M533.43,187.16l-1.27,-2.15l0.42,-0.98l-0.71,-3.04l1.03,-0.5l0.33,0.83l1.26,1.35l2.05,0.51l1.11,-0.16l2.89,-2.11l0.62,-0.14l0.39,0.46l-0.72,1.2l0.06,0.49l1.56,1.53l0.65,0.04l0.67,1.81l2.56,0.83l1.87,1.48l3.69,0.49l3.91,-0.76l0.47,-0.73l2.17,-0.6l1.66,-1.54l1.51,0.08l1.18,-0.53l1.59,0.24l2.83,1.48l1.88,0.3l2.77,2.47l1.77,0.18l0.18,1.99l-1.68,5.49l0.24,0.5l0.61,0.23l-0.82,1.48l0.8,2.18l0.19,1.71l0.3,0.34l1.63,0.4l0.15,1.32l-2.15,2.35l-0.01,0.53l2.21,3.03l2.34,1.24l0.06,2.14l1.24,0.72l0.11,0.69l-3.31,1.27l-1.08,3.03l-9.68,-1.68l-0.99,-3.05l-1.43,-0.73l-2.17,0.46l-2.47,1.26l-2.83,-0.82l-2.46,-2.02l-2.41,-0.8l-3.42,-6.06l-0.48,-0.2l-1.18,0.39l-1.44,-0.82l-0.5,0.08l-0.65,0.74l-0.97,-1.01l-0.02,-1.31l-0.71,-0.39l0.26,-1.81l-1.29,-2.11l-3.13,-1.63l-1.58,-2.43l0.5,-1.9l1.31,-1.26l-0.19,-1.66l-1.74,-1.1l-1.57,-3.3Z",
            name: "Iran"
        },
        AM: {
            path: "M536.99,182.33l-0.28,0.03l-1.23,-2.13l-0.93,0.01l-0.62,-0.66l-0.69,-0.07l-0.96,-0.81l-1.56,-0.62l0.19,-1.12l-0.26,-0.79l2.72,-0.36l1.09,1.01l-0.17,0.92l1.02,0.78l-0.47,0.62l0.08,0.56l2.04,1.23l0.04,1.4Z",
            name: "Armenia"
        },
        IT: {
            path: "M451.59,158.63l3.48,0.94l-0.21,1.17l0.3,0.83l-1.49,-0.24l-2.04,1.1l-0.21,0.39l0.13,1.45l-0.25,1.12l0.82,1.57l2.39,1.63l1.31,2.54l2.79,2.43l2.05,0.08l0.21,0.23l-0.39,0.33l0.09,0.67l4.05,1.97l2.17,1.76l-0.16,0.36l-1.17,-1.08l-2.18,-0.49l-0.44,0.2l-1.05,1.91l0.14,0.54l1.57,0.95l-0.19,0.98l-1.06,0.33l-1.25,2.34l-0.37,0.08l0.0,-0.33l1.0,-2.45l-1.73,-3.17l-1.12,-0.51l-0.88,-1.33l-1.51,-0.51l-1.27,-1.25l-1.75,-0.18l-4.12,-3.21l-1.62,-1.65l-1.03,-3.19l-3.53,-1.36l-1.3,0.51l-1.69,1.41l0.16,-0.72l-0.28,-0.47l-1.14,-0.33l-0.53,-1.96l0.72,-0.78l0.04,-0.48l-0.65,-1.17l0.8,0.39l1.4,-0.23l1.11,-0.84l0.52,0.35l1.19,-0.1l0.75,-1.2l1.53,0.33l1.36,-0.56l0.35,-1.14l1.08,0.32l0.68,-0.64l1.98,-0.44l0.42,0.82ZM459.19,184.75l-0.65,1.65l0.32,1.05l-0.31,0.89l-1.5,-0.85l-4.5,-1.67l0.19,-0.82l2.67,0.23l3.78,-0.48ZM443.93,176.05l1.18,1.66l-0.3,3.32l-1.06,-0.01l-0.77,0.73l-0.53,-0.44l-0.1,-3.37l-0.39,-1.22l1.04,0.01l0.92,-0.68Z",
            name: "Italy"
        },
        VN: {
            path: "M690.56,230.25l-2.7,1.82l-2.09,2.46l-0.63,1.95l4.31,6.45l2.32,1.65l1.43,1.94l1.11,4.59l-0.32,4.24l-1.93,1.54l-2.84,1.61l-2.11,2.15l-2.73,2.06l-0.59,-1.05l0.63,-1.53l-0.13,-0.47l-1.34,-1.04l1.51,-0.71l2.55,-0.18l0.3,-0.63l-0.82,-1.14l4.0,-2.07l0.31,-3.05l-0.57,-1.77l0.42,-2.66l-0.73,-1.97l-1.86,-1.76l-3.63,-5.29l-2.72,-1.46l0.36,-0.47l1.5,-0.64l0.21,-0.52l-0.97,-2.27l-0.37,-0.24l-2.83,-0.02l-2.24,-3.9l0.83,-0.4l4.39,-0.29l2.06,-1.31l1.15,0.89l1.88,0.4l-0.17,1.51l1.35,1.16l1.67,0.45Z",
            name: "Vietnam"
        },
        AR: {
            path: "M249.29,428.93l-2.33,-0.52l-5.83,-0.43l-0.89,-1.66l0.05,-2.37l-0.45,-0.4l-1.43,0.18l-0.67,-0.91l-0.2,-3.13l1.88,-1.47l0.79,-2.04l-0.25,-1.7l1.3,-2.68l0.91,-4.15l-0.22,-1.69l0.85,-0.45l0.2,-0.44l-0.27,-1.16l-0.98,-0.68l0.59,-0.92l-0.05,-0.5l-1.04,-1.07l-0.52,-3.1l0.97,-0.86l-0.42,-3.58l1.2,-5.43l1.38,-0.98l0.16,-0.43l-0.75,-2.79l-0.01,-2.43l1.78,-1.75l0.06,-2.57l1.43,-2.85l0.01,-2.58l-0.69,-0.74l-1.09,-4.52l1.47,-2.7l-0.18,-2.79l0.85,-2.35l1.59,-2.46l1.73,-1.64l0.05,-0.52l-0.6,-0.84l0.44,-0.85l-0.07,-4.19l2.7,-1.44l0.86,-2.75l-0.21,-0.71l1.76,-2.01l2.9,0.57l1.38,1.78l0.68,-0.08l0.87,-1.87l2.39,0.09l4.95,4.77l2.17,0.49l3.0,1.92l2.47,1.0l0.25,0.82l-2.37,3.93l0.23,0.59l5.39,1.16l2.12,-0.44l2.45,-2.16l0.5,-2.38l0.76,-0.31l0.98,1.2l-0.04,1.8l-3.67,2.51l-2.85,2.66l-3.43,3.88l-1.3,5.07l0.01,2.72l-0.54,0.73l-0.36,3.28l3.14,2.64l-0.16,2.11l1.4,1.11l-0.1,1.09l-2.29,3.52l-3.55,1.49l-4.92,0.6l-2.71,-0.29l-0.43,0.51l0.5,1.65l-0.49,2.1l0.38,1.42l-1.19,0.83l-2.36,0.38l-2.3,-1.04l-1.38,0.83l0.41,3.64l1.69,0.91l1.4,-0.71l0.36,0.76l-2.04,0.86l-2.01,1.89l-0.97,4.63l-2.34,0.1l-2.09,1.78l-0.61,2.75l2.46,2.31l2.17,0.63l-0.7,2.32l-2.83,1.73l-1.73,3.86l-2.17,1.22l-1.16,1.67l0.75,3.76l1.04,1.28ZM256.71,438.88l-2.0,0.15l-1.4,-1.22l-3.82,-0.1l-0.0,-5.83l1.6,3.05l3.26,2.07l3.08,0.78l-0.71,1.1Z",
            name: "Argentina"
        },
        AU: {
            path: "M705.8,353.26l0.26,0.04l0.17,-0.47l-0.48,-1.42l0.92,1.11l0.45,0.15l0.27,-0.39l-0.1,-1.56l-1.98,-3.63l1.09,-3.31l-0.24,-1.57l0.34,-0.62l0.38,1.06l0.43,-0.19l0.99,-1.7l1.91,-0.83l1.29,-1.15l1.81,-0.91l0.96,-0.17l0.92,0.26l1.92,-0.95l1.47,-0.28l1.03,-0.8l1.43,0.04l2.78,-0.84l1.36,-1.15l0.71,-1.45l1.41,-1.26l0.3,-2.58l1.27,-1.59l0.78,1.65l0.54,0.19l1.07,-0.51l0.15,-0.6l-0.73,-1.0l0.45,-0.71l0.78,0.39l0.58,-0.3l0.28,-1.82l1.87,-2.14l1.12,-0.39l0.28,-0.58l0.62,0.17l0.53,-0.73l1.87,-0.57l1.65,1.05l1.35,1.48l3.39,0.38l0.43,-0.54l-0.46,-1.23l1.05,-1.79l1.04,-0.61l0.14,-0.55l-0.25,-0.41l0.88,-1.17l1.31,-0.77l1.3,0.27l2.1,-0.48l0.31,-0.4l-0.05,-1.3l-0.92,-0.77l1.48,0.56l1.41,1.07l2.11,0.65l0.81,-0.2l1.4,0.7l1.69,-0.66l0.8,0.19l0.64,-0.33l0.71,0.77l-1.33,1.94l-0.71,0.07l-0.35,0.51l0.24,0.86l-1.52,2.35l0.12,1.05l2.15,1.65l1.97,0.85l3.04,2.36l1.97,0.65l0.55,0.88l2.72,0.85l1.84,-1.1l2.07,-5.97l-0.42,-3.59l0.3,-1.73l0.47,-0.87l-0.31,-0.68l1.09,-3.28l0.46,-0.47l0.4,0.71l0.16,1.51l0.65,0.52l0.16,1.04l0.85,1.21l0.12,2.38l0.9,2.0l0.57,0.18l1.3,-0.78l1.69,1.7l-0.2,1.08l0.53,2.2l0.39,1.3l0.68,0.48l0.6,1.95l-0.19,1.48l0.81,1.76l6.01,3.69l-0.11,0.76l1.38,1.58l0.95,2.77l0.58,0.22l0.72,-0.41l0.8,0.9l0.61,0.01l0.46,2.41l4.81,4.71l0.66,2.02l-0.07,3.31l1.14,2.2l-0.13,2.24l-1.1,3.68l0.03,1.64l-0.47,1.89l-1.05,2.4l-1.9,1.47l-1.72,3.51l-2.38,6.09l-0.24,2.82l-1.14,0.8l-2.85,0.15l-2.31,1.19l-2.51,2.25l-3.09,-1.57l0.3,-1.15l-0.54,-0.47l-1.5,0.63l-2.01,1.94l-7.12,-2.18l-1.48,-1.63l-1.14,-3.74l-1.45,-1.26l-1.81,-0.26l0.56,-1.18l-0.61,-2.1l-0.72,-0.1l-1.14,1.82l-0.9,0.21l0.63,-0.82l0.36,-1.55l0.92,-1.31l-0.13,-2.34l-0.7,-0.22l-2.0,2.34l-1.51,0.93l-0.94,2.01l-1.35,-0.81l-0.02,-1.52l-1.57,-2.04l-1.09,-0.88l0.24,-0.33l-0.14,-0.59l-3.21,-1.69l-1.83,-0.12l-2.54,-1.35l-4.58,0.28l-6.02,1.9l-2.53,-0.13l-2.62,1.41l-2.13,0.63l-1.49,2.6l-3.49,0.31l-2.29,-0.5l-3.48,0.43l-1.6,1.47l-0.81,-0.04l-2.37,1.63l-3.26,-0.1l-3.72,-2.21l0.04,-1.05l1.19,-0.46l0.49,-0.89l0.21,-2.97l-0.28,-1.64l-1.34,-2.86l-0.38,-1.47l0.05,-1.72l-0.95,-1.7l-0.18,-0.97l-1.01,-0.99l-0.29,-1.98l-1.13,-1.75ZM784.92,393.44l2.65,1.02l3.23,-0.96l1.09,0.14l0.15,3.06l-0.85,1.13l-0.17,1.63l-0.87,-0.24l-1.57,1.91l-1.68,-0.18l-1.4,-2.36l-0.37,-2.04l-1.39,-2.51l0.04,-0.8l1.15,0.18Z",
            name: "Australia"
        },
        IL: {
            path: "M507.76,203.05l0.4,-0.78l0.18,0.4l-0.33,1.03l0.52,0.44l0.68,-0.22l-0.86,3.6l-1.16,-3.32l0.59,-0.74l-0.03,-0.41ZM508.73,200.34l0.37,-1.02l0.64,0.0l0.52,-0.51l-0.49,1.53l-0.56,-0.24l-0.48,0.23Z",
            name: "Israel"
        },
        IN: {
            path: "M623.34,207.03l-1.24,1.04l-0.97,2.55l0.22,0.51l8.04,3.87l3.42,0.37l1.57,1.38l4.92,0.88l2.18,-0.04l0.38,-0.3l0.29,-1.24l-0.32,-1.64l0.14,-0.87l0.82,-0.31l0.45,2.48l2.28,1.02l1.77,-0.38l4.14,0.1l0.38,-0.36l0.18,-1.66l-0.5,-0.65l1.37,-0.29l2.25,-1.99l2.7,-1.62l1.93,0.62l1.8,-0.98l0.79,1.14l-0.68,0.91l0.26,0.63l2.42,0.36l0.09,0.47l-0.83,0.75l0.13,1.07l-1.52,-0.29l-3.24,1.86l-0.13,1.78l-1.32,2.14l-0.18,1.39l-0.93,1.82l-1.64,-0.5l-0.52,0.37l-0.09,2.63l-0.56,1.11l0.19,0.81l-0.53,0.27l-1.18,-3.73l-1.08,-0.27l-0.38,0.31l-0.24,1.0l-0.66,-0.66l0.54,-1.06l1.22,-0.34l1.15,-2.25l-0.24,-0.56l-1.57,-0.47l-4.34,-0.28l-0.18,-1.56l-0.35,-0.35l-1.11,-0.12l-1.91,-1.12l-0.56,0.17l-0.88,1.82l0.11,0.49l1.36,1.07l-1.09,0.69l-0.69,1.11l0.18,0.56l1.24,0.57l-0.32,1.54l0.85,1.94l0.36,2.01l-0.22,0.59l-4.58,0.52l-0.33,0.42l0.13,1.8l-1.17,1.36l-3.65,1.81l-2.79,3.03l-4.32,3.28l-0.18,1.27l-4.65,1.79l-0.77,2.16l0.64,5.3l-1.06,2.49l-0.01,3.94l-1.24,0.28l-1.14,1.93l0.39,0.84l-1.68,0.53l-1.04,1.83l-0.65,0.47l-2.06,-2.05l-2.1,-6.02l-2.2,-3.64l-1.05,-4.75l-2.29,-3.57l-1.76,-8.2l0.01,-3.11l-0.49,-2.53l-0.55,-0.29l-3.53,1.52l-1.53,-0.27l-2.86,-2.77l0.85,-0.67l0.08,-0.55l-0.74,-1.03l-2.67,-2.06l1.24,-1.32l5.34,0.01l0.39,-0.49l-0.5,-2.29l-1.42,-1.46l-0.27,-1.93l-1.43,-1.2l2.31,-2.37l3.05,0.06l2.62,-2.85l1.6,-2.81l2.4,-2.73l0.07,-2.04l1.97,-1.48l-0.02,-0.65l-1.93,-1.31l-0.82,-1.78l-0.8,-2.21l0.9,-0.89l3.59,0.65l2.92,-0.42l2.33,-2.19l2.31,2.85l-0.24,2.13l0.99,1.59l-0.05,0.82l-1.34,-0.28l-0.47,0.48l0.7,3.06l2.62,1.99l2.99,1.65Z",
            name: "India"
        },
        TZ: {
            path: "M495.56,296.42l2.8,-3.12l-0.02,-0.81l-0.64,-1.3l0.68,-0.52l0.14,-1.47l-0.76,-1.25l0.31,-0.11l2.26,0.03l-0.51,2.76l0.76,1.3l0.5,0.12l1.05,-0.53l1.19,-0.12l0.61,0.24l1.43,-0.62l0.1,-0.67l-0.71,-0.62l1.57,-1.7l8.65,4.86l0.32,1.53l3.34,2.33l-1.05,2.8l0.13,1.61l1.63,1.12l-0.6,1.76l-0.01,2.33l1.89,4.03l0.57,0.43l-1.46,1.08l-2.61,0.94l-1.43,-0.04l-1.06,0.77l-2.29,0.36l-2.87,-0.68l-0.83,0.07l-0.63,-0.75l-0.31,-2.78l-1.32,-1.35l-3.25,-0.77l-3.96,-1.58l-1.18,-2.41l-0.32,-1.75l-1.76,-1.49l0.42,-1.05l-0.44,-0.89l0.08,-0.96l-0.46,-0.58l0.06,-0.56Z",
            name: "Tanzania"
        },
        AZ: {
            path: "M539.29,175.73l1.33,0.32l1.94,-1.8l2.3,3.34l1.43,0.43l-1.26,0.15l-0.35,0.32l-0.8,3.14l-0.99,0.96l0.05,1.11l-1.26,-1.13l0.7,-1.18l-0.04,-0.47l-0.74,-0.86l-1.48,0.15l-2.34,1.71l-0.03,-1.27l-2.03,-1.35l0.47,-0.62l-0.08,-0.56l-1.03,-0.79l0.29,-0.43l-0.14,-0.58l-1.13,-0.86l1.89,0.68l1.69,0.06l0.37,-0.87l-0.81,-1.37l0.42,0.06l1.63,1.72ZM533.78,180.57l0.61,0.46l0.69,-0.0l0.59,1.15l-0.68,-0.15l-1.21,-1.45Z",
            name: "Azerbaijan"
        },
        IE: {
            path: "M405.08,135.42l0.35,2.06l-1.75,2.78l-4.22,1.88l-2.84,-0.4l1.73,-3.0l-1.18,-3.53l4.6,-3.74l0.32,1.15l-0.49,1.74l0.4,0.51l1.47,-0.04l1.6,0.6Z",
            name: "Ireland"
        },
        ID: {
            path: "M756.47,287.89l0.69,4.01l2.79,1.78l0.51,-0.1l2.04,-2.59l2.71,-1.43l2.05,-0.0l3.9,1.73l2.46,0.45l0.08,15.12l-1.75,-1.54l-2.54,-0.51l-0.88,0.71l-2.32,0.06l0.69,-1.33l1.45,-0.64l0.23,-0.46l-0.65,-2.74l-1.24,-2.21l-5.04,-2.29l-2.09,-0.23l-3.68,-2.27l-0.55,0.13l-0.65,1.07l-0.52,0.12l-0.55,-1.89l-1.21,-0.78l1.84,-0.62l1.72,0.05l0.39,-0.52l-0.21,-0.66l-0.38,-0.28l-3.45,-0.0l-1.13,-1.48l-2.1,-0.43l-0.52,-0.6l2.69,-0.48l1.28,-0.78l3.66,0.94l0.3,0.71ZM757.91,300.34l-0.62,0.82l-0.1,-0.8l0.59,-1.12l0.13,1.1ZM747.38,292.98l0.34,0.72l-1.22,-0.57l-4.68,-0.1l0.27,-0.62l2.78,-0.09l2.52,0.67ZM741.05,285.25l-0.67,-2.88l0.64,-2.01l0.41,0.86l1.21,0.18l0.16,0.7l-0.1,1.68l-0.84,-0.16l-0.46,0.3l-0.34,1.34ZM739.05,293.5l-0.5,0.44l-1.34,-0.36l-0.17,-0.37l1.73,-0.08l0.27,0.36ZM721.45,284.51l-0.19,1.97l2.24,2.23l0.54,0.02l1.27,-1.07l2.75,-0.5l-0.9,1.21l-2.11,0.93l-0.16,0.6l2.22,3.01l-0.3,1.07l1.36,1.74l-2.26,0.85l-0.28,-0.31l0.12,-1.19l-1.64,-1.34l0.17,-2.23l-0.56,-0.39l-1.67,0.76l-0.23,0.39l0.3,6.17l-1.1,0.25l-0.69,-0.47l0.64,-2.21l-0.39,-2.42l-0.39,-0.34l-0.8,-0.01l-0.58,-1.29l0.98,-1.6l0.35,-1.96l1.32,-3.87ZM728.59,296.27l0.38,0.49l-0.02,1.28l-0.88,0.49l-0.53,-0.47l1.04,-1.79ZM729.04,286.98l0.27,-0.05l-0.02,0.13l-0.24,-0.08ZM721.68,284.05l0.16,-0.32l1.89,-1.65l1.83,0.68l3.16,0.35l2.94,-0.1l2.39,-1.66l-1.73,2.13l-1.66,0.43l-2.41,-0.48l-4.17,0.13l-2.39,0.51ZM730.55,310.47l1.11,-1.93l2.03,-0.82l0.08,0.62l-1.45,1.67l-1.77,0.46ZM728.12,305.88l-0.1,0.38l-3.46,0.66l-2.91,-0.27l-0.0,-0.25l1.54,-0.41l1.66,0.73l1.67,-0.19l1.61,-0.65ZM722.9,310.24l-0.64,0.03l-2.26,-1.2l1.11,-0.24l1.78,1.41ZM716.26,305.77l0.88,0.51l1.28,-0.17l0.2,0.35l-4.65,0.73l0.39,-0.67l1.15,-0.02l0.75,-0.73ZM711.66,293.84l-0.38,-0.16l-2.54,1.01l-1.12,-1.44l-1.69,-0.13l-1.16,-0.75l-3.04,0.77l-1.1,-1.15l-3.31,-0.11l-0.35,-3.05l-1.35,-0.95l-1.11,-1.98l-0.33,-2.06l0.27,-2.14l0.9,-1.01l0.37,1.15l2.09,1.49l1.53,-0.48l1.82,0.08l1.38,-1.19l1.0,-0.18l2.28,0.67l2.26,-0.53l1.52,-3.64l1.01,-0.99l0.78,-2.57l4.1,0.3l-1.11,1.77l0.02,0.46l1.7,2.2l-0.23,1.39l2.07,1.71l-2.33,0.42l-0.88,1.9l0.1,2.05l-2.4,1.9l-0.06,2.45l-0.7,2.79ZM692.58,302.03l0.35,0.26l4.8,0.25l0.78,-0.97l4.17,1.09l1.13,1.68l3.69,0.45l2.13,1.04l-1.8,0.6l-2.77,-0.99l-4.8,-0.12l-5.24,-1.41l-1.84,-0.25l-1.11,0.3l-4.26,-0.97l-0.7,-1.14l-1.59,-0.13l1.18,-1.65l2.74,0.13l2.87,1.13l0.26,0.68ZM685.53,299.17l-2.22,0.04l-2.06,-2.03l-3.15,-2.01l-2.93,-3.51l-3.11,-5.33l-2.2,-2.12l-1.64,-4.06l-2.32,-1.69l-1.27,-2.07l-1.96,-1.5l-2.51,-2.65l-0.11,-0.66l4.81,0.53l2.15,2.38l3.31,2.74l2.35,2.66l2.7,0.17l1.95,1.59l1.54,2.17l1.59,0.95l-0.84,1.71l0.15,0.52l1.44,0.87l0.79,0.1l0.4,1.58l0.87,1.4l1.96,0.39l1.0,1.31l-0.6,3.01l-0.09,3.5Z",
            name: "Indonesia"
        },
        UA: {
            path: "M492.5,162.44l1.28,-2.49l1.82,0.19l0.66,-0.23l0.09,-0.71l-0.25,-0.75l-0.79,-0.72l-0.33,-1.21l-0.86,-0.62l-0.02,-1.19l-1.13,-0.86l-1.15,-0.19l-2.04,-1.0l-1.66,0.32l-0.66,0.47l-0.92,-0.0l-0.84,0.78l-2.48,0.7l-1.18,-0.71l-3.07,-0.36l-0.89,0.43l-0.24,-0.55l-1.11,-0.7l0.35,-0.93l1.26,-1.02l-0.54,-1.23l2.04,-2.43l1.4,-0.62l0.25,-1.19l-1.04,-2.39l0.83,-0.13l1.28,-0.84l1.8,-0.07l2.47,0.26l2.86,0.81l1.88,0.06l0.86,0.44l1.04,-0.41l0.77,0.66l2.18,-0.15l0.92,0.3l0.52,-0.34l0.15,-1.53l0.56,-0.54l2.85,-0.05l0.84,-0.72l3.04,-0.18l1.23,1.46l-0.48,0.77l0.21,1.03l0.36,0.32l1.8,0.14l0.93,2.08l3.18,1.15l1.94,-0.45l1.67,1.49l1.4,-0.03l3.35,0.96l0.02,0.54l-0.96,1.59l0.47,1.97l-0.26,0.7l-2.36,0.28l-1.29,0.89l-0.23,1.38l-1.83,0.27l-1.58,0.97l-2.41,0.21l-2.16,1.17l-0.21,0.38l0.34,2.26l1.23,0.75l2.13,-0.08l-0.14,0.31l-2.65,0.53l-3.23,1.69l-0.87,-0.39l0.42,-1.1l-0.25,-0.52l-2.21,-0.73l2.35,-1.06l0.12,-0.65l-0.93,-0.82l-3.62,-0.74l-0.13,-0.89l-0.46,-0.34l-2.61,0.59l-0.91,1.69l-1.71,2.04l-0.86,-0.4l-1.62,0.27Z",
            name: "Ukraine"
        },
        QA: {
            path: "M549.33,221.64l-0.76,-0.23l-0.14,-1.64l0.84,-1.29l0.47,0.52l0.04,1.34l-0.45,1.3Z",
            name: "Qatar"
        },
        MZ: {
            path: "M508.58,318.75l-0.34,-2.57l0.51,-2.05l3.55,0.63l2.5,-0.38l1.02,-0.76l1.49,0.01l2.74,-0.98l1.66,-1.2l0.5,9.24l0.41,1.23l-0.68,1.67l-0.93,1.71l-1.5,1.5l-5.16,2.28l-2.78,2.73l-1.02,0.53l-1.71,1.8l-0.98,0.57l-0.35,2.41l1.16,1.94l0.49,2.17l0.43,0.31l-0.06,2.06l-0.39,1.17l0.5,0.72l-0.25,0.73l-0.92,0.83l-5.12,2.39l-1.22,1.36l0.21,1.13l0.58,0.39l-0.11,0.72l-1.22,-0.01l-0.73,-2.97l0.42,-3.09l-1.78,-5.37l2.49,-2.81l0.69,-1.89l0.44,-0.43l0.28,-1.53l-0.39,-0.93l0.59,-3.65l-0.01,-3.26l-1.49,-1.16l-1.2,-0.22l-1.74,-1.17l-1.92,0.01l-0.29,-2.08l7.06,-1.96l1.28,1.09l0.89,-0.1l0.67,0.44l0.1,0.73l-0.51,1.29l0.19,1.81l1.75,1.83l0.65,-0.13l0.71,-1.65l1.17,-0.86l-0.26,-3.47l-1.05,-1.85l-1.04,-0.94Z",
            name: "Mozambique"
        }
    },
    height: 440.70631074413296,
    width: 900,
    projection: {
        type: "mill",
        centralMeridian: 11.5
    }
});

},{}],"2cM0S":[function(require,module,exports,__globalThis) {
//-------------------------------------------------------------------------------------
// Resize JsVectorMaps maps on document resize.
//-------------------------------------------------------------------------------------
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeMap", ()=>resizeMap);
const resizeMap = (mapWrapper)=>{
    const MAP_PARENT = mapWrapper.parentNode;
    let mapParentWidth = MAP_PARENT.offsetWidth;
    let paddingWidth = mapParentWidth < 550 ? 50 : 120;
    mapWrapper.style.width = mapParentWidth - paddingWidth + "px";
    mapWrapper.style.height = mapWrapper.offsetWidth / 2 + "px";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9jtBu":[function(require,module,exports,__globalThis) {
const _temp0 = require("9c04124cddaf9988");
const _temp1 = require("6bf78c340821bb86");
const _temp2 = require("c03787827e43f0aa");
const _temp3 = require("63f98f6539929306");
const _temp4 = require("29f89d741bdea67a");
const _temp5 = require("43d89b42c3ccaa5e");
module.exports = {
    "china": _temp0,
    "england": _temp1,
    "france": _temp2,
    "germany": _temp3,
    "japan": _temp4,
    "us": _temp5
};

},{"9c04124cddaf9988":"4mcMp","6bf78c340821bb86":"ePqBL","c03787827e43f0aa":"eF1xd","63f98f6539929306":"lt23G","29f89d741bdea67a":"74HqK","43d89b42c3ccaa5e":"a2JKY"}],"4mcMp":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("china.38bde952.svg") + "?" + Date.now();

},{}],"ePqBL":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("england.db438d89.svg") + "?" + Date.now();

},{}],"eF1xd":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("france.6c5516bf.svg") + "?" + Date.now();

},{}],"lt23G":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("germany.2bf34b2e.svg") + "?" + Date.now();

},{}],"74HqK":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("japan.4ad076e1.svg") + "?" + Date.now();

},{}],"a2JKY":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("us.f0f18e18.svg") + "?" + Date.now();

},{}],"a8diU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leadsGenerationRate", ()=>leadsGenerationRate);
parcelHelpers.export(exports, "leadsGenerationRateUpdate", ()=>leadsGenerationRateUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-leads-generation");
let leadsGenerationRateChart;
const leadsGenerationRate = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Chart data
    const CHART_DATA = {
        labels: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Nov",
            "Dec"
        ],
        datasets: [
            {
                label: "This Year",
                data: [
                    128,
                    117,
                    145,
                    180,
                    225,
                    150,
                    135,
                    100,
                    128,
                    60,
                    70
                ],
                borderRadius: 10,
                backgroundColor: (0, _utils.cssVar)("--bs-chart-common-main-fill"),
                borderWidth: 0,
                categoryPercentage: 0.5,
                maxBarThickness: 10
            },
            {
                label: "Last Year",
                data: [
                    100,
                    80,
                    180,
                    134,
                    180,
                    70,
                    225,
                    150,
                    35,
                    100,
                    120
                ],
                categoryPercentage: 0.5,
                borderRadius: 10,
                backgroundColor: (0, _utils.cssVar)("--bs-chart-common-sub-fill"),
                borderWidth: 0,
                maxBarThickness: 10
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -5,
                    right: 1,
                    bottom: -5
                }
            },
            indexAxis: "x",
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) leadsGenerationRateChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const leadsGenerationRateUpdate = ()=>{
    const updateColors = ()=>{
        leadsGenerationRateChart.data.datasets[0].backgroundColor = (0, _utils.cssVar)("--bs-chart-common-main-fill");
        leadsGenerationRateChart.data.datasets[1].backgroundColor = (0, _utils.cssVar)("--bs-chart-common-sub-fill");
    };
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(leadsGenerationRateChart, updateColors());
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"04VtS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leadsSources", ()=>leadsSources);
parcelHelpers.export(exports, "leadsSourcesUpdate", ()=>leadsSourcesUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-leads-sources");
let leadsSourcesChart;
const leadsSources = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Chart data
    const ADVERTISEMENT = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 20, {
        min: 180,
        max: 160
    });
    const COLD_CALLS = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 20, {
        min: 150,
        max: 130
    });
    const CUSTOM_REFERRAL = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 20, {
        min: 100,
        max: 80
    });
    const EMPLOYEE_REFERRAL = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 20, {
        min: 60,
        max: 50
    });
    const OTHERS = (0, _chart.generateTimeSeriesData)(new Date("12 Aug 2023").getTime(), 20, {
        min: 40,
        max: 30
    });
    const CHART_DATA = {
        datasets: [
            {
                label: "Advertisements",
                data: ADVERTISEMENT,
                fill: true,
                backgroundColor: "transparent",
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            },
            {
                label: "Cold Calls",
                data: COLD_CALLS,
                fill: true,
                backgroundColor: "transparent",
                borderColor: (0, _utils.COLORS).purple,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).purple,
                pointBorderColor: (0, _utils.COLORS).purple,
                pointHoverBorderColor: (0, _utils.COLORS).purple,
                pointHoverBackgroundColor: (0, _utils.COLORS).purple
            },
            {
                label: "Custom Referrals",
                data: CUSTOM_REFERRAL,
                fill: true,
                backgroundColor: "transparent",
                borderColor: (0, _utils.COLORS).blue,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).blue,
                pointBorderColor: (0, _utils.COLORS).blue,
                pointHoverBorderColor: (0, _utils.COLORS).blue,
                pointHoverBackgroundColor: (0, _utils.COLORS).blue
            },
            {
                label: "Employee Referrals",
                data: EMPLOYEE_REFERRAL,
                fill: true,
                backgroundColor: "transparent",
                borderColor: (0, _utils.COLORS).red,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).red,
                pointBorderColor: (0, _utils.COLORS).red,
                pointHoverBorderColor: (0, _utils.COLORS).red,
                pointHoverBackgroundColor: (0, _utils.COLORS).red
            },
            {
                label: "Others",
                data: OTHERS,
                fill: true,
                backgroundColor: "transparent",
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: "-5"
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    type: "time",
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 8
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 0,
                    max: 200,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 10,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) leadsSourcesChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    let list = "";
    const LIST_WRAPPER = document.getElementById("list-leads-sources");
    const DATA = [
        {
            source: "Advertisements",
            percentage: 58,
            change: 23.1,
            className: "bg-success",
            up: false
        },
        {
            source: "Cold Calls",
            percentage: 41,
            change: 1.2,
            className: "bg-purple",
            up: true
        },
        {
            source: "Custom Referrals",
            percentage: 30,
            change: 43.2,
            className: "bg-primary",
            up: false
        },
        {
            source: "Employee Referrals",
            percentage: 21,
            change: 9.83,
            className: "bg-danger",
            up: false
        },
        {
            source: "Others",
            percentage: 9,
            change: 21.43,
            className: "bg-warning",
            up: true
        }
    ];
    if (LIST_WRAPPER) DATA.forEach((item)=>{
        list += `<div class="d-flex align-items-start">
                        <i class="${item.className} w-2.5 h-2.5 mt-1.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1 text-body-emphasis">${item.source}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${item.up ? "text-success" : "text-danger"}">
								${item.change}%

								<i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
							</div>

							<div class="fs-5 text-body-emphasis w-12 text-end">${item.percentage}%</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${item.percentage}" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${item.className}" style="width: ${item.percentage}%"></div>
							</div>
						</div>
                    </div>`;
        LIST_WRAPPER.innerHTML = list;
    });
};
const leadsSourcesUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(leadsSourcesChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2oBi5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "opportunities", ()=>opportunities);
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const opportunities = ()=>{
    const WRAPPER = document.getElementById("list-opportunities");
    const DATA = [
        {
            employee_name: "John Doe",
            img: 1,
            qualified: 45,
            won: 62,
            total_amount: 657321
        },
        {
            employee_name: "Jane Smith",
            img: 2,
            qualified: 36,
            won: 27,
            total_amount: 576099
        },
        {
            employee_name: "Michael Johnson",
            img: 3,
            qualified: 59,
            won: 25,
            total_amount: 498567
        },
        {
            employee_name: "Emily Brown",
            img: 4,
            qualified: 68,
            won: 45,
            total_amount: 310393
        },
        {
            employee_name: "David Lee",
            img: 5,
            qualified: 29,
            won: 54,
            total_amount: 125478
        },
        {
            employee_name: "Sarah Wilson",
            img: 6,
            qualified: 64,
            won: 63,
            total_amount: 98563
        },
        {
            employee_name: "Alex Martinez",
            img: 7,
            qualified: 48,
            won: 22,
            total_amount: 83476
        },
        {
            employee_name: "Jessica Taylor",
            img: 8,
            qualified: 20,
            won: 45,
            total_amount: 80986
        },
        {
            employee_name: "William Anderson",
            img: 9,
            qualified: 56,
            won: 37,
            total_amount: 78965
        },
        {
            employee_name: "Olivia Harris",
            img: 10,
            qualified: 43,
            won: 40,
            total_amount: 50093
        }
    ];
    let list = "";
    if (WRAPPER) {
        DATA.forEach((item, index)=>{
            // Even row background
            let rowClass = "";
            if (index % 2 === 0) rowClass = "bg-highlight";
            else rowClass = "";
            list += `<div class="d-flex justify-content-between align-items-center h-12 rounded px-3 ${rowClass}">
                        <div class="flex-shrink-0">
                            <img class="w-8 h-8 me-3 rounded-circle" src="${(0, _jpgDefault.default)[item.img]}" alt="${item.employee_name}">
                        </div> 
                        <div class="flex-grow-1 text-truncate">${item.employee_name}</div>
                        <div class="w-20 text-end d-none d-sm-block">${item.qualified}</div>
                        <div class="w-10 w-sm-20 text-end flex-shrink-0">${item.won}</div>
                        <div class="w-20 text-end flex-shrink-0 ms-sm-2">$${item.total_amount.toLocaleString()}</div>
                    </div>
            `;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/contacts/*.jpg":"74KID","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"74KID":[function(require,module,exports,__globalThis) {
const _temp0 = require("95538e07e3363d51");
const _temp1 = require("61f706b60995735e");
const _temp2 = require("6761baca5fce119c");
const _temp3 = require("c54286475f05c8f4");
const _temp4 = require("65bdee105f75b836");
const _temp5 = require("96530ddc1acd476f");
const _temp6 = require("ab6e6f016b3c1314");
const _temp7 = require("d4cf0b1dbf573da5");
const _temp8 = require("ff2dde03900d124e");
const _temp9 = require("affbcd1311824608");
const _temp10 = require("212add64eec4e29d");
const _temp11 = require("89ac6063ca3e66cf");
const _temp12 = require("e5b4b9b7d3d502a3");
const _temp13 = require("7f14ed6402c2d328");
const _temp14 = require("f79b3f4e62cf8c26");
const _temp15 = require("e0bd7f03612d5e28");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"95538e07e3363d51":"eM9AY","61f706b60995735e":"4tWpl","6761baca5fce119c":"egP4V","c54286475f05c8f4":"dRrEf","65bdee105f75b836":"cG5Jh","96530ddc1acd476f":"945u4","ab6e6f016b3c1314":"go82E","d4cf0b1dbf573da5":"4qG8A","ff2dde03900d124e":"4jtK8","affbcd1311824608":"8Gxhp","212add64eec4e29d":"5foDv","89ac6063ca3e66cf":"hSAKF","e5b4b9b7d3d502a3":"3Jp7F","7f14ed6402c2d328":"elJBN","f79b3f4e62cf8c26":"3eInA","e0bd7f03612d5e28":"a5Vjj"}],"eM9AY":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("1.251dbcd2.jpg") + "?" + Date.now();

},{}],"4tWpl":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("2.5c9c5771.jpg") + "?" + Date.now();

},{}],"egP4V":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("3.b5c72342.jpg") + "?" + Date.now();

},{}],"dRrEf":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("4.3ac6e5e2.jpg") + "?" + Date.now();

},{}],"cG5Jh":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("5.52df0942.jpg") + "?" + Date.now();

},{}],"945u4":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("6.bc9beabf.jpg") + "?" + Date.now();

},{}],"go82E":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("7.2c1f35a7.jpg") + "?" + Date.now();

},{}],"4qG8A":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("8.aa8a4dfb.jpg") + "?" + Date.now();

},{}],"4jtK8":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("9.52e31794.jpg") + "?" + Date.now();

},{}],"8Gxhp":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("10.28cfcf3a.jpg") + "?" + Date.now();

},{}],"5foDv":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("11.a62da65f.jpg") + "?" + Date.now();

},{}],"hSAKF":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("12.bd0c91fb.jpg") + "?" + Date.now();

},{}],"3Jp7F":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("13.0139df4a.jpg") + "?" + Date.now();

},{}],"elJBN":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("14.39a84c6d.jpg") + "?" + Date.now();

},{}],"3eInA":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("15.2de525eb.jpg") + "?" + Date.now();

},{}],"a5Vjj":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("16.d38d8998.jpg") + "?" + Date.now();

},{}],"jpAue":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "outboundCals", ()=>outboundCals);
parcelHelpers.export(exports, "outboundCalsUpdate", ()=>outboundCalsUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-outbound-calls");
let outboundCalsChart;
const outboundCals = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Chart data
    const CHART_DATA = {
        labels: [
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun"
        ],
        datasets: [
            {
                label: "This Year",
                data: [
                    128,
                    117,
                    145,
                    180,
                    225,
                    100,
                    89
                ],
                barThickness: 5,
                borderRadius: 10,
                backgroundColor: (0, _utils.cssVar)("--bs-chart-common-main-fill"),
                borderWidth: 0
            },
            {
                label: "Last Year",
                data: [
                    100,
                    80,
                    180,
                    134,
                    180,
                    90,
                    65
                ],
                barThickness: 5,
                borderRadius: 10,
                backgroundColor: (0, _utils.cssVar)("--bs-chart-common-sub-fill"),
                borderWidth: 0
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -5,
                    right: 1,
                    bottom: -5
                }
            },
            indexAxis: "x",
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) outboundCalsChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const outboundCalsUpdate = ()=>{
    const updateColors = ()=>{
        outboundCalsChart.data.datasets[0].backgroundColor = (0, _utils.cssVar)("--bs-chart-common-main-fill");
        outboundCalsChart.data.datasets[1].backgroundColor = (0, _utils.cssVar)("--bs-chart-common-sub-fill");
    };
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(outboundCalsChart, updateColors());
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"cPswT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolutionByChannel", ()=>resolutionByChannel);
parcelHelpers.export(exports, "resolutionByChanneUpdate", ()=>resolutionByChanneUpdate);
var _worldJs = require("jsvectormap/dist/maps/world.js");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-resolution-by-channel");
let resolutionByChannelChart;
const resolutionByChannel = ()=>{
    const CHART_DATA = {
        labels: [
            "Email",
            "Phone",
            "Twitter",
            "Facebook",
            "Web",
            "In Person",
            "Mobile App"
        ],
        datasets: [
            {
                label: "Sessions",
                data: [
                    83,
                    44,
                    32,
                    53,
                    62,
                    23,
                    42
                ],
                backgroundColor: [
                    (0, _utils.COLORS).green,
                    (0, _utils.COLORS).purple,
                    (0, _utils.COLORS).cyan,
                    (0, _utils.COLORS).blue,
                    (0, _utils.COLORS).orange,
                    (0, _utils.COLORS).red,
                    (0, _utils.COLORS).teal
                ],
                barThickness: 3,
                borderWidth: 0,
                borderRadius: 10
            }
        ]
    };
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -10,
                    bottom: -5
                }
            },
            responsive: true,
            indexAxis: "y",
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP),
                    callbacks: {
                        label: (tooltipItem, data)=>{
                            return tooltipItem.formattedValue + "K";
                        }
                    }
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        callback: (label, index, labels)=>{
                            return label;
                        }
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    if (CHART_WRAPPER) resolutionByChannelChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const resolutionByChanneUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(resolutionByChannelChart);
    });
};

},{"jsvectormap/dist/maps/world.js":"Zvkp7","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"f7ywB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topRainmakers", ()=>topRainmakers);
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const topRainmakers = ()=>{
    const WRAPPER = document.getElementById("list-top-rainmakers");
    const DATA = [
        {
            img: 11,
            name: "John Smith",
            total_sales: 1200000,
            deals_closed: 45,
            performance: 10.5
        },
        {
            img: 12,
            name: "Jane Johnson",
            total_sales: 950000,
            deals_closed: 50,
            performance: 7.2
        },
        {
            img: 13,
            name: "Michael Williams",
            total_sales: 850000,
            deals_closed: 38,
            performance: 8.1
        },
        {
            img: 14,
            name: "Emily Davis",
            total_sales: 780000,
            deals_closed: 42,
            performance: 9.5
        },
        {
            img: 15,
            name: "David Brown",
            total_sales: 720000,
            deals_closed: 40,
            performance: 8.9
        },
        {
            img: 16,
            name: "Mary Miller",
            total_sales: 650000,
            deals_closed: 35,
            performance: 7.8
        },
        {
            img: 10,
            name: "Robert Wilson",
            total_sales: 620000,
            deals_closed: 30,
            performance: 6.5
        }
    ];
    let list = "";
    let last = DATA.length - 1;
    if (WRAPPER) {
        DATA.forEach((item, index)=>{
            list += `<div class="d-flex align-items-center ${index !== last ? "mb-5" : "mb-2"}">
                        <div class="rounded-circle border border-dashed border-orange-blue me-3 flex-shrink-0 w-12 h-12 d-grid place-items-center" style="--bs-border-opacity: 0.3">
							<img class="w-10 h-10 rounded-circle" src="${(0, _jpgDefault.default)[item.img]}" alt="${item.name}">
						</div>

                        <div class="flex-grow-1">
                            <div class="mb-1">${item.name}</div>
                            <div class="text-body-secondary fs-7">
                                <span class="border rounded ms-npx px-1.5 py-0.5 d-inline-block">Deals Closed: ${item.deals_closed}</span>
                                <span class="border rounded ms-0.5 px-2 py-0.5 d-none d-sm-inline-block">Performance: ${item.performance}</span>
                            </div>
                        </div>
                         
                        <div class="fs-5">$${item.total_sales.toLocaleString()}</div>
                    </div>
            `;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/contacts/*.jpg":"74KID","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7KZEL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "analytics", ()=>analytics);
var _activeUsers = require("./activeUsers");
var _averageVisitDurarion = require("./averageVisitDurarion");
var _browserBounceRate = require("./browserBounceRate");
var _deviceSessions = require("./deviceSessions");
var _sessionsByCountry = require("./sessionsByCountry");
var _userAcquisition = require("./userAcquisition");
var _visitsBySource = require("./visitsBySource");
const analytics = ()=>{
    (0, _sessionsByCountry.sessionsByCountry)();
    (0, _activeUsers.activeUsers)();
    (0, _visitsBySource.visitsBySource)();
    (0, _averageVisitDurarion.averageVisitDuration)();
    (0, _userAcquisition.userAcquisition)();
    (0, _browserBounceRate.browserBounceRate)();
    (0, _deviceSessions.deviceSessions)();
};

},{"./activeUsers":"1OmZn","./averageVisitDurarion":"iqg6c","./browserBounceRate":"eASQS","./deviceSessions":"azOwo","./sessionsByCountry":"dfUe0","./userAcquisition":"3mJRo","./visitsBySource":"9cSKT","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1OmZn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "activeUsers", ()=>activeUsers);
parcelHelpers.export(exports, "activeUsersUpdate", ()=>activeUsersUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-active-users");
let activeUsersChart;
const activeUsers = ()=>{
    //------------------------------------------------------------
    // Chart
    //------------------------------------------------------------
    const CHART_DATA = {
        labels: [
            "01:00",
            "02:00",
            "03:00",
            "04:00",
            "05:00",
            "06:00",
            "07:00",
            "08:00",
            "09:00",
            "10:00",
            "11:00",
            "12:00",
            "13:00",
            "14:00",
            "15:00",
            "16:00",
            "17:00",
            "18:00",
            "19:00",
            "21:00",
            "22:00",
            "23:00",
            "24:00"
        ],
        datasets: [
            {
                label: "Users",
                data: [
                    100,
                    50,
                    105,
                    50,
                    240,
                    55,
                    110,
                    48,
                    145,
                    50,
                    99,
                    54,
                    200,
                    50,
                    190,
                    60,
                    95,
                    60,
                    170,
                    50,
                    200,
                    60,
                    190,
                    57,
                    90
                ],
                backgroundColor: (0, _utils.COLORS).green,
                barThickness: 3,
                borderWidth: 0,
                borderRadius: 10
            }
        ]
    };
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            indexAxis: "x",
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP),
                    callbacks: {
                        label: (tooltipItem, data)=>{
                            return tooltipItem.formattedValue + "K";
                        }
                    }
                }
            },
            scales: {
                x: {
                    grid: {
                        display: false
                    },
                    border: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0, "center")
                    }
                },
                y: {
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    border: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    if (CHART_WRAPPER) activeUsersChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
    //------------------------------------------------------------
    // Data
    //------------------------------------------------------------
    const LIST_WRAPPER = document.getElementById("list-active-users");
    let list = "";
    const DATA = [
        {
            page: "/index.html",
            users: 1480,
            percentage: 78,
            up: true
        },
        {
            page: "/downloads/mobile.html",
            users: 1143,
            percentage: 69,
            up: true
        },
        {
            page: "/pricing.html",
            users: 964,
            percentage: 56,
            up: false
        },
        {
            page: "/blog/how-to-configure.html",
            users: 542,
            percentage: 35,
            up: true
        },
        {
            page: "/products/design.html",
            users: 234,
            percentage: 18,
            up: false
        }
    ];
    let last = DATA.length - 1;
    if (LIST_WRAPPER) {
        DATA.forEach((item, index)=>{
            list += `<div class="d-flex align-items-center py-3 ${index !== last ? "border-bottom" : ""}">
                        <div class="flex-grow-1">${item.page}</div>
                        <div class="fs-5">${item.users}</div>

                        <div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${item.up ? "text-success" : "text-danger"}">
                            ${item.percentage}%

                            <i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
                        </div>
                    </div>`;
        });
        LIST_WRAPPER.innerHTML = list;
    }
};
const activeUsersUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(activeUsersChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"iqg6c":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "averageVisitDuration", ()=>averageVisitDuration);
parcelHelpers.export(exports, "visitDurationUpdate", ()=>visitDurationUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-visit-duration");
let visitDurationChart;
const averageVisitDuration = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Nov",
            "Dec"
        ],
        datasets: [
            {
                label: "Current Month",
                data: [
                    100,
                    80,
                    100,
                    75,
                    95,
                    80,
                    100,
                    85,
                    110,
                    80,
                    110
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            },
            {
                label: "Last Month",
                data: [
                    160,
                    130,
                    160,
                    110,
                    150,
                    120,
                    165,
                    130,
                    170,
                    110,
                    160
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 0,
                    max: 250,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return label + "s";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) visitDurationChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const visitDurationUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(visitDurationChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"eASQS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "browserBounceRate", ()=>browserBounceRate);
var _svg = require("../../../img/browsers/*.svg");
var _svgDefault = parcelHelpers.interopDefault(_svg);
const browserBounceRate = ()=>{
    const WRAPPER = document.getElementById("list-browser-rate");
    const DATA = [
        {
            browser: "Google Chrome",
            rate: "22443",
            percentage: "81",
            icon: "chrome",
            up: false
        },
        {
            browser: "Apple Safari",
            rate: "18312",
            percentage: "54",
            icon: "safari",
            up: true
        },
        {
            browser: "Mozilla Firefox",
            rate: "16234",
            percentage: "43",
            icon: "firefox",
            up: true
        },
        {
            browser: "Microsoft Edge",
            rate: "12956",
            percentage: "32",
            icon: "edge",
            up: false
        },
        {
            browser: "Opera",
            rate: "10090",
            percentage: "25",
            icon: "opera",
            up: false
        },
        {
            browser: "Internet Explorer",
            rate: "8354",
            percentage: "18",
            icon: "ie",
            up: false
        },
        {
            browser: "Samsung Internet",
            rate: "7856",
            percentage: "15",
            icon: "samsung",
            up: true
        }
    ];
    let list = "";
    let last = DATA.length - 1;
    if (WRAPPER) DATA.map((item, index)=>{
        list += `<div class="d-flex align-items-center">
                        <div class="w-8 h-8 me-4 border rounded d-flex align-items-center justify-content-center">
                            <img class="" src="${(0, _svgDefault.default)[item.icon]}" alt="" />
                        </div>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap py-3 ${index !== last ? "border-bottom" : ""}">
                            <div class="flex-grow-1">${item.browser}</div>

                            <div class="fs-5 fw-medium text-end w-16">${item.rate}%</div>

                            <div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${item.up ? "text-success" : "text-danger"}">
                                ${item.percentage}%

                                <i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
                            </div>
                        </div>
                    </div>`;
        WRAPPER.innerHTML = list;
    });
};

},{"../../../img/browsers/*.svg":"bZ9j0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bZ9j0":[function(require,module,exports,__globalThis) {
const _temp0 = require("884f47f1a0ed5ffd");
const _temp1 = require("fb0074b6335bb23b");
const _temp2 = require("4860f363bc8caa66");
const _temp3 = require("a267ca2d08b98720");
const _temp4 = require("a33eb7f28c3c0a56");
const _temp5 = require("93dfd5cd5e6891ec");
const _temp6 = require("d458c58023ff79fb");
const _temp7 = require("aee515c3163f29f9");
const _temp8 = require("36d9c9043709562c");
const _temp9 = require("356753f74f46bfe7");
const _temp10 = require("87ab913ee953df3c");
const _temp11 = require("daab96eb7b1992a2");
module.exports = {
    "baidu": _temp0,
    "blackberry": _temp1,
    "chrome": _temp2,
    "edge": _temp3,
    "firefox": _temp4,
    "ie": _temp5,
    "kai": _temp6,
    "opera": _temp7,
    "qq": _temp8,
    "safari": _temp9,
    "samsung": _temp10,
    "uc": _temp11
};

},{"884f47f1a0ed5ffd":"4MR52","fb0074b6335bb23b":"gOAp4","4860f363bc8caa66":"92X9n","a267ca2d08b98720":"96dkH","a33eb7f28c3c0a56":"9EUVb","93dfd5cd5e6891ec":"k9j1r","d458c58023ff79fb":"bREZ1","aee515c3163f29f9":"6x7Sq","36d9c9043709562c":"cEDg8","356753f74f46bfe7":"amUZ4","87ab913ee953df3c":"7TQnj","daab96eb7b1992a2":"dyS6x"}],"4MR52":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("baidu.36aded09.svg") + "?" + Date.now();

},{}],"gOAp4":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("blackberry.62f658a6.svg") + "?" + Date.now();

},{}],"92X9n":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("chrome.37b75211.svg") + "?" + Date.now();

},{}],"96dkH":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("edge.82bfc76b.svg") + "?" + Date.now();

},{}],"9EUVb":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("firefox.4e5f016d.svg") + "?" + Date.now();

},{}],"k9j1r":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("ie.00fe1d56.svg") + "?" + Date.now();

},{}],"bREZ1":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("kai.938808f4.svg") + "?" + Date.now();

},{}],"6x7Sq":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("opera.efc56a57.svg") + "?" + Date.now();

},{}],"cEDg8":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("qq.6de8803d.svg") + "?" + Date.now();

},{}],"amUZ4":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("safari.ed4faae7.svg") + "?" + Date.now();

},{}],"7TQnj":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("samsung.23620511.svg") + "?" + Date.now();

},{}],"dyS6x":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("uc.63a31b48.svg") + "?" + Date.now();

},{}],"azOwo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deviceSessions", ()=>deviceSessions);
const deviceSessions = ()=>{
    const WRAPPER = document.getElementById("list-device-sessions");
    let list = "";
    const DATA = [
        {
            icon: "ph-laptop",
            percentage: 66,
            sessions: 8564,
            bg: "bg-info",
            text: "text-info"
        },
        {
            icon: "ph-device-mobile-camera",
            percentage: 30,
            sessions: 2435,
            bg: "bg-purple",
            text: "text-purple"
        },
        {
            icon: "ph-device-tablet-speaker",
            percentage: 4,
            sessions: 321,
            bg: "bg-warning",
            text: "text-warning"
        }
    ];
    if (WRAPPER) {
        DATA.forEach((item)=>{
            list += `<div style="--bs-bg-opacity: 0.2" class="flex-grow-1 rounded d-flex align-items-center py-1 mb-5 ${item.bg + " " + item.text}">
                    <i class="ph fs-4 mx-3 ${item.icon}"></i>
                    <div class="flex-grow-1 d-flex align-items-center">
                        <div class="h-8 d-flex align-items-center justify-content-end rounded-1 bg-current" style="width: ${item.percentage + "%"}">
                            ${item.percentage > 10 ? `<div class="text-white fs-8 px-2">${item.percentage}%</div>` : ""}
                        </div>
                        ${item.percentage <= 9 ? `<div class="text-current fs-8 px-2">${item.percentage}%</div>` : ""}
                    </div>
                    <div class="ms-auto pe-3 text-current w-14 text-end">${item.sessions}</div>
                </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dfUe0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sessionsByCountry", ()=>sessionsByCountry);
parcelHelpers.export(exports, "sessionsByCountryUpdate", ()=>sessionsByCountryUpdate);
var _jsvectormap = require("jsvectormap");
var _jsvectormapDefault = parcelHelpers.interopDefault(_jsvectormap);
var _worldJs = require("jsvectormap/dist/maps/world.js");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _jsVectorMap = require("../../vendors/jsvectormap/jsVectorMap");
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-sessions-country");
let sessionsByCountryChart;
const sessionsByCountry = ()=>{
    // ----------------------------------------------
    // Map
    // ----------------------------------------------
    const MAP_WRAPPER = document.getElementById("map-sessions-country");
    if (MAP_WRAPPER) {
        // Resize map on load
        (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
        // Initiate map
        new (0, _jsvectormapDefault.default)({
            selector: "#map-sessions-country",
            map: "world",
            draggable: false,
            zoomButtons: false,
            zoomOnScroll: false,
            regionStyle: {
                initial: {
                    fill: "INITIAL_FILL",
                    fillOpacity: 1,
                    stroke: (0, _utils.COLORS).transparent,
                    strokeWidth: 1
                },
                hover: {
                    fillOpacity: 0.95
                }
            },
            visualizeData: {
                scale: [
                    "",
                    ""
                ],
                values: {
                    US: 500,
                    RU: 480,
                    ZA: 400,
                    IN: 350,
                    AE: 300,
                    AU: 260,
                    BR: 255,
                    SG: 250,
                    FR: 200,
                    ES: 190,
                    PL: 150,
                    SE: 120,
                    ID: 110,
                    JP: 90,
                    EG: 45
                }
            },
            onLoaded (map) {
                window.addEventListener("resize", ()=>{
                    // Set map size on window resize
                    (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
                    setTimeout(()=>{
                        map.updateSize();
                    });
                });
            }
        });
    }
    // ----------------------------------------------
    // Chart
    // ----------------------------------------------
    const CHART_DATA = {
        labels: [
            "USA",
            "China",
            "England",
            "Japan",
            "Canada",
            "France"
        ],
        datasets: [
            {
                label: "Sessions",
                data: [
                    83,
                    44,
                    32,
                    53,
                    62,
                    23
                ],
                backgroundColor: (0, _utils.cssVar)("--bs-sessions-country-fill"),
                barThickness: 3,
                borderWidth: 0,
                borderRadius: 10
            }
        ]
    };
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: 0,
                    bottom: 0
                }
            },
            responsive: true,
            indexAxis: "y",
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP),
                    callbacks: {
                        label: (tooltipItem, data)=>{
                            return tooltipItem.formattedValue + "K";
                        }
                    }
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        callback: (label, index, labels)=>{
                            return label + "K";
                        }
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    if (CHART_WRAPPER) sessionsByCountryChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const sessionsByCountryUpdate = ()=>{
    if (CHART_WRAPPER) {
        let updateColors = ()=>{
            sessionsByCountryChart.data.datasets[0].backgroundColor = (0, _utils.cssVar)("--bs-sessions-country-fill");
        };
        setTimeout(()=>{
            (0, _chart.reloadChart)(sessionsByCountryChart, updateColors());
        });
    }
};

},{"jsvectormap":"17NmK","jsvectormap/dist/maps/world.js":"Zvkp7","chart.js/auto":"avKfP","../../vendors/jsvectormap/jsVectorMap":"2cM0S","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3mJRo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAcquisition", ()=>userAcquisition);
parcelHelpers.export(exports, "userAcquisitionChartUpdate", ()=>userAcquisitionChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-user-acquisition");
let userAcquisitionChart;
const userAcquisition = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    const CHART_DATA = {
        labels: [
            "10/10",
            "11/10",
            "12/10",
            "13/10",
            "14/10",
            "15/10",
            "16/10"
        ],
        datasets: [
            {
                label: "Organic Search",
                data: [
                    13,
                    23,
                    30,
                    8,
                    13,
                    27,
                    54
                ],
                backgroundColor: (0, _utils.COLORS).blue,
                borderRadius: 5,
                hoverOffset: 0,
                borderColor: "rgba(0,0,0,0)",
                borderWidth: 1.5,
                barThickness: 7
            },
            {
                label: "Paid Search",
                data: [
                    25,
                    20,
                    20,
                    40,
                    32,
                    10,
                    20
                ],
                backgroundColor: (0, _utils.COLORS).green,
                borderRadius: 5,
                hoverOffset: 0,
                borderColor: "rgba(0,0,0,0)",
                borderWidth: 1.5,
                barThickness: 7
            },
            {
                label: "Direct",
                data: [
                    20,
                    45,
                    20,
                    28,
                    10,
                    50,
                    45
                ],
                backgroundColor: (0, _utils.COLORS).cyan,
                borderRadius: 5,
                hoverOffset: 0,
                borderColor: "rgba(0,0,0,0)",
                borderWidth: 1.5,
                barThickness: 7
            },
            {
                label: "Others",
                data: [
                    10,
                    20,
                    35,
                    40,
                    12,
                    30,
                    18
                ],
                backgroundColor: (0, _utils.COLORS).orange,
                borderRadius: 5,
                hoverOffset: 0,
                borderColor: "rgba(0,0,0,0)",
                borderWidth: 1.5,
                barThickness: 7
            }
        ]
    };
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -3,
                    bottom: 0
                }
            },
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP),
                    callbacks: {
                        label: (tooltipItem, data)=>{
                            return tooltipItem.formattedValue + "K";
                        }
                    }
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0)
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        padding: 2,
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    if (CHART_WRAPPER) userAcquisitionChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    let list = "";
    const WRAPPER = document.getElementById("list-user-acquisition");
    const DATA = [
        {
            source: "Organic Search",
            color: "bg-primary",
            visits: 243.2,
            percentage: 32.4,
            opacity: 1,
            up: true
        },
        {
            source: "Paid Search",
            color: "bg-success",
            visits: 142.5,
            percentage: 66.1,
            opacity: 0.6,
            up: true
        },
        {
            source: "Direct",
            color: "bg-info",
            visits: 78.2,
            percentage: 10.9,
            opacity: 0.3,
            up: false
        },
        {
            source: "Others",
            color: "bg-warning",
            visits: 32.5,
            percentage: 54.1,
            opacity: 0.1,
            up: false
        }
    ];
    if (WRAPPER) DATA.forEach((item)=>{
        list += `<div class="d-flex align-items-start">
						<i class="w-2.5 h-2.5 mt-1.5 rounded-circle me-3 ${item.color}"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1">${item.source}</div>

							<div class="fs-5 fw-medium text-end w-12">${item.visits}</div>

							<div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${item.up ? "text-success" : "text-danger"}">
								${item.percentage}%

								<i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
							</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${item.percentage}" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${item.color}" style="width: ${item.percentage}%"></div>
							</div>
						</div>
                    </div>`;
        WRAPPER.innerHTML = list;
    });
};
const userAcquisitionChartUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(userAcquisitionChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9cSKT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "visitsBySource", ()=>visitsBySource);
parcelHelpers.export(exports, "visitsBySourceUpdate", ()=>visitsBySourceUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _chartJs = require("chart.js");
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-visits-source");
let visitsBySourceChart;
const visitsBySource = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Chart data
    const CHART_DATA = {
        labels: [
            "Google",
            "Direct",
            "Bing",
            "Yahoo",
            "Others"
        ],
        datasets: [
            {
                data: [
                    23981,
                    16342,
                    9736,
                    7632,
                    5374
                ],
                backgroundColor: [
                    (0, _utils.COLORS).blue,
                    (0, _utils.COLORS).green,
                    (0, _utils.COLORS).purple,
                    (0, _utils.COLORS).cyan,
                    (0, _utils.COLORS).orange
                ],
                borderWidth: 4,
                borderColor: (0, _utils.cssVar)("--bs-chart-pie-border-color"),
                hoverOffset: 1,
                hoverBorderWidth: 0,
                borderRadius: 5
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "doughnut",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            responsive: true,
            animation: false,
            cutout: 85,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) visitsBySourceChart = new (0, _chartJs.Chart)(CHART_WRAPPER, CHART_CONFIG);
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    const WRAPPER = document.getElementById("list-visits-source");
    let list = "";
    const DATA = [
        {
            source: "Google",
            visits: 23981,
            percentage: 52.6,
            className: "bg-primary",
            up: true
        },
        {
            source: "Direct",
            visits: 16342,
            percentage: 31.3,
            className: "bg-success",
            up: true
        },
        {
            source: "Bing",
            visits: 9736,
            percentage: 10.5,
            className: "bg-purple",
            up: false
        },
        {
            source: "Yahoo",
            visits: 5687,
            percentage: 7.1,
            className: "bg-warning",
            up: false
        },
        {
            source: "Others",
            visits: 7632,
            percentage: 17.2,
            className: "bg-info",
            up: false
        }
    ];
    if (WRAPPER) DATA.forEach((item)=>{
        list += `<div class="d-flex align-items-start">
                        <i class="${item.className} w-2.5 h-2.5 mt-1.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1">${item.source}</div>

							<div class="fs-5 fw-medium text-end w-12">${item.visits}</div>

							<div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${item.up ? "text-success" : "text-danger"}">
								${item.percentage}%

								<i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
							</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${item.percentage}" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${item.className}" style="width: ${item.percentage}%"></div>
							</div>
						</div>
                    </div>`;
        WRAPPER.innerHTML = list;
    });
};
const visitsBySourceUpdate = ()=>{
    const updateBorderColors = ()=>{
        visitsBySourceChart.data.datasets[0].borderColor = (0, _utils.cssVar)("--bs-chart-pie-border-color");
    };
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(visitsBySourceChart, updateBorderColors());
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js":"fbE0O","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"lGdBX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userConnections", ()=>userConnections);
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const userConnections = ()=>{
    const WRAPPER = document.getElementById("user-connections");
    let list = "";
    const DATA = [
        {
            name: "Essie Carlson",
            handle: "@essiecarlson",
            avatar: "1",
            mutual: "33"
        },
        {
            name: "Dominic Grant",
            handle: "@dominicgrant",
            avatar: "2",
            mutual: "10"
        },
        {
            name: "Stephen McBride",
            handle: "@stephenmcbride",
            avatar: "3",
            mutual: "45"
        },
        {
            name: "Josephine Murphy",
            handle: "@josephinemurphy",
            avatar: "4",
            mutual: "22"
        },
        {
            name: "Virginia Crawford",
            handle: "@virginiacrawford",
            avatar: "5",
            mutual: "01"
        },
        {
            name: "Chase Hines",
            handle: "@chasehines",
            avatar: "6",
            mutual: "12"
        },
        {
            name: "Lula Kim",
            handle: "@lulakim",
            avatar: "7",
            mutual: "76"
        },
        {
            name: "Curtis Ryan",
            handle: "@curtisryan",
            avatar: "8",
            mutual: "89"
        },
        {
            name: "Alma Sims",
            handle: "@almasims",
            avatar: "9",
            mutual: "65"
        },
        {
            name: "Jesus Scott",
            handle: "@jesusscott",
            avatar: "10",
            mutual: "34"
        },
        {
            name: "Cynthia Cain",
            handle: "@cynthiacain",
            avatar: "11",
            mutual: "76"
        },
        {
            name: "Melvin Townsend",
            handle: "@melvintownsend",
            avatar: "12",
            mutual: "29"
        },
        {
            name: "Lena Jensen",
            handle: "@lenajensen",
            avatar: "13",
            mutual: "45"
        },
        {
            name: "Lloyd Fisher",
            handle: "@lloydfisher",
            avatar: "14",
            mutual: "12"
        },
        {
            name: "Mark Spencer",
            handle: "@spencer",
            avatar: "15",
            mutual: "07"
        },
        {
            name: "Ben Afflect",
            handle: "@afflect",
            avatar: "16",
            mutual: "23"
        }
    ];
    if (WRAPPER) {
        DATA.forEach((item)=>{
            list += `<div class="card p-3 g-col-12 g-col-md-6 g-col-lg-4 g-col-xl-3">
						<div class="d-flex align-items-center mb-5">
							<a href="#" class="flex-shrink-0 mr-3">
								<img class="w-10 h-10 ms-1 rounded-circle me-3" src="${(0, _jpgDefault.default)[item.avatar]}" alt="">
							</a>
							<div class="flex-grow-1">
								<a href="" class="text-body-emphasis">${item.name}</a>
								<div class="text-body-secondary text-link-seondary fs-7">${item.handle}</div>
							</div>
							<div class="dropdown align-self-start">
								<button class="icon ph ph-dots-three-circle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>
								<nav class="dropdown-menu dropdown-menu-end">
									<a class="dropdown-item" href="#">Block</a>
									<a class="dropdown-item" href="#">Message</a>
								</nav>
							</div>
						</div>
                        
						<div class="text-center">
							<button class="btn btn-primary btn-sm mb-1 w-40">Connected</button>
							<div class="text-body-secondary fs-8">${item.mutual} Mutual</div>
						</div>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/contacts/*.jpg":"avoai","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"avoai":[function(require,module,exports,__globalThis) {
const _temp0 = require("9b8802c7428c54aa");
const _temp1 = require("c3f635d121a315a8");
const _temp2 = require("6256beede9a78f93");
const _temp3 = require("8b4aab0c3dcd1f38");
const _temp4 = require("f3382318a5496935");
const _temp5 = require("52e914851add1e51");
const _temp6 = require("3ad246dfbb54eb7f");
const _temp7 = require("43129c18d11aa966");
const _temp8 = require("98b5bdb075e46884");
const _temp9 = require("6891b6f40de9bef3");
const _temp10 = require("b1a2412169d15823");
const _temp11 = require("968570295ce383d8");
const _temp12 = require("5860e1737b5b8bfb");
const _temp13 = require("221be27bfd5fde3b");
const _temp14 = require("53df12a22e3fdcb9");
const _temp15 = require("e87693c4de284d31");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"9b8802c7428c54aa":"eM9AY","c3f635d121a315a8":"4tWpl","6256beede9a78f93":"egP4V","8b4aab0c3dcd1f38":"dRrEf","f3382318a5496935":"cG5Jh","52e914851add1e51":"945u4","3ad246dfbb54eb7f":"go82E","43129c18d11aa966":"4qG8A","98b5bdb075e46884":"4jtK8","6891b6f40de9bef3":"8Gxhp","b1a2412169d15823":"5foDv","968570295ce383d8":"hSAKF","5860e1737b5b8bfb":"3Jp7F","221be27bfd5fde3b":"elJBN","53df12a22e3fdcb9":"3eInA","e87693c4de284d31":"a5Vjj"}],"ad3ms":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userPhotos", ()=>userPhotos);
var _jpg = require("../../../img/gallery/thumbs/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const userPhotos = ()=>{
    let list = "";
    const WRAPPER = document.getElementById("user-photos");
    const DATA = [
        {
            name: "1",
            picture: "1"
        },
        {
            name: "2",
            picture: "2"
        },
        {
            name: "3",
            picture: "3"
        },
        {
            name: "4",
            picture: "4",
            mutual: "22"
        },
        {
            name: "5",
            picture: "5"
        },
        {
            name: "6",
            picture: "6"
        },
        {
            name: "7",
            picture: "7"
        },
        {
            name: "8",
            picture: "8"
        },
        {
            name: "9",
            picture: "9"
        },
        {
            name: "10",
            picture: "10"
        },
        {
            name: "11",
            picture: "11"
        },
        {
            name: "12",
            picture: "12"
        },
        {
            name: "13",
            picture: "13"
        },
        {
            name: "14",
            picture: "14"
        },
        {
            name: "15",
            picture: "15"
        },
        {
            name: "16",
            picture: "16"
        },
        {
            name: "17",
            picture: "17"
        },
        {
            name: "18",
            picture: "18"
        },
        {
            name: "19",
            picture: "19"
        },
        {
            name: "20",
            picture: "20"
        },
        {
            name: "21",
            picture: "21"
        },
        {
            name: "22",
            picture: "22"
        },
        {
            name: "23",
            picture: "23"
        },
        {
            name: "24",
            picture: "24"
        }
    ];
    if (WRAPPER) {
        DATA.forEach((item)=>{
            list += `<a href="" class="g-col-4 g-col-md-3 g-col-xl-2">
                        <img class="rounded w-100" src="${(0, _jpgDefault.default)[item.picture]}" alt="${(0, _jpgDefault.default)[item.picture]}">
                    </a>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/gallery/thumbs/*.jpg":"8yg6X","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"8yg6X":[function(require,module,exports,__globalThis) {
const _temp0 = require("c9efbcd87a48dd75");
const _temp1 = require("db45811b4d5e1c9c");
const _temp2 = require("3a15a17703031c1b");
const _temp3 = require("d92adb57f9c3324d");
const _temp4 = require("a718067bdce32038");
const _temp5 = require("cb73c908850e9f74");
const _temp6 = require("3b82314abdaab4a8");
const _temp7 = require("4177d11a5e676d27");
const _temp8 = require("5e2149fd18fbc29c");
const _temp9 = require("5853d35b42eca845");
const _temp10 = require("10fe56f4b613d258");
const _temp11 = require("b4accdba8a3a6ba2");
const _temp12 = require("3daa720445dd4f5");
const _temp13 = require("878bd2ba14875269");
const _temp14 = require("1923a424f9269a21");
const _temp15 = require("90cfdee964d26109");
const _temp16 = require("c1e9257acfc4d4e9");
const _temp17 = require("3509b1a668eca52e");
const _temp18 = require("278be708d974cfcf");
const _temp19 = require("d7ed240511079e7d");
const _temp20 = require("dd534a5710935854");
const _temp21 = require("3fce33bb28b7f81c");
const _temp22 = require("92eb93f81790893b");
const _temp23 = require("2ca783fd1263556");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15,
    "17": _temp16,
    "18": _temp17,
    "19": _temp18,
    "20": _temp19,
    "21": _temp20,
    "22": _temp21,
    "23": _temp22,
    "24": _temp23
};

},{"c9efbcd87a48dd75":"d6AZk","db45811b4d5e1c9c":"caWDA","3a15a17703031c1b":"koIoX","d92adb57f9c3324d":"kS7Wm","a718067bdce32038":"j48xB","cb73c908850e9f74":"h9jmV","3b82314abdaab4a8":"7v5jN","4177d11a5e676d27":"wBldV","5e2149fd18fbc29c":"cN31g","5853d35b42eca845":"2Bw7h","10fe56f4b613d258":"2xGgh","b4accdba8a3a6ba2":"4Fpxc","3daa720445dd4f5":"arHdx","878bd2ba14875269":"4gVlj","1923a424f9269a21":"dQWpg","90cfdee964d26109":"caIGc","c1e9257acfc4d4e9":"kBYUL","3509b1a668eca52e":"Nxq5O","278be708d974cfcf":"e2YhH","d7ed240511079e7d":"c0Ltn","dd534a5710935854":"kQnOC","3fce33bb28b7f81c":"7EbMh","92eb93f81790893b":"l2DNt","2ca783fd1263556":"1FMbB"}],"d6AZk":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("1.cf30d0b4.jpg") + "?" + Date.now();

},{}],"caWDA":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("2.a84ad3f6.jpg") + "?" + Date.now();

},{}],"koIoX":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("3.8ea7603c.jpg") + "?" + Date.now();

},{}],"kS7Wm":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("4.1f0d095f.jpg") + "?" + Date.now();

},{}],"j48xB":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("5.dcae52cd.jpg") + "?" + Date.now();

},{}],"h9jmV":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("6.6d432a4d.jpg") + "?" + Date.now();

},{}],"7v5jN":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("7.42390c90.jpg") + "?" + Date.now();

},{}],"wBldV":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("8.7807e982.jpg") + "?" + Date.now();

},{}],"cN31g":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("9.295f1f18.jpg") + "?" + Date.now();

},{}],"2Bw7h":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("10.11ef73e4.jpg") + "?" + Date.now();

},{}],"2xGgh":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("11.8cd3ca26.jpg") + "?" + Date.now();

},{}],"4Fpxc":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("12.18eb1c77.jpg") + "?" + Date.now();

},{}],"arHdx":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("13.53cad05f.jpg") + "?" + Date.now();

},{}],"4gVlj":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("14.0d1dad7a.jpg") + "?" + Date.now();

},{}],"dQWpg":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("15.a36b1df7.jpg") + "?" + Date.now();

},{}],"caIGc":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("16.6fc18764.jpg") + "?" + Date.now();

},{}],"kBYUL":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("17.4d151748.jpg") + "?" + Date.now();

},{}],"Nxq5O":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("18.f7ac2e43.jpg") + "?" + Date.now();

},{}],"e2YhH":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("19.50e8a877.jpg") + "?" + Date.now();

},{}],"c0Ltn":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("20.98452ac6.jpg") + "?" + Date.now();

},{}],"kQnOC":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("21.a1309384.jpg") + "?" + Date.now();

},{}],"7EbMh":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("22.2d87a7f2.jpg") + "?" + Date.now();

},{}],"l2DNt":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("23.c23e634d.jpg") + "?" + Date.now();

},{}],"1FMbB":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("24.6634e3c4.jpg") + "?" + Date.now();

},{}],"1ouuK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contacts", ()=>contacts);
var _data = require("./data");
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
var _utils = require("../../utils");
const contacts = ()=>{
    const WRAPPER = document.getElementById("contacts-list");
    if (WRAPPER) (0, _data.DATA).map((item, index)=>{
        let listItems = "";
        let avatar = "";
        let active = "";
        let group = document.createElement("div");
        group.id = `contacts-list-${item.group}`;
        group.className = "position-relative";
        WRAPPER.appendChild(group);
        item.items.map((contact, contactIndex)=>{
            // Set avatar
            if (contact.img) avatar = (0, _utils.avatarImg)((0, _jpgDefault.default)[contact.img], contact.name);
            else avatar = (0, _utils.avatarCap)(contact.cap, contact.color, contact.border);
            // Set active class
            index === 0 && contactIndex === 0 ? active = "bg-active mb-1" : active = "bg-hover";
            listItems += `<button type="button" data-la-toggle="body" class="${active} d-flex align-items-center w-100 text-start py-2.5 px-3 rounded mb-px">
                                    ${avatar}
                                    <div class="flex-1 overflow-hidden">
                                        <div class="text-body-emphasis truncate mb-0.5">${contact.name}</div>
                                        <div class="text-secondary-emphasis fs-7">${contact.email}</div>
                                    </div>
                                </button>`;
        });
        document.getElementById(`contacts-list-${item.group}`).innerHTML = listItems;
    });
};

},{"./data":"2U7xO","../../../img/contacts/*.jpg":"4Mc6H","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2U7xO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
const DATA = [
    {
        group: "a",
        items: [
            {
                id: 1,
                name: "Andre Allison",
                img: "3",
                email: "andre-allison@allison.hn",
                phone: "303-570-0941",
                job: "Investor Implementation Analyst",
                company: "Harvey Inc",
                address: "866 Romrog Way, Curtis, 69025, Nebraska",
                notes: "Nulla vitae elit libero, a pharetra augue. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.",
                favourite: true
            },
            {
                id: 2,
                name: "Allion Murphy",
                img: "4",
                email: "allion-murphy@aool.com",
                phone: "212-692-6590",
                job: "Social Media Manager",
                company: "Voot and Voxy Inc.",
                address: "516  Oakwood Avenue, 10016, New York",
                notes: "Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero a pharetra augue.",
                favourite: true
            },
            {
                id: 3,
                name: "Ann Skinner",
                cap: "d",
                color: "bg-warning",
                border: "border-warning",
                email: "ann-skinner@shotmail.com",
                phone: "270-787-1629",
                job: "Freelance Graphics Designer",
                company: "Self Employed",
                address: "509  Coffman Alley, Paducah, Kentucky",
                notes: "",
                favourite: false
            }
        ]
    },
    {
        group: "b",
        items: [
            {
                id: 4,
                name: "Brandon Leonard",
                cap: "B",
                color: "bg-teal",
                border: "border-teal",
                email: "brandon-leonard@aahoo.com",
                phone: "740-310-9627",
                job: "Product Intranet Manager",
                company: "Anderson-Veum",
                address: "3221 Margaret Street, Houston, Texas",
                notes: "Nullam quis risus eget urna mollis ornare vel eu leo. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.",
                favourite: false
            },
            {
                id: 5,
                name: "Boris Ramirez",
                img: "16",
                email: "boris-ramiraz@aahoo.com",
                phone: "315-338-3921",
                job: "Chief Technology Officer",
                company: "Manco Software Solutions",
                address: "338  Oak Street, Rome, New York",
                notes: "Donec id elit non mi porta gravida at eget metus.",
                favourite: false
            }
        ]
    },
    {
        group: "c",
        items: [
            {
                id: 6,
                name: "Carmen Erickson",
                img: "12",
                email: "carmen-erickson@aool.com",
                phone: "412-305-8581",
                job: "Corporate Mobility Orchestrator",
                company: "Mraz, Senger and Gislason",
                address: "1579 Coal Road, Sugar Notch, 18706, Pennsylvania",
                notes: "",
                favourite: false
            },
            {
                id: 7,
                name: "Carroll Hunt",
                img: "14",
                email: "carroll-hunt@hunt.hn",
                phone: "713-919-6065",
                job: "District Directives Agent",
                company: "Turcotte, Murphy and Kreiger",
                address: "4020 Margaret Street, Houston, Texas",
                notes: "",
                favourite: true
            }
        ]
    },
    {
        group: "e",
        items: [
            {
                id: 8,
                name: "Ellen Boone",
                cap: "E",
                color: "bg-primary",
                border: "border-primary",
                email: "ellen-boone@amail.com",
                phone: "720-231-6682",
                job: "Direct Marketing Specialist",
                company: "Huels, Runte and Klocko",
                address: "27 Cinnamon Lane, San Antonio, Texas",
                notes: "Donec ullamcorper nulla non metus auctor fringilla. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo.",
                favourite: true
            },
            {
                id: 9,
                char: "E",
                name: "Elbert Elliott",
                img: "13",
                email: "elbert-elliott@liive.com",
                phone: "859-967-9374",
                job: "Research Specialist",
                company: "Flatley-Jacobson",
                address: "4694 Counts Lane, Lexington, Kentucky",
                notes: "",
                favourite: false
            },
            {
                id: 10,
                name: "Emanuel Owens",
                cap: "E",
                color: "bg-info",
                border: "border-info",
                email: "emanuel-owens@hiive.com",
                phone: "808-728-0871",
                job: "District Directives Agent",
                company: "Jenkins Inc",
                address: "1421 Indiana Avenue, Honolulu, 96814, Hawaii",
                notes: "Maecenas sed diam eget risus varius blandit sit amet non magna.",
                favourite: false
            }
        ]
    },
    {
        group: "f",
        items: [
            {
                id: 11,
                char: "F",
                name: "Faith Alexander",
                cap: "F",
                color: "bg-danger",
                border: "border-danger",
                email: "faith-alexander@houtlook.com",
                phone: "740-310-9627",
                job: "Identity Supervisor",
                company: "Ward, Zemlak and Gutkowski",
                address: "3376 Lowes Alley, Saint Clairsville, 43950, ",
                notes: "Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.",
                favourite: true
            }
        ]
    },
    {
        group: "j",
        items: [
            {
                id: 12,
                name: "Joan Hernandez",
                cap: "J",
                color: "bg-success",
                border: "border-success",
                email: "joan-hernandez@mails.com",
                phone: "703-380-2084",
                job: "International Quality Associate",
                company: "Grimes, Krajcik and Jerde",
                address: "3190 Maxwell Farm Road, Roanoke, 24011, Virginia",
                notes: "Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.",
                favourite: true
            }
        ]
    },
    {
        group: "m",
        items: [
            {
                id: 13,
                name: "Marsha Swanson",
                img: "10",
                email: "marsha-swanson@swann.com.hn",
                phone: "512-284-2226",
                job: "District Directives Agent",
                company: "Towne Ltd",
                address: "4687 Sundown Lane, Bastrop, 78701, Texas",
                notes: "",
                favourite: false
            }
        ]
    },
    {
        group: "n",
        items: [
            {
                id: 14,
                name: "Nadine Guerrero",
                img: "1",
                email: "nadine-guerrero@aool.com",
                phone: "540-257-7385",
                job: "Investor Applications Producer",
                company: "Bechtelar Ltd",
                address: "2542 West Street, Grand Rapids, Michigan",
                notes: "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec ullamcorper nulla non metus auctor fringilla. Maecenas sed diam eget risus varius blandit sit amet non magna. tiam porta sem malesuada magna mollis euismod. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.",
                favourite: false
            },
            {
                id: 15,
                name: "Natasha Mckenzie",
                cap: "N",
                color: "bg-purple",
                border: "border-purple",
                email: "natasha-mckenzie@benn.ln",
                phone: "806-275-8406",
                job: "Mobility Specialist",
                company: "Kemmer and Sons",
                address: "3054 Hilltop Drive, Borger, Texas",
                notes: "Cras mattis consectetur purus sit amet fermentum.",
                favourite: false
            }
        ]
    },
    {
        group: "r",
        items: [
            {
                id: 16,
                name: "Rodney Harrison",
                img: "11",
                email: "rodney-harrison@rodd.com",
                phone: "202-253-4772",
                job: "Regional Communications Executive",
                company: "Bahringer LLC",
                address: "2606 Passaic Street, Adelphi, 20783, Washington DC",
                notes: "Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Curabitur blandit tempus porttitor. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                favourite: false
            }
        ]
    },
    {
        group: "s",
        items: [
            {
                id: 17,
                name: "Santos Underwood",
                img: "15",
                email: "santos-underwood@santos.sn",
                phone: "314-399-4896",
                job: "Corporate Mobility Orchestrator",
                company: "Okuneva Group",
                address: "1386 Bruce Street, Saint Louis, Missouri",
                notes: "",
                favourite: false
            },
            {
                id: 18,
                name: "Salvador Flowers",
                cap: "S",
                color: "bg-pink",
                border: "border-pink",
                email: "salvador-flowers@salv.fl",
                phone: "419-283-5041",
                job: "Senior Applications Architect",
                company: "Smith-Runolfsdottir",
                address: "724 Cedarstone Drive, Toledo, 43613, Ohio",
                notes: "Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.",
                favourite: true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"4Mc6H":[function(require,module,exports,__globalThis) {
const _temp0 = require("dfd4418673a5c621");
const _temp1 = require("1a1a66fba85c19d4");
const _temp2 = require("8da841a167a3d9cc");
const _temp3 = require("b95dde4d952b1852");
const _temp4 = require("b6ed8917c34339b0");
const _temp5 = require("f85c2690dbf665fc");
const _temp6 = require("95362285fa18dc3d");
const _temp7 = require("275d2d24706c5a02");
const _temp8 = require("3283d3dec8c1b483");
const _temp9 = require("bf1db2b9dc5c6f13");
const _temp10 = require("55380124f6818e55");
const _temp11 = require("b2423c43b1cf69c6");
const _temp12 = require("bae946a41e2f4288");
const _temp13 = require("6648d989878c9e5f");
const _temp14 = require("553bba41c1a97ae5");
const _temp15 = require("7d1f141a74830113");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"dfd4418673a5c621":"eM9AY","1a1a66fba85c19d4":"4tWpl","8da841a167a3d9cc":"egP4V","b95dde4d952b1852":"dRrEf","b6ed8917c34339b0":"cG5Jh","f85c2690dbf665fc":"945u4","95362285fa18dc3d":"go82E","275d2d24706c5a02":"4qG8A","3283d3dec8c1b483":"4jtK8","bf1db2b9dc5c6f13":"8Gxhp","55380124f6818e55":"5foDv","b2423c43b1cf69c6":"hSAKF","bae946a41e2f4288":"3Jp7F","6648d989878c9e5f":"elJBN","553bba41c1a97ae5":"3eInA","7d1f141a74830113":"a5Vjj"}],"i9u7J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentSidebar", ()=>contentSidebar);
const contentSidebar = ()=>{
    const TOGGLES = document.querySelectorAll("[data-la-toggle]");
    const CONTENT = document.getElementById("content");
    if (TOGGLES.length > 0) {
        const toggleHandler = (e)=>{
            const target = e.currentTarget.getAttribute("data-la-toggle");
            if (target === "body") {
                CONTENT.classList.remove("content-list-toggled");
                CONTENT.classList.add("content-body-toggled");
            } else if (target === "list") {
                CONTENT.classList.remove("content-body-toggled");
                CONTENT.classList.add("content-list-toggled");
            }
        };
        TOGGLES.forEach((el)=>{
            el.addEventListener("click", toggleHandler);
        });
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"86LHh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fileManager", ()=>fileManager);
var _jpg = require("../../../img/gallery/thumbs/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
var _data = require("./data");
const fileManager = ()=>{
    const FOLDERS_WRAPPER = document.getElementById("folders");
    const FILES_WRAPPER = document.getElementById("files");
    let foldersList = "";
    let filesList = "";
    // Folders
    if (FOLDERS_WRAPPER) {
        (0, _data.FOLDERS_DATA).forEach((item)=>{
            foldersList += `<button type="button" class="card card-hover px-4 py-3 text-start flex-row g-col-6 g-col-sm-4 g-col-md-3 g-col-lg-3 g-col-xxl-2">
                                <div class="flex-grow-1 overflow-hidden">
                                    <div class="text-truncate text-body-emphasis mb-0.5">${item.name}</div>
                                    <div class="text-body-secondary fs-7">${item.files} Files</div>
                                </div>
								<i class="ph ph-folder fs-4"></i>
                            </a>`;
        });
        FOLDERS_WRAPPER.innerHTML = foldersList;
    }
    // Files
    if (FILES_WRAPPER) {
        let filePreview = "";
        (0, _data.FILES_DATA).forEach((item)=>{
            if (item.type === "image") filePreview = `<div class="h-24 w-100">
                                    <img class="w-100 h-24 object-fit-cover rounded-1" src="${(0, _jpgDefault.default)[item.img]}" alt="">
                                </div>`;
            else filePreview = `<div class="h-24 w-100 d-grid place-content-center rounded-1 ${item.color}" style="--bs-bg-opacity: 0.15;">
                                    <i class="w-9 h-9 text-invert rounded-circle d-grid place-content-center fs-4 ph ${item.icon} ${item.color}" style="--bs-bg-opacity: 0.65;"></i>
                                </div> `;
            filesList += `<button type="button" class="card card-hover p-1 g-col-6 g-col-sm-4 g-col-md-3 g-col-lg-3 g-col-xxl-2">
                                ${filePreview}
                                <div class="p-2 overflow-hidden text-start">
                                    <div class="text-truncate text-body-emphasis fs-6 mb-0.5">${item.name}</div>
                                    <div class="text-body-secondary fs-7">${item.size}</div>
                                </div>
                            </button>`;
        });
        FILES_WRAPPER.innerHTML = filesList;
    }
};

},{"../../../img/gallery/thumbs/*.jpg":"3f9lz","./data":"ifuaS","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3f9lz":[function(require,module,exports,__globalThis) {
const _temp0 = require("774ef84c6e721ac4");
const _temp1 = require("c994df61e6a2223a");
const _temp2 = require("548a99b1e4b1e279");
const _temp3 = require("cb5253f75394786e");
const _temp4 = require("2fdfbb65913707e5");
const _temp5 = require("f34d5c52f98ee9bf");
const _temp6 = require("9bb06ddea75db516");
const _temp7 = require("d6b6aa4a8f437f58");
const _temp8 = require("2a18be202363cfd4");
const _temp9 = require("2c107b9b195cc036");
const _temp10 = require("8c1769996d2cc0e");
const _temp11 = require("b794aba0df257efc");
const _temp12 = require("3fc7f85e069800a0");
const _temp13 = require("a18211647d452752");
const _temp14 = require("e56e1acb45306603");
const _temp15 = require("6bbc6e8e276daa36");
const _temp16 = require("d70ef1510168e18e");
const _temp17 = require("cef3921a1b722af9");
const _temp18 = require("94e80903655baee");
const _temp19 = require("d0bb4839489f71c5");
const _temp20 = require("83b1e27ae077047f");
const _temp21 = require("1f97a866dd3b1d2b");
const _temp22 = require("8c33d9de0bf04995");
const _temp23 = require("491441f090b6d6b2");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15,
    "17": _temp16,
    "18": _temp17,
    "19": _temp18,
    "20": _temp19,
    "21": _temp20,
    "22": _temp21,
    "23": _temp22,
    "24": _temp23
};

},{"774ef84c6e721ac4":"d6AZk","c994df61e6a2223a":"caWDA","548a99b1e4b1e279":"koIoX","cb5253f75394786e":"kS7Wm","2fdfbb65913707e5":"j48xB","f34d5c52f98ee9bf":"h9jmV","9bb06ddea75db516":"7v5jN","d6b6aa4a8f437f58":"wBldV","2a18be202363cfd4":"cN31g","2c107b9b195cc036":"2Bw7h","8c1769996d2cc0e":"2xGgh","b794aba0df257efc":"4Fpxc","3fc7f85e069800a0":"arHdx","a18211647d452752":"4gVlj","e56e1acb45306603":"dQWpg","6bbc6e8e276daa36":"caIGc","d70ef1510168e18e":"kBYUL","cef3921a1b722af9":"Nxq5O","94e80903655baee":"e2YhH","d0bb4839489f71c5":"c0Ltn","83b1e27ae077047f":"kQnOC","1f97a866dd3b1d2b":"7EbMh","8c33d9de0bf04995":"l2DNt","491441f090b6d6b2":"1FMbB"}],"ifuaS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FOLDERS_DATA", ()=>FOLDERS_DATA);
parcelHelpers.export(exports, "FILES_DATA", ()=>FILES_DATA);
const FOLDERS_DATA = [
    {
        id: 1,
        name: "Spread Sheets",
        files: "312"
    },
    {
        id: 2,
        name: "Documents",
        files: "4532"
    },
    {
        id: 3,
        name: "Downloaded Files",
        files: "15876"
    },
    {
        id: 4,
        name: "2023 Projects",
        files: "40"
    },
    {
        id: 5,
        name: "RAW Pictures",
        files: "543"
    },
    {
        id: "6",
        name: "Video Scripts",
        files: "07"
    },
    {
        id: "7",
        name: "Development",
        files: "4353"
    },
    {
        id: "8",
        name: "Blog Articles",
        files: "34"
    }
];
const FILES_DATA = [
    {
        id: 7,
        type: "code",
        icon: "ph-brackets-curly",
        name: "package.json",
        size: "229 bytes",
        color: "bg-warning",
        date: "18/07/2024 11:32:41"
    },
    {
        id: 8,
        type: "doc",
        icon: "ph-article",
        name: "cover_letter.doc",
        size: "32 kb",
        color: "bg-primary",
        date: "21/02/2024 08:48:13"
    },
    {
        id: 9,
        type: "audio",
        icon: "ph-headset",
        name: "recording_09-10.mp3",
        size: "2.32 mb",
        color: "bg-success",
        date: "10/02/2024 11:25:08"
    },
    {
        id: 10,
        type: "image",
        img: "2",
        name: "wallpaper-widescreen.jpg",
        size: "900 kb",
        date: "23/03/2024 11:59:33"
    },
    {
        id: 11,
        type: "image",
        img: "1",
        name: "screenshot-98731.jpg",
        size: "653 kb",
        date: "17/02/2024 03:30:34"
    },
    {
        id: 12,
        type: "video",
        icon: "ph-play-circle",
        name: "animation-trailer.mp4",
        size: "43.86 mb",
        color: "bg-pink",
        date: "07/05/2024 15:56:40"
    },
    {
        id: 13,
        type: "pdf",
        icon: "ph-file-pdf",
        name: "instructions.pdf",
        size: "205.5 kb",
        color: "bg-danger",
        date: "25/12/2024 11:17:53"
    },
    {
        id: 14,
        type: "spreadsheet",
        icon: "ph-grid-four",
        name: "signup-list.xls",
        size: "987.23 kb",
        color: "bg-purple",
        date: "18/01/2024 21:10:54"
    },
    {
        id: 15,
        type: "image",
        img: "13",
        name: "sample-preview.jpg",
        size: "2.34 mb",
        date: "18/12/2024 23:04:12"
    },
    {
        id: 16,
        type: "text",
        icon: "ph-text-a-underline",
        name: "detailed-notes.txt",
        size: "54.5 kb",
        color: "bg-indigo",
        date: "05/11/2024 11:31:34"
    },
    {
        id: 17,
        type: "presentation",
        icon: "ph-presentation-chart",
        name: "presentation.ppt",
        size: "10.12 mb",
        color: "bg-info",
        date: "30/09/2024 17:50:53"
    },
    {
        id: 18,
        type: "zip",
        icon: "ph-file-archive",
        name: "sample-icons.zip",
        size: "98.44 mb",
        color: "bg-secondary",
        date: "08/01/2024 07:09:13"
    },
    {
        id: 19,
        type: "other",
        icon: "ph-file",
        name: "data-list.yaml",
        size: "763.54 kb",
        color: "bg-lime",
        date: "31/05/2024 02:52:29"
    },
    {
        id: 20,
        type: "image",
        img: "19",
        name: "photoshop-output.jpg",
        size: "635 kb",
        date: "30/01/2024 00:54:57"
    },
    {
        id: 21,
        type: "image",
        img: "24",
        name: "736183293836100.jpg",
        size: "75 kb",
        date: "13/03/2024 17:24:03"
    },
    {
        id: 22,
        type: "image",
        img: "18",
        name: "00928921221212993283.jpg",
        size: "75 kb",
        date: "29/03/2024 11:47:12"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"de3ey":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mail", ()=>mail);
var _data = require("./data");
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
var _utils = require("../../utils");
const mail = ()=>{
    const WRAPPER = document.getElementById("mail-list");
    let list = "";
    let avatar = "";
    let active = "";
    let unread = "";
    if (WRAPPER) {
        (0, _data.DATA).map((item, index)=>{
            // Set avatar
            if (item.img) avatar = (0, _utils.avatarImg)((0, _jpgDefault.default)[item.img], item.from);
            else avatar = (0, _utils.avatarCap)(item.cap, item.color, item.border);
            // Set active class
            index === 0 && index === 0 ? active = "bg-active mb-1" : active = "bg-hover";
            // Set unread indiciator
            item.unread ? unread = `<i class="w-1 h-1 rounded-circle position-absolute top-0 bottom-0 my-auto start-0 ms-n2 bg-primary"></i>` : unread = "";
            list += `<button type="button" data-la-toggle="body" class="${active} d-flex align-items-center w-100 text-start py-2.5 px-3 rounded mb-px">
                        <div class="position-relative">
                            ${unread}
                            ${avatar}
                        </div>
                        <div class="flex-grow-1 overflow-hidden">
                            <div class="text-truncate d-flex align-items-center mb-0.5 ${unread ? "text-body-emphasis" : ""}">
                                <div class="truncate">${item.from}</div>
                                <div class="text-body-secondary fs-8 ms-auto">${item.time.short}</div>
                            </div>
                            <div class="text-secondary-emphasis fs-7 text-truncate">${item.subject}</div>
                        </div>
                    </button>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"./data":"2IALZ","../../../img/contacts/*.jpg":"cv0p3","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2IALZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
const DATA = [
    {
        id: 1,
        subject: "Lorem ipsum dolor sit amet consectetur adipiscing elit",
        from: "Jordan Swanson",
        time: {
            full: "Sun 20/12/2019 10:10",
            short: "10:10"
        },
        img: "1",
        unread: false
    },
    {
        id: 2,
        subject: "Proin consectetur leo a sem lobortis pulvinar",
        from: "Ivan Mack",
        time: {
            full: "Sun 20/12/2019 09:21",
            short: "09:21"
        },
        img: "15",
        unread: true
    },
    {
        id: 3,
        subject: "Integer pellentesque lorem et erat aliquet accumsan",
        from: "Marguerite Estrada",
        time: {
            full: "Sun 20/12/2019 06:34",
            short: "06:34"
        },
        cap: "M",
        color: "bg-primary",
        border: "border-primary",
        unread: true
    },
    {
        id: 4,
        subject: "Suspendisse ut est at urna maximus eleifend",
        from: "Christine Torres",
        time: {
            full: "Sun 20/12/2019 02:55",
            short: "02:55"
        },
        img: "3",
        unread: true
    },
    {
        id: 5,
        subject: "Quisque cursus ipsum ac commodo ultricies",
        from: "Rafael Daniel",
        time: {
            full: "Sun 20/12/2019 01:02",
            short: "01:02"
        },
        cap: "R",
        color: "bg-danger",
        border: "border-danger",
        unread: true
    },
    {
        id: 6,
        subject: "Sed scelerisque sapien at vehicula dignissim",
        from: "Nelson Long",
        time: {
            full: "Fri 28/11/2019 22:43",
            short: "28/11"
        },
        img: "4",
        unread: true
    },
    {
        id: 7,
        subject: "Curabitur vestibulum ipsum non nulla lacinia, at mattis magna blandit",
        from: "Francisco Howell",
        time: {
            full: "Thu 27/11/2019 01:00",
            short: "27/11"
        },
        img: "5",
        unread: false
    },
    {
        id: 8,
        subject: "Donec ornare elit iaculis elementum rhoncus",
        from: "Wanda Coleman",
        time: {
            full: "Thu 27/11/2019 12:30",
            short: "27/11"
        },
        cap: "W",
        color: "bg-success",
        border: "border-success",
        unread: true
    },
    {
        id: 9,
        subject: "Morbi id ligula rutrum",
        from: "Terry Ramirez",
        time: {
            full: "Tue 25/11/2019 02:33",
            short: "25/11"
        },
        cap: "T",
        color: "bg-warning",
        border: "border-warning",
        unread: false
    },
    {
        id: 10,
        subject: "Vestibulum quis arcu eget ipsum condimentum congue",
        from: "Patrick Simmons",
        time: {
            full: "Sat 22/11/2019 12:32",
            short: "22/11"
        },
        img: "6",
        unread: false
    },
    {
        id: 11,
        subject: "Proin auctor velit et luctus varius",
        from: "Sharon Sanders",
        time: {
            full: "Thu 20/11/2019 24:12",
            short: "20/11"
        },
        cap: "S",
        color: "bg-info",
        border: "border-info",
        unread: false
    },
    {
        id: 12,
        subject: "Elementum erat vel sem gravida tristique",
        from: "Charles Carter",
        time: {
            full: "Thu 20/11/2019 22:00",
            short: "20/11"
        },
        img: "7",
        unread: false
    },
    {
        id: 13,
        subject: "Aliquam nec nulla maximus",
        from: "Kenneth Murphy",
        time: {
            full: "Wed 19/11/2019 08:32",
            short: "19/11"
        },
        cap: "K",
        color: "bg-purple",
        border: "border-purple",
        unread: true
    },
    {
        id: 14,
        subject: "Fusce laoreet dolor tempor metus",
        from: "Janice Washington",
        time: {
            full: "Sat 15/11/2019 04:56",
            short: "15/11"
        },
        img: "8",
        unread: true
    },
    {
        id: 15,
        subject: "Morbi cursus tortor",
        from: "Douglas Barnes",
        time: {
            full: "Sat 15/11/2019 02:12",
            short: "15/11"
        },
        img: "9",
        unread: true
    },
    {
        id: 16,
        subject: "Cras at arcu in libero aliquet fringilla",
        from: "Christina Miller",
        time: {
            full: "Wed 12/11/2019 10:10",
            short: "12/11"
        },
        img: "10",
        unread: false
    },
    {
        id: 17,
        subject: "Vivamus in felis ut ipsum suscipit porttitor tincidunt",
        from: "Marilyn Richardson",
        time: {
            full: "Mon 10/11/2019 20:40",
            short: "10/11"
        },
        cap: "M",
        color: "bg-warning",
        border: "border-warning",
        unread: false
    },
    {
        id: 18,
        subject: "Fusce semper nisi et lacus bibendum",
        from: "Peter Johnson",
        time: {
            full: "Mon 10/11/2019 19:44",
            short: "10/11"
        },
        cap: "P",
        color: "bg-info",
        border: "border-info",
        unread: true
    },
    {
        id: 19,
        subject: "Nam in erat non nibh semper euismod at a turpis",
        from: "Helen Powell",
        time: {
            full: "Sun 09/11/2019 05:03",
            short: "09/11"
        },
        img: "11",
        unread: true
    },
    {
        id: 20,
        subject: "Aenean tristique metus ac commodo vestibulum",
        from: "Tammy Thompson",
        time: {
            full: "Sun 09/11/2019 02:59",
            short: "09/11"
        },
        cap: "T",
        color: "bg-purple",
        border: "border-purple",
        unread: false
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"cv0p3":[function(require,module,exports,__globalThis) {
const _temp0 = require("d3956865af1cd152");
const _temp1 = require("5cfe9d49a1667fb8");
const _temp2 = require("60d38b566b082b6");
const _temp3 = require("47fdcf2b6896563f");
const _temp4 = require("3d9d726d9299ff26");
const _temp5 = require("3f20c9c238baa5c4");
const _temp6 = require("763e8d23528104fa");
const _temp7 = require("89ff8a22292839d2");
const _temp8 = require("3afa71b0d912ccba");
const _temp9 = require("ba9efeb36213f377");
const _temp10 = require("d9831e5779dd986e");
const _temp11 = require("a32710f2a2cd0fc8");
const _temp12 = require("427c0fb01d346b3c");
const _temp13 = require("5055cd50bda7860f");
const _temp14 = require("69cfcc403bca3d3f");
const _temp15 = require("8540ee5bba09d228");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"d3956865af1cd152":"eM9AY","5cfe9d49a1667fb8":"4tWpl","60d38b566b082b6":"egP4V","47fdcf2b6896563f":"dRrEf","3d9d726d9299ff26":"cG5Jh","3f20c9c238baa5c4":"945u4","763e8d23528104fa":"go82E","89ff8a22292839d2":"4qG8A","3afa71b0d912ccba":"4jtK8","ba9efeb36213f377":"8Gxhp","d9831e5779dd986e":"5foDv","a32710f2a2cd0fc8":"hSAKF","427c0fb01d346b3c":"3Jp7F","5055cd50bda7860f":"elJBN","69cfcc403bca3d3f":"3eInA","8540ee5bba09d228":"a5Vjj"}],"68VjJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "messages", ()=>messages);
var _data = require("./data");
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
var _jpg1 = require("../../../img/gallery/thumbs/*.jpg");
var _jpgDefault1 = parcelHelpers.interopDefault(_jpg1);
var _utils = require("../../utils");
const messages = ()=>{
    // Direct messages
    (()=>{
        const DM_WRAPPER = document.getElementById("direct-messages");
        let dMlist = "";
        let dMavatar = "";
        if (DM_WRAPPER) {
            (0, _data.DIRECT_MESSAGE_DATA).map((item, index)=>{
                // Set avatar
                if (item.img) dMavatar = `<img class="w-6 h-6 rounded-circle me-3" src="${(0, _jpgDefault.default)[item.img]}" alt="" />`;
                else dMavatar = `<div class="w-6 h-6 rounded-circle me-3 fs-7 text-invert fw-bold d-flex align-items-center justify-content-center text-uppercase ${item.color}">${item.cap}</div>`;
                dMlist += `<button type="button" class="nav-link w-100" data-toggle="body">
                                ${dMavatar}
                                <div class="flex-grow-1 text-truncate overflow-hidden">${item.name}</div>
                            </button>`;
            });
            DM_WRAPPER.innerHTML = dMlist;
        }
    })();
    // Conversation
    (()=>{
        const WRAPPER = document.getElementById("conversation");
        if (WRAPPER) {
            (0, _data.CONVERSATION_DATA).map((group)=>{
                let messageGroup = document.createElement("div");
                messageGroup.id = `day-${group.id}`;
                WRAPPER.appendChild(messageGroup);
                // Set title date
                let date = `<div class="mt-7 mb-5 text-center ps-14">
								<i class="border-bottom d-block h-px mb-n4"></i>
                                <div class="h-8 px-4 bg-body text-body-emphasis rounded-pill d-inline-flex align-items-center fs-7 position-relative">${group.day}</div>
                            </div>`;
                messageGroup.innerHTML = date;
                // Set messages
                group.chat.map((message)=>{
                    // Avatar
                    let avatar = "";
                    if (message.op.img) avatar = (0, _utils.avatarImg)((0, _jpgDefault.default)[message.op.img]);
                    else avatar = (0, _utils.avatarCap)(message.op.cap, message.op.color, message.op.borderColor);
                    // List
                    let list = "";
                    message.text.map((item)=>{
                        list += `<div id="message-${item.id}" class="message-item position-relative py-0.5 px-1.5 rounded bg-hover">
                                    ${item.text}
                                </div>`;
                    });
                    let messageItemGroup = document.createElement("div");
                    messageItemGroup.id = `message-${message.id}`;
                    messageItemGroup.classList.add("d-flex", "align-items-start", "mb-3");
                    messageGroup.appendChild(messageItemGroup);
                    messageItemGroup.innerHTML = `${avatar}
                                    <div class="flex-grow-1">
                                        <div class="text-body-emphasis ms-1.5">${message.op.name}</div>
                                        ${list}
                                    </div>`;
                });
            });
            // Message actions
            // Action dropdown
            let actions = document.createElement("div");
            actions.classList.add("message-actions");
            const MESSAGE_ACTION_WRAPPER = document.querySelectorAll(".message-item");
            const MESSAGE_ACTIONS = `<div class="card flex-row position-absolute end-0 top-0 mt-n9 me-2 text-body-emphasis flex z-3 p-1">
										<a href="" class="icon ph ph-smiley"></a>
										<a href="" class="icon ph ph-arrow-bend-up-right"></a>
										<a href="" class="icon ph ph-push-pin-simple"></a>
										<div class="dropdown">
											<button class="icon ph ph-dots-three-circle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
												<span class="visually-hidden">More</span>
											</button>
											<div class="dropdown-menu dropdown-menu-end">
												<a class="dropdown-item" href="#"> <i class="ph ph-copy"></i>Copy Message</a>
												<a class="dropdown-item" href="#"> <i class="ph ph-hand-pointing"></i>Follow Message</a>
												<a class="dropdown-item" href="#"> <i class="ph ph-trash"></i>Delete</a>
												<a class="dropdown-item" href="#"> <i class="ph ph-share-fat"></i>Share</a>
											</div>
										</div>
									</div>`;
            // Toggle the action dropdown on hover
            MESSAGE_ACTION_WRAPPER.forEach((item)=>{
                item.addEventListener("mouseenter", (e)=>{
                    actions.innerHTML = MESSAGE_ACTIONS;
                    item.appendChild(actions);
                });
                item.addEventListener("mouseleave", (e)=>{
                    actions.remove();
                });
            });
        }
    })();
    // Channel members
    (()=>{
        const MEMBERS_WRAPPER = document.getElementById("channel-members");
        let membersList = "";
        if (MEMBERS_WRAPPER) {
            (0, _data.CHANNEL_MEMBERS).map((item)=>{
                let online;
                item.online === true ? online = "border-200" : online = "border-success";
                membersList += `<a href="#" class="d-flex align-items-center py-2 px-3 rounded bg-hover">
									<img src="${(0, _jpgDefault.default)[item.id]}" class="rounded-circle w-7 h-7 me-3 flex-shrink-0" />
									<div class="flex-grow-1 d-flex align-items-center leading-none">
										<div class="text-body-emphasis">${item.display}</div>
										<i class="w-3 h-3 mx-2 rounded-circle border border-2 ${online}"></i>
										<div class="text-body-secondary fs-7 d-none d-sm-block">${item.name}</div>
									</div>
								</a>`;
            });
            MEMBERS_WRAPPER.innerHTML = membersList;
        }
    })();
    // Channel files
    (()=>{
        const FILES_WRAPPER = document.getElementById("channel-files");
        let filesList = "";
        if (FILES_WRAPPER) {
            (0, _data.CHANNEL_FILES).map((item)=>{
                let icon;
                if (item.img) icon = `<img src="${(0, _jpgDefault1.default)[item.img]}" class="w-8 h-8 me-3 rounded-circle" />`;
                else icon = `<i class="ph rounded-circle w-8 h-8 me-3 fs-5 flex-shrink-0 d-grid place-content-center bg-active text-body ${item.icon}"></i>`;
                filesList += `<a href="#" class="d-flex align-items-center py-3 px-3 bg-hover rounded">
									${icon}
									<div class="flex-grow-1 lh-1">
										<div class="text-body-emphasis mb-2">${item.name}</div>
										<div class="text-body-secondary fs-7">by ${item.owner} on ${item.date}</div>
									</div>
								</a>`;
            });
            FILES_WRAPPER.innerHTML = filesList;
        }
    })();
};

},{"./data":"5aUW1","../../../img/contacts/*.jpg":"7Mvk1","../../../img/gallery/thumbs/*.jpg":"93UXP","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5aUW1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DIRECT_MESSAGE_DATA", ()=>DIRECT_MESSAGE_DATA);
parcelHelpers.export(exports, "CONVERSATION_DATA", ()=>CONVERSATION_DATA);
parcelHelpers.export(exports, "CHANNEL_MEMBERS", ()=>CHANNEL_MEMBERS);
parcelHelpers.export(exports, "CHANNEL_FILES", ()=>CHANNEL_FILES);
const DIRECT_MESSAGE_DATA = [
    {
        id: 6,
        name: "Candace Munoz",
        img: "1",
        time: "2 minutes",
        lastMessage: "Nunc posuere nunc nec felis malesuada vestibulum",
        online: true,
        unread: true
    },
    {
        id: 7,
        name: "Antonia Griffith",
        cap: "A",
        color: "bg-primary",
        time: "5 minutes",
        lastMessage: "Aliquam volutpat anteac suscipit sodales",
        online: true,
        unread: true
    },
    {
        id: 8,
        name: "Gloria Singleton",
        img: "2",
        time: "10 minutes",
        lastMessage: "Maecenas efficitur ligulaid lectus scelerisque pretium",
        online: true,
        unread: true
    },
    {
        id: 9,
        name: "Whitney Stewart",
        img: "3",
        time: "55 minutes",
        lastMessage: "Mauris quis leo id dui accumsan tempus",
        online: true
    },
    {
        id: 10,
        name: "Maria Zimmerman",
        img: "4",
        time: "2 hours",
        lastMessage: "Proin efficitur euismod magna a facilisis",
        online: true
    },
    {
        id: 11,
        name: "Samantha French",
        cap: "S",
        color: "bg-info",
        time: "5 hours",
        lastMessage: "Vivamus mollis euismod nunc",
        online: false
    },
    {
        id: 12,
        name: "Wendy Mclaughlin",
        cap: "B",
        color: "bg-purple",
        time: "10 hours",
        lastMessage: "Cras lacus arcu tincidunt quis commodo vel",
        online: false,
        unread: true
    },
    {
        id: 13,
        name: "Kristin Turner",
        img: "9",
        time: "12 hours",
        lastMessage: "Curabitur tincidunt",
        online: false
    },
    {
        id: 14,
        name: "Dewey Marsh",
        cap: "D",
        color: "bg-danger",
        time: "15 hours",
        lastMessage: "Vestibulum lobortis risusid erat egestas",
        online: false,
        unread: true
    },
    {
        id: 15,
        name: "Hector Lawson",
        img: "6",
        time: "20 hours",
        lastMessage: "Aliquam",
        online: false
    },
    {
        id: 16,
        name: "Sherman Perkins",
        cap: "S",
        color: "bg-warning",
        time: "Yesterday",
        lastMessage: "Proin in posuere arcu",
        online: false
    },
    {
        id: 17,
        name: "Christopher Lawrence",
        img: "7",
        time: "2 days",
        lastMessage: "Curabitur tincidunt",
        online: false
    },
    {
        id: 18,
        name: "Malcolm Cannon",
        img: "8",
        time: "2 days",
        lastMessage: "Duis cursus lacus eros",
        online: false
    },
    {
        id: 19,
        name: "Lance Bishop",
        img: "11",
        time: "3 days",
        lastMessage: "Praesent imperdiet rhoncus fringilla",
        online: false
    },
    {
        id: 20,
        name: "Harold Wilkerson",
        img: "12",
        time: "4 days",
        lastMessage: "Phasellus magna turpis",
        online: false
    },
    {
        id: 21,
        name: "Rudy Hamilton",
        img: "15",
        time: "4 days",
        lastMessage: "Maecenas nisl leo",
        online: false
    },
    {
        id: 22,
        name: "Mabel Copeland",
        img: "14",
        time: "5 days",
        lastMessage: "Praesent sit amet velit",
        online: false
    },
    {
        id: 23,
        name: "Sarah Hammond",
        cap: "S",
        color: "bg-success",
        time: "a week",
        lastMessage: "Etiam vel ullamcorper tellus",
        online: false
    },
    {
        id: 24,
        name: "Gladys Matthews",
        img: "13",
        time: "2 months",
        lastMessage: "Fusce eget nunc et sapien posuere ornare",
        online: false
    }
];
const CONVERSATION_DATA = [
    {
        id: 1,
        day: "November 18, 2024",
        chat: [
            {
                id: 1.1,
                time: "8:32 PM",
                op: {
                    name: "Constance Mendoza",
                    img: "1"
                },
                text: [
                    {
                        id: 1.11,
                        text: "Hard together found of emerged"
                    },
                    {
                        id: 1.12,
                        text: "Delicacy of must but the is acknowledge in failures on ahead with phase project the several arrives government absolutely know out place and repeat his crap copy. Projects feedback dull was go I king's war, not lie spirits my they and gradually road."
                    },
                    {
                        id: 1.13,
                        text: "Nunc luctus ultrices lacus"
                    }
                ]
            },
            {
                id: 1.2,
                time: "8:50 PM",
                op: {
                    name: "Deborah Harrison",
                    img: "2"
                },
                text: [
                    {
                        id: 1.21,
                        text: "Pharetra sit amet aliquam id diam maecenas ultricies. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet"
                    },
                    {
                        id: 1.22,
                        text: "Ut lectus nunc, suscipit quis nulla ac, tempus convallis ipsum. Morbi lobortis elit sit amet rutrum finibus. Morbi id blandit turpis. Fusce sed ex vel odio tristique rhoncus tempus ac nisi. Fusce vitae orci ac felis lobortis tempor. Vivamus orci turpis, laoreet vel suscipit quis, pulvinar non nunc. Donec semper laoreet dictum."
                    }
                ]
            },
            {
                id: 1.3,
                time: "9:00 PM",
                op: {
                    name: "Marsha Maxwell",
                    cap: "M",
                    color: "bg-primary",
                    borderColor: "border-primary"
                },
                text: [
                    {
                        id: 1.31,
                        text: "Faucibus ornare suspendisse sed nisi lacus sed viverra tellus in. Mi quis hendrerit dolor magna eget est lorem ipsum dolor. Amet nulla facilisi morbi tempus. Posuere morbi leo urna molestie at elementum eu facilisis sed"
                    },
                    {
                        id: 1.32,
                        text: "Nam ac molestie leo"
                    }
                ]
            },
            {
                id: 1.4,
                time: "9:18 PM",
                op: {
                    name: "Constance Mendoza",
                    img: "1"
                },
                text: [
                    {
                        id: 1.41,
                        text: "Gravida quis blandit turpis cursus. Tincidunt dui ut ornare lectus sit. Cras ornare arcu dui vivamus arcu felis bibendum ut tristique. Viverra orci sagittis eu volutpat odio facilisis mauris sit. Ut faucibus pulvinar elementum integer"
                    }
                ]
            },
            {
                id: 1.5,
                time: "9:34 PM",
                op: {
                    name: "Marlene Elliott",
                    img: "3"
                },
                text: [
                    {
                        id: 1.51,
                        text: "Viverra maecenas accumsan lacus vel facilisis"
                    }
                ]
            },
            {
                id: 1.6,
                time: "10:02 PM",
                op: {
                    name: "Rochelle Castillo",
                    cap: "R",
                    color: "bg-danger",
                    borderColor: "border-danger"
                },
                text: [
                    {
                        id: "1.61",
                        text: "Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Mauris in aliquam sem fringilla"
                    }
                ]
            },
            {
                id: 1.7,
                time: "11:43 PM",
                op: {
                    name: "Marsha Maxwell",
                    cap: "M",
                    color: "bg-primary",
                    borderColor: "border-primary"
                },
                text: [
                    {
                        id: 1.71,
                        text: "Tortor vitae purus"
                    }
                ]
            }
        ]
    },
    {
        id: 2,
        day: "November 19, 2024",
        chat: [
            {
                id: 2.1,
                time: "9:12 AM",
                op: {
                    name: "Salvador Burton",
                    img: "15"
                },
                text: [
                    {
                        id: 2.11,
                        text: "Gravida quis blandit turpis cursus"
                    }
                ]
            },
            {
                id: 2.2,
                time: "10:00 AM",
                op: {
                    name: "Oliver Ramirez",
                    cap: "O",
                    color: "bg-warning",
                    borderColor: "border-warning"
                },
                text: [
                    {
                        id: 2.21,
                        text: "Tortor vitae purus faucibus ornare suspendisse sed nisi lacus. Tellus mauris a diam maecenas sed enim ut sem viverra. Consequat mauris nunc congue nisi vitae"
                    },
                    {
                        id: 2.22,
                        text: "Nam ac molestie leo"
                    },
                    {
                        id: 2.23,
                        text: "Yeah"
                    }
                ]
            },
            {
                id: 2.3,
                time: "11:24 AM",
                op: {
                    name: "Salvador Burton",
                    img: "15"
                },
                text: [
                    {
                        id: 2.31,
                        text: "Ipsum faucibus vitae aliquet nec ullamcorper sit"
                    }
                ]
            }
        ]
    }
];
const CHANNEL_MEMBERS = [
    {
        id: 6,
        name: "Candace Munoz",
        img: "1",
        display: "candace",
        online: true
    },
    {
        id: 7,
        name: "Antonia Griffith",
        cap: "A",
        color: "bg-primary",
        display: "antonia-ls",
        online: true
    },
    {
        id: 8,
        name: "Gloria Singleton",
        img: "2",
        display: "singleton2021",
        online: true
    },
    {
        id: 9,
        name: "Whitney Stewart",
        img: "3",
        display: "stewart",
        online: true
    },
    {
        id: 10,
        name: "Maria Zimmerman",
        img: "4",
        display: "zimmerman",
        online: true
    },
    {
        id: 11,
        name: "Samantha French",
        cap: "S",
        color: "bg-info",
        display: "samanthafrench",
        online: false
    },
    {
        id: 12,
        name: "Wendy Mclaughlin",
        cap: "B",
        color: "bg-purple",
        display: "wendy",
        online: false
    },
    {
        id: 13,
        name: "Kristin Turner",
        img: "9",
        display: "wenurner",
        online: false
    },
    {
        id: 14,
        name: "Dewey Marsh",
        cap: "D",
        color: "bg-danger",
        display: "marsh",
        online: false
    },
    {
        id: 15,
        name: "Hector Lawson",
        img: "6",
        display: "lawson-h",
        online: false
    },
    {
        id: 16,
        name: "Sherman Perkins",
        cap: "S",
        color: "bg-warning",
        display: "sherman",
        online: false
    }
];
const CHANNEL_FILES = [
    {
        icon: "ph-brackets-curly",
        name: "package.json",
        size: "229 bytes",
        owner: "Isabelle Reid",
        date: "01/06"
    },
    {
        icon: "ph-microsoft-word-logo",
        name: "cover_letter.doc",
        size: "32 kb",
        owner: "Derrick Porter",
        date: "05/06"
    },
    {
        icon: "ph-headphones",
        name: "recording_09-10.mp3",
        size: "2.32 mb",
        owner: "Catherine Chandler",
        date: "02/07"
    },
    {
        img: "2",
        name: "wallpaper-widescreen.jpg",
        size: "900 kb",
        owner: "Elva Erickson",
        date: "28/10"
    },
    {
        img: "1",
        name: "screenshot-98731.jpg",
        size: "653 kb",
        owner: "Kathryn Williamson",
        date: "26/08"
    },
    {
        icon: "ph-play",
        name: "animation-trailer.mp4",
        size: "43.86 mb",
        owner: "Lottie Conner",
        date: "08/10"
    },
    {
        icon: "ph-file-pdf",
        name: "instructions.pdf",
        size: "205.5 kb",
        owner: "Frederick Alvarez",
        date: "23/05"
    },
    {
        icon: "ph-microsoft-excel-logo",
        name: "signup-list.xls",
        size: "987.23 kb",
        owner: "Jerry McKenzie",
        date: "02/05"
    },
    {
        img: "13",
        name: "sample-preview.jpg",
        size: "2.34 mb",
        owner: "Betty Berry",
        date: "14/11"
    },
    {
        icon: "ph-text-a-underline",
        name: "detailed-notes.txt",
        size: "54.5 kb",
        owner: "Della Reyes",
        date: "31/07"
    },
    {
        icon: "ph-microsoft-powerpoint-logo",
        name: "presentation.ppt",
        size: "10.12 mb",
        owner: "Callie Kelley",
        date: "09/10"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7Mvk1":[function(require,module,exports,__globalThis) {
const _temp0 = require("648457c3976144ff");
const _temp1 = require("dd2c3095540941d6");
const _temp2 = require("dc9c6aac56804f19");
const _temp3 = require("6b4c6ee24dcc3e58");
const _temp4 = require("a460c52b06fe2dd9");
const _temp5 = require("850ec718fa763cdf");
const _temp6 = require("9d8b1584f062c50e");
const _temp7 = require("6f3ac3bb17a8b330");
const _temp8 = require("b70e96ec63d89300");
const _temp9 = require("5a05cc9a36e3ef5d");
const _temp10 = require("140af8b06041d8be");
const _temp11 = require("6230d1e34bd130e9");
const _temp12 = require("2d0bf5c3b76da94f");
const _temp13 = require("fa814363cc4acbf");
const _temp14 = require("c2bd2c2c7445fe9f");
const _temp15 = require("4add68bec7a6d116");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"648457c3976144ff":"eM9AY","dd2c3095540941d6":"4tWpl","dc9c6aac56804f19":"egP4V","6b4c6ee24dcc3e58":"dRrEf","a460c52b06fe2dd9":"cG5Jh","850ec718fa763cdf":"945u4","9d8b1584f062c50e":"go82E","6f3ac3bb17a8b330":"4qG8A","b70e96ec63d89300":"4jtK8","5a05cc9a36e3ef5d":"8Gxhp","140af8b06041d8be":"5foDv","6230d1e34bd130e9":"hSAKF","2d0bf5c3b76da94f":"3Jp7F","fa814363cc4acbf":"elJBN","c2bd2c2c7445fe9f":"3eInA","4add68bec7a6d116":"a5Vjj"}],"93UXP":[function(require,module,exports,__globalThis) {
const _temp0 = require("9a4da858bb20a17e");
const _temp1 = require("6370ca639e013bc1");
const _temp2 = require("2fa77f351da5a6e1");
const _temp3 = require("13ef42464e9ccfa6");
const _temp4 = require("ad357c93f2306da2");
const _temp5 = require("2aa264a096b70e46");
const _temp6 = require("8beeea58b90a6795");
const _temp7 = require("6ee86fe363a4ef65");
const _temp8 = require("7a7df248bd5f550f");
const _temp9 = require("81fef700e1f50363");
const _temp10 = require("5d0bdc9dfbb5c118");
const _temp11 = require("82045368f1368d07");
const _temp12 = require("e1326b43d879916e");
const _temp13 = require("b554cb90f0cbbc48");
const _temp14 = require("a22a5a672f3cbbcc");
const _temp15 = require("69085b4fce79b8ce");
const _temp16 = require("ff8899b08d98fe2d");
const _temp17 = require("75f8f0311571f4d");
const _temp18 = require("b1f6c1d95705a644");
const _temp19 = require("881f7025eaa5b4e9");
const _temp20 = require("a947d1f0469aa9aa");
const _temp21 = require("60ed6e132df4f0d6");
const _temp22 = require("be3d8e0c5167ddf3");
const _temp23 = require("b5f059e330b068d6");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15,
    "17": _temp16,
    "18": _temp17,
    "19": _temp18,
    "20": _temp19,
    "21": _temp20,
    "22": _temp21,
    "23": _temp22,
    "24": _temp23
};

},{"9a4da858bb20a17e":"d6AZk","6370ca639e013bc1":"caWDA","2fa77f351da5a6e1":"koIoX","13ef42464e9ccfa6":"kS7Wm","ad357c93f2306da2":"j48xB","2aa264a096b70e46":"h9jmV","8beeea58b90a6795":"7v5jN","6ee86fe363a4ef65":"wBldV","7a7df248bd5f550f":"cN31g","81fef700e1f50363":"2Bw7h","5d0bdc9dfbb5c118":"2xGgh","82045368f1368d07":"4Fpxc","e1326b43d879916e":"arHdx","b554cb90f0cbbc48":"4gVlj","a22a5a672f3cbbcc":"dQWpg","69085b4fce79b8ce":"caIGc","ff8899b08d98fe2d":"kBYUL","75f8f0311571f4d":"Nxq5O","b1f6c1d95705a644":"e2YhH","881f7025eaa5b4e9":"c0Ltn","a947d1f0469aa9aa":"kQnOC","60ed6e132df4f0d6":"7EbMh","be3d8e0c5167ddf3":"l2DNt","b5f059e330b068d6":"1FMbB"}],"jLDbe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "photos", ()=>photos);
var _data = require("./data");
var _jpg = require("../../../img/gallery/thumbs/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const photos = ()=>{
    const WRAPPER = document.getElementById("photos");
    const HEADER = document.getElementById("photos-header");
    const ACTION = document.getElementById("photos-actions");
    const AMOUNT = document.getElementById("photos-amount");
    const CLEAR = document.getElementById("photos-clear");
    let selectedPhotos = [];
    // Select function to select individual and group photos
    const SELECT = (elem, arr)=>{
        if (elem.checked) {
            selectedPhotos = selectedPhotos.filter((x)=>!arr.includes(x));
            selectedPhotos.push(...arr);
        } else selectedPhotos = selectedPhotos.filter((x)=>!arr.includes(x));
        RENDER_PHOTOS();
    };
    // Clear selected photos on back icon click
    CLEAR && CLEAR.addEventListener("click", ()=>{
        selectedPhotos = [];
        RENDER_PHOTOS();
    });
    // Main render function
    const RENDER_PHOTOS = ()=>{
        WRAPPER.innerHTML = "";
        // Toggle photos action header
        if (selectedPhotos.length > 0) {
            HEADER.classList.add("d-none");
            ACTION.classList.remove("d-none");
            ACTION.classList.add("content-header-active");
            // Update amount of selected photos
            AMOUNT.innerHTML = selectedPhotos.length;
        } else {
            HEADER.classList.remove("d-none");
            ACTION.classList.add("d-none");
            ACTION.classList.remove("content-header-active");
        }
        // Loop through the data
        (0, _data.DATA).map((group)=>{
            // Conditional class to toggle the visibility of the photo select checkbox
            const CHECKBOX_TOGGLE_CLASS = selectedPhotos.length > 0 ? "d-block" : "d-none";
            // Create wrapper element for the photo group
            let photoGroup = document.createElement("div");
            photoGroup.classList.add("mt-4");
            // Photo group header
            let photoGroupHeader = document.createElement("div");
            let photoGroupHeaderContent = `<div class="d-flex align-items-center">
                                                <div>${group.time}</div>
                                                <div class="fs-7 text-body-secondary ms-2 d-none d-sm-block">
                                                    ${group.location}
                                                    -
                                                    ${(0, _data.DATA).find((x)=>x.id === group.id).items.length} Photos
                                                </div>
                                            </div>`;
            photoGroupHeader.classList.add("mb-3", "px-4", "d-flex", "align-items-center");
            photoGroupHeader.innerHTML = photoGroupHeaderContent;
            // To select all the photos in the group, we need to send
            // a list of IDs as an array to the select function
            let groupPhotos = [];
            let groupPhotosArr = (0, _data.DATA).find((x)=>x.id === group.id).items;
            groupPhotosArr.map((x)=>groupPhotos.push(x.id));
            // Create and append the checkbox to select all photos
            let selectAll = document.createElement("input");
            selectAll.type = "checkbox";
            selectAll.classList.add("form-check-input", "mt-0", "me-3", "ms-n2", CHECKBOX_TOGGLE_CLASS);
            selectAll.checked = groupPhotos.every((v)=>selectedPhotos.includes(v));
            selectAll.onclick = ()=>SELECT(selectAll, groupPhotos);
            photoGroupHeader.prepend(selectAll);
            photoGroup.appendChild(photoGroupHeader);
            // Create and append the wrapper for the individiual photo items
            // Append this inside the photo group created above.
            let photoGallery = document.createElement("div");
            photoGallery.classList.add("grid", "gap-2");
            photoGroup.appendChild(photoGallery);
            // Loop through the photo items and create/append the individual photo items and checkboxes
            group.items.map((photo)=>{
                // Create and append the checkbox to select indivisual photo items
                let selectItem = document.createElement("input");
                selectItem.type = "checkbox";
                selectItem.checked = selectedPhotos.includes(photo.id);
                selectItem.classList.add(CHECKBOX_TOGGLE_CLASS, "photos-check", "form-check-input", "position-absolute", "top-0", "start-0", "m-2");
                selectItem.onclick = ()=>SELECT(selectItem, [
                        photo.id
                    ]);
                // Create photo item
                let photoItem = document.createElement("div");
                let activeClass = selectedPhotos.length > 0 ? "photos-highlight" : "";
                photoItem.setAttribute("class", `${activeClass} g-col-4 g-col-sm-3 g-col-md-2 position-relative photos-item`);
                photoItem.innerHTML = `<img class="rounded w-100" src="${(0, _jpgDefault.default)[photo.photo]}" alt="" />`;
                photoItem.appendChild(selectItem);
                // Append the photo item to the photo gallery
                photoGallery.appendChild(photoItem);
            });
            // Append the photo group to the main photos wrapper
            WRAPPER.appendChild(photoGroup);
        });
    };
    // Render photos
    WRAPPER && RENDER_PHOTOS();
};

},{"./data":"cLvOS","../../../img/gallery/thumbs/*.jpg":"1yjdv","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"cLvOS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
const DATA = [
    {
        id: 1,
        time: "Wednesday, Dec 10",
        location: "New York",
        items: [
            {
                id: 1.1,
                photo: "1"
            },
            {
                id: 1.2,
                photo: "2"
            },
            {
                id: 1.3,
                photo: "3"
            },
            {
                id: 1.4,
                photo: "4"
            },
            {
                id: 1.5,
                photo: "5"
            },
            {
                id: 1.6,
                photo: "6"
            },
            {
                id: 1.7,
                photo: "7"
            },
            {
                id: 1.8,
                photo: "8"
            },
            {
                id: 1.9,
                photo: "9"
            },
            {
                id: 1.11,
                photo: "10"
            }
        ]
    },
    {
        id: 2,
        time: "Friday, Dec 5",
        location: "London",
        items: [
            {
                id: 2.1,
                photo: "11"
            },
            {
                id: 2.2,
                photo: "12"
            },
            {
                id: 2.3,
                photo: "13"
            },
            {
                id: 2.4,
                photo: "14"
            },
            {
                id: 2.5,
                photo: "15"
            }
        ]
    },
    {
        id: 3,
        time: "Monday, Nov 30",
        location: "Dubai",
        items: [
            {
                id: 3.1,
                photo: "16"
            },
            {
                id: 3.2,
                photo: "17"
            },
            {
                id: 3.3,
                photo: "18"
            },
            {
                id: 3.4,
                photo: "19"
            },
            {
                id: 3.5,
                photo: "20"
            },
            {
                id: 3.6,
                photo: "21"
            },
            {
                id: 3.7,
                photo: "22"
            },
            {
                id: 3.8,
                photo: "23"
            },
            {
                id: 3.9,
                photo: "24"
            },
            {
                id: 3.11,
                photo: "1"
            },
            {
                id: 3.12,
                photo: "2"
            },
            {
                id: 3.13,
                photo: "3"
            },
            {
                id: 3.14,
                photo: "4"
            },
            {
                id: 3.15,
                photo: "5"
            },
            {
                id: 3.16,
                photo: "6"
            },
            {
                id: 3.17,
                photo: "7"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1yjdv":[function(require,module,exports,__globalThis) {
const _temp0 = require("37b4e35bfe874efb");
const _temp1 = require("28ee3f8cd104c2fb");
const _temp2 = require("ec5f7df04b92de1b");
const _temp3 = require("867d9679b31ace69");
const _temp4 = require("69fce4d6391450eb");
const _temp5 = require("1e3e6f9375c79f3c");
const _temp6 = require("e435de8bc7cc6f67");
const _temp7 = require("9a8198a5993c663c");
const _temp8 = require("dda047517252b465");
const _temp9 = require("d5ac03bf66742e97");
const _temp10 = require("3e5607180de63c2a");
const _temp11 = require("fa5387079a98fe72");
const _temp12 = require("4a45a9bd0d01f349");
const _temp13 = require("8dd62cab0b9503cd");
const _temp14 = require("688588a322f82894");
const _temp15 = require("88c8db057d10d25c");
const _temp16 = require("ed0a20ea9c61a014");
const _temp17 = require("322f8d26a1fe1494");
const _temp18 = require("8ed41412733ad1db");
const _temp19 = require("6aec585025afe04e");
const _temp20 = require("3e25971ea052cd45");
const _temp21 = require("cbe851fbc2fab365");
const _temp22 = require("31c5a66e574a6dde");
const _temp23 = require("b89acf7a94f92659");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15,
    "17": _temp16,
    "18": _temp17,
    "19": _temp18,
    "20": _temp19,
    "21": _temp20,
    "22": _temp21,
    "23": _temp22,
    "24": _temp23
};

},{"37b4e35bfe874efb":"d6AZk","28ee3f8cd104c2fb":"caWDA","ec5f7df04b92de1b":"koIoX","867d9679b31ace69":"kS7Wm","69fce4d6391450eb":"j48xB","1e3e6f9375c79f3c":"h9jmV","e435de8bc7cc6f67":"7v5jN","9a8198a5993c663c":"wBldV","dda047517252b465":"cN31g","d5ac03bf66742e97":"2Bw7h","3e5607180de63c2a":"2xGgh","fa5387079a98fe72":"4Fpxc","4a45a9bd0d01f349":"arHdx","8dd62cab0b9503cd":"4gVlj","688588a322f82894":"dQWpg","88c8db057d10d25c":"caIGc","ed0a20ea9c61a014":"kBYUL","322f8d26a1fe1494":"Nxq5O","8ed41412733ad1db":"e2YhH","6aec585025afe04e":"c0Ltn","3e25971ea052cd45":"kQnOC","cbe851fbc2fab365":"7EbMh","31c5a66e574a6dde":"l2DNt","b89acf7a94f92659":"1FMbB"}],"hg7fV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "todoList", ()=>todoList);
var _data = require("./data");
var _data1 = require("../file-manager/data");
var _jpg = require("../../../img/gallery/thumbs/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const todoList = ()=>{
    const WRAPPER = document.getElementById("todo-lists");
    if (WRAPPER) {
        // Main list
        (()=>{
            WRAPPER.innerHTML = "";
            (0, _data.TODO_DATA).map((item, index)=>{
                let attachement = `<div class="text-body-secondary fs-7 ms-4 align-items-center d-none d-lg-flex">
                                        <i class="ph ph-paperclip fs-6 me-1"></i>
                                        <span class="text-body-secondary">
                                            ${item.files.length}
                                            ${item.files.length > 1 ? " Attachements" : " Attachement"}
                                        </span>
                                    </div>`;
                let dueDate = `<div class="text-body-secondary fs-7 align-items-center d-none d-sm-flex">
                                    <i class="ph ph-calendar-blank fs-6 me-1"></i>
                                    ${item.due.date}
                                </div>`;
                let listItem = document.createElement("div");
                listItem.className = "card card-hover flex-row align-items-center mt-1.5";
                let checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.classList.add("form-check-input", "todo-checkbox", "mt-0", "me-3");
                checkbox.checked = item.completed;
                let listTag = document.createElement("i");
                listTag.classList.add("w-1", "rounded", "h-5", "mx-3", "flex-shrink-0", `bg-${item.color}`);
                listTag.setAttribute("style", "--bs-bg-opacity: 0.75");
                listItem.innerHTML = `<a href="" class="flex-grow-1 text-truncate d-flex align-items-center py-3.5 pe-4 text-body" data-bs-toggle="modal" data-bs-target="#todo-list-details">
                                            <div class="text-truncate flex-grow-1 lh-base">${item.title}</div>
                                            ${item.due.date ? dueDate : ""}
                                            ${item.files.length > 0 ? attachement : ""}
                                        </a>`;
                listItem.prepend(checkbox);
                listItem.prepend(listTag);
                WRAPPER.appendChild(listItem);
            });
        })();
        // Sub tasks
        (()=>{
            const SUB_TASK_WRAPPER = document.getElementById("todo-sub-tasks");
            let list = "";
            let last = (0, _data.DETAILS).length - 1;
            if (SUB_TASK_WRAPPER) {
                (0, _data.DETAILS).map((item, index)=>{
                    list += `<div class="form-check">
                                <input type="checkbox" class="form-check-input todo-checkbox">
                                <div class="pb-3 ${last !== index ? "border-bottom mb-3" : ""}">${item.task}</div>
                            </div>`;
                });
                SUB_TASK_WRAPPER.innerHTML = list;
            }
        })();
        // Files
        (()=>{
            const ATTACHEMENT_WRAPPER = document.getElementById("todo-attachements");
            let list = "";
            let icon = "";
            if (ATTACHEMENT_WRAPPER) {
                (0, _data1.FILES_DATA).slice(0, 5).map((item, index)=>{
                    if (item.type === "image") icon = `<img class="w-8 h-8 rounded-circle me-3 flex-shrink-0" src="${(0, _jpgDefault.default)[item.img]}" alt="">`;
                    else icon = `<i class="ph rounded-circle w-8 h-8 me-3 fs-5 flex-shrink-0 d-grid place-content-center bg-active text-body ${item.icon}"></i>`;
                    list += `<a href="#" class="d-flex align-items-center rounded py-3 px-3 bg-hover">
                            ${icon}
                            <div class="flex-grow-1 lh-1">
                                <div class="text-body-emphasis mb-2">${item.name}</div>
                                <div class="text-body-secondary fs-7">
                                    Added on ${item.date}
                                    <div class="float-end d-none d-sm-inline">${item.size}</div>
                                </div>
                            </div>
                        </a>`;
                });
                ATTACHEMENT_WRAPPER.innerHTML = list;
            }
        })();
    }
};

},{"./data":"fLm8T","../file-manager/data":"ifuaS","../../../img/gallery/thumbs/*.jpg":"3felG","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3felG":[function(require,module,exports,__globalThis) {
const _temp0 = require("54021ef5a9d265ea");
const _temp1 = require("42f65dabc5189449");
const _temp2 = require("dda4e36d9cf0df04");
const _temp3 = require("343bbfe57bde6f28");
const _temp4 = require("c6506c537416a5b1");
const _temp5 = require("b892e8254753d169");
const _temp6 = require("1c150dc927b40f5d");
const _temp7 = require("e1b1d949f65eca14");
const _temp8 = require("203bf3bdc8871aa4");
const _temp9 = require("cd701c60fcaadb1b");
const _temp10 = require("25944a626264d9ce");
const _temp11 = require("b718050fd45afefb");
const _temp12 = require("807cd530ee7bd37");
const _temp13 = require("a4ac814104e9f99");
const _temp14 = require("e6686ecda01589d8");
const _temp15 = require("58d24036df3ea3e1");
const _temp16 = require("dd58ab034c8d3535");
const _temp17 = require("f3d8edf2880c7096");
const _temp18 = require("76f8748fc1d7d93a");
const _temp19 = require("86d2e32f2737fe94");
const _temp20 = require("89d6c72f1bad9899");
const _temp21 = require("349cceb1a1a67564");
const _temp22 = require("b1dff8e958beedd4");
const _temp23 = require("54dcd5939dda77b0");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15,
    "17": _temp16,
    "18": _temp17,
    "19": _temp18,
    "20": _temp19,
    "21": _temp20,
    "22": _temp21,
    "23": _temp22,
    "24": _temp23
};

},{"54021ef5a9d265ea":"d6AZk","42f65dabc5189449":"caWDA","dda4e36d9cf0df04":"koIoX","343bbfe57bde6f28":"kS7Wm","c6506c537416a5b1":"j48xB","b892e8254753d169":"h9jmV","1c150dc927b40f5d":"7v5jN","e1b1d949f65eca14":"wBldV","203bf3bdc8871aa4":"cN31g","cd701c60fcaadb1b":"2Bw7h","25944a626264d9ce":"2xGgh","b718050fd45afefb":"4Fpxc","807cd530ee7bd37":"arHdx","a4ac814104e9f99":"4gVlj","e6686ecda01589d8":"dQWpg","58d24036df3ea3e1":"caIGc","dd58ab034c8d3535":"kBYUL","f3d8edf2880c7096":"Nxq5O","76f8748fc1d7d93a":"e2YhH","86d2e32f2737fe94":"c0Ltn","89d6c72f1bad9899":"kQnOC","349cceb1a1a67564":"7EbMh","b1dff8e958beedd4":"l2DNt","54dcd5939dda77b0":"1FMbB"}],"ftFZW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calendarPage", ()=>calendarPage);
var _core = require("@fullcalendar/core");
var _daygrid = require("@fullcalendar/daygrid");
var _daygridDefault = parcelHelpers.interopDefault(_daygrid);
var _timegrid = require("@fullcalendar/timegrid");
var _timegridDefault = parcelHelpers.interopDefault(_timegrid);
var _data = require("./data");
var _vanillajsDatepicker = require("vanillajs-datepicker");
const calendarPage = ()=>{
    const CALENDAR_EL = document.getElementById("calendar");
    // Check if the calendar view is changed via any fullcalendar calls.
    // This is required in order to maintain the day of the datepicker when
    // the calendar view is changed via the datepicker.
    let isViewChanged = false;
    // Get the current calendar view date
    let currentViewDate = {
        month: "",
        year: ""
    };
    if (CALENDAR_EL) {
        //-----------------------------------
        // Main Calendar
        //-----------------------------------
        // Initiate main calendar
        const CALENDAR_VIEW = new (0, _core.Calendar)(CALENDAR_EL, {
            plugins: [
                (0, _daygridDefault.default),
                (0, _timegridDefault.default)
            ],
            initialView: "dayGridMonth",
            dayMaxEventRows: true,
            views: {
                dayGrid: {
                    dayMaxEventRows: 4
                }
            },
            buttonIcons: {
                prev: " ph ph-arrow-left",
                next: " ph ph-arrow-right",
                today: " ph ph-calendar-check",
                dayGridMonth: " ph ph-squares-four",
                timeGridWeek: " ph ph-rows",
                timeGridDay: " ph ph-rectangle"
            },
            headerToolbar: {
                left: "title",
                center: "",
                right: "prev today next dayGridMonth timeGridWeek timeGridDay"
            },
            events: (0, _data.DATA),
            height: "100%",
            datesSet: (info)=>{
                // Get the current start date of the view
                let date = info.view.currentStart;
                // Pass the current start date values to the common object,
                // so the datepicker can utilize it
                currentViewDate = {
                    month: info.view.currentStart.getMonth() + 1,
                    year: info.view.currentStart.getFullYear()
                };
                // Set the datepicker date to match the calendar date
                isViewChanged && DATEPICKER.setDate(date);
                // Calendar view is changed via the fullcalendar call, so set this to true
                isViewChanged = true;
            }
        });
        // Render the calendar
        setTimeout(()=>{
            CALENDAR_VIEW.render();
        });
        //-----------------------------------
        // Datepicker Calendar
        //-----------------------------------
        const CALENDAR_NAVIGATE_EL = document.getElementById("calendar-navigate");
        // Initiate the date picker
        const DATEPICKER = new (0, _vanillajsDatepicker.Datepicker)(CALENDAR_NAVIGATE_EL, {
            maxView: 0,
            prevArrow: "west",
            nextArrow: "east",
            buttonClass: "btn",
            nextArrow: "<i class='ph ph-arrow-right'></i>",
            prevArrow: "<i class='ph ph-arrow-left'></i>"
        });
        // Change the calendar view via datepicker,
        // when a the date is chnaged
        CALENDAR_NAVIGATE_EL.addEventListener("changeDate", (event)=>{
            let date = DATEPICKER.getDate();
            let month = date.getMonth() + 1;
            let year = date.getFullYear();
            // Calendar view is not changed via the fullcalendar call, so set this to false
            isViewChanged = false;
            // Change the calendar view to the datepicker date
            if (!(currentViewDate.month === month && currentViewDate.year === year)) CALENDAR_VIEW.gotoDate(date);
        });
    }
    //-----------------------------------
    // List of events
    //-----------------------------------
    const EVENTS_EL = document.getElementById("calendar-events");
    let listEvents = "";
    if (EVENTS_EL) {
        (0, _data.DATA).slice(0, 10).map((item)=>{
            let date = new Date(item.start);
            listEvents += `<a href="" class="d-flex align-items-center p-2 rounded bg-hover lh-1 mb-0.5">
					<div class="w-9 h-9 me-3 card d-grid place-content-center text-center flex-shrink-0">
						<div class="fw-medium fs-7 mb-0.5 text-body-emphasis">${date.getDate()}</div>	
						<div class="fs-8 text-body-secondary">${date.toLocaleString("default", {
                month: "short"
            })}</div>
					</div>
					<div class="flex-grow-1 text-truncate">
						<div class=" text-body text-truncate mb-2">${item.title}</div>
						<div class="text-body-secondary fs-8">${item.start}</div>
					</div>
				</a>`;
        });
        EVENTS_EL.innerHTML = listEvents;
    }
};

},{"@fullcalendar/core":"jECdu","@fullcalendar/daygrid":"9E1d4","@fullcalendar/timegrid":"bShy5","./data":"fjPf8","vanillajs-datepicker":"1kZPa","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jECdu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JsonRequestError", ()=>(0, _internalCommonJs.ae));
parcelHelpers.export(exports, "Calendar", ()=>Calendar);
parcelHelpers.export(exports, "createPlugin", ()=>createPlugin);
parcelHelpers.export(exports, "formatDate", ()=>formatDate);
parcelHelpers.export(exports, "formatRange", ()=>formatRange);
parcelHelpers.export(exports, "globalLocales", ()=>globalLocales);
parcelHelpers.export(exports, "globalPlugins", ()=>globalPlugins);
parcelHelpers.export(exports, "sliceEvents", ()=>sliceEvents);
parcelHelpers.export(exports, "version", ()=>version);
var _internalCommonJs = require("./internal-common.js");
var _preact = require("preact");
var _compat = require("preact/compat");
const globalLocales = [];
const MINIMAL_RAW_EN_LOCALE = {
    code: 'en',
    week: {
        dow: 0,
        doy: 4
    },
    direction: 'ltr',
    buttonText: {
        prev: 'prev',
        next: 'next',
        prevYear: 'prev year',
        nextYear: 'next year',
        year: 'year',
        today: 'today',
        month: 'month',
        week: 'week',
        day: 'day',
        list: 'list'
    },
    weekText: 'W',
    weekTextLong: 'Week',
    closeHint: 'Close',
    timeHint: 'Time',
    eventHint: 'Event',
    allDayText: 'all-day',
    moreLinkText: 'more',
    noEventsText: 'No events to display'
};
const RAW_EN_LOCALE = Object.assign(Object.assign({}, MINIMAL_RAW_EN_LOCALE), {
    // Includes things we don't want other locales to inherit,
    // things that derive from other translatable strings.
    buttonHints: {
        prev: 'Previous $0',
        next: 'Next $0',
        today (buttonText, unit) {
            return unit === 'day' ? 'Today' : `This ${buttonText}`;
        }
    },
    viewHint: '$0 view',
    navLinkHint: 'Go to $0',
    moreLinkHint (eventCnt) {
        return `Show ${eventCnt} more event${eventCnt === 1 ? '' : 's'}`;
    }
});
function organizeRawLocales(explicitRawLocales) {
    let defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
    let allRawLocales = globalLocales.concat(explicitRawLocales);
    let rawLocaleMap = {
        en: RAW_EN_LOCALE
    };
    for (let rawLocale of allRawLocales)rawLocaleMap[rawLocale.code] = rawLocale;
    return {
        map: rawLocaleMap,
        defaultCode
    };
}
function buildLocale(inputSingular, available) {
    if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) return parseLocale(inputSingular.code, [
        inputSingular.code
    ], inputSingular);
    return queryLocale(inputSingular, available);
}
function queryLocale(codeArg, available) {
    let codes = [].concat(codeArg || []); // will convert to array
    let raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
    return parseLocale(codeArg, codes, raw);
}
function queryRawLocale(codes, available) {
    for(let i = 0; i < codes.length; i += 1){
        let parts = codes[i].toLocaleLowerCase().split('-');
        for(let j = parts.length; j > 0; j -= 1){
            let simpleId = parts.slice(0, j).join('-');
            if (available[simpleId]) return available[simpleId];
        }
    }
    return null;
}
function parseLocale(codeArg, codes, raw) {
    let merged = (0, _internalCommonJs.m)([
        MINIMAL_RAW_EN_LOCALE,
        raw
    ], [
        'buttonText'
    ]);
    delete merged.code; // don't want this part of the options
    let { week } = merged;
    delete merged.week;
    return {
        codeArg,
        codes,
        week,
        simpleNumberFormat: new Intl.NumberFormat(codeArg),
        options: merged
    };
}
// TODO: easier way to add new hooks? need to update a million things
function createPlugin(input) {
    return {
        id: (0, _internalCommonJs.g)(),
        name: input.name,
        premiumReleaseDate: input.premiumReleaseDate ? new Date(input.premiumReleaseDate) : undefined,
        deps: input.deps || [],
        reducers: input.reducers || [],
        isLoadingFuncs: input.isLoadingFuncs || [],
        contextInit: [].concat(input.contextInit || []),
        eventRefiners: input.eventRefiners || {},
        eventDefMemberAdders: input.eventDefMemberAdders || [],
        eventSourceRefiners: input.eventSourceRefiners || {},
        isDraggableTransformers: input.isDraggableTransformers || [],
        eventDragMutationMassagers: input.eventDragMutationMassagers || [],
        eventDefMutationAppliers: input.eventDefMutationAppliers || [],
        dateSelectionTransformers: input.dateSelectionTransformers || [],
        datePointTransforms: input.datePointTransforms || [],
        dateSpanTransforms: input.dateSpanTransforms || [],
        views: input.views || {},
        viewPropsTransformers: input.viewPropsTransformers || [],
        isPropsValid: input.isPropsValid || null,
        externalDefTransforms: input.externalDefTransforms || [],
        viewContainerAppends: input.viewContainerAppends || [],
        eventDropTransformers: input.eventDropTransformers || [],
        componentInteractions: input.componentInteractions || [],
        calendarInteractions: input.calendarInteractions || [],
        themeClasses: input.themeClasses || {},
        eventSourceDefs: input.eventSourceDefs || [],
        cmdFormatter: input.cmdFormatter,
        recurringTypes: input.recurringTypes || [],
        namedTimeZonedImpl: input.namedTimeZonedImpl,
        initialView: input.initialView || '',
        elementDraggingImpl: input.elementDraggingImpl,
        optionChangeHandlers: input.optionChangeHandlers || {},
        scrollGridImpl: input.scrollGridImpl || null,
        listenerRefiners: input.listenerRefiners || {},
        optionRefiners: input.optionRefiners || {},
        propSetHandlers: input.propSetHandlers || {}
    };
}
function buildPluginHooks(pluginDefs, globalDefs) {
    let currentPluginIds = {};
    let hooks = {
        premiumReleaseDate: undefined,
        reducers: [],
        isLoadingFuncs: [],
        contextInit: [],
        eventRefiners: {},
        eventDefMemberAdders: [],
        eventSourceRefiners: {},
        isDraggableTransformers: [],
        eventDragMutationMassagers: [],
        eventDefMutationAppliers: [],
        dateSelectionTransformers: [],
        datePointTransforms: [],
        dateSpanTransforms: [],
        views: {},
        viewPropsTransformers: [],
        isPropsValid: null,
        externalDefTransforms: [],
        viewContainerAppends: [],
        eventDropTransformers: [],
        componentInteractions: [],
        calendarInteractions: [],
        themeClasses: {},
        eventSourceDefs: [],
        cmdFormatter: null,
        recurringTypes: [],
        namedTimeZonedImpl: null,
        initialView: '',
        elementDraggingImpl: null,
        optionChangeHandlers: {},
        scrollGridImpl: null,
        listenerRefiners: {},
        optionRefiners: {},
        propSetHandlers: {}
    };
    function addDefs(defs) {
        for (let def of defs){
            const pluginName = def.name;
            const currentId = currentPluginIds[pluginName];
            if (currentId === undefined) {
                currentPluginIds[pluginName] = def.id;
                addDefs(def.deps);
                hooks = combineHooks(hooks, def);
            } else if (currentId !== def.id) // different ID than the one already added
            console.warn(`Duplicate plugin '${pluginName}'`);
        }
    }
    if (pluginDefs) addDefs(pluginDefs);
    addDefs(globalDefs);
    return hooks;
}
function buildBuildPluginHooks() {
    let currentOverrideDefs = [];
    let currentGlobalDefs = [];
    let currentHooks;
    return (overrideDefs, globalDefs)=>{
        if (!currentHooks || !(0, _internalCommonJs.i)(overrideDefs, currentOverrideDefs) || !(0, _internalCommonJs.i)(globalDefs, currentGlobalDefs)) currentHooks = buildPluginHooks(overrideDefs, globalDefs);
        currentOverrideDefs = overrideDefs;
        currentGlobalDefs = globalDefs;
        return currentHooks;
    };
}
function combineHooks(hooks0, hooks1) {
    return {
        premiumReleaseDate: compareOptionalDates(hooks0.premiumReleaseDate, hooks1.premiumReleaseDate),
        reducers: hooks0.reducers.concat(hooks1.reducers),
        isLoadingFuncs: hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),
        contextInit: hooks0.contextInit.concat(hooks1.contextInit),
        eventRefiners: Object.assign(Object.assign({}, hooks0.eventRefiners), hooks1.eventRefiners),
        eventDefMemberAdders: hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),
        eventSourceRefiners: Object.assign(Object.assign({}, hooks0.eventSourceRefiners), hooks1.eventSourceRefiners),
        isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
        eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
        eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
        dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
        datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
        dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
        views: Object.assign(Object.assign({}, hooks0.views), hooks1.views),
        viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
        isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
        externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
        viewContainerAppends: hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),
        eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
        calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
        componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
        themeClasses: Object.assign(Object.assign({}, hooks0.themeClasses), hooks1.themeClasses),
        eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
        cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
        recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
        namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
        initialView: hooks0.initialView || hooks1.initialView,
        elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
        optionChangeHandlers: Object.assign(Object.assign({}, hooks0.optionChangeHandlers), hooks1.optionChangeHandlers),
        scrollGridImpl: hooks1.scrollGridImpl || hooks0.scrollGridImpl,
        listenerRefiners: Object.assign(Object.assign({}, hooks0.listenerRefiners), hooks1.listenerRefiners),
        optionRefiners: Object.assign(Object.assign({}, hooks0.optionRefiners), hooks1.optionRefiners),
        propSetHandlers: Object.assign(Object.assign({}, hooks0.propSetHandlers), hooks1.propSetHandlers)
    };
}
function compareOptionalDates(date0, date1) {
    if (date0 === undefined) return date1;
    if (date1 === undefined) return date0;
    return new Date(Math.max(date0.valueOf(), date1.valueOf()));
}
class StandardTheme extends (0, _internalCommonJs.T) {
}
StandardTheme.prototype.classes = {
    root: 'fc-theme-standard',
    tableCellShaded: 'fc-cell-shaded',
    buttonGroup: 'fc-button-group',
    button: 'fc-button fc-button-primary',
    buttonActive: 'fc-button-active'
};
StandardTheme.prototype.baseIconClass = 'fc-icon';
StandardTheme.prototype.iconClasses = {
    close: 'fc-icon-x',
    prev: 'fc-icon-chevron-left',
    next: 'fc-icon-chevron-right',
    prevYear: 'fc-icon-chevrons-left',
    nextYear: 'fc-icon-chevrons-right'
};
StandardTheme.prototype.rtlIconClasses = {
    prev: 'fc-icon-chevron-right',
    next: 'fc-icon-chevron-left',
    prevYear: 'fc-icon-chevrons-right',
    nextYear: 'fc-icon-chevrons-left'
};
StandardTheme.prototype.iconOverrideOption = 'buttonIcons'; // TODO: make TS-friendly
StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';
function compileViewDefs(defaultConfigs, overrideConfigs) {
    let hash = {};
    let viewType;
    for(viewType in defaultConfigs)ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
    for(viewType in overrideConfigs)ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
    return hash;
}
function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
    if (hash[viewType]) return hash[viewType];
    let viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);
    if (viewDef) hash[viewType] = viewDef;
    return viewDef;
}
function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
    let defaultConfig = defaultConfigs[viewType];
    let overrideConfig = overrideConfigs[viewType];
    let queryProp = (name)=>defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;
    let theComponent = queryProp('component');
    let superType = queryProp('superType');
    let superDef = null;
    if (superType) {
        if (superType === viewType) throw new Error('Can\'t have a custom view type that references itself');
        superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
    }
    if (!theComponent && superDef) theComponent = superDef.component;
    if (!theComponent) return null; // don't throw a warning, might be settings for a single-unit view
    return {
        type: viewType,
        component: theComponent,
        defaults: Object.assign(Object.assign({}, superDef ? superDef.defaults : {}), defaultConfig ? defaultConfig.rawOptions : {}),
        overrides: Object.assign(Object.assign({}, superDef ? superDef.overrides : {}), overrideConfig ? overrideConfig.rawOptions : {})
    };
}
function parseViewConfigs(inputs) {
    return (0, _internalCommonJs.a)(inputs, parseViewConfig);
}
function parseViewConfig(input) {
    let rawOptions = typeof input === 'function' ? {
        component: input
    } : input;
    let { component } = rawOptions;
    if (rawOptions.content) // TODO: remove content/classNames/didMount/etc from options?
    component = createViewHookComponent(rawOptions);
    else if (component && !(component.prototype instanceof (0, _internalCommonJs.B))) // WHY?: people were using `component` property for `content`
    // TODO: converge on one setting name
    component = createViewHookComponent(Object.assign(Object.assign({}, rawOptions), {
        content: component
    }));
    return {
        superType: rawOptions.type,
        component: component,
        rawOptions
    };
}
function createViewHookComponent(options) {
    return (viewProps)=>(0, _preact.createElement)((0, _internalCommonJs.V).Consumer, null, (context)=>(0, _preact.createElement)((0, _internalCommonJs.C), {
                elTag: "div",
                elClasses: (0, _internalCommonJs.b)(context.viewSpec),
                renderProps: Object.assign(Object.assign({}, viewProps), {
                    nextDayThreshold: context.options.nextDayThreshold
                }),
                generatorName: undefined,
                customGenerator: options.content,
                classNameGenerator: options.classNames,
                didMount: options.didMount,
                willUnmount: options.willUnmount
            }));
}
function buildViewSpecs(defaultInputs, optionOverrides, dynamicOptionOverrides, localeDefaults) {
    let defaultConfigs = parseViewConfigs(defaultInputs);
    let overrideConfigs = parseViewConfigs(optionOverrides.views);
    let viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
    return (0, _internalCommonJs.a)(viewDefs, (viewDef)=>buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults));
}
function buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults) {
    let durationInput = viewDef.overrides.duration || viewDef.defaults.duration || dynamicOptionOverrides.duration || optionOverrides.duration;
    let duration = null;
    let durationUnit = '';
    let singleUnit = '';
    let singleUnitOverrides = {};
    if (durationInput) {
        duration = createDurationCached(durationInput);
        if (duration) {
            let denom = (0, _internalCommonJs.c)(duration);
            durationUnit = denom.unit;
            if (denom.value === 1) {
                singleUnit = durationUnit;
                singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].rawOptions : {};
            }
        }
    }
    let queryButtonText = (optionsSubset)=>{
        let buttonTextMap = optionsSubset.buttonText || {};
        let buttonTextKey = viewDef.defaults.buttonTextKey;
        if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) return buttonTextMap[buttonTextKey];
        if (buttonTextMap[viewDef.type] != null) return buttonTextMap[viewDef.type];
        if (buttonTextMap[singleUnit] != null) return buttonTextMap[singleUnit];
        return null;
    };
    let queryButtonTitle = (optionsSubset)=>{
        let buttonHints = optionsSubset.buttonHints || {};
        let buttonKey = viewDef.defaults.buttonTextKey; // use same key as text
        if (buttonKey != null && buttonHints[buttonKey] != null) return buttonHints[buttonKey];
        if (buttonHints[viewDef.type] != null) return buttonHints[viewDef.type];
        if (buttonHints[singleUnit] != null) return buttonHints[singleUnit];
        return null;
    };
    return {
        type: viewDef.type,
        component: viewDef.component,
        duration,
        durationUnit,
        singleUnit,
        optionDefaults: viewDef.defaults,
        optionOverrides: Object.assign(Object.assign({}, singleUnitOverrides), viewDef.overrides),
        buttonTextOverride: queryButtonText(dynamicOptionOverrides) || queryButtonText(optionOverrides) || // constructor-specified buttonText lookup hash takes precedence
        viewDef.overrides.buttonText,
        buttonTextDefault: queryButtonText(localeDefaults) || viewDef.defaults.buttonText || queryButtonText((0, _internalCommonJs.e)) || viewDef.type,
        // not DRY
        buttonTitleOverride: queryButtonTitle(dynamicOptionOverrides) || queryButtonTitle(optionOverrides) || viewDef.overrides.buttonHint,
        buttonTitleDefault: queryButtonTitle(localeDefaults) || viewDef.defaults.buttonHint || queryButtonTitle((0, _internalCommonJs.e))
    };
}
// hack to get memoization working
let durationInputMap = {};
function createDurationCached(durationInput) {
    let json = JSON.stringify(durationInput);
    let res = durationInputMap[json];
    if (res === undefined) {
        res = (0, _internalCommonJs.d)(durationInput);
        durationInputMap[json] = res;
    }
    return res;
}
function reduceViewType(viewType, action) {
    switch(action.type){
        case 'CHANGE_VIEW_TYPE':
            viewType = action.viewType;
    }
    return viewType;
}
function reduceCurrentDate(currentDate, action) {
    switch(action.type){
        case 'CHANGE_DATE':
            return action.dateMarker;
        default:
            return currentDate;
    }
}
// should be initialized once and stay constant
// this will change too
function getInitialDate(options, dateEnv, nowManager) {
    let initialDateInput = options.initialDate;
    // compute the initial ambig-timezone date
    if (initialDateInput != null) return dateEnv.createMarker(initialDateInput);
    return nowManager.getDateMarker();
}
function reduceDynamicOptionOverrides(dynamicOptionOverrides, action) {
    switch(action.type){
        case 'SET_OPTION':
            return Object.assign(Object.assign({}, dynamicOptionOverrides), {
                [action.optionName]: action.rawOptionValue
            });
        default:
            return dynamicOptionOverrides;
    }
}
function reduceDateProfile(currentDateProfile, action, currentDate, dateProfileGenerator) {
    let dp;
    switch(action.type){
        case 'CHANGE_VIEW_TYPE':
            return dateProfileGenerator.build(action.dateMarker || currentDate);
        case 'CHANGE_DATE':
            return dateProfileGenerator.build(action.dateMarker);
        case 'PREV':
            dp = dateProfileGenerator.buildPrev(currentDateProfile, currentDate);
            if (dp.isValid) return dp;
            break;
        case 'NEXT':
            dp = dateProfileGenerator.buildNext(currentDateProfile, currentDate);
            if (dp.isValid) return dp;
            break;
    }
    return currentDateProfile;
}
function initEventSources(calendarOptions, dateProfile, context) {
    let activeRange = dateProfile ? dateProfile.activeRange : null;
    return addSources({}, parseInitialSources(calendarOptions, context), activeRange, context);
}
function reduceEventSources(eventSources, action, dateProfile, context) {
    let activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?
    switch(action.type){
        case 'ADD_EVENT_SOURCES':
            return addSources(eventSources, action.sources, activeRange, context);
        case 'REMOVE_EVENT_SOURCE':
            return removeSource(eventSources, action.sourceId);
        case 'PREV':
        case 'NEXT':
        case 'CHANGE_DATE':
        case 'CHANGE_VIEW_TYPE':
            if (dateProfile) return fetchDirtySources(eventSources, activeRange, context);
            return eventSources;
        case 'FETCH_EVENT_SOURCES':
            return fetchSourcesByIds(eventSources, action.sourceIds ? (0, _internalCommonJs.f)(action.sourceIds) : excludeStaticSources(eventSources, context), activeRange, action.isRefetch || false, context);
        case 'RECEIVE_EVENTS':
        case 'RECEIVE_EVENT_ERROR':
            return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);
        case 'REMOVE_ALL_EVENT_SOURCES':
            return {};
        default:
            return eventSources;
    }
}
function reduceEventSourcesNewTimeZone(eventSources, dateProfile, context) {
    let activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?
    return fetchSourcesByIds(eventSources, excludeStaticSources(eventSources, context), activeRange, true, context);
}
function computeEventSourcesLoading(eventSources) {
    for(let sourceId in eventSources){
        if (eventSources[sourceId].isFetching) return true;
    }
    return false;
}
function addSources(eventSourceHash, sources, fetchRange, context) {
    let hash = {};
    for (let source of sources)hash[source.sourceId] = source;
    if (fetchRange) hash = fetchDirtySources(hash, fetchRange, context);
    return Object.assign(Object.assign({}, eventSourceHash), hash);
}
function removeSource(eventSourceHash, sourceId) {
    return (0, _internalCommonJs.h)(eventSourceHash, (eventSource)=>eventSource.sourceId !== sourceId);
}
function fetchDirtySources(sourceHash, fetchRange, context) {
    return fetchSourcesByIds(sourceHash, (0, _internalCommonJs.h)(sourceHash, (eventSource)=>isSourceDirty(eventSource, fetchRange, context)), fetchRange, false, context);
}
function isSourceDirty(eventSource, fetchRange, context) {
    if (!doesSourceNeedRange(eventSource, context)) return !eventSource.latestFetchId;
    return !context.options.lazyFetching || !eventSource.fetchRange || eventSource.isFetching || // always cancel outdated in-progress fetches
    fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;
}
function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, isRefetch, context) {
    let nextSources = {};
    for(let sourceId in prevSources){
        let source = prevSources[sourceId];
        if (sourceIdHash[sourceId]) nextSources[sourceId] = fetchSource(source, fetchRange, isRefetch, context);
        else nextSources[sourceId] = source;
    }
    return nextSources;
}
function fetchSource(eventSource, fetchRange, isRefetch, context) {
    let { options, calendarApi } = context;
    let sourceDef = context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];
    let fetchId = (0, _internalCommonJs.g)();
    sourceDef.fetch({
        eventSource,
        range: fetchRange,
        isRefetch,
        context
    }, (res)=>{
        let { rawEvents } = res;
        if (options.eventSourceSuccess) rawEvents = options.eventSourceSuccess.call(calendarApi, rawEvents, res.response) || rawEvents;
        if (eventSource.success) rawEvents = eventSource.success.call(calendarApi, rawEvents, res.response) || rawEvents;
        context.dispatch({
            type: 'RECEIVE_EVENTS',
            sourceId: eventSource.sourceId,
            fetchId,
            fetchRange,
            rawEvents
        });
    }, (error)=>{
        let errorHandled = false;
        if (options.eventSourceFailure) {
            options.eventSourceFailure.call(calendarApi, error);
            errorHandled = true;
        }
        if (eventSource.failure) {
            eventSource.failure(error);
            errorHandled = true;
        }
        if (!errorHandled) console.warn(error.message, error);
        context.dispatch({
            type: 'RECEIVE_EVENT_ERROR',
            sourceId: eventSource.sourceId,
            fetchId,
            fetchRange,
            error
        });
    });
    return Object.assign(Object.assign({}, eventSource), {
        isFetching: true,
        latestFetchId: fetchId
    });
}
function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
    let eventSource = sourceHash[sourceId];
    if (eventSource && // not already removed
    fetchId === eventSource.latestFetchId) return Object.assign(Object.assign({}, sourceHash), {
        [sourceId]: Object.assign(Object.assign({}, eventSource), {
            isFetching: false,
            fetchRange
        })
    });
    return sourceHash;
}
function excludeStaticSources(eventSources, context) {
    return (0, _internalCommonJs.h)(eventSources, (eventSource)=>doesSourceNeedRange(eventSource, context));
}
function parseInitialSources(rawOptions, context) {
    let refiners = (0, _internalCommonJs.j)(context);
    let rawSources = [].concat(rawOptions.eventSources || []);
    let sources = []; // parsed
    if (rawOptions.initialEvents) rawSources.unshift(rawOptions.initialEvents);
    if (rawOptions.events) rawSources.unshift(rawOptions.events);
    for (let rawSource of rawSources){
        let source = (0, _internalCommonJs.p)(rawSource, context, refiners);
        if (source) sources.push(source);
    }
    return sources;
}
function doesSourceNeedRange(eventSource, context) {
    let defs = context.pluginHooks.eventSourceDefs;
    return !defs[eventSource.sourceDefId].ignoreRange;
}
function reduceDateSelection(currentSelection, action) {
    switch(action.type){
        case 'UNSELECT_DATES':
            return null;
        case 'SELECT_DATES':
            return action.selection;
        default:
            return currentSelection;
    }
}
function reduceSelectedEvent(currentInstanceId, action) {
    switch(action.type){
        case 'UNSELECT_EVENT':
            return '';
        case 'SELECT_EVENT':
            return action.eventInstanceId;
        default:
            return currentInstanceId;
    }
}
function reduceEventDrag(currentDrag, action) {
    let newDrag;
    switch(action.type){
        case 'UNSET_EVENT_DRAG':
            return null;
        case 'SET_EVENT_DRAG':
            newDrag = action.state;
            return {
                affectedEvents: newDrag.affectedEvents,
                mutatedEvents: newDrag.mutatedEvents,
                isEvent: newDrag.isEvent
            };
        default:
            return currentDrag;
    }
}
function reduceEventResize(currentResize, action) {
    let newResize;
    switch(action.type){
        case 'UNSET_EVENT_RESIZE':
            return null;
        case 'SET_EVENT_RESIZE':
            newResize = action.state;
            return {
                affectedEvents: newResize.affectedEvents,
                mutatedEvents: newResize.mutatedEvents,
                isEvent: newResize.isEvent
            };
        default:
            return currentResize;
    }
}
function parseToolbars(calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {
    let header = calendarOptions.headerToolbar ? parseToolbar(calendarOptions.headerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;
    let footer = calendarOptions.footerToolbar ? parseToolbar(calendarOptions.footerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;
    return {
        header,
        footer
    };
}
function parseToolbar(sectionStrHash, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {
    let sectionWidgets = {};
    let viewsWithButtons = [];
    let hasTitle = false;
    for(let sectionName in sectionStrHash){
        let sectionStr = sectionStrHash[sectionName];
        let sectionRes = parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi);
        sectionWidgets[sectionName] = sectionRes.widgets;
        viewsWithButtons.push(...sectionRes.viewsWithButtons);
        hasTitle = hasTitle || sectionRes.hasTitle;
    }
    return {
        sectionWidgets,
        viewsWithButtons,
        hasTitle
    };
}
/*
BAD: querying icons and text here. should be done at render time
*/ function parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {
    let isRtl = calendarOptions.direction === 'rtl';
    let calendarCustomButtons = calendarOptions.customButtons || {};
    let calendarButtonTextOverrides = calendarOptionOverrides.buttonText || {};
    let calendarButtonText = calendarOptions.buttonText || {};
    let calendarButtonHintOverrides = calendarOptionOverrides.buttonHints || {};
    let calendarButtonHints = calendarOptions.buttonHints || {};
    let sectionSubstrs = sectionStr ? sectionStr.split(' ') : [];
    let viewsWithButtons = [];
    let hasTitle = false;
    let widgets = sectionSubstrs.map((buttonGroupStr)=>buttonGroupStr.split(',').map((buttonName)=>{
            if (buttonName === 'title') {
                hasTitle = true;
                return {
                    buttonName
                };
            }
            let customButtonProps;
            let viewSpec;
            let buttonClick;
            let buttonIcon; // only one of these will be set
            let buttonText; // "
            let buttonHint;
            // ^ for the title="" attribute, for accessibility
            if (customButtonProps = calendarCustomButtons[buttonName]) {
                buttonClick = (ev)=>{
                    if (customButtonProps.click) customButtonProps.click.call(ev.target, ev, ev.target); // TODO: use Calendar this context?
                };
                (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = customButtonProps.text);
                buttonHint = customButtonProps.hint || customButtonProps.text;
            } else if (viewSpec = viewSpecs[buttonName]) {
                viewsWithButtons.push(buttonName);
                buttonClick = ()=>{
                    calendarApi.changeView(buttonName);
                };
                (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = viewSpec.buttonTextDefault);
                let textFallback = viewSpec.buttonTextOverride || viewSpec.buttonTextDefault;
                buttonHint = (0, _internalCommonJs.k)(viewSpec.buttonTitleOverride || viewSpec.buttonTitleDefault || calendarOptions.viewHint, [
                    textFallback,
                    buttonName
                ], textFallback);
            } else if (calendarApi[buttonName]) {
                buttonClick = ()=>{
                    calendarApi[buttonName]();
                };
                (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = calendarButtonText[buttonName]); // everything else is considered default
                if (buttonName === 'prevYear' || buttonName === 'nextYear') {
                    let prevOrNext = buttonName === 'prevYear' ? 'prev' : 'next';
                    buttonHint = (0, _internalCommonJs.k)(calendarButtonHintOverrides[prevOrNext] || calendarButtonHints[prevOrNext], [
                        calendarButtonText.year || 'year',
                        'year'
                    ], calendarButtonText[buttonName]);
                } else buttonHint = (navUnit)=>(0, _internalCommonJs.k)(calendarButtonHintOverrides[buttonName] || calendarButtonHints[buttonName], [
                        calendarButtonText[navUnit] || navUnit,
                        navUnit
                    ], calendarButtonText[buttonName]);
            }
            return {
                buttonName,
                buttonClick,
                buttonIcon,
                buttonText,
                buttonHint
            };
        }));
    return {
        widgets,
        viewsWithButtons,
        hasTitle
    };
}
// always represents the current view. otherwise, it'd need to change value every time date changes
class ViewImpl {
    constructor(type, getCurrentData, dateEnv){
        this.type = type;
        this.getCurrentData = getCurrentData;
        this.dateEnv = dateEnv;
    }
    get calendar() {
        return this.getCurrentData().calendarApi;
    }
    get title() {
        return this.getCurrentData().viewTitle;
    }
    get activeStart() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);
    }
    get activeEnd() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);
    }
    get currentStart() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);
    }
    get currentEnd() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);
    }
    getOption(name) {
        return this.getCurrentData().options[name]; // are the view-specific options
    }
}
let eventSourceDef$2 = {
    ignoreRange: true,
    parseMeta (refined) {
        if (Array.isArray(refined.events)) return refined.events;
        return null;
    },
    fetch (arg, successCallback) {
        successCallback({
            rawEvents: arg.eventSource.meta
        });
    }
};
const arrayEventSourcePlugin = createPlugin({
    name: 'array-event-source',
    eventSourceDefs: [
        eventSourceDef$2
    ]
});
let eventSourceDef$1 = {
    parseMeta (refined) {
        if (typeof refined.events === 'function') return refined.events;
        return null;
    },
    fetch (arg, successCallback, errorCallback) {
        const { dateEnv } = arg.context;
        const func = arg.eventSource.meta;
        (0, _internalCommonJs.u)(func.bind(null, (0, _internalCommonJs.l)(arg.range, dateEnv)), (rawEvents)=>successCallback({
                rawEvents
            }), errorCallback);
    }
};
const funcEventSourcePlugin = createPlugin({
    name: 'func-event-source',
    eventSourceDefs: [
        eventSourceDef$1
    ]
});
const JSON_FEED_EVENT_SOURCE_REFINERS = {
    method: String,
    extraParams: (0, _internalCommonJs.n),
    startParam: String,
    endParam: String,
    timeZoneParam: String
};
let eventSourceDef = {
    parseMeta (refined) {
        if (refined.url && (refined.format === 'json' || !refined.format)) return {
            url: refined.url,
            format: 'json',
            method: (refined.method || 'GET').toUpperCase(),
            extraParams: refined.extraParams,
            startParam: refined.startParam,
            endParam: refined.endParam,
            timeZoneParam: refined.timeZoneParam
        };
        return null;
    },
    fetch (arg, successCallback, errorCallback) {
        const { meta } = arg.eventSource;
        const requestParams = buildRequestParams(meta, arg.range, arg.context);
        (0, _internalCommonJs.r)(meta.method, meta.url, requestParams).then(([rawEvents, response])=>{
            successCallback({
                rawEvents,
                response
            });
        }, errorCallback);
    }
};
const jsonFeedEventSourcePlugin = createPlugin({
    name: 'json-event-source',
    eventSourceRefiners: JSON_FEED_EVENT_SOURCE_REFINERS,
    eventSourceDefs: [
        eventSourceDef
    ]
});
function buildRequestParams(meta, range, context) {
    let { dateEnv, options } = context;
    let startParam;
    let endParam;
    let timeZoneParam;
    let customRequestParams;
    let params = {};
    startParam = meta.startParam;
    if (startParam == null) startParam = options.startParam;
    endParam = meta.endParam;
    if (endParam == null) endParam = options.endParam;
    timeZoneParam = meta.timeZoneParam;
    if (timeZoneParam == null) timeZoneParam = options.timeZoneParam;
    // retrieve any outbound GET/POST data from the options
    if (typeof meta.extraParams === 'function') // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
    else // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
    Object.assign(params, customRequestParams);
    params[startParam] = dateEnv.formatIso(range.start);
    params[endParam] = dateEnv.formatIso(range.end);
    if (dateEnv.timeZone !== 'local') params[timeZoneParam] = dateEnv.timeZone;
    return params;
}
const SIMPLE_RECURRING_REFINERS = {
    daysOfWeek: (0, _internalCommonJs.n),
    startTime: (0, _internalCommonJs.d),
    endTime: (0, _internalCommonJs.d),
    duration: (0, _internalCommonJs.d),
    startRecur: (0, _internalCommonJs.n),
    endRecur: (0, _internalCommonJs.n)
};
let recurring = {
    parse (refined, dateEnv) {
        if (refined.daysOfWeek || refined.startTime || refined.endTime || refined.startRecur || refined.endRecur) {
            let recurringData = {
                daysOfWeek: refined.daysOfWeek || null,
                startTime: refined.startTime || null,
                endTime: refined.endTime || null,
                startRecur: refined.startRecur ? dateEnv.createMarker(refined.startRecur) : null,
                endRecur: refined.endRecur ? dateEnv.createMarker(refined.endRecur) : null,
                dateEnv
            };
            let duration;
            if (refined.duration) duration = refined.duration;
            if (!duration && refined.startTime && refined.endTime) duration = (0, _internalCommonJs.s)(refined.endTime, refined.startTime);
            return {
                allDayGuess: Boolean(!refined.startTime && !refined.endTime),
                duration,
                typeData: recurringData
            };
        }
        return null;
    },
    expand (typeData, framingRange, dateEnv) {
        let clippedFramingRange = (0, _internalCommonJs.o)(framingRange, {
            start: typeData.startRecur,
            end: typeData.endRecur
        });
        if (clippedFramingRange) return expandRanges(typeData.daysOfWeek, typeData.startTime, typeData.dateEnv, dateEnv, clippedFramingRange);
        return [];
    }
};
const simpleRecurringEventsPlugin = createPlugin({
    name: 'simple-recurring-event',
    recurringTypes: [
        recurring
    ],
    eventRefiners: SIMPLE_RECURRING_REFINERS
});
function expandRanges(daysOfWeek, startTime, eventDateEnv, calendarDateEnv, framingRange) {
    let dowHash = daysOfWeek ? (0, _internalCommonJs.f)(daysOfWeek) : null;
    let dayMarker = (0, _internalCommonJs.q)(framingRange.start);
    let endMarker = framingRange.end;
    let instanceStarts = [];
    while(dayMarker < endMarker){
        let instanceStart;
        // if everyday, or this particular day-of-week
        if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
            if (startTime) instanceStart = calendarDateEnv.add(dayMarker, startTime);
            else instanceStart = dayMarker;
            instanceStarts.push(calendarDateEnv.createMarker(eventDateEnv.toDate(instanceStart)));
        }
        dayMarker = (0, _internalCommonJs.t)(dayMarker, 1);
    }
    return instanceStarts;
}
const changeHandlerPlugin = createPlugin({
    name: 'change-handler',
    optionChangeHandlers: {
        events (events, context) {
            handleEventSources([
                events
            ], context);
        },
        eventSources: handleEventSources
    }
});
/*
BUG: if `event` was supplied, all previously-given `eventSources` will be wiped out
*/ function handleEventSources(inputs, context) {
    let unfoundSources = (0, _internalCommonJs.v)(context.getCurrentData().eventSources);
    if (unfoundSources.length === 1 && inputs.length === 1 && Array.isArray(unfoundSources[0]._raw) && Array.isArray(inputs[0])) {
        context.dispatch({
            type: 'RESET_RAW_EVENTS',
            sourceId: unfoundSources[0].sourceId,
            rawEvents: inputs[0]
        });
        return;
    }
    let newInputs = [];
    for (let input of inputs){
        let inputFound = false;
        for(let i = 0; i < unfoundSources.length; i += 1)if (unfoundSources[i]._raw === input) {
            unfoundSources.splice(i, 1); // delete
            inputFound = true;
            break;
        }
        if (!inputFound) newInputs.push(input);
    }
    for (let unfoundSource of unfoundSources)context.dispatch({
        type: 'REMOVE_EVENT_SOURCE',
        sourceId: unfoundSource.sourceId
    });
    for (let newInput of newInputs)context.calendarApi.addEventSource(newInput);
}
function handleDateProfile(dateProfile, context) {
    context.emitter.trigger('datesSet', Object.assign(Object.assign({}, (0, _internalCommonJs.l)(dateProfile.activeRange, context.dateEnv)), {
        view: context.viewApi
    }));
}
function handleEventStore(eventStore, context) {
    let { emitter } = context;
    if (emitter.hasHandlers('eventsSet')) emitter.trigger('eventsSet', (0, _internalCommonJs.w)(eventStore, context));
}
/*
this array is exposed on the root namespace so that UMD plugins can add to it.
see the rollup-bundles script.
*/ const globalPlugins = [
    arrayEventSourcePlugin,
    funcEventSourcePlugin,
    jsonFeedEventSourcePlugin,
    simpleRecurringEventsPlugin,
    changeHandlerPlugin,
    createPlugin({
        name: 'misc',
        isLoadingFuncs: [
            (state)=>computeEventSourcesLoading(state.eventSources)
        ],
        propSetHandlers: {
            dateProfile: handleDateProfile,
            eventStore: handleEventStore
        }
    })
];
class TaskRunner {
    constructor(runTaskOption, drainedOption){
        this.runTaskOption = runTaskOption;
        this.drainedOption = drainedOption;
        this.queue = [];
        this.delayedRunner = new (0, _internalCommonJs.D)(this.drain.bind(this));
    }
    request(task, delay) {
        this.queue.push(task);
        this.delayedRunner.request(delay);
    }
    pause(scope) {
        this.delayedRunner.pause(scope);
    }
    resume(scope, force) {
        this.delayedRunner.resume(scope, force);
    }
    drain() {
        let { queue } = this;
        while(queue.length){
            let completedTasks = [];
            let task;
            while(task = queue.shift()){
                this.runTask(task);
                completedTasks.push(task);
            }
            this.drained(completedTasks);
        } // keep going, in case new tasks were added in the drained handler
    }
    runTask(task) {
        if (this.runTaskOption) this.runTaskOption(task);
    }
    drained(completedTasks) {
        if (this.drainedOption) this.drainedOption(completedTasks);
    }
}
// Computes what the title at the top of the calendarApi should be for this view
function buildTitle(dateProfile, viewOptions, dateEnv) {
    let range;
    // for views that span a large unit of time, show the proper interval, ignoring stray days before and after
    if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) range = dateProfile.currentRange;
    else range = dateProfile.activeRange;
    return dateEnv.formatRange(range.start, range.end, (0, _internalCommonJs.x)(viewOptions.titleFormat || buildTitleFormat(dateProfile)), {
        isEndExclusive: dateProfile.isRangeAllDay,
        defaultSeparator: viewOptions.titleRangeSeparator
    });
}
// Generates the format string that should be used to generate the title for the current date range.
// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.
function buildTitleFormat(dateProfile) {
    let { currentRangeUnit } = dateProfile;
    if (currentRangeUnit === 'year') return {
        year: 'numeric'
    };
    if (currentRangeUnit === 'month') return {
        year: 'numeric',
        month: 'long'
    }; // like "September 2014"
    let days = (0, _internalCommonJs.y)(dateProfile.currentRange.start, dateProfile.currentRange.end);
    if (days !== null && days > 1) // multi-day range. shorter, like "Sep 9 - 10 2014"
    return {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    };
    // one day. longer, like "September 9 2014"
    return {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    };
}
/*
TODO: test switching timezones when NO timezone plugin
*/ class CalendarNowManager {
    constructor(){
        this.resetListeners = new Set();
    }
    handleInput(dateEnv, nowInput) {
        const oldDateEnv = this.dateEnv;
        if (dateEnv !== oldDateEnv) {
            if (typeof nowInput === 'function') this.nowFn = nowInput;
            else if (!oldDateEnv) {
                this.nowAnchorDate = dateEnv.toDate(nowInput ? dateEnv.createMarker(nowInput) : dateEnv.createNowMarker());
                this.nowAnchorQueried = Date.now();
            }
            this.dateEnv = dateEnv;
            // not first time? fire reset handlers
            if (oldDateEnv) for (const resetListener of this.resetListeners.values())resetListener();
        }
    }
    getDateMarker() {
        return this.nowAnchorDate ? this.dateEnv.timestampToMarker(this.nowAnchorDate.valueOf() + (Date.now() - this.nowAnchorQueried)) : this.dateEnv.createMarker(this.nowFn());
    }
    addResetListener(handler) {
        this.resetListeners.add(handler);
    }
    removeResetListener(handler) {
        this.resetListeners.delete(handler);
    }
}
// in future refactor, do the redux-style function(state=initial) for initial-state
// also, whatever is happening in constructor, have it happen in action queue too
class CalendarDataManager {
    constructor(props){
        this.computeCurrentViewData = (0, _internalCommonJs.z)(this._computeCurrentViewData);
        this.organizeRawLocales = (0, _internalCommonJs.z)(organizeRawLocales);
        this.buildLocale = (0, _internalCommonJs.z)(buildLocale);
        this.buildPluginHooks = buildBuildPluginHooks();
        this.buildDateEnv = (0, _internalCommonJs.z)(buildDateEnv$1);
        this.buildTheme = (0, _internalCommonJs.z)(buildTheme);
        this.parseToolbars = (0, _internalCommonJs.z)(parseToolbars);
        this.buildViewSpecs = (0, _internalCommonJs.z)(buildViewSpecs);
        this.buildDateProfileGenerator = (0, _internalCommonJs.A)(buildDateProfileGenerator);
        this.buildViewApi = (0, _internalCommonJs.z)(buildViewApi);
        this.buildViewUiProps = (0, _internalCommonJs.A)(buildViewUiProps);
        this.buildEventUiBySource = (0, _internalCommonJs.z)(buildEventUiBySource, (0, _internalCommonJs.E));
        this.buildEventUiBases = (0, _internalCommonJs.z)(buildEventUiBases);
        this.parseContextBusinessHours = (0, _internalCommonJs.A)(parseContextBusinessHours);
        this.buildTitle = (0, _internalCommonJs.z)(buildTitle);
        this.nowManager = new CalendarNowManager();
        this.emitter = new (0, _internalCommonJs.F)();
        this.actionRunner = new TaskRunner(this._handleAction.bind(this), this.updateData.bind(this));
        this.currentCalendarOptionsInput = {};
        this.currentCalendarOptionsRefined = {};
        this.currentViewOptionsInput = {};
        this.currentViewOptionsRefined = {};
        this.currentCalendarOptionsRefiners = {};
        this.optionsForRefining = [];
        this.optionsForHandling = [];
        this.getCurrentData = ()=>this.data;
        this.dispatch = (action)=>{
            this.actionRunner.request(action); // protects against recursive calls to _handleAction
        };
        this.props = props;
        this.actionRunner.pause();
        this.nowManager = new CalendarNowManager();
        let dynamicOptionOverrides = {};
        let optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);
        let currentViewType = optionsData.calendarOptions.initialView || optionsData.pluginHooks.initialView;
        let currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);
        // wire things up
        // TODO: not DRY
        props.calendarApi.currentDataManager = this;
        this.emitter.setThisContext(props.calendarApi);
        this.emitter.setOptions(currentViewData.options);
        let calendarContext = {
            nowManager: this.nowManager,
            dateEnv: optionsData.dateEnv,
            options: optionsData.calendarOptions,
            pluginHooks: optionsData.pluginHooks,
            calendarApi: props.calendarApi,
            dispatch: this.dispatch,
            emitter: this.emitter,
            getCurrentData: this.getCurrentData
        };
        let currentDate = getInitialDate(optionsData.calendarOptions, optionsData.dateEnv, this.nowManager);
        let dateProfile = currentViewData.dateProfileGenerator.build(currentDate);
        if (!(0, _internalCommonJs.G)(dateProfile.activeRange, currentDate)) currentDate = dateProfile.currentRange.start;
        // needs to be after setThisContext
        for (let callback of optionsData.pluginHooks.contextInit)callback(calendarContext);
        // NOT DRY
        let eventSources = initEventSources(optionsData.calendarOptions, dateProfile, calendarContext);
        let initialState = {
            dynamicOptionOverrides,
            currentViewType,
            currentDate,
            dateProfile,
            businessHours: this.parseContextBusinessHours(calendarContext),
            eventSources,
            eventUiBases: {},
            eventStore: (0, _internalCommonJs.H)(),
            renderableEventStore: (0, _internalCommonJs.H)(),
            dateSelection: null,
            eventSelection: '',
            eventDrag: null,
            eventResize: null,
            selectionConfig: this.buildViewUiProps(calendarContext).selectionConfig
        };
        let contextAndState = Object.assign(Object.assign({}, calendarContext), initialState);
        for (let reducer of optionsData.pluginHooks.reducers)Object.assign(initialState, reducer(null, null, contextAndState));
        if (computeIsLoading(initialState, calendarContext)) this.emitter.trigger('loading', true); // NOT DRY
        this.state = initialState;
        this.updateData();
        this.actionRunner.resume();
    }
    resetOptions(optionOverrides, changedOptionNames) {
        let { props } = this;
        if (changedOptionNames === undefined) props.optionOverrides = optionOverrides;
        else {
            props.optionOverrides = Object.assign(Object.assign({}, props.optionOverrides || {}), optionOverrides);
            this.optionsForRefining.push(...changedOptionNames);
        }
        if (changedOptionNames === undefined || changedOptionNames.length) this.actionRunner.request({
            type: 'NOTHING'
        });
    }
    _handleAction(action) {
        let { props, state, emitter } = this;
        let dynamicOptionOverrides = reduceDynamicOptionOverrides(state.dynamicOptionOverrides, action);
        let optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);
        let currentViewType = reduceViewType(state.currentViewType, action);
        let currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);
        // wire things up
        // TODO: not DRY
        props.calendarApi.currentDataManager = this;
        emitter.setThisContext(props.calendarApi);
        emitter.setOptions(currentViewData.options);
        let calendarContext = {
            nowManager: this.nowManager,
            dateEnv: optionsData.dateEnv,
            options: optionsData.calendarOptions,
            pluginHooks: optionsData.pluginHooks,
            calendarApi: props.calendarApi,
            dispatch: this.dispatch,
            emitter,
            getCurrentData: this.getCurrentData
        };
        let { currentDate, dateProfile } = state;
        if (this.data && this.data.dateProfileGenerator !== currentViewData.dateProfileGenerator) dateProfile = currentViewData.dateProfileGenerator.build(currentDate);
        currentDate = reduceCurrentDate(currentDate, action);
        dateProfile = reduceDateProfile(dateProfile, action, currentDate, currentViewData.dateProfileGenerator);
        if (action.type === 'PREV' || // TODO: move this logic into DateProfileGenerator
        action.type === 'NEXT' || // "
        !(0, _internalCommonJs.G)(dateProfile.currentRange, currentDate)) currentDate = dateProfile.currentRange.start;
        let eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendarContext);
        let eventStore = (0, _internalCommonJs.I)(state.eventStore, action, eventSources, dateProfile, calendarContext);
        let isEventsLoading = computeEventSourcesLoading(eventSources); // BAD. also called in this func in computeIsLoading
        let renderableEventStore = isEventsLoading && !currentViewData.options.progressiveEventRendering ? state.renderableEventStore || eventStore : eventStore;
        let { eventUiSingleBase, selectionConfig } = this.buildViewUiProps(calendarContext); // will memoize obj
        let eventUiBySource = this.buildEventUiBySource(eventSources);
        let eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);
        let newState = {
            dynamicOptionOverrides,
            currentViewType,
            currentDate,
            dateProfile,
            eventSources,
            eventStore,
            renderableEventStore,
            selectionConfig,
            eventUiBases,
            businessHours: this.parseContextBusinessHours(calendarContext),
            dateSelection: reduceDateSelection(state.dateSelection, action),
            eventSelection: reduceSelectedEvent(state.eventSelection, action),
            eventDrag: reduceEventDrag(state.eventDrag, action),
            eventResize: reduceEventResize(state.eventResize, action)
        };
        let contextAndState = Object.assign(Object.assign({}, calendarContext), newState);
        for (let reducer of optionsData.pluginHooks.reducers)Object.assign(newState, reducer(state, action, contextAndState)); // give the OLD state, for old value
        let wasLoading = computeIsLoading(state, calendarContext);
        let isLoading = computeIsLoading(newState, calendarContext);
        // TODO: use propSetHandlers in plugin system
        if (!wasLoading && isLoading) emitter.trigger('loading', true);
        else if (wasLoading && !isLoading) emitter.trigger('loading', false);
        this.state = newState;
        if (props.onAction) props.onAction(action);
    }
    updateData() {
        let { props, state } = this;
        let oldData = this.data;
        let optionsData = this.computeOptionsData(props.optionOverrides, state.dynamicOptionOverrides, props.calendarApi);
        let currentViewData = this.computeCurrentViewData(state.currentViewType, optionsData, props.optionOverrides, state.dynamicOptionOverrides);
        let data = this.data = Object.assign(Object.assign(Object.assign({
            nowManager: this.nowManager,
            viewTitle: this.buildTitle(state.dateProfile, currentViewData.options, optionsData.dateEnv),
            calendarApi: props.calendarApi,
            dispatch: this.dispatch,
            emitter: this.emitter,
            getCurrentData: this.getCurrentData
        }, optionsData), currentViewData), state);
        let changeHandlers = optionsData.pluginHooks.optionChangeHandlers;
        let oldCalendarOptions = oldData && oldData.calendarOptions;
        let newCalendarOptions = optionsData.calendarOptions;
        if (oldCalendarOptions && oldCalendarOptions !== newCalendarOptions) {
            if (oldCalendarOptions.timeZone !== newCalendarOptions.timeZone) {
                // hack
                state.eventSources = data.eventSources = reduceEventSourcesNewTimeZone(data.eventSources, state.dateProfile, data);
                state.eventStore = data.eventStore = (0, _internalCommonJs.J)(data.eventStore, oldData.dateEnv, data.dateEnv);
                state.renderableEventStore = data.renderableEventStore = (0, _internalCommonJs.J)(data.renderableEventStore, oldData.dateEnv, data.dateEnv);
            }
            for(let optionName in changeHandlers)if (this.optionsForHandling.indexOf(optionName) !== -1 || oldCalendarOptions[optionName] !== newCalendarOptions[optionName]) changeHandlers[optionName](newCalendarOptions[optionName], data);
        }
        this.optionsForHandling = [];
        if (props.onData) props.onData(data);
    }
    computeOptionsData(optionOverrides, dynamicOptionOverrides, calendarApi) {
        // TODO: blacklist options that are handled by optionChangeHandlers
        if (!this.optionsForRefining.length && optionOverrides === this.stableOptionOverrides && dynamicOptionOverrides === this.stableDynamicOptionOverrides) return this.stableCalendarOptionsData;
        let { refinedOptions, pluginHooks, localeDefaults, availableLocaleData, extra } = this.processRawCalendarOptions(optionOverrides, dynamicOptionOverrides);
        warnUnknownOptions(extra);
        let dateEnv = this.buildDateEnv(refinedOptions.timeZone, refinedOptions.locale, refinedOptions.weekNumberCalculation, refinedOptions.firstDay, refinedOptions.weekText, pluginHooks, availableLocaleData, refinedOptions.defaultRangeSeparator);
        let viewSpecs = this.buildViewSpecs(pluginHooks.views, this.stableOptionOverrides, this.stableDynamicOptionOverrides, localeDefaults);
        let theme = this.buildTheme(refinedOptions, pluginHooks);
        let toolbarConfig = this.parseToolbars(refinedOptions, this.stableOptionOverrides, theme, viewSpecs, calendarApi);
        return this.stableCalendarOptionsData = {
            calendarOptions: refinedOptions,
            pluginHooks,
            dateEnv,
            viewSpecs,
            theme,
            toolbarConfig,
            localeDefaults,
            availableRawLocales: availableLocaleData.map
        };
    }
    // always called from behind a memoizer
    processRawCalendarOptions(optionOverrides, dynamicOptionOverrides) {
        let { locales, locale } = (0, _internalCommonJs.K)([
            (0, _internalCommonJs.e),
            optionOverrides,
            dynamicOptionOverrides
        ]);
        let availableLocaleData = this.organizeRawLocales(locales);
        let availableRawLocales = availableLocaleData.map;
        let localeDefaults = this.buildLocale(locale || availableLocaleData.defaultCode, availableRawLocales).options;
        let pluginHooks = this.buildPluginHooks(optionOverrides.plugins || [], globalPlugins);
        let refiners = this.currentCalendarOptionsRefiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0, _internalCommonJs.L)), (0, _internalCommonJs.M)), (0, _internalCommonJs.N)), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);
        let extra = {};
        let raw = (0, _internalCommonJs.K)([
            (0, _internalCommonJs.e),
            localeDefaults,
            optionOverrides,
            dynamicOptionOverrides
        ]);
        let refined = {};
        let currentRaw = this.currentCalendarOptionsInput;
        let currentRefined = this.currentCalendarOptionsRefined;
        let anyChanges = false;
        for(let optionName in raw){
            if (this.optionsForRefining.indexOf(optionName) === -1 && (raw[optionName] === currentRaw[optionName] || (0, _internalCommonJs.O)[optionName] && optionName in currentRaw && (0, _internalCommonJs.O)[optionName](currentRaw[optionName], raw[optionName]))) refined[optionName] = currentRefined[optionName];
            else if (refiners[optionName]) {
                refined[optionName] = refiners[optionName](raw[optionName]);
                anyChanges = true;
            } else extra[optionName] = currentRaw[optionName];
        }
        if (anyChanges) {
            this.currentCalendarOptionsInput = raw;
            this.currentCalendarOptionsRefined = refined;
            this.stableOptionOverrides = optionOverrides;
            this.stableDynamicOptionOverrides = dynamicOptionOverrides;
        }
        this.optionsForHandling.push(...this.optionsForRefining);
        this.optionsForRefining = [];
        return {
            rawOptions: this.currentCalendarOptionsInput,
            refinedOptions: this.currentCalendarOptionsRefined,
            pluginHooks,
            availableLocaleData,
            localeDefaults,
            extra
        };
    }
    _computeCurrentViewData(viewType, optionsData, optionOverrides, dynamicOptionOverrides) {
        let viewSpec = optionsData.viewSpecs[viewType];
        if (!viewSpec) throw new Error(`viewType "${viewType}" is not available. Please make sure you've loaded all neccessary plugins`);
        let { refinedOptions, extra } = this.processRawViewOptions(viewSpec, optionsData.pluginHooks, optionsData.localeDefaults, optionOverrides, dynamicOptionOverrides);
        warnUnknownOptions(extra);
        this.nowManager.handleInput(optionsData.dateEnv, refinedOptions.now);
        let dateProfileGenerator = this.buildDateProfileGenerator({
            dateProfileGeneratorClass: viewSpec.optionDefaults.dateProfileGeneratorClass,
            nowManager: this.nowManager,
            duration: viewSpec.duration,
            durationUnit: viewSpec.durationUnit,
            usesMinMaxTime: viewSpec.optionDefaults.usesMinMaxTime,
            dateEnv: optionsData.dateEnv,
            calendarApi: this.props.calendarApi,
            slotMinTime: refinedOptions.slotMinTime,
            slotMaxTime: refinedOptions.slotMaxTime,
            showNonCurrentDates: refinedOptions.showNonCurrentDates,
            dayCount: refinedOptions.dayCount,
            dateAlignment: refinedOptions.dateAlignment,
            dateIncrement: refinedOptions.dateIncrement,
            hiddenDays: refinedOptions.hiddenDays,
            weekends: refinedOptions.weekends,
            validRangeInput: refinedOptions.validRange,
            visibleRangeInput: refinedOptions.visibleRange,
            fixedWeekCount: refinedOptions.fixedWeekCount
        });
        let viewApi = this.buildViewApi(viewType, this.getCurrentData, optionsData.dateEnv);
        return {
            viewSpec,
            options: refinedOptions,
            dateProfileGenerator,
            viewApi
        };
    }
    processRawViewOptions(viewSpec, pluginHooks, localeDefaults, optionOverrides, dynamicOptionOverrides) {
        let raw = (0, _internalCommonJs.K)([
            (0, _internalCommonJs.e),
            viewSpec.optionDefaults,
            localeDefaults,
            optionOverrides,
            viewSpec.optionOverrides,
            dynamicOptionOverrides
        ]);
        let refiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0, _internalCommonJs.L)), (0, _internalCommonJs.M)), (0, _internalCommonJs.N)), (0, _internalCommonJs.P)), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);
        let refined = {};
        let currentRaw = this.currentViewOptionsInput;
        let currentRefined = this.currentViewOptionsRefined;
        let anyChanges = false;
        let extra = {};
        for(let optionName in raw)if (raw[optionName] === currentRaw[optionName] || (0, _internalCommonJs.O)[optionName] && (0, _internalCommonJs.O)[optionName](raw[optionName], currentRaw[optionName])) refined[optionName] = currentRefined[optionName];
        else {
            if (raw[optionName] === this.currentCalendarOptionsInput[optionName] || (0, _internalCommonJs.O)[optionName] && (0, _internalCommonJs.O)[optionName](raw[optionName], this.currentCalendarOptionsInput[optionName])) {
                if (optionName in this.currentCalendarOptionsRefined) refined[optionName] = this.currentCalendarOptionsRefined[optionName];
            } else if (refiners[optionName]) refined[optionName] = refiners[optionName](raw[optionName]);
            else extra[optionName] = raw[optionName];
            anyChanges = true;
        }
        if (anyChanges) {
            this.currentViewOptionsInput = raw;
            this.currentViewOptionsRefined = refined;
        }
        return {
            rawOptions: this.currentViewOptionsInput,
            refinedOptions: this.currentViewOptionsRefined,
            extra
        };
    }
}
function buildDateEnv$1(timeZone, explicitLocale, weekNumberCalculation, firstDay, weekText, pluginHooks, availableLocaleData, defaultSeparator) {
    let locale = buildLocale(explicitLocale || availableLocaleData.defaultCode, availableLocaleData.map);
    return new (0, _internalCommonJs.Q)({
        calendarSystem: 'gregory',
        timeZone,
        namedTimeZoneImpl: pluginHooks.namedTimeZonedImpl,
        locale,
        weekNumberCalculation,
        firstDay,
        weekText,
        cmdFormatter: pluginHooks.cmdFormatter,
        defaultSeparator
    });
}
function buildTheme(options, pluginHooks) {
    let ThemeClass = pluginHooks.themeClasses[options.themeSystem] || StandardTheme;
    return new ThemeClass(options);
}
function buildDateProfileGenerator(props) {
    let DateProfileGeneratorClass = props.dateProfileGeneratorClass || (0, _internalCommonJs.R);
    return new DateProfileGeneratorClass(props);
}
function buildViewApi(type, getCurrentData, dateEnv) {
    return new ViewImpl(type, getCurrentData, dateEnv);
}
function buildEventUiBySource(eventSources) {
    return (0, _internalCommonJs.a)(eventSources, (eventSource)=>eventSource.ui);
}
function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
    let eventUiBases = {
        '': eventUiSingleBase
    };
    for(let defId in eventDefs){
        let def = eventDefs[defId];
        if (def.sourceId && eventUiBySource[def.sourceId]) eventUiBases[defId] = eventUiBySource[def.sourceId];
    }
    return eventUiBases;
}
function buildViewUiProps(calendarContext) {
    let { options } = calendarContext;
    return {
        eventUiSingleBase: (0, _internalCommonJs.S)({
            display: options.eventDisplay,
            editable: options.editable,
            startEditable: options.eventStartEditable,
            durationEditable: options.eventDurationEditable,
            constraint: options.eventConstraint,
            overlap: typeof options.eventOverlap === 'boolean' ? options.eventOverlap : undefined,
            allow: options.eventAllow,
            backgroundColor: options.eventBackgroundColor,
            borderColor: options.eventBorderColor,
            textColor: options.eventTextColor,
            color: options.eventColor
        }, calendarContext),
        selectionConfig: (0, _internalCommonJs.S)({
            constraint: options.selectConstraint,
            overlap: typeof options.selectOverlap === 'boolean' ? options.selectOverlap : undefined,
            allow: options.selectAllow
        }, calendarContext)
    };
}
function computeIsLoading(state, context) {
    for (let isLoadingFunc of context.pluginHooks.isLoadingFuncs){
        if (isLoadingFunc(state)) return true;
    }
    return false;
}
function parseContextBusinessHours(calendarContext) {
    return (0, _internalCommonJs.U)(calendarContext.options.businessHours, calendarContext);
}
function warnUnknownOptions(options, viewName) {
    for(let optionName in options)console.warn(`Unknown option '${optionName}'` + (viewName ? ` for view '${viewName}'` : ''));
}
class ToolbarSection extends (0, _internalCommonJs.B) {
    render() {
        let children = this.props.widgetGroups.map((widgetGroup)=>this.renderWidgetGroup(widgetGroup));
        return (0, _preact.createElement)('div', {
            className: 'fc-toolbar-chunk'
        }, ...children);
    }
    renderWidgetGroup(widgetGroup) {
        let { props } = this;
        let { theme } = this.context;
        let children = [];
        let isOnlyButtons = true;
        for (let widget of widgetGroup){
            let { buttonName, buttonClick, buttonText, buttonIcon, buttonHint } = widget;
            if (buttonName === 'title') {
                isOnlyButtons = false;
                children.push((0, _preact.createElement)("h2", {
                    className: "fc-toolbar-title",
                    id: props.titleId
                }, props.title));
            } else {
                let isPressed = buttonName === props.activeButton;
                let isDisabled = !props.isTodayEnabled && buttonName === 'today' || !props.isPrevEnabled && buttonName === 'prev' || !props.isNextEnabled && buttonName === 'next';
                let buttonClasses = [
                    `fc-${buttonName}-button`,
                    theme.getClass('button')
                ];
                if (isPressed) buttonClasses.push(theme.getClass('buttonActive'));
                children.push((0, _preact.createElement)("button", {
                    type: "button",
                    title: typeof buttonHint === 'function' ? buttonHint(props.navUnit) : buttonHint,
                    disabled: isDisabled,
                    "aria-pressed": isPressed,
                    className: buttonClasses.join(' '),
                    onClick: buttonClick
                }, buttonText || (buttonIcon ? (0, _preact.createElement)("span", {
                    className: buttonIcon,
                    role: "img"
                }) : '')));
            }
        }
        if (children.length > 1) {
            let groupClassName = isOnlyButtons && theme.getClass('buttonGroup') || '';
            return (0, _preact.createElement)('div', {
                className: groupClassName
            }, ...children);
        }
        return children[0];
    }
}
class Toolbar extends (0, _internalCommonJs.B) {
    render() {
        let { model, extraClassName } = this.props;
        let forceLtr = false;
        let startContent;
        let endContent;
        let sectionWidgets = model.sectionWidgets;
        let centerContent = sectionWidgets.center;
        if (sectionWidgets.left) {
            forceLtr = true;
            startContent = sectionWidgets.left;
        } else startContent = sectionWidgets.start;
        if (sectionWidgets.right) {
            forceLtr = true;
            endContent = sectionWidgets.right;
        } else endContent = sectionWidgets.end;
        let classNames = [
            extraClassName || '',
            'fc-toolbar',
            forceLtr ? 'fc-toolbar-ltr' : ''
        ];
        return (0, _preact.createElement)("div", {
            className: classNames.join(' ')
        }, this.renderSection('start', startContent || []), this.renderSection('center', centerContent || []), this.renderSection('end', endContent || []));
    }
    renderSection(key, widgetGroups) {
        let { props } = this;
        return (0, _preact.createElement)(ToolbarSection, {
            key: key,
            widgetGroups: widgetGroups,
            title: props.title,
            navUnit: props.navUnit,
            activeButton: props.activeButton,
            isTodayEnabled: props.isTodayEnabled,
            isPrevEnabled: props.isPrevEnabled,
            isNextEnabled: props.isNextEnabled,
            titleId: props.titleId
        });
    }
}
class ViewHarness extends (0, _internalCommonJs.B) {
    constructor(){
        super(...arguments);
        this.state = {
            availableWidth: null
        };
        this.handleEl = (el)=>{
            this.el = el;
            (0, _internalCommonJs.W)(this.props.elRef, el);
            this.updateAvailableWidth();
        };
        this.handleResize = ()=>{
            this.updateAvailableWidth();
        };
    }
    render() {
        let { props, state } = this;
        let { aspectRatio } = props;
        let classNames = [
            'fc-view-harness',
            aspectRatio || props.liquid || props.height ? 'fc-view-harness-active' // harness controls the height
             : 'fc-view-harness-passive'
        ];
        let height = '';
        let paddingBottom = '';
        if (aspectRatio) {
            if (state.availableWidth !== null) height = state.availableWidth / aspectRatio;
            else // while waiting to know availableWidth, we can't set height to *zero*
            // because will cause lots of unnecessary scrollbars within scrollgrid.
            // BETTER: don't start rendering ANYTHING yet until we know container width
            // NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)
            paddingBottom = `${1 / aspectRatio * 100}%`;
        } else height = props.height || '';
        return (0, _preact.createElement)("div", {
            "aria-labelledby": props.labeledById,
            ref: this.handleEl,
            className: classNames.join(' '),
            style: {
                height,
                paddingBottom
            }
        }, props.children);
    }
    componentDidMount() {
        this.context.addResizeHandler(this.handleResize);
    }
    componentWillUnmount() {
        this.context.removeResizeHandler(this.handleResize);
    }
    updateAvailableWidth() {
        if (this.el && // needed. but why?
        this.props.aspectRatio // aspectRatio is the only height setting that needs availableWidth
        ) this.setState({
            availableWidth: this.el.offsetWidth
        });
    }
}
/*
Detects when the user clicks on an event within a DateComponent
*/ class EventClicking extends (0, _internalCommonJs.X) {
    constructor(settings){
        super(settings);
        this.handleSegClick = (ev, segEl)=>{
            let { component } = this;
            let { context } = component;
            let seg = (0, _internalCommonJs.Y)(segEl);
            if (seg && // might be the <div> surrounding the more link
            component.isValidSegDownEl(ev.target)) {
                // our way to simulate a link click for elements that can't be <a> tags
                // grab before trigger fired in case trigger trashes DOM thru rerendering
                let hasUrlContainer = (0, _internalCommonJs.Z)(ev.target, '.fc-event-forced-url');
                let url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
                context.emitter.trigger('eventClick', {
                    el: segEl,
                    event: new (0, _internalCommonJs._)(component.context, seg.eventRange.def, seg.eventRange.instance),
                    jsEvent: ev,
                    view: context.viewApi
                });
                if (url && !ev.defaultPrevented) window.location.href = url;
            }
        };
        this.destroy = (0, _internalCommonJs.$)(settings.el, 'click', '.fc-event', this.handleSegClick);
    }
}
/*
Triggers events and adds/removes core classNames when the user's pointer
enters/leaves event-elements of a component.
*/ class EventHovering extends (0, _internalCommonJs.X) {
    constructor(settings){
        super(settings);
        // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it
        this.handleEventElRemove = (el)=>{
            if (el === this.currentSegEl) this.handleSegLeave(null, this.currentSegEl);
        };
        this.handleSegEnter = (ev, segEl)=>{
            if ((0, _internalCommonJs.Y)(segEl)) {
                this.currentSegEl = segEl;
                this.triggerEvent('eventMouseEnter', ev, segEl);
            }
        };
        this.handleSegLeave = (ev, segEl)=>{
            if (this.currentSegEl) {
                this.currentSegEl = null;
                this.triggerEvent('eventMouseLeave', ev, segEl);
            }
        };
        this.removeHoverListeners = (0, _internalCommonJs.a0)(settings.el, '.fc-event', this.handleSegEnter, this.handleSegLeave);
    }
    destroy() {
        this.removeHoverListeners();
    }
    triggerEvent(publicEvName, ev, segEl) {
        let { component } = this;
        let { context } = component;
        let seg = (0, _internalCommonJs.Y)(segEl);
        if (!ev || component.isValidSegDownEl(ev.target)) context.emitter.trigger(publicEvName, {
            el: segEl,
            event: new (0, _internalCommonJs._)(context, seg.eventRange.def, seg.eventRange.instance),
            jsEvent: ev,
            view: context.viewApi
        });
    }
}
class CalendarContent extends (0, _internalCommonJs.a1) {
    constructor(){
        super(...arguments);
        this.buildViewContext = (0, _internalCommonJs.z)((0, _internalCommonJs.a2));
        this.buildViewPropTransformers = (0, _internalCommonJs.z)(buildViewPropTransformers);
        this.buildToolbarProps = (0, _internalCommonJs.z)(buildToolbarProps);
        this.headerRef = (0, _preact.createRef)();
        this.footerRef = (0, _preact.createRef)();
        this.interactionsStore = {};
        // eslint-disable-next-line
        this.state = {
            viewLabelId: (0, _internalCommonJs.a3)()
        };
        // Component Registration
        // -----------------------------------------------------------------------------------------------------------------
        this.registerInteractiveComponent = (component, settingsInput)=>{
            let settings = (0, _internalCommonJs.a4)(component, settingsInput);
            let DEFAULT_INTERACTIONS = [
                EventClicking,
                EventHovering
            ];
            let interactionClasses = DEFAULT_INTERACTIONS.concat(this.props.pluginHooks.componentInteractions);
            let interactions = interactionClasses.map((TheInteractionClass)=>new TheInteractionClass(settings));
            this.interactionsStore[component.uid] = interactions;
            (0, _internalCommonJs.a5)[component.uid] = settings;
        };
        this.unregisterInteractiveComponent = (component)=>{
            let listeners = this.interactionsStore[component.uid];
            if (listeners) {
                for (let listener of listeners)listener.destroy();
                delete this.interactionsStore[component.uid];
            }
            delete (0, _internalCommonJs.a5)[component.uid];
        };
        // Resizing
        // -----------------------------------------------------------------------------------------------------------------
        this.resizeRunner = new (0, _internalCommonJs.D)(()=>{
            this.props.emitter.trigger('_resize', true); // should window resizes be considered "forced" ?
            this.props.emitter.trigger('windowResize', {
                view: this.props.viewApi
            });
        });
        this.handleWindowResize = (ev)=>{
            let { options } = this.props;
            if (options.handleWindowResize && ev.target === window // avoid jqui events
            ) this.resizeRunner.request(options.windowResizeDelay);
        };
    }
    /*
    renders INSIDE of an outer div
    */ render() {
        let { props } = this;
        let { toolbarConfig, options } = props;
        let viewVGrow = false;
        let viewHeight = '';
        let viewAspectRatio;
        if (props.isHeightAuto || props.forPrint) viewHeight = '';
        else if (options.height != null) viewVGrow = true;
        else if (options.contentHeight != null) viewHeight = options.contentHeight;
        else viewAspectRatio = Math.max(options.aspectRatio, 0.5); // prevent from getting too tall
        let viewContext = this.buildViewContext(props.viewSpec, props.viewApi, props.options, props.dateProfileGenerator, props.dateEnv, props.nowManager, props.theme, props.pluginHooks, props.dispatch, props.getCurrentData, props.emitter, props.calendarApi, this.registerInteractiveComponent, this.unregisterInteractiveComponent);
        let viewLabelId = toolbarConfig.header && toolbarConfig.header.hasTitle ? this.state.viewLabelId : undefined;
        return (0, _preact.createElement)((0, _internalCommonJs.V).Provider, {
            value: viewContext
        }, (0, _preact.createElement)((0, _internalCommonJs.a6), {
            unit: "day"
        }, (nowDate)=>{
            let toolbarProps = this.buildToolbarProps(props.viewSpec, props.dateProfile, props.dateProfileGenerator, props.currentDate, nowDate, props.viewTitle);
            return (0, _preact.createElement)((0, _preact.Fragment), null, toolbarConfig.header && (0, _preact.createElement)(Toolbar, Object.assign({
                ref: this.headerRef,
                extraClassName: "fc-header-toolbar",
                model: toolbarConfig.header,
                titleId: viewLabelId
            }, toolbarProps)), (0, _preact.createElement)(ViewHarness, {
                liquid: viewVGrow,
                height: viewHeight,
                aspectRatio: viewAspectRatio,
                labeledById: viewLabelId
            }, this.renderView(props), this.buildAppendContent()), toolbarConfig.footer && (0, _preact.createElement)(Toolbar, Object.assign({
                ref: this.footerRef,
                extraClassName: "fc-footer-toolbar",
                model: toolbarConfig.footer,
                titleId: ""
            }, toolbarProps)));
        }));
    }
    componentDidMount() {
        let { props } = this;
        this.calendarInteractions = props.pluginHooks.calendarInteractions.map((CalendarInteractionClass)=>new CalendarInteractionClass(props));
        window.addEventListener('resize', this.handleWindowResize);
        let { propSetHandlers } = props.pluginHooks;
        for(let propName in propSetHandlers)propSetHandlers[propName](props[propName], props);
    }
    componentDidUpdate(prevProps) {
        let { props } = this;
        let { propSetHandlers } = props.pluginHooks;
        for(let propName in propSetHandlers)if (props[propName] !== prevProps[propName]) propSetHandlers[propName](props[propName], props);
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.handleWindowResize);
        this.resizeRunner.clear();
        for (let interaction of this.calendarInteractions)interaction.destroy();
        this.props.emitter.trigger('_unmount');
    }
    buildAppendContent() {
        let { props } = this;
        let children = props.pluginHooks.viewContainerAppends.map((buildAppendContent)=>buildAppendContent(props));
        return (0, _preact.createElement)((0, _preact.Fragment), {}, ...children);
    }
    renderView(props) {
        let { pluginHooks } = props;
        let { viewSpec } = props;
        let viewProps = {
            dateProfile: props.dateProfile,
            businessHours: props.businessHours,
            eventStore: props.renderableEventStore,
            eventUiBases: props.eventUiBases,
            dateSelection: props.dateSelection,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            isHeightAuto: props.isHeightAuto,
            forPrint: props.forPrint
        };
        let transformers = this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);
        for (let transformer of transformers)Object.assign(viewProps, transformer.transform(viewProps, props));
        let ViewComponent = viewSpec.component;
        return (0, _preact.createElement)(ViewComponent, Object.assign({}, viewProps));
    }
}
function buildToolbarProps(viewSpec, dateProfile, dateProfileGenerator, currentDate, now, title) {
    // don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid
    let todayInfo = dateProfileGenerator.build(now, undefined, false); // TODO: need `undefined` or else INFINITE LOOP for some reason
    let prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate, false);
    let nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate, false);
    return {
        title,
        activeButton: viewSpec.type,
        navUnit: viewSpec.singleUnit,
        isTodayEnabled: todayInfo.isValid && !(0, _internalCommonJs.G)(dateProfile.currentRange, now),
        isPrevEnabled: prevInfo.isValid,
        isNextEnabled: nextInfo.isValid
    };
}
// Plugin
// -----------------------------------------------------------------------------------------------------------------
function buildViewPropTransformers(theClasses) {
    return theClasses.map((TheClass)=>new TheClass());
}
class Calendar extends (0, _internalCommonJs.a7) {
    constructor(el, optionOverrides = {}){
        super();
        this.isRendering = false;
        this.isRendered = false;
        this.currentClassNames = [];
        this.customContentRenderId = 0;
        this.handleAction = (action)=>{
            // actions we know we want to render immediately
            switch(action.type){
                case 'SET_EVENT_DRAG':
                case 'SET_EVENT_RESIZE':
                    this.renderRunner.tryDrain();
            }
        };
        this.handleData = (data)=>{
            this.currentData = data;
            this.renderRunner.request(data.calendarOptions.rerenderDelay);
        };
        this.handleRenderRequest = ()=>{
            if (this.isRendering) {
                this.isRendered = true;
                let { currentData } = this;
                (0, _internalCommonJs.a8)(()=>{
                    (0, _preact.render)((0, _preact.createElement)((0, _internalCommonJs.a9), {
                        options: currentData.calendarOptions,
                        theme: currentData.theme,
                        emitter: currentData.emitter
                    }, (classNames, height, isHeightAuto, forPrint)=>{
                        this.setClassNames(classNames);
                        this.setHeight(height);
                        return (0, _preact.createElement)((0, _internalCommonJs.aa).Provider, {
                            value: this.customContentRenderId
                        }, (0, _preact.createElement)(CalendarContent, Object.assign({
                            isHeightAuto: isHeightAuto,
                            forPrint: forPrint
                        }, currentData)));
                    }), this.el);
                });
            } else if (this.isRendered) {
                this.isRendered = false;
                (0, _preact.render)(null, this.el);
                this.setClassNames([]);
                this.setHeight('');
            }
        };
        (0, _internalCommonJs.ab)(el);
        this.el = el;
        this.renderRunner = new (0, _internalCommonJs.D)(this.handleRenderRequest);
        new CalendarDataManager({
            optionOverrides,
            calendarApi: this,
            onAction: this.handleAction,
            onData: this.handleData
        });
    }
    render() {
        let wasRendering = this.isRendering;
        if (!wasRendering) this.isRendering = true;
        else this.customContentRenderId += 1;
        this.renderRunner.request();
        if (wasRendering) this.updateSize();
    }
    destroy() {
        if (this.isRendering) {
            this.isRendering = false;
            this.renderRunner.request();
        }
    }
    updateSize() {
        (0, _internalCommonJs.a8)(()=>{
            super.updateSize();
        });
    }
    batchRendering(func) {
        this.renderRunner.pause('batchRendering');
        func();
        this.renderRunner.resume('batchRendering');
    }
    pauseRendering() {
        this.renderRunner.pause('pauseRendering');
    }
    resumeRendering() {
        this.renderRunner.resume('pauseRendering', true);
    }
    resetOptions(optionOverrides, changedOptionNames) {
        this.currentDataManager.resetOptions(optionOverrides, changedOptionNames);
    }
    setClassNames(classNames) {
        if (!(0, _internalCommonJs.i)(classNames, this.currentClassNames)) {
            let { classList } = this.el;
            for (let className of this.currentClassNames)classList.remove(className);
            for (let className of classNames)classList.add(className);
            this.currentClassNames = classNames;
        }
    }
    setHeight(height) {
        (0, _internalCommonJs.ac)(this.el, 'height', height);
    }
}
function formatDate(dateInput, options = {}) {
    let dateEnv = buildDateEnv(options);
    let formatter = (0, _internalCommonJs.x)(options);
    let dateMeta = dateEnv.createMarkerMeta(dateInput);
    if (!dateMeta) return '';
    return dateEnv.format(dateMeta.marker, formatter, {
        forcedTzo: dateMeta.forcedTzo
    });
}
function formatRange(startInput, endInput, options) {
    let dateEnv = buildDateEnv(typeof options === 'object' && options ? options : {}); // pass in if non-null object
    let formatter = (0, _internalCommonJs.x)(options);
    let startMeta = dateEnv.createMarkerMeta(startInput);
    let endMeta = dateEnv.createMarkerMeta(endInput);
    if (!startMeta || !endMeta) return '';
    return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {
        forcedStartTzo: startMeta.forcedTzo,
        forcedEndTzo: endMeta.forcedTzo,
        isEndExclusive: options.isEndExclusive,
        defaultSeparator: (0, _internalCommonJs.e).defaultRangeSeparator
    });
}
// TODO: more DRY and optimized
function buildDateEnv(settings) {
    let locale = buildLocale(settings.locale || 'en', organizeRawLocales([]).map); // TODO: don't hardcode 'en' everywhere
    return new (0, _internalCommonJs.Q)(Object.assign(Object.assign({
        timeZone: (0, _internalCommonJs.e).timeZone,
        calendarSystem: 'gregory'
    }, settings), {
        locale
    }));
}
// HELPERS
/*
if nextDayThreshold is specified, slicing is done in an all-day fashion.
you can get nextDayThreshold from context.nextDayThreshold
*/ function sliceEvents(props, allDay) {
    return (0, _internalCommonJs.ad)(props.eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? props.nextDayThreshold : null).fg;
}
const version = '6.1.17';

},{"./internal-common.js":"11UwQ","preact":"f5XJc","preact/compat":"g8qRV","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"11UwQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>listenBySelector);
parcelHelpers.export(exports, "A", ()=>memoizeObjArg);
parcelHelpers.export(exports, "B", ()=>BaseComponent);
parcelHelpers.export(exports, "C", ()=>ContentContainer);
parcelHelpers.export(exports, "D", ()=>DelayedRunner);
parcelHelpers.export(exports, "E", ()=>isPropsEqual);
parcelHelpers.export(exports, "F", ()=>Emitter);
parcelHelpers.export(exports, "G", ()=>rangeContainsMarker);
parcelHelpers.export(exports, "H", ()=>createEmptyEventStore);
parcelHelpers.export(exports, "I", ()=>reduceEventStore);
parcelHelpers.export(exports, "J", ()=>rezoneEventStoreDates);
parcelHelpers.export(exports, "K", ()=>mergeRawOptions);
parcelHelpers.export(exports, "L", ()=>BASE_OPTION_REFINERS);
parcelHelpers.export(exports, "M", ()=>CALENDAR_LISTENER_REFINERS);
parcelHelpers.export(exports, "N", ()=>CALENDAR_OPTION_REFINERS);
parcelHelpers.export(exports, "O", ()=>COMPLEX_OPTION_COMPARATORS);
parcelHelpers.export(exports, "P", ()=>VIEW_OPTION_REFINERS);
parcelHelpers.export(exports, "Q", ()=>DateEnv);
parcelHelpers.export(exports, "R", ()=>DateProfileGenerator);
parcelHelpers.export(exports, "S", ()=>createEventUi);
parcelHelpers.export(exports, "T", ()=>Theme);
parcelHelpers.export(exports, "U", ()=>parseBusinessHours);
parcelHelpers.export(exports, "V", ()=>ViewContextType);
parcelHelpers.export(exports, "W", ()=>setRef);
parcelHelpers.export(exports, "X", ()=>Interaction);
parcelHelpers.export(exports, "Y", ()=>getElSeg);
parcelHelpers.export(exports, "Z", ()=>elementClosest);
parcelHelpers.export(exports, "_", ()=>EventImpl);
parcelHelpers.export(exports, "a", ()=>mapHash);
parcelHelpers.export(exports, "a$", ()=>preventDefault);
parcelHelpers.export(exports, "a0", ()=>listenToHoverBySelector);
parcelHelpers.export(exports, "a1", ()=>PureComponent);
parcelHelpers.export(exports, "a2", ()=>buildViewContext);
parcelHelpers.export(exports, "a3", ()=>getUniqueDomId);
parcelHelpers.export(exports, "a4", ()=>parseInteractionSettings);
parcelHelpers.export(exports, "a5", ()=>interactionSettingsStore);
parcelHelpers.export(exports, "a6", ()=>NowTimer);
parcelHelpers.export(exports, "a7", ()=>CalendarImpl);
parcelHelpers.export(exports, "a8", ()=>flushSync);
parcelHelpers.export(exports, "a9", ()=>CalendarRoot);
parcelHelpers.export(exports, "aA", ()=>memoizeArraylike);
parcelHelpers.export(exports, "aB", ()=>memoizeHashlike);
parcelHelpers.export(exports, "aC", ()=>intersectRects);
parcelHelpers.export(exports, "aD", ()=>pointInsideRect);
parcelHelpers.export(exports, "aE", ()=>constrainPoint);
parcelHelpers.export(exports, "aF", ()=>getRectCenter);
parcelHelpers.export(exports, "aG", ()=>diffPoints);
parcelHelpers.export(exports, "aH", ()=>translateRect);
parcelHelpers.export(exports, "aI", ()=>compareObjs);
parcelHelpers.export(exports, "aJ", ()=>collectFromHash);
parcelHelpers.export(exports, "aK", ()=>findElements);
parcelHelpers.export(exports, "aL", ()=>findDirectChildren);
parcelHelpers.export(exports, "aM", ()=>removeElement);
parcelHelpers.export(exports, "aN", ()=>applyStyle);
parcelHelpers.export(exports, "aO", ()=>elementMatches);
parcelHelpers.export(exports, "aP", ()=>getEventTargetViaRoot);
parcelHelpers.export(exports, "aQ", ()=>parseClassNames);
parcelHelpers.export(exports, "aR", ()=>getCanVGrowWithinCell);
parcelHelpers.export(exports, "aS", ()=>mergeEventStores);
parcelHelpers.export(exports, "aT", ()=>getRelevantEvents);
parcelHelpers.export(exports, "aU", ()=>eventTupleToStore);
parcelHelpers.export(exports, "aV", ()=>combineEventUis);
parcelHelpers.export(exports, "aW", ()=>Splitter);
parcelHelpers.export(exports, "aX", ()=>getDayClassNames);
parcelHelpers.export(exports, "aY", ()=>getDateMeta);
parcelHelpers.export(exports, "aZ", ()=>getSlotClassNames);
parcelHelpers.export(exports, "a_", ()=>buildNavLinkAttrs);
parcelHelpers.export(exports, "aa", ()=>RenderId);
parcelHelpers.export(exports, "ab", ()=>ensureElHasStyles);
parcelHelpers.export(exports, "ac", ()=>applyStyleProp);
parcelHelpers.export(exports, "ad", ()=>sliceEventStore);
parcelHelpers.export(exports, "ae", ()=>JsonRequestError);
parcelHelpers.export(exports, "af", ()=>createContext);
parcelHelpers.export(exports, "ag", ()=>refineProps);
parcelHelpers.export(exports, "ah", ()=>createEventInstance);
parcelHelpers.export(exports, "ai", ()=>parseEventDef);
parcelHelpers.export(exports, "aj", ()=>refineEventDef);
parcelHelpers.export(exports, "ak", ()=>padStart);
parcelHelpers.export(exports, "al", ()=>isInt);
parcelHelpers.export(exports, "am", ()=>parseFieldSpecs);
parcelHelpers.export(exports, "an", ()=>compareByFieldSpecs);
parcelHelpers.export(exports, "ao", ()=>flexibleCompare);
parcelHelpers.export(exports, "ap", ()=>preventSelection);
parcelHelpers.export(exports, "aq", ()=>allowSelection);
parcelHelpers.export(exports, "ar", ()=>preventContextMenu);
parcelHelpers.export(exports, "as", ()=>allowContextMenu);
parcelHelpers.export(exports, "at", ()=>compareNumbers);
parcelHelpers.export(exports, "au", ()=>enableCursor);
parcelHelpers.export(exports, "av", ()=>disableCursor);
parcelHelpers.export(exports, "aw", ()=>computeVisibleDayRange);
parcelHelpers.export(exports, "ax", ()=>isMultiDayRange);
parcelHelpers.export(exports, "ay", ()=>diffDates);
parcelHelpers.export(exports, "az", ()=>removeExact);
parcelHelpers.export(exports, "b", ()=>buildViewClassNames);
parcelHelpers.export(exports, "b$", ()=>renderMicroColGroup);
parcelHelpers.export(exports, "b0", ()=>whenTransitionDone);
parcelHelpers.export(exports, "b1", ()=>computeInnerRect);
parcelHelpers.export(exports, "b2", ()=>computeEdges);
parcelHelpers.export(exports, "b3", ()=>getClippingParents);
parcelHelpers.export(exports, "b4", ()=>computeRect);
parcelHelpers.export(exports, "b5", ()=>rangesEqual);
parcelHelpers.export(exports, "b6", ()=>rangesIntersect);
parcelHelpers.export(exports, "b7", ()=>rangeContainsRange);
parcelHelpers.export(exports, "b8", ()=>PositionCache);
parcelHelpers.export(exports, "b9", ()=>ScrollController);
parcelHelpers.export(exports, "bA", ()=>getEntrySpanEnd);
parcelHelpers.export(exports, "bB", ()=>binarySearch);
parcelHelpers.export(exports, "bC", ()=>groupIntersectingEntries);
parcelHelpers.export(exports, "bD", ()=>intersectSpans);
parcelHelpers.export(exports, "bE", ()=>interactionSettingsToStore);
parcelHelpers.export(exports, "bF", ()=>ElementDragging);
parcelHelpers.export(exports, "bG", ()=>config);
parcelHelpers.export(exports, "bH", ()=>parseDragMeta);
parcelHelpers.export(exports, "bI", ()=>DayHeader);
parcelHelpers.export(exports, "bJ", ()=>computeFallbackHeaderFormat);
parcelHelpers.export(exports, "bK", ()=>TableDateCell);
parcelHelpers.export(exports, "bL", ()=>TableDowCell);
parcelHelpers.export(exports, "bM", ()=>DaySeriesModel);
parcelHelpers.export(exports, "bN", ()=>hasBgRendering);
parcelHelpers.export(exports, "bO", ()=>buildSegTimeText);
parcelHelpers.export(exports, "bP", ()=>sortEventSegs);
parcelHelpers.export(exports, "bQ", ()=>getSegMeta);
parcelHelpers.export(exports, "bR", ()=>buildEventRangeKey);
parcelHelpers.export(exports, "bS", ()=>getSegAnchorAttrs);
parcelHelpers.export(exports, "bT", ()=>DayTableModel);
parcelHelpers.export(exports, "bU", ()=>Slicer);
parcelHelpers.export(exports, "bV", ()=>applyMutationToEventStore);
parcelHelpers.export(exports, "bW", ()=>isPropsValid);
parcelHelpers.export(exports, "bX", ()=>isInteractionValid);
parcelHelpers.export(exports, "bY", ()=>isDateSelectionValid);
parcelHelpers.export(exports, "bZ", ()=>SimpleScrollGrid);
parcelHelpers.export(exports, "b_", ()=>hasShrinkWidth);
parcelHelpers.export(exports, "ba", ()=>ElementScrollController);
parcelHelpers.export(exports, "bb", ()=>WindowScrollController);
parcelHelpers.export(exports, "bc", ()=>DateComponent);
parcelHelpers.export(exports, "bd", ()=>isDateSpansEqual);
parcelHelpers.export(exports, "be", ()=>addMs);
parcelHelpers.export(exports, "bf", ()=>addWeeks);
parcelHelpers.export(exports, "bg", ()=>diffWeeks);
parcelHelpers.export(exports, "bh", ()=>diffWholeWeeks);
parcelHelpers.export(exports, "bi", ()=>diffDayAndTime);
parcelHelpers.export(exports, "bj", ()=>diffDays);
parcelHelpers.export(exports, "bk", ()=>isValidDate);
parcelHelpers.export(exports, "bl", ()=>asCleanDays);
parcelHelpers.export(exports, "bm", ()=>multiplyDuration);
parcelHelpers.export(exports, "bn", ()=>addDurations);
parcelHelpers.export(exports, "bo", ()=>asRoughMinutes);
parcelHelpers.export(exports, "bp", ()=>asRoughSeconds);
parcelHelpers.export(exports, "bq", ()=>asRoughMs);
parcelHelpers.export(exports, "br", ()=>wholeDivideDurations);
parcelHelpers.export(exports, "bs", ()=>formatIsoTimeString);
parcelHelpers.export(exports, "bt", ()=>formatDayString);
parcelHelpers.export(exports, "bu", ()=>buildIsoString);
parcelHelpers.export(exports, "bv", ()=>formatIsoMonthStr);
parcelHelpers.export(exports, "bw", ()=>NamedTimeZoneImpl);
parcelHelpers.export(exports, "bx", ()=>parse);
parcelHelpers.export(exports, "by", ()=>SegHierarchy);
parcelHelpers.export(exports, "bz", ()=>buildEntryKey);
parcelHelpers.export(exports, "c", ()=>greatestDurationDenominator);
parcelHelpers.export(exports, "c0", ()=>getScrollGridClassNames);
parcelHelpers.export(exports, "c1", ()=>getSectionClassNames);
parcelHelpers.export(exports, "c2", ()=>getSectionHasLiquidHeight);
parcelHelpers.export(exports, "c3", ()=>getAllowYScrolling);
parcelHelpers.export(exports, "c4", ()=>renderChunkContent);
parcelHelpers.export(exports, "c5", ()=>computeShrinkWidth);
parcelHelpers.export(exports, "c6", ()=>sanitizeShrinkWidth);
parcelHelpers.export(exports, "c7", ()=>isColPropsEqual);
parcelHelpers.export(exports, "c8", ()=>renderScrollShim);
parcelHelpers.export(exports, "c9", ()=>getStickyFooterScrollbar);
parcelHelpers.export(exports, "ca", ()=>getStickyHeaderDates);
parcelHelpers.export(exports, "cb", ()=>Scroller);
parcelHelpers.export(exports, "cc", ()=>getScrollbarWidths);
parcelHelpers.export(exports, "cd", ()=>RefMap);
parcelHelpers.export(exports, "ce", ()=>getIsRtlScrollbarOnLeft);
parcelHelpers.export(exports, "cf", ()=>ScrollResponder);
parcelHelpers.export(exports, "cg", ()=>StandardEvent);
parcelHelpers.export(exports, "ch", ()=>NowIndicatorContainer);
parcelHelpers.export(exports, "ci", ()=>DayCellContainer);
parcelHelpers.export(exports, "cj", ()=>hasCustomDayCellContent);
parcelHelpers.export(exports, "ck", ()=>EventContainer);
parcelHelpers.export(exports, "cl", ()=>renderFill);
parcelHelpers.export(exports, "cm", ()=>BgEvent);
parcelHelpers.export(exports, "cn", ()=>WeekNumberContainer);
parcelHelpers.export(exports, "co", ()=>MoreLinkContainer);
parcelHelpers.export(exports, "cp", ()=>computeEarliestSegStart);
parcelHelpers.export(exports, "cq", ()=>ViewContainer);
parcelHelpers.export(exports, "cr", ()=>triggerDateSelect);
parcelHelpers.export(exports, "cs", ()=>getDefaultEventEnd);
parcelHelpers.export(exports, "ct", ()=>injectStyles);
parcelHelpers.export(exports, "cu", ()=>buildElAttrs);
parcelHelpers.export(exports, "cv", ()=>CustomRenderingStore);
parcelHelpers.export(exports, "d", ()=>createDuration);
parcelHelpers.export(exports, "e", ()=>BASE_OPTION_DEFAULTS);
parcelHelpers.export(exports, "f", ()=>arrayToHash);
parcelHelpers.export(exports, "g", ()=>guid);
parcelHelpers.export(exports, "h", ()=>filterHash);
parcelHelpers.export(exports, "i", ()=>isArraysEqual);
parcelHelpers.export(exports, "j", ()=>buildEventSourceRefiners);
parcelHelpers.export(exports, "k", ()=>formatWithOrdinals);
parcelHelpers.export(exports, "l", ()=>buildRangeApiWithTimeZone);
parcelHelpers.export(exports, "m", ()=>mergeProps);
parcelHelpers.export(exports, "n", ()=>identity);
parcelHelpers.export(exports, "o", ()=>intersectRanges);
parcelHelpers.export(exports, "p", ()=>parseEventSource);
parcelHelpers.export(exports, "q", ()=>startOfDay);
parcelHelpers.export(exports, "r", ()=>requestJson);
parcelHelpers.export(exports, "s", ()=>subtractDurations);
parcelHelpers.export(exports, "t", ()=>addDays);
parcelHelpers.export(exports, "u", ()=>unpromisify);
parcelHelpers.export(exports, "v", ()=>hashValuesToArray);
parcelHelpers.export(exports, "w", ()=>buildEventApis);
parcelHelpers.export(exports, "x", ()=>createFormatter);
parcelHelpers.export(exports, "y", ()=>diffWholeDays);
parcelHelpers.export(exports, "z", ()=>memoize);
var _preact = require("preact");
var _compat = require("preact/compat");
const styleTexts = [];
const styleEls = new Map();
function injectStyles(styleText) {
    styleTexts.push(styleText);
    styleEls.forEach((styleEl)=>{
        appendStylesTo(styleEl, styleText);
    });
}
function ensureElHasStyles(el) {
    if (el.isConnected && // sometimes true if SSR system simulates DOM
    el.getRootNode // sometimes undefined if SSR system simulates DOM
    ) registerStylesRoot(el.getRootNode());
}
function registerStylesRoot(rootNode) {
    let styleEl = styleEls.get(rootNode);
    if (!styleEl || !styleEl.isConnected) {
        styleEl = rootNode.querySelector('style[data-fullcalendar]');
        if (!styleEl) {
            styleEl = document.createElement('style');
            styleEl.setAttribute('data-fullcalendar', '');
            const nonce = getNonceValue();
            if (nonce) styleEl.nonce = nonce;
            const parentEl = rootNode === document ? document.head : rootNode;
            const insertBefore = rootNode === document ? parentEl.querySelector('script,link[rel=stylesheet],link[as=style],style') : parentEl.firstChild;
            parentEl.insertBefore(styleEl, insertBefore);
        }
        styleEls.set(rootNode, styleEl);
        hydrateStylesRoot(styleEl);
    }
}
function hydrateStylesRoot(styleEl) {
    for (const styleText of styleTexts)appendStylesTo(styleEl, styleText);
}
function appendStylesTo(styleEl, styleText) {
    const { sheet } = styleEl;
    const ruleCnt = sheet.cssRules.length;
    styleText.split('}').forEach((styleStr, i)=>{
        styleStr = styleStr.trim();
        if (styleStr) sheet.insertRule(styleStr + '}', ruleCnt + i);
    });
}
// nonce
// -------------------------------------------------------------------------------------------------
let queriedNonceValue;
function getNonceValue() {
    if (queriedNonceValue === undefined) queriedNonceValue = queryNonceValue();
    return queriedNonceValue;
}
/*
TODO: discourage meta tag and instead put nonce attribute on placeholder <style> tag
*/ function queryNonceValue() {
    const metaWithNonce = document.querySelector('meta[name="csp-nonce"]');
    if (metaWithNonce && metaWithNonce.hasAttribute('content')) return metaWithNonce.getAttribute('content');
    const elWithNonce = document.querySelector('script[nonce]');
    if (elWithNonce) return elWithNonce.nonce || '';
    return '';
}
// main
// -------------------------------------------------------------------------------------------------
if (typeof document !== 'undefined') registerStylesRoot(document);
var css_248z = ":root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url(\"data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\") format(\"truetype\")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:\"\\e900\"}.fc-icon-chevron-right:before{content:\"\\e901\"}.fc-icon-chevrons-left:before{content:\"\\e902\"}.fc-icon-chevrons-right:before{content:\"\\e903\"}.fc-icon-minus-square:before{content:\"\\e904\"}.fc-icon-plus-square:before{content:\"\\e905\"}.fc-icon-x:before{content:\"\\e906\"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:\"\";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:\"\";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:\"\";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}";
injectStyles(css_248z);
class DelayedRunner {
    constructor(drainedOption){
        this.drainedOption = drainedOption;
        this.isRunning = false;
        this.isDirty = false;
        this.pauseDepths = {};
        this.timeoutId = 0;
    }
    request(delay) {
        this.isDirty = true;
        if (!this.isPaused()) {
            this.clearTimeout();
            if (delay == null) this.tryDrain();
            else this.timeoutId = setTimeout(this.tryDrain.bind(this), delay);
        }
    }
    pause(scope = '') {
        let { pauseDepths } = this;
        pauseDepths[scope] = (pauseDepths[scope] || 0) + 1;
        this.clearTimeout();
    }
    resume(scope = '', force) {
        let { pauseDepths } = this;
        if (scope in pauseDepths) {
            if (force) delete pauseDepths[scope];
            else {
                pauseDepths[scope] -= 1;
                let depth = pauseDepths[scope];
                if (depth <= 0) delete pauseDepths[scope];
            }
            this.tryDrain();
        }
    }
    isPaused() {
        return Object.keys(this.pauseDepths).length;
    }
    tryDrain() {
        if (!this.isRunning && !this.isPaused()) {
            this.isRunning = true;
            while(this.isDirty){
                this.isDirty = false;
                this.drained(); // might set isDirty to true again
            }
            this.isRunning = false;
        }
    }
    clear() {
        this.clearTimeout();
        this.isDirty = false;
        this.pauseDepths = {};
    }
    clearTimeout() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = 0;
        }
    }
    drained() {
        if (this.drainedOption) this.drainedOption();
    }
}
function removeElement(el) {
    if (el.parentNode) el.parentNode.removeChild(el);
}
// Querying
// ----------------------------------------------------------------------------------------------------------------
function elementClosest(el, selector) {
    if (el.closest) return el.closest(selector);
    if (!document.documentElement.contains(el)) return null;
    do {
        if (elementMatches(el, selector)) return el;
        el = el.parentElement || el.parentNode;
    }while (el !== null && el.nodeType === 1);
    return null;
}
function elementMatches(el, selector) {
    let method = el.matches || el.matchesSelector || el.msMatchesSelector;
    return method.call(el, selector);
}
// accepts multiple subject els
// returns a real array. good for methods like forEach
// TODO: accept the document
function findElements(container, selector) {
    let containers = container instanceof HTMLElement ? [
        container
    ] : container;
    let allMatches = [];
    for(let i = 0; i < containers.length; i += 1){
        let matches = containers[i].querySelectorAll(selector);
        for(let j = 0; j < matches.length; j += 1)allMatches.push(matches[j]);
    }
    return allMatches;
}
// accepts multiple subject els
// only queries direct child elements // TODO: rename to findDirectChildren!
function findDirectChildren(parent, selector) {
    let parents = parent instanceof HTMLElement ? [
        parent
    ] : parent;
    let allMatches = [];
    for(let i = 0; i < parents.length; i += 1){
        let childNodes = parents[i].children; // only ever elements
        for(let j = 0; j < childNodes.length; j += 1){
            let childNode = childNodes[j];
            if (!selector || elementMatches(childNode, selector)) allMatches.push(childNode);
        }
    }
    return allMatches;
}
// Style
// ----------------------------------------------------------------------------------------------------------------
const PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;
function applyStyle(el, props) {
    for(let propName in props)applyStyleProp(el, propName, props[propName]);
}
function applyStyleProp(el, name, val) {
    if (val == null) el.style[name] = '';
    else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) el.style[name] = `${val}px`;
    else el.style[name] = val;
}
// Event Handling
// ----------------------------------------------------------------------------------------------------------------
// if intercepting bubbled events at the document/window/body level,
// and want to see originating element (the 'target'), use this util instead
// of `ev.target` because it goes within web-component boundaries.
function getEventTargetViaRoot(ev) {
    var _a, _b;
    return (_b = (_a = ev.composedPath) === null || _a === void 0 ? void 0 : _a.call(ev)[0]) !== null && _b !== void 0 ? _b : ev.target;
}
// Unique ID for DOM attribute
let guid$1 = 0;
function getUniqueDomId() {
    guid$1 += 1;
    return 'fc-dom-' + guid$1;
}
// Stops a mouse/touch event from doing it's native browser action
function preventDefault(ev) {
    ev.preventDefault();
}
// Event Delegation
// ----------------------------------------------------------------------------------------------------------------
function buildDelegationHandler(selector, handler) {
    return (ev)=>{
        let matchedChild = elementClosest(ev.target, selector);
        if (matchedChild) handler.call(matchedChild, ev, matchedChild);
    };
}
function listenBySelector(container, eventType, selector, handler) {
    let attachedHandler = buildDelegationHandler(selector, handler);
    container.addEventListener(eventType, attachedHandler);
    return ()=>{
        container.removeEventListener(eventType, attachedHandler);
    };
}
function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
    let currentMatchedChild;
    return listenBySelector(container, 'mouseover', selector, (mouseOverEv, matchedChild)=>{
        if (matchedChild !== currentMatchedChild) {
            currentMatchedChild = matchedChild;
            onMouseEnter(mouseOverEv, matchedChild);
            let realOnMouseLeave = (mouseLeaveEv)=>{
                currentMatchedChild = null;
                onMouseLeave(mouseLeaveEv, matchedChild);
                matchedChild.removeEventListener('mouseleave', realOnMouseLeave);
            };
            // listen to the next mouseleave, and then unattach
            matchedChild.addEventListener('mouseleave', realOnMouseLeave);
        }
    });
}
// Animation
// ----------------------------------------------------------------------------------------------------------------
const transitionEventNames = [
    'webkitTransitionEnd',
    'otransitionend',
    'oTransitionEnd',
    'msTransitionEnd',
    'transitionend'
];
// triggered only when the next single subsequent transition finishes
function whenTransitionDone(el, callback) {
    let realCallback = (ev)=>{
        callback(ev);
        transitionEventNames.forEach((eventName)=>{
            el.removeEventListener(eventName, realCallback);
        });
    };
    transitionEventNames.forEach((eventName)=>{
        el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
    });
}
// ARIA workarounds
// ----------------------------------------------------------------------------------------------------------------
function createAriaClickAttrs(handler) {
    return Object.assign({
        onClick: handler
    }, createAriaKeyboardAttrs(handler));
}
function createAriaKeyboardAttrs(handler) {
    return {
        tabIndex: 0,
        onKeyDown (ev) {
            if (ev.key === 'Enter' || ev.key === ' ') {
                handler(ev);
                ev.preventDefault(); // if space, don't scroll down page
            }
        }
    };
}
let guidNumber = 0;
function guid() {
    guidNumber += 1;
    return String(guidNumber);
}
/* FullCalendar-specific DOM Utilities
----------------------------------------------------------------------------------------------------------------------*/ // Make the mouse cursor express that an event is not allowed in the current area
function disableCursor() {
    document.body.classList.add('fc-not-allowed');
}
// Returns the mouse cursor to its original look
function enableCursor() {
    document.body.classList.remove('fc-not-allowed');
}
/* Selection
----------------------------------------------------------------------------------------------------------------------*/ function preventSelection(el) {
    el.style.userSelect = 'none';
    el.style.webkitUserSelect = 'none';
    el.addEventListener('selectstart', preventDefault);
}
function allowSelection(el) {
    el.style.userSelect = '';
    el.style.webkitUserSelect = '';
    el.removeEventListener('selectstart', preventDefault);
}
/* Context Menu
----------------------------------------------------------------------------------------------------------------------*/ function preventContextMenu(el) {
    el.addEventListener('contextmenu', preventDefault);
}
function allowContextMenu(el) {
    el.removeEventListener('contextmenu', preventDefault);
}
function parseFieldSpecs(input) {
    let specs = [];
    let tokens = [];
    let i;
    let token;
    if (typeof input === 'string') tokens = input.split(/\s*,\s*/);
    else if (typeof input === 'function') tokens = [
        input
    ];
    else if (Array.isArray(input)) tokens = input;
    for(i = 0; i < tokens.length; i += 1){
        token = tokens[i];
        if (typeof token === 'string') specs.push(token.charAt(0) === '-' ? {
            field: token.substring(1),
            order: -1
        } : {
            field: token,
            order: 1
        });
        else if (typeof token === 'function') specs.push({
            func: token
        });
    }
    return specs;
}
function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
    let i;
    let cmp;
    for(i = 0; i < fieldSpecs.length; i += 1){
        cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);
        if (cmp) return cmp;
    }
    return 0;
}
function compareByFieldSpec(obj0, obj1, fieldSpec) {
    if (fieldSpec.func) return fieldSpec.func(obj0, obj1);
    return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);
}
function flexibleCompare(a, b) {
    if (!a && !b) return 0;
    if (b == null) return -1;
    if (a == null) return 1;
    if (typeof a === 'string' || typeof b === 'string') return String(a).localeCompare(String(b));
    return a - b;
}
/* String Utilities
----------------------------------------------------------------------------------------------------------------------*/ function padStart(val, len) {
    let s = String(val);
    return '000'.substr(0, len - s.length) + s;
}
function formatWithOrdinals(formatter, args, fallbackText) {
    if (typeof formatter === 'function') return formatter(...args);
    if (typeof formatter === 'string') return args.reduce((str, arg, index)=>str.replace('$' + index, arg || ''), formatter);
    return fallbackText;
}
/* Number Utilities
----------------------------------------------------------------------------------------------------------------------*/ function compareNumbers(a, b) {
    return a - b;
}
function isInt(n) {
    return n % 1 === 0;
}
/* FC-specific DOM dimension stuff
----------------------------------------------------------------------------------------------------------------------*/ function computeSmallestCellWidth(cellEl) {
    let allWidthEl = cellEl.querySelector('.fc-scrollgrid-shrink-frame');
    let contentWidthEl = cellEl.querySelector('.fc-scrollgrid-shrink-cushion');
    if (!allWidthEl) throw new Error('needs fc-scrollgrid-shrink-frame className'); // TODO: use const
    if (!contentWidthEl) throw new Error('needs fc-scrollgrid-shrink-cushion className');
    return cellEl.getBoundingClientRect().width - allWidthEl.getBoundingClientRect().width + // the cell padding+border
    contentWidthEl.getBoundingClientRect().width;
}
const INTERNAL_UNITS = [
    'years',
    'months',
    'days',
    'milliseconds'
];
const PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;
// Parsing and Creation
function createDuration(input, unit) {
    if (typeof input === 'string') return parseString(input);
    if (typeof input === 'object' && input) return parseObject(input);
    if (typeof input === 'number') return parseObject({
        [unit || 'milliseconds']: input
    });
    return null;
}
function parseString(s) {
    let m = PARSE_RE.exec(s);
    if (m) {
        let sign = m[1] ? -1 : 1;
        return {
            years: 0,
            months: 0,
            days: sign * (m[2] ? parseInt(m[2], 10) : 0),
            milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 3600000 + // hours
            (m[4] ? parseInt(m[4], 10) : 0) * 60000 + // minutes
            (m[5] ? parseInt(m[5], 10) : 0) * 1000 + // seconds
            (m[6] ? parseInt(m[6], 10) : 0 // ms
            ))
        };
    }
    return null;
}
function parseObject(obj) {
    let duration = {
        years: obj.years || obj.year || 0,
        months: obj.months || obj.month || 0,
        days: obj.days || obj.day || 0,
        milliseconds: (obj.hours || obj.hour || 0) * 3600000 + // hours
        (obj.minutes || obj.minute || 0) * 60000 + // minutes
        (obj.seconds || obj.second || 0) * 1000 + // seconds
        (obj.milliseconds || obj.millisecond || obj.ms || 0)
    };
    let weeks = obj.weeks || obj.week;
    if (weeks) {
        duration.days += weeks * 7;
        duration.specifiedWeeks = true;
    }
    return duration;
}
// Equality
function durationsEqual(d0, d1) {
    return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;
}
function asCleanDays(dur) {
    if (!dur.years && !dur.months && !dur.milliseconds) return dur.days;
    return 0;
}
// Simple Math
function addDurations(d0, d1) {
    return {
        years: d0.years + d1.years,
        months: d0.months + d1.months,
        days: d0.days + d1.days,
        milliseconds: d0.milliseconds + d1.milliseconds
    };
}
function subtractDurations(d1, d0) {
    return {
        years: d1.years - d0.years,
        months: d1.months - d0.months,
        days: d1.days - d0.days,
        milliseconds: d1.milliseconds - d0.milliseconds
    };
}
function multiplyDuration(d, n) {
    return {
        years: d.years * n,
        months: d.months * n,
        days: d.days * n,
        milliseconds: d.milliseconds * n
    };
}
// Conversions
// "Rough" because they are based on average-case Gregorian months/years
function asRoughYears(dur) {
    return asRoughDays(dur) / 365;
}
function asRoughMonths(dur) {
    return asRoughDays(dur) / 30;
}
function asRoughDays(dur) {
    return asRoughMs(dur) / 864e5;
}
function asRoughMinutes(dur) {
    return asRoughMs(dur) / 60000;
}
function asRoughSeconds(dur) {
    return asRoughMs(dur) / 1000;
}
function asRoughMs(dur) {
    return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;
}
// Advanced Math
function wholeDivideDurations(numerator, denominator) {
    let res = null;
    for(let i = 0; i < INTERNAL_UNITS.length; i += 1){
        let unit = INTERNAL_UNITS[i];
        if (denominator[unit]) {
            let localRes = numerator[unit] / denominator[unit];
            if (!isInt(localRes) || res !== null && res !== localRes) return null;
            res = localRes;
        } else if (numerator[unit]) // needs to divide by something but can't!
        return null;
    }
    return res;
}
function greatestDurationDenominator(dur) {
    let ms = dur.milliseconds;
    if (ms) {
        if (ms % 1000 !== 0) return {
            unit: 'millisecond',
            value: ms
        };
        if (ms % 60000 !== 0) return {
            unit: 'second',
            value: ms / 1000
        };
        if (ms % 3600000 !== 0) return {
            unit: 'minute',
            value: ms / 60000
        };
        if (ms) return {
            unit: 'hour',
            value: ms / 3600000
        };
    }
    if (dur.days) {
        if (dur.specifiedWeeks && dur.days % 7 === 0) return {
            unit: 'week',
            value: dur.days / 7
        };
        return {
            unit: 'day',
            value: dur.days
        };
    }
    if (dur.months) return {
        unit: 'month',
        value: dur.months
    };
    if (dur.years) return {
        unit: 'year',
        value: dur.years
    };
    return {
        unit: 'millisecond',
        value: 0
    };
}
// TODO: new util arrayify?
function removeExact(array, exactVal) {
    let removeCnt = 0;
    let i = 0;
    while(i < array.length)if (array[i] === exactVal) {
        array.splice(i, 1);
        removeCnt += 1;
    } else i += 1;
    return removeCnt;
}
function isArraysEqual(a0, a1, equalityFunc) {
    if (a0 === a1) return true;
    let len = a0.length;
    let i;
    if (len !== a1.length) return false;
    for(i = 0; i < len; i += 1){
        if (!(equalityFunc ? equalityFunc(a0[i], a1[i]) : a0[i] === a1[i])) return false;
    }
    return true;
}
const DAY_IDS = [
    'sun',
    'mon',
    'tue',
    'wed',
    'thu',
    'fri',
    'sat'
];
// Adding
function addWeeks(m, n) {
    let a = dateToUtcArray(m);
    a[2] += n * 7;
    return arrayToUtcDate(a);
}
function addDays(m, n) {
    let a = dateToUtcArray(m);
    a[2] += n;
    return arrayToUtcDate(a);
}
function addMs(m, n) {
    let a = dateToUtcArray(m);
    a[6] += n;
    return arrayToUtcDate(a);
}
// Diffing (all return floats)
// TODO: why not use ranges?
function diffWeeks(m0, m1) {
    return diffDays(m0, m1) / 7;
}
function diffDays(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 86400000;
}
function diffHours(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 3600000;
}
function diffMinutes(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 60000;
}
function diffSeconds(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 1000;
}
function diffDayAndTime(m0, m1) {
    let m0day = startOfDay(m0);
    let m1day = startOfDay(m1);
    return {
        years: 0,
        months: 0,
        days: Math.round(diffDays(m0day, m1day)),
        milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())
    };
}
// Diffing Whole Units
function diffWholeWeeks(m0, m1) {
    let d = diffWholeDays(m0, m1);
    if (d !== null && d % 7 === 0) return d / 7;
    return null;
}
function diffWholeDays(m0, m1) {
    if (timeAsMs(m0) === timeAsMs(m1)) return Math.round(diffDays(m0, m1));
    return null;
}
// Start-Of
function startOfDay(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate()
    ]);
}
function startOfHour(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate(),
        m.getUTCHours()
    ]);
}
function startOfMinute(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate(),
        m.getUTCHours(),
        m.getUTCMinutes()
    ]);
}
function startOfSecond(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate(),
        m.getUTCHours(),
        m.getUTCMinutes(),
        m.getUTCSeconds()
    ]);
}
// Week Computation
function weekOfYear(marker, dow, doy) {
    let y = marker.getUTCFullYear();
    let w = weekOfGivenYear(marker, y, dow, doy);
    if (w < 1) return weekOfGivenYear(marker, y - 1, dow, doy);
    let nextW = weekOfGivenYear(marker, y + 1, dow, doy);
    if (nextW >= 1) return Math.min(w, nextW);
    return w;
}
function weekOfGivenYear(marker, year, dow, doy) {
    let firstWeekStart = arrayToUtcDate([
        year,
        0,
        1 + firstWeekOffset(year, dow, doy)
    ]);
    let dayStart = startOfDay(marker);
    let days = Math.round(diffDays(firstWeekStart, dayStart));
    return Math.floor(days / 7) + 1; // zero-indexed
}
// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    // first-week day -- which january is always in the first week (4 for iso, 1 for other)
    let fwd = 7 + dow - doy;
    // first-week day local weekday -- which local weekday is fwd
    let fwdlw = (7 + arrayToUtcDate([
        year,
        0,
        fwd
    ]).getUTCDay() - dow) % 7;
    return -fwdlw + fwd - 1;
}
// Array Conversion
function dateToLocalArray(date) {
    return [
        date.getFullYear(),
        date.getMonth(),
        date.getDate(),
        date.getHours(),
        date.getMinutes(),
        date.getSeconds(),
        date.getMilliseconds()
    ];
}
function arrayToLocalDate(a) {
    return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], a[3] || 0, a[4] || 0, a[5] || 0);
}
function dateToUtcArray(date) {
    return [
        date.getUTCFullYear(),
        date.getUTCMonth(),
        date.getUTCDate(),
        date.getUTCHours(),
        date.getUTCMinutes(),
        date.getUTCSeconds(),
        date.getUTCMilliseconds()
    ];
}
function arrayToUtcDate(a) {
    // according to web standards (and Safari), a month index is required.
    // massage if only given a year.
    if (a.length === 1) a = a.concat([
        0
    ]);
    return new Date(Date.UTC(...a));
}
// Other Utils
function isValidDate(m) {
    return !isNaN(m.valueOf());
}
function timeAsMs(m) {
    return m.getUTCHours() * 3600000 + m.getUTCMinutes() * 60000 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();
}
// timeZoneOffset is in minutes
function buildIsoString(marker, timeZoneOffset, stripZeroTime = false) {
    let s = marker.toISOString();
    s = s.replace('.000', '');
    if (stripZeroTime) s = s.replace('T00:00:00Z', '');
    if (s.length > 10) {
        if (timeZoneOffset == null) s = s.replace('Z', '');
        else if (timeZoneOffset !== 0) s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
    // otherwise, its UTC-0 and we want to keep the Z
    }
    return s;
}
// formats the date, but with no time part
// TODO: somehow merge with buildIsoString and stripZeroTime
// TODO: rename. omit "string"
function formatDayString(marker) {
    return marker.toISOString().replace(/T.*$/, '');
}
function formatIsoMonthStr(marker) {
    return marker.toISOString().match(/^\d{4}-\d{2}/)[0];
}
// TODO: use Date::toISOString and use everything after the T?
function formatIsoTimeString(marker) {
    return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);
}
function formatTimeZoneOffset(minutes, doIso = false) {
    let sign = minutes < 0 ? '-' : '+';
    let abs = Math.abs(minutes);
    let hours = Math.floor(abs / 60);
    let mins = Math.round(abs % 60);
    if (doIso) return `${sign + padStart(hours, 2)}:${padStart(mins, 2)}`;
    return `GMT${sign}${hours}${mins ? `:${padStart(mins, 2)}` : ''}`;
}
function memoize(workerFunc, resEquality, teardownFunc) {
    let currentArgs;
    let currentRes;
    return function(...newArgs) {
        if (!currentArgs) currentRes = workerFunc.apply(this, newArgs);
        else if (!isArraysEqual(currentArgs, newArgs)) {
            if (teardownFunc) teardownFunc(currentRes);
            let res = workerFunc.apply(this, newArgs);
            if (!resEquality || !resEquality(res, currentRes)) currentRes = res;
        }
        currentArgs = newArgs;
        return currentRes;
    };
}
function memoizeObjArg(workerFunc, resEquality, teardownFunc) {
    let currentArg;
    let currentRes;
    return (newArg)=>{
        if (!currentArg) currentRes = workerFunc.call(this, newArg);
        else if (!isPropsEqual(currentArg, newArg)) {
            if (teardownFunc) teardownFunc(currentRes);
            let res = workerFunc.call(this, newArg);
            if (!resEquality || !resEquality(res, currentRes)) currentRes = res;
        }
        currentArg = newArg;
        return currentRes;
    };
}
function memoizeArraylike(workerFunc, resEquality, teardownFunc) {
    let currentArgSets = [];
    let currentResults = [];
    return (newArgSets)=>{
        let currentLen = currentArgSets.length;
        let newLen = newArgSets.length;
        let i = 0;
        for(; i < currentLen; i += 1){
            if (!newArgSets[i]) {
                if (teardownFunc) teardownFunc(currentResults[i]);
            } else if (!isArraysEqual(currentArgSets[i], newArgSets[i])) {
                if (teardownFunc) teardownFunc(currentResults[i]);
                let res = workerFunc.apply(this, newArgSets[i]);
                if (!resEquality || !resEquality(res, currentResults[i])) currentResults[i] = res;
            }
        }
        for(; i < newLen; i += 1)currentResults[i] = workerFunc.apply(this, newArgSets[i]);
        currentArgSets = newArgSets;
        currentResults.splice(newLen); // remove excess
        return currentResults;
    };
}
function memoizeHashlike(workerFunc, resEquality, teardownFunc) {
    let currentArgHash = {};
    let currentResHash = {};
    return (newArgHash)=>{
        let newResHash = {};
        for(let key in newArgHash){
            if (!currentResHash[key]) newResHash[key] = workerFunc.apply(this, newArgHash[key]);
            else if (!isArraysEqual(currentArgHash[key], newArgHash[key])) {
                if (teardownFunc) teardownFunc(currentResHash[key]);
                let res = workerFunc.apply(this, newArgHash[key]);
                newResHash[key] = resEquality && resEquality(res, currentResHash[key]) ? currentResHash[key] : res;
            } else newResHash[key] = currentResHash[key];
        }
        currentArgHash = newArgHash;
        currentResHash = newResHash;
        return newResHash;
    };
}
const EXTENDED_SETTINGS_AND_SEVERITIES = {
    week: 3,
    separator: 9,
    omitZeroMinute: 9,
    meridiem: 9,
    omitCommas: 9
};
const STANDARD_DATE_PROP_SEVERITIES = {
    timeZoneName: 7,
    era: 6,
    year: 5,
    month: 4,
    day: 2,
    weekday: 2,
    hour: 1,
    minute: 1,
    second: 1
};
const MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too
const COMMA_RE = /,/g; // we need re for globalness
const MULTI_SPACE_RE = /\s+/g;
const LTR_RE = /\u200e/g; // control character
const UTC_RE = /UTC|GMT/;
class NativeFormatter {
    constructor(formatSettings){
        let standardDateProps = {};
        let extendedSettings = {};
        let smallestUnitNum = 9; // the smallest unit in the formatter (9 is a sentinel, beyond max)
        for(let name in formatSettings)if (name in EXTENDED_SETTINGS_AND_SEVERITIES) {
            extendedSettings[name] = formatSettings[name];
            const severity = EXTENDED_SETTINGS_AND_SEVERITIES[name];
            if (severity < 9) smallestUnitNum = Math.min(EXTENDED_SETTINGS_AND_SEVERITIES[name], smallestUnitNum);
        } else {
            standardDateProps[name] = formatSettings[name];
            if (name in STANDARD_DATE_PROP_SEVERITIES) smallestUnitNum = Math.min(STANDARD_DATE_PROP_SEVERITIES[name], smallestUnitNum);
        }
        this.standardDateProps = standardDateProps;
        this.extendedSettings = extendedSettings;
        this.smallestUnitNum = smallestUnitNum;
        this.buildFormattingFunc = memoize(buildFormattingFunc);
    }
    format(date, context) {
        return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
    }
    formatRange(start, end, context, betterDefaultSeparator) {
        let { standardDateProps, extendedSettings } = this;
        let diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);
        if (!diffSeverity) return this.format(start, context);
        let biggestUnitForPartial = diffSeverity;
        if (biggestUnitForPartial > 1 && // the two dates are different in a way that's larger scale than time
        (standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
        let full0 = this.format(start, context);
        let full1 = this.format(end, context);
        if (full0 === full1) return full0;
        let partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
        let partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
        let partial0 = partialFormattingFunc(start);
        let partial1 = partialFormattingFunc(end);
        let insertion = findCommonInsertion(full0, partial0, full1, partial1);
        let separator = extendedSettings.separator || betterDefaultSeparator || context.defaultSeparator || '';
        if (insertion) return insertion.before + partial0 + separator + partial1 + insertion.after;
        return full0 + separator + full1;
    }
    getSmallestUnit() {
        switch(this.smallestUnitNum){
            case 7:
            case 6:
            case 5:
                return 'year';
            case 4:
                return 'month';
            case 3:
                return 'week';
            case 2:
                return 'day';
            default:
                return 'time'; // really?
        }
    }
}
function buildFormattingFunc(standardDateProps, extendedSettings, context) {
    let standardDatePropCnt = Object.keys(standardDateProps).length;
    if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') return (date)=>formatTimeZoneOffset(date.timeZoneOffset);
    if (standardDatePropCnt === 0 && extendedSettings.week) return (date)=>formatWeekNumber(context.computeWeekNumber(date.marker), context.weekText, context.weekTextLong, context.locale, extendedSettings.week);
    return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
}
function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
    standardDateProps = Object.assign({}, standardDateProps); // copy
    extendedSettings = Object.assign({}, extendedSettings); // copy
    sanitizeSettings(standardDateProps, extendedSettings);
    standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers
    let normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
    let zeroFormat; // needed?
    if (extendedSettings.omitZeroMinute) {
        let zeroProps = Object.assign({}, standardDateProps);
        delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings
        zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
    }
    return (date)=>{
        let { marker } = date;
        let format;
        if (zeroFormat && !marker.getUTCMinutes()) format = zeroFormat;
        else format = normalFormat;
        let s = format.format(marker);
        return postProcess(s, date, standardDateProps, extendedSettings, context);
    };
}
function sanitizeSettings(standardDateProps, extendedSettings) {
    // deal with a browser inconsistency where formatting the timezone
    // requires that the hour/minute be present.
    if (standardDateProps.timeZoneName) {
        if (!standardDateProps.hour) standardDateProps.hour = '2-digit';
        if (!standardDateProps.minute) standardDateProps.minute = '2-digit';
    }
    // only support short timezone names
    if (standardDateProps.timeZoneName === 'long') standardDateProps.timeZoneName = 'short';
    // if requesting to display seconds, MUST display minutes
    if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) delete extendedSettings.omitZeroMinute;
}
function postProcess(s, date, standardDateProps, extendedSettings, context) {
    s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes
    if (standardDateProps.timeZoneName === 'short') s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : formatTimeZoneOffset(date.timeZoneOffset));
    if (extendedSettings.omitCommas) s = s.replace(COMMA_RE, '').trim();
    if (extendedSettings.omitZeroMinute) s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
    // ^ do anything that might create adjacent spaces before this point,
    // because MERIDIEM_RE likes to eat up loading spaces
    if (extendedSettings.meridiem === false) s = s.replace(MERIDIEM_RE, '').trim();
    else if (extendedSettings.meridiem === 'narrow') s = s.replace(MERIDIEM_RE, (m0, m1)=>m1.toLocaleLowerCase());
    else if (extendedSettings.meridiem === 'short') s = s.replace(MERIDIEM_RE, (m0, m1)=>`${m1.toLocaleLowerCase()}m`);
    else if (extendedSettings.meridiem === 'lowercase') s = s.replace(MERIDIEM_RE, (m0)=>m0.toLocaleLowerCase());
    s = s.replace(MULTI_SPACE_RE, ' ');
    s = s.trim();
    return s;
}
function injectTzoStr(s, tzoStr) {
    let replaced = false;
    s = s.replace(UTC_RE, ()=>{
        replaced = true;
        return tzoStr;
    });
    // IE11 doesn't include UTC/GMT in the original string, so append to end
    if (!replaced) s += ` ${tzoStr}`;
    return s;
}
function formatWeekNumber(num, weekText, weekTextLong, locale, display) {
    let parts = [];
    if (display === 'long') parts.push(weekTextLong);
    else if (display === 'short' || display === 'narrow') parts.push(weekText);
    if (display === 'long' || display === 'short') parts.push(' ');
    parts.push(locale.simpleNumberFormat.format(num));
    if (locale.options.direction === 'rtl') parts.reverse();
    return parts.join('');
}
// Range Formatting Utils
// 0 = exactly the same
// 1 = different by time
// and bigger
function computeMarkerDiffSeverity(d0, d1, ca) {
    if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) return 5;
    if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) return 4;
    if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) return 2;
    if (timeAsMs(d0) !== timeAsMs(d1)) return 1;
    return 0;
}
function computePartialFormattingOptions(options, biggestUnit) {
    let partialOptions = {};
    for(let name in options)if (!(name in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
    STANDARD_DATE_PROP_SEVERITIES[name] <= biggestUnit) partialOptions[name] = options[name];
    return partialOptions;
}
function findCommonInsertion(full0, partial0, full1, partial1) {
    let i0 = 0;
    while(i0 < full0.length){
        let found0 = full0.indexOf(partial0, i0);
        if (found0 === -1) break;
        let before0 = full0.substr(0, found0);
        i0 = found0 + partial0.length;
        let after0 = full0.substr(i0);
        let i1 = 0;
        while(i1 < full1.length){
            let found1 = full1.indexOf(partial1, i1);
            if (found1 === -1) break;
            let before1 = full1.substr(0, found1);
            i1 = found1 + partial1.length;
            let after1 = full1.substr(i1);
            if (before0 === before1 && after0 === after1) return {
                before: before0,
                after: after0
            };
        }
    }
    return null;
}
function expandZonedMarker(dateInfo, calendarSystem) {
    let a = calendarSystem.markerToArray(dateInfo.marker);
    return {
        marker: dateInfo.marker,
        timeZoneOffset: dateInfo.timeZoneOffset,
        array: a,
        year: a[0],
        month: a[1],
        day: a[2],
        hour: a[3],
        minute: a[4],
        second: a[5],
        millisecond: a[6]
    };
}
function createVerboseFormattingArg(start, end, context, betterDefaultSeparator) {
    let startInfo = expandZonedMarker(start, context.calendarSystem);
    let endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
    return {
        date: startInfo,
        start: startInfo,
        end: endInfo,
        timeZone: context.timeZone,
        localeCodes: context.locale.codes,
        defaultSeparator: betterDefaultSeparator || context.defaultSeparator
    };
}
/*
TODO: fix the terminology of "formatter" vs "formatting func"
*/ /*
At the time of instantiation, this object does not know which cmd-formatting system it will use.
It receives this at the time of formatting, as a setting.
*/ class CmdFormatter {
    constructor(cmdStr){
        this.cmdStr = cmdStr;
    }
    format(date, context, betterDefaultSeparator) {
        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, betterDefaultSeparator));
    }
    formatRange(start, end, context, betterDefaultSeparator) {
        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, betterDefaultSeparator));
    }
}
class FuncFormatter {
    constructor(func){
        this.func = func;
    }
    format(date, context, betterDefaultSeparator) {
        return this.func(createVerboseFormattingArg(date, null, context, betterDefaultSeparator));
    }
    formatRange(start, end, context, betterDefaultSeparator) {
        return this.func(createVerboseFormattingArg(start, end, context, betterDefaultSeparator));
    }
}
function createFormatter(input) {
    if (typeof input === 'object' && input) return new NativeFormatter(input);
    if (typeof input === 'string') return new CmdFormatter(input);
    if (typeof input === 'function') return new FuncFormatter(input);
    return null;
}
// base options
// ------------
const BASE_OPTION_REFINERS = {
    navLinkDayClick: identity,
    navLinkWeekClick: identity,
    duration: createDuration,
    bootstrapFontAwesome: identity,
    buttonIcons: identity,
    customButtons: identity,
    defaultAllDayEventDuration: createDuration,
    defaultTimedEventDuration: createDuration,
    nextDayThreshold: createDuration,
    scrollTime: createDuration,
    scrollTimeReset: Boolean,
    slotMinTime: createDuration,
    slotMaxTime: createDuration,
    dayPopoverFormat: createFormatter,
    slotDuration: createDuration,
    snapDuration: createDuration,
    headerToolbar: identity,
    footerToolbar: identity,
    defaultRangeSeparator: String,
    titleRangeSeparator: String,
    forceEventDuration: Boolean,
    dayHeaders: Boolean,
    dayHeaderFormat: createFormatter,
    dayHeaderClassNames: identity,
    dayHeaderContent: identity,
    dayHeaderDidMount: identity,
    dayHeaderWillUnmount: identity,
    dayCellClassNames: identity,
    dayCellContent: identity,
    dayCellDidMount: identity,
    dayCellWillUnmount: identity,
    initialView: String,
    aspectRatio: Number,
    weekends: Boolean,
    weekNumberCalculation: identity,
    weekNumbers: Boolean,
    weekNumberClassNames: identity,
    weekNumberContent: identity,
    weekNumberDidMount: identity,
    weekNumberWillUnmount: identity,
    editable: Boolean,
    viewClassNames: identity,
    viewDidMount: identity,
    viewWillUnmount: identity,
    nowIndicator: Boolean,
    nowIndicatorClassNames: identity,
    nowIndicatorContent: identity,
    nowIndicatorDidMount: identity,
    nowIndicatorWillUnmount: identity,
    showNonCurrentDates: Boolean,
    lazyFetching: Boolean,
    startParam: String,
    endParam: String,
    timeZoneParam: String,
    timeZone: String,
    locales: identity,
    locale: identity,
    themeSystem: String,
    dragRevertDuration: Number,
    dragScroll: Boolean,
    allDayMaintainDuration: Boolean,
    unselectAuto: Boolean,
    dropAccept: identity,
    eventOrder: parseFieldSpecs,
    eventOrderStrict: Boolean,
    handleWindowResize: Boolean,
    windowResizeDelay: Number,
    longPressDelay: Number,
    eventDragMinDistance: Number,
    expandRows: Boolean,
    height: identity,
    contentHeight: identity,
    direction: String,
    weekNumberFormat: createFormatter,
    eventResizableFromStart: Boolean,
    displayEventTime: Boolean,
    displayEventEnd: Boolean,
    weekText: String,
    weekTextLong: String,
    progressiveEventRendering: Boolean,
    businessHours: identity,
    initialDate: identity,
    now: identity,
    eventDataTransform: identity,
    stickyHeaderDates: identity,
    stickyFooterScrollbar: identity,
    viewHeight: identity,
    defaultAllDay: Boolean,
    eventSourceFailure: identity,
    eventSourceSuccess: identity,
    eventDisplay: String,
    eventStartEditable: Boolean,
    eventDurationEditable: Boolean,
    eventOverlap: identity,
    eventConstraint: identity,
    eventAllow: identity,
    eventBackgroundColor: String,
    eventBorderColor: String,
    eventTextColor: String,
    eventColor: String,
    eventClassNames: identity,
    eventContent: identity,
    eventDidMount: identity,
    eventWillUnmount: identity,
    selectConstraint: identity,
    selectOverlap: identity,
    selectAllow: identity,
    droppable: Boolean,
    unselectCancel: String,
    slotLabelFormat: identity,
    slotLaneClassNames: identity,
    slotLaneContent: identity,
    slotLaneDidMount: identity,
    slotLaneWillUnmount: identity,
    slotLabelClassNames: identity,
    slotLabelContent: identity,
    slotLabelDidMount: identity,
    slotLabelWillUnmount: identity,
    dayMaxEvents: identity,
    dayMaxEventRows: identity,
    dayMinWidth: Number,
    slotLabelInterval: createDuration,
    allDayText: String,
    allDayClassNames: identity,
    allDayContent: identity,
    allDayDidMount: identity,
    allDayWillUnmount: identity,
    slotMinWidth: Number,
    navLinks: Boolean,
    eventTimeFormat: createFormatter,
    rerenderDelay: Number,
    moreLinkText: identity,
    moreLinkHint: identity,
    selectMinDistance: Number,
    selectable: Boolean,
    selectLongPressDelay: Number,
    eventLongPressDelay: Number,
    selectMirror: Boolean,
    eventMaxStack: Number,
    eventMinHeight: Number,
    eventMinWidth: Number,
    eventShortHeight: Number,
    slotEventOverlap: Boolean,
    plugins: identity,
    firstDay: Number,
    dayCount: Number,
    dateAlignment: String,
    dateIncrement: createDuration,
    hiddenDays: identity,
    fixedWeekCount: Boolean,
    validRange: identity,
    visibleRange: identity,
    titleFormat: identity,
    eventInteractive: Boolean,
    // only used by list-view, but languages define the value, so we need it in base options
    noEventsText: String,
    viewHint: identity,
    navLinkHint: identity,
    closeHint: String,
    timeHint: String,
    eventHint: String,
    moreLinkClick: identity,
    moreLinkClassNames: identity,
    moreLinkContent: identity,
    moreLinkDidMount: identity,
    moreLinkWillUnmount: identity,
    monthStartFormat: createFormatter,
    // for connectors
    // (can't be part of plugin system b/c must be provided at runtime)
    handleCustomRendering: identity,
    customRenderingMetaMap: identity,
    customRenderingReplaces: Boolean
};
// do NOT give a type here. need `typeof BASE_OPTION_DEFAULTS` to give real results.
// raw values.
const BASE_OPTION_DEFAULTS = {
    eventDisplay: 'auto',
    defaultRangeSeparator: ' - ',
    titleRangeSeparator: ' \u2013 ',
    defaultTimedEventDuration: '01:00:00',
    defaultAllDayEventDuration: {
        day: 1
    },
    forceEventDuration: false,
    nextDayThreshold: '00:00:00',
    dayHeaders: true,
    initialView: '',
    aspectRatio: 1.35,
    headerToolbar: {
        start: 'title',
        center: '',
        end: 'today prev,next'
    },
    weekends: true,
    weekNumbers: false,
    weekNumberCalculation: 'local',
    editable: false,
    nowIndicator: false,
    scrollTime: '06:00:00',
    scrollTimeReset: true,
    slotMinTime: '00:00:00',
    slotMaxTime: '24:00:00',
    showNonCurrentDates: true,
    lazyFetching: true,
    startParam: 'start',
    endParam: 'end',
    timeZoneParam: 'timeZone',
    timeZone: 'local',
    locales: [],
    locale: '',
    themeSystem: 'standard',
    dragRevertDuration: 500,
    dragScroll: true,
    allDayMaintainDuration: false,
    unselectAuto: true,
    dropAccept: '*',
    eventOrder: 'start,-duration,allDay,title',
    dayPopoverFormat: {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
    },
    handleWindowResize: true,
    windowResizeDelay: 100,
    longPressDelay: 1000,
    eventDragMinDistance: 5,
    expandRows: false,
    navLinks: false,
    selectable: false,
    eventMinHeight: 15,
    eventMinWidth: 30,
    eventShortHeight: 30,
    monthStartFormat: {
        month: 'long',
        day: 'numeric'
    }
};
// calendar listeners
// ------------------
const CALENDAR_LISTENER_REFINERS = {
    datesSet: identity,
    eventsSet: identity,
    eventAdd: identity,
    eventChange: identity,
    eventRemove: identity,
    windowResize: identity,
    eventClick: identity,
    eventMouseEnter: identity,
    eventMouseLeave: identity,
    select: identity,
    unselect: identity,
    loading: identity,
    // internal
    _unmount: identity,
    _beforeprint: identity,
    _afterprint: identity,
    _noEventDrop: identity,
    _noEventResize: identity,
    _resize: identity,
    _scrollRequest: identity
};
// calendar-specific options
// -------------------------
const CALENDAR_OPTION_REFINERS = {
    buttonText: identity,
    buttonHints: identity,
    views: identity,
    plugins: identity,
    initialEvents: identity,
    events: identity,
    eventSources: identity
};
const COMPLEX_OPTION_COMPARATORS = {
    headerToolbar: isMaybeObjectsEqual,
    footerToolbar: isMaybeObjectsEqual,
    buttonText: isMaybeObjectsEqual,
    buttonHints: isMaybeObjectsEqual,
    buttonIcons: isMaybeObjectsEqual,
    dateIncrement: isMaybeObjectsEqual,
    plugins: isMaybeArraysEqual,
    events: isMaybeArraysEqual,
    eventSources: isMaybeArraysEqual,
    ['resources']: isMaybeArraysEqual
};
function isMaybeObjectsEqual(a, b) {
    if (typeof a === 'object' && typeof b === 'object' && a && b) return isPropsEqual(a, b);
    return a === b;
}
function isMaybeArraysEqual(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) return isArraysEqual(a, b);
    return a === b;
}
// view-specific options
// ---------------------
const VIEW_OPTION_REFINERS = {
    type: String,
    component: identity,
    buttonText: String,
    buttonTextKey: String,
    dateProfileGeneratorClass: identity,
    usesMinMaxTime: Boolean,
    classNames: identity,
    content: identity,
    didMount: identity,
    willUnmount: identity
};
// util funcs
// ----------------------------------------------------------------------------------------------------
function mergeRawOptions(optionSets) {
    return mergeProps(optionSets, COMPLEX_OPTION_COMPARATORS);
}
function refineProps(input, refiners) {
    let refined = {};
    let extra = {};
    for(let propName in refiners)if (propName in input) refined[propName] = refiners[propName](input[propName]);
    for(let propName in input)if (!(propName in refiners)) extra[propName] = input[propName];
    return {
        refined,
        extra
    };
}
function identity(raw) {
    return raw;
}
const { hasOwnProperty } = Object.prototype;
// Merges an array of objects into a single object.
// The second argument allows for an array of property names who's object values will be merged together.
function mergeProps(propObjs, complexPropsMap) {
    let dest = {};
    if (complexPropsMap) {
        for(let name in complexPropsMap)if (complexPropsMap[name] === isMaybeObjectsEqual) {
            let complexObjs = [];
            // collect the trailing object values, stopping when a non-object is discovered
            for(let i = propObjs.length - 1; i >= 0; i -= 1){
                let val = propObjs[i][name];
                if (typeof val === 'object' && val) complexObjs.unshift(val);
                else if (val !== undefined) {
                    dest[name] = val; // if there were no objects, this value will be used
                    break;
                }
            }
            // if the trailing values were objects, use the merged value
            if (complexObjs.length) dest[name] = mergeProps(complexObjs);
        }
    }
    // copy values into the destination, going from last to first
    for(let i = propObjs.length - 1; i >= 0; i -= 1){
        let props = propObjs[i];
        for(let name in props)if (!(name in dest)) dest[name] = props[name];
    }
    return dest;
}
function filterHash(hash, func) {
    let filtered = {};
    for(let key in hash)if (func(hash[key], key)) filtered[key] = hash[key];
    return filtered;
}
function mapHash(hash, func) {
    let newHash = {};
    for(let key in hash)newHash[key] = func(hash[key], key);
    return newHash;
}
function arrayToHash(a) {
    let hash = {};
    for (let item of a)hash[item] = true;
    return hash;
}
// TODO: reassess browser support
// https://caniuse.com/?search=object.values
function hashValuesToArray(obj) {
    let a = [];
    for(let key in obj)a.push(obj[key]);
    return a;
}
function isPropsEqual(obj0, obj1) {
    if (obj0 === obj1) return true;
    for(let key in obj0)if (hasOwnProperty.call(obj0, key)) {
        if (!(key in obj1)) return false;
    }
    for(let key in obj1)if (hasOwnProperty.call(obj1, key)) {
        if (obj0[key] !== obj1[key]) return false;
    }
    return true;
}
const HANDLER_RE = /^on[A-Z]/;
function isNonHandlerPropsEqual(obj0, obj1) {
    const keys = getUnequalProps(obj0, obj1);
    for (let key of keys){
        if (!HANDLER_RE.test(key)) return false;
    }
    return true;
}
function getUnequalProps(obj0, obj1) {
    let keys = [];
    for(let key in obj0){
        if (hasOwnProperty.call(obj0, key)) {
            if (!(key in obj1)) keys.push(key);
        }
    }
    for(let key in obj1){
        if (hasOwnProperty.call(obj1, key)) {
            if (obj0[key] !== obj1[key]) keys.push(key);
        }
    }
    return keys;
}
function compareObjs(oldProps, newProps, equalityFuncs = {}) {
    if (oldProps === newProps) return true;
    for(let key in newProps){
        if (key in oldProps && isObjValsEqual(oldProps[key], newProps[key], equalityFuncs[key])) ;
        else return false;
    }
    // check for props that were omitted in the new
    for(let key in oldProps){
        if (!(key in newProps)) return false;
    }
    return true;
}
/*
assumed "true" equality for handler names like "onReceiveSomething"
*/ function isObjValsEqual(val0, val1, comparator) {
    if (val0 === val1 || comparator === true) return true;
    if (comparator) return comparator(val0, val1);
    return false;
}
function collectFromHash(hash, startIndex = 0, endIndex, step = 1) {
    let res = [];
    if (endIndex == null) endIndex = Object.keys(hash).length;
    for(let i = startIndex; i < endIndex; i += step){
        let val = hash[i];
        if (val !== undefined) res.push(val);
    }
    return res;
}
let calendarSystemClassMap = {};
function registerCalendarSystem(name, theClass) {
    calendarSystemClassMap[name] = theClass;
}
function createCalendarSystem(name) {
    return new calendarSystemClassMap[name]();
}
class GregorianCalendarSystem {
    getMarkerYear(d) {
        return d.getUTCFullYear();
    }
    getMarkerMonth(d) {
        return d.getUTCMonth();
    }
    getMarkerDay(d) {
        return d.getUTCDate();
    }
    arrayToMarker(arr) {
        return arrayToUtcDate(arr);
    }
    markerToArray(marker) {
        return dateToUtcArray(marker);
    }
}
registerCalendarSystem('gregory', GregorianCalendarSystem);
const ISO_RE = /^\s*(\d{4})(-?(\d{2})(-?(\d{2})([T ](\d{2}):?(\d{2})(:?(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;
function parse(str) {
    let m = ISO_RE.exec(str);
    if (m) {
        let marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number(`0.${m[12]}`) * 1000 : 0));
        if (isValidDate(marker)) {
            let timeZoneOffset = null;
            if (m[13]) timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));
            return {
                marker,
                isTimeUnspecified: !m[6],
                timeZoneOffset
            };
        }
    }
    return null;
}
class DateEnv {
    constructor(settings){
        let timeZone = this.timeZone = settings.timeZone;
        let isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';
        if (settings.namedTimeZoneImpl && isNamedTimeZone) this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
        this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
        this.calendarSystem = createCalendarSystem(settings.calendarSystem);
        this.locale = settings.locale;
        this.weekDow = settings.locale.week.dow;
        this.weekDoy = settings.locale.week.doy;
        if (settings.weekNumberCalculation === 'ISO') {
            this.weekDow = 1;
            this.weekDoy = 4;
        }
        if (typeof settings.firstDay === 'number') this.weekDow = settings.firstDay;
        if (typeof settings.weekNumberCalculation === 'function') this.weekNumberFunc = settings.weekNumberCalculation;
        this.weekText = settings.weekText != null ? settings.weekText : settings.locale.options.weekText;
        this.weekTextLong = (settings.weekTextLong != null ? settings.weekTextLong : settings.locale.options.weekTextLong) || this.weekText;
        this.cmdFormatter = settings.cmdFormatter;
        this.defaultSeparator = settings.defaultSeparator;
    }
    // Creating / Parsing
    createMarker(input) {
        let meta = this.createMarkerMeta(input);
        if (meta === null) return null;
        return meta.marker;
    }
    createNowMarker() {
        if (this.canComputeOffset) return this.timestampToMarker(new Date().valueOf());
        // if we can't compute the current date val for a timezone,
        // better to give the current local date vals than UTC
        return arrayToUtcDate(dateToLocalArray(new Date()));
    }
    createMarkerMeta(input) {
        if (typeof input === 'string') return this.parse(input);
        let marker = null;
        if (typeof input === 'number') marker = this.timestampToMarker(input);
        else if (input instanceof Date) {
            input = input.valueOf();
            if (!isNaN(input)) marker = this.timestampToMarker(input);
        } else if (Array.isArray(input)) marker = arrayToUtcDate(input);
        if (marker === null || !isValidDate(marker)) return null;
        return {
            marker,
            isTimeUnspecified: false,
            forcedTzo: null
        };
    }
    parse(s) {
        let parts = parse(s);
        if (parts === null) return null;
        let { marker } = parts;
        let forcedTzo = null;
        if (parts.timeZoneOffset !== null) {
            if (this.canComputeOffset) marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60000);
            else forcedTzo = parts.timeZoneOffset;
        }
        return {
            marker,
            isTimeUnspecified: parts.isTimeUnspecified,
            forcedTzo
        };
    }
    // Accessors
    getYear(marker) {
        return this.calendarSystem.getMarkerYear(marker);
    }
    getMonth(marker) {
        return this.calendarSystem.getMarkerMonth(marker);
    }
    getDay(marker) {
        return this.calendarSystem.getMarkerDay(marker);
    }
    // Adding / Subtracting
    add(marker, dur) {
        let a = this.calendarSystem.markerToArray(marker);
        a[0] += dur.years;
        a[1] += dur.months;
        a[2] += dur.days;
        a[6] += dur.milliseconds;
        return this.calendarSystem.arrayToMarker(a);
    }
    subtract(marker, dur) {
        let a = this.calendarSystem.markerToArray(marker);
        a[0] -= dur.years;
        a[1] -= dur.months;
        a[2] -= dur.days;
        a[6] -= dur.milliseconds;
        return this.calendarSystem.arrayToMarker(a);
    }
    addYears(marker, n) {
        let a = this.calendarSystem.markerToArray(marker);
        a[0] += n;
        return this.calendarSystem.arrayToMarker(a);
    }
    addMonths(marker, n) {
        let a = this.calendarSystem.markerToArray(marker);
        a[1] += n;
        return this.calendarSystem.arrayToMarker(a);
    }
    // Diffing Whole Units
    diffWholeYears(m0, m1) {
        let { calendarSystem } = this;
        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
        return null;
    }
    diffWholeMonths(m0, m1) {
        let { calendarSystem } = this;
        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
        return null;
    }
    // Range / Duration
    greatestWholeUnit(m0, m1) {
        let n = this.diffWholeYears(m0, m1);
        if (n !== null) return {
            unit: 'year',
            value: n
        };
        n = this.diffWholeMonths(m0, m1);
        if (n !== null) return {
            unit: 'month',
            value: n
        };
        n = diffWholeWeeks(m0, m1);
        if (n !== null) return {
            unit: 'week',
            value: n
        };
        n = diffWholeDays(m0, m1);
        if (n !== null) return {
            unit: 'day',
            value: n
        };
        n = diffHours(m0, m1);
        if (isInt(n)) return {
            unit: 'hour',
            value: n
        };
        n = diffMinutes(m0, m1);
        if (isInt(n)) return {
            unit: 'minute',
            value: n
        };
        n = diffSeconds(m0, m1);
        if (isInt(n)) return {
            unit: 'second',
            value: n
        };
        return {
            unit: 'millisecond',
            value: m1.valueOf() - m0.valueOf()
        };
    }
    countDurationsBetween(m0, m1, d) {
        // TODO: can use greatestWholeUnit
        let diff;
        if (d.years) {
            diff = this.diffWholeYears(m0, m1);
            if (diff !== null) return diff / asRoughYears(d);
        }
        if (d.months) {
            diff = this.diffWholeMonths(m0, m1);
            if (diff !== null) return diff / asRoughMonths(d);
        }
        if (d.days) {
            diff = diffWholeDays(m0, m1);
            if (diff !== null) return diff / asRoughDays(d);
        }
        return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
    }
    // Start-Of
    // these DON'T return zoned-dates. only UTC start-of dates
    startOf(m, unit) {
        if (unit === 'year') return this.startOfYear(m);
        if (unit === 'month') return this.startOfMonth(m);
        if (unit === 'week') return this.startOfWeek(m);
        if (unit === 'day') return startOfDay(m);
        if (unit === 'hour') return startOfHour(m);
        if (unit === 'minute') return startOfMinute(m);
        if (unit === 'second') return startOfSecond(m);
        return null;
    }
    startOfYear(m) {
        return this.calendarSystem.arrayToMarker([
            this.calendarSystem.getMarkerYear(m)
        ]);
    }
    startOfMonth(m) {
        return this.calendarSystem.arrayToMarker([
            this.calendarSystem.getMarkerYear(m),
            this.calendarSystem.getMarkerMonth(m)
        ]);
    }
    startOfWeek(m) {
        return this.calendarSystem.arrayToMarker([
            this.calendarSystem.getMarkerYear(m),
            this.calendarSystem.getMarkerMonth(m),
            m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7
        ]);
    }
    // Week Number
    computeWeekNumber(marker) {
        if (this.weekNumberFunc) return this.weekNumberFunc(this.toDate(marker));
        return weekOfYear(marker, this.weekDow, this.weekDoy);
    }
    // TODO: choke on timeZoneName: long
    format(marker, formatter, dateOptions = {}) {
        return formatter.format({
            marker,
            timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)
        }, this);
    }
    formatRange(start, end, formatter, dateOptions = {}) {
        if (dateOptions.isEndExclusive) end = addMs(end, -1);
        return formatter.formatRange({
            marker: start,
            timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)
        }, {
            marker: end,
            timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)
        }, this, dateOptions.defaultSeparator);
    }
    /*
    DUMB: the omitTime arg is dumb. if we omit the time, we want to omit the timezone offset. and if we do that,
    might as well use buildIsoString or some other util directly
    */ formatIso(marker, extraOptions = {}) {
        let timeZoneOffset = null;
        if (!extraOptions.omitTimeZoneOffset) {
            if (extraOptions.forcedTzo != null) timeZoneOffset = extraOptions.forcedTzo;
            else timeZoneOffset = this.offsetForMarker(marker);
        }
        return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
    }
    // TimeZone
    timestampToMarker(ms) {
        if (this.timeZone === 'local') return arrayToUtcDate(dateToLocalArray(new Date(ms)));
        if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) return new Date(ms);
        return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
    }
    offsetForMarker(m) {
        if (this.timeZone === 'local') return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
        if (this.timeZone === 'UTC') return 0;
        if (this.namedTimeZoneImpl) return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
        return null;
    }
    // Conversion
    toDate(m, forcedTzo) {
        if (this.timeZone === 'local') return arrayToLocalDate(dateToUtcArray(m));
        if (this.timeZone === 'UTC') return new Date(m.valueOf()); // make sure it's a copy
        if (!this.namedTimeZoneImpl) return new Date(m.valueOf() - (forcedTzo || 0));
        return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 60000);
    }
}
class Theme {
    constructor(calendarOptions){
        if (this.iconOverrideOption) this.setIconOverride(calendarOptions[this.iconOverrideOption]);
    }
    setIconOverride(iconOverrideHash) {
        let iconClassesCopy;
        let buttonName;
        if (typeof iconOverrideHash === 'object' && iconOverrideHash) {
            iconClassesCopy = Object.assign({}, this.iconClasses);
            for(buttonName in iconOverrideHash)iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
            this.iconClasses = iconClassesCopy;
        } else if (iconOverrideHash === false) this.iconClasses = {};
    }
    applyIconOverridePrefix(className) {
        let prefix = this.iconOverridePrefix;
        if (prefix && className.indexOf(prefix) !== 0) className = prefix + className;
        return className;
    }
    getClass(key) {
        return this.classes[key] || '';
    }
    getIconClass(buttonName, isRtl) {
        let className;
        if (isRtl && this.rtlIconClasses) className = this.rtlIconClasses[buttonName] || this.iconClasses[buttonName];
        else className = this.iconClasses[buttonName];
        if (className) return `${this.baseIconClass} ${className}`;
        return '';
    }
    getCustomButtonIconClass(customButtonProps) {
        let className;
        if (this.iconOverrideCustomButtonOption) {
            className = customButtonProps[this.iconOverrideCustomButtonOption];
            if (className) return `${this.baseIconClass} ${this.applyIconOverridePrefix(className)}`;
        }
        return '';
    }
}
Theme.prototype.classes = {};
Theme.prototype.iconClasses = {};
Theme.prototype.baseIconClass = '';
Theme.prototype.iconOverridePrefix = '';
/*
NOTE: this can be a public API, especially createElement for hooks.
See examples/typescript-scheduler/src/index.ts
*/ function flushSync(runBeforeFlush) {
    runBeforeFlush();
    let oldDebounceRendering = _preact.options.debounceRendering; // orig
    let callbackQ = [];
    function execCallbackSync(callback) {
        callbackQ.push(callback);
    }
    _preact.options.debounceRendering = execCallbackSync;
    _preact.render(_preact.createElement(FakeComponent, {}), document.createElement('div'));
    while(callbackQ.length)callbackQ.shift()();
    _preact.options.debounceRendering = oldDebounceRendering;
}
class FakeComponent extends _preact.Component {
    render() {
        return _preact.createElement('div', {});
    }
    componentDidMount() {
        this.setState({});
    }
}
// TODO: use preact/compat instead?
function createContext(defaultValue) {
    let ContextType = _preact.createContext(defaultValue);
    let origProvider = ContextType.Provider;
    ContextType.Provider = function() {
        let isNew = !this.getChildContext;
        let children = origProvider.apply(this, arguments); // eslint-disable-line prefer-rest-params
        if (isNew) {
            let subs = [];
            this.shouldComponentUpdate = (_props)=>{
                if (this.props.value !== _props.value) subs.forEach((c)=>{
                    c.context = _props.value;
                    c.forceUpdate();
                });
            };
            this.sub = (c)=>{
                subs.push(c);
                let old = c.componentWillUnmount;
                c.componentWillUnmount = ()=>{
                    subs.splice(subs.indexOf(c), 1);
                    old && old.call(c);
                };
            };
        }
        return children;
    };
    return ContextType;
}
class ScrollResponder {
    constructor(execFunc, emitter, scrollTime, scrollTimeReset){
        this.execFunc = execFunc;
        this.emitter = emitter;
        this.scrollTime = scrollTime;
        this.scrollTimeReset = scrollTimeReset;
        this.handleScrollRequest = (request)=>{
            this.queuedRequest = Object.assign({}, this.queuedRequest || {}, request);
            this.drain();
        };
        emitter.on('_scrollRequest', this.handleScrollRequest);
        this.fireInitialScroll();
    }
    detach() {
        this.emitter.off('_scrollRequest', this.handleScrollRequest);
    }
    update(isDatesNew) {
        if (isDatesNew && this.scrollTimeReset) this.fireInitialScroll(); // will drain
        else this.drain();
    }
    fireInitialScroll() {
        this.handleScrollRequest({
            time: this.scrollTime
        });
    }
    drain() {
        if (this.queuedRequest && this.execFunc(this.queuedRequest)) this.queuedRequest = null;
    }
}
const ViewContextType = createContext({}); // for Components
function buildViewContext(viewSpec, viewApi, viewOptions, dateProfileGenerator, dateEnv, nowManager, theme, pluginHooks, dispatch, getCurrentData, emitter, calendarApi, registerInteractiveComponent, unregisterInteractiveComponent) {
    return {
        dateEnv,
        nowManager,
        options: viewOptions,
        pluginHooks,
        emitter,
        dispatch,
        getCurrentData,
        calendarApi,
        viewSpec,
        viewApi,
        dateProfileGenerator,
        theme,
        isRtl: viewOptions.direction === 'rtl',
        addResizeHandler (handler) {
            emitter.on('_resize', handler);
        },
        removeResizeHandler (handler) {
            emitter.off('_resize', handler);
        },
        createScrollResponder (execFunc) {
            return new ScrollResponder(execFunc, emitter, createDuration(viewOptions.scrollTime), viewOptions.scrollTimeReset);
        },
        registerInteractiveComponent,
        unregisterInteractiveComponent
    };
}
/* eslint max-classes-per-file: off */ class PureComponent extends (0, _preact.Component) {
    shouldComponentUpdate(nextProps, nextState) {
        if (this.debug) // eslint-disable-next-line no-console
        console.log(getUnequalProps(nextProps, this.props), getUnequalProps(nextState, this.state));
        return !compareObjs(this.props, nextProps, this.propEquality) || !compareObjs(this.state, nextState, this.stateEquality);
    }
    // HACK for freakin' React StrictMode
    safeSetState(newState) {
        if (!compareObjs(this.state, Object.assign(Object.assign({}, this.state), newState), this.stateEquality)) this.setState(newState);
    }
}
PureComponent.addPropsEquality = addPropsEquality;
PureComponent.addStateEquality = addStateEquality;
PureComponent.contextType = ViewContextType;
PureComponent.prototype.propEquality = {};
PureComponent.prototype.stateEquality = {};
class BaseComponent extends PureComponent {
}
BaseComponent.contextType = ViewContextType;
function addPropsEquality(propEquality) {
    let hash = Object.create(this.prototype.propEquality);
    Object.assign(hash, propEquality);
    this.prototype.propEquality = hash;
}
function addStateEquality(stateEquality) {
    let hash = Object.create(this.prototype.stateEquality);
    Object.assign(hash, stateEquality);
    this.prototype.stateEquality = hash;
}
// use other one
function setRef(ref, current) {
    if (typeof ref === 'function') ref(current);
    else if (ref) // see https://github.com/facebook/react/issues/13029
    ref.current = current;
}
class ContentInjector extends BaseComponent {
    constructor(){
        super(...arguments);
        this.id = guid();
        this.queuedDomNodes = [];
        this.currentDomNodes = [];
        this.handleEl = (el)=>{
            const { options } = this.context;
            const { generatorName } = this.props;
            if (!options.customRenderingReplaces || !hasCustomRenderingHandler(generatorName, options)) this.updateElRef(el);
        };
        this.updateElRef = (el)=>{
            if (this.props.elRef) setRef(this.props.elRef, el);
        };
    }
    render() {
        const { props, context } = this;
        const { options } = context;
        const { customGenerator, defaultGenerator, renderProps } = props;
        const attrs = buildElAttrs(props, [], this.handleEl);
        let useDefault = false;
        let innerContent;
        let queuedDomNodes = [];
        let currentGeneratorMeta;
        if (customGenerator != null) {
            const customGeneratorRes = typeof customGenerator === 'function' ? customGenerator(renderProps, (0, _preact.createElement)) : customGenerator;
            if (customGeneratorRes === true) useDefault = true;
            else {
                const isObject = customGeneratorRes && typeof customGeneratorRes === 'object'; // non-null
                if (isObject && 'html' in customGeneratorRes) attrs.dangerouslySetInnerHTML = {
                    __html: customGeneratorRes.html
                };
                else if (isObject && 'domNodes' in customGeneratorRes) queuedDomNodes = Array.prototype.slice.call(customGeneratorRes.domNodes);
                else if (isObject ? (0, _preact.isValidElement)(customGeneratorRes) // vdom node
                 : typeof customGeneratorRes !== 'function' // primitive value (like string or number)
                ) // use in vdom
                innerContent = customGeneratorRes;
                else // an exotic object for handleCustomRendering
                currentGeneratorMeta = customGeneratorRes;
            }
        } else useDefault = !hasCustomRenderingHandler(props.generatorName, options);
        if (useDefault && defaultGenerator) innerContent = defaultGenerator(renderProps);
        this.queuedDomNodes = queuedDomNodes;
        this.currentGeneratorMeta = currentGeneratorMeta;
        return (0, _preact.createElement)(props.elTag, attrs, innerContent);
    }
    componentDidMount() {
        this.applyQueueudDomNodes();
        this.triggerCustomRendering(true);
    }
    componentDidUpdate() {
        this.applyQueueudDomNodes();
        this.triggerCustomRendering(true);
    }
    componentWillUnmount() {
        this.triggerCustomRendering(false); // TODO: different API for removal?
    }
    triggerCustomRendering(isActive) {
        var _a;
        const { props, context } = this;
        const { handleCustomRendering, customRenderingMetaMap } = context.options;
        if (handleCustomRendering) {
            const generatorMeta = (_a = this.currentGeneratorMeta) !== null && _a !== void 0 ? _a : customRenderingMetaMap === null || customRenderingMetaMap === void 0 ? void 0 : customRenderingMetaMap[props.generatorName];
            if (generatorMeta) handleCustomRendering(Object.assign(Object.assign({
                id: this.id,
                isActive,
                containerEl: this.base,
                reportNewContainerEl: this.updateElRef,
                generatorMeta
            }, props), {
                elClasses: (props.elClasses || []).filter(isTruthy)
            }));
        }
    }
    applyQueueudDomNodes() {
        const { queuedDomNodes, currentDomNodes } = this;
        const el = this.base;
        if (!isArraysEqual(queuedDomNodes, currentDomNodes)) {
            currentDomNodes.forEach(removeElement);
            for (let newNode of queuedDomNodes)el.appendChild(newNode);
            this.currentDomNodes = queuedDomNodes;
        }
    }
}
ContentInjector.addPropsEquality({
    elClasses: isArraysEqual,
    elStyle: isPropsEqual,
    elAttrs: isNonHandlerPropsEqual,
    renderProps: isPropsEqual
});
// Util
/*
Does UI-framework provide custom way of rendering that does not use Preact VDOM
AND does the calendar's options define custom rendering?
AKA. Should we NOT render the default content?
*/ function hasCustomRenderingHandler(generatorName, options) {
    var _a;
    return Boolean(options.handleCustomRendering && generatorName && ((_a = options.customRenderingMetaMap) === null || _a === void 0 ? void 0 : _a[generatorName]));
}
function buildElAttrs(props, extraClassNames, elRef) {
    const attrs = Object.assign(Object.assign({}, props.elAttrs), {
        ref: elRef
    });
    if (props.elClasses || extraClassNames) attrs.className = (props.elClasses || []).concat(extraClassNames || []).concat(attrs.className || []).filter(Boolean).join(' ');
    if (props.elStyle) attrs.style = props.elStyle;
    return attrs;
}
function isTruthy(val) {
    return Boolean(val);
}
const RenderId = createContext(0);
class ContentContainer extends (0, _preact.Component) {
    constructor(){
        super(...arguments);
        this.InnerContent = InnerContentInjector.bind(undefined, this);
        this.handleEl = (el)=>{
            this.el = el;
            if (this.props.elRef) {
                setRef(this.props.elRef, el);
                if (el && this.didMountMisfire) this.componentDidMount();
            }
        };
    }
    render() {
        const { props } = this;
        const generatedClassNames = generateClassNames(props.classNameGenerator, props.renderProps);
        if (props.children) {
            const elAttrs = buildElAttrs(props, generatedClassNames, this.handleEl);
            const children = props.children(this.InnerContent, props.renderProps, elAttrs);
            if (props.elTag) return (0, _preact.createElement)(props.elTag, elAttrs, children);
            else return children;
        } else return (0, _preact.createElement)(ContentInjector, Object.assign(Object.assign({}, props), {
            elRef: this.handleEl,
            elTag: props.elTag || 'div',
            elClasses: (props.elClasses || []).concat(generatedClassNames),
            renderId: this.context
        }));
    }
    componentDidMount() {
        var _a, _b;
        if (this.el) (_b = (_a = this.props).didMount) === null || _b === void 0 || _b.call(_a, Object.assign(Object.assign({}, this.props.renderProps), {
            el: this.el
        }));
        else this.didMountMisfire = true;
    }
    componentWillUnmount() {
        var _a, _b;
        (_b = (_a = this.props).willUnmount) === null || _b === void 0 || _b.call(_a, Object.assign(Object.assign({}, this.props.renderProps), {
            el: this.el
        }));
    }
}
ContentContainer.contextType = RenderId;
function InnerContentInjector(containerComponent, props) {
    const parentProps = containerComponent.props;
    return (0, _preact.createElement)(ContentInjector, Object.assign({
        renderProps: parentProps.renderProps,
        generatorName: parentProps.generatorName,
        customGenerator: parentProps.customGenerator,
        defaultGenerator: parentProps.defaultGenerator,
        renderId: containerComponent.context
    }, props));
}
// Utils
function generateClassNames(classNameGenerator, renderProps) {
    const classNames = typeof classNameGenerator === 'function' ? classNameGenerator(renderProps) : classNameGenerator || [];
    return typeof classNames === 'string' ? [
        classNames
    ] : classNames;
}
class ViewContainer extends BaseComponent {
    render() {
        let { props, context } = this;
        let { options } = context;
        let renderProps = {
            view: context.viewApi
        };
        return (0, _preact.createElement)(ContentContainer, Object.assign({}, props, {
            elTag: props.elTag || 'div',
            elClasses: [
                ...buildViewClassNames(props.viewSpec),
                ...props.elClasses || []
            ],
            renderProps: renderProps,
            classNameGenerator: options.viewClassNames,
            generatorName: undefined,
            didMount: options.viewDidMount,
            willUnmount: options.viewWillUnmount
        }), ()=>props.children);
    }
}
function buildViewClassNames(viewSpec) {
    return [
        `fc-${viewSpec.type}-view`,
        'fc-view'
    ];
}
function parseRange(input, dateEnv) {
    let start = null;
    let end = null;
    if (input.start) start = dateEnv.createMarker(input.start);
    if (input.end) end = dateEnv.createMarker(input.end);
    if (!start && !end) return null;
    if (start && end && end < start) return null;
    return {
        start,
        end
    };
}
// SIDE-EFFECT: will mutate ranges.
// Will return a new array result.
function invertRanges(ranges, constraintRange) {
    let invertedRanges = [];
    let { start } = constraintRange; // the end of the previous range. the start of the new range
    let i;
    let dateRange;
    // ranges need to be in order. required for our date-walking algorithm
    ranges.sort(compareRanges);
    for(i = 0; i < ranges.length; i += 1){
        dateRange = ranges[i];
        // add the span of time before the event (if there is any)
        if (dateRange.start > start) invertedRanges.push({
            start,
            end: dateRange.start
        });
        if (dateRange.end > start) start = dateRange.end;
    }
    // add the span of time after the last event (if there is any)
    if (start < constraintRange.end) invertedRanges.push({
        start,
        end: constraintRange.end
    });
    return invertedRanges;
}
function compareRanges(range0, range1) {
    return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
}
function intersectRanges(range0, range1) {
    let { start, end } = range0;
    let newRange = null;
    if (range1.start !== null) {
        if (start === null) start = range1.start;
        else start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
    }
    if (range1.end != null) {
        if (end === null) end = range1.end;
        else end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
    }
    if (start === null || end === null || start < end) newRange = {
        start,
        end
    };
    return newRange;
}
function rangesEqual(range0, range1) {
    return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
}
function rangesIntersect(range0, range1) {
    return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);
}
function rangeContainsRange(outerRange, innerRange) {
    return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);
}
function rangeContainsMarker(range, date) {
    return (range.start === null || date >= range.start) && (range.end === null || date < range.end);
}
// If the given date is not within the given range, move it inside.
// (If it's past the end, make it one millisecond before the end).
function constrainMarkerToRange(date, range) {
    if (range.start != null && date < range.start) return range.start;
    if (range.end != null && date >= range.end) return new Date(range.end.valueOf() - 1);
    return date;
}
/* Date stuff that doesn't belong in datelib core
----------------------------------------------------------------------------------------------------------------------*/ // given a timed range, computes an all-day range that has the same exact duration,
// but whose start time is aligned with the start of the day.
function computeAlignedDayRange(timedRange) {
    let dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
    let start = startOfDay(timedRange.start);
    let end = addDays(start, dayCnt);
    return {
        start,
        end
    };
}
// given a timed range, computes an all-day range based on how for the end date bleeds into the next day
// TODO: give nextDayThreshold a default arg
function computeVisibleDayRange(timedRange, nextDayThreshold = createDuration(0)) {
    let startDay = null;
    let endDay = null;
    if (timedRange.end) {
        endDay = startOfDay(timedRange.end);
        let endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
        // If the end time is actually inclusively part of the next day and is equal to or
        // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
        // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.
        if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) endDay = addDays(endDay, 1);
    }
    if (timedRange.start) {
        startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
        // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.
        if (endDay && endDay <= startDay) endDay = addDays(startDay, 1);
    }
    return {
        start: startDay,
        end: endDay
    };
}
// spans from one day into another?
function isMultiDayRange(range) {
    let visibleRange = computeVisibleDayRange(range);
    return diffDays(visibleRange.start, visibleRange.end) > 1;
}
function diffDates(date0, date1, dateEnv, largeUnit) {
    if (largeUnit === 'year') return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
    if (largeUnit === 'month') return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
    return diffDayAndTime(date0, date1); // returns a duration
}
class DateProfileGenerator {
    constructor(props){
        this.props = props;
        this.initHiddenDays();
    }
    /* Date Range Computation
    ------------------------------------------------------------------------------------------------------------------*/ // Builds a structure with info about what the dates/ranges will be for the "prev" view.
    buildPrev(currentDateProfile, currentDate, forceToValid) {
        let { dateEnv } = this.props;
        let prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);
        return this.build(prevDate, -1, forceToValid);
    }
    // Builds a structure with info about what the dates/ranges will be for the "next" view.
    buildNext(currentDateProfile, currentDate, forceToValid) {
        let { dateEnv } = this.props;
        let nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);
        return this.build(nextDate, 1, forceToValid);
    }
    // Builds a structure holding dates/ranges for rendering around the given date.
    // Optional direction param indicates whether the date is being incremented/decremented
    // from its previous value. decremented = -1, incremented = 1 (default).
    build(currentDate, direction, forceToValid = true) {
        let { props } = this;
        let validRange;
        let currentInfo;
        let isRangeAllDay;
        let renderRange;
        let activeRange;
        let isValid;
        validRange = this.buildValidRange();
        validRange = this.trimHiddenDays(validRange);
        if (forceToValid) currentDate = constrainMarkerToRange(currentDate, validRange);
        currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
        isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
        renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
        renderRange = this.trimHiddenDays(renderRange);
        activeRange = renderRange;
        if (!props.showNonCurrentDates) activeRange = intersectRanges(activeRange, currentInfo.range);
        activeRange = this.adjustActiveRange(activeRange);
        activeRange = intersectRanges(activeRange, validRange); // might return null
        // it's invalid if the originally requested date is not contained,
        // or if the range is completely outside of the valid range.
        isValid = rangesIntersect(currentInfo.range, validRange);
        // HACK: constrain to render-range so `currentDate` is more useful to view rendering
        if (!rangeContainsMarker(renderRange, currentDate)) currentDate = renderRange.start;
        return {
            currentDate,
            // constraint for where prev/next operations can go and where events can be dragged/resized to.
            // an object with optional start and end properties.
            validRange,
            // range the view is formally responsible for.
            // for example, a month view might have 1st-31st, excluding padded dates
            currentRange: currentInfo.range,
            // name of largest unit being displayed, like "month" or "week"
            currentRangeUnit: currentInfo.unit,
            isRangeAllDay,
            // dates that display events and accept drag-n-drop
            // will be `null` if no dates accept events
            activeRange,
            // date range with a rendered skeleton
            // includes not-active days that need some sort of DOM
            renderRange,
            // Duration object that denotes the first visible time of any given day
            slotMinTime: props.slotMinTime,
            // Duration object that denotes the exclusive visible end time of any given day
            slotMaxTime: props.slotMaxTime,
            isValid,
            // how far the current date will move for a prev/next operation
            dateIncrement: this.buildDateIncrement(currentInfo.duration)
        };
    }
    // Builds an object with optional start/end properties.
    // Indicates the minimum/maximum dates to display.
    // not responsible for trimming hidden days.
    buildValidRange() {
        let input = this.props.validRangeInput;
        let simpleInput = typeof input === 'function' ? input.call(this.props.calendarApi, this.props.dateEnv.toDate(this.props.nowManager.getDateMarker())) : input;
        return this.refineRange(simpleInput) || {
            start: null,
            end: null
        }; // completely open-ended
    }
    // Builds a structure with info about the "current" range, the range that is
    // highlighted as being the current month for example.
    // See build() for a description of `direction`.
    // Guaranteed to have `range` and `unit` properties. `duration` is optional.
    buildCurrentRangeInfo(date, direction) {
        let { props } = this;
        let duration = null;
        let unit = null;
        let range = null;
        let dayCount;
        if (props.duration) {
            duration = props.duration;
            unit = props.durationUnit;
            range = this.buildRangeFromDuration(date, direction, duration, unit);
        } else if (dayCount = this.props.dayCount) {
            unit = 'day';
            range = this.buildRangeFromDayCount(date, direction, dayCount);
        } else if (range = this.buildCustomVisibleRange(date)) unit = props.dateEnv.greatestWholeUnit(range.start, range.end).unit;
        else {
            duration = this.getFallbackDuration();
            unit = greatestDurationDenominator(duration).unit;
            range = this.buildRangeFromDuration(date, direction, duration, unit);
        }
        return {
            duration,
            unit,
            range
        };
    }
    getFallbackDuration() {
        return createDuration({
            day: 1
        });
    }
    // Returns a new activeRange to have time values (un-ambiguate)
    // slotMinTime or slotMaxTime causes the range to expand.
    adjustActiveRange(range) {
        let { dateEnv, usesMinMaxTime, slotMinTime, slotMaxTime } = this.props;
        let { start, end } = range;
        if (usesMinMaxTime) {
            // expand active range if slotMinTime is negative (why not when positive?)
            if (asRoughDays(slotMinTime) < 0) {
                start = startOfDay(start); // necessary?
                start = dateEnv.add(start, slotMinTime);
            }
            // expand active range if slotMaxTime is beyond one day (why not when negative?)
            if (asRoughDays(slotMaxTime) > 1) {
                end = startOfDay(end); // necessary?
                end = addDays(end, -1);
                end = dateEnv.add(end, slotMaxTime);
            }
        }
        return {
            start,
            end
        };
    }
    // Builds the "current" range when it is specified as an explicit duration.
    // `unit` is the already-computed greatestDurationDenominator unit of duration.
    buildRangeFromDuration(date, direction, duration, unit) {
        let { dateEnv, dateAlignment } = this.props;
        let start;
        let end;
        let res;
        // compute what the alignment should be
        if (!dateAlignment) {
            let { dateIncrement } = this.props;
            if (dateIncrement) {
                // use the smaller of the two units
                if (asRoughMs(dateIncrement) < asRoughMs(duration)) dateAlignment = greatestDurationDenominator(dateIncrement).unit;
                else dateAlignment = unit;
            } else dateAlignment = unit;
        }
        // if the view displays a single day or smaller
        if (asRoughDays(duration) <= 1) {
            if (this.isHiddenDay(start)) {
                start = this.skipHiddenDays(start, direction);
                start = startOfDay(start);
            }
        }
        function computeRes() {
            start = dateEnv.startOf(date, dateAlignment);
            end = dateEnv.add(start, duration);
            res = {
                start,
                end
            };
        }
        computeRes();
        // if range is completely enveloped by hidden days, go past the hidden days
        if (!this.trimHiddenDays(res)) {
            date = this.skipHiddenDays(date, direction);
            computeRes();
        }
        return res;
    }
    // Builds the "current" range when a dayCount is specified.
    buildRangeFromDayCount(date, direction, dayCount) {
        let { dateEnv, dateAlignment } = this.props;
        let runningCount = 0;
        let start = date;
        let end;
        if (dateAlignment) start = dateEnv.startOf(start, dateAlignment);
        start = startOfDay(start);
        start = this.skipHiddenDays(start, direction);
        end = start;
        do {
            end = addDays(end, 1);
            if (!this.isHiddenDay(end)) runningCount += 1;
        }while (runningCount < dayCount);
        return {
            start,
            end
        };
    }
    // Builds a normalized range object for the "visible" range,
    // which is a way to define the currentRange and activeRange at the same time.
    buildCustomVisibleRange(date) {
        let { props } = this;
        let input = props.visibleRangeInput;
        let simpleInput = typeof input === 'function' ? input.call(props.calendarApi, props.dateEnv.toDate(date)) : input;
        let range = this.refineRange(simpleInput);
        if (range && (range.start == null || range.end == null)) return null;
        return range;
    }
    // Computes the range that will represent the element/cells for *rendering*,
    // but which may have voided days/times.
    // not responsible for trimming hidden days.
    buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {
        return currentRange;
    }
    // Compute the duration value that should be added/substracted to the current date
    // when a prev/next operation happens.
    buildDateIncrement(fallback) {
        let { dateIncrement } = this.props;
        let customAlignment;
        if (dateIncrement) return dateIncrement;
        if (customAlignment = this.props.dateAlignment) return createDuration(1, customAlignment);
        if (fallback) return fallback;
        return createDuration({
            days: 1
        });
    }
    refineRange(rangeInput) {
        if (rangeInput) {
            let range = parseRange(rangeInput, this.props.dateEnv);
            if (range) range = computeVisibleDayRange(range);
            return range;
        }
        return null;
    }
    /* Hidden Days
    ------------------------------------------------------------------------------------------------------------------*/ // Initializes internal variables related to calculating hidden days-of-week
    initHiddenDays() {
        let hiddenDays = this.props.hiddenDays || []; // array of day-of-week indices that are hidden
        let isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)
        let dayCnt = 0;
        let i;
        if (this.props.weekends === false) hiddenDays.push(0, 6); // 0=sunday, 6=saturday
        for(i = 0; i < 7; i += 1)if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) dayCnt += 1;
        if (!dayCnt) throw new Error('invalid hiddenDays'); // all days were hidden? bad.
        this.isHiddenDayHash = isHiddenDayHash;
    }
    // Remove days from the beginning and end of the range that are computed as hidden.
    // If the whole range is trimmed off, returns null
    trimHiddenDays(range) {
        let { start, end } = range;
        if (start) start = this.skipHiddenDays(start);
        if (end) end = this.skipHiddenDays(end, -1, true);
        if (start == null || end == null || start < end) return {
            start,
            end
        };
        return null;
    }
    // Is the current day hidden?
    // `day` is a day-of-week index (0-6), or a Date (used for UTC)
    isHiddenDay(day) {
        if (day instanceof Date) day = day.getUTCDay();
        return this.isHiddenDayHash[day];
    }
    // Incrementing the current day until it is no longer a hidden day, returning a copy.
    // DOES NOT CONSIDER validRange!
    // If the initial value of `date` is not a hidden day, don't do anything.
    // Pass `isExclusive` as `true` if you are dealing with an end date.
    // `inc` defaults to `1` (increment one day forward each time)
    skipHiddenDays(date, inc = 1, isExclusive = false) {
        while(this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7])date = addDays(date, inc);
        return date;
    }
}
function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
    return {
        instanceId: guid(),
        defId,
        range,
        forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
        forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
    };
}
function parseRecurring(refined, defaultAllDay, dateEnv, recurringTypes) {
    for(let i = 0; i < recurringTypes.length; i += 1){
        let parsed = recurringTypes[i].parse(refined, dateEnv);
        if (parsed) {
            let { allDay } = refined;
            if (allDay == null) {
                allDay = defaultAllDay;
                if (allDay == null) {
                    allDay = parsed.allDayGuess;
                    if (allDay == null) allDay = false;
                }
            }
            return {
                allDay,
                duration: parsed.duration,
                typeData: parsed.typeData,
                typeId: i
            };
        }
    }
    return null;
}
function expandRecurring(eventStore, framingRange, context) {
    let { dateEnv, pluginHooks, options } = context;
    let { defs, instances } = eventStore;
    // remove existing recurring instances
    // TODO: bad. always expand events as a second step
    instances = filterHash(instances, (instance)=>!defs[instance.defId].recurringDef);
    for(let defId in defs){
        let def = defs[defId];
        if (def.recurringDef) {
            let { duration } = def.recurringDef;
            if (!duration) duration = def.allDay ? options.defaultAllDayEventDuration : options.defaultTimedEventDuration;
            let starts = expandRecurringRanges(def, duration, framingRange, dateEnv, pluginHooks.recurringTypes);
            for (let start of starts){
                let instance = createEventInstance(defId, {
                    start,
                    end: dateEnv.add(start, duration)
                });
                instances[instance.instanceId] = instance;
            }
        }
    }
    return {
        defs,
        instances
    };
}
/*
Event MUST have a recurringDef
*/ function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
    let typeDef = recurringTypes[eventDef.recurringDef.typeId];
    let markers = typeDef.expand(eventDef.recurringDef.typeData, {
        start: dateEnv.subtract(framingRange.start, duration),
        end: framingRange.end
    }, dateEnv);
    // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to
    if (eventDef.allDay) markers = markers.map(startOfDay);
    return markers;
}
const EVENT_NON_DATE_REFINERS = {
    id: String,
    groupId: String,
    title: String,
    url: String,
    interactive: Boolean
};
const EVENT_DATE_REFINERS = {
    start: identity,
    end: identity,
    date: identity,
    allDay: Boolean
};
const EVENT_REFINERS = Object.assign(Object.assign(Object.assign({}, EVENT_NON_DATE_REFINERS), EVENT_DATE_REFINERS), {
    extendedProps: identity
});
function parseEvent(raw, eventSource, context, allowOpenRange, refiners = buildEventRefiners(context), defIdMap, instanceIdMap) {
    let { refined, extra } = refineEventDef(raw, context, refiners);
    let defaultAllDay = computeIsDefaultAllDay(eventSource, context);
    let recurringRes = parseRecurring(refined, defaultAllDay, context.dateEnv, context.pluginHooks.recurringTypes);
    if (recurringRes) {
        let def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : '', recurringRes.allDay, Boolean(recurringRes.duration), context, defIdMap);
        def.recurringDef = {
            typeId: recurringRes.typeId,
            typeData: recurringRes.typeData,
            duration: recurringRes.duration
        };
        return {
            def,
            instance: null
        };
    }
    let singleRes = parseSingle(refined, defaultAllDay, context, allowOpenRange);
    if (singleRes) {
        let def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : '', singleRes.allDay, singleRes.hasEnd, context, defIdMap);
        let instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
        if (instanceIdMap && def.publicId && instanceIdMap[def.publicId]) instance.instanceId = instanceIdMap[def.publicId];
        return {
            def,
            instance
        };
    }
    return null;
}
function refineEventDef(raw, context, refiners = buildEventRefiners(context)) {
    return refineProps(raw, refiners);
}
function buildEventRefiners(context) {
    return Object.assign(Object.assign(Object.assign({}, EVENT_UI_REFINERS), EVENT_REFINERS), context.pluginHooks.eventRefiners);
}
/*
Will NOT populate extendedProps with the leftover properties.
Will NOT populate date-related props.
*/ function parseEventDef(refined, extra, sourceId, allDay, hasEnd, context, defIdMap) {
    let def = {
        title: refined.title || '',
        groupId: refined.groupId || '',
        publicId: refined.id || '',
        url: refined.url || '',
        recurringDef: null,
        defId: (defIdMap && refined.id ? defIdMap[refined.id] : '') || guid(),
        sourceId,
        allDay,
        hasEnd,
        interactive: refined.interactive,
        ui: createEventUi(refined, context),
        extendedProps: Object.assign(Object.assign({}, refined.extendedProps || {}), extra)
    };
    for (let memberAdder of context.pluginHooks.eventDefMemberAdders)Object.assign(def, memberAdder(refined));
    // help out EventImpl from having user modify props
    Object.freeze(def.ui.classNames);
    Object.freeze(def.extendedProps);
    return def;
}
function parseSingle(refined, defaultAllDay, context, allowOpenRange) {
    let { allDay } = refined;
    let startMeta;
    let startMarker = null;
    let hasEnd = false;
    let endMeta;
    let endMarker = null;
    let startInput = refined.start != null ? refined.start : refined.date;
    startMeta = context.dateEnv.createMarkerMeta(startInput);
    if (startMeta) startMarker = startMeta.marker;
    else if (!allowOpenRange) return null;
    if (refined.end != null) endMeta = context.dateEnv.createMarkerMeta(refined.end);
    if (allDay == null) {
        if (defaultAllDay != null) allDay = defaultAllDay;
        else // fall back to the date props LAST
        allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);
    }
    if (allDay && startMarker) startMarker = startOfDay(startMarker);
    if (endMeta) {
        endMarker = endMeta.marker;
        if (allDay) endMarker = startOfDay(endMarker);
        if (startMarker && endMarker <= startMarker) endMarker = null;
    }
    if (endMarker) hasEnd = true;
    else if (!allowOpenRange) {
        hasEnd = context.options.forceEventDuration || false;
        endMarker = context.dateEnv.add(startMarker, allDay ? context.options.defaultAllDayEventDuration : context.options.defaultTimedEventDuration);
    }
    return {
        allDay,
        hasEnd,
        range: {
            start: startMarker,
            end: endMarker
        },
        forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
        forcedEndTzo: endMeta ? endMeta.forcedTzo : null
    };
}
function computeIsDefaultAllDay(eventSource, context) {
    let res = null;
    if (eventSource) res = eventSource.defaultAllDay;
    if (res == null) res = context.options.defaultAllDay;
    return res;
}
function parseEvents(rawEvents, eventSource, context, allowOpenRange, defIdMap, instanceIdMap) {
    let eventStore = createEmptyEventStore();
    let eventRefiners = buildEventRefiners(context);
    for (let rawEvent of rawEvents){
        let tuple = parseEvent(rawEvent, eventSource, context, allowOpenRange, eventRefiners, defIdMap, instanceIdMap);
        if (tuple) eventTupleToStore(tuple, eventStore);
    }
    return eventStore;
}
function eventTupleToStore(tuple, eventStore = createEmptyEventStore()) {
    eventStore.defs[tuple.def.defId] = tuple.def;
    if (tuple.instance) eventStore.instances[tuple.instance.instanceId] = tuple.instance;
    return eventStore;
}
// retrieves events that have the same groupId as the instance specified by `instanceId`
// or they are the same as the instance.
// why might instanceId not be in the store? an event from another calendar?
function getRelevantEvents(eventStore, instanceId) {
    let instance = eventStore.instances[instanceId];
    if (instance) {
        let def = eventStore.defs[instance.defId];
        // get events/instances with same group
        let newStore = filterEventStoreDefs(eventStore, (lookDef)=>isEventDefsGrouped(def, lookDef));
        // add the original
        // TODO: wish we could use eventTupleToStore or something like it
        newStore.defs[def.defId] = def;
        newStore.instances[instance.instanceId] = instance;
        return newStore;
    }
    return createEmptyEventStore();
}
function isEventDefsGrouped(def0, def1) {
    return Boolean(def0.groupId && def0.groupId === def1.groupId);
}
function createEmptyEventStore() {
    return {
        defs: {},
        instances: {}
    };
}
function mergeEventStores(store0, store1) {
    return {
        defs: Object.assign(Object.assign({}, store0.defs), store1.defs),
        instances: Object.assign(Object.assign({}, store0.instances), store1.instances)
    };
}
function filterEventStoreDefs(eventStore, filterFunc) {
    let defs = filterHash(eventStore.defs, filterFunc);
    let instances = filterHash(eventStore.instances, (instance)=>defs[instance.defId] // still exists?
    );
    return {
        defs,
        instances
    };
}
function excludeSubEventStore(master, sub) {
    let { defs, instances } = master;
    let filteredDefs = {};
    let filteredInstances = {};
    for(let defId in defs)if (!sub.defs[defId]) filteredDefs[defId] = defs[defId];
    for(let instanceId in instances)if (!sub.instances[instanceId] && // not explicitly excluded
    filteredDefs[instances[instanceId].defId] // def wasn't filtered away
    ) filteredInstances[instanceId] = instances[instanceId];
    return {
        defs: filteredDefs,
        instances: filteredInstances
    };
}
function normalizeConstraint(input, context) {
    if (Array.isArray(input)) return parseEvents(input, null, context, true); // allowOpenRange=true
    if (typeof input === 'object' && input) return parseEvents([
        input
    ], null, context, true); // allowOpenRange=true
    if (input != null) return String(input);
    return null;
}
function parseClassNames(raw) {
    if (Array.isArray(raw)) return raw;
    if (typeof raw === 'string') return raw.split(/\s+/);
    return [];
}
// TODO: better called "EventSettings" or "EventConfig"
// TODO: move this file into structs
// TODO: separate constraint/overlap/allow, because selection uses only that, not other props
const EVENT_UI_REFINERS = {
    display: String,
    editable: Boolean,
    startEditable: Boolean,
    durationEditable: Boolean,
    constraint: identity,
    overlap: identity,
    allow: identity,
    className: parseClassNames,
    classNames: parseClassNames,
    color: String,
    backgroundColor: String,
    borderColor: String,
    textColor: String
};
const EMPTY_EVENT_UI = {
    display: null,
    startEditable: null,
    durationEditable: null,
    constraints: [],
    overlap: null,
    allows: [],
    backgroundColor: '',
    borderColor: '',
    textColor: '',
    classNames: []
};
function createEventUi(refined, context) {
    let constraint = normalizeConstraint(refined.constraint, context);
    return {
        display: refined.display || null,
        startEditable: refined.startEditable != null ? refined.startEditable : refined.editable,
        durationEditable: refined.durationEditable != null ? refined.durationEditable : refined.editable,
        constraints: constraint != null ? [
            constraint
        ] : [],
        overlap: refined.overlap != null ? refined.overlap : null,
        allows: refined.allow != null ? [
            refined.allow
        ] : [],
        backgroundColor: refined.backgroundColor || refined.color || '',
        borderColor: refined.borderColor || refined.color || '',
        textColor: refined.textColor || '',
        classNames: (refined.className || []).concat(refined.classNames || [])
    };
}
// TODO: prevent against problems with <2 args!
function combineEventUis(uis) {
    return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
}
function combineTwoEventUis(item0, item1) {
    return {
        display: item1.display != null ? item1.display : item0.display,
        startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
        durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
        constraints: item0.constraints.concat(item1.constraints),
        overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
        allows: item0.allows.concat(item1.allows),
        backgroundColor: item1.backgroundColor || item0.backgroundColor,
        borderColor: item1.borderColor || item0.borderColor,
        textColor: item1.textColor || item0.textColor,
        classNames: item0.classNames.concat(item1.classNames)
    };
}
const EVENT_SOURCE_REFINERS = {
    id: String,
    defaultAllDay: Boolean,
    url: String,
    format: String,
    events: identity,
    eventDataTransform: identity,
    // for any network-related sources
    success: identity,
    failure: identity
};
function parseEventSource(raw, context, refiners = buildEventSourceRefiners(context)) {
    let rawObj;
    if (typeof raw === 'string') rawObj = {
        url: raw
    };
    else if (typeof raw === 'function' || Array.isArray(raw)) rawObj = {
        events: raw
    };
    else if (typeof raw === 'object' && raw) rawObj = raw;
    if (rawObj) {
        let { refined, extra } = refineProps(rawObj, refiners);
        let metaRes = buildEventSourceMeta(refined, context);
        if (metaRes) return {
            _raw: raw,
            isFetching: false,
            latestFetchId: '',
            fetchRange: null,
            defaultAllDay: refined.defaultAllDay,
            eventDataTransform: refined.eventDataTransform,
            success: refined.success,
            failure: refined.failure,
            publicId: refined.id || '',
            sourceId: guid(),
            sourceDefId: metaRes.sourceDefId,
            meta: metaRes.meta,
            ui: createEventUi(refined, context),
            extendedProps: extra
        };
    }
    return null;
}
function buildEventSourceRefiners(context) {
    return Object.assign(Object.assign(Object.assign({}, EVENT_UI_REFINERS), EVENT_SOURCE_REFINERS), context.pluginHooks.eventSourceRefiners);
}
function buildEventSourceMeta(raw, context) {
    let defs = context.pluginHooks.eventSourceDefs;
    for(let i = defs.length - 1; i >= 0; i -= 1){
        let def = defs[i];
        let meta = def.parseMeta(raw);
        if (meta) return {
            sourceDefId: i,
            meta
        };
    }
    return null;
}
function reduceEventStore(eventStore, action, eventSources, dateProfile, context) {
    switch(action.type){
        case 'RECEIVE_EVENTS':
            return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, context);
        case 'RESET_RAW_EVENTS':
            return resetRawEvents(eventStore, eventSources[action.sourceId], action.rawEvents, dateProfile.activeRange, context);
        case 'ADD_EVENTS':
            return addEvent(eventStore, action.eventStore, dateProfile ? dateProfile.activeRange : null, context);
        case 'RESET_EVENTS':
            return action.eventStore;
        case 'MERGE_EVENTS':
            return mergeEventStores(eventStore, action.eventStore);
        case 'PREV':
        case 'NEXT':
        case 'CHANGE_DATE':
        case 'CHANGE_VIEW_TYPE':
            if (dateProfile) return expandRecurring(eventStore, dateProfile.activeRange, context);
            return eventStore;
        case 'REMOVE_EVENTS':
            return excludeSubEventStore(eventStore, action.eventStore);
        case 'REMOVE_EVENT_SOURCE':
            return excludeEventsBySourceId(eventStore, action.sourceId);
        case 'REMOVE_ALL_EVENT_SOURCES':
            return filterEventStoreDefs(eventStore, (eventDef)=>!eventDef.sourceId // only keep events with no source id
            );
        case 'REMOVE_ALL_EVENTS':
            return createEmptyEventStore();
        default:
            return eventStore;
    }
}
function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, context) {
    if (eventSource && // not already removed
    fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
    ) {
        let subset = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context);
        if (fetchRange) subset = expandRecurring(subset, fetchRange, context);
        return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
    }
    return eventStore;
}
function resetRawEvents(existingEventStore, eventSource, rawEvents, activeRange, context) {
    const { defIdMap, instanceIdMap } = buildPublicIdMaps(existingEventStore);
    let newEventStore = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context, false, defIdMap, instanceIdMap);
    return expandRecurring(newEventStore, activeRange, context);
}
function transformRawEvents(rawEvents, eventSource, context) {
    let calEachTransform = context.options.eventDataTransform;
    let sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;
    if (sourceEachTransform) rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
    if (calEachTransform) rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
    return rawEvents;
}
function transformEachRawEvent(rawEvents, func) {
    let refinedEvents;
    if (!func) refinedEvents = rawEvents;
    else {
        refinedEvents = [];
        for (let rawEvent of rawEvents){
            let refinedEvent = func(rawEvent);
            if (refinedEvent) refinedEvents.push(refinedEvent);
            else if (refinedEvent == null) refinedEvents.push(rawEvent);
             // if a different falsy value, do nothing
        }
    }
    return refinedEvents;
}
function addEvent(eventStore, subset, expandRange, context) {
    if (expandRange) subset = expandRecurring(subset, expandRange, context);
    return mergeEventStores(eventStore, subset);
}
function rezoneEventStoreDates(eventStore, oldDateEnv, newDateEnv) {
    let { defs } = eventStore;
    let instances = mapHash(eventStore.instances, (instance)=>{
        let def = defs[instance.defId];
        if (def.allDay) return instance; // isn't dependent on timezone
        return Object.assign(Object.assign({}, instance), {
            range: {
                start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
                end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
            },
            forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,
            forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo
        });
    });
    return {
        defs,
        instances
    };
}
function excludeEventsBySourceId(eventStore, sourceId) {
    return filterEventStoreDefs(eventStore, (eventDef)=>eventDef.sourceId !== sourceId);
}
// QUESTION: why not just return instances? do a general object-property-exclusion util
function excludeInstances(eventStore, removals) {
    return {
        defs: eventStore.defs,
        instances: filterHash(eventStore.instances, (instance)=>!removals[instance.instanceId])
    };
}
function buildPublicIdMaps(eventStore) {
    const { defs, instances } = eventStore;
    const defIdMap = {};
    const instanceIdMap = {};
    for(let defId in defs){
        const def = defs[defId];
        const { publicId } = def;
        if (publicId) defIdMap[publicId] = defId;
    }
    for(let instanceId in instances){
        const instance = instances[instanceId];
        const def = defs[instance.defId];
        const { publicId } = def;
        if (publicId) instanceIdMap[publicId] = instanceId;
    }
    return {
        defIdMap,
        instanceIdMap
    };
}
class Emitter {
    constructor(){
        this.handlers = {};
        this.thisContext = null;
    }
    setThisContext(thisContext) {
        this.thisContext = thisContext;
    }
    setOptions(options) {
        this.options = options;
    }
    on(type, handler) {
        addToHash(this.handlers, type, handler);
    }
    off(type, handler) {
        removeFromHash(this.handlers, type, handler);
    }
    trigger(type, ...args) {
        let attachedHandlers = this.handlers[type] || [];
        let optionHandler = this.options && this.options[type];
        let handlers = [].concat(optionHandler || [], attachedHandlers);
        for (let handler of handlers)handler.apply(this.thisContext, args);
    }
    hasHandlers(type) {
        return Boolean(this.handlers[type] && this.handlers[type].length || this.options && this.options[type]);
    }
}
function addToHash(hash, type, handler) {
    (hash[type] || (hash[type] = [])).push(handler);
}
function removeFromHash(hash, type, handler) {
    if (handler) {
        if (hash[type]) hash[type] = hash[type].filter((func)=>func !== handler);
    } else delete hash[type]; // remove all handler funcs for this type
}
const DEF_DEFAULTS = {
    startTime: '09:00',
    endTime: '17:00',
    daysOfWeek: [
        1,
        2,
        3,
        4,
        5
    ],
    display: 'inverse-background',
    classNames: 'fc-non-business',
    groupId: '_businessHours'
};
/*
TODO: pass around as EventDefHash!!!
*/ function parseBusinessHours(input, context) {
    return parseEvents(refineInputs(input), null, context);
}
function refineInputs(input) {
    let rawDefs;
    if (input === true) rawDefs = [
        {}
    ]; // will get DEF_DEFAULTS verbatim
    else if (Array.isArray(input)) // if specifying an array, every sub-definition NEEDS a day-of-week
    rawDefs = input.filter((rawDef)=>rawDef.daysOfWeek);
    else if (typeof input === 'object' && input) rawDefs = [
        input
    ];
    else rawDefs = [];
    rawDefs = rawDefs.map((rawDef)=>Object.assign(Object.assign({}, DEF_DEFAULTS), rawDef));
    return rawDefs;
}
function triggerDateSelect(selection, pev, context) {
    context.emitter.trigger('select', Object.assign(Object.assign({}, buildDateSpanApiWithContext(selection, context)), {
        jsEvent: pev ? pev.origEvent : null,
        view: context.viewApi || context.calendarApi.view
    }));
}
function triggerDateUnselect(pev, context) {
    context.emitter.trigger('unselect', {
        jsEvent: pev ? pev.origEvent : null,
        view: context.viewApi || context.calendarApi.view
    });
}
function buildDateSpanApiWithContext(dateSpan, context) {
    let props = {};
    for (let transform of context.pluginHooks.dateSpanTransforms)Object.assign(props, transform(dateSpan, context));
    Object.assign(props, buildDateSpanApi(dateSpan, context.dateEnv));
    return props;
}
// Given an event's allDay status and start date, return what its fallback end date should be.
// TODO: rename to computeDefaultEventEnd
function getDefaultEventEnd(allDay, marker, context) {
    let { dateEnv, options } = context;
    let end = marker;
    if (allDay) {
        end = startOfDay(end);
        end = dateEnv.add(end, options.defaultAllDayEventDuration);
    } else end = dateEnv.add(end, options.defaultTimedEventDuration);
    return end;
}
// applies the mutation to ALL defs/instances within the event store
function applyMutationToEventStore(eventStore, eventConfigBase, mutation, context) {
    let eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
    let dest = createEmptyEventStore();
    for(let defId in eventStore.defs){
        let def = eventStore.defs[defId];
        dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, context);
    }
    for(let instanceId in eventStore.instances){
        let instance = eventStore.instances[instanceId];
        let def = dest.defs[instance.defId]; // important to grab the newly modified def
        dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, context);
    }
    return dest;
}
function applyMutationToEventDef(eventDef, eventConfig, mutation, context) {
    let standardProps = mutation.standardProps || {};
    // if hasEnd has not been specified, guess a good value based on deltas.
    // if duration will change, there's no way the default duration will persist,
    // and thus, we need to mark the event as having a real end
    if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) standardProps.hasEnd = true; // TODO: is this mutation okay?
    let copy = Object.assign(Object.assign(Object.assign({}, eventDef), standardProps), {
        ui: Object.assign(Object.assign({}, eventDef.ui), standardProps.ui)
    });
    if (mutation.extendedProps) copy.extendedProps = Object.assign(Object.assign({}, copy.extendedProps), mutation.extendedProps);
    for (let applier of context.pluginHooks.eventDefMutationAppliers)applier(copy, mutation, context);
    if (!copy.hasEnd && context.options.forceEventDuration) copy.hasEnd = true;
    return copy;
}
function applyMutationToEventInstance(eventInstance, eventDef, eventConfig, mutation, context) {
    let { dateEnv } = context;
    let forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
    let clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;
    let copy = Object.assign({}, eventInstance);
    if (forceAllDay) copy.range = computeAlignedDayRange(copy.range);
    if (mutation.datesDelta && eventConfig.startEditable) copy.range = {
        start: dateEnv.add(copy.range.start, mutation.datesDelta),
        end: dateEnv.add(copy.range.end, mutation.datesDelta)
    };
    if (mutation.startDelta && eventConfig.durationEditable) copy.range = {
        start: dateEnv.add(copy.range.start, mutation.startDelta),
        end: copy.range.end
    };
    if (mutation.endDelta && eventConfig.durationEditable) copy.range = {
        start: copy.range.start,
        end: dateEnv.add(copy.range.end, mutation.endDelta)
    };
    if (clearEnd) copy.range = {
        start: copy.range.start,
        end: getDefaultEventEnd(eventDef.allDay, copy.range.start, context)
    };
    // in case event was all-day but the supplied deltas were not
    // better util for this?
    if (eventDef.allDay) copy.range = {
        start: startOfDay(copy.range.start),
        end: startOfDay(copy.range.end)
    };
    // handle invalid durations
    if (copy.range.end < copy.range.start) copy.range.end = getDefaultEventEnd(eventDef.allDay, copy.range.start, context);
    return copy;
}
class EventSourceImpl {
    constructor(context, internalEventSource){
        this.context = context;
        this.internalEventSource = internalEventSource;
    }
    remove() {
        this.context.dispatch({
            type: 'REMOVE_EVENT_SOURCE',
            sourceId: this.internalEventSource.sourceId
        });
    }
    refetch() {
        this.context.dispatch({
            type: 'FETCH_EVENT_SOURCES',
            sourceIds: [
                this.internalEventSource.sourceId
            ],
            isRefetch: true
        });
    }
    get id() {
        return this.internalEventSource.publicId;
    }
    get url() {
        return this.internalEventSource.meta.url;
    }
    get format() {
        return this.internalEventSource.meta.format; // TODO: bad. not guaranteed
    }
}
class EventImpl {
    // instance will be null if expressing a recurring event that has no current instances,
    // OR if trying to validate an incoming external event that has no dates assigned
    constructor(context, def, instance){
        this._context = context;
        this._def = def;
        this._instance = instance || null;
    }
    /*
    TODO: make event struct more responsible for this
    */ setProp(name, val) {
        if (name in EVENT_DATE_REFINERS) console.warn('Could not set date-related prop \'name\'. Use one of the date-related methods instead.');
        else if (name === 'id') {
            val = EVENT_NON_DATE_REFINERS[name](val);
            this.mutate({
                standardProps: {
                    publicId: val
                }
            });
        } else if (name in EVENT_NON_DATE_REFINERS) {
            val = EVENT_NON_DATE_REFINERS[name](val);
            this.mutate({
                standardProps: {
                    [name]: val
                }
            });
        } else if (name in EVENT_UI_REFINERS) {
            let ui = EVENT_UI_REFINERS[name](val);
            if (name === 'color') ui = {
                backgroundColor: val,
                borderColor: val
            };
            else if (name === 'editable') ui = {
                startEditable: val,
                durationEditable: val
            };
            else ui = {
                [name]: val
            };
            this.mutate({
                standardProps: {
                    ui
                }
            });
        } else console.warn(`Could not set prop '${name}'. Use setExtendedProp instead.`);
    }
    setExtendedProp(name, val) {
        this.mutate({
            extendedProps: {
                [name]: val
            }
        });
    }
    setStart(startInput, options = {}) {
        let { dateEnv } = this._context;
        let start = dateEnv.createMarker(startInput);
        if (start && this._instance) {
            let instanceRange = this._instance.range;
            let startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?
            if (options.maintainDuration) this.mutate({
                datesDelta: startDelta
            });
            else this.mutate({
                startDelta
            });
        }
    }
    setEnd(endInput, options = {}) {
        let { dateEnv } = this._context;
        let end;
        if (endInput != null) {
            end = dateEnv.createMarker(endInput);
            if (!end) return; // TODO: warning if parsed bad
        }
        if (this._instance) {
            if (end) {
                let endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
                this.mutate({
                    endDelta
                });
            } else this.mutate({
                standardProps: {
                    hasEnd: false
                }
            });
        }
    }
    setDates(startInput, endInput, options = {}) {
        let { dateEnv } = this._context;
        let standardProps = {
            allDay: options.allDay
        };
        let start = dateEnv.createMarker(startInput);
        let end;
        if (!start) return; // TODO: warning if parsed bad
        if (endInput != null) {
            end = dateEnv.createMarker(endInput);
            if (!end) return;
        }
        if (this._instance) {
            let instanceRange = this._instance.range;
            // when computing the diff for an event being converted to all-day,
            // compute diff off of the all-day values the way event-mutation does.
            if (options.allDay === true) instanceRange = computeAlignedDayRange(instanceRange);
            let startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);
            if (end) {
                let endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);
                if (durationsEqual(startDelta, endDelta)) this.mutate({
                    datesDelta: startDelta,
                    standardProps
                });
                else this.mutate({
                    startDelta,
                    endDelta,
                    standardProps
                });
            } else {
                standardProps.hasEnd = false;
                this.mutate({
                    datesDelta: startDelta,
                    standardProps
                });
            }
        }
    }
    moveStart(deltaInput) {
        let delta = createDuration(deltaInput);
        if (delta) this.mutate({
            startDelta: delta
        });
    }
    moveEnd(deltaInput) {
        let delta = createDuration(deltaInput);
        if (delta) this.mutate({
            endDelta: delta
        });
    }
    moveDates(deltaInput) {
        let delta = createDuration(deltaInput);
        if (delta) this.mutate({
            datesDelta: delta
        });
    }
    setAllDay(allDay, options = {}) {
        let standardProps = {
            allDay
        };
        let { maintainDuration } = options;
        if (maintainDuration == null) maintainDuration = this._context.options.allDayMaintainDuration;
        if (this._def.allDay !== allDay) standardProps.hasEnd = maintainDuration;
        this.mutate({
            standardProps
        });
    }
    formatRange(formatInput) {
        let { dateEnv } = this._context;
        let instance = this._instance;
        let formatter = createFormatter(formatInput);
        if (this._def.hasEnd) return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
            forcedStartTzo: instance.forcedStartTzo,
            forcedEndTzo: instance.forcedEndTzo
        });
        return dateEnv.format(instance.range.start, formatter, {
            forcedTzo: instance.forcedStartTzo
        });
    }
    mutate(mutation) {
        let instance = this._instance;
        if (instance) {
            let def = this._def;
            let context = this._context;
            let { eventStore } = context.getCurrentData();
            let relevantEvents = getRelevantEvents(eventStore, instance.instanceId);
            let eventConfigBase = {
                '': {
                    display: '',
                    startEditable: true,
                    durationEditable: true,
                    constraints: [],
                    overlap: null,
                    allows: [],
                    backgroundColor: '',
                    borderColor: '',
                    textColor: '',
                    classNames: []
                }
            };
            relevantEvents = applyMutationToEventStore(relevantEvents, eventConfigBase, mutation, context);
            let oldEvent = new EventImpl(context, def, instance); // snapshot
            this._def = relevantEvents.defs[def.defId];
            this._instance = relevantEvents.instances[instance.instanceId];
            context.dispatch({
                type: 'MERGE_EVENTS',
                eventStore: relevantEvents
            });
            context.emitter.trigger('eventChange', {
                oldEvent,
                event: this,
                relatedEvents: buildEventApis(relevantEvents, context, instance),
                revert () {
                    context.dispatch({
                        type: 'RESET_EVENTS',
                        eventStore
                    });
                }
            });
        }
    }
    remove() {
        let context = this._context;
        let asStore = eventApiToStore(this);
        context.dispatch({
            type: 'REMOVE_EVENTS',
            eventStore: asStore
        });
        context.emitter.trigger('eventRemove', {
            event: this,
            relatedEvents: [],
            revert () {
                context.dispatch({
                    type: 'MERGE_EVENTS',
                    eventStore: asStore
                });
            }
        });
    }
    get source() {
        let { sourceId } = this._def;
        if (sourceId) return new EventSourceImpl(this._context, this._context.getCurrentData().eventSources[sourceId]);
        return null;
    }
    get start() {
        return this._instance ? this._context.dateEnv.toDate(this._instance.range.start) : null;
    }
    get end() {
        return this._instance && this._def.hasEnd ? this._context.dateEnv.toDate(this._instance.range.end) : null;
    }
    get startStr() {
        let instance = this._instance;
        if (instance) return this._context.dateEnv.formatIso(instance.range.start, {
            omitTime: this._def.allDay,
            forcedTzo: instance.forcedStartTzo
        });
        return '';
    }
    get endStr() {
        let instance = this._instance;
        if (instance && this._def.hasEnd) return this._context.dateEnv.formatIso(instance.range.end, {
            omitTime: this._def.allDay,
            forcedTzo: instance.forcedEndTzo
        });
        return '';
    }
    // computable props that all access the def
    // TODO: find a TypeScript-compatible way to do this at scale
    get id() {
        return this._def.publicId;
    }
    get groupId() {
        return this._def.groupId;
    }
    get allDay() {
        return this._def.allDay;
    }
    get title() {
        return this._def.title;
    }
    get url() {
        return this._def.url;
    }
    get display() {
        return this._def.ui.display || 'auto';
    }
    get startEditable() {
        return this._def.ui.startEditable;
    }
    get durationEditable() {
        return this._def.ui.durationEditable;
    }
    get constraint() {
        return this._def.ui.constraints[0] || null;
    }
    get overlap() {
        return this._def.ui.overlap;
    }
    get allow() {
        return this._def.ui.allows[0] || null;
    }
    get backgroundColor() {
        return this._def.ui.backgroundColor;
    }
    get borderColor() {
        return this._def.ui.borderColor;
    }
    get textColor() {
        return this._def.ui.textColor;
    }
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get classNames() {
        return this._def.ui.classNames;
    }
    get extendedProps() {
        return this._def.extendedProps;
    }
    toPlainObject(settings = {}) {
        let def = this._def;
        let { ui } = def;
        let { startStr, endStr } = this;
        let res = {
            allDay: def.allDay
        };
        if (def.title) res.title = def.title;
        if (startStr) res.start = startStr;
        if (endStr) res.end = endStr;
        if (def.publicId) res.id = def.publicId;
        if (def.groupId) res.groupId = def.groupId;
        if (def.url) res.url = def.url;
        if (ui.display && ui.display !== 'auto') res.display = ui.display;
        // TODO: what about recurring-event properties???
        // TODO: include startEditable/durationEditable/constraint/overlap/allow
        if (settings.collapseColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) res.color = ui.backgroundColor;
        else {
            if (ui.backgroundColor) res.backgroundColor = ui.backgroundColor;
            if (ui.borderColor) res.borderColor = ui.borderColor;
        }
        if (ui.textColor) res.textColor = ui.textColor;
        if (ui.classNames.length) res.classNames = ui.classNames;
        if (Object.keys(def.extendedProps).length) {
            if (settings.collapseExtendedProps) Object.assign(res, def.extendedProps);
            else res.extendedProps = def.extendedProps;
        }
        return res;
    }
    toJSON() {
        return this.toPlainObject();
    }
}
function eventApiToStore(eventApi) {
    let def = eventApi._def;
    let instance = eventApi._instance;
    return {
        defs: {
            [def.defId]: def
        },
        instances: instance ? {
            [instance.instanceId]: instance
        } : {}
    };
}
function buildEventApis(eventStore, context, excludeInstance) {
    let { defs, instances } = eventStore;
    let eventApis = [];
    let excludeInstanceId = excludeInstance ? excludeInstance.instanceId : '';
    for(let id in instances){
        let instance = instances[id];
        let def = defs[instance.defId];
        if (instance.instanceId !== excludeInstanceId) eventApis.push(new EventImpl(context, def, instance));
    }
    return eventApis;
}
/*
Specifying nextDayThreshold signals that all-day ranges should be sliced.
*/ function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
    let inverseBgByGroupId = {};
    let inverseBgByDefId = {};
    let defByGroupId = {};
    let bgRanges = [];
    let fgRanges = [];
    let eventUis = compileEventUis(eventStore.defs, eventUiBases);
    for(let defId in eventStore.defs){
        let def = eventStore.defs[defId];
        let ui = eventUis[def.defId];
        if (ui.display === 'inverse-background') {
            if (def.groupId) {
                inverseBgByGroupId[def.groupId] = [];
                if (!defByGroupId[def.groupId]) defByGroupId[def.groupId] = def;
            } else inverseBgByDefId[defId] = [];
        }
    }
    for(let instanceId in eventStore.instances){
        let instance = eventStore.instances[instanceId];
        let def = eventStore.defs[instance.defId];
        let ui = eventUis[def.defId];
        let origRange = instance.range;
        let normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;
        let slicedRange = intersectRanges(normalRange, framingRange);
        if (slicedRange) {
            if (ui.display === 'inverse-background') {
                if (def.groupId) inverseBgByGroupId[def.groupId].push(slicedRange);
                else inverseBgByDefId[instance.defId].push(slicedRange);
            } else if (ui.display !== 'none') (ui.display === 'background' ? bgRanges : fgRanges).push({
                def,
                ui,
                instance,
                range: slicedRange,
                isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
                isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
            });
        }
    }
    for(let groupId in inverseBgByGroupId){
        let ranges = inverseBgByGroupId[groupId];
        let invertedRanges = invertRanges(ranges, framingRange);
        for (let invertedRange of invertedRanges){
            let def = defByGroupId[groupId];
            let ui = eventUis[def.defId];
            bgRanges.push({
                def,
                ui,
                instance: null,
                range: invertedRange,
                isStart: false,
                isEnd: false
            });
        }
    }
    for(let defId in inverseBgByDefId){
        let ranges = inverseBgByDefId[defId];
        let invertedRanges = invertRanges(ranges, framingRange);
        for (let invertedRange of invertedRanges)bgRanges.push({
            def: eventStore.defs[defId],
            ui: eventUis[defId],
            instance: null,
            range: invertedRange,
            isStart: false,
            isEnd: false
        });
    }
    return {
        bg: bgRanges,
        fg: fgRanges
    };
}
function hasBgRendering(def) {
    return def.ui.display === 'background' || def.ui.display === 'inverse-background';
}
function setElSeg(el, seg) {
    el.fcSeg = seg;
}
function getElSeg(el) {
    return el.fcSeg || el.parentNode.fcSeg || // for the harness
    null;
}
// event ui computation
function compileEventUis(eventDefs, eventUiBases) {
    return mapHash(eventDefs, (eventDef)=>compileEventUi(eventDef, eventUiBases));
}
function compileEventUi(eventDef, eventUiBases) {
    let uis = [];
    if (eventUiBases['']) uis.push(eventUiBases['']);
    if (eventUiBases[eventDef.defId]) uis.push(eventUiBases[eventDef.defId]);
    uis.push(eventDef.ui);
    return combineEventUis(uis);
}
function sortEventSegs(segs, eventOrderSpecs) {
    let objs = segs.map(buildSegCompareObj);
    objs.sort((obj0, obj1)=>compareByFieldSpecs(obj0, obj1, eventOrderSpecs));
    return objs.map((c)=>c._seg);
}
// returns a object with all primitive props that can be compared
function buildSegCompareObj(seg) {
    let { eventRange } = seg;
    let eventDef = eventRange.def;
    let range = eventRange.instance ? eventRange.instance.range : eventRange.range;
    let start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events
    let end = range.end ? range.end.valueOf() : 0; // "
    return Object.assign(Object.assign(Object.assign({}, eventDef.extendedProps), eventDef), {
        id: eventDef.publicId,
        start,
        end,
        duration: end - start,
        allDay: Number(eventDef.allDay),
        _seg: seg
    });
}
function computeSegDraggable(seg, context) {
    let { pluginHooks } = context;
    let transformers = pluginHooks.isDraggableTransformers;
    let { def, ui } = seg.eventRange;
    let val = ui.startEditable;
    for (let transformer of transformers)val = transformer(val, def, ui, context);
    return val;
}
function computeSegStartResizable(seg, context) {
    return seg.isStart && seg.eventRange.ui.durationEditable && context.options.eventResizableFromStart;
}
function computeSegEndResizable(seg, context) {
    return seg.isEnd && seg.eventRange.ui.durationEditable;
}
function buildSegTimeText(seg, timeFormat, context, defaultDisplayEventTime, defaultDisplayEventEnd, startOverride, endOverride) {
    let { dateEnv, options } = context;
    let { displayEventTime, displayEventEnd } = options;
    let eventDef = seg.eventRange.def;
    let eventInstance = seg.eventRange.instance;
    if (displayEventTime == null) displayEventTime = defaultDisplayEventTime !== false;
    if (displayEventEnd == null) displayEventEnd = defaultDisplayEventEnd !== false;
    let wholeEventStart = eventInstance.range.start;
    let wholeEventEnd = eventInstance.range.end;
    let segStart = startOverride || seg.start || seg.eventRange.range.start;
    let segEnd = endOverride || seg.end || seg.eventRange.range.end;
    let isStartDay = startOfDay(wholeEventStart).valueOf() === startOfDay(segStart).valueOf();
    let isEndDay = startOfDay(addMs(wholeEventEnd, -1)).valueOf() === startOfDay(addMs(segEnd, -1)).valueOf();
    if (displayEventTime && !eventDef.allDay && (isStartDay || isEndDay)) {
        segStart = isStartDay ? wholeEventStart : segStart;
        segEnd = isEndDay ? wholeEventEnd : segEnd;
        if (displayEventEnd && eventDef.hasEnd) return dateEnv.formatRange(segStart, segEnd, timeFormat, {
            forcedStartTzo: startOverride ? null : eventInstance.forcedStartTzo,
            forcedEndTzo: endOverride ? null : eventInstance.forcedEndTzo
        });
        return dateEnv.format(segStart, timeFormat, {
            forcedTzo: startOverride ? null : eventInstance.forcedStartTzo
        });
    }
    return '';
}
function getSegMeta(seg, todayRange, nowDate) {
    let segRange = seg.eventRange.range;
    return {
        isPast: segRange.end <= (nowDate || todayRange.start),
        isFuture: segRange.start >= (nowDate || todayRange.end),
        isToday: todayRange && rangeContainsMarker(todayRange, segRange.start)
    };
}
function getEventClassNames(props) {
    let classNames = [
        'fc-event'
    ];
    if (props.isMirror) classNames.push('fc-event-mirror');
    if (props.isDraggable) classNames.push('fc-event-draggable');
    if (props.isStartResizable || props.isEndResizable) classNames.push('fc-event-resizable');
    if (props.isDragging) classNames.push('fc-event-dragging');
    if (props.isResizing) classNames.push('fc-event-resizing');
    if (props.isSelected) classNames.push('fc-event-selected');
    if (props.isStart) classNames.push('fc-event-start');
    if (props.isEnd) classNames.push('fc-event-end');
    if (props.isPast) classNames.push('fc-event-past');
    if (props.isToday) classNames.push('fc-event-today');
    if (props.isFuture) classNames.push('fc-event-future');
    return classNames;
}
function buildEventRangeKey(eventRange) {
    return eventRange.instance ? eventRange.instance.instanceId : `${eventRange.def.defId}:${eventRange.range.start.toISOString()}`;
// inverse-background events don't have specific instances. TODO: better solution
}
function getSegAnchorAttrs(seg, context) {
    let { def, instance } = seg.eventRange;
    let { url } = def;
    if (url) return {
        href: url
    };
    let { emitter, options } = context;
    let { eventInteractive } = options;
    if (eventInteractive == null) {
        eventInteractive = def.interactive;
        if (eventInteractive == null) eventInteractive = Boolean(emitter.hasHandlers('eventClick'));
    }
    // mock what happens in EventClicking
    if (eventInteractive) // only attach keyboard-related handlers because click handler is already done in EventClicking
    return createAriaKeyboardAttrs((ev)=>{
        emitter.trigger('eventClick', {
            el: ev.target,
            event: new EventImpl(context, def, instance),
            jsEvent: ev,
            view: context.viewApi
        });
    });
    return {};
}
const STANDARD_PROPS = {
    start: identity,
    end: identity,
    allDay: Boolean
};
function parseDateSpan(raw, dateEnv, defaultDuration) {
    let span = parseOpenDateSpan(raw, dateEnv);
    let { range } = span;
    if (!range.start) return null;
    if (!range.end) {
        if (defaultDuration == null) return null;
        range.end = dateEnv.add(range.start, defaultDuration);
    }
    return span;
}
/*
TODO: somehow combine with parseRange?
Will return null if the start/end props were present but parsed invalidly.
*/ function parseOpenDateSpan(raw, dateEnv) {
    let { refined: standardProps, extra } = refineProps(raw, STANDARD_PROPS);
    let startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
    let endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
    let { allDay } = standardProps;
    if (allDay == null) allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);
    return Object.assign({
        range: {
            start: startMeta ? startMeta.marker : null,
            end: endMeta ? endMeta.marker : null
        },
        allDay
    }, extra);
}
function isDateSpansEqual(span0, span1) {
    return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);
}
// the NON-DATE-RELATED props
function isSpanPropsEqual(span0, span1) {
    for(let propName in span1)if (propName !== 'range' && propName !== 'allDay') {
        if (span0[propName] !== span1[propName]) return false;
    }
    // are there any props that span0 has that span1 DOESN'T have?
    // both have range/allDay, so no need to special-case.
    for(let propName in span0){
        if (!(propName in span1)) return false;
    }
    return true;
}
function buildDateSpanApi(span, dateEnv) {
    return Object.assign(Object.assign({}, buildRangeApi(span.range, dateEnv, span.allDay)), {
        allDay: span.allDay
    });
}
function buildRangeApiWithTimeZone(range, dateEnv, omitTime) {
    return Object.assign(Object.assign({}, buildRangeApi(range, dateEnv, omitTime)), {
        timeZone: dateEnv.timeZone
    });
}
function buildRangeApi(range, dateEnv, omitTime) {
    return {
        start: dateEnv.toDate(range.start),
        end: dateEnv.toDate(range.end),
        startStr: dateEnv.formatIso(range.start, {
            omitTime
        }),
        endStr: dateEnv.formatIso(range.end, {
            omitTime
        })
    };
}
function fabricateEventRange(dateSpan, eventUiBases, context) {
    let res = refineEventDef({
        editable: false
    }, context);
    let def = parseEventDef(res.refined, res.extra, '', dateSpan.allDay, true, context);
    return {
        def,
        ui: compileEventUi(def, eventUiBases),
        instance: createEventInstance(def.defId, dateSpan.range),
        range: dateSpan.range,
        isStart: true,
        isEnd: true
    };
}
/*
given a function that resolves a result asynchronously.
the function can either call passed-in success and failure callbacks,
or it can return a promise.
if you need to pass additional params to func, bind them first.
*/ function unpromisify(func, normalizedSuccessCallback, normalizedFailureCallback) {
    // guard against success/failure callbacks being called more than once
    // and guard against a promise AND callback being used together.
    let isResolved = false;
    let wrappedSuccess = function(res) {
        if (!isResolved) {
            isResolved = true;
            normalizedSuccessCallback(res);
        }
    };
    let wrappedFailure = function(error) {
        if (!isResolved) {
            isResolved = true;
            normalizedFailureCallback(error);
        }
    };
    let res = func(wrappedSuccess, wrappedFailure);
    if (res && typeof res.then === 'function') res.then(wrappedSuccess, wrappedFailure);
}
class JsonRequestError extends Error {
    constructor(message, response){
        super(message);
        this.response = response;
    }
}
function requestJson(method, url, params) {
    method = method.toUpperCase();
    const fetchOptions = {
        method
    };
    if (method === 'GET') url += (url.indexOf('?') === -1 ? '?' : '&') + new URLSearchParams(params);
    else {
        fetchOptions.body = new URLSearchParams(params);
        fetchOptions.headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };
    }
    return fetch(url, fetchOptions).then((fetchRes)=>{
        if (fetchRes.ok) return fetchRes.json().then((parsedResponse)=>{
            return [
                parsedResponse,
                fetchRes
            ];
        }, ()=>{
            throw new JsonRequestError('Failure parsing JSON', fetchRes);
        });
        else throw new JsonRequestError('Request failed', fetchRes);
    });
}
let canVGrowWithinCell;
function getCanVGrowWithinCell() {
    if (canVGrowWithinCell == null) canVGrowWithinCell = computeCanVGrowWithinCell();
    return canVGrowWithinCell;
}
function computeCanVGrowWithinCell() {
    // for SSR, because this function is call immediately at top-level
    // TODO: just make this logic execute top-level, immediately, instead of doing lazily
    if (typeof document === 'undefined') return true;
    let el = document.createElement('div');
    el.style.position = 'absolute';
    el.style.top = '0px';
    el.style.left = '0px';
    el.innerHTML = '<table><tr><td><div></div></td></tr></table>';
    el.querySelector('table').style.height = '100px';
    el.querySelector('div').style.height = '100%';
    document.body.appendChild(el);
    let div = el.querySelector('div');
    let possible = div.offsetHeight > 0;
    document.body.removeChild(el);
    return possible;
}
class CalendarRoot extends BaseComponent {
    constructor(){
        super(...arguments);
        this.state = {
            forPrint: false
        };
        this.handleBeforePrint = ()=>{
            flushSync(()=>{
                this.setState({
                    forPrint: true
                });
            });
        };
        this.handleAfterPrint = ()=>{
            flushSync(()=>{
                this.setState({
                    forPrint: false
                });
            });
        };
    }
    render() {
        let { props } = this;
        let { options } = props;
        let { forPrint } = this.state;
        let isHeightAuto = forPrint || options.height === 'auto' || options.contentHeight === 'auto';
        let height = !isHeightAuto && options.height != null ? options.height : '';
        let classNames = [
            'fc',
            forPrint ? 'fc-media-print' : 'fc-media-screen',
            `fc-direction-${options.direction}`,
            props.theme.getClass('root')
        ];
        if (!getCanVGrowWithinCell()) classNames.push('fc-liquid-hack');
        return props.children(classNames, height, isHeightAuto, forPrint);
    }
    componentDidMount() {
        let { emitter } = this.props;
        emitter.on('_beforeprint', this.handleBeforePrint);
        emitter.on('_afterprint', this.handleAfterPrint);
    }
    componentWillUnmount() {
        let { emitter } = this.props;
        emitter.off('_beforeprint', this.handleBeforePrint);
        emitter.off('_afterprint', this.handleAfterPrint);
    }
}
class Interaction {
    constructor(settings){
        this.component = settings.component;
        this.isHitComboAllowed = settings.isHitComboAllowed || null;
    }
    destroy() {}
}
function parseInteractionSettings(component, input) {
    return {
        component,
        el: input.el,
        useEventCenter: input.useEventCenter != null ? input.useEventCenter : true,
        isHitComboAllowed: input.isHitComboAllowed || null
    };
}
function interactionSettingsToStore(settings) {
    return {
        [settings.component.uid]: settings
    };
}
// global state
const interactionSettingsStore = {};
class NowTimer extends (0, _preact.Component) {
    constructor(props, context){
        super(props, context);
        this.handleRefresh = ()=>{
            let timing = this.computeTiming();
            if (timing.state.nowDate.valueOf() !== this.state.nowDate.valueOf()) this.setState(timing.state);
            this.clearTimeout();
            this.setTimeout(timing.waitMs);
        };
        this.handleVisibilityChange = ()=>{
            if (!document.hidden) this.handleRefresh();
        };
        this.state = this.computeTiming().state;
    }
    render() {
        let { props, state } = this;
        return props.children(state.nowDate, state.todayRange);
    }
    componentDidMount() {
        this.setTimeout();
        this.context.nowManager.addResetListener(this.handleRefresh);
        // fired tab becomes visible after being hidden
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
    }
    componentDidUpdate(prevProps) {
        if (prevProps.unit !== this.props.unit) {
            this.clearTimeout();
            this.setTimeout();
        }
    }
    componentWillUnmount() {
        this.clearTimeout();
        this.context.nowManager.removeResetListener(this.handleRefresh);
        document.removeEventListener('visibilitychange', this.handleVisibilityChange);
    }
    computeTiming() {
        let { props, context } = this;
        let unroundedNow = context.nowManager.getDateMarker();
        let currentUnitStart = context.dateEnv.startOf(unroundedNow, props.unit);
        let nextUnitStart = context.dateEnv.add(currentUnitStart, createDuration(1, props.unit));
        let waitMs = nextUnitStart.valueOf() - unroundedNow.valueOf();
        // there is a max setTimeout ms value (https://stackoverflow.com/a/3468650/96342)
        // ensure no longer than a day
        waitMs = Math.min(86400000, waitMs);
        return {
            state: {
                nowDate: currentUnitStart,
                todayRange: buildDayRange(currentUnitStart)
            },
            waitMs
        };
    }
    setTimeout(waitMs = this.computeTiming().waitMs) {
        // NOTE: timeout could take longer than expected if tab sleeps,
        // which is why we listen to 'visibilitychange'
        this.timeoutId = setTimeout(()=>{
            // NOTE: timeout could also return *earlier* than expected, and we need to wait 2 ms more
            // This is why use use same waitMs from computeTiming, so we don't skip an interval while
            // .setState() is executing
            const timing = this.computeTiming();
            this.setState(timing.state, ()=>{
                this.setTimeout(timing.waitMs);
            });
        }, waitMs);
    }
    clearTimeout() {
        if (this.timeoutId) clearTimeout(this.timeoutId);
    }
}
NowTimer.contextType = ViewContextType;
function buildDayRange(date) {
    let start = startOfDay(date);
    let end = addDays(start, 1);
    return {
        start,
        end
    };
}
class CalendarImpl {
    getCurrentData() {
        return this.currentDataManager.getCurrentData();
    }
    dispatch(action) {
        this.currentDataManager.dispatch(action);
    }
    get view() {
        return this.getCurrentData().viewApi;
    }
    batchRendering(callback) {
        callback();
    }
    updateSize() {
        this.trigger('_resize', true);
    }
    // Options
    // -----------------------------------------------------------------------------------------------------------------
    setOption(name, val) {
        this.dispatch({
            type: 'SET_OPTION',
            optionName: name,
            rawOptionValue: val
        });
    }
    getOption(name) {
        return this.currentDataManager.currentCalendarOptionsInput[name];
    }
    getAvailableLocaleCodes() {
        return Object.keys(this.getCurrentData().availableRawLocales);
    }
    // Trigger
    // -----------------------------------------------------------------------------------------------------------------
    on(handlerName, handler) {
        let { currentDataManager } = this;
        if (currentDataManager.currentCalendarOptionsRefiners[handlerName]) currentDataManager.emitter.on(handlerName, handler);
        else console.warn(`Unknown listener name '${handlerName}'`);
    }
    off(handlerName, handler) {
        this.currentDataManager.emitter.off(handlerName, handler);
    }
    // not meant for public use
    trigger(handlerName, ...args) {
        this.currentDataManager.emitter.trigger(handlerName, ...args);
    }
    // View
    // -----------------------------------------------------------------------------------------------------------------
    changeView(viewType, dateOrRange) {
        this.batchRendering(()=>{
            this.unselect();
            if (dateOrRange) {
                if (dateOrRange.start && dateOrRange.end) {
                    this.dispatch({
                        type: 'CHANGE_VIEW_TYPE',
                        viewType
                    });
                    this.dispatch({
                        type: 'SET_OPTION',
                        optionName: 'visibleRange',
                        rawOptionValue: dateOrRange
                    });
                } else {
                    let { dateEnv } = this.getCurrentData();
                    this.dispatch({
                        type: 'CHANGE_VIEW_TYPE',
                        viewType,
                        dateMarker: dateEnv.createMarker(dateOrRange)
                    });
                }
            } else this.dispatch({
                type: 'CHANGE_VIEW_TYPE',
                viewType
            });
        });
    }
    // Forces navigation to a view for the given date.
    // `viewType` can be a specific view name or a generic one like "week" or "day".
    // needs to change
    zoomTo(dateMarker, viewType) {
        let state = this.getCurrentData();
        let spec;
        viewType = viewType || 'day'; // day is default zoom
        spec = state.viewSpecs[viewType] || this.getUnitViewSpec(viewType);
        this.unselect();
        if (spec) this.dispatch({
            type: 'CHANGE_VIEW_TYPE',
            viewType: spec.type,
            dateMarker
        });
        else this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker
        });
    }
    // Given a duration singular unit, like "week" or "day", finds a matching view spec.
    // Preference is given to views that have corresponding buttons.
    getUnitViewSpec(unit) {
        let { viewSpecs, toolbarConfig } = this.getCurrentData();
        let viewTypes = [].concat(toolbarConfig.header ? toolbarConfig.header.viewsWithButtons : [], toolbarConfig.footer ? toolbarConfig.footer.viewsWithButtons : []);
        let i;
        let spec;
        for(let viewType in viewSpecs)viewTypes.push(viewType);
        for(i = 0; i < viewTypes.length; i += 1){
            spec = viewSpecs[viewTypes[i]];
            if (spec) {
                if (spec.singleUnit === unit) return spec;
            }
        }
        return null;
    }
    // Current Date
    // -----------------------------------------------------------------------------------------------------------------
    prev() {
        this.unselect();
        this.dispatch({
            type: 'PREV'
        });
    }
    next() {
        this.unselect();
        this.dispatch({
            type: 'NEXT'
        });
    }
    prevYear() {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.dateEnv.addYears(state.currentDate, -1)
        });
    }
    nextYear() {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.dateEnv.addYears(state.currentDate, 1)
        });
    }
    today() {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.nowManager.getDateMarker()
        });
    }
    gotoDate(zonedDateInput) {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.dateEnv.createMarker(zonedDateInput)
        });
    }
    incrementDate(deltaInput) {
        let state = this.getCurrentData();
        let delta = createDuration(deltaInput);
        if (delta) {
            this.unselect();
            this.dispatch({
                type: 'CHANGE_DATE',
                dateMarker: state.dateEnv.add(state.currentDate, delta)
            });
        }
    }
    getDate() {
        let state = this.getCurrentData();
        return state.dateEnv.toDate(state.currentDate);
    }
    // Date Formatting Utils
    // -----------------------------------------------------------------------------------------------------------------
    formatDate(d, formatter) {
        let { dateEnv } = this.getCurrentData();
        return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
    }
    // `settings` is for formatter AND isEndExclusive
    formatRange(d0, d1, settings) {
        let { dateEnv } = this.getCurrentData();
        return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings), settings);
    }
    formatIso(d, omitTime) {
        let { dateEnv } = this.getCurrentData();
        return dateEnv.formatIso(dateEnv.createMarker(d), {
            omitTime
        });
    }
    // Date Selection / Event Selection / DayClick
    // -----------------------------------------------------------------------------------------------------------------
    select(dateOrObj, endDate) {
        let selectionInput;
        if (endDate == null) {
            if (dateOrObj.start != null) selectionInput = dateOrObj;
            else selectionInput = {
                start: dateOrObj,
                end: null
            };
        } else selectionInput = {
            start: dateOrObj,
            end: endDate
        };
        let state = this.getCurrentData();
        let selection = parseDateSpan(selectionInput, state.dateEnv, createDuration({
            days: 1
        }));
        if (selection) {
            this.dispatch({
                type: 'SELECT_DATES',
                selection
            });
            triggerDateSelect(selection, null, state);
        }
    }
    unselect(pev) {
        let state = this.getCurrentData();
        if (state.dateSelection) {
            this.dispatch({
                type: 'UNSELECT_DATES'
            });
            triggerDateUnselect(pev, state);
        }
    }
    // Public Events API
    // -----------------------------------------------------------------------------------------------------------------
    addEvent(eventInput, sourceInput) {
        if (eventInput instanceof EventImpl) {
            let def = eventInput._def;
            let instance = eventInput._instance;
            let currentData = this.getCurrentData();
            // not already present? don't want to add an old snapshot
            if (!currentData.eventStore.defs[def.defId]) {
                this.dispatch({
                    type: 'ADD_EVENTS',
                    eventStore: eventTupleToStore({
                        def,
                        instance
                    })
                });
                this.triggerEventAdd(eventInput);
            }
            return eventInput;
        }
        let state = this.getCurrentData();
        let eventSource;
        if (sourceInput instanceof EventSourceImpl) eventSource = sourceInput.internalEventSource;
        else if (typeof sourceInput === 'boolean') {
            if (sourceInput) [eventSource] = hashValuesToArray(state.eventSources);
        } else if (sourceInput != null) {
            let sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function
            if (!sourceApi) {
                console.warn(`Could not find an event source with ID "${sourceInput}"`); // TODO: test
                return null;
            }
            eventSource = sourceApi.internalEventSource;
        }
        let tuple = parseEvent(eventInput, eventSource, state, false);
        if (tuple) {
            let newEventApi = new EventImpl(state, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
            this.dispatch({
                type: 'ADD_EVENTS',
                eventStore: eventTupleToStore(tuple)
            });
            this.triggerEventAdd(newEventApi);
            return newEventApi;
        }
        return null;
    }
    triggerEventAdd(eventApi) {
        let { emitter } = this.getCurrentData();
        emitter.trigger('eventAdd', {
            event: eventApi,
            relatedEvents: [],
            revert: ()=>{
                this.dispatch({
                    type: 'REMOVE_EVENTS',
                    eventStore: eventApiToStore(eventApi)
                });
            }
        });
    }
    // TODO: optimize
    getEventById(id) {
        let state = this.getCurrentData();
        let { defs, instances } = state.eventStore;
        id = String(id);
        for(let defId in defs){
            let def = defs[defId];
            if (def.publicId === id) {
                if (def.recurringDef) return new EventImpl(state, def, null);
                for(let instanceId in instances){
                    let instance = instances[instanceId];
                    if (instance.defId === def.defId) return new EventImpl(state, def, instance);
                }
            }
        }
        return null;
    }
    getEvents() {
        let currentData = this.getCurrentData();
        return buildEventApis(currentData.eventStore, currentData);
    }
    removeAllEvents() {
        this.dispatch({
            type: 'REMOVE_ALL_EVENTS'
        });
    }
    // Public Event Sources API
    // -----------------------------------------------------------------------------------------------------------------
    getEventSources() {
        let state = this.getCurrentData();
        let sourceHash = state.eventSources;
        let sourceApis = [];
        for(let internalId in sourceHash)sourceApis.push(new EventSourceImpl(state, sourceHash[internalId]));
        return sourceApis;
    }
    getEventSourceById(id) {
        let state = this.getCurrentData();
        let sourceHash = state.eventSources;
        id = String(id);
        for(let sourceId in sourceHash){
            if (sourceHash[sourceId].publicId === id) return new EventSourceImpl(state, sourceHash[sourceId]);
        }
        return null;
    }
    addEventSource(sourceInput) {
        let state = this.getCurrentData();
        if (sourceInput instanceof EventSourceImpl) {
            // not already present? don't want to add an old snapshot
            if (!state.eventSources[sourceInput.internalEventSource.sourceId]) this.dispatch({
                type: 'ADD_EVENT_SOURCES',
                sources: [
                    sourceInput.internalEventSource
                ]
            });
            return sourceInput;
        }
        let eventSource = parseEventSource(sourceInput, state);
        if (eventSource) {
            this.dispatch({
                type: 'ADD_EVENT_SOURCES',
                sources: [
                    eventSource
                ]
            });
            return new EventSourceImpl(state, eventSource);
        }
        return null;
    }
    removeAllEventSources() {
        this.dispatch({
            type: 'REMOVE_ALL_EVENT_SOURCES'
        });
    }
    refetchEvents() {
        this.dispatch({
            type: 'FETCH_EVENT_SOURCES',
            isRefetch: true
        });
    }
    // Scroll
    // -----------------------------------------------------------------------------------------------------------------
    scrollToTime(timeInput) {
        let time = createDuration(timeInput);
        if (time) this.trigger('_scrollRequest', {
            time
        });
    }
}
function pointInsideRect(point, rect) {
    return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;
}
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false
function intersectRects(rect1, rect2) {
    let res = {
        left: Math.max(rect1.left, rect2.left),
        right: Math.min(rect1.right, rect2.right),
        top: Math.max(rect1.top, rect2.top),
        bottom: Math.min(rect1.bottom, rect2.bottom)
    };
    if (res.left < res.right && res.top < res.bottom) return res;
    return false;
}
function translateRect(rect, deltaX, deltaY) {
    return {
        left: rect.left + deltaX,
        right: rect.right + deltaX,
        top: rect.top + deltaY,
        bottom: rect.bottom + deltaY
    };
}
// Returns a new point that will have been moved to reside within the given rectangle
function constrainPoint(point, rect) {
    return {
        left: Math.min(Math.max(point.left, rect.left), rect.right),
        top: Math.min(Math.max(point.top, rect.top), rect.bottom)
    };
}
// Returns a point that is the center of the given rectangle
function getRectCenter(rect) {
    return {
        left: (rect.left + rect.right) / 2,
        top: (rect.top + rect.bottom) / 2
    };
}
// Subtracts point2's coordinates from point1's coordinates, returning a delta
function diffPoints(point1, point2) {
    return {
        left: point1.left - point2.left,
        top: point1.top - point2.top
    };
}
const EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere
class Splitter {
    constructor(){
        this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);
        this.splitDateSelection = memoize(this._splitDateSpan);
        this.splitEventStore = memoize(this._splitEventStore);
        this.splitIndividualUi = memoize(this._splitIndividualUi);
        this.splitEventDrag = memoize(this._splitInteraction);
        this.splitEventResize = memoize(this._splitInteraction);
        this.eventUiBuilders = {}; // TODO: typescript protection
    }
    splitProps(props) {
        let keyInfos = this.getKeyInfo(props);
        let defKeys = this.getKeysForEventDefs(props.eventStore);
        let dateSelections = this.splitDateSelection(props.dateSelection);
        let individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*
        let eventStores = this.splitEventStore(props.eventStore, defKeys);
        let eventDrags = this.splitEventDrag(props.eventDrag);
        let eventResizes = this.splitEventResize(props.eventResize);
        let splitProps = {};
        this.eventUiBuilders = mapHash(keyInfos, (info, key)=>this.eventUiBuilders[key] || memoize(buildEventUiForKey));
        for(let key in keyInfos){
            let keyInfo = keyInfos[key];
            let eventStore = eventStores[key] || EMPTY_EVENT_STORE;
            let buildEventUi = this.eventUiBuilders[key];
            splitProps[key] = {
                businessHours: keyInfo.businessHours || props.businessHours,
                dateSelection: dateSelections[key] || null,
                eventStore,
                eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
                eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
                eventDrag: eventDrags[key] || null,
                eventResize: eventResizes[key] || null
            };
        }
        return splitProps;
    }
    _splitDateSpan(dateSpan) {
        let dateSpans = {};
        if (dateSpan) {
            let keys = this.getKeysForDateSpan(dateSpan);
            for (let key of keys)dateSpans[key] = dateSpan;
        }
        return dateSpans;
    }
    _getKeysForEventDefs(eventStore) {
        return mapHash(eventStore.defs, (eventDef)=>this.getKeysForEventDef(eventDef));
    }
    _splitEventStore(eventStore, defKeys) {
        let { defs, instances } = eventStore;
        let splitStores = {};
        for(let defId in defs)for (let key of defKeys[defId]){
            if (!splitStores[key]) splitStores[key] = createEmptyEventStore();
            splitStores[key].defs[defId] = defs[defId];
        }
        for(let instanceId in instances){
            let instance = instances[instanceId];
            for (let key of defKeys[instance.defId])if (splitStores[key]) splitStores[key].instances[instanceId] = instance;
        }
        return splitStores;
    }
    _splitIndividualUi(eventUiBases, defKeys) {
        let splitHashes = {};
        for(let defId in eventUiBases){
            if (defId) for (let key of defKeys[defId]){
                if (!splitHashes[key]) splitHashes[key] = {};
                splitHashes[key][defId] = eventUiBases[defId];
            }
        }
        return splitHashes;
    }
    _splitInteraction(interaction) {
        let splitStates = {};
        if (interaction) {
            let affectedStores = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents));
            // can't rely on defKeys because event data is mutated
            let mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);
            let mutatedStores = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);
            let populate = (key)=>{
                if (!splitStates[key]) splitStates[key] = {
                    affectedEvents: affectedStores[key] || EMPTY_EVENT_STORE,
                    mutatedEvents: mutatedStores[key] || EMPTY_EVENT_STORE,
                    isEvent: interaction.isEvent
                };
            };
            for(let key in affectedStores)populate(key);
            for(let key in mutatedStores)populate(key);
        }
        return splitStates;
    }
}
function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
    let baseParts = [];
    if (allUi) baseParts.push(allUi);
    if (eventUiForKey) baseParts.push(eventUiForKey);
    let stuff = {
        '': combineEventUis(baseParts)
    };
    if (individualUi) Object.assign(stuff, individualUi);
    return stuff;
}
function getDateMeta(date, todayRange, nowDate, dateProfile) {
    return {
        dow: date.getUTCDay(),
        isDisabled: Boolean(dateProfile && (!dateProfile.activeRange || !rangeContainsMarker(dateProfile.activeRange, date))),
        isOther: Boolean(dateProfile && !rangeContainsMarker(dateProfile.currentRange, date)),
        isToday: Boolean(todayRange && rangeContainsMarker(todayRange, date)),
        isPast: Boolean(nowDate ? date < nowDate : todayRange ? date < todayRange.start : false),
        isFuture: Boolean(nowDate ? date > nowDate : todayRange ? date >= todayRange.end : false)
    };
}
function getDayClassNames(meta, theme) {
    let classNames = [
        'fc-day',
        `fc-day-${DAY_IDS[meta.dow]}`
    ];
    if (meta.isDisabled) classNames.push('fc-day-disabled');
    else {
        if (meta.isToday) {
            classNames.push('fc-day-today');
            classNames.push(theme.getClass('today'));
        }
        if (meta.isPast) classNames.push('fc-day-past');
        if (meta.isFuture) classNames.push('fc-day-future');
        if (meta.isOther) classNames.push('fc-day-other');
    }
    return classNames;
}
function getSlotClassNames(meta, theme) {
    let classNames = [
        'fc-slot',
        `fc-slot-${DAY_IDS[meta.dow]}`
    ];
    if (meta.isDisabled) classNames.push('fc-slot-disabled');
    else {
        if (meta.isToday) {
            classNames.push('fc-slot-today');
            classNames.push(theme.getClass('today'));
        }
        if (meta.isPast) classNames.push('fc-slot-past');
        if (meta.isFuture) classNames.push('fc-slot-future');
    }
    return classNames;
}
const DAY_FORMAT = createFormatter({
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});
const WEEK_FORMAT = createFormatter({
    week: 'long'
});
function buildNavLinkAttrs(context, dateMarker, viewType = 'day', isTabbable = true) {
    const { dateEnv, options, calendarApi } = context;
    let dateStr = dateEnv.format(dateMarker, viewType === 'week' ? WEEK_FORMAT : DAY_FORMAT);
    if (options.navLinks) {
        let zonedDate = dateEnv.toDate(dateMarker);
        const handleInteraction = (ev)=>{
            let customAction = viewType === 'day' ? options.navLinkDayClick : viewType === 'week' ? options.navLinkWeekClick : null;
            if (typeof customAction === 'function') customAction.call(calendarApi, dateEnv.toDate(dateMarker), ev);
            else {
                if (typeof customAction === 'string') viewType = customAction;
                calendarApi.zoomTo(dateMarker, viewType);
            }
        };
        return Object.assign({
            title: formatWithOrdinals(options.navLinkHint, [
                dateStr,
                zonedDate
            ], dateStr),
            'data-navlink': ''
        }, isTabbable ? createAriaClickAttrs(handleInteraction) : {
            onClick: handleInteraction
        });
    }
    return {
        'aria-label': dateStr
    };
}
let _isRtlScrollbarOnLeft = null;
function getIsRtlScrollbarOnLeft() {
    if (_isRtlScrollbarOnLeft === null) _isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
    return _isRtlScrollbarOnLeft;
}
function computeIsRtlScrollbarOnLeft() {
    let outerEl = document.createElement('div');
    applyStyle(outerEl, {
        position: 'absolute',
        top: -1000,
        left: 0,
        border: 0,
        padding: 0,
        overflow: 'scroll',
        direction: 'rtl'
    });
    outerEl.innerHTML = '<div></div>';
    document.body.appendChild(outerEl);
    let innerEl = outerEl.firstChild;
    let res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
    removeElement(outerEl);
    return res;
}
let _scrollbarWidths;
function getScrollbarWidths() {
    if (!_scrollbarWidths) _scrollbarWidths = computeScrollbarWidths();
    return _scrollbarWidths;
}
function computeScrollbarWidths() {
    let el = document.createElement('div');
    el.style.overflow = 'scroll';
    el.style.position = 'absolute';
    el.style.top = '-9999px';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    let res = computeScrollbarWidthsForEl(el);
    document.body.removeChild(el);
    return res;
}
// WARNING: will include border
function computeScrollbarWidthsForEl(el) {
    return {
        x: el.offsetHeight - el.clientHeight,
        y: el.offsetWidth - el.clientWidth
    };
}
function computeEdges(el, getPadding = false) {
    let computedStyle = window.getComputedStyle(el);
    let borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
    let borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
    let borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
    let borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
    let badScrollbarWidths = computeScrollbarWidthsForEl(el); // includes border!
    let scrollbarLeftRight = badScrollbarWidths.y - borderLeft - borderRight;
    let scrollbarBottom = badScrollbarWidths.x - borderTop - borderBottom;
    let res = {
        borderLeft,
        borderRight,
        borderTop,
        borderBottom,
        scrollbarBottom,
        scrollbarLeft: 0,
        scrollbarRight: 0
    };
    if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') res.scrollbarLeft = scrollbarLeftRight;
    else res.scrollbarRight = scrollbarLeftRight;
    if (getPadding) {
        res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
        res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
        res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
        res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
    }
    return res;
}
function computeInnerRect(el, goWithinPadding = false, doFromWindowViewport) {
    let outerRect = doFromWindowViewport ? el.getBoundingClientRect() : computeRect(el);
    let edges = computeEdges(el, goWithinPadding);
    let res = {
        left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
        right: outerRect.right - edges.borderRight - edges.scrollbarRight,
        top: outerRect.top + edges.borderTop,
        bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
    };
    if (goWithinPadding) {
        res.left += edges.paddingLeft;
        res.right -= edges.paddingRight;
        res.top += edges.paddingTop;
        res.bottom -= edges.paddingBottom;
    }
    return res;
}
function computeRect(el) {
    let rect = el.getBoundingClientRect();
    return {
        left: rect.left + window.scrollX,
        top: rect.top + window.scrollY,
        right: rect.right + window.scrollX,
        bottom: rect.bottom + window.scrollY
    };
}
function computeClippedClientRect(el) {
    let clippingParents = getClippingParents(el);
    let rect = el.getBoundingClientRect();
    for (let clippingParent of clippingParents){
        let intersection = intersectRects(rect, clippingParent.getBoundingClientRect());
        if (intersection) rect = intersection;
        else return null;
    }
    return rect;
}
// does not return window
function getClippingParents(el) {
    let parents = [];
    while(el instanceof HTMLElement){
        let computedStyle = window.getComputedStyle(el);
        if (computedStyle.position === 'fixed') break;
        if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) parents.push(el);
        el = el.parentNode;
    }
    return parents;
}
/*
Records offset information for a set of elements, relative to an origin element.
Can record the left/right OR the top/bottom OR both.
Provides methods for querying the cache by position.
*/ class PositionCache {
    constructor(originEl, els, isHorizontal, isVertical){
        this.els = els;
        let originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left
        if (isHorizontal) this.buildElHorizontals(originClientRect.left);
        if (isVertical) this.buildElVerticals(originClientRect.top);
    }
    // Populates the left/right internal coordinate arrays
    buildElHorizontals(originClientLeft) {
        let lefts = [];
        let rights = [];
        for (let el of this.els){
            let rect = el.getBoundingClientRect();
            lefts.push(rect.left - originClientLeft);
            rights.push(rect.right - originClientLeft);
        }
        this.lefts = lefts;
        this.rights = rights;
    }
    // Populates the top/bottom internal coordinate arrays
    buildElVerticals(originClientTop) {
        let tops = [];
        let bottoms = [];
        for (let el of this.els){
            let rect = el.getBoundingClientRect();
            tops.push(rect.top - originClientTop);
            bottoms.push(rect.bottom - originClientTop);
        }
        this.tops = tops;
        this.bottoms = bottoms;
    }
    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
    // If no intersection is made, returns undefined.
    leftToIndex(leftPosition) {
        let { lefts, rights } = this;
        let len = lefts.length;
        let i;
        for(i = 0; i < len; i += 1){
            if (leftPosition >= lefts[i] && leftPosition < rights[i]) return i;
        }
        return undefined; // TODO: better
    }
    // Given a top offset (from document top), returns the index of the el that it vertically intersects.
    // If no intersection is made, returns undefined.
    topToIndex(topPosition) {
        let { tops, bottoms } = this;
        let len = tops.length;
        let i;
        for(i = 0; i < len; i += 1){
            if (topPosition >= tops[i] && topPosition < bottoms[i]) return i;
        }
        return undefined; // TODO: better
    }
    // Gets the width of the element at the given index
    getWidth(leftIndex) {
        return this.rights[leftIndex] - this.lefts[leftIndex];
    }
    // Gets the height of the element at the given index
    getHeight(topIndex) {
        return this.bottoms[topIndex] - this.tops[topIndex];
    }
    similarTo(otherCache) {
        return similarNumArrays(this.tops || [], otherCache.tops || []) && similarNumArrays(this.bottoms || [], otherCache.bottoms || []) && similarNumArrays(this.lefts || [], otherCache.lefts || []) && similarNumArrays(this.rights || [], otherCache.rights || []);
    }
}
function similarNumArrays(a, b) {
    const len = a.length;
    if (len !== b.length) return false;
    for(let i = 0; i < len; i++){
        if (Math.round(a[i]) !== Math.round(b[i])) return false;
    }
    return true;
}
/* eslint max-classes-per-file: "off" */ /*
An object for getting/setting scroll-related information for an element.
Internally, this is done very differently for window versus DOM element,
so this object serves as a common interface.
*/ class ScrollController {
    getMaxScrollTop() {
        return this.getScrollHeight() - this.getClientHeight();
    }
    getMaxScrollLeft() {
        return this.getScrollWidth() - this.getClientWidth();
    }
    canScrollVertically() {
        return this.getMaxScrollTop() > 0;
    }
    canScrollHorizontally() {
        return this.getMaxScrollLeft() > 0;
    }
    canScrollUp() {
        return this.getScrollTop() > 0;
    }
    canScrollDown() {
        return this.getScrollTop() < this.getMaxScrollTop();
    }
    canScrollLeft() {
        return this.getScrollLeft() > 0;
    }
    canScrollRight() {
        return this.getScrollLeft() < this.getMaxScrollLeft();
    }
}
class ElementScrollController extends ScrollController {
    constructor(el){
        super();
        this.el = el;
    }
    getScrollTop() {
        return this.el.scrollTop;
    }
    getScrollLeft() {
        return this.el.scrollLeft;
    }
    setScrollTop(top) {
        this.el.scrollTop = top;
    }
    setScrollLeft(left) {
        this.el.scrollLeft = left;
    }
    getScrollWidth() {
        return this.el.scrollWidth;
    }
    getScrollHeight() {
        return this.el.scrollHeight;
    }
    getClientHeight() {
        return this.el.clientHeight;
    }
    getClientWidth() {
        return this.el.clientWidth;
    }
}
class WindowScrollController extends ScrollController {
    getScrollTop() {
        return window.scrollY;
    }
    getScrollLeft() {
        return window.scrollX;
    }
    setScrollTop(n) {
        window.scroll(window.scrollX, n);
    }
    setScrollLeft(n) {
        window.scroll(n, window.scrollY);
    }
    getScrollWidth() {
        return document.documentElement.scrollWidth;
    }
    getScrollHeight() {
        return document.documentElement.scrollHeight;
    }
    getClientHeight() {
        return document.documentElement.clientHeight;
    }
    getClientWidth() {
        return document.documentElement.clientWidth;
    }
}
/*
an INTERACTABLE date component

PURPOSES:
- hook up to fg, fill, and mirror renderers
- interface for dragging and hits
*/ class DateComponent extends BaseComponent {
    constructor(){
        super(...arguments);
        this.uid = guid();
    }
    // Hit System
    // -----------------------------------------------------------------------------------------------------------------
    prepareHits() {}
    queryHit(positionLeft, positionTop, elWidth, elHeight) {
        return null; // this should be abstract
    }
    // Pointer Interaction Utils
    // -----------------------------------------------------------------------------------------------------------------
    isValidSegDownEl(el) {
        return !this.props.eventDrag && // HACK
        !this.props.eventResize && // HACK
        !elementClosest(el, '.fc-event-mirror');
    }
    isValidDateDownEl(el) {
        return !elementClosest(el, '.fc-event:not(.fc-bg-event)') && !elementClosest(el, '.fc-more-link') && // a "more.." link
        !elementClosest(el, 'a[data-navlink]') && // a clickable nav link
        !elementClosest(el, '.fc-popover'); // hack
    }
}
class NamedTimeZoneImpl {
    constructor(timeZoneName){
        this.timeZoneName = timeZoneName;
    }
}
class SegHierarchy {
    constructor(getEntryThickness = (entry)=>{
        // if no thickness known, assume 1 (if 0, so small it always fits)
        return entry.thickness || 1;
    }){
        this.getEntryThickness = getEntryThickness;
        // settings
        this.strictOrder = false;
        this.allowReslicing = false;
        this.maxCoord = -1; // -1 means no max
        this.maxStackCnt = -1; // -1 means no max
        this.levelCoords = []; // ordered
        this.entriesByLevel = []; // parallel with levelCoords
        this.stackCnts = {}; // TODO: use better technique!?
    }
    addSegs(inputs) {
        let hiddenEntries = [];
        for (let input of inputs)this.insertEntry(input, hiddenEntries);
        return hiddenEntries;
    }
    insertEntry(entry, hiddenEntries) {
        let insertion = this.findInsertion(entry);
        if (this.isInsertionValid(insertion, entry)) this.insertEntryAt(entry, insertion);
        else this.handleInvalidInsertion(insertion, entry, hiddenEntries);
    }
    isInsertionValid(insertion, entry) {
        return (this.maxCoord === -1 || insertion.levelCoord + this.getEntryThickness(entry) <= this.maxCoord) && (this.maxStackCnt === -1 || insertion.stackCnt < this.maxStackCnt);
    }
    handleInvalidInsertion(insertion, entry, hiddenEntries) {
        if (this.allowReslicing && insertion.touchingEntry) {
            const hiddenEntry = Object.assign(Object.assign({}, entry), {
                span: intersectSpans(entry.span, insertion.touchingEntry.span)
            });
            hiddenEntries.push(hiddenEntry);
            this.splitEntry(entry, insertion.touchingEntry, hiddenEntries);
        } else hiddenEntries.push(entry);
    }
    /*
    Does NOT add what hit the `barrier` into hiddenEntries. Should already be done.
    */ splitEntry(entry, barrier, hiddenEntries) {
        let entrySpan = entry.span;
        let barrierSpan = barrier.span;
        if (entrySpan.start < barrierSpan.start) this.insertEntry({
            index: entry.index,
            thickness: entry.thickness,
            span: {
                start: entrySpan.start,
                end: barrierSpan.start
            }
        }, hiddenEntries);
        if (entrySpan.end > barrierSpan.end) this.insertEntry({
            index: entry.index,
            thickness: entry.thickness,
            span: {
                start: barrierSpan.end,
                end: entrySpan.end
            }
        }, hiddenEntries);
    }
    insertEntryAt(entry, insertion) {
        let { entriesByLevel, levelCoords } = this;
        if (insertion.lateral === -1) {
            // create a new level
            insertAt(levelCoords, insertion.level, insertion.levelCoord);
            insertAt(entriesByLevel, insertion.level, [
                entry
            ]);
        } else // insert into existing level
        insertAt(entriesByLevel[insertion.level], insertion.lateral, entry);
        this.stackCnts[buildEntryKey(entry)] = insertion.stackCnt;
    }
    /*
    does not care about limits
    */ findInsertion(newEntry) {
        let { levelCoords, entriesByLevel, strictOrder, stackCnts } = this;
        let levelCnt = levelCoords.length;
        let candidateCoord = 0;
        let touchingLevel = -1;
        let touchingLateral = -1;
        let touchingEntry = null;
        let stackCnt = 0;
        for(let trackingLevel = 0; trackingLevel < levelCnt; trackingLevel += 1){
            const trackingCoord = levelCoords[trackingLevel];
            // if the current level is past the placed entry, we have found a good empty space and can stop.
            // if strictOrder, keep finding more lateral intersections.
            if (!strictOrder && trackingCoord >= candidateCoord + this.getEntryThickness(newEntry)) break;
            let trackingEntries = entriesByLevel[trackingLevel];
            let trackingEntry;
            let searchRes = binarySearch(trackingEntries, newEntry.span.start, getEntrySpanEnd); // find first entry after newEntry's end
            let lateralIndex = searchRes[0] + searchRes[1]; // if exact match (which doesn't collide), go to next one
            while((trackingEntry = trackingEntries[lateralIndex]) && // but not past the whole entry list
            trackingEntry.span.start < newEntry.span.end // and not entirely past newEntry
            ){
                let trackingEntryBottom = trackingCoord + this.getEntryThickness(trackingEntry);
                // intersects into the top of the candidate?
                if (trackingEntryBottom > candidateCoord) {
                    candidateCoord = trackingEntryBottom;
                    touchingEntry = trackingEntry;
                    touchingLevel = trackingLevel;
                    touchingLateral = lateralIndex;
                }
                // butts up against top of candidate? (will happen if just intersected as well)
                if (trackingEntryBottom === candidateCoord) // accumulate the highest possible stackCnt of the trackingEntries that butt up
                stackCnt = Math.max(stackCnt, stackCnts[buildEntryKey(trackingEntry)] + 1);
                lateralIndex += 1;
            }
        }
        // the destination level will be after touchingEntry's level. find it
        let destLevel = 0;
        if (touchingEntry) {
            destLevel = touchingLevel + 1;
            while(destLevel < levelCnt && levelCoords[destLevel] < candidateCoord)destLevel += 1;
        }
        // if adding to an existing level, find where to insert
        let destLateral = -1;
        if (destLevel < levelCnt && levelCoords[destLevel] === candidateCoord) destLateral = binarySearch(entriesByLevel[destLevel], newEntry.span.end, getEntrySpanEnd)[0];
        return {
            touchingLevel,
            touchingLateral,
            touchingEntry,
            stackCnt,
            levelCoord: candidateCoord,
            level: destLevel,
            lateral: destLateral
        };
    }
    // sorted by levelCoord (lowest to highest)
    toRects() {
        let { entriesByLevel, levelCoords } = this;
        let levelCnt = entriesByLevel.length;
        let rects = [];
        for(let level = 0; level < levelCnt; level += 1){
            let entries = entriesByLevel[level];
            let levelCoord = levelCoords[level];
            for (let entry of entries)rects.push(Object.assign(Object.assign({}, entry), {
                thickness: this.getEntryThickness(entry),
                levelCoord
            }));
        }
        return rects;
    }
}
function getEntrySpanEnd(entry) {
    return entry.span.end;
}
function buildEntryKey(entry) {
    return entry.index + ':' + entry.span.start;
}
// returns groups with entries sorted by input order
function groupIntersectingEntries(entries) {
    let merges = [];
    for (let entry of entries){
        let filteredMerges = [];
        let hungryMerge = {
            span: entry.span,
            entries: [
                entry
            ]
        };
        for (let merge of merges)if (intersectSpans(merge.span, hungryMerge.span)) hungryMerge = {
            entries: merge.entries.concat(hungryMerge.entries),
            span: joinSpans(merge.span, hungryMerge.span)
        };
        else filteredMerges.push(merge);
        filteredMerges.push(hungryMerge);
        merges = filteredMerges;
    }
    return merges;
}
function joinSpans(span0, span1) {
    return {
        start: Math.min(span0.start, span1.start),
        end: Math.max(span0.end, span1.end)
    };
}
function intersectSpans(span0, span1) {
    let start = Math.max(span0.start, span1.start);
    let end = Math.min(span0.end, span1.end);
    if (start < end) return {
        start,
        end
    };
    return null;
}
// general util
// ---------------------------------------------------------------------------------------------------------------------
function insertAt(arr, index, item) {
    arr.splice(index, 0, item);
}
function binarySearch(a, searchVal, getItemVal) {
    let startIndex = 0;
    let endIndex = a.length; // exclusive
    if (!endIndex || searchVal < getItemVal(a[startIndex])) return [
        0,
        0
    ];
    if (searchVal > getItemVal(a[endIndex - 1])) return [
        endIndex,
        0
    ];
    while(startIndex < endIndex){
        let middleIndex = Math.floor(startIndex + (endIndex - startIndex) / 2);
        let middleVal = getItemVal(a[middleIndex]);
        if (searchVal < middleVal) endIndex = middleIndex;
        else if (searchVal > middleVal) startIndex = middleIndex + 1;
        else return [
            middleIndex,
            1
        ];
    }
    return [
        startIndex,
        0
    ];
}
/*
An abstraction for a dragging interaction originating on an event.
Does higher-level things than PointerDragger, such as possibly:
- a "mirror" that moves with the pointer
- a minimum number of pixels or other criteria for a true drag to begin

subclasses must emit:
- pointerdown
- dragstart
- dragmove
- pointerup
- dragend
*/ class ElementDragging {
    constructor(el, selector){
        this.emitter = new Emitter();
    }
    destroy() {}
    setMirrorIsVisible(bool) {
    // optional if subclass doesn't want to support a mirror
    }
    setMirrorNeedsRevert(bool) {
    // optional if subclass doesn't want to support a mirror
    }
    setAutoScrollEnabled(bool) {
    // optional
    }
}
// TODO: get rid of this in favor of options system,
// tho it's really easy to access this globally rather than pass thru options.
const config = {};
/*
Information about what will happen when an external element is dragged-and-dropped
onto a calendar. Contains information for creating an event.
*/ const DRAG_META_REFINERS = {
    startTime: createDuration,
    duration: createDuration,
    create: Boolean,
    sourceId: String
};
function parseDragMeta(raw) {
    let { refined, extra } = refineProps(raw, DRAG_META_REFINERS);
    return {
        startTime: refined.startTime || null,
        duration: refined.duration || null,
        create: refined.create != null ? refined.create : true,
        sourceId: refined.sourceId,
        leftoverProps: extra
    };
}
// Computes a default column header formatting string if `colFormat` is not explicitly defined
function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
    // if more than one week row, or if there are a lot of columns with not much space,
    // put just the day numbers will be in each cell
    if (!datesRepDistinctDays || dayCnt > 10) return createFormatter({
        weekday: 'short'
    }); // "Sat"
    if (dayCnt > 1) return createFormatter({
        weekday: 'short',
        month: 'numeric',
        day: 'numeric',
        omitCommas: true
    }); // "Sat 11/12"
    return createFormatter({
        weekday: 'long'
    }); // "Saturday"
}
const CLASS_NAME = 'fc-col-header-cell'; // do the cushion too? no
function renderInner$1(renderProps) {
    return renderProps.text;
}
// BAD name for this class now. used in the Header
class TableDateCell extends BaseComponent {
    render() {
        let { dateEnv, options, theme, viewApi } = this.context;
        let { props } = this;
        let { date, dateProfile } = props;
        let dayMeta = getDateMeta(date, props.todayRange, null, dateProfile);
        let classNames = [
            CLASS_NAME
        ].concat(getDayClassNames(dayMeta, theme));
        let text = dateEnv.format(date, props.dayHeaderFormat);
        // if colCnt is 1, we are already in a day-view and don't need a navlink
        let navLinkAttrs = !dayMeta.isDisabled && props.colCnt > 1 ? buildNavLinkAttrs(this.context, date) : {};
        let publicDate = dateEnv.toDate(date);
        // workaround for Luxon (and maybe moment) returning prior-days when start-of-day
        // in DST gap: https://github.com/fullcalendar/fullcalendar/issues/7633
        if (dateEnv.namedTimeZoneImpl) publicDate = addMs(publicDate, 3600000); // add an hour
        let renderProps = Object.assign(Object.assign(Object.assign({
            date: publicDate,
            view: viewApi
        }, props.extraRenderProps), {
            text
        }), dayMeta);
        return (0, _preact.createElement)(ContentContainer, {
            elTag: "th",
            elClasses: classNames,
            elAttrs: Object.assign({
                role: 'columnheader',
                colSpan: props.colSpan,
                'data-date': !dayMeta.isDisabled ? formatDayString(date) : undefined
            }, props.extraDataAttrs),
            renderProps: renderProps,
            generatorName: "dayHeaderContent",
            customGenerator: options.dayHeaderContent,
            defaultGenerator: renderInner$1,
            classNameGenerator: options.dayHeaderClassNames,
            didMount: options.dayHeaderDidMount,
            willUnmount: options.dayHeaderWillUnmount
        }, (InnerContainer)=>(0, _preact.createElement)("div", {
                className: "fc-scrollgrid-sync-inner"
            }, !dayMeta.isDisabled && (0, _preact.createElement)(InnerContainer, {
                elTag: "a",
                elAttrs: navLinkAttrs,
                elClasses: [
                    'fc-col-header-cell-cushion',
                    props.isSticky && 'fc-sticky'
                ]
            })));
    }
}
const WEEKDAY_FORMAT = createFormatter({
    weekday: 'long'
});
class TableDowCell extends BaseComponent {
    render() {
        let { props } = this;
        let { dateEnv, theme, viewApi, options } = this.context;
        let date = addDays(new Date(259200000), props.dow); // start with Sun, 04 Jan 1970 00:00:00 GMT
        let dateMeta = {
            dow: props.dow,
            isDisabled: false,
            isFuture: false,
            isPast: false,
            isToday: false,
            isOther: false
        };
        let text = dateEnv.format(date, props.dayHeaderFormat);
        let renderProps = Object.assign(Object.assign(Object.assign(Object.assign({
            date
        }, dateMeta), {
            view: viewApi
        }), props.extraRenderProps), {
            text
        });
        return (0, _preact.createElement)(ContentContainer, {
            elTag: "th",
            elClasses: [
                CLASS_NAME,
                ...getDayClassNames(dateMeta, theme),
                ...props.extraClassNames || []
            ],
            elAttrs: Object.assign({
                role: 'columnheader',
                colSpan: props.colSpan
            }, props.extraDataAttrs),
            renderProps: renderProps,
            generatorName: "dayHeaderContent",
            customGenerator: options.dayHeaderContent,
            defaultGenerator: renderInner$1,
            classNameGenerator: options.dayHeaderClassNames,
            didMount: options.dayHeaderDidMount,
            willUnmount: options.dayHeaderWillUnmount
        }, (InnerContent)=>(0, _preact.createElement)("div", {
                className: "fc-scrollgrid-sync-inner"
            }, (0, _preact.createElement)(InnerContent, {
                elTag: "a",
                elClasses: [
                    'fc-col-header-cell-cushion',
                    props.isSticky && 'fc-sticky'
                ],
                elAttrs: {
                    'aria-label': dateEnv.format(date, WEEKDAY_FORMAT)
                }
            })));
    }
}
class DayHeader extends BaseComponent {
    constructor(){
        super(...arguments);
        this.createDayHeaderFormatter = memoize(createDayHeaderFormatter);
    }
    render() {
        let { context } = this;
        let { dates, dateProfile, datesRepDistinctDays, renderIntro } = this.props;
        let dayHeaderFormat = this.createDayHeaderFormatter(context.options.dayHeaderFormat, datesRepDistinctDays, dates.length);
        return (0, _preact.createElement)(NowTimer, {
            unit: "day"
        }, (nowDate, todayRange)=>(0, _preact.createElement)("tr", {
                role: "row"
            }, renderIntro && renderIntro('day'), dates.map((date)=>datesRepDistinctDays ? (0, _preact.createElement)(TableDateCell, {
                    key: date.toISOString(),
                    date: date,
                    dateProfile: dateProfile,
                    todayRange: todayRange,
                    colCnt: dates.length,
                    dayHeaderFormat: dayHeaderFormat
                }) : (0, _preact.createElement)(TableDowCell, {
                    key: date.getUTCDay(),
                    dow: date.getUTCDay(),
                    dayHeaderFormat: dayHeaderFormat
                }))));
    }
}
function createDayHeaderFormatter(explicitFormat, datesRepDistinctDays, dateCnt) {
    return explicitFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dateCnt);
}
class DaySeriesModel {
    constructor(range, dateProfileGenerator){
        let date = range.start;
        let { end } = range;
        let indices = [];
        let dates = [];
        let dayIndex = -1;
        while(date < end){
            if (dateProfileGenerator.isHiddenDay(date)) indices.push(dayIndex + 0.5); // mark that it's between indices
            else {
                dayIndex += 1;
                indices.push(dayIndex);
                dates.push(date);
            }
            date = addDays(date, 1);
        }
        this.dates = dates;
        this.indices = indices;
        this.cnt = dates.length;
    }
    sliceRange(range) {
        let firstIndex = this.getDateDayIndex(range.start); // inclusive first index
        let lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index
        let clippedFirstIndex = Math.max(0, firstIndex);
        let clippedLastIndex = Math.min(this.cnt - 1, lastIndex);
        // deal with in-between indices
        clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell
        clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell
        if (clippedFirstIndex <= clippedLastIndex) return {
            firstIndex: clippedFirstIndex,
            lastIndex: clippedLastIndex,
            isStart: firstIndex === clippedFirstIndex,
            isEnd: lastIndex === clippedLastIndex
        };
        return null;
    }
    // Given a date, returns its chronolocial cell-index from the first cell of the grid.
    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
    // If before the first offset, returns a negative number.
    // If after the last offset, returns an offset past the last cell offset.
    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.
    getDateDayIndex(date) {
        let { indices } = this;
        let dayOffset = Math.floor(diffDays(this.dates[0], date));
        if (dayOffset < 0) return indices[0] - 1;
        if (dayOffset >= indices.length) return indices[indices.length - 1] + 1;
        return indices[dayOffset];
    }
}
class DayTableModel {
    constructor(daySeries, breakOnWeeks){
        let { dates } = daySeries;
        let daysPerRow;
        let firstDay;
        let rowCnt;
        if (breakOnWeeks) {
            // count columns until the day-of-week repeats
            firstDay = dates[0].getUTCDay();
            for(daysPerRow = 1; daysPerRow < dates.length; daysPerRow += 1){
                if (dates[daysPerRow].getUTCDay() === firstDay) break;
            }
            rowCnt = Math.ceil(dates.length / daysPerRow);
        } else {
            rowCnt = 1;
            daysPerRow = dates.length;
        }
        this.rowCnt = rowCnt;
        this.colCnt = daysPerRow;
        this.daySeries = daySeries;
        this.cells = this.buildCells();
        this.headerDates = this.buildHeaderDates();
    }
    buildCells() {
        let rows = [];
        for(let row = 0; row < this.rowCnt; row += 1){
            let cells = [];
            for(let col = 0; col < this.colCnt; col += 1)cells.push(this.buildCell(row, col));
            rows.push(cells);
        }
        return rows;
    }
    buildCell(row, col) {
        let date = this.daySeries.dates[row * this.colCnt + col];
        return {
            key: date.toISOString(),
            date
        };
    }
    buildHeaderDates() {
        let dates = [];
        for(let col = 0; col < this.colCnt; col += 1)dates.push(this.cells[0][col].date);
        return dates;
    }
    sliceRange(range) {
        let { colCnt } = this;
        let seriesSeg = this.daySeries.sliceRange(range);
        let segs = [];
        if (seriesSeg) {
            let { firstIndex, lastIndex } = seriesSeg;
            let index = firstIndex;
            while(index <= lastIndex){
                let row = Math.floor(index / colCnt);
                let nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
                segs.push({
                    row,
                    firstCol: index % colCnt,
                    lastCol: (nextIndex - 1) % colCnt,
                    isStart: seriesSeg.isStart && index === firstIndex,
                    isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex
                });
                index = nextIndex;
            }
        }
        return segs;
    }
}
class Slicer {
    constructor(){
        this.sliceBusinessHours = memoize(this._sliceBusinessHours);
        this.sliceDateSelection = memoize(this._sliceDateSpan);
        this.sliceEventStore = memoize(this._sliceEventStore);
        this.sliceEventDrag = memoize(this._sliceInteraction);
        this.sliceEventResize = memoize(this._sliceInteraction);
        this.forceDayIfListItem = false; // hack
    }
    sliceProps(props, dateProfile, nextDayThreshold, context, ...extraArgs) {
        let { eventUiBases } = props;
        let eventSegs = this.sliceEventStore(props.eventStore, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs);
        return {
            dateSelectionSegs: this.sliceDateSelection(props.dateSelection, dateProfile, nextDayThreshold, eventUiBases, context, ...extraArgs),
            businessHourSegs: this.sliceBusinessHours(props.businessHours, dateProfile, nextDayThreshold, context, ...extraArgs),
            fgEventSegs: eventSegs.fg,
            bgEventSegs: eventSegs.bg,
            eventDrag: this.sliceEventDrag(props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs),
            eventResize: this.sliceEventResize(props.eventResize, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs),
            eventSelection: props.eventSelection
        }; // TODO: give interactionSegs?
    }
    sliceNowDate(date, dateProfile, nextDayThreshold, context, ...extraArgs) {
        return this._sliceDateSpan({
            range: {
                start: date,
                end: addMs(date, 1)
            },
            allDay: false
        }, dateProfile, nextDayThreshold, {}, context, ...extraArgs);
    }
    _sliceBusinessHours(businessHours, dateProfile, nextDayThreshold, context, ...extraArgs) {
        if (!businessHours) return [];
        return this._sliceEventStore(expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), context), {}, dateProfile, nextDayThreshold, ...extraArgs).bg;
    }
    _sliceEventStore(eventStore, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs) {
        if (eventStore) {
            let rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
            return {
                bg: this.sliceEventRanges(rangeRes.bg, extraArgs),
                fg: this.sliceEventRanges(rangeRes.fg, extraArgs)
            };
        }
        return {
            bg: [],
            fg: []
        };
    }
    _sliceInteraction(interaction, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs) {
        if (!interaction) return null;
        let rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
        return {
            segs: this.sliceEventRanges(rangeRes.fg, extraArgs),
            affectedInstances: interaction.affectedEvents.instances,
            isEvent: interaction.isEvent
        };
    }
    _sliceDateSpan(dateSpan, dateProfile, nextDayThreshold, eventUiBases, context, ...extraArgs) {
        if (!dateSpan) return [];
        let activeRange = computeActiveRange(dateProfile, Boolean(nextDayThreshold));
        let activeDateSpanRange = intersectRanges(dateSpan.range, activeRange);
        if (activeDateSpanRange) {
            dateSpan = Object.assign(Object.assign({}, dateSpan), {
                range: activeDateSpanRange
            });
            let eventRange = fabricateEventRange(dateSpan, eventUiBases, context);
            let segs = this.sliceRange(dateSpan.range, ...extraArgs);
            for (let seg of segs)seg.eventRange = eventRange;
            return segs;
        }
        return [];
    }
    /*
    "complete" seg means it has component and eventRange
    */ sliceEventRanges(eventRanges, extraArgs) {
        let segs = [];
        for (let eventRange of eventRanges)segs.push(...this.sliceEventRange(eventRange, extraArgs));
        return segs;
    }
    /*
    "complete" seg means it has component and eventRange
    */ sliceEventRange(eventRange, extraArgs) {
        let dateRange = eventRange.range;
        // hack to make multi-day events that are being force-displayed as list-items to take up only one day
        if (this.forceDayIfListItem && eventRange.ui.display === 'list-item') dateRange = {
            start: dateRange.start,
            end: addDays(dateRange.start, 1)
        };
        let segs = this.sliceRange(dateRange, ...extraArgs);
        for (let seg of segs){
            seg.eventRange = eventRange;
            seg.isStart = eventRange.isStart && seg.isStart;
            seg.isEnd = eventRange.isEnd && seg.isEnd;
        }
        return segs;
    }
}
/*
for incorporating slotMinTime/slotMaxTime if appropriate
TODO: should be part of DateProfile!
TimelineDateProfile already does this btw
*/ function computeActiveRange(dateProfile, isComponentAllDay) {
    let range = dateProfile.activeRange;
    if (isComponentAllDay) return range;
    return {
        start: addMs(range.start, dateProfile.slotMinTime.milliseconds),
        end: addMs(range.end, dateProfile.slotMaxTime.milliseconds - 864e5)
    };
}
// high-level segmenting-aware tester functions
// ------------------------------------------------------------------------------------------------------------------------
function isInteractionValid(interaction, dateProfile, context) {
    let { instances } = interaction.mutatedEvents;
    for(let instanceId in instances){
        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) return false;
    }
    return isNewPropsValid({
        eventDrag: interaction
    }, context); // HACK: the eventDrag props is used for ALL interactions
}
function isDateSelectionValid(dateSelection, dateProfile, context) {
    if (!rangeContainsRange(dateProfile.validRange, dateSelection.range)) return false;
    return isNewPropsValid({
        dateSelection
    }, context);
}
function isNewPropsValid(newProps, context) {
    let calendarState = context.getCurrentData();
    let props = Object.assign({
        businessHours: calendarState.businessHours,
        dateSelection: '',
        eventStore: calendarState.eventStore,
        eventUiBases: calendarState.eventUiBases,
        eventSelection: '',
        eventDrag: null,
        eventResize: null
    }, newProps);
    return (context.pluginHooks.isPropsValid || isPropsValid)(props, context);
}
function isPropsValid(state, context, dateSpanMeta = {}, filterConfig) {
    if (state.eventDrag && !isInteractionPropsValid(state, context, dateSpanMeta, filterConfig)) return false;
    if (state.dateSelection && !isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig)) return false;
    return true;
}
// Moving Event Validation
// ------------------------------------------------------------------------------------------------------------------------
function isInteractionPropsValid(state, context, dateSpanMeta, filterConfig) {
    let currentState = context.getCurrentData();
    let interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions
    let subjectEventStore = interaction.mutatedEvents;
    let subjectDefs = subjectEventStore.defs;
    let subjectInstances = subjectEventStore.instances;
    let subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {
        '': currentState.selectionConfig
    });
    if (filterConfig) subjectConfigs = mapHash(subjectConfigs, filterConfig);
    // exclude the subject events. TODO: exclude defs too?
    let otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances);
    let otherDefs = otherEventStore.defs;
    let otherInstances = otherEventStore.instances;
    let otherConfigs = compileEventUis(otherDefs, state.eventUiBases);
    for(let subjectInstanceId in subjectInstances){
        let subjectInstance = subjectInstances[subjectInstanceId];
        let subjectRange = subjectInstance.range;
        let subjectConfig = subjectConfigs[subjectInstance.defId];
        let subjectDef = subjectDefs[subjectInstance.defId];
        // constraint
        if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, context)) return false;
        // overlap
        let { eventOverlap } = context.options;
        let eventOverlapFunc = typeof eventOverlap === 'function' ? eventOverlap : null;
        for(let otherInstanceId in otherInstances){
            let otherInstance = otherInstances[otherInstanceId];
            // intersect! evaluate
            if (rangesIntersect(subjectRange, otherInstance.range)) {
                let otherOverlap = otherConfigs[otherInstance.defId].overlap;
                // consider the other event's overlap. only do this if the subject event is a "real" event
                if (otherOverlap === false && interaction.isEvent) return false;
                if (subjectConfig.overlap === false) return false;
                if (eventOverlapFunc && !eventOverlapFunc(new EventImpl(context, otherDefs[otherInstance.defId], otherInstance), new EventImpl(context, subjectDef, subjectInstance))) return false;
            }
        }
        // allow (a function)
        let calendarEventStore = currentState.eventStore; // need global-to-calendar, not local to component (splittable)state
        for (let subjectAllow of subjectConfig.allows){
            let subjectDateSpan = Object.assign(Object.assign({}, dateSpanMeta), {
                range: subjectInstance.range,
                allDay: subjectDef.allDay
            });
            let origDef = calendarEventStore.defs[subjectDef.defId];
            let origInstance = calendarEventStore.instances[subjectInstanceId];
            let eventApi;
            if (origDef) eventApi = new EventImpl(context, origDef, origInstance);
            else eventApi = new EventImpl(context, subjectDef); // no instance, because had no dates
            if (!subjectAllow(buildDateSpanApiWithContext(subjectDateSpan, context), eventApi)) return false;
        }
    }
    return true;
}
// Date Selection Validation
// ------------------------------------------------------------------------------------------------------------------------
function isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig) {
    let relevantEventStore = state.eventStore;
    let relevantDefs = relevantEventStore.defs;
    let relevantInstances = relevantEventStore.instances;
    let selection = state.dateSelection;
    let selectionRange = selection.range;
    let { selectionConfig } = context.getCurrentData();
    if (filterConfig) selectionConfig = filterConfig(selectionConfig);
    // constraint
    if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, context)) return false;
    // overlap
    let { selectOverlap } = context.options;
    let selectOverlapFunc = typeof selectOverlap === 'function' ? selectOverlap : null;
    for(let relevantInstanceId in relevantInstances){
        let relevantInstance = relevantInstances[relevantInstanceId];
        // intersect! evaluate
        if (rangesIntersect(selectionRange, relevantInstance.range)) {
            if (selectionConfig.overlap === false) return false;
            if (selectOverlapFunc && !selectOverlapFunc(new EventImpl(context, relevantDefs[relevantInstance.defId], relevantInstance), null)) return false;
        }
    }
    // allow (a function)
    for (let selectionAllow of selectionConfig.allows){
        let fullDateSpan = Object.assign(Object.assign({}, dateSpanMeta), selection);
        if (!selectionAllow(buildDateSpanApiWithContext(fullDateSpan, context), null)) return false;
    }
    return true;
}
// Constraint Utils
// ------------------------------------------------------------------------------------------------------------------------
function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, context) {
    for (let constraint of constraints){
        if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context), subjectRange)) return false;
    }
    return true;
}
function constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context) {
    if (constraint === 'businessHours') return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, context));
    if (typeof constraint === 'string') return eventStoreToRanges(filterEventStoreDefs(otherEventStore, (eventDef)=>eventDef.groupId === constraint));
    if (typeof constraint === 'object' && constraint) return eventStoreToRanges(expandRecurring(constraint, subjectRange, context));
    return []; // if it's false
}
// TODO: move to event-store file?
function eventStoreToRanges(eventStore) {
    let { instances } = eventStore;
    let ranges = [];
    for(let instanceId in instances)ranges.push(instances[instanceId].range);
    return ranges;
}
// TODO: move to geom file?
function anyRangesContainRange(outerRanges, innerRange) {
    for (let outerRange of outerRanges){
        if (rangeContainsRange(outerRange, innerRange)) return true;
    }
    return false;
}
const VISIBLE_HIDDEN_RE = /^(visible|hidden)$/;
class Scroller extends BaseComponent {
    constructor(){
        super(...arguments);
        this.handleEl = (el)=>{
            this.el = el;
            setRef(this.props.elRef, el);
        };
    }
    render() {
        let { props } = this;
        let { liquid, liquidIsAbsolute } = props;
        let isAbsolute = liquid && liquidIsAbsolute;
        let className = [
            'fc-scroller'
        ];
        if (liquid) {
            if (liquidIsAbsolute) className.push('fc-scroller-liquid-absolute');
            else className.push('fc-scroller-liquid');
        }
        return (0, _preact.createElement)("div", {
            ref: this.handleEl,
            className: className.join(' '),
            style: {
                overflowX: props.overflowX,
                overflowY: props.overflowY,
                left: isAbsolute && -(props.overcomeLeft || 0) || '',
                right: isAbsolute && -(props.overcomeRight || 0) || '',
                bottom: isAbsolute && -(props.overcomeBottom || 0) || '',
                marginLeft: !isAbsolute && -(props.overcomeLeft || 0) || '',
                marginRight: !isAbsolute && -(props.overcomeRight || 0) || '',
                marginBottom: !isAbsolute && -(props.overcomeBottom || 0) || '',
                maxHeight: props.maxHeight || ''
            }
        }, props.children);
    }
    needsXScrolling() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) return false;
        // testing scrollWidth>clientWidth is unreliable cross-browser when pixel heights aren't integers.
        // much more reliable to see if children are taller than the scroller, even tho doesn't account for
        // inner-child margins and absolute positioning
        let { el } = this;
        let realClientWidth = this.el.getBoundingClientRect().width - this.getYScrollbarWidth();
        let { children } = el;
        for(let i = 0; i < children.length; i += 1){
            let childEl = children[i];
            if (childEl.getBoundingClientRect().width > realClientWidth) return true;
        }
        return false;
    }
    needsYScrolling() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) return false;
        // testing scrollHeight>clientHeight is unreliable cross-browser when pixel heights aren't integers.
        // much more reliable to see if children are taller than the scroller, even tho doesn't account for
        // inner-child margins and absolute positioning
        let { el } = this;
        let realClientHeight = this.el.getBoundingClientRect().height - this.getXScrollbarWidth();
        let { children } = el;
        for(let i = 0; i < children.length; i += 1){
            let childEl = children[i];
            if (childEl.getBoundingClientRect().height > realClientHeight) return true;
        }
        return false;
    }
    getXScrollbarWidth() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) return 0;
        return this.el.offsetHeight - this.el.clientHeight; // only works because we guarantee no borders. TODO: add to CSS with important?
    }
    getYScrollbarWidth() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) return 0;
        return this.el.offsetWidth - this.el.clientWidth; // only works because we guarantee no borders. TODO: add to CSS with important?
    }
}
/*
TODO: somehow infer OtherArgs from masterCallback?
TODO: infer RefType from masterCallback if provided
*/ class RefMap {
    constructor(masterCallback){
        this.masterCallback = masterCallback;
        this.currentMap = {};
        this.depths = {};
        this.callbackMap = {};
        this.handleValue = (val, key)=>{
            let { depths, currentMap } = this;
            let removed = false;
            let added = false;
            if (val !== null) {
                // for bug... ACTUALLY: can probably do away with this now that callers don't share numeric indices anymore
                removed = key in currentMap;
                currentMap[key] = val;
                depths[key] = (depths[key] || 0) + 1;
                added = true;
            } else {
                depths[key] -= 1;
                if (!depths[key]) {
                    delete currentMap[key];
                    delete this.callbackMap[key];
                    removed = true;
                }
            }
            if (this.masterCallback) {
                if (removed) this.masterCallback(null, String(key));
                if (added) this.masterCallback(val, String(key));
            }
        };
    }
    createRef(key) {
        let refCallback = this.callbackMap[key];
        if (!refCallback) refCallback = this.callbackMap[key] = (val)=>{
            this.handleValue(val, String(key));
        };
        return refCallback;
    }
    // TODO: check callers that don't care about order. should use getAll instead
    // NOTE: this method has become less valuable now that we are encouraged to map order by some other index
    // TODO: provide ONE array-export function, buildArray, which fails on non-numeric indexes. caller can manipulate and "collect"
    collect(startIndex, endIndex, step) {
        return collectFromHash(this.currentMap, startIndex, endIndex, step);
    }
    getAll() {
        return hashValuesToArray(this.currentMap);
    }
}
function computeShrinkWidth(chunkEls) {
    let shrinkCells = findElements(chunkEls, '.fc-scrollgrid-shrink');
    let largestWidth = 0;
    for (let shrinkCell of shrinkCells)largestWidth = Math.max(largestWidth, computeSmallestCellWidth(shrinkCell));
    return Math.ceil(largestWidth); // <table> elements work best with integers. round up to ensure contents fits
}
function getSectionHasLiquidHeight(props, sectionConfig) {
    return props.liquid && sectionConfig.liquid; // does the section do liquid-height? (need to have whole scrollgrid liquid-height as well)
}
function getAllowYScrolling(props, sectionConfig) {
    return sectionConfig.maxHeight != null || // if its possible for the height to max out, we might need scrollbars
    getSectionHasLiquidHeight(props, sectionConfig); // if the section is liquid height, it might condense enough to require scrollbars
}
// TODO: ONLY use `arg`. force out internal function to use same API
function renderChunkContent(sectionConfig, chunkConfig, arg, isHeader) {
    let { expandRows } = arg;
    let content = typeof chunkConfig.content === 'function' ? chunkConfig.content(arg) : (0, _preact.createElement)('table', {
        role: 'presentation',
        className: [
            chunkConfig.tableClassName,
            sectionConfig.syncRowHeights ? 'fc-scrollgrid-sync-table' : ''
        ].join(' '),
        style: {
            minWidth: arg.tableMinWidth,
            width: arg.clientWidth,
            height: expandRows ? arg.clientHeight : ''
        }
    }, arg.tableColGroupNode, (0, _preact.createElement)(isHeader ? 'thead' : 'tbody', {
        role: 'presentation'
    }, typeof chunkConfig.rowContent === 'function' ? chunkConfig.rowContent(arg) : chunkConfig.rowContent));
    return content;
}
function isColPropsEqual(cols0, cols1) {
    return isArraysEqual(cols0, cols1, isPropsEqual);
}
function renderMicroColGroup(cols, shrinkWidth) {
    let colNodes = [];
    /*
    for ColProps with spans, it would have been great to make a single <col span="">
    HOWEVER, Chrome was getting messing up distributing the width to <td>/<th> elements with colspans.
    SOLUTION: making individual <col> elements makes Chrome behave.
    */ for (let colProps of cols){
        let span = colProps.span || 1;
        for(let i = 0; i < span; i += 1)colNodes.push((0, _preact.createElement)("col", {
            style: {
                width: colProps.width === 'shrink' ? sanitizeShrinkWidth(shrinkWidth) : colProps.width || '',
                minWidth: colProps.minWidth || ''
            }
        }));
    }
    return (0, _preact.createElement)('colgroup', {}, ...colNodes);
}
function sanitizeShrinkWidth(shrinkWidth) {
    /* why 4? if we do 0, it will kill any border, which are needed for computeSmallestCellWidth
    4 accounts for 2 2-pixel borders. TODO: better solution? */ return shrinkWidth == null ? 4 : shrinkWidth;
}
function hasShrinkWidth(cols) {
    for (let col of cols){
        if (col.width === 'shrink') return true;
    }
    return false;
}
function getScrollGridClassNames(liquid, context) {
    let classNames = [
        'fc-scrollgrid',
        context.theme.getClass('table')
    ];
    if (liquid) classNames.push('fc-scrollgrid-liquid');
    return classNames;
}
function getSectionClassNames(sectionConfig, wholeTableVGrow) {
    let classNames = [
        'fc-scrollgrid-section',
        `fc-scrollgrid-section-${sectionConfig.type}`,
        sectionConfig.className
    ];
    if (wholeTableVGrow && sectionConfig.liquid && sectionConfig.maxHeight == null) classNames.push('fc-scrollgrid-section-liquid');
    if (sectionConfig.isSticky) classNames.push('fc-scrollgrid-section-sticky');
    return classNames;
}
function renderScrollShim(arg) {
    return (0, _preact.createElement)("div", {
        className: "fc-scrollgrid-sticky-shim",
        style: {
            width: arg.clientWidth,
            minWidth: arg.tableMinWidth
        }
    });
}
function getStickyHeaderDates(options) {
    let { stickyHeaderDates } = options;
    if (stickyHeaderDates == null || stickyHeaderDates === 'auto') stickyHeaderDates = options.height === 'auto' || options.viewHeight === 'auto';
    return stickyHeaderDates;
}
function getStickyFooterScrollbar(options) {
    let { stickyFooterScrollbar } = options;
    if (stickyFooterScrollbar == null || stickyFooterScrollbar === 'auto') stickyFooterScrollbar = options.height === 'auto' || options.viewHeight === 'auto';
    return stickyFooterScrollbar;
}
class SimpleScrollGrid extends BaseComponent {
    constructor(){
        super(...arguments);
        this.processCols = memoize((a)=>a, isColPropsEqual); // so we get same `cols` props every time
        // yucky to memoize VNodes, but much more efficient for consumers
        this.renderMicroColGroup = memoize(renderMicroColGroup);
        this.scrollerRefs = new RefMap();
        this.scrollerElRefs = new RefMap(this._handleScrollerEl.bind(this));
        this.state = {
            shrinkWidth: null,
            forceYScrollbars: false,
            scrollerClientWidths: {},
            scrollerClientHeights: {}
        };
        // TODO: can do a really simple print-view. dont need to join rows
        this.handleSizing = ()=>{
            this.safeSetState(Object.assign({
                shrinkWidth: this.computeShrinkWidth()
            }, this.computeScrollerDims()));
        };
    }
    render() {
        let { props, state, context } = this;
        let sectionConfigs = props.sections || [];
        let cols = this.processCols(props.cols);
        let microColGroupNode = this.renderMicroColGroup(cols, state.shrinkWidth);
        let classNames = getScrollGridClassNames(props.liquid, context);
        if (props.collapsibleWidth) classNames.push('fc-scrollgrid-collapsible');
        // TODO: make DRY
        let configCnt = sectionConfigs.length;
        let configI = 0;
        let currentConfig;
        let headSectionNodes = [];
        let bodySectionNodes = [];
        let footSectionNodes = [];
        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'header'){
            headSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));
            configI += 1;
        }
        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'body'){
            bodySectionNodes.push(this.renderSection(currentConfig, microColGroupNode, false));
            configI += 1;
        }
        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'footer'){
            footSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));
            configI += 1;
        }
        // firefox bug: when setting height on table and there is a thead or tfoot,
        // the necessary height:100% on the liquid-height body section forces the *whole* table to be taller. (bug #5524)
        // use getCanVGrowWithinCell as a way to detect table-stupid firefox.
        // if so, use a simpler dom structure, jam everything into a lone tbody.
        let isBuggy = !getCanVGrowWithinCell();
        const roleAttrs = {
            role: 'rowgroup'
        };
        return (0, _preact.createElement)('table', {
            role: 'grid',
            className: classNames.join(' '),
            style: {
                height: props.height
            }
        }, Boolean(!isBuggy && headSectionNodes.length) && (0, _preact.createElement)('thead', roleAttrs, ...headSectionNodes), Boolean(!isBuggy && bodySectionNodes.length) && (0, _preact.createElement)('tbody', roleAttrs, ...bodySectionNodes), Boolean(!isBuggy && footSectionNodes.length) && (0, _preact.createElement)('tfoot', roleAttrs, ...footSectionNodes), isBuggy && (0, _preact.createElement)('tbody', roleAttrs, ...headSectionNodes, ...bodySectionNodes, ...footSectionNodes));
    }
    renderSection(sectionConfig, microColGroupNode, isHeader) {
        if ('outerContent' in sectionConfig) return (0, _preact.createElement)((0, _preact.Fragment), {
            key: sectionConfig.key
        }, sectionConfig.outerContent);
        return (0, _preact.createElement)("tr", {
            key: sectionConfig.key,
            role: "presentation",
            className: getSectionClassNames(sectionConfig, this.props.liquid).join(' ')
        }, this.renderChunkTd(sectionConfig, microColGroupNode, sectionConfig.chunk, isHeader));
    }
    renderChunkTd(sectionConfig, microColGroupNode, chunkConfig, isHeader) {
        if ('outerContent' in chunkConfig) return chunkConfig.outerContent;
        let { props } = this;
        let { forceYScrollbars, scrollerClientWidths, scrollerClientHeights } = this.state;
        let needsYScrolling = getAllowYScrolling(props, sectionConfig); // TODO: do lazily. do in section config?
        let isLiquid = getSectionHasLiquidHeight(props, sectionConfig);
        // for `!props.liquid` - is WHOLE scrollgrid natural height?
        // TODO: do same thing in advanced scrollgrid? prolly not b/c always has horizontal scrollbars
        let overflowY = !props.liquid ? 'visible' : forceYScrollbars ? 'scroll' : !needsYScrolling ? 'hidden' : 'auto';
        let sectionKey = sectionConfig.key;
        let content = renderChunkContent(sectionConfig, chunkConfig, {
            tableColGroupNode: microColGroupNode,
            tableMinWidth: '',
            clientWidth: !props.collapsibleWidth && scrollerClientWidths[sectionKey] !== undefined ? scrollerClientWidths[sectionKey] : null,
            clientHeight: scrollerClientHeights[sectionKey] !== undefined ? scrollerClientHeights[sectionKey] : null,
            expandRows: sectionConfig.expandRows,
            syncRowHeights: false,
            rowSyncHeights: [],
            reportRowHeightChange: ()=>{}
        }, isHeader);
        return (0, _preact.createElement)(isHeader ? 'th' : 'td', {
            ref: chunkConfig.elRef,
            role: 'presentation'
        }, (0, _preact.createElement)("div", {
            className: `fc-scroller-harness${isLiquid ? ' fc-scroller-harness-liquid' : ''}`
        }, (0, _preact.createElement)(Scroller, {
            ref: this.scrollerRefs.createRef(sectionKey),
            elRef: this.scrollerElRefs.createRef(sectionKey),
            overflowY: overflowY,
            overflowX: !props.liquid ? 'visible' : 'hidden' /* natural height? */ ,
            maxHeight: sectionConfig.maxHeight,
            liquid: isLiquid,
            liquidIsAbsolute: true
        }, content)));
    }
    _handleScrollerEl(scrollerEl, key) {
        let section = getSectionByKey(this.props.sections, key);
        if (section) setRef(section.chunk.scrollerElRef, scrollerEl);
    }
    componentDidMount() {
        this.handleSizing();
        this.context.addResizeHandler(this.handleSizing);
    }
    componentDidUpdate() {
        // TODO: need better solution when state contains non-sizing things
        this.handleSizing();
    }
    componentWillUnmount() {
        this.context.removeResizeHandler(this.handleSizing);
    }
    computeShrinkWidth() {
        return hasShrinkWidth(this.props.cols) ? computeShrinkWidth(this.scrollerElRefs.getAll()) : 0;
    }
    computeScrollerDims() {
        let scrollbarWidth = getScrollbarWidths();
        let { scrollerRefs, scrollerElRefs } = this;
        let forceYScrollbars = false;
        let scrollerClientWidths = {};
        let scrollerClientHeights = {};
        for(let sectionKey in scrollerRefs.currentMap){
            let scroller = scrollerRefs.currentMap[sectionKey];
            if (scroller && scroller.needsYScrolling()) {
                forceYScrollbars = true;
                break;
            }
        }
        for (let section of this.props.sections){
            let sectionKey = section.key;
            let scrollerEl = scrollerElRefs.currentMap[sectionKey];
            if (scrollerEl) {
                let harnessEl = scrollerEl.parentNode; // TODO: weird way to get this. need harness b/c doesn't include table borders
                scrollerClientWidths[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().width - (forceYScrollbars ? scrollbarWidth.y // use global because scroller might not have scrollbars yet but will need them in future
                 : 0));
                scrollerClientHeights[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().height);
            }
        }
        return {
            forceYScrollbars,
            scrollerClientWidths,
            scrollerClientHeights
        };
    }
}
SimpleScrollGrid.addStateEquality({
    scrollerClientWidths: isPropsEqual,
    scrollerClientHeights: isPropsEqual
});
function getSectionByKey(sections, key) {
    for (let section of sections){
        if (section.key === key) return section;
    }
    return null;
}
class EventContainer extends BaseComponent {
    constructor(){
        super(...arguments);
        this.handleEl = (el)=>{
            this.el = el;
            if (el) setElSeg(el, this.props.seg);
        };
    }
    render() {
        const { props, context } = this;
        const { options } = context;
        const { seg } = props;
        const { eventRange } = seg;
        const { ui } = eventRange;
        const renderProps = {
            event: new EventImpl(context, eventRange.def, eventRange.instance),
            view: context.viewApi,
            timeText: props.timeText,
            textColor: ui.textColor,
            backgroundColor: ui.backgroundColor,
            borderColor: ui.borderColor,
            isDraggable: !props.disableDragging && computeSegDraggable(seg, context),
            isStartResizable: !props.disableResizing && computeSegStartResizable(seg, context),
            isEndResizable: !props.disableResizing && computeSegEndResizable(seg),
            isMirror: Boolean(props.isDragging || props.isResizing || props.isDateSelecting),
            isStart: Boolean(seg.isStart),
            isEnd: Boolean(seg.isEnd),
            isPast: Boolean(props.isPast),
            isFuture: Boolean(props.isFuture),
            isToday: Boolean(props.isToday),
            isSelected: Boolean(props.isSelected),
            isDragging: Boolean(props.isDragging),
            isResizing: Boolean(props.isResizing)
        };
        return (0, _preact.createElement)(ContentContainer, Object.assign({}, props /* contains children */ , {
            elRef: this.handleEl,
            elClasses: [
                ...getEventClassNames(renderProps),
                ...seg.eventRange.ui.classNames,
                ...props.elClasses || []
            ],
            renderProps: renderProps,
            generatorName: "eventContent",
            customGenerator: options.eventContent,
            defaultGenerator: props.defaultGenerator,
            classNameGenerator: options.eventClassNames,
            didMount: options.eventDidMount,
            willUnmount: options.eventWillUnmount
        }));
    }
    componentDidUpdate(prevProps) {
        if (this.el && this.props.seg !== prevProps.seg) setElSeg(this.el, this.props.seg);
    }
}
// should not be a purecomponent
class StandardEvent extends BaseComponent {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { seg } = props;
        let { ui } = seg.eventRange;
        let timeFormat = options.eventTimeFormat || props.defaultTimeFormat;
        let timeText = buildSegTimeText(seg, timeFormat, context, props.defaultDisplayEventTime, props.defaultDisplayEventEnd);
        return (0, _preact.createElement)(EventContainer, Object.assign({}, props /* includes elRef */ , {
            elTag: "a",
            elStyle: {
                borderColor: ui.borderColor,
                backgroundColor: ui.backgroundColor
            },
            elAttrs: getSegAnchorAttrs(seg, context),
            defaultGenerator: renderInnerContent$1,
            timeText: timeText
        }), (InnerContent, eventContentArg)=>(0, _preact.createElement)((0, _preact.Fragment), null, (0, _preact.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-event-main'
                ],
                elStyle: {
                    color: eventContentArg.textColor
                }
            }), Boolean(eventContentArg.isStartResizable) && (0, _preact.createElement)("div", {
                className: "fc-event-resizer fc-event-resizer-start"
            }), Boolean(eventContentArg.isEndResizable) && (0, _preact.createElement)("div", {
                className: "fc-event-resizer fc-event-resizer-end"
            })));
    }
}
function renderInnerContent$1(innerProps) {
    return (0, _preact.createElement)("div", {
        className: "fc-event-main-frame"
    }, innerProps.timeText && (0, _preact.createElement)("div", {
        className: "fc-event-time"
    }, innerProps.timeText), (0, _preact.createElement)("div", {
        className: "fc-event-title-container"
    }, (0, _preact.createElement)("div", {
        className: "fc-event-title fc-sticky"
    }, innerProps.event.title || (0, _preact.createElement)((0, _preact.Fragment), null, "\u00A0"))));
}
const NowIndicatorContainer = (props)=>(0, _preact.createElement)(ViewContextType.Consumer, null, (context)=>{
        let { options } = context;
        let renderProps = {
            isAxis: props.isAxis,
            date: context.dateEnv.toDate(props.date),
            view: context.viewApi
        };
        return (0, _preact.createElement)(ContentContainer, Object.assign({}, props /* includes children */ , {
            elTag: props.elTag || 'div',
            renderProps: renderProps,
            generatorName: "nowIndicatorContent",
            customGenerator: options.nowIndicatorContent,
            classNameGenerator: options.nowIndicatorClassNames,
            didMount: options.nowIndicatorDidMount,
            willUnmount: options.nowIndicatorWillUnmount
        }));
    });
const DAY_NUM_FORMAT = createFormatter({
    day: 'numeric'
});
class DayCellContainer extends BaseComponent {
    constructor(){
        super(...arguments);
        this.refineRenderProps = memoizeObjArg(refineRenderProps);
    }
    render() {
        let { props, context } = this;
        let { options } = context;
        let renderProps = this.refineRenderProps({
            date: props.date,
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            isMonthStart: props.isMonthStart || false,
            showDayNumber: props.showDayNumber,
            extraRenderProps: props.extraRenderProps,
            viewApi: context.viewApi,
            dateEnv: context.dateEnv,
            monthStartFormat: options.monthStartFormat
        });
        return (0, _preact.createElement)(ContentContainer, Object.assign({}, props /* includes children */ , {
            elClasses: [
                ...getDayClassNames(renderProps, context.theme),
                ...props.elClasses || []
            ],
            elAttrs: Object.assign(Object.assign({}, props.elAttrs), renderProps.isDisabled ? {} : {
                'data-date': formatDayString(props.date)
            }),
            renderProps: renderProps,
            generatorName: "dayCellContent",
            customGenerator: options.dayCellContent,
            defaultGenerator: props.defaultGenerator,
            classNameGenerator: // don't use custom classNames if disabled
            renderProps.isDisabled ? undefined : options.dayCellClassNames,
            didMount: options.dayCellDidMount,
            willUnmount: options.dayCellWillUnmount
        }));
    }
}
function hasCustomDayCellContent(options) {
    return Boolean(options.dayCellContent || hasCustomRenderingHandler('dayCellContent', options));
}
function refineRenderProps(raw) {
    let { date, dateEnv, dateProfile, isMonthStart } = raw;
    let dayMeta = getDateMeta(date, raw.todayRange, null, dateProfile);
    let dayNumberText = raw.showDayNumber ? dateEnv.format(date, isMonthStart ? raw.monthStartFormat : DAY_NUM_FORMAT) : '';
    return Object.assign(Object.assign(Object.assign({
        date: dateEnv.toDate(date),
        view: raw.viewApi
    }, dayMeta), {
        isMonthStart,
        dayNumberText
    }), raw.extraRenderProps);
}
class BgEvent extends BaseComponent {
    render() {
        let { props } = this;
        let { seg } = props;
        return (0, _preact.createElement)(EventContainer, {
            elTag: "div",
            elClasses: [
                'fc-bg-event'
            ],
            elStyle: {
                backgroundColor: seg.eventRange.ui.backgroundColor
            },
            defaultGenerator: renderInnerContent,
            seg: seg,
            timeText: "",
            isDragging: false,
            isResizing: false,
            isDateSelecting: false,
            isSelected: false,
            isPast: props.isPast,
            isFuture: props.isFuture,
            isToday: props.isToday,
            disableDragging: true,
            disableResizing: true
        });
    }
}
function renderInnerContent(props) {
    let { title } = props.event;
    return title && (0, _preact.createElement)("div", {
        className: "fc-event-title"
    }, props.event.title);
}
function renderFill(fillType) {
    return (0, _preact.createElement)("div", {
        className: `fc-${fillType}`
    });
}
const WeekNumberContainer = (props)=>(0, _preact.createElement)(ViewContextType.Consumer, null, (context)=>{
        let { dateEnv, options } = context;
        let { date } = props;
        let format = options.weekNumberFormat || props.defaultFormat;
        let num = dateEnv.computeWeekNumber(date); // TODO: somehow use for formatting as well?
        let text = dateEnv.format(date, format);
        let renderProps = {
            num,
            text,
            date
        };
        return (0, _preact.createElement)(ContentContainer // why isn't WeekNumberContentArg being auto-detected?
        , Object.assign({}, props /* includes children */ , {
            renderProps: renderProps,
            generatorName: "weekNumberContent",
            customGenerator: options.weekNumberContent,
            defaultGenerator: renderInner,
            classNameGenerator: options.weekNumberClassNames,
            didMount: options.weekNumberDidMount,
            willUnmount: options.weekNumberWillUnmount
        }));
    });
function renderInner(innerProps) {
    return innerProps.text;
}
const PADDING_FROM_VIEWPORT = 10;
class Popover extends BaseComponent {
    constructor(){
        super(...arguments);
        this.state = {
            titleId: getUniqueDomId()
        };
        this.handleRootEl = (el)=>{
            this.rootEl = el;
            if (this.props.elRef) setRef(this.props.elRef, el);
        };
        // Triggered when the user clicks *anywhere* in the document, for the autoHide feature
        this.handleDocumentMouseDown = (ev)=>{
            // only hide the popover if the click happened outside the popover
            const target = getEventTargetViaRoot(ev);
            if (!this.rootEl.contains(target)) this.handleCloseClick();
        };
        this.handleDocumentKeyDown = (ev)=>{
            if (ev.key === 'Escape') this.handleCloseClick();
        };
        this.handleCloseClick = ()=>{
            let { onClose } = this.props;
            if (onClose) onClose();
        };
    }
    render() {
        let { theme, options } = this.context;
        let { props, state } = this;
        let classNames = [
            'fc-popover',
            theme.getClass('popover')
        ].concat(props.extraClassNames || []);
        return (0, _compat.createPortal)((0, _preact.createElement)("div", Object.assign({}, props.extraAttrs, {
            id: props.id,
            className: classNames.join(' '),
            "aria-labelledby": state.titleId,
            ref: this.handleRootEl
        }), (0, _preact.createElement)("div", {
            className: 'fc-popover-header ' + theme.getClass('popoverHeader')
        }, (0, _preact.createElement)("span", {
            className: "fc-popover-title",
            id: state.titleId
        }, props.title), (0, _preact.createElement)("span", {
            className: 'fc-popover-close ' + theme.getIconClass('close'),
            title: options.closeHint,
            onClick: this.handleCloseClick
        })), (0, _preact.createElement)("div", {
            className: 'fc-popover-body ' + theme.getClass('popoverContent')
        }, props.children)), props.parentEl);
    }
    componentDidMount() {
        document.addEventListener('mousedown', this.handleDocumentMouseDown);
        document.addEventListener('keydown', this.handleDocumentKeyDown);
        this.updateSize();
    }
    componentWillUnmount() {
        document.removeEventListener('mousedown', this.handleDocumentMouseDown);
        document.removeEventListener('keydown', this.handleDocumentKeyDown);
    }
    updateSize() {
        let { isRtl } = this.context;
        let { alignmentEl, alignGridTop } = this.props;
        let { rootEl } = this;
        let alignmentRect = computeClippedClientRect(alignmentEl);
        if (alignmentRect) {
            let popoverDims = rootEl.getBoundingClientRect();
            // position relative to viewport
            let popoverTop = alignGridTop ? elementClosest(alignmentEl, '.fc-scrollgrid').getBoundingClientRect().top : alignmentRect.top;
            let popoverLeft = isRtl ? alignmentRect.right - popoverDims.width : alignmentRect.left;
            // constrain
            popoverTop = Math.max(popoverTop, PADDING_FROM_VIEWPORT);
            popoverLeft = Math.min(popoverLeft, document.documentElement.clientWidth - PADDING_FROM_VIEWPORT - popoverDims.width);
            popoverLeft = Math.max(popoverLeft, PADDING_FROM_VIEWPORT);
            let origin = rootEl.offsetParent.getBoundingClientRect();
            applyStyle(rootEl, {
                top: popoverTop - origin.top,
                left: popoverLeft - origin.left
            });
        }
    }
}
class MorePopover extends DateComponent {
    constructor(){
        super(...arguments);
        this.handleRootEl = (rootEl)=>{
            this.rootEl = rootEl;
            if (rootEl) this.context.registerInteractiveComponent(this, {
                el: rootEl,
                useEventCenter: false
            });
            else this.context.unregisterInteractiveComponent(this);
        };
    }
    render() {
        let { options, dateEnv } = this.context;
        let { props } = this;
        let { startDate, todayRange, dateProfile } = props;
        let title = dateEnv.format(startDate, options.dayPopoverFormat);
        return (0, _preact.createElement)(DayCellContainer, {
            elRef: this.handleRootEl,
            date: startDate,
            dateProfile: dateProfile,
            todayRange: todayRange
        }, (InnerContent, renderProps, elAttrs)=>(0, _preact.createElement)(Popover, {
                elRef: elAttrs.ref,
                id: props.id,
                title: title,
                extraClassNames: [
                    'fc-more-popover'
                ].concat(elAttrs.className || []),
                extraAttrs: elAttrs /* TODO: make these time-based when not whole-day? */ ,
                parentEl: props.parentEl,
                alignmentEl: props.alignmentEl,
                alignGridTop: props.alignGridTop,
                onClose: props.onClose
            }, hasCustomDayCellContent(options) && (0, _preact.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-more-popover-misc'
                ]
            }), props.children));
    }
    queryHit(positionLeft, positionTop, elWidth, elHeight) {
        let { rootEl, props } = this;
        if (positionLeft >= 0 && positionLeft < elWidth && positionTop >= 0 && positionTop < elHeight) return {
            dateProfile: props.dateProfile,
            dateSpan: Object.assign({
                allDay: !props.forceTimed,
                range: {
                    start: props.startDate,
                    end: props.endDate
                }
            }, props.extraDateSpan),
            dayEl: rootEl,
            rect: {
                left: 0,
                top: 0,
                right: elWidth,
                bottom: elHeight
            },
            layer: 1
        };
        return null;
    }
}
class MoreLinkContainer extends BaseComponent {
    constructor(){
        super(...arguments);
        this.state = {
            isPopoverOpen: false,
            popoverId: getUniqueDomId()
        };
        this.handleLinkEl = (linkEl)=>{
            this.linkEl = linkEl;
            if (this.props.elRef) setRef(this.props.elRef, linkEl);
        };
        this.handleClick = (ev)=>{
            let { props, context } = this;
            let { moreLinkClick } = context.options;
            let date = computeRange(props).start;
            function buildPublicSeg(seg) {
                let { def, instance, range } = seg.eventRange;
                return {
                    event: new EventImpl(context, def, instance),
                    start: context.dateEnv.toDate(range.start),
                    end: context.dateEnv.toDate(range.end),
                    isStart: seg.isStart,
                    isEnd: seg.isEnd
                };
            }
            if (typeof moreLinkClick === 'function') moreLinkClick = moreLinkClick({
                date,
                allDay: Boolean(props.allDayDate),
                allSegs: props.allSegs.map(buildPublicSeg),
                hiddenSegs: props.hiddenSegs.map(buildPublicSeg),
                jsEvent: ev,
                view: context.viewApi
            });
            if (!moreLinkClick || moreLinkClick === 'popover') this.setState({
                isPopoverOpen: true
            });
            else if (typeof moreLinkClick === 'string') context.calendarApi.zoomTo(date, moreLinkClick);
        };
        this.handlePopoverClose = ()=>{
            this.setState({
                isPopoverOpen: false
            });
        };
    }
    render() {
        let { props, state } = this;
        return (0, _preact.createElement)(ViewContextType.Consumer, null, (context)=>{
            let { viewApi, options, calendarApi } = context;
            let { moreLinkText } = options;
            let { moreCnt } = props;
            let range = computeRange(props);
            let text = typeof moreLinkText === 'function' // TODO: eventually use formatWithOrdinals
             ? moreLinkText.call(calendarApi, moreCnt) : `+${moreCnt} ${moreLinkText}`;
            let hint = formatWithOrdinals(options.moreLinkHint, [
                moreCnt
            ], text);
            let renderProps = {
                num: moreCnt,
                shortText: `+${moreCnt}`,
                text,
                view: viewApi
            };
            return (0, _preact.createElement)((0, _preact.Fragment), null, Boolean(props.moreCnt) && (0, _preact.createElement)(ContentContainer, {
                elTag: props.elTag || 'a',
                elRef: this.handleLinkEl,
                elClasses: [
                    ...props.elClasses || [],
                    'fc-more-link'
                ],
                elStyle: props.elStyle,
                elAttrs: Object.assign(Object.assign(Object.assign({}, props.elAttrs), createAriaClickAttrs(this.handleClick)), {
                    title: hint,
                    'aria-expanded': state.isPopoverOpen,
                    'aria-controls': state.isPopoverOpen ? state.popoverId : ''
                }),
                renderProps: renderProps,
                generatorName: "moreLinkContent",
                customGenerator: options.moreLinkContent,
                defaultGenerator: props.defaultGenerator || renderMoreLinkInner,
                classNameGenerator: options.moreLinkClassNames,
                didMount: options.moreLinkDidMount,
                willUnmount: options.moreLinkWillUnmount
            }, props.children), state.isPopoverOpen && (0, _preact.createElement)(MorePopover, {
                id: state.popoverId,
                startDate: range.start,
                endDate: range.end,
                dateProfile: props.dateProfile,
                todayRange: props.todayRange,
                extraDateSpan: props.extraDateSpan,
                parentEl: this.parentEl,
                alignmentEl: props.alignmentElRef ? props.alignmentElRef.current : this.linkEl,
                alignGridTop: props.alignGridTop,
                forceTimed: props.forceTimed,
                onClose: this.handlePopoverClose
            }, props.popoverContent()));
        });
    }
    componentDidMount() {
        this.updateParentEl();
    }
    componentDidUpdate() {
        this.updateParentEl();
    }
    updateParentEl() {
        if (this.linkEl) this.parentEl = elementClosest(this.linkEl, '.fc-view-harness');
    }
}
function renderMoreLinkInner(props) {
    return props.text;
}
function computeRange(props) {
    if (props.allDayDate) return {
        start: props.allDayDate,
        end: addDays(props.allDayDate, 1)
    };
    let { hiddenSegs } = props;
    return {
        start: computeEarliestSegStart(hiddenSegs),
        end: computeLatestSegEnd(hiddenSegs)
    };
}
function computeEarliestSegStart(segs) {
    return segs.reduce(pickEarliestStart).eventRange.range.start;
}
function pickEarliestStart(seg0, seg1) {
    return seg0.eventRange.range.start < seg1.eventRange.range.start ? seg0 : seg1;
}
function computeLatestSegEnd(segs) {
    return segs.reduce(pickLatestEnd).eventRange.range.end;
}
function pickLatestEnd(seg0, seg1) {
    return seg0.eventRange.range.end > seg1.eventRange.range.end ? seg0 : seg1;
}
class Store {
    constructor(){
        this.handlers = [];
    }
    set(value) {
        this.currentValue = value;
        for (let handler of this.handlers)handler(value);
    }
    subscribe(handler) {
        this.handlers.push(handler);
        if (this.currentValue !== undefined) handler(this.currentValue);
    }
}
/*
Subscribers will get a LIST of CustomRenderings
*/ class CustomRenderingStore extends Store {
    constructor(){
        super(...arguments);
        this.map = new Map();
    }
    // for consistent order
    handle(customRendering) {
        const { map } = this;
        let updated = false;
        if (customRendering.isActive) {
            map.set(customRendering.id, customRendering);
            updated = true;
        } else if (map.has(customRendering.id)) {
            map.delete(customRendering.id);
            updated = true;
        }
        if (updated) this.set(map);
    }
}

},{"preact":"f5XJc","preact/compat":"g8qRV","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"f5XJc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>x);
parcelHelpers.export(exports, "Fragment", ()=>_);
parcelHelpers.export(exports, "cloneElement", ()=>F);
parcelHelpers.export(exports, "createContext", ()=>G);
parcelHelpers.export(exports, "createElement", ()=>y);
parcelHelpers.export(exports, "createRef", ()=>d);
parcelHelpers.export(exports, "h", ()=>y);
parcelHelpers.export(exports, "hydrate", ()=>E);
parcelHelpers.export(exports, "isValidElement", ()=>i);
parcelHelpers.export(exports, "options", ()=>l);
parcelHelpers.export(exports, "render", ()=>D);
parcelHelpers.export(exports, "toChildArray", ()=>j);
var n, l, u, i, t, r, o, f, e, c = {}, s = [], a = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function h(n, l) {
    for(var u in l)n[u] = l[u];
    return n;
}
function v(n) {
    var l = n.parentNode;
    l && l.removeChild(n);
}
function y(l, u, i) {
    var t, r, o, f = {};
    for(o in u)"key" == o ? t = u[o] : "ref" == o ? r = u[o] : f[o] = u[o];
    if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), "function" == typeof l && null != l.defaultProps) for(o in l.defaultProps)void 0 === f[o] && (f[o] = l.defaultProps[o]);
    return p(l, f, t, r, null);
}
function p(n, i, t, r, o) {
    var f = {
        type: n,
        props: i,
        key: t,
        ref: r,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == o ? ++u : o
    };
    return null == o && null != l.vnode && l.vnode(f), f;
}
function d() {
    return {
        current: null
    };
}
function _(n) {
    return n.children;
}
function k(n, l, u, i, t) {
    var r;
    for(r in u)"children" === r || "key" === r || r in l || g(n, r, null, u[r], i);
    for(r in l)t && "function" != typeof l[r] || "children" === r || "key" === r || "value" === r || "checked" === r || u[r] === l[r] || g(n, r, l[r], u[r], i);
}
function b(n, l, u) {
    "-" === l[0] ? n.setProperty(l, null == u ? "" : u) : n[l] = null == u ? "" : "number" != typeof u || a.test(l) ? u : u + "px";
}
function g(n, l, u, i, t) {
    var r;
    n: if ("style" === l) {
        if ("string" == typeof u) n.style.cssText = u;
        else {
            if ("string" == typeof i && (n.style.cssText = i = ""), i) for(l in i)u && l in u || b(n.style, l, "");
            if (u) for(l in u)i && u[l] === i[l] || b(n.style, l, u[l]);
        }
    } else if ("o" === l[0] && "n" === l[1]) r = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + r] = u, u ? i || n.addEventListener(l, r ? w : m, r) : n.removeEventListener(l, r ? w : m, r);
    else if ("dangerouslySetInnerHTML" !== l) {
        if (t) l = l.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" !== l && "height" !== l && "href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
            n[l] = null == u ? "" : u;
            break n;
        } catch (n) {}
        "function" == typeof u || (null == u || !1 === u && -1 == l.indexOf("-") ? n.removeAttribute(l) : n.setAttribute(l, u));
    }
}
function m(n) {
    t = !0;
    try {
        return this.l[n.type + !1](l.event ? l.event(n) : n);
    } finally{
        t = !1;
    }
}
function w(n) {
    t = !0;
    try {
        return this.l[n.type + !0](l.event ? l.event(n) : n);
    } finally{
        t = !1;
    }
}
function x(n, l) {
    this.props = n, this.context = l;
}
function A(n, l) {
    if (null == l) return n.__ ? A(n.__, n.__.__k.indexOf(n) + 1) : null;
    for(var u; l < n.__k.length; l++)if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
    return "function" == typeof n.type ? A(n) : null;
}
function P(n) {
    var l, u;
    if (null != (n = n.__) && null != n.__c) {
        for(n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++)if (null != (u = n.__k[l]) && null != u.__e) {
            n.__e = n.__c.base = u.__e;
            break;
        }
        return P(n);
    }
}
function C(n) {
    t ? setTimeout(n) : f(n);
}
function T(n) {
    (!n.__d && (n.__d = !0) && r.push(n) && !$.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || C)($);
}
function $() {
    var n, l, u, i, t, o, f, e;
    for(r.sort(function(n, l) {
        return n.__v.__b - l.__v.__b;
    }); n = r.shift();)n.__d && (l = r.length, i = void 0, t = void 0, f = (o = (u = n).__v).__e, (e = u.__P) && (i = [], (t = h({}, o)).__v = o.__v + 1, M(e, o, t, u.__n, void 0 !== e.ownerSVGElement, null != o.__h ? [
        f
    ] : null, i, null == f ? A(o) : f, o.__h), N(i, o), o.__e != f && P(o)), r.length > l && r.sort(function(n, l) {
        return n.__v.__b - l.__v.__b;
    }));
    $.__r = 0;
}
function H(n, l, u, i, t, r, o, f, e, a) {
    var h, v, y, d, k, b, g, m = i && i.__k || s, w = m.length;
    for(u.__k = [], h = 0; h < l.length; h++)if (null != (d = u.__k[h] = null == (d = l[h]) || "boolean" == typeof d ? null : "string" == typeof d || "number" == typeof d || "bigint" == typeof d ? p(null, d, null, null, d) : Array.isArray(d) ? p(_, {
        children: d
    }, null, null, null) : d.__b > 0 ? p(d.type, d.props, d.key, d.ref ? d.ref : null, d.__v) : d)) {
        if (d.__ = u, d.__b = u.__b + 1, null === (y = m[h]) || y && d.key == y.key && d.type === y.type) m[h] = void 0;
        else for(v = 0; v < w; v++){
            if ((y = m[v]) && d.key == y.key && d.type === y.type) {
                m[v] = void 0;
                break;
            }
            y = null;
        }
        M(n, d, y = y || c, t, r, o, f, e, a), k = d.__e, (v = d.ref) && y.ref != v && (g || (g = []), y.ref && g.push(y.ref, null, d), g.push(v, d.__c || k, d)), null != k ? (null == b && (b = k), "function" == typeof d.type && d.__k === y.__k ? d.__d = e = I(d, e, n) : e = z(n, d, y, m, k, e), "function" == typeof u.type && (u.__d = e)) : e && y.__e == e && e.parentNode != n && (e = A(y));
    }
    for(u.__e = b, h = w; h--;)null != m[h] && ("function" == typeof u.type && null != m[h].__e && m[h].__e == u.__d && (u.__d = L(i).nextSibling), q(m[h], m[h]));
    if (g) for(h = 0; h < g.length; h++)S(g[h], g[++h], g[++h]);
}
function I(n, l, u) {
    for(var i, t = n.__k, r = 0; t && r < t.length; r++)(i = t[r]) && (i.__ = n, l = "function" == typeof i.type ? I(i, l, u) : z(u, i, i, t, i.__e, l));
    return l;
}
function j(n, l) {
    return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function(n) {
        j(n, l);
    }) : l.push(n)), l;
}
function z(n, l, u, i, t, r) {
    var o, f, e;
    if (void 0 !== l.__d) o = l.__d, l.__d = void 0;
    else if (null == u || t != r || null == t.parentNode) n: if (null == r || r.parentNode !== n) n.appendChild(t), o = null;
    else {
        for(f = r, e = 0; (f = f.nextSibling) && e < i.length; e += 1)if (f == t) break n;
        n.insertBefore(t, r), o = r;
    }
    return void 0 !== o ? o : t.nextSibling;
}
function L(n) {
    var l, u, i;
    if (null == n.type || "string" == typeof n.type) return n.__e;
    if (n.__k) {
        for(l = n.__k.length - 1; l >= 0; l--)if ((u = n.__k[l]) && (i = L(u))) return i;
    }
    return null;
}
function M(n, u, i, t, r, o, f, e, c) {
    var s, a, v, y, p, d, k, b, g, m, w, A, P, C, T, $ = u.type;
    if (void 0 !== u.constructor) return null;
    null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, o = [
        e
    ]), (s = l.__b) && s(u);
    try {
        n: if ("function" == typeof $) {
            if (b = u.props, g = (s = $.contextType) && t[s.__c], m = s ? g ? g.props.value : s.__ : t, i.__c ? k = (a = u.__c = i.__c).__ = a.__E : ("prototype" in $ && $.prototype.render ? u.__c = a = new $(b, m) : (u.__c = a = new x(b, m), a.constructor = $, a.render = B), g && g.sub(a), a.props = b, a.state || (a.state = {}), a.context = m, a.__n = t, v = a.__d = !0, a.__h = [], a._sb = []), null == a.__s && (a.__s = a.state), null != $.getDerivedStateFromProps && (a.__s == a.state && (a.__s = h({}, a.__s)), h(a.__s, $.getDerivedStateFromProps(b, a.__s))), y = a.props, p = a.state, a.__v = u, v) null == $.getDerivedStateFromProps && null != a.componentWillMount && a.componentWillMount(), null != a.componentDidMount && a.__h.push(a.componentDidMount);
            else {
                if (null == $.getDerivedStateFromProps && b !== y && null != a.componentWillReceiveProps && a.componentWillReceiveProps(b, m), !a.__e && null != a.shouldComponentUpdate && !1 === a.shouldComponentUpdate(b, a.__s, m) || u.__v === i.__v) {
                    for(u.__v !== i.__v && (a.props = b, a.state = a.__s, a.__d = !1), u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function(n) {
                        n && (n.__ = u);
                    }), w = 0; w < a._sb.length; w++)a.__h.push(a._sb[w]);
                    a._sb = [], a.__h.length && f.push(a);
                    break n;
                }
                null != a.componentWillUpdate && a.componentWillUpdate(b, a.__s, m), null != a.componentDidUpdate && a.__h.push(function() {
                    a.componentDidUpdate(y, p, d);
                });
            }
            if (a.context = m, a.props = b, a.__P = n, A = l.__r, P = 0, "prototype" in $ && $.prototype.render) {
                for(a.state = a.__s, a.__d = !1, A && A(u), s = a.render(a.props, a.state, a.context), C = 0; C < a._sb.length; C++)a.__h.push(a._sb[C]);
                a._sb = [];
            } else do a.__d = !1, A && A(u), s = a.render(a.props, a.state, a.context), a.state = a.__s;
            while (a.__d && ++P < 25);
            a.state = a.__s, null != a.getChildContext && (t = h(h({}, t), a.getChildContext())), v || null == a.getSnapshotBeforeUpdate || (d = a.getSnapshotBeforeUpdate(y, p)), T = null != s && s.type === _ && null == s.key ? s.props.children : s, H(n, Array.isArray(T) ? T : [
                T
            ], u, i, t, r, o, f, e, c), a.base = u.__e, u.__h = null, a.__h.length && f.push(a), k && (a.__E = a.__ = null), a.__e = !1;
        } else null == o && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = O(i.__e, u, i, t, r, o, f, c);
        (s = l.diffed) && s(u);
    } catch (n) {
        u.__v = null, (c || null != o) && (u.__e = e, u.__h = !!c, o[o.indexOf(e)] = null), l.__e(n, u, i);
    }
}
function N(n, u) {
    l.__c && l.__c(u, n), n.some(function(u) {
        try {
            n = u.__h, u.__h = [], n.some(function(n) {
                n.call(u);
            });
        } catch (n) {
            l.__e(n, u.__v);
        }
    });
}
function O(l, u, i, t, r, o, f, e) {
    var s, a, h, y = i.props, p = u.props, d = u.type, _ = 0;
    if ("svg" === d && (r = !0), null != o) {
        for(; _ < o.length; _++)if ((s = o[_]) && "setAttribute" in s == !!d && (d ? s.localName === d : 3 === s.nodeType)) {
            l = s, o[_] = null;
            break;
        }
    }
    if (null == l) {
        if (null === d) return document.createTextNode(p);
        l = r ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, p.is && p), o = null, e = !1;
    }
    if (null === d) y === p || e && l.data === p || (l.data = p);
    else {
        if (o = o && n.call(l.childNodes), a = (y = i.props || c).dangerouslySetInnerHTML, h = p.dangerouslySetInnerHTML, !e) {
            if (null != o) for(y = {}, _ = 0; _ < l.attributes.length; _++)y[l.attributes[_].name] = l.attributes[_].value;
            (h || a) && (h && (a && h.__html == a.__html || h.__html === l.innerHTML) || (l.innerHTML = h && h.__html || ""));
        }
        if (k(l, p, y, r, e), h) u.__k = [];
        else if (_ = u.props.children, H(l, Array.isArray(_) ? _ : [
            _
        ], u, i, t, r && "foreignObject" !== d, o, f, o ? o[0] : i.__k && A(i, 0), e), null != o) for(_ = o.length; _--;)null != o[_] && v(o[_]);
        e || ("value" in p && void 0 !== (_ = p.value) && (_ !== l.value || "progress" === d && !_ || "option" === d && _ !== y.value) && g(l, "value", _, y.value, !1), "checked" in p && void 0 !== (_ = p.checked) && _ !== l.checked && g(l, "checked", _, y.checked, !1));
    }
    return l;
}
function S(n, u, i) {
    try {
        "function" == typeof n ? n(u) : n.current = u;
    } catch (n) {
        l.__e(n, i);
    }
}
function q(n, u, i) {
    var t, r;
    if (l.unmount && l.unmount(n), (t = n.ref) && (t.current && t.current !== n.__e || S(t, null, u)), null != (t = n.__c)) {
        if (t.componentWillUnmount) try {
            t.componentWillUnmount();
        } catch (n) {
            l.__e(n, u);
        }
        t.base = t.__P = null, n.__c = void 0;
    }
    if (t = n.__k) for(r = 0; r < t.length; r++)t[r] && q(t[r], u, i || "function" != typeof n.type);
    i || null == n.__e || v(n.__e), n.__ = n.__e = n.__d = void 0;
}
function B(n, l, u) {
    return this.constructor(n, u);
}
function D(u, i, t) {
    var r, o, f;
    l.__ && l.__(u, i), o = (r = "function" == typeof t) ? null : t && t.__k || i.__k, f = [], M(i, u = (!r && t || i).__k = y(_, null, [
        u
    ]), o || c, c, void 0 !== i.ownerSVGElement, !r && t ? [
        t
    ] : o ? null : i.firstChild ? n.call(i.childNodes) : null, f, !r && t ? t : o ? o.__e : i.firstChild, r), N(f, u);
}
function E(n, l) {
    D(n, l, E);
}
function F(l, u, i) {
    var t, r, o, f = h({}, l.props);
    for(o in u)"key" == o ? t = u[o] : "ref" == o ? r = u[o] : f[o] = u[o];
    return arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), p(l.type, f, t || l.key, r || l.ref, null);
}
function G(n, l) {
    var u = {
        __c: l = "__cC" + e++,
        __: n,
        Consumer: function(n, l) {
            return n.children(l);
        },
        Provider: function(n) {
            var u, i;
            return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function() {
                return i;
            }, this.shouldComponentUpdate = function(n) {
                this.props.value !== n.value && u.some(function(n) {
                    n.__e = !0, T(n);
                });
            }, this.sub = function(n) {
                u.push(n);
                var l = n.componentWillUnmount;
                n.componentWillUnmount = function() {
                    u.splice(u.indexOf(n), 1), l && l.call(n);
                };
            }), n.children;
        }
    };
    return u.Provider.__ = u.Consumer.contextType = u;
}
n = s.slice, l = {
    __e: function(n, l, u, i) {
        for(var t, r, o; l = l.__;)if ((t = l.__c) && !t.__) try {
            if ((r = t.constructor) && null != r.getDerivedStateFromError && (t.setState(r.getDerivedStateFromError(n)), o = t.__d), null != t.componentDidCatch && (t.componentDidCatch(n, i || {}), o = t.__d), o) return t.__E = t;
        } catch (l) {
            n = l;
        }
        throw n;
    }
}, u = 0, i = function(n) {
    return null != n && void 0 === n.constructor;
}, t = !1, x.prototype.setState = function(n, l) {
    var u;
    u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = h({}, this.state), "function" == typeof n && (n = n(h({}, u), this.props)), n && h(u, n), null != n && this.__v && (l && this._sb.push(l), T(this));
}, x.prototype.forceUpdate = function(n) {
    this.__v && (this.__e = !0, n && this.__h.push(n), T(this));
}, x.prototype.render = _, r = [], f = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $.__r = 0, e = 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"g8qRV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>(0, _preact.Component));
parcelHelpers.export(exports, "Fragment", ()=>(0, _preact.Fragment));
parcelHelpers.export(exports, "createContext", ()=>(0, _preact.createContext));
parcelHelpers.export(exports, "createElement", ()=>(0, _preact.createElement));
parcelHelpers.export(exports, "createRef", ()=>(0, _preact.createRef));
parcelHelpers.export(exports, "Children", ()=>O);
parcelHelpers.export(exports, "PureComponent", ()=>w);
parcelHelpers.export(exports, "StrictMode", ()=>vn);
parcelHelpers.export(exports, "Suspense", ()=>D);
parcelHelpers.export(exports, "SuspenseList", ()=>V);
parcelHelpers.export(exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", ()=>rn);
parcelHelpers.export(exports, "cloneElement", ()=>cn);
parcelHelpers.export(exports, "createFactory", ()=>on);
parcelHelpers.export(exports, "createPortal", ()=>j);
parcelHelpers.export(exports, "default", ()=>bn);
parcelHelpers.export(exports, "findDOMNode", ()=>an);
parcelHelpers.export(exports, "flushSync", ()=>hn);
parcelHelpers.export(exports, "forwardRef", ()=>k);
parcelHelpers.export(exports, "hydrate", ()=>q);
parcelHelpers.export(exports, "isValidElement", ()=>ln);
parcelHelpers.export(exports, "lazy", ()=>M);
parcelHelpers.export(exports, "memo", ()=>R);
parcelHelpers.export(exports, "render", ()=>Y);
parcelHelpers.export(exports, "startTransition", ()=>dn);
parcelHelpers.export(exports, "unmountComponentAtNode", ()=>fn);
parcelHelpers.export(exports, "unstable_batchedUpdates", ()=>sn);
parcelHelpers.export(exports, "useDeferredValue", ()=>pn);
parcelHelpers.export(exports, "useInsertionEffect", ()=>yn);
parcelHelpers.export(exports, "useSyncExternalStore", ()=>_n);
parcelHelpers.export(exports, "useTransition", ()=>mn);
parcelHelpers.export(exports, "version", ()=>un);
var _preact = require("preact");
var _hooks = require("preact/hooks");
parcelHelpers.exportAll(_hooks, exports);
function g(n, t) {
    for(var e in t)n[e] = t[e];
    return n;
}
function C(n, t) {
    for(var e in n)if ("__source" !== e && !(e in t)) return !0;
    for(var r in t)if ("__source" !== r && n[r] !== t[r]) return !0;
    return !1;
}
function E(n, t) {
    return n === t && (0 !== n || 1 / n == 1 / t) || n != n && t != t;
}
function w(n) {
    this.props = n;
}
function R(n, e) {
    function r(n) {
        var t = this.props.ref, r = t == n.ref;
        return !r && t && (t.call ? t(null) : t.current = null), e ? !e(this.props, n) || !r : C(this.props, n);
    }
    function u(e) {
        return this.shouldComponentUpdate = r, (0, _preact.createElement)(n, e);
    }
    return u.displayName = "Memo(" + (n.displayName || n.name) + ")", u.prototype.isReactComponent = !0, u.__f = !0, u;
}
(w.prototype = new (0, _preact.Component)).isPureReactComponent = !0, w.prototype.shouldComponentUpdate = function(n, t) {
    return C(this.props, n) || C(this.state, t);
};
var x = (0, _preact.options).__b;
(0, _preact.options).__b = function(n) {
    n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), x && x(n);
};
var N = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function k(n) {
    function t(t) {
        var e = g({}, t);
        return delete e.ref, n(e, t.ref || null);
    }
    return t.$$typeof = N, t.render = t, t.prototype.isReactComponent = t.__f = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
}
var A = function(n, t) {
    return null == n ? null : (0, _preact.toChildArray)((0, _preact.toChildArray)(n).map(t));
}, O = {
    map: A,
    forEach: A,
    count: function(n) {
        return n ? (0, _preact.toChildArray)(n).length : 0;
    },
    only: function(n) {
        var t = (0, _preact.toChildArray)(n);
        if (1 !== t.length) throw "Children.only";
        return t[0];
    },
    toArray: (0, _preact.toChildArray)
}, T = (0, _preact.options).__e;
(0, _preact.options).__e = function(n, t, e, r) {
    if (n.then) {
        for(var u, o = t; o = o.__;)if ((u = o.__c) && u.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), u.__c(n, t);
    }
    T(n, t, e, r);
};
var I = (0, _preact.options).unmount;
function L(n, t, e) {
    return n && (n.__c && n.__c.__H && (n.__c.__H.__.forEach(function(n) {
        "function" == typeof n.__c && n.__c();
    }), n.__c.__H = null), null != (n = g({}, n)).__c && (n.__c.__P === e && (n.__c.__P = t), n.__c = null), n.__k = n.__k && n.__k.map(function(n) {
        return L(n, t, e);
    })), n;
}
function U(n, t, e) {
    return n && (n.__v = null, n.__k = n.__k && n.__k.map(function(n) {
        return U(n, t, e);
    }), n.__c && n.__c.__P === t && (n.__e && e.insertBefore(n.__e, n.__d), n.__c.__e = !0, n.__c.__P = e)), n;
}
function D() {
    this.__u = 0, this.t = null, this.__b = null;
}
function F(n) {
    var t = n.__.__c;
    return t && t.__a && t.__a(n);
}
function M(n) {
    var e, r, u;
    function o(o) {
        if (e || (e = n()).then(function(n) {
            r = n.default || n;
        }, function(n) {
            u = n;
        }), u) throw u;
        if (!r) throw e;
        return (0, _preact.createElement)(r, o);
    }
    return o.displayName = "Lazy", o.__f = !0, o;
}
function V() {
    this.u = null, this.o = null;
}
(0, _preact.options).unmount = function(n) {
    var t = n.__c;
    t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), I && I(n);
}, (D.prototype = new (0, _preact.Component)).__c = function(n, t) {
    var e = t.__c, r = this;
    null == r.t && (r.t = []), r.t.push(e);
    var u = F(r.__v), o = !1, i = function() {
        o || (o = !0, e.__R = null, u ? u(l) : l());
    };
    e.__R = i;
    var l = function() {
        if (!--r.__u) {
            if (r.state.__a) {
                var n = r.state.__a;
                r.__v.__k[0] = U(n, n.__c.__P, n.__c.__O);
            }
            var t;
            for(r.setState({
                __a: r.__b = null
            }); t = r.t.pop();)t.forceUpdate();
        }
    }, c = !0 === t.__h;
    r.__u++ || c || r.setState({
        __a: r.__b = r.__v.__k[0]
    }), n.then(i, i);
}, D.prototype.componentWillUnmount = function() {
    this.t = [];
}, D.prototype.render = function(n, e) {
    if (this.__b) {
        if (this.__v.__k) {
            var r = document.createElement("div"), o = this.__v.__k[0].__c;
            this.__v.__k[0] = L(this.__b, r, o.__O = o.__P);
        }
        this.__b = null;
    }
    var i = e.__a && (0, _preact.createElement)((0, _preact.Fragment), null, n.fallback);
    return i && (i.__h = null), [
        (0, _preact.createElement)((0, _preact.Fragment), null, e.__a ? null : n.children),
        i
    ];
};
var W = function(n, t, e) {
    if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for(e = n.u; e;){
        for(; e.length > 3;)e.pop()();
        if (e[1] < e[0]) break;
        n.u = e = e[2];
    }
};
function P(n) {
    return this.getChildContext = function() {
        return n.context;
    }, n.children;
}
function $(n) {
    var e = this, r = n.i;
    e.componentWillUnmount = function() {
        (0, _preact.render)(null, e.l), e.l = null, e.i = null;
    }, e.i && e.i !== r && e.componentWillUnmount(), n.__v ? (e.l || (e.i = r, e.l = {
        nodeType: 1,
        parentNode: r,
        childNodes: [],
        appendChild: function(n) {
            this.childNodes.push(n), e.i.appendChild(n);
        },
        insertBefore: function(n, t) {
            this.childNodes.push(n), e.i.appendChild(n);
        },
        removeChild: function(n) {
            this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), e.i.removeChild(n);
        }
    }), (0, _preact.render)((0, _preact.createElement)(P, {
        context: e.context
    }, n.__v), e.l)) : e.l && e.componentWillUnmount();
}
function j(n, e) {
    var r = (0, _preact.createElement)($, {
        __v: n,
        i: e
    });
    return r.containerInfo = e, r;
}
(V.prototype = new (0, _preact.Component)).__a = function(n) {
    var t = this, e = F(t.__v), r = t.o.get(n);
    return r[0]++, function(u) {
        var o = function() {
            t.props.revealOrder ? (r.push(u), W(t, n, r)) : u();
        };
        e ? e(o) : o();
    };
}, V.prototype.render = function(n) {
    this.u = null, this.o = new Map;
    var t = (0, _preact.toChildArray)(n.children);
    n.revealOrder && "b" === n.revealOrder[0] && t.reverse();
    for(var e = t.length; e--;)this.o.set(t[e], this.u = [
        1,
        0,
        this.u
    ]);
    return n.children;
}, V.prototype.componentDidUpdate = V.prototype.componentDidMount = function() {
    var n = this;
    this.o.forEach(function(t, e) {
        W(n, e, t);
    });
};
var z = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, B = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, H = "undefined" != typeof document, Z = function(n) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
};
function Y(n, t, e) {
    return null == t.__k && (t.textContent = ""), (0, _preact.render)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
function q(n, t, e) {
    return (0, _preact.hydrate)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
(0, _preact.Component).prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(t) {
    Object.defineProperty((0, _preact.Component).prototype, t, {
        configurable: !0,
        get: function() {
            return this["UNSAFE_" + t];
        },
        set: function(n) {
            Object.defineProperty(this, t, {
                configurable: !0,
                writable: !0,
                value: n
            });
        }
    });
});
var G = (0, _preact.options).event;
function J() {}
function K() {
    return this.cancelBubble;
}
function Q() {
    return this.defaultPrevented;
}
(0, _preact.options).event = function(n) {
    return G && (n = G(n)), n.persist = J, n.isPropagationStopped = K, n.isDefaultPrevented = Q, n.nativeEvent = n;
};
var X, nn = {
    configurable: !0,
    get: function() {
        return this.class;
    }
}, tn = (0, _preact.options).vnode;
(0, _preact.options).vnode = function(n) {
    var t = n.type, e = n.props, u = e;
    if ("string" == typeof t) {
        var o = -1 === t.indexOf("-");
        for(var i in u = {}, e){
            var l = e[i];
            H && "children" === i && "noscript" === t || "value" === i && "defaultValue" in e && null == l || ("defaultValue" === i && "value" in e && null == e.value ? i = "value" : "download" === i && !0 === l ? l = "" : /ondoubleclick/i.test(i) ? i = "ondblclick" : /^onchange(textarea|input)/i.test(i + t) && !Z(e.type) ? i = "oninput" : /^onfocus$/i.test(i) ? i = "onfocusin" : /^onblur$/i.test(i) ? i = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i) ? i = i.toLowerCase() : o && B.test(i) ? i = i.replace(/[A-Z0-9]/g, "-$&").toLowerCase() : null === l && (l = void 0), /^oninput$/i.test(i) && (i = i.toLowerCase(), u[i] && (i = "oninputCapture")), u[i] = l);
        }
        "select" == t && u.multiple && Array.isArray(u.value) && (u.value = (0, _preact.toChildArray)(e.children).forEach(function(n) {
            n.props.selected = -1 != u.value.indexOf(n.props.value);
        })), "select" == t && null != u.defaultValue && (u.value = (0, _preact.toChildArray)(e.children).forEach(function(n) {
            n.props.selected = u.multiple ? -1 != u.defaultValue.indexOf(n.props.value) : u.defaultValue == n.props.value;
        })), n.props = u, e.class != e.className && (nn.enumerable = "className" in e, null != e.className && (u.class = e.className), Object.defineProperty(u, "className", nn));
    }
    n.$$typeof = z, tn && tn(n);
};
var en = (0, _preact.options).__r;
(0, _preact.options).__r = function(n) {
    en && en(n), X = n.__c;
};
var rn = {
    ReactCurrentDispatcher: {
        current: {
            readContext: function(n) {
                return X.__n[n.__c].props.value;
            }
        }
    }
}, un = "17.0.2";
function on(n) {
    return (0, _preact.createElement).bind(null, n);
}
function ln(n) {
    return !!n && n.$$typeof === z;
}
function cn(n) {
    return ln(n) ? (0, _preact.cloneElement).apply(null, arguments) : n;
}
function fn(n) {
    return !!n.__k && ((0, _preact.render)(null, n), !0);
}
function an(n) {
    return n && (n.base || 1 === n.nodeType && n) || null;
}
var sn = function(n, t) {
    return n(t);
}, hn = function(n, t) {
    return n(t);
}, vn = (0, _preact.Fragment);
function dn(n) {
    n();
}
function pn(n) {
    return n;
}
function mn() {
    return [
        !1,
        dn
    ];
}
var yn = (0, _hooks.useLayoutEffect);
function _n(n, t) {
    var e = t(), r = (0, _hooks.useState)({
        h: {
            __: e,
            v: t
        }
    }), u = r[0].h, o = r[1];
    return (0, _hooks.useLayoutEffect)(function() {
        u.__ = e, u.v = t, E(u.__, t()) || o({
            h: u
        });
    }, [
        n,
        e,
        t
    ]), (0, _hooks.useEffect)(function() {
        return E(u.__, u.v()) || o({
            h: u
        }), n(function() {
            E(u.__, u.v()) || o({
                h: u
            });
        });
    }, [
        n
    ]), e;
}
var bn = {
    useState: (0, _hooks.useState),
    useId: (0, _hooks.useId),
    useReducer: (0, _hooks.useReducer),
    useEffect: (0, _hooks.useEffect),
    useLayoutEffect: (0, _hooks.useLayoutEffect),
    useInsertionEffect: yn,
    useTransition: mn,
    useDeferredValue: pn,
    useSyncExternalStore: _n,
    startTransition: dn,
    useRef: (0, _hooks.useRef),
    useImperativeHandle: (0, _hooks.useImperativeHandle),
    useMemo: (0, _hooks.useMemo),
    useCallback: (0, _hooks.useCallback),
    useContext: (0, _hooks.useContext),
    useDebugValue: (0, _hooks.useDebugValue),
    version: "17.0.2",
    Children: O,
    render: Y,
    hydrate: q,
    unmountComponentAtNode: fn,
    createPortal: j,
    createElement: (0, _preact.createElement),
    createContext: (0, _preact.createContext),
    createFactory: on,
    cloneElement: cn,
    createRef: (0, _preact.createRef),
    Fragment: (0, _preact.Fragment),
    isValidElement: ln,
    findDOMNode: an,
    Component: (0, _preact.Component),
    PureComponent: w,
    memo: R,
    forwardRef: k,
    flushSync: hn,
    unstable_batchedUpdates: sn,
    StrictMode: vn,
    Suspense: D,
    SuspenseList: V,
    lazy: M,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: rn
};

},{"preact":"f5XJc","preact/hooks":"7AQQ4","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7AQQ4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallback", ()=>T);
parcelHelpers.export(exports, "useContext", ()=>q);
parcelHelpers.export(exports, "useDebugValue", ()=>x);
parcelHelpers.export(exports, "useEffect", ()=>h);
parcelHelpers.export(exports, "useErrorBoundary", ()=>P);
parcelHelpers.export(exports, "useId", ()=>V);
parcelHelpers.export(exports, "useImperativeHandle", ()=>A);
parcelHelpers.export(exports, "useLayoutEffect", ()=>s);
parcelHelpers.export(exports, "useMemo", ()=>F);
parcelHelpers.export(exports, "useReducer", ()=>y);
parcelHelpers.export(exports, "useRef", ()=>_);
parcelHelpers.export(exports, "useState", ()=>p);
var _preact = require("preact");
var t, r, u, i, o = 0, f = [], c = [], e = (0, _preact.options).__b, a = (0, _preact.options).__r, v = (0, _preact.options).diffed, l = (0, _preact.options).__c, m = (0, _preact.options).unmount;
function d(t, u) {
    (0, _preact.options).__h && (0, _preact.options).__h(r, t, o || u), o = 0;
    var i = r.__H || (r.__H = {
        __: [],
        __h: []
    });
    return t >= i.__.length && i.__.push({
        __V: c
    }), i.__[t];
}
function p(n) {
    return o = 1, y(B, n);
}
function y(n, u, i) {
    var o = d(t++, 2);
    if (o.t = n, !o.__c && (o.__ = [
        i ? i(u) : B(void 0, u),
        function(n) {
            var t = o.__N ? o.__N[0] : o.__[0], r = o.t(t, n);
            t !== r && (o.__N = [
                r,
                o.__[1]
            ], o.__c.setState({}));
        }
    ], o.__c = r, !r.u)) {
        r.u = !0;
        var f = r.shouldComponentUpdate;
        r.shouldComponentUpdate = function(n, t, r) {
            if (!o.__c.__H) return !0;
            var u = o.__c.__H.__.filter(function(n) {
                return n.__c;
            });
            if (u.every(function(n) {
                return !n.__N;
            })) return !f || f.call(this, n, t, r);
            var i = !1;
            return u.forEach(function(n) {
                if (n.__N) {
                    var t = n.__[0];
                    n.__ = n.__N, n.__N = void 0, t !== n.__[0] && (i = !0);
                }
            }), !(!i && o.__c.props === n) && (!f || f.call(this, n, t, r));
        };
    }
    return o.__N || o.__;
}
function h(u, i) {
    var o = d(t++, 3);
    !(0, _preact.options).__s && z(o.__H, i) && (o.__ = u, o.i = i, r.__H.__h.push(o));
}
function s(u, i) {
    var o = d(t++, 4);
    !(0, _preact.options).__s && z(o.__H, i) && (o.__ = u, o.i = i, r.__h.push(o));
}
function _(n) {
    return o = 5, F(function() {
        return {
            current: n
        };
    }, []);
}
function A(n, t, r) {
    o = 6, s(function() {
        return "function" == typeof n ? (n(t()), function() {
            return n(null);
        }) : n ? (n.current = t(), function() {
            return n.current = null;
        }) : void 0;
    }, null == r ? r : r.concat(n));
}
function F(n, r) {
    var u = d(t++, 7);
    return z(u.__H, r) ? (u.__V = n(), u.i = r, u.__h = n, u.__V) : u.__;
}
function T(n, t) {
    return o = 8, F(function() {
        return n;
    }, t);
}
function q(n) {
    var u = r.context[n.__c], i = d(t++, 9);
    return i.c = n, u ? (null == i.__ && (i.__ = !0, u.sub(r)), u.props.value) : n.__;
}
function x(t, r) {
    (0, _preact.options).useDebugValue && (0, _preact.options).useDebugValue(r ? r(t) : t);
}
function P(n) {
    var u = d(t++, 10), i = p();
    return u.__ = n, r.componentDidCatch || (r.componentDidCatch = function(n, t) {
        u.__ && u.__(n, t), i[1](n);
    }), [
        i[0],
        function() {
            i[1](void 0);
        }
    ];
}
function V() {
    var n = d(t++, 11);
    if (!n.__) {
        for(var u = r.__v; null !== u && !u.__m && null !== u.__;)u = u.__;
        var i = u.__m || (u.__m = [
            0,
            0
        ]);
        n.__ = "P" + i[0] + "-" + i[1]++;
    }
    return n.__;
}
function b() {
    for(var t; t = f.shift();)if (t.__P && t.__H) try {
        t.__H.__h.forEach(k), t.__H.__h.forEach(w), t.__H.__h = [];
    } catch (r) {
        t.__H.__h = [], (0, _preact.options).__e(r, t.__v);
    }
}
(0, _preact.options).__b = function(n) {
    r = null, e && e(n);
}, (0, _preact.options).__r = function(n) {
    a && a(n), t = 0;
    var i = (r = n.__c).__H;
    i && (u === r ? (i.__h = [], r.__h = [], i.__.forEach(function(n) {
        n.__N && (n.__ = n.__N), n.__V = c, n.__N = n.i = void 0;
    })) : (i.__h.forEach(k), i.__h.forEach(w), i.__h = [])), u = r;
}, (0, _preact.options).diffed = function(t) {
    v && v(t);
    var o = t.__c;
    o && o.__H && (o.__H.__h.length && (1 !== f.push(o) && i === (0, _preact.options).requestAnimationFrame || ((i = (0, _preact.options).requestAnimationFrame) || j)(b)), o.__H.__.forEach(function(n) {
        n.i && (n.__H = n.i), n.__V !== c && (n.__ = n.__V), n.i = void 0, n.__V = c;
    })), u = r = null;
}, (0, _preact.options).__c = function(t, r) {
    r.some(function(t) {
        try {
            t.__h.forEach(k), t.__h = t.__h.filter(function(n) {
                return !n.__ || w(n);
            });
        } catch (u) {
            r.some(function(n) {
                n.__h && (n.__h = []);
            }), r = [], (0, _preact.options).__e(u, t.__v);
        }
    }), l && l(t, r);
}, (0, _preact.options).unmount = function(t) {
    m && m(t);
    var r, u = t.__c;
    u && u.__H && (u.__H.__.forEach(function(n) {
        try {
            k(n);
        } catch (n) {
            r = n;
        }
    }), u.__H = void 0, r && (0, _preact.options).__e(r, u.__v));
};
var g = "function" == typeof requestAnimationFrame;
function j(n) {
    var t, r = function() {
        clearTimeout(u), g && cancelAnimationFrame(t), setTimeout(n);
    }, u = setTimeout(r, 100);
    g && (t = requestAnimationFrame(r));
}
function k(n) {
    var t = r, u = n.__c;
    "function" == typeof u && (n.__c = void 0, u()), r = t;
}
function w(n) {
    var t = r;
    n.__c = n.__(), r = t;
}
function z(n, t) {
    return !n || n.length !== t.length || t.some(function(t, r) {
        return t !== n[r];
    });
}
function B(n, t) {
    return "function" == typeof t ? t(n) : t;
}

},{"preact":"f5XJc","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9E1d4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>index);
var _indexJs = require("@fullcalendar/core/index.js");
var _internalJs = require("./internal.js");
var _internalJs1 = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
var index = (0, _indexJs.createPlugin)({
    name: '@fullcalendar/daygrid',
    initialView: 'dayGridMonth',
    views: {
        dayGrid: {
            component: (0, _internalJs.DayGridView),
            dateProfileGeneratorClass: (0, _internalJs.TableDateProfileGenerator)
        },
        dayGridDay: {
            type: 'dayGrid',
            duration: {
                days: 1
            }
        },
        dayGridWeek: {
            type: 'dayGrid',
            duration: {
                weeks: 1
            }
        },
        dayGridMonth: {
            type: 'dayGrid',
            duration: {
                months: 1
            },
            fixedWeekCount: true
        },
        dayGridYear: {
            type: 'dayGrid',
            duration: {
                years: 1
            }
        }
    }
});

},{"@fullcalendar/core/index.js":"jECdu","./internal.js":"8f424","@fullcalendar/core/internal.js":"66xln","@fullcalendar/core/preact.js":"5k82D","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"8f424":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DayGridView", ()=>DayTableView);
parcelHelpers.export(exports, "DayTable", ()=>DayTable);
parcelHelpers.export(exports, "DayTableSlicer", ()=>DayTableSlicer);
parcelHelpers.export(exports, "Table", ()=>Table);
parcelHelpers.export(exports, "TableDateProfileGenerator", ()=>TableDateProfileGenerator);
parcelHelpers.export(exports, "TableRows", ()=>TableRows);
parcelHelpers.export(exports, "TableView", ()=>TableView);
parcelHelpers.export(exports, "buildDayTableModel", ()=>buildDayTableModel);
parcelHelpers.export(exports, "buildDayTableRenderRange", ()=>buildDayTableRenderRange);
var _internalJs = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.
----------------------------------------------------------------------------------------------------------------------*/ // It is a manager for a Table subcomponent, which does most of the heavy lifting.
// It is responsible for managing width/height.
class TableView extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.headerElRef = (0, _preactJs.createRef)();
    }
    renderSimpleLayout(headerRowContent, bodyContent) {
        let { props, context } = this;
        let sections = [];
        let stickyHeaderDates = (0, _internalJs.getStickyHeaderDates)(context.options);
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            chunk: {
                elRef: this.headerElRef,
                tableClassName: 'fc-col-header',
                rowContent: headerRowContent
            }
        });
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            chunk: {
                content: bodyContent
            }
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elClasses: [
                'fc-daygrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)((0, _internalJs.SimpleScrollGrid), {
            liquid: !props.isHeightAuto && !props.forPrint,
            collapsibleWidth: props.forPrint,
            cols: [],
            sections: sections
        }));
    }
    renderHScrollLayout(headerRowContent, bodyContent, colCnt, dayMinWidth) {
        let ScrollGrid = this.context.pluginHooks.scrollGridImpl;
        if (!ScrollGrid) throw new Error('No ScrollGrid implementation');
        let { props, context } = this;
        let stickyHeaderDates = !props.forPrint && (0, _internalJs.getStickyHeaderDates)(context.options);
        let stickyFooterScrollbar = !props.forPrint && (0, _internalJs.getStickyFooterScrollbar)(context.options);
        let sections = [];
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            chunks: [
                {
                    key: 'main',
                    elRef: this.headerElRef,
                    tableClassName: 'fc-col-header',
                    rowContent: headerRowContent
                }
            ]
        });
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            chunks: [
                {
                    key: 'main',
                    content: bodyContent
                }
            ]
        });
        if (stickyFooterScrollbar) sections.push({
            type: 'footer',
            key: 'footer',
            isSticky: true,
            chunks: [
                {
                    key: 'main',
                    content: (0, _internalJs.renderScrollShim)
                }
            ]
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elClasses: [
                'fc-daygrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)(ScrollGrid, {
            liquid: !props.isHeightAuto && !props.forPrint,
            forPrint: props.forPrint,
            collapsibleWidth: props.forPrint,
            colGroups: [
                {
                    cols: [
                        {
                            span: colCnt,
                            minWidth: dayMinWidth
                        }
                    ]
                }
            ],
            sections: sections
        }));
    }
}
function splitSegsByRow(segs, rowCnt) {
    let byRow = [];
    for(let i = 0; i < rowCnt; i += 1)byRow[i] = [];
    for (let seg of segs)byRow[seg.row].push(seg);
    return byRow;
}
function splitSegsByFirstCol(segs, colCnt) {
    let byCol = [];
    for(let i = 0; i < colCnt; i += 1)byCol[i] = [];
    for (let seg of segs)byCol[seg.firstCol].push(seg);
    return byCol;
}
function splitInteractionByRow(ui, rowCnt) {
    let byRow = [];
    if (!ui) for(let i = 0; i < rowCnt; i += 1)byRow[i] = null;
    else {
        for(let i = 0; i < rowCnt; i += 1)byRow[i] = {
            affectedInstances: ui.affectedInstances,
            isEvent: ui.isEvent,
            segs: []
        };
        for (let seg of ui.segs)byRow[seg.row].segs.push(seg);
    }
    return byRow;
}
const DEFAULT_TABLE_EVENT_TIME_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    omitZeroMinute: true,
    meridiem: 'narrow'
});
function hasListItemDisplay(seg) {
    let { display } = seg.eventRange.ui;
    return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol && // can't be multi-day
    seg.isStart && // "
    seg.isEnd // "
    ;
}
class TableBlockEvent extends (0, _internalJs.BaseComponent) {
    render() {
        let { props } = this;
        return (0, _preactJs.createElement)((0, _internalJs.StandardEvent), Object.assign({}, props, {
            elClasses: [
                'fc-daygrid-event',
                'fc-daygrid-block-event',
                'fc-h-event'
            ],
            defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,
            defaultDisplayEventEnd: props.defaultDisplayEventEnd,
            disableResizing: !props.seg.eventRange.def.allDay
        }));
    }
}
class TableListItemEvent extends (0, _internalJs.BaseComponent) {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { seg } = props;
        let timeFormat = options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;
        let timeText = (0, _internalJs.buildSegTimeText)(seg, timeFormat, context, true, props.defaultDisplayEventEnd);
        return (0, _preactJs.createElement)((0, _internalJs.EventContainer), Object.assign({}, props, {
            elTag: "a",
            elClasses: [
                'fc-daygrid-event',
                'fc-daygrid-dot-event'
            ],
            elAttrs: (0, _internalJs.getSegAnchorAttrs)(props.seg, context),
            defaultGenerator: renderInnerContent,
            timeText: timeText,
            isResizing: false,
            isDateSelecting: false
        }));
    }
}
function renderInnerContent(renderProps) {
    return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, (0, _preactJs.createElement)("div", {
        className: "fc-daygrid-event-dot",
        style: {
            borderColor: renderProps.borderColor || renderProps.backgroundColor
        }
    }), renderProps.timeText && (0, _preactJs.createElement)("div", {
        className: "fc-event-time"
    }, renderProps.timeText), (0, _preactJs.createElement)("div", {
        className: "fc-event-title"
    }, renderProps.event.title || (0, _preactJs.createElement)((0, _preactJs.Fragment), null, "\u00A0")));
}
class TableCellMoreLink extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.compileSegs = (0, _internalJs.memoize)(compileSegs);
    }
    render() {
        let { props } = this;
        let { allSegs, invisibleSegs } = this.compileSegs(props.singlePlacements);
        return (0, _preactJs.createElement)((0, _internalJs.MoreLinkContainer), {
            elClasses: [
                'fc-daygrid-more-link'
            ],
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            allDayDate: props.allDayDate,
            moreCnt: props.moreCnt,
            allSegs: allSegs,
            hiddenSegs: invisibleSegs,
            alignmentElRef: props.alignmentElRef,
            alignGridTop: props.alignGridTop,
            extraDateSpan: props.extraDateSpan,
            popoverContent: ()=>{
                let isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};
                return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, allSegs.map((seg)=>{
                    let instanceId = seg.eventRange.instance.instanceId;
                    return (0, _preactJs.createElement)("div", {
                        className: "fc-daygrid-event-harness",
                        key: instanceId,
                        style: {
                            visibility: isForcedInvisible[instanceId] ? 'hidden' : ''
                        }
                    }, hasListItemDisplay(seg) ? (0, _preactJs.createElement)(TableListItemEvent, Object.assign({
                        seg: seg,
                        isDragging: false,
                        isSelected: instanceId === props.eventSelection,
                        defaultDisplayEventEnd: false
                    }, (0, _internalJs.getSegMeta)(seg, props.todayRange))) : (0, _preactJs.createElement)(TableBlockEvent, Object.assign({
                        seg: seg,
                        isDragging: false,
                        isResizing: false,
                        isDateSelecting: false,
                        isSelected: instanceId === props.eventSelection,
                        defaultDisplayEventEnd: false
                    }, (0, _internalJs.getSegMeta)(seg, props.todayRange))));
                }));
            }
        });
    }
}
function compileSegs(singlePlacements) {
    let allSegs = [];
    let invisibleSegs = [];
    for (let placement of singlePlacements){
        allSegs.push(placement.seg);
        if (!placement.isVisible) invisibleSegs.push(placement.seg);
    }
    return {
        allSegs,
        invisibleSegs
    };
}
const DEFAULT_WEEK_NUM_FORMAT = (0, _internalJs.createFormatter)({
    week: 'narrow'
});
class TableCell extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.rootElRef = (0, _preactJs.createRef)();
        this.state = {
            dayNumberId: (0, _internalJs.getUniqueDomId)()
        };
        this.handleRootEl = (el)=>{
            (0, _internalJs.setRef)(this.rootElRef, el);
            (0, _internalJs.setRef)(this.props.elRef, el);
        };
    }
    render() {
        let { context, props, state, rootElRef } = this;
        let { options, dateEnv } = context;
        let { date, dateProfile } = props;
        // TODO: memoize this?
        const isMonthStart = props.showDayNumber && shouldDisplayMonthStart(date, dateProfile.currentRange, dateEnv);
        return (0, _preactJs.createElement)((0, _internalJs.DayCellContainer), {
            elTag: "td",
            elRef: this.handleRootEl,
            elClasses: [
                'fc-daygrid-day',
                ...props.extraClassNames || []
            ],
            elAttrs: Object.assign(Object.assign(Object.assign({}, props.extraDataAttrs), props.showDayNumber ? {
                'aria-labelledby': state.dayNumberId
            } : {}), {
                role: 'gridcell'
            }),
            defaultGenerator: renderTopInner,
            date: date,
            dateProfile: dateProfile,
            todayRange: props.todayRange,
            showDayNumber: props.showDayNumber,
            isMonthStart: isMonthStart,
            extraRenderProps: props.extraRenderProps
        }, (InnerContent, renderProps)=>(0, _preactJs.createElement)("div", {
                ref: props.innerElRef,
                className: "fc-daygrid-day-frame fc-scrollgrid-sync-inner",
                style: {
                    minHeight: props.minHeight
                }
            }, props.showWeekNumber && (0, _preactJs.createElement)((0, _internalJs.WeekNumberContainer), {
                elTag: "a",
                elClasses: [
                    'fc-daygrid-week-number'
                ],
                elAttrs: (0, _internalJs.buildNavLinkAttrs)(context, date, 'week'),
                date: date,
                defaultFormat: DEFAULT_WEEK_NUM_FORMAT
            }), !renderProps.isDisabled && (props.showDayNumber || (0, _internalJs.hasCustomDayCellContent)(options) || props.forceDayTop) ? (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-top"
            }, (0, _preactJs.createElement)(InnerContent, {
                elTag: "a",
                elClasses: [
                    'fc-daygrid-day-number',
                    isMonthStart && 'fc-daygrid-month-start'
                ],
                elAttrs: Object.assign(Object.assign({}, (0, _internalJs.buildNavLinkAttrs)(context, date)), {
                    id: state.dayNumberId
                })
            })) : props.showDayNumber ? // for creating correct amount of space (see issue #7162)
            (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-top",
                style: {
                    visibility: 'hidden'
                }
            }, (0, _preactJs.createElement)("a", {
                className: "fc-daygrid-day-number"
            }, "\u00A0")) : undefined, (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-events",
                ref: props.fgContentElRef
            }, props.fgContent, (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-bottom",
                style: {
                    marginTop: props.moreMarginTop
                }
            }, (0, _preactJs.createElement)(TableCellMoreLink, {
                allDayDate: date,
                singlePlacements: props.singlePlacements,
                moreCnt: props.moreCnt,
                alignmentElRef: rootElRef,
                alignGridTop: !props.showDayNumber,
                extraDateSpan: props.extraDateSpan,
                dateProfile: props.dateProfile,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                todayRange: props.todayRange
            }))), (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-bg"
            }, props.bgContent)));
    }
}
function renderTopInner(props) {
    return props.dayNumberText || (0, _preactJs.createElement)((0, _preactJs.Fragment), null, "\u00A0");
}
function shouldDisplayMonthStart(date, currentRange, dateEnv) {
    const { start: currentStart, end: currentEnd } = currentRange;
    const currentEndIncl = (0, _internalJs.addMs)(currentEnd, -1);
    const currentFirstYear = dateEnv.getYear(currentStart);
    const currentFirstMonth = dateEnv.getMonth(currentStart);
    const currentLastYear = dateEnv.getYear(currentEndIncl);
    const currentLastMonth = dateEnv.getMonth(currentEndIncl);
    // spans more than one month?
    return !(currentFirstYear === currentLastYear && currentFirstMonth === currentLastMonth) && Boolean(// first date in current view?
    date.valueOf() === currentStart.valueOf() || // a month-start that's within the current range?
    dateEnv.getDay(date) === 1 && date.valueOf() < currentEnd.valueOf());
}
function generateSegKey(seg) {
    return seg.eventRange.instance.instanceId + ':' + seg.firstCol;
}
function generateSegUid(seg) {
    return generateSegKey(seg) + ':' + seg.lastCol;
}
function computeFgSegPlacement(segs, dayMaxEvents, dayMaxEventRows, strictOrder, segHeights, maxContentHeight, cells) {
    let hierarchy = new DayGridSegHierarchy((segEntry)=>{
        // TODO: more DRY with generateSegUid
        let segUid = segs[segEntry.index].eventRange.instance.instanceId + ':' + segEntry.span.start + ':' + (segEntry.span.end - 1);
        // if no thickness known, assume 1 (if 0, so small it always fits)
        return segHeights[segUid] || 1;
    });
    hierarchy.allowReslicing = true;
    hierarchy.strictOrder = strictOrder;
    if (dayMaxEvents === true || dayMaxEventRows === true) {
        hierarchy.maxCoord = maxContentHeight;
        hierarchy.hiddenConsumes = true;
    } else if (typeof dayMaxEvents === 'number') hierarchy.maxStackCnt = dayMaxEvents;
    else if (typeof dayMaxEventRows === 'number') {
        hierarchy.maxStackCnt = dayMaxEventRows;
        hierarchy.hiddenConsumes = true;
    }
    // create segInputs only for segs with known heights
    let segInputs = [];
    let unknownHeightSegs = [];
    for(let i = 0; i < segs.length; i += 1){
        let seg = segs[i];
        let segUid = generateSegUid(seg);
        let eventHeight = segHeights[segUid];
        if (eventHeight != null) segInputs.push({
            index: i,
            span: {
                start: seg.firstCol,
                end: seg.lastCol + 1
            }
        });
        else unknownHeightSegs.push(seg);
    }
    let hiddenEntries = hierarchy.addSegs(segInputs);
    let segRects = hierarchy.toRects();
    let { singleColPlacements, multiColPlacements, leftoverMargins } = placeRects(segRects, segs, cells);
    let moreCnts = [];
    let moreMarginTops = [];
    // add segs with unknown heights
    for (let seg of unknownHeightSegs){
        multiColPlacements[seg.firstCol].push({
            seg,
            isVisible: false,
            isAbsolute: true,
            absoluteTop: 0,
            marginTop: 0
        });
        for(let col = seg.firstCol; col <= seg.lastCol; col += 1)singleColPlacements[col].push({
            seg: resliceSeg(seg, col, col + 1, cells),
            isVisible: false,
            isAbsolute: false,
            absoluteTop: 0,
            marginTop: 0
        });
    }
    // add the hidden entries
    for(let col = 0; col < cells.length; col += 1)moreCnts.push(0);
    for (let hiddenEntry of hiddenEntries){
        let seg = segs[hiddenEntry.index];
        let hiddenSpan = hiddenEntry.span;
        multiColPlacements[hiddenSpan.start].push({
            seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),
            isVisible: false,
            isAbsolute: true,
            absoluteTop: 0,
            marginTop: 0
        });
        for(let col = hiddenSpan.start; col < hiddenSpan.end; col += 1){
            moreCnts[col] += 1;
            singleColPlacements[col].push({
                seg: resliceSeg(seg, col, col + 1, cells),
                isVisible: false,
                isAbsolute: false,
                absoluteTop: 0,
                marginTop: 0
            });
        }
    }
    // deal with leftover margins
    for(let col = 0; col < cells.length; col += 1)moreMarginTops.push(leftoverMargins[col]);
    return {
        singleColPlacements,
        multiColPlacements,
        moreCnts,
        moreMarginTops
    };
}
// rects ordered by top coord, then left
function placeRects(allRects, segs, cells) {
    let rectsByEachCol = groupRectsByEachCol(allRects, cells.length);
    let singleColPlacements = [];
    let multiColPlacements = [];
    let leftoverMargins = [];
    for(let col = 0; col < cells.length; col += 1){
        let rects = rectsByEachCol[col];
        // compute all static segs in singlePlacements
        let singlePlacements = [];
        let currentHeight = 0;
        let currentMarginTop = 0;
        for (let rect of rects){
            let seg = segs[rect.index];
            singlePlacements.push({
                seg: resliceSeg(seg, col, col + 1, cells),
                isVisible: true,
                isAbsolute: false,
                absoluteTop: rect.levelCoord,
                marginTop: rect.levelCoord - currentHeight
            });
            currentHeight = rect.levelCoord + rect.thickness;
        }
        // compute mixed static/absolute segs in multiPlacements
        let multiPlacements = [];
        currentHeight = 0;
        currentMarginTop = 0;
        for (let rect of rects){
            let seg = segs[rect.index];
            let isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?
            let isFirstCol = rect.span.start === col;
            currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg
            currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg
            if (isAbsolute) {
                currentMarginTop += rect.thickness;
                if (isFirstCol) multiPlacements.push({
                    seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),
                    isVisible: true,
                    isAbsolute: true,
                    absoluteTop: rect.levelCoord,
                    marginTop: 0
                });
            } else if (isFirstCol) {
                multiPlacements.push({
                    seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),
                    isVisible: true,
                    isAbsolute: false,
                    absoluteTop: rect.levelCoord,
                    marginTop: currentMarginTop
                });
                currentMarginTop = 0;
            }
        }
        singleColPlacements.push(singlePlacements);
        multiColPlacements.push(multiPlacements);
        leftoverMargins.push(currentMarginTop);
    }
    return {
        singleColPlacements,
        multiColPlacements,
        leftoverMargins
    };
}
function groupRectsByEachCol(rects, colCnt) {
    let rectsByEachCol = [];
    for(let col = 0; col < colCnt; col += 1)rectsByEachCol.push([]);
    for (let rect of rects)for(let col = rect.span.start; col < rect.span.end; col += 1)rectsByEachCol[col].push(rect);
    return rectsByEachCol;
}
function resliceSeg(seg, spanStart, spanEnd, cells) {
    if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) return seg;
    let eventRange = seg.eventRange;
    let origRange = eventRange.range;
    let slicedRange = (0, _internalJs.intersectRanges)(origRange, {
        start: cells[spanStart].date,
        end: (0, _internalJs.addDays)(cells[spanEnd - 1].date, 1)
    });
    return Object.assign(Object.assign({}, seg), {
        firstCol: spanStart,
        lastCol: spanEnd - 1,
        eventRange: {
            def: eventRange.def,
            ui: Object.assign(Object.assign({}, eventRange.ui), {
                durationEditable: false
            }),
            instance: eventRange.instance,
            range: slicedRange
        },
        isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),
        isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()
    });
}
class DayGridSegHierarchy extends (0, _internalJs.SegHierarchy) {
    constructor(){
        super(...arguments);
        // config
        this.hiddenConsumes = false;
        // allows us to keep hidden entries in the hierarchy so they take up space
        this.forceHidden = {};
    }
    addSegs(segInputs) {
        const hiddenSegs = super.addSegs(segInputs);
        const { entriesByLevel } = this;
        const excludeHidden = (entry)=>!this.forceHidden[(0, _internalJs.buildEntryKey)(entry)];
        // remove the forced-hidden segs
        for(let level = 0; level < entriesByLevel.length; level += 1)entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);
        return hiddenSegs;
    }
    handleInvalidInsertion(insertion, entry, hiddenEntries) {
        const { entriesByLevel, forceHidden } = this;
        const { touchingEntry, touchingLevel, touchingLateral } = insertion;
        // the entry that the new insertion is touching must be hidden
        if (this.hiddenConsumes && touchingEntry) {
            const touchingEntryId = (0, _internalJs.buildEntryKey)(touchingEntry);
            if (!forceHidden[touchingEntryId]) {
                if (this.allowReslicing) {
                    // split up the touchingEntry, reinsert it
                    const hiddenEntry = Object.assign(Object.assign({}, touchingEntry), {
                        span: (0, _internalJs.intersectSpans)(touchingEntry.span, entry.span)
                    });
                    // reinsert the area that turned into a "more" link (so no other entries try to
                    // occupy the space) but mark it forced-hidden
                    const hiddenEntryId = (0, _internalJs.buildEntryKey)(hiddenEntry);
                    forceHidden[hiddenEntryId] = true;
                    entriesByLevel[touchingLevel][touchingLateral] = hiddenEntry;
                    hiddenEntries.push(hiddenEntry);
                    this.splitEntry(touchingEntry, entry, hiddenEntries);
                } else {
                    forceHidden[touchingEntryId] = true;
                    hiddenEntries.push(touchingEntry);
                }
            }
        }
        // will try to reslice...
        super.handleInvalidInsertion(insertion, entry, hiddenEntries);
    }
}
class TableRow extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.cellElRefs = new (0, _internalJs.RefMap)(); // the <td>
        this.frameElRefs = new (0, _internalJs.RefMap)(); // the fc-daygrid-day-frame
        this.fgElRefs = new (0, _internalJs.RefMap)(); // the fc-daygrid-day-events
        this.segHarnessRefs = new (0, _internalJs.RefMap)(); // indexed by "instanceId:firstCol"
        this.rootElRef = (0, _preactJs.createRef)();
        this.state = {
            framePositions: null,
            maxContentHeight: null,
            segHeights: {}
        };
        this.handleResize = (isForced)=>{
            if (isForced) this.updateSizing(true); // isExternal=true
        };
    }
    render() {
        let { props, state, context } = this;
        let { options } = context;
        let colCnt = props.cells.length;
        let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);
        let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);
        let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);
        let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);
        let { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops } = computeFgSegPlacement((0, _internalJs.sortEventSegs)(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.segHeights, state.maxContentHeight, props.cells);
        let isForcedInvisible = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};
        return (0, _preactJs.createElement)("tr", {
            ref: this.rootElRef,
            role: "row"
        }, props.renderIntro && props.renderIntro(), props.cells.map((cell, col)=>{
            let normalFgNodes = this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);
            let mirrorFgNodes = this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);
            return (0, _preactJs.createElement)(TableCell, {
                key: cell.key,
                elRef: this.cellElRefs.createRef(cell.key),
                innerElRef: this.frameElRefs.createRef(cell.key),
                dateProfile: props.dateProfile,
                date: cell.date,
                showDayNumber: props.showDayNumbers,
                showWeekNumber: props.showWeekNumbers && col === 0,
                forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */ ,
                todayRange: props.todayRange,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                extraRenderProps: cell.extraRenderProps,
                extraDataAttrs: cell.extraDataAttrs,
                extraClassNames: cell.extraClassNames,
                extraDateSpan: cell.extraDateSpan,
                moreCnt: moreCnts[col],
                moreMarginTop: moreMarginTops[col],
                singlePlacements: singleColPlacements[col],
                fgContentElRef: this.fgElRefs.createRef(cell.key),
                fgContent: (0, _preactJs.createElement)((0, _preactJs.Fragment), null, (0, _preactJs.createElement)((0, _preactJs.Fragment), null, normalFgNodes), (0, _preactJs.createElement)((0, _preactJs.Fragment), null, mirrorFgNodes)),
                bgContent: (0, _preactJs.createElement)((0, _preactJs.Fragment), null, this.renderFillSegs(highlightSegsByCol[col], 'highlight'), this.renderFillSegs(businessHoursByCol[col], 'non-business'), this.renderFillSegs(bgEventSegsByCol[col], 'bg-event')),
                minHeight: props.cellMinHeight
            });
        }));
    }
    componentDidMount() {
        this.updateSizing(true);
        this.context.addResizeHandler(this.handleResize);
    }
    componentDidUpdate(prevProps, prevState) {
        let currentProps = this.props;
        this.updateSizing(!(0, _internalJs.isPropsEqual)(prevProps, currentProps));
    }
    componentWillUnmount() {
        this.context.removeResizeHandler(this.handleResize);
    }
    getHighlightSegs() {
        let { props } = this;
        if (props.eventDrag && props.eventDrag.segs.length) return props.eventDrag.segs;
        if (props.eventResize && props.eventResize.segs.length) return props.eventResize.segs;
        return props.dateSelectionSegs;
    }
    getMirrorSegs() {
        let { props } = this;
        if (props.eventResize && props.eventResize.segs.length) return props.eventResize.segs;
        return [];
    }
    renderFgSegs(col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {
        let { context } = this;
        let { eventSelection } = this.props;
        let { framePositions } = this.state;
        let defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1
        let isMirror = isDragging || isResizing || isDateSelecting;
        let nodes = [];
        if (framePositions) for (let placement of segPlacements){
            let { seg } = placement;
            let { instanceId } = seg.eventRange.instance;
            let isVisible = placement.isVisible && !isForcedInvisible[instanceId];
            let isAbsolute = placement.isAbsolute;
            let left = '';
            let right = '';
            if (isAbsolute) {
                if (context.isRtl) {
                    right = 0;
                    left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];
                } else {
                    left = 0;
                    right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];
                }
            }
            /*
                known bug: events that are force to be list-item but span multiple days still take up space in later columns
                todo: in print view, for multi-day events, don't display title within non-start/end segs
                */ nodes.push((0, _preactJs.createElement)("div", {
                className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),
                key: generateSegKey(seg),
                ref: isMirror ? null : this.segHarnessRefs.createRef(generateSegUid(seg)),
                style: {
                    visibility: isVisible ? '' : 'hidden',
                    marginTop: isAbsolute ? '' : placement.marginTop,
                    top: isAbsolute ? placement.absoluteTop : '',
                    left,
                    right
                }
            }, hasListItemDisplay(seg) ? (0, _preactJs.createElement)(TableListItemEvent, Object.assign({
                seg: seg,
                isDragging: isDragging,
                isSelected: instanceId === eventSelection,
                defaultDisplayEventEnd: defaultDisplayEventEnd
            }, (0, _internalJs.getSegMeta)(seg, todayRange))) : (0, _preactJs.createElement)(TableBlockEvent, Object.assign({
                seg: seg,
                isDragging: isDragging,
                isResizing: isResizing,
                isDateSelecting: isDateSelecting,
                isSelected: instanceId === eventSelection,
                defaultDisplayEventEnd: defaultDisplayEventEnd
            }, (0, _internalJs.getSegMeta)(seg, todayRange)))));
        }
        return nodes;
    }
    renderFillSegs(segs, fillType) {
        let { isRtl } = this.context;
        let { todayRange } = this.props;
        let { framePositions } = this.state;
        let nodes = [];
        if (framePositions) for (let seg of segs){
            let leftRightCss = isRtl ? {
                right: 0,
                left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]
            } : {
                left: 0,
                right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]
            };
            nodes.push((0, _preactJs.createElement)("div", {
                key: (0, _internalJs.buildEventRangeKey)(seg.eventRange),
                className: "fc-daygrid-bg-harness",
                style: leftRightCss
            }, fillType === 'bg-event' ? (0, _preactJs.createElement)((0, _internalJs.BgEvent), Object.assign({
                seg: seg
            }, (0, _internalJs.getSegMeta)(seg, todayRange))) : (0, _internalJs.renderFill)(fillType)));
        }
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), {}, ...nodes);
    }
    updateSizing(isExternalSizingChange) {
        let { props, state, frameElRefs } = this;
        if (!props.forPrint && props.clientWidth !== null // positioning ready?
        ) {
            if (isExternalSizingChange) {
                let frameEls = props.cells.map((cell)=>frameElRefs.currentMap[cell.key]);
                if (frameEls.length) {
                    let originEl = this.rootElRef.current;
                    let newPositionCache = new (0, _internalJs.PositionCache)(originEl, frameEls, true, false);
                    if (!state.framePositions || !state.framePositions.similarTo(newPositionCache)) this.setState({
                        framePositions: new (0, _internalJs.PositionCache)(originEl, frameEls, true, false)
                    });
                }
            }
            const oldSegHeights = this.state.segHeights;
            const newSegHeights = this.querySegHeights();
            const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;
            this.safeSetState({
                // HACK to prevent oscillations of events being shown/hidden from max-event-rows
                // Essentially, once you compute an element's height, never null-out.
                // TODO: always display all events, as visibility:hidden?
                segHeights: Object.assign(Object.assign({}, oldSegHeights), newSegHeights),
                maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null
            });
        }
    }
    querySegHeights() {
        let segElMap = this.segHarnessRefs.currentMap;
        let segHeights = {};
        // get the max height amongst instance segs
        for(let segUid in segElMap){
            let height = Math.round(segElMap[segUid].getBoundingClientRect().height);
            segHeights[segUid] = Math.max(segHeights[segUid] || 0, height);
        }
        return segHeights;
    }
    computeMaxContentHeight() {
        let firstKey = this.props.cells[0].key;
        let cellEl = this.cellElRefs.currentMap[firstKey];
        let fcContainerEl = this.fgElRefs.currentMap[firstKey];
        return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;
    }
    getCellEls() {
        let elMap = this.cellElRefs.currentMap;
        return this.props.cells.map((cell)=>elMap[cell.key]);
    }
}
TableRow.addStateEquality({
    segHeights: (0, _internalJs.isPropsEqual)
});
function buildMirrorPlacements(mirrorSegs, colPlacements) {
    if (!mirrorSegs.length) return [];
    let topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?
    return mirrorSegs.map((seg)=>({
            seg,
            isVisible: true,
            isAbsolute: true,
            absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],
            marginTop: 0
        }));
}
function buildAbsoluteTopHash(colPlacements) {
    let topsByInstanceId = {};
    for (let placements of colPlacements)for (let placement of placements)topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;
    return topsByInstanceId;
}
class TableRows extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.splitBusinessHourSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitBgEventSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitFgEventSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitDateSelectionSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitEventDrag = (0, _internalJs.memoize)(splitInteractionByRow);
        this.splitEventResize = (0, _internalJs.memoize)(splitInteractionByRow);
        this.rowRefs = new (0, _internalJs.RefMap)();
    }
    render() {
        let { props, context } = this;
        let rowCnt = props.cells.length;
        let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);
        let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);
        let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);
        let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);
        let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);
        let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);
        // for DayGrid view with many rows, force a min-height on cells so doesn't appear squished
        // choose 7 because a month view will have max 6 rows
        let cellMinHeight = rowCnt >= 7 && props.clientWidth ? props.clientWidth / context.options.aspectRatio / 6 : null;
        return (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
            unit: "day"
        }, (nowDate, todayRange)=>(0, _preactJs.createElement)((0, _preactJs.Fragment), null, props.cells.map((cells, row)=>(0, _preactJs.createElement)(TableRow, {
                    ref: this.rowRefs.createRef(row),
                    key: cells.length ? cells[0].date.toISOString() : row // in case there are no cells (like when resource view is loading)
                    ,
                    showDayNumbers: rowCnt > 1,
                    showWeekNumbers: props.showWeekNumbers,
                    todayRange: todayRange,
                    dateProfile: props.dateProfile,
                    cells: cells,
                    renderIntro: props.renderRowIntro,
                    businessHourSegs: businessHourSegsByRow[row],
                    eventSelection: props.eventSelection,
                    bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay),
                    fgEventSegs: fgEventSegsByRow[row],
                    dateSelectionSegs: dateSelectionSegsByRow[row],
                    eventDrag: eventDragByRow[row],
                    eventResize: eventResizeByRow[row],
                    dayMaxEvents: props.dayMaxEvents,
                    dayMaxEventRows: props.dayMaxEventRows,
                    clientWidth: props.clientWidth,
                    clientHeight: props.clientHeight,
                    cellMinHeight: cellMinHeight,
                    forPrint: props.forPrint
                }))));
    }
    componentDidMount() {
        this.registerInteractiveComponent();
    }
    componentDidUpdate() {
        // for if started with zero cells
        this.registerInteractiveComponent();
    }
    registerInteractiveComponent() {
        if (!this.rootEl) {
            // HACK: need a daygrid wrapper parent to do positioning
            // NOTE: a daygrid resource view w/o resources can have zero cells
            const firstCellEl = this.rowRefs.currentMap[0].getCellEls()[0];
            const rootEl = firstCellEl ? firstCellEl.closest('.fc-daygrid-body') : null;
            if (rootEl) {
                this.rootEl = rootEl;
                this.context.registerInteractiveComponent(this, {
                    el: rootEl,
                    isHitComboAllowed: this.props.isHitComboAllowed
                });
            }
        }
    }
    componentWillUnmount() {
        if (this.rootEl) {
            this.context.unregisterInteractiveComponent(this);
            this.rootEl = null;
        }
    }
    // Hit System
    // ----------------------------------------------------------------------------------------------------
    prepareHits() {
        this.rowPositions = new (0, _internalJs.PositionCache)(this.rootEl, this.rowRefs.collect().map((rowObj)=>rowObj.getCellEls()[0]), false, true);
        this.colPositions = new (0, _internalJs.PositionCache)(this.rootEl, this.rowRefs.currentMap[0].getCellEls(), true, false);
    }
    queryHit(positionLeft, positionTop) {
        let { colPositions, rowPositions } = this;
        let col = colPositions.leftToIndex(positionLeft);
        let row = rowPositions.topToIndex(positionTop);
        if (row != null && col != null) {
            let cell = this.props.cells[row][col];
            return {
                dateProfile: this.props.dateProfile,
                dateSpan: Object.assign({
                    range: this.getCellRange(row, col),
                    allDay: true
                }, cell.extraDateSpan),
                dayEl: this.getCellEl(row, col),
                rect: {
                    left: colPositions.lefts[col],
                    right: colPositions.rights[col],
                    top: rowPositions.tops[row],
                    bottom: rowPositions.bottoms[row]
                },
                layer: 0
            };
        }
        return null;
    }
    getCellEl(row, col) {
        return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal
    }
    getCellRange(row, col) {
        let start = this.props.cells[row][col].date;
        let end = (0, _internalJs.addDays)(start, 1);
        return {
            start,
            end
        };
    }
}
function isSegAllDay(seg) {
    return seg.eventRange.def.allDay;
}
class Table extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.elRef = (0, _preactJs.createRef)();
        this.needsScrollReset = false;
    }
    render() {
        let { props } = this;
        let { dayMaxEventRows, dayMaxEvents, expandRows } = props;
        let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;
        // if rows can't expand to fill fixed height, can't do balanced-height event limit
        // TODO: best place to normalize these options?
        if (limitViaBalanced && !expandRows) {
            limitViaBalanced = false;
            dayMaxEventRows = null;
            dayMaxEvents = null;
        }
        let classNames = [
            'fc-daygrid-body',
            limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced',
            expandRows ? '' : 'fc-daygrid-body-natural'
        ];
        return (0, _preactJs.createElement)("div", {
            ref: this.elRef,
            className: classNames.join(' '),
            style: {
                // these props are important to give this wrapper correct dimensions for interactions
                // TODO: if we set it here, can we avoid giving to inner tables?
                width: props.clientWidth,
                minWidth: props.tableMinWidth
            }
        }, (0, _preactJs.createElement)("table", {
            role: "presentation",
            className: "fc-scrollgrid-sync-table",
            style: {
                width: props.clientWidth,
                minWidth: props.tableMinWidth,
                height: expandRows ? props.clientHeight : ''
            }
        }, props.colGroupNode, (0, _preactJs.createElement)("tbody", {
            role: "presentation"
        }, (0, _preactJs.createElement)(TableRows, {
            dateProfile: props.dateProfile,
            cells: props.cells,
            renderRowIntro: props.renderRowIntro,
            showWeekNumbers: props.showWeekNumbers,
            clientWidth: props.clientWidth,
            clientHeight: props.clientHeight,
            businessHourSegs: props.businessHourSegs,
            bgEventSegs: props.bgEventSegs,
            fgEventSegs: props.fgEventSegs,
            dateSelectionSegs: props.dateSelectionSegs,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            dayMaxEvents: dayMaxEvents,
            dayMaxEventRows: dayMaxEventRows,
            forPrint: props.forPrint,
            isHitComboAllowed: props.isHitComboAllowed
        }))));
    }
    componentDidMount() {
        this.requestScrollReset();
    }
    componentDidUpdate(prevProps) {
        if (prevProps.dateProfile !== this.props.dateProfile) this.requestScrollReset();
        else this.flushScrollReset();
    }
    requestScrollReset() {
        this.needsScrollReset = true;
        this.flushScrollReset();
    }
    flushScrollReset() {
        if (this.needsScrollReset && this.props.clientWidth // sizes computed?
        ) {
            const subjectEl = getScrollSubjectEl(this.elRef.current, this.props.dateProfile);
            if (subjectEl) {
                const originEl = subjectEl.closest('.fc-daygrid-body');
                const scrollEl = originEl.closest('.fc-scroller');
                const scrollTop = subjectEl.getBoundingClientRect().top - originEl.getBoundingClientRect().top;
                scrollEl.scrollTop = scrollTop ? scrollTop + 1 : 0; // overcome border
            }
            this.needsScrollReset = false;
        }
    }
}
function getScrollSubjectEl(containerEl, dateProfile) {
    let el;
    if (dateProfile.currentRangeUnit.match(/year|month/)) el = containerEl.querySelector(`[data-date="${(0, _internalJs.formatIsoMonthStr)(dateProfile.currentDate)}-01"]`);
    if (!el) el = containerEl.querySelector(`[data-date="${(0, _internalJs.formatDayString)(dateProfile.currentDate)}"]`);
    return el;
}
class DayTableSlicer extends (0, _internalJs.Slicer) {
    constructor(){
        super(...arguments);
        this.forceDayIfListItem = true;
    }
    sliceRange(dateRange, dayTableModel) {
        return dayTableModel.sliceRange(dateRange);
    }
}
class DayTable extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.slicer = new DayTableSlicer();
        this.tableRef = (0, _preactJs.createRef)();
    }
    render() {
        let { props, context } = this;
        return (0, _preactJs.createElement)(Table, Object.assign({
            ref: this.tableRef
        }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {
            dateProfile: props.dateProfile,
            cells: props.dayTableModel.cells,
            colGroupNode: props.colGroupNode,
            tableMinWidth: props.tableMinWidth,
            renderRowIntro: props.renderRowIntro,
            dayMaxEvents: props.dayMaxEvents,
            dayMaxEventRows: props.dayMaxEventRows,
            showWeekNumbers: props.showWeekNumbers,
            expandRows: props.expandRows,
            headerAlignElRef: props.headerAlignElRef,
            clientWidth: props.clientWidth,
            clientHeight: props.clientHeight,
            forPrint: props.forPrint
        }));
    }
}
class DayTableView extends TableView {
    constructor(){
        super(...arguments);
        this.buildDayTableModel = (0, _internalJs.memoize)(buildDayTableModel);
        this.headerRef = (0, _preactJs.createRef)();
        this.tableRef = (0, _preactJs.createRef)();
    // can't override any lifecycle methods from parent
    }
    render() {
        let { options, dateProfileGenerator } = this.context;
        let { props } = this;
        let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);
        let headerContent = options.dayHeaders && (0, _preactJs.createElement)((0, _internalJs.DayHeader), {
            ref: this.headerRef,
            dateProfile: props.dateProfile,
            dates: dayTableModel.headerDates,
            datesRepDistinctDays: dayTableModel.rowCnt === 1
        });
        let bodyContent = (contentArg)=>(0, _preactJs.createElement)(DayTable, {
                ref: this.tableRef,
                dateProfile: props.dateProfile,
                dayTableModel: dayTableModel,
                businessHours: props.businessHours,
                dateSelection: props.dateSelection,
                eventStore: props.eventStore,
                eventUiBases: props.eventUiBases,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                nextDayThreshold: options.nextDayThreshold,
                colGroupNode: contentArg.tableColGroupNode,
                tableMinWidth: contentArg.tableMinWidth,
                dayMaxEvents: options.dayMaxEvents,
                dayMaxEventRows: options.dayMaxEventRows,
                showWeekNumbers: options.weekNumbers,
                expandRows: !props.isHeightAuto,
                headerAlignElRef: this.headerElRef,
                clientWidth: contentArg.clientWidth,
                clientHeight: contentArg.clientHeight,
                forPrint: props.forPrint
            });
        return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);
    }
}
function buildDayTableModel(dateProfile, dateProfileGenerator) {
    let daySeries = new (0, _internalJs.DaySeriesModel)(dateProfile.renderRange, dateProfileGenerator);
    return new (0, _internalJs.DayTableModel)(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));
}
class TableDateProfileGenerator extends (0, _internalJs.DateProfileGenerator) {
    // Computes the date range that will be rendered
    buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {
        let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay);
        let { props } = this;
        return buildDayTableRenderRange({
            currentRange: renderRange,
            snapToWeek: /^(year|month)$/.test(currentRangeUnit),
            fixedWeekCount: props.fixedWeekCount,
            dateEnv: props.dateEnv
        });
    }
}
function buildDayTableRenderRange(props) {
    let { dateEnv, currentRange } = props;
    let { start, end } = currentRange;
    let endOfWeek;
    // year and month views should be aligned with weeks. this is already done for week
    if (props.snapToWeek) {
        start = dateEnv.startOfWeek(start);
        // make end-of-week if not already
        endOfWeek = dateEnv.startOfWeek(end);
        if (endOfWeek.valueOf() !== end.valueOf()) end = (0, _internalJs.addWeeks)(endOfWeek, 1);
    }
    // ensure 6 weeks
    if (props.fixedWeekCount) {
        // TODO: instead of these date-math gymnastics (for multimonth view),
        // compute dateprofiles of all months, then use start of first and end of last.
        let lastMonthRenderStart = dateEnv.startOfWeek(dateEnv.startOfMonth((0, _internalJs.addDays)(currentRange.end, -1)));
        let rowCnt = Math.ceil((0, _internalJs.diffWeeks)(lastMonthRenderStart, end));
        end = (0, _internalJs.addWeeks)(end, 6 - rowCnt);
    }
    return {
        start,
        end
    };
}
var css_248z = ":root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:\"\";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:\"\";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}";
(0, _internalJs.injectStyles)(css_248z);

},{"@fullcalendar/core/internal.js":"66xln","@fullcalendar/core/preact.js":"5k82D","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"66xln":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BASE_OPTION_DEFAULTS", ()=>(0, _internalCommonJs.e));
parcelHelpers.export(exports, "BaseComponent", ()=>(0, _internalCommonJs.B));
parcelHelpers.export(exports, "BgEvent", ()=>(0, _internalCommonJs.cm));
parcelHelpers.export(exports, "CalendarImpl", ()=>(0, _internalCommonJs.a7));
parcelHelpers.export(exports, "CalendarRoot", ()=>(0, _internalCommonJs.a9));
parcelHelpers.export(exports, "ContentContainer", ()=>(0, _internalCommonJs.C));
parcelHelpers.export(exports, "CustomRenderingStore", ()=>(0, _internalCommonJs.cv));
parcelHelpers.export(exports, "DateComponent", ()=>(0, _internalCommonJs.bc));
parcelHelpers.export(exports, "DateEnv", ()=>(0, _internalCommonJs.Q));
parcelHelpers.export(exports, "DateProfileGenerator", ()=>(0, _internalCommonJs.R));
parcelHelpers.export(exports, "DayCellContainer", ()=>(0, _internalCommonJs.ci));
parcelHelpers.export(exports, "DayHeader", ()=>(0, _internalCommonJs.bI));
parcelHelpers.export(exports, "DaySeriesModel", ()=>(0, _internalCommonJs.bM));
parcelHelpers.export(exports, "DayTableModel", ()=>(0, _internalCommonJs.bT));
parcelHelpers.export(exports, "DelayedRunner", ()=>(0, _internalCommonJs.D));
parcelHelpers.export(exports, "ElementDragging", ()=>(0, _internalCommonJs.bF));
parcelHelpers.export(exports, "ElementScrollController", ()=>(0, _internalCommonJs.ba));
parcelHelpers.export(exports, "Emitter", ()=>(0, _internalCommonJs.F));
parcelHelpers.export(exports, "EventContainer", ()=>(0, _internalCommonJs.ck));
parcelHelpers.export(exports, "EventImpl", ()=>(0, _internalCommonJs._));
parcelHelpers.export(exports, "Interaction", ()=>(0, _internalCommonJs.X));
parcelHelpers.export(exports, "MoreLinkContainer", ()=>(0, _internalCommonJs.co));
parcelHelpers.export(exports, "NamedTimeZoneImpl", ()=>(0, _internalCommonJs.bw));
parcelHelpers.export(exports, "NowIndicatorContainer", ()=>(0, _internalCommonJs.ch));
parcelHelpers.export(exports, "NowTimer", ()=>(0, _internalCommonJs.a6));
parcelHelpers.export(exports, "PositionCache", ()=>(0, _internalCommonJs.b8));
parcelHelpers.export(exports, "RefMap", ()=>(0, _internalCommonJs.cd));
parcelHelpers.export(exports, "ScrollController", ()=>(0, _internalCommonJs.b9));
parcelHelpers.export(exports, "ScrollResponder", ()=>(0, _internalCommonJs.cf));
parcelHelpers.export(exports, "Scroller", ()=>(0, _internalCommonJs.cb));
parcelHelpers.export(exports, "SegHierarchy", ()=>(0, _internalCommonJs.by));
parcelHelpers.export(exports, "SimpleScrollGrid", ()=>(0, _internalCommonJs.bZ));
parcelHelpers.export(exports, "Slicer", ()=>(0, _internalCommonJs.bU));
parcelHelpers.export(exports, "Splitter", ()=>(0, _internalCommonJs.aW));
parcelHelpers.export(exports, "StandardEvent", ()=>(0, _internalCommonJs.cg));
parcelHelpers.export(exports, "TableDateCell", ()=>(0, _internalCommonJs.bK));
parcelHelpers.export(exports, "TableDowCell", ()=>(0, _internalCommonJs.bL));
parcelHelpers.export(exports, "Theme", ()=>(0, _internalCommonJs.T));
parcelHelpers.export(exports, "ViewContainer", ()=>(0, _internalCommonJs.cq));
parcelHelpers.export(exports, "ViewContextType", ()=>(0, _internalCommonJs.V));
parcelHelpers.export(exports, "WeekNumberContainer", ()=>(0, _internalCommonJs.cn));
parcelHelpers.export(exports, "WindowScrollController", ()=>(0, _internalCommonJs.bb));
parcelHelpers.export(exports, "addDays", ()=>(0, _internalCommonJs.t));
parcelHelpers.export(exports, "addDurations", ()=>(0, _internalCommonJs.bn));
parcelHelpers.export(exports, "addMs", ()=>(0, _internalCommonJs.be));
parcelHelpers.export(exports, "addWeeks", ()=>(0, _internalCommonJs.bf));
parcelHelpers.export(exports, "allowContextMenu", ()=>(0, _internalCommonJs.as));
parcelHelpers.export(exports, "allowSelection", ()=>(0, _internalCommonJs.aq));
parcelHelpers.export(exports, "applyMutationToEventStore", ()=>(0, _internalCommonJs.bV));
parcelHelpers.export(exports, "applyStyle", ()=>(0, _internalCommonJs.aN));
parcelHelpers.export(exports, "asCleanDays", ()=>(0, _internalCommonJs.bl));
parcelHelpers.export(exports, "asRoughMinutes", ()=>(0, _internalCommonJs.bo));
parcelHelpers.export(exports, "asRoughMs", ()=>(0, _internalCommonJs.bq));
parcelHelpers.export(exports, "asRoughSeconds", ()=>(0, _internalCommonJs.bp));
parcelHelpers.export(exports, "binarySearch", ()=>(0, _internalCommonJs.bB));
parcelHelpers.export(exports, "buildElAttrs", ()=>(0, _internalCommonJs.cu));
parcelHelpers.export(exports, "buildEntryKey", ()=>(0, _internalCommonJs.bz));
parcelHelpers.export(exports, "buildEventApis", ()=>(0, _internalCommonJs.w));
parcelHelpers.export(exports, "buildEventRangeKey", ()=>(0, _internalCommonJs.bR));
parcelHelpers.export(exports, "buildIsoString", ()=>(0, _internalCommonJs.bu));
parcelHelpers.export(exports, "buildNavLinkAttrs", ()=>(0, _internalCommonJs.a_));
parcelHelpers.export(exports, "buildSegTimeText", ()=>(0, _internalCommonJs.bO));
parcelHelpers.export(exports, "collectFromHash", ()=>(0, _internalCommonJs.aJ));
parcelHelpers.export(exports, "combineEventUis", ()=>(0, _internalCommonJs.aV));
parcelHelpers.export(exports, "compareByFieldSpecs", ()=>(0, _internalCommonJs.an));
parcelHelpers.export(exports, "compareNumbers", ()=>(0, _internalCommonJs.at));
parcelHelpers.export(exports, "compareObjs", ()=>(0, _internalCommonJs.aI));
parcelHelpers.export(exports, "computeEarliestSegStart", ()=>(0, _internalCommonJs.cp));
parcelHelpers.export(exports, "computeEdges", ()=>(0, _internalCommonJs.b2));
parcelHelpers.export(exports, "computeFallbackHeaderFormat", ()=>(0, _internalCommonJs.bJ));
parcelHelpers.export(exports, "computeInnerRect", ()=>(0, _internalCommonJs.b1));
parcelHelpers.export(exports, "computeRect", ()=>(0, _internalCommonJs.b4));
parcelHelpers.export(exports, "computeShrinkWidth", ()=>(0, _internalCommonJs.c5));
parcelHelpers.export(exports, "computeVisibleDayRange", ()=>(0, _internalCommonJs.aw));
parcelHelpers.export(exports, "config", ()=>(0, _internalCommonJs.bG));
parcelHelpers.export(exports, "constrainPoint", ()=>(0, _internalCommonJs.aE));
parcelHelpers.export(exports, "createDuration", ()=>(0, _internalCommonJs.d));
parcelHelpers.export(exports, "createEmptyEventStore", ()=>(0, _internalCommonJs.H));
parcelHelpers.export(exports, "createEventInstance", ()=>(0, _internalCommonJs.ah));
parcelHelpers.export(exports, "createEventUi", ()=>(0, _internalCommonJs.S));
parcelHelpers.export(exports, "createFormatter", ()=>(0, _internalCommonJs.x));
parcelHelpers.export(exports, "diffDates", ()=>(0, _internalCommonJs.ay));
parcelHelpers.export(exports, "diffDayAndTime", ()=>(0, _internalCommonJs.bi));
parcelHelpers.export(exports, "diffDays", ()=>(0, _internalCommonJs.bj));
parcelHelpers.export(exports, "diffPoints", ()=>(0, _internalCommonJs.aG));
parcelHelpers.export(exports, "diffWeeks", ()=>(0, _internalCommonJs.bg));
parcelHelpers.export(exports, "diffWholeDays", ()=>(0, _internalCommonJs.y));
parcelHelpers.export(exports, "diffWholeWeeks", ()=>(0, _internalCommonJs.bh));
parcelHelpers.export(exports, "disableCursor", ()=>(0, _internalCommonJs.av));
parcelHelpers.export(exports, "elementClosest", ()=>(0, _internalCommonJs.Z));
parcelHelpers.export(exports, "elementMatches", ()=>(0, _internalCommonJs.aO));
parcelHelpers.export(exports, "enableCursor", ()=>(0, _internalCommonJs.au));
parcelHelpers.export(exports, "eventTupleToStore", ()=>(0, _internalCommonJs.aU));
parcelHelpers.export(exports, "filterHash", ()=>(0, _internalCommonJs.h));
parcelHelpers.export(exports, "findDirectChildren", ()=>(0, _internalCommonJs.aL));
parcelHelpers.export(exports, "findElements", ()=>(0, _internalCommonJs.aK));
parcelHelpers.export(exports, "flexibleCompare", ()=>(0, _internalCommonJs.ao));
parcelHelpers.export(exports, "formatDayString", ()=>(0, _internalCommonJs.bt));
parcelHelpers.export(exports, "formatIsoMonthStr", ()=>(0, _internalCommonJs.bv));
parcelHelpers.export(exports, "formatIsoTimeString", ()=>(0, _internalCommonJs.bs));
parcelHelpers.export(exports, "getAllowYScrolling", ()=>(0, _internalCommonJs.c3));
parcelHelpers.export(exports, "getCanVGrowWithinCell", ()=>(0, _internalCommonJs.aR));
parcelHelpers.export(exports, "getClippingParents", ()=>(0, _internalCommonJs.b3));
parcelHelpers.export(exports, "getDateMeta", ()=>(0, _internalCommonJs.aY));
parcelHelpers.export(exports, "getDayClassNames", ()=>(0, _internalCommonJs.aX));
parcelHelpers.export(exports, "getDefaultEventEnd", ()=>(0, _internalCommonJs.cs));
parcelHelpers.export(exports, "getElSeg", ()=>(0, _internalCommonJs.Y));
parcelHelpers.export(exports, "getEntrySpanEnd", ()=>(0, _internalCommonJs.bA));
parcelHelpers.export(exports, "getEventTargetViaRoot", ()=>(0, _internalCommonJs.aP));
parcelHelpers.export(exports, "getIsRtlScrollbarOnLeft", ()=>(0, _internalCommonJs.ce));
parcelHelpers.export(exports, "getRectCenter", ()=>(0, _internalCommonJs.aF));
parcelHelpers.export(exports, "getRelevantEvents", ()=>(0, _internalCommonJs.aT));
parcelHelpers.export(exports, "getScrollGridClassNames", ()=>(0, _internalCommonJs.c0));
parcelHelpers.export(exports, "getScrollbarWidths", ()=>(0, _internalCommonJs.cc));
parcelHelpers.export(exports, "getSectionClassNames", ()=>(0, _internalCommonJs.c1));
parcelHelpers.export(exports, "getSectionHasLiquidHeight", ()=>(0, _internalCommonJs.c2));
parcelHelpers.export(exports, "getSegAnchorAttrs", ()=>(0, _internalCommonJs.bS));
parcelHelpers.export(exports, "getSegMeta", ()=>(0, _internalCommonJs.bQ));
parcelHelpers.export(exports, "getSlotClassNames", ()=>(0, _internalCommonJs.aZ));
parcelHelpers.export(exports, "getStickyFooterScrollbar", ()=>(0, _internalCommonJs.c9));
parcelHelpers.export(exports, "getStickyHeaderDates", ()=>(0, _internalCommonJs.ca));
parcelHelpers.export(exports, "getUniqueDomId", ()=>(0, _internalCommonJs.a3));
parcelHelpers.export(exports, "greatestDurationDenominator", ()=>(0, _internalCommonJs.c));
parcelHelpers.export(exports, "groupIntersectingEntries", ()=>(0, _internalCommonJs.bC));
parcelHelpers.export(exports, "guid", ()=>(0, _internalCommonJs.g));
parcelHelpers.export(exports, "hasBgRendering", ()=>(0, _internalCommonJs.bN));
parcelHelpers.export(exports, "hasCustomDayCellContent", ()=>(0, _internalCommonJs.cj));
parcelHelpers.export(exports, "hasShrinkWidth", ()=>(0, _internalCommonJs.b_));
parcelHelpers.export(exports, "identity", ()=>(0, _internalCommonJs.n));
parcelHelpers.export(exports, "injectStyles", ()=>(0, _internalCommonJs.ct));
parcelHelpers.export(exports, "interactionSettingsStore", ()=>(0, _internalCommonJs.a5));
parcelHelpers.export(exports, "interactionSettingsToStore", ()=>(0, _internalCommonJs.bE));
parcelHelpers.export(exports, "intersectRanges", ()=>(0, _internalCommonJs.o));
parcelHelpers.export(exports, "intersectRects", ()=>(0, _internalCommonJs.aC));
parcelHelpers.export(exports, "intersectSpans", ()=>(0, _internalCommonJs.bD));
parcelHelpers.export(exports, "isArraysEqual", ()=>(0, _internalCommonJs.i));
parcelHelpers.export(exports, "isColPropsEqual", ()=>(0, _internalCommonJs.c7));
parcelHelpers.export(exports, "isDateSelectionValid", ()=>(0, _internalCommonJs.bY));
parcelHelpers.export(exports, "isDateSpansEqual", ()=>(0, _internalCommonJs.bd));
parcelHelpers.export(exports, "isInt", ()=>(0, _internalCommonJs.al));
parcelHelpers.export(exports, "isInteractionValid", ()=>(0, _internalCommonJs.bX));
parcelHelpers.export(exports, "isMultiDayRange", ()=>(0, _internalCommonJs.ax));
parcelHelpers.export(exports, "isPropsEqual", ()=>(0, _internalCommonJs.E));
parcelHelpers.export(exports, "isPropsValid", ()=>(0, _internalCommonJs.bW));
parcelHelpers.export(exports, "isValidDate", ()=>(0, _internalCommonJs.bk));
parcelHelpers.export(exports, "mapHash", ()=>(0, _internalCommonJs.a));
parcelHelpers.export(exports, "memoize", ()=>(0, _internalCommonJs.z));
parcelHelpers.export(exports, "memoizeArraylike", ()=>(0, _internalCommonJs.aA));
parcelHelpers.export(exports, "memoizeHashlike", ()=>(0, _internalCommonJs.aB));
parcelHelpers.export(exports, "memoizeObjArg", ()=>(0, _internalCommonJs.A));
parcelHelpers.export(exports, "mergeEventStores", ()=>(0, _internalCommonJs.aS));
parcelHelpers.export(exports, "multiplyDuration", ()=>(0, _internalCommonJs.bm));
parcelHelpers.export(exports, "padStart", ()=>(0, _internalCommonJs.ak));
parcelHelpers.export(exports, "parseBusinessHours", ()=>(0, _internalCommonJs.U));
parcelHelpers.export(exports, "parseClassNames", ()=>(0, _internalCommonJs.aQ));
parcelHelpers.export(exports, "parseDragMeta", ()=>(0, _internalCommonJs.bH));
parcelHelpers.export(exports, "parseEventDef", ()=>(0, _internalCommonJs.ai));
parcelHelpers.export(exports, "parseFieldSpecs", ()=>(0, _internalCommonJs.am));
parcelHelpers.export(exports, "parseMarker", ()=>(0, _internalCommonJs.bx));
parcelHelpers.export(exports, "pointInsideRect", ()=>(0, _internalCommonJs.aD));
parcelHelpers.export(exports, "preventContextMenu", ()=>(0, _internalCommonJs.ar));
parcelHelpers.export(exports, "preventDefault", ()=>(0, _internalCommonJs.a$));
parcelHelpers.export(exports, "preventSelection", ()=>(0, _internalCommonJs.ap));
parcelHelpers.export(exports, "rangeContainsMarker", ()=>(0, _internalCommonJs.G));
parcelHelpers.export(exports, "rangeContainsRange", ()=>(0, _internalCommonJs.b7));
parcelHelpers.export(exports, "rangesEqual", ()=>(0, _internalCommonJs.b5));
parcelHelpers.export(exports, "rangesIntersect", ()=>(0, _internalCommonJs.b6));
parcelHelpers.export(exports, "refineEventDef", ()=>(0, _internalCommonJs.aj));
parcelHelpers.export(exports, "refineProps", ()=>(0, _internalCommonJs.ag));
parcelHelpers.export(exports, "removeElement", ()=>(0, _internalCommonJs.aM));
parcelHelpers.export(exports, "removeExact", ()=>(0, _internalCommonJs.az));
parcelHelpers.export(exports, "renderChunkContent", ()=>(0, _internalCommonJs.c4));
parcelHelpers.export(exports, "renderFill", ()=>(0, _internalCommonJs.cl));
parcelHelpers.export(exports, "renderMicroColGroup", ()=>(0, _internalCommonJs.b$));
parcelHelpers.export(exports, "renderScrollShim", ()=>(0, _internalCommonJs.c8));
parcelHelpers.export(exports, "requestJson", ()=>(0, _internalCommonJs.r));
parcelHelpers.export(exports, "sanitizeShrinkWidth", ()=>(0, _internalCommonJs.c6));
parcelHelpers.export(exports, "setRef", ()=>(0, _internalCommonJs.W));
parcelHelpers.export(exports, "sliceEventStore", ()=>(0, _internalCommonJs.ad));
parcelHelpers.export(exports, "sortEventSegs", ()=>(0, _internalCommonJs.bP));
parcelHelpers.export(exports, "startOfDay", ()=>(0, _internalCommonJs.q));
parcelHelpers.export(exports, "translateRect", ()=>(0, _internalCommonJs.aH));
parcelHelpers.export(exports, "triggerDateSelect", ()=>(0, _internalCommonJs.cr));
parcelHelpers.export(exports, "unpromisify", ()=>(0, _internalCommonJs.u));
parcelHelpers.export(exports, "whenTransitionDone", ()=>(0, _internalCommonJs.b0));
parcelHelpers.export(exports, "wholeDivideDurations", ()=>(0, _internalCommonJs.br));
var _internalCommonJs = require("./internal-common.js");
var _preact = require("preact");
var _compat = require("preact/compat");

},{"./internal-common.js":"11UwQ","preact":"f5XJc","preact/compat":"g8qRV","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5k82D":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPortal", ()=>(0, _compat.createPortal));
parcelHelpers.export(exports, "createContext", ()=>(0, _internalCommonJs.af));
parcelHelpers.export(exports, "flushSync", ()=>(0, _internalCommonJs.a8));
var _preact = require("preact");
parcelHelpers.exportAll(_preact, exports);
var _compat = require("preact/compat");
var _internalCommonJs = require("./internal-common.js");

},{"preact":"f5XJc","preact/compat":"g8qRV","./internal-common.js":"11UwQ","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bShy5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>index);
var _indexJs = require("@fullcalendar/core/index.js");
var _internalJs = require("./internal.js");
var _internalJs1 = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
var _internalJs2 = require("@fullcalendar/daygrid/internal.js");
const OPTION_REFINERS = {
    allDaySlot: Boolean
};
var index = (0, _indexJs.createPlugin)({
    name: '@fullcalendar/timegrid',
    initialView: 'timeGridWeek',
    optionRefiners: OPTION_REFINERS,
    views: {
        timeGrid: {
            component: (0, _internalJs.DayTimeColsView),
            usesMinMaxTime: true,
            allDaySlot: true,
            slotDuration: '00:30:00',
            slotEventOverlap: true
        },
        timeGridDay: {
            type: 'timeGrid',
            duration: {
                days: 1
            }
        },
        timeGridWeek: {
            type: 'timeGrid',
            duration: {
                weeks: 1
            }
        }
    }
});

},{"@fullcalendar/core/index.js":"jECdu","./internal.js":"bFMxD","@fullcalendar/core/internal.js":"66xln","@fullcalendar/core/preact.js":"5k82D","@fullcalendar/daygrid/internal.js":"8f424","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bFMxD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DayTimeCols", ()=>DayTimeCols);
parcelHelpers.export(exports, "DayTimeColsSlicer", ()=>DayTimeColsSlicer);
parcelHelpers.export(exports, "DayTimeColsView", ()=>DayTimeColsView);
parcelHelpers.export(exports, "TimeCols", ()=>TimeCols);
parcelHelpers.export(exports, "TimeColsSlatsCoords", ()=>TimeColsSlatsCoords);
parcelHelpers.export(exports, "TimeColsView", ()=>TimeColsView);
parcelHelpers.export(exports, "buildDayRanges", ()=>buildDayRanges);
parcelHelpers.export(exports, "buildSlatMetas", ()=>buildSlatMetas);
parcelHelpers.export(exports, "buildTimeColsModel", ()=>buildTimeColsModel);
var _internalJs = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
var _internalJs1 = require("@fullcalendar/daygrid/internal.js");
class AllDaySplitter extends (0, _internalJs.Splitter) {
    getKeyInfo() {
        return {
            allDay: {},
            timed: {}
        };
    }
    getKeysForDateSpan(dateSpan) {
        if (dateSpan.allDay) return [
            'allDay'
        ];
        return [
            'timed'
        ];
    }
    getKeysForEventDef(eventDef) {
        if (!eventDef.allDay) return [
            'timed'
        ];
        if ((0, _internalJs.hasBgRendering)(eventDef)) return [
            'timed',
            'allDay'
        ];
        return [
            'allDay'
        ];
    }
}
const DEFAULT_SLAT_LABEL_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    omitZeroMinute: true,
    meridiem: 'short'
});
function TimeColsAxisCell(props) {
    let classNames = [
        'fc-timegrid-slot',
        'fc-timegrid-slot-label',
        props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'
    ];
    return (0, _preactJs.createElement)((0, _internalJs.ViewContextType).Consumer, null, (context)=>{
        if (!props.isLabeled) return (0, _preactJs.createElement)("td", {
            className: classNames.join(' '),
            "data-time": props.isoTimeStr
        });
        let { dateEnv, options, viewApi } = context;
        let labelFormat = options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? (0, _internalJs.createFormatter)(options.slotLabelFormat[0]) : (0, _internalJs.createFormatter)(options.slotLabelFormat);
        let renderProps = {
            level: 0,
            time: props.time,
            date: dateEnv.toDate(props.date),
            view: viewApi,
            text: dateEnv.format(props.date, labelFormat)
        };
        return (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
            elTag: "td",
            elClasses: classNames,
            elAttrs: {
                'data-time': props.isoTimeStr
            },
            renderProps: renderProps,
            generatorName: "slotLabelContent",
            customGenerator: options.slotLabelContent,
            defaultGenerator: renderInnerContent,
            classNameGenerator: options.slotLabelClassNames,
            didMount: options.slotLabelDidMount,
            willUnmount: options.slotLabelWillUnmount
        }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                className: "fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame"
            }, (0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-timegrid-slot-label-cushion',
                    'fc-scrollgrid-shrink-cushion'
                ]
            })));
    });
}
function renderInnerContent(props) {
    return props.text;
}
class TimeBodyAxis extends (0, _internalJs.BaseComponent) {
    render() {
        return this.props.slatMetas.map((slatMeta)=>(0, _preactJs.createElement)("tr", {
                key: slatMeta.key
            }, (0, _preactJs.createElement)(TimeColsAxisCell, Object.assign({}, slatMeta))));
    }
}
const DEFAULT_WEEK_NUM_FORMAT = (0, _internalJs.createFormatter)({
    week: 'short'
});
const AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;
class TimeColsView extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.allDaySplitter = new AllDaySplitter(); // for use by subclasses
        this.headerElRef = (0, _preactJs.createRef)();
        this.rootElRef = (0, _preactJs.createRef)();
        this.scrollerElRef = (0, _preactJs.createRef)();
        this.state = {
            slatCoords: null
        };
        this.handleScrollTopRequest = (scrollTop)=>{
            let scrollerEl = this.scrollerElRef.current;
            if (scrollerEl) scrollerEl.scrollTop = scrollTop;
        };
        /* Header Render Methods
        ------------------------------------------------------------------------------------------------------------------*/ this.renderHeadAxis = (rowKey, frameHeight = '')=>{
            let { options } = this.context;
            let { dateProfile } = this.props;
            let range = dateProfile.renderRange;
            let dayCnt = (0, _internalJs.diffDays)(range.start, range.end);
            // only do in day views (to avoid doing in week views that dont need it)
            let navLinkAttrs = dayCnt === 1 ? (0, _internalJs.buildNavLinkAttrs)(this.context, range.start, 'week') : {};
            if (options.weekNumbers && rowKey === 'day') return (0, _preactJs.createElement)((0, _internalJs.WeekNumberContainer), {
                elTag: "th",
                elClasses: [
                    'fc-timegrid-axis',
                    'fc-scrollgrid-shrink'
                ],
                elAttrs: {
                    'aria-hidden': true
                },
                date: range.start,
                defaultFormat: DEFAULT_WEEK_NUM_FORMAT
            }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                    className: [
                        'fc-timegrid-axis-frame',
                        'fc-scrollgrid-shrink-frame',
                        'fc-timegrid-axis-frame-liquid'
                    ].join(' '),
                    style: {
                        height: frameHeight
                    }
                }, (0, _preactJs.createElement)(InnerContent, {
                    elTag: "a",
                    elClasses: [
                        'fc-timegrid-axis-cushion',
                        'fc-scrollgrid-shrink-cushion',
                        'fc-scrollgrid-sync-inner'
                    ],
                    elAttrs: navLinkAttrs
                })));
            return (0, _preactJs.createElement)("th", {
                "aria-hidden": true,
                className: "fc-timegrid-axis"
            }, (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-axis-frame",
                style: {
                    height: frameHeight
                }
            }));
        };
        /* Table Component Render Methods
        ------------------------------------------------------------------------------------------------------------------*/ // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,
        // but DayGrid still needs to have classNames on inner elements in order to measure.
        this.renderTableRowAxis = (rowHeight)=>{
            let { options, viewApi } = this.context;
            let renderProps = {
                text: options.allDayText,
                view: viewApi
            };
            return(// TODO: make reusable hook. used in list view too
            (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
                elTag: "td",
                elClasses: [
                    'fc-timegrid-axis',
                    'fc-scrollgrid-shrink'
                ],
                elAttrs: {
                    'aria-hidden': true
                },
                renderProps: renderProps,
                generatorName: "allDayContent",
                customGenerator: options.allDayContent,
                defaultGenerator: renderAllDayInner,
                classNameGenerator: options.allDayClassNames,
                didMount: options.allDayDidMount,
                willUnmount: options.allDayWillUnmount
            }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                    className: [
                        'fc-timegrid-axis-frame',
                        'fc-scrollgrid-shrink-frame',
                        rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''
                    ].join(' '),
                    style: {
                        height: rowHeight
                    }
                }, (0, _preactJs.createElement)(InnerContent, {
                    elTag: "span",
                    elClasses: [
                        'fc-timegrid-axis-cushion',
                        'fc-scrollgrid-shrink-cushion',
                        'fc-scrollgrid-sync-inner'
                    ]
                }))));
        };
        this.handleSlatCoords = (slatCoords)=>{
            this.setState({
                slatCoords
            });
        };
    }
    // rendering
    // ----------------------------------------------------------------------------------------------------
    renderSimpleLayout(headerRowContent, allDayContent, timeContent) {
        let { context, props } = this;
        let sections = [];
        let stickyHeaderDates = (0, _internalJs.getStickyHeaderDates)(context.options);
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            chunk: {
                elRef: this.headerElRef,
                tableClassName: 'fc-col-header',
                rowContent: headerRowContent
            }
        });
        if (allDayContent) {
            sections.push({
                type: 'body',
                key: 'all-day',
                chunk: {
                    content: allDayContent
                }
            });
            sections.push({
                type: 'body',
                key: 'all-day-divider',
                outerContent: (0, _preactJs.createElement)("tr", {
                    role: "presentation",
                    className: "fc-scrollgrid-section"
                }, (0, _preactJs.createElement)("td", {
                    className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')
                }))
            });
        }
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            expandRows: Boolean(context.options.expandRows),
            chunk: {
                scrollerElRef: this.scrollerElRef,
                content: timeContent
            }
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elRef: this.rootElRef,
            elClasses: [
                'fc-timegrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)((0, _internalJs.SimpleScrollGrid), {
            liquid: !props.isHeightAuto && !props.forPrint,
            collapsibleWidth: props.forPrint,
            cols: [
                {
                    width: 'shrink'
                }
            ],
            sections: sections
        }));
    }
    renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {
        let ScrollGrid = this.context.pluginHooks.scrollGridImpl;
        if (!ScrollGrid) throw new Error('No ScrollGrid implementation');
        let { context, props } = this;
        let stickyHeaderDates = !props.forPrint && (0, _internalJs.getStickyHeaderDates)(context.options);
        let stickyFooterScrollbar = !props.forPrint && (0, _internalJs.getStickyFooterScrollbar)(context.options);
        let sections = [];
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            syncRowHeights: true,
            chunks: [
                {
                    key: 'axis',
                    rowContent: (arg)=>(0, _preactJs.createElement)("tr", {
                            role: "presentation"
                        }, this.renderHeadAxis('day', arg.rowSyncHeights[0]))
                },
                {
                    key: 'cols',
                    elRef: this.headerElRef,
                    tableClassName: 'fc-col-header',
                    rowContent: headerRowContent
                }
            ]
        });
        if (allDayContent) {
            sections.push({
                type: 'body',
                key: 'all-day',
                syncRowHeights: true,
                chunks: [
                    {
                        key: 'axis',
                        rowContent: (contentArg)=>(0, _preactJs.createElement)("tr", {
                                role: "presentation"
                            }, this.renderTableRowAxis(contentArg.rowSyncHeights[0]))
                    },
                    {
                        key: 'cols',
                        content: allDayContent
                    }
                ]
            });
            sections.push({
                key: 'all-day-divider',
                type: 'body',
                outerContent: (0, _preactJs.createElement)("tr", {
                    role: "presentation",
                    className: "fc-scrollgrid-section"
                }, (0, _preactJs.createElement)("td", {
                    colSpan: 2,
                    className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')
                }))
            });
        }
        let isNowIndicator = context.options.nowIndicator;
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            expandRows: Boolean(context.options.expandRows),
            chunks: [
                {
                    key: 'axis',
                    content: (arg)=>// TODO: make this now-indicator arrow more DRY with TimeColsContent
                        (0, _preactJs.createElement)("div", {
                            className: "fc-timegrid-axis-chunk"
                        }, (0, _preactJs.createElement)("table", {
                            "aria-hidden": true,
                            style: {
                                height: arg.expandRows ? arg.clientHeight : ''
                            }
                        }, arg.tableColGroupNode, (0, _preactJs.createElement)("tbody", null, (0, _preactJs.createElement)(TimeBodyAxis, {
                            slatMetas: slatMetas
                        }))), (0, _preactJs.createElement)("div", {
                            className: "fc-timegrid-now-indicator-container"
                        }, (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
                            unit: isNowIndicator ? 'minute' : 'day' /* hacky */ 
                        }, (nowDate)=>{
                            let nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void
                            if (typeof nowIndicatorTop === 'number') return (0, _preactJs.createElement)((0, _internalJs.NowIndicatorContainer), {
                                elClasses: [
                                    'fc-timegrid-now-indicator-arrow'
                                ],
                                elStyle: {
                                    top: nowIndicatorTop
                                },
                                isAxis: true,
                                date: nowDate
                            });
                            return null;
                        })))
                },
                {
                    key: 'cols',
                    scrollerElRef: this.scrollerElRef,
                    content: timeContent
                }
            ]
        });
        if (stickyFooterScrollbar) sections.push({
            key: 'footer',
            type: 'footer',
            isSticky: true,
            chunks: [
                {
                    key: 'axis',
                    content: (0, _internalJs.renderScrollShim)
                },
                {
                    key: 'cols',
                    content: (0, _internalJs.renderScrollShim)
                }
            ]
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elRef: this.rootElRef,
            elClasses: [
                'fc-timegrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)(ScrollGrid, {
            liquid: !props.isHeightAuto && !props.forPrint,
            forPrint: props.forPrint,
            collapsibleWidth: false,
            colGroups: [
                {
                    width: 'shrink',
                    cols: [
                        {
                            width: 'shrink'
                        }
                    ]
                },
                {
                    cols: [
                        {
                            span: colCnt,
                            minWidth: dayMinWidth
                        }
                    ]
                }
            ],
            sections: sections
        }));
    }
    /* Dimensions
    ------------------------------------------------------------------------------------------------------------------*/ getAllDayMaxEventProps() {
        let { dayMaxEvents, dayMaxEventRows } = this.context.options;
        if (dayMaxEvents === true || dayMaxEventRows === true) {
            dayMaxEvents = undefined;
            dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure "auto" goes to a real number
        }
        return {
            dayMaxEvents,
            dayMaxEventRows
        };
    }
}
function renderAllDayInner(renderProps) {
    return renderProps.text;
}
class TimeColsSlatsCoords {
    constructor(positions, dateProfile, slotDuration){
        this.positions = positions;
        this.dateProfile = dateProfile;
        this.slotDuration = slotDuration;
    }
    safeComputeTop(date) {
        let { dateProfile } = this;
        if ((0, _internalJs.rangeContainsMarker)(dateProfile.currentRange, date)) {
            let startOfDayDate = (0, _internalJs.startOfDay)(date);
            let timeMs = date.valueOf() - startOfDayDate.valueOf();
            if (timeMs >= (0, _internalJs.asRoughMs)(dateProfile.slotMinTime) && timeMs < (0, _internalJs.asRoughMs)(dateProfile.slotMaxTime)) return this.computeTimeTop((0, _internalJs.createDuration)(timeMs));
        }
        return null;
    }
    // Computes the top coordinate, relative to the bounds of the grid, of the given date.
    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.
    computeDateTop(when, startOfDayDate) {
        if (!startOfDayDate) startOfDayDate = (0, _internalJs.startOfDay)(when);
        return this.computeTimeTop((0, _internalJs.createDuration)(when.valueOf() - startOfDayDate.valueOf()));
    }
    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).
    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.
    // Eventually allow computation with arbirary slat dates.
    computeTimeTop(duration) {
        let { positions, dateProfile } = this;
        let len = positions.els.length;
        // floating-point value of # of slots covered
        let slatCoverage = (duration.milliseconds - (0, _internalJs.asRoughMs)(dateProfile.slotMinTime)) / (0, _internalJs.asRoughMs)(this.slotDuration);
        let slatIndex;
        let slatRemainder;
        // compute a floating-point number for how many slats should be progressed through.
        // from 0 to number of slats (inclusive)
        // constrained because slotMinTime/slotMaxTime might be customized.
        slatCoverage = Math.max(0, slatCoverage);
        slatCoverage = Math.min(len, slatCoverage);
        // an integer index of the furthest whole slat
        // from 0 to number slats (*exclusive*, so len-1)
        slatIndex = Math.floor(slatCoverage);
        slatIndex = Math.min(slatIndex, len - 1);
        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
        // could be 1.0 if slatCoverage is covering *all* the slots
        slatRemainder = slatCoverage - slatIndex;
        return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;
    }
}
class TimeColsSlatsBody extends (0, _internalJs.BaseComponent) {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { slatElRefs } = props;
        return (0, _preactJs.createElement)("tbody", null, props.slatMetas.map((slatMeta, i)=>{
            let renderProps = {
                time: slatMeta.time,
                date: context.dateEnv.toDate(slatMeta.date),
                view: context.viewApi
            };
            return (0, _preactJs.createElement)("tr", {
                key: slatMeta.key,
                ref: slatElRefs.createRef(slatMeta.key)
            }, props.axis && (0, _preactJs.createElement)(TimeColsAxisCell, Object.assign({}, slatMeta)), (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
                elTag: "td",
                elClasses: [
                    'fc-timegrid-slot',
                    'fc-timegrid-slot-lane',
                    !slatMeta.isLabeled && 'fc-timegrid-slot-minor'
                ],
                elAttrs: {
                    'data-time': slatMeta.isoTimeStr
                },
                renderProps: renderProps,
                generatorName: "slotLaneContent",
                customGenerator: options.slotLaneContent,
                classNameGenerator: options.slotLaneClassNames,
                didMount: options.slotLaneDidMount,
                willUnmount: options.slotLaneWillUnmount
            }));
        }));
    }
}
/*
for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.
*/ class TimeColsSlats extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.rootElRef = (0, _preactJs.createRef)();
        this.slatElRefs = new (0, _internalJs.RefMap)();
    }
    render() {
        let { props, context } = this;
        return (0, _preactJs.createElement)("div", {
            ref: this.rootElRef,
            className: "fc-timegrid-slots"
        }, (0, _preactJs.createElement)("table", {
            "aria-hidden": true,
            className: context.theme.getClass('table'),
            style: {
                minWidth: props.tableMinWidth,
                width: props.clientWidth,
                height: props.minHeight
            }
        }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */ , (0, _preactJs.createElement)(TimeColsSlatsBody, {
            slatElRefs: this.slatElRefs,
            axis: props.axis,
            slatMetas: props.slatMetas
        })));
    }
    componentDidMount() {
        this.updateSizing();
    }
    componentDidUpdate() {
        this.updateSizing();
    }
    componentWillUnmount() {
        if (this.props.onCoords) this.props.onCoords(null);
    }
    updateSizing() {
        let { context, props } = this;
        if (props.onCoords && props.clientWidth !== null // means sizing has stabilized
        ) {
            let rootEl = this.rootElRef.current;
            if (rootEl.offsetHeight) props.onCoords(new TimeColsSlatsCoords(new (0, _internalJs.PositionCache)(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));
        }
    }
}
function collectSlatEls(elMap, slatMetas) {
    return slatMetas.map((slatMeta)=>elMap[slatMeta.key]);
}
function splitSegsByCol(segs, colCnt) {
    let segsByCol = [];
    let i;
    for(i = 0; i < colCnt; i += 1)segsByCol.push([]);
    if (segs) for(i = 0; i < segs.length; i += 1)segsByCol[segs[i].col].push(segs[i]);
    return segsByCol;
}
function splitInteractionByCol(ui, colCnt) {
    let byRow = [];
    if (!ui) for(let i = 0; i < colCnt; i += 1)byRow[i] = null;
    else {
        for(let i = 0; i < colCnt; i += 1)byRow[i] = {
            affectedInstances: ui.affectedInstances,
            isEvent: ui.isEvent,
            segs: []
        };
        for (let seg of ui.segs)byRow[seg.col].segs.push(seg);
    }
    return byRow;
}
class TimeColMoreLink extends (0, _internalJs.BaseComponent) {
    render() {
        let { props } = this;
        return (0, _preactJs.createElement)((0, _internalJs.MoreLinkContainer), {
            elClasses: [
                'fc-timegrid-more-link'
            ],
            elStyle: {
                top: props.top,
                bottom: props.bottom
            },
            allDayDate: null,
            moreCnt: props.hiddenSegs.length,
            allSegs: props.hiddenSegs,
            hiddenSegs: props.hiddenSegs,
            extraDateSpan: props.extraDateSpan,
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            popoverContent: ()=>renderPlainFgSegs(props.hiddenSegs, props),
            defaultGenerator: renderMoreLinkInner,
            forceTimed: true
        }, (InnerContent)=>(0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-timegrid-more-link-inner',
                    'fc-sticky'
                ]
            }));
    }
}
function renderMoreLinkInner(props) {
    return props.shortText;
}
// segInputs assumed sorted
function buildPositioning(segInputs, strictOrder, maxStackCnt) {
    let hierarchy = new (0, _internalJs.SegHierarchy)();
    if (strictOrder != null) hierarchy.strictOrder = strictOrder;
    if (maxStackCnt != null) hierarchy.maxStackCnt = maxStackCnt;
    let hiddenEntries = hierarchy.addSegs(segInputs);
    let hiddenGroups = (0, _internalJs.groupIntersectingEntries)(hiddenEntries);
    let web = buildWeb(hierarchy);
    web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0
    let segRects = webToRects(web);
    return {
        segRects,
        hiddenGroups
    };
}
function buildWeb(hierarchy) {
    const { entriesByLevel } = hierarchy;
    const buildNode = cacheable((level, lateral)=>level + ':' + lateral, (level, lateral)=>{
        let siblingRange = findNextLevelSegs(hierarchy, level, lateral);
        let nextLevelRes = buildNodes(siblingRange, buildNode);
        let entry = entriesByLevel[level][lateral];
        return [
            Object.assign(Object.assign({}, entry), {
                nextLevelNodes: nextLevelRes[0]
            }),
            entry.thickness + nextLevelRes[1]
        ];
    });
    return buildNodes(entriesByLevel.length ? {
        level: 0,
        lateralStart: 0,
        lateralEnd: entriesByLevel[0].length
    } : null, buildNode)[0];
}
function buildNodes(siblingRange, buildNode) {
    if (!siblingRange) return [
        [],
        0
    ];
    let { level, lateralStart, lateralEnd } = siblingRange;
    let lateral = lateralStart;
    let pairs = [];
    while(lateral < lateralEnd){
        pairs.push(buildNode(level, lateral));
        lateral += 1;
    }
    pairs.sort(cmpDescPressures);
    return [
        pairs.map(extractNode),
        pairs[0][1]
    ];
}
function cmpDescPressures(a, b) {
    return b[1] - a[1];
}
function extractNode(a) {
    return a[0];
}
function findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {
    let { levelCoords, entriesByLevel } = hierarchy;
    let subjectEntry = entriesByLevel[subjectLevel][subjectLateral];
    let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;
    let levelCnt = levelCoords.length;
    let level = subjectLevel;
    // skip past levels that are too high up
    for(; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing
    for(; level < levelCnt; level += 1){
        let entries = entriesByLevel[level];
        let entry;
        let searchIndex = (0, _internalJs.binarySearch)(entries, subjectEntry.span.start, (0, _internalJs.getEntrySpanEnd));
        let lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one
        let lateralEnd = lateralStart;
        while((entry = entries[lateralEnd]) && // but not past the whole seg list
        entry.span.start < subjectEntry.span.end)lateralEnd += 1;
        if (lateralStart < lateralEnd) return {
            level,
            lateralStart,
            lateralEnd
        };
    }
    return null;
}
function stretchWeb(topLevelNodes, totalThickness) {
    const stretchNode = cacheable((node, startCoord, prevThickness)=>(0, _internalJs.buildEntryKey)(node), (node, startCoord, prevThickness)=>{
        let { nextLevelNodes, thickness } = node;
        let allThickness = thickness + prevThickness;
        let thicknessFraction = thickness / allThickness;
        let endCoord;
        let newChildren = [];
        if (!nextLevelNodes.length) endCoord = totalThickness;
        else {
            for (let childNode of nextLevelNodes)if (endCoord === undefined) {
                let res = stretchNode(childNode, startCoord, allThickness);
                endCoord = res[0];
                newChildren.push(res[1]);
            } else {
                let res = stretchNode(childNode, endCoord, 0);
                newChildren.push(res[1]);
            }
        }
        let newThickness = (endCoord - startCoord) * thicknessFraction;
        return [
            endCoord - newThickness,
            Object.assign(Object.assign({}, node), {
                thickness: newThickness,
                nextLevelNodes: newChildren
            })
        ];
    });
    return topLevelNodes.map((node)=>stretchNode(node, 0, 0)[1]);
}
// not sorted in any particular order
function webToRects(topLevelNodes) {
    let rects = [];
    const processNode = cacheable((node, levelCoord, stackDepth)=>(0, _internalJs.buildEntryKey)(node), (node, levelCoord, stackDepth)=>{
        let rect = Object.assign(Object.assign({}, node), {
            levelCoord,
            stackDepth,
            stackForward: 0
        });
        rects.push(rect);
        return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;
    });
    function processNodes(nodes, levelCoord, stackDepth) {
        let stackForward = 0;
        for (let node of nodes)stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);
        return stackForward;
    }
    processNodes(topLevelNodes, 0, 0);
    return rects; // TODO: sort rects by levelCoord to be consistent with toRects?
}
// TODO: move to general util
function cacheable(keyFunc, workFunc) {
    const cache = {};
    return (...args)=>{
        let key = keyFunc(...args);
        return key in cache ? cache[key] : cache[key] = workFunc(...args);
    };
}
function computeSegVCoords(segs, colDate, slatCoords = null, eventMinHeight = 0) {
    let vcoords = [];
    if (slatCoords) for(let i = 0; i < segs.length; i += 1){
        let seg = segs[i];
        let spanStart = slatCoords.computeDateTop(seg.start, colDate);
        let spanEnd = Math.max(spanStart + (eventMinHeight || 0), slatCoords.computeDateTop(seg.end, colDate));
        vcoords.push({
            start: Math.round(spanStart),
            end: Math.round(spanEnd)
        });
    }
    return vcoords;
}
function computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack) {
    let segInputs = [];
    let dumbSegs = []; // segs without coords
    for(let i = 0; i < segs.length; i += 1){
        let vcoords = segVCoords[i];
        if (vcoords) segInputs.push({
            index: i,
            thickness: 1,
            span: vcoords
        });
        else dumbSegs.push(segs[i]);
    }
    let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack);
    let segPlacements = [];
    for (let segRect of segRects)segPlacements.push({
        seg: segs[segRect.index],
        rect: segRect
    });
    for (let dumbSeg of dumbSegs)segPlacements.push({
        seg: dumbSeg,
        rect: null
    });
    return {
        segPlacements,
        hiddenGroups
    };
}
const DEFAULT_TIME_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    meridiem: false
});
class TimeColEvent extends (0, _internalJs.BaseComponent) {
    render() {
        return (0, _preactJs.createElement)((0, _internalJs.StandardEvent), Object.assign({}, this.props, {
            elClasses: [
                'fc-timegrid-event',
                'fc-v-event',
                this.props.isShort && 'fc-timegrid-event-short'
            ],
            defaultTimeFormat: DEFAULT_TIME_FORMAT
        }));
    }
}
class TimeCol extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.sortEventSegs = (0, _internalJs.memoize)((0, _internalJs.sortEventSegs));
    }
    // TODO: memoize event-placement?
    render() {
        let { props, context } = this;
        let { options } = context;
        let isSelectMirror = options.selectMirror;
        let mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];
        let interactionAffectedInstances = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};
        let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);
        return (0, _preactJs.createElement)((0, _internalJs.DayCellContainer), {
            elTag: "td",
            elRef: props.elRef,
            elClasses: [
                'fc-timegrid-col',
                ...props.extraClassNames || []
            ],
            elAttrs: Object.assign({
                role: 'gridcell'
            }, props.extraDataAttrs),
            date: props.date,
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            extraRenderProps: props.extraRenderProps
        }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-frame"
            }, (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-bg"
            }, this.renderFillSegs(props.businessHourSegs, 'non-business'), this.renderFillSegs(props.bgEventSegs, 'bg-event'), this.renderFillSegs(props.dateSelectionSegs, 'highlight')), (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-events"
            }, this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-events"
            }, this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror), 'mirror')), (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-now-indicator-container"
            }, this.renderNowIndicator(props.nowIndicatorSegs)), (0, _internalJs.hasCustomDayCellContent)(options) && (0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-timegrid-col-misc'
                ]
            })));
    }
    renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {
        let { props } = this;
        if (props.forPrint) return renderPlainFgSegs(sortedFgSegs, props);
        return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey);
    }
    renderPositionedFgSegs(segs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {
        let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options;
        let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props;
        let isMirror = isDragging || isResizing || isDateSelecting;
        let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);
        let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack);
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map((segPlacement)=>{
            let { seg, rect } = segPlacement;
            let instanceId = seg.eventRange.instance.instanceId;
            let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);
            let vStyle = computeSegVStyle(rect && rect.span);
            let hStyle = !isMirror && rect ? this.computeSegHStyle(rect) : {
                left: 0,
                right: 0
            };
            let isInset = Boolean(rect) && rect.stackForward > 0;
            let isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem
            return (0, _preactJs.createElement)("div", {
                className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),
                key: forcedKey || instanceId,
                style: Object.assign(Object.assign({
                    visibility: isVisible ? '' : 'hidden'
                }, vStyle), hStyle)
            }, (0, _preactJs.createElement)(TimeColEvent, Object.assign({
                seg: seg,
                isDragging: isDragging,
                isResizing: isResizing,
                isDateSelecting: isDateSelecting,
                isSelected: instanceId === eventSelection,
                isShort: isShort
            }, (0, _internalJs.getSegMeta)(seg, todayRange, nowDate))));
        }));
    }
    // will already have eventMinHeight applied because segInputs already had it
    renderHiddenGroups(hiddenGroups, segs) {
        let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props;
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, hiddenGroups.map((hiddenGroup)=>{
            let positionCss = computeSegVStyle(hiddenGroup.span);
            let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);
            return (0, _preactJs.createElement)(TimeColMoreLink, {
                key: (0, _internalJs.buildIsoString)((0, _internalJs.computeEarliestSegStart)(hiddenSegs)),
                hiddenSegs: hiddenSegs,
                top: positionCss.top,
                bottom: positionCss.bottom,
                extraDateSpan: extraDateSpan,
                dateProfile: dateProfile,
                todayRange: todayRange,
                nowDate: nowDate,
                eventSelection: eventSelection,
                eventDrag: eventDrag,
                eventResize: eventResize
            });
        }));
    }
    renderFillSegs(segs, fillType) {
        let { props, context } = this;
        let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated
        let children = segVCoords.map((vcoords, i)=>{
            let seg = segs[i];
            return (0, _preactJs.createElement)("div", {
                key: (0, _internalJs.buildEventRangeKey)(seg.eventRange),
                className: "fc-timegrid-bg-harness",
                style: computeSegVStyle(vcoords)
            }, fillType === 'bg-event' ? (0, _preactJs.createElement)((0, _internalJs.BgEvent), Object.assign({
                seg: seg
            }, (0, _internalJs.getSegMeta)(seg, props.todayRange, props.nowDate))) : (0, _internalJs.renderFill)(fillType));
        });
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, children);
    }
    renderNowIndicator(segs) {
        let { slatCoords, date } = this.props;
        if (!slatCoords) return null;
        return segs.map((seg, i)=>(0, _preactJs.createElement)((0, _internalJs.NowIndicatorContainer), {
                // key doesn't matter. will only ever be one
                key: i,
                elClasses: [
                    'fc-timegrid-now-indicator-line'
                ],
                elStyle: {
                    top: slatCoords.computeDateTop(seg.start, date)
                },
                isAxis: false,
                date: date
            }));
    }
    computeSegHStyle(segHCoords) {
        let { isRtl, options } = this.context;
        let shouldOverlap = options.slotEventOverlap;
        let nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point
        let farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point
        let left; // amount of space from left edge, a fraction of the total width
        let right; // amount of space from right edge, a fraction of the total width
        if (shouldOverlap) // double the width, but don't go beyond the maximum forward coordinate (1.0)
        farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);
        if (isRtl) {
            left = 1 - farCoord;
            right = nearCoord;
        } else {
            left = nearCoord;
            right = 1 - farCoord;
        }
        let props = {
            zIndex: segHCoords.stackDepth + 1,
            left: left * 100 + '%',
            right: right * 100 + '%'
        };
        if (shouldOverlap && !segHCoords.stackForward) // add padding to the edge so that forward stacked events don't cover the resizer's icon
        props[isRtl ? 'marginLeft' : 'marginRight'] = 20; // 10 is a guesstimate of the icon's width
        return props;
    }
}
function renderPlainFgSegs(sortedFgSegs, { todayRange, nowDate, eventSelection, eventDrag, eventResize }) {
    let hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};
    return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, sortedFgSegs.map((seg)=>{
        let instanceId = seg.eventRange.instance.instanceId;
        return (0, _preactJs.createElement)("div", {
            key: instanceId,
            style: {
                visibility: hiddenInstances[instanceId] ? 'hidden' : ''
            }
        }, (0, _preactJs.createElement)(TimeColEvent, Object.assign({
            seg: seg,
            isDragging: false,
            isResizing: false,
            isDateSelecting: false,
            isSelected: instanceId === eventSelection,
            isShort: false
        }, (0, _internalJs.getSegMeta)(seg, todayRange, nowDate))));
    }));
}
function computeSegVStyle(segVCoords) {
    if (!segVCoords) return {
        top: '',
        bottom: ''
    };
    return {
        top: segVCoords.start,
        bottom: -segVCoords.end
    };
}
function compileSegsFromEntries(segEntries, allSegs) {
    return segEntries.map((segEntry)=>allSegs[segEntry.index]);
}
class TimeColsContent extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.splitFgEventSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitBgEventSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitBusinessHourSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitNowIndicatorSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitDateSelectionSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitEventDrag = (0, _internalJs.memoize)(splitInteractionByCol);
        this.splitEventResize = (0, _internalJs.memoize)(splitInteractionByCol);
        this.rootElRef = (0, _preactJs.createRef)();
        this.cellElRefs = new (0, _internalJs.RefMap)();
    }
    render() {
        let { props, context } = this;
        let nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void
        let colCnt = props.cells.length;
        let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);
        let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);
        let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);
        let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);
        let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);
        let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);
        let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);
        return (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-cols",
            ref: this.rootElRef
        }, (0, _preactJs.createElement)("table", {
            role: "presentation",
            style: {
                minWidth: props.tableMinWidth,
                width: props.clientWidth
            }
        }, props.tableColGroupNode, (0, _preactJs.createElement)("tbody", {
            role: "presentation"
        }, (0, _preactJs.createElement)("tr", {
            role: "row"
        }, props.axis && (0, _preactJs.createElement)("td", {
            "aria-hidden": true,
            className: "fc-timegrid-col fc-timegrid-axis"
        }, (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-col-frame"
        }, (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-now-indicator-container"
        }, typeof nowIndicatorTop === 'number' && (0, _preactJs.createElement)((0, _internalJs.NowIndicatorContainer), {
            elClasses: [
                'fc-timegrid-now-indicator-arrow'
            ],
            elStyle: {
                top: nowIndicatorTop
            },
            isAxis: true,
            date: props.nowDate
        })))), props.cells.map((cell, i)=>(0, _preactJs.createElement)(TimeCol, {
                key: cell.key,
                elRef: this.cellElRefs.createRef(cell.key),
                dateProfile: props.dateProfile,
                date: cell.date,
                nowDate: props.nowDate,
                todayRange: props.todayRange,
                extraRenderProps: cell.extraRenderProps,
                extraDataAttrs: cell.extraDataAttrs,
                extraClassNames: cell.extraClassNames,
                extraDateSpan: cell.extraDateSpan,
                fgEventSegs: fgEventSegsByRow[i],
                bgEventSegs: bgEventSegsByRow[i],
                businessHourSegs: businessHourSegsByRow[i],
                nowIndicatorSegs: nowIndicatorSegsByRow[i],
                dateSelectionSegs: dateSelectionSegsByRow[i],
                eventDrag: eventDragByRow[i],
                eventResize: eventResizeByRow[i],
                slatCoords: props.slatCoords,
                eventSelection: props.eventSelection,
                forPrint: props.forPrint
            }))))));
    }
    componentDidMount() {
        this.updateCoords();
    }
    componentDidUpdate() {
        this.updateCoords();
    }
    updateCoords() {
        let { props } = this;
        if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized
        ) props.onColCoords(new (0, _internalJs.PositionCache)(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, false));
    }
}
function collectCellEls(elMap, cells) {
    return cells.map((cell)=>elMap[cell.key]);
}
/* A component that renders one or more columns of vertical time slots
----------------------------------------------------------------------------------------------------------------------*/ class TimeCols extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.processSlotOptions = (0, _internalJs.memoize)(processSlotOptions);
        this.state = {
            slatCoords: null
        };
        this.handleRootEl = (el)=>{
            if (el) this.context.registerInteractiveComponent(this, {
                el,
                isHitComboAllowed: this.props.isHitComboAllowed
            });
            else this.context.unregisterInteractiveComponent(this);
        };
        this.handleScrollRequest = (request)=>{
            let { onScrollTopRequest } = this.props;
            let { slatCoords } = this.state;
            if (onScrollTopRequest && slatCoords) {
                if (request.time) {
                    let top = slatCoords.computeTimeTop(request.time);
                    top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further
                    if (top) top += 1; // to overcome top border that slots beyond the first have. looks better
                    onScrollTopRequest(top);
                }
                return true;
            }
            return false;
        };
        this.handleColCoords = (colCoords)=>{
            this.colCoords = colCoords;
        };
        this.handleSlatCoords = (slatCoords)=>{
            this.setState({
                slatCoords
            });
            if (this.props.onSlatCoords) this.props.onSlatCoords(slatCoords);
        };
    }
    render() {
        let { props, state } = this;
        return (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-body",
            ref: this.handleRootEl,
            style: {
                // these props are important to give this wrapper correct dimensions for interactions
                // TODO: if we set it here, can we avoid giving to inner tables?
                width: props.clientWidth,
                minWidth: props.tableMinWidth
            }
        }, (0, _preactJs.createElement)(TimeColsSlats, {
            axis: props.axis,
            dateProfile: props.dateProfile,
            slatMetas: props.slatMetas,
            clientWidth: props.clientWidth,
            minHeight: props.expandRows ? props.clientHeight : '',
            tableMinWidth: props.tableMinWidth,
            tableColGroupNode: props.axis ? props.tableColGroupNode : null,
            onCoords: this.handleSlatCoords
        }), (0, _preactJs.createElement)(TimeColsContent, {
            cells: props.cells,
            axis: props.axis,
            dateProfile: props.dateProfile,
            businessHourSegs: props.businessHourSegs,
            bgEventSegs: props.bgEventSegs,
            fgEventSegs: props.fgEventSegs,
            dateSelectionSegs: props.dateSelectionSegs,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            todayRange: props.todayRange,
            nowDate: props.nowDate,
            nowIndicatorSegs: props.nowIndicatorSegs,
            clientWidth: props.clientWidth,
            tableMinWidth: props.tableMinWidth,
            tableColGroupNode: props.tableColGroupNode,
            slatCoords: state.slatCoords,
            onColCoords: this.handleColCoords,
            forPrint: props.forPrint
        }));
    }
    componentDidMount() {
        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);
    }
    componentDidUpdate(prevProps) {
        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);
    }
    componentWillUnmount() {
        this.scrollResponder.detach();
    }
    queryHit(positionLeft, positionTop) {
        let { dateEnv, options } = this.context;
        let { colCoords } = this;
        let { dateProfile } = this.props;
        let { slatCoords } = this.state;
        let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration);
        let colIndex = colCoords.leftToIndex(positionLeft);
        let slatIndex = slatCoords.positions.topToIndex(positionTop);
        if (colIndex != null && slatIndex != null) {
            let cell = this.props.cells[colIndex];
            let slatTop = slatCoords.positions.tops[slatIndex];
            let slatHeight = slatCoords.positions.getHeight(slatIndex);
            let partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1
            let localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat
            let snapIndex = slatIndex * snapsPerSlot + localSnapIndex;
            let dayDate = this.props.cells[colIndex].date;
            let time = (0, _internalJs.addDurations)(dateProfile.slotMinTime, (0, _internalJs.multiplyDuration)(snapDuration, snapIndex));
            let start = dateEnv.add(dayDate, time);
            let end = dateEnv.add(start, snapDuration);
            return {
                dateProfile,
                dateSpan: Object.assign({
                    range: {
                        start,
                        end
                    },
                    allDay: false
                }, cell.extraDateSpan),
                dayEl: colCoords.els[colIndex],
                rect: {
                    left: colCoords.lefts[colIndex],
                    right: colCoords.rights[colIndex],
                    top: slatTop,
                    bottom: slatTop + slatHeight
                },
                layer: 0
            };
        }
        return null;
    }
}
function processSlotOptions(slotDuration, snapDurationOverride) {
    let snapDuration = snapDurationOverride || slotDuration;
    let snapsPerSlot = (0, _internalJs.wholeDivideDurations)(slotDuration, snapDuration);
    if (snapsPerSlot === null) {
        snapDuration = slotDuration;
        snapsPerSlot = 1;
    // TODO: say warning?
    }
    return {
        snapDuration,
        snapsPerSlot
    };
}
class DayTimeColsSlicer extends (0, _internalJs.Slicer) {
    sliceRange(range, dayRanges) {
        let segs = [];
        for(let col = 0; col < dayRanges.length; col += 1){
            let segRange = (0, _internalJs.intersectRanges)(range, dayRanges[col]);
            if (segRange) segs.push({
                start: segRange.start,
                end: segRange.end,
                isStart: segRange.start.valueOf() === range.start.valueOf(),
                isEnd: segRange.end.valueOf() === range.end.valueOf(),
                col
            });
        }
        return segs;
    }
}
class DayTimeCols extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.buildDayRanges = (0, _internalJs.memoize)(buildDayRanges);
        this.slicer = new DayTimeColsSlicer();
        this.timeColsRef = (0, _preactJs.createRef)();
    }
    render() {
        let { props, context } = this;
        let { dateProfile, dayTableModel } = props;
        let { nowIndicator, nextDayThreshold } = context.options;
        let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);
        // give it the first row of cells
        // TODO: would move this further down hierarchy, but sliceNowDate needs it
        return (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
            unit: nowIndicator ? 'minute' : 'day'
        }, (nowDate, todayRange)=>(0, _preactJs.createElement)(TimeCols, Object.assign({
                ref: this.timeColsRef
            }, this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {
                forPrint: props.forPrint,
                axis: props.axis,
                dateProfile: dateProfile,
                slatMetas: props.slatMetas,
                slotDuration: props.slotDuration,
                cells: dayTableModel.cells[0],
                tableColGroupNode: props.tableColGroupNode,
                tableMinWidth: props.tableMinWidth,
                clientWidth: props.clientWidth,
                clientHeight: props.clientHeight,
                expandRows: props.expandRows,
                nowDate: nowDate,
                nowIndicatorSegs: nowIndicator && this.slicer.sliceNowDate(nowDate, dateProfile, nextDayThreshold, context, dayRanges),
                todayRange: todayRange,
                onScrollTopRequest: props.onScrollTopRequest,
                onSlatCoords: props.onSlatCoords
            })));
    }
}
function buildDayRanges(dayTableModel, dateProfile, dateEnv) {
    let ranges = [];
    for (let date of dayTableModel.headerDates)ranges.push({
        start: dateEnv.add(date, dateProfile.slotMinTime),
        end: dateEnv.add(date, dateProfile.slotMaxTime)
    });
    return ranges;
}
// potential nice values for the slot-duration and interval-duration
// from largest to smallest
const STOCK_SUB_DURATIONS = [
    {
        hours: 1
    },
    {
        minutes: 30
    },
    {
        minutes: 15
    },
    {
        seconds: 30
    },
    {
        seconds: 15
    }
];
function buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {
    let dayStart = new Date(0);
    let slatTime = slotMinTime;
    let slatIterator = (0, _internalJs.createDuration)(0);
    let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);
    let metas = [];
    while((0, _internalJs.asRoughMs)(slatTime) < (0, _internalJs.asRoughMs)(slotMaxTime)){
        let date = dateEnv.add(dayStart, slatTime);
        let isLabeled = (0, _internalJs.wholeDivideDurations)(slatIterator, labelInterval) !== null;
        metas.push({
            date,
            time: slatTime,
            key: date.toISOString(),
            isoTimeStr: (0, _internalJs.formatIsoTimeString)(date),
            isLabeled
        });
        slatTime = (0, _internalJs.addDurations)(slatTime, slotDuration);
        slatIterator = (0, _internalJs.addDurations)(slatIterator, slotDuration);
    }
    return metas;
}
// Computes an automatic value for slotLabelInterval
function computeLabelInterval(slotDuration) {
    let i;
    let labelInterval;
    let slotsPerLabel;
    // find the smallest stock label interval that results in more than one slots-per-label
    for(i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1){
        labelInterval = (0, _internalJs.createDuration)(STOCK_SUB_DURATIONS[i]);
        slotsPerLabel = (0, _internalJs.wholeDivideDurations)(labelInterval, slotDuration);
        if (slotsPerLabel !== null && slotsPerLabel > 1) return labelInterval;
    }
    return slotDuration; // fall back
}
class DayTimeColsView extends TimeColsView {
    constructor(){
        super(...arguments);
        this.buildTimeColsModel = (0, _internalJs.memoize)(buildTimeColsModel);
        this.buildSlatMetas = (0, _internalJs.memoize)(buildSlatMetas);
    }
    render() {
        let { options, dateEnv, dateProfileGenerator } = this.context;
        let { props } = this;
        let { dateProfile } = props;
        let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);
        let splitProps = this.allDaySplitter.splitProps(props);
        let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);
        let { dayMinWidth } = options;
        let hasAttachedAxis = !dayMinWidth;
        let hasDetachedAxis = dayMinWidth;
        let headerContent = options.dayHeaders && (0, _preactJs.createElement)((0, _internalJs.DayHeader), {
            dates: dayTableModel.headerDates,
            dateProfile: dateProfile,
            datesRepDistinctDays: true,
            renderIntro: hasAttachedAxis ? this.renderHeadAxis : null
        });
        let allDayContent = options.allDaySlot !== false && ((contentArg)=>(0, _preactJs.createElement)((0, _internalJs1.DayTable), Object.assign({}, splitProps.allDay, {
                dateProfile: dateProfile,
                dayTableModel: dayTableModel,
                nextDayThreshold: options.nextDayThreshold,
                tableMinWidth: contentArg.tableMinWidth,
                colGroupNode: contentArg.tableColGroupNode,
                renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null,
                showWeekNumbers: false,
                expandRows: false,
                headerAlignElRef: this.headerElRef,
                clientWidth: contentArg.clientWidth,
                clientHeight: contentArg.clientHeight,
                forPrint: props.forPrint
            }, this.getAllDayMaxEventProps())));
        let timeGridContent = (contentArg)=>(0, _preactJs.createElement)(DayTimeCols, Object.assign({}, splitProps.timed, {
                dayTableModel: dayTableModel,
                dateProfile: dateProfile,
                axis: hasAttachedAxis,
                slotDuration: options.slotDuration,
                slatMetas: slatMetas,
                forPrint: props.forPrint,
                tableColGroupNode: contentArg.tableColGroupNode,
                tableMinWidth: contentArg.tableMinWidth,
                clientWidth: contentArg.clientWidth,
                clientHeight: contentArg.clientHeight,
                onSlatCoords: this.handleSlatCoords,
                expandRows: contentArg.expandRows,
                onScrollTopRequest: this.handleScrollTopRequest
            }));
        return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);
    }
}
function buildTimeColsModel(dateProfile, dateProfileGenerator) {
    let daySeries = new (0, _internalJs.DaySeriesModel)(dateProfile.renderRange, dateProfileGenerator);
    return new (0, _internalJs.DayTableModel)(daySeries, false);
}
var css_248z = ".fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:\"\\00a0\"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:\"\\00a0-\\00a0\"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-arrow,.fc .fc-timegrid-now-indicator-line{pointer-events:none}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}";
(0, _internalJs.injectStyles)(css_248z);

},{"@fullcalendar/core/internal.js":"66xln","@fullcalendar/core/preact.js":"5k82D","@fullcalendar/daygrid/internal.js":"8f424","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"fjPf8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
parcelHelpers.export(exports, "CALENDARS", ()=>CALENDARS);
const CURRENT_MONTH = new Date().getMonth() + 1;
const CURRENT_YEAR = new Date().getFullYear();
const FORMATTED_MONTH = CURRENT_MONTH < 10 ? "0" + CURRENT_MONTH : CURRENT_MONTH;
const DATA = [
    {
        id: 1,
        title: "Deserunt aliuipsit",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-07T02:00:00`
    },
    {
        id: 2,
        title: "Exercitation quis",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-04T18:30:00`
    },
    {
        id: 3,
        title: "Amet pariatur cillum",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-06T12:00:00`
    },
    {
        id: 4,
        title: "Laborum voluptate",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-06T08:00:00`
    },
    {
        id: 5,
        title: "Fugiat dolor commodo",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-09`
    },
    {
        id: 5,
        title: "Eiusmod adipisicing dolor",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-10`
    },
    {
        id: 6,
        title: "Cilliom dendoom lowers",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-10T10:30:00`
    },
    {
        id: 7,
        title: "Veniam deserunt cupidatat",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-14T07:30:00`
    },
    {
        id: 8,
        title: "Adipisicing pariatur magna",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-19`
    },
    {
        id: 9,
        title: "Fugiat ullamco commodo",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-19`
    },
    {
        id: 10,
        title: "Consectetur",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-19T07:30:00`
    },
    {
        id: 11,
        title: "Reprehenderis",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-23`
    },
    {
        id: 12,
        title: "Consequat adipisicing",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-25`
    },
    {
        id: 13,
        title: "Pariatur esse",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-28`
    },
    {
        id: 14,
        title: "Ipsum dollar",
        start: `${CURRENT_YEAR}-${FORMATTED_MONTH}-28`
    }
];
const CALENDARS = [
    {
        id: 1,
        title: "Work",
        color: "text-blue-500"
    },
    {
        id: 2,
        title: "Contacts",
        color: "text-green-500"
    },
    {
        id: 3,
        title: "Family",
        color: "text-amber-500"
    },
    {
        id: 4,
        title: "Reminders",
        color: "text-purple-500"
    },
    {
        id: 5,
        title: "Tasks",
        color: "text-red-400"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1kZPa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Datepicker", ()=>(0, _datepickerJsDefault.default));
parcelHelpers.export(exports, "DateRangePicker", ()=>(0, _dateRangePickerJsDefault.default));
var _datepickerJs = require("./Datepicker.js");
var _datepickerJsDefault = parcelHelpers.interopDefault(_datepickerJs);
var _dateRangePickerJs = require("./DateRangePicker.js");
var _dateRangePickerJsDefault = parcelHelpers.interopDefault(_dateRangePickerJs);

},{"./Datepicker.js":"5ptSV","./DateRangePicker.js":"F30jS","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5ptSV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./lib/utils.js");
var _dateJs = require("./lib/date.js");
var _dateFormatJs = require("./lib/date-format.js");
var _domJs = require("./lib/dom.js");
var _eventJs = require("./lib/event.js");
var _baseLocalesJs = require("./i18n/base-locales.js");
var _baseLocalesJsDefault = parcelHelpers.interopDefault(_baseLocalesJs);
var _defaultOptionsJs = require("./options/defaultOptions.js");
var _defaultOptionsJsDefault = parcelHelpers.interopDefault(_defaultOptionsJs);
var _processOptionsJs = require("./options/processOptions.js");
var _processOptionsJsDefault = parcelHelpers.interopDefault(_processOptionsJs);
var _shortcutKeysJs = require("./options/shortcutKeys.js");
var _shortcutKeysJsDefault = parcelHelpers.interopDefault(_shortcutKeysJs);
var _pickerJs = require("./picker/Picker.js");
var _pickerJsDefault = parcelHelpers.interopDefault(_pickerJs);
var _functionsJs = require("./events/functions.js");
var _elementListenersJs = require("./events/elementListeners.js");
var _otherListenersJs = require("./events/otherListeners.js");
function stringifyDates(dates, config) {
    return dates.map((dt)=>(0, _dateFormatJs.formatDate)(dt, config.format, config.locale)).join(config.dateDelimiter);
}
// parse input dates and create an array of time values for selection
// returns undefined if there are no valid dates in inputDates
// when origDates (current selection) is passed, the function works to mix
// the input dates into the current selection
function processInputDates(datepicker, inputDates, clear = false) {
    if (inputDates.length === 0) // empty input is considered valid unless origiDates is passed
    return clear ? [] : undefined;
    const { config, dates: origDates, rangeSideIndex } = datepicker;
    const { pickLevel, maxNumberOfDates } = config;
    let newDates = inputDates.reduce((dates, dt)=>{
        let date = (0, _dateFormatJs.parseDate)(dt, config.format, config.locale);
        if (date === undefined) return dates;
        // adjust to 1st of the month/Jan 1st of the year
        // or to the last day of the monh/Dec 31st of the year if the datepicker
        // is the range-end picker of a rangepicker
        date = (0, _dateJs.regularizeDate)(date, pickLevel, rangeSideIndex);
        if ((0, _utilsJs.isInRange)(date, config.minDate, config.maxDate) && !dates.includes(date) && !config.checkDisabled(date, pickLevel) && (pickLevel > 0 || !config.daysOfWeekDisabled.includes(new Date(date).getDay()))) dates.push(date);
        return dates;
    }, []);
    if (newDates.length === 0) return;
    if (config.multidate && !clear) // get the synmetric difference between origDates and newDates
    newDates = newDates.reduce((dates, date)=>{
        if (!origDates.includes(date)) dates.push(date);
        return dates;
    }, origDates.filter((date)=>!newDates.includes(date)));
    // do length check always because user can input multiple dates regardless of the mode
    return maxNumberOfDates && newDates.length > maxNumberOfDates ? newDates.slice(maxNumberOfDates * -1) : newDates;
}
// refresh the UI elements
// modes: 1: input only, 2, picker only, 3 both
function refreshUI(datepicker, mode = 3, quickRender = true, viewDate) {
    const { config, picker, inputField } = datepicker;
    if (mode & 2) {
        const newView = picker.active ? config.pickLevel : config.startView;
        picker.update(viewDate).changeView(newView).render(quickRender);
    }
    if (mode & 1 && inputField) inputField.value = stringifyDates(datepicker.dates, config);
}
function setDate(datepicker, inputDates, options) {
    const config = datepicker.config;
    let { clear, render, autohide, revert, forceRefresh, viewDate } = options;
    if (render === undefined) render = true;
    if (!render) autohide = forceRefresh = false;
    else if (autohide === undefined) autohide = config.autohide;
    viewDate = (0, _dateFormatJs.parseDate)(viewDate, config.format, config.locale);
    const newDates = processInputDates(datepicker, inputDates, clear);
    if (!newDates && !revert) return;
    if (newDates && newDates.toString() !== datepicker.dates.toString()) {
        datepicker.dates = newDates;
        refreshUI(datepicker, render ? 3 : 1, true, viewDate);
        (0, _functionsJs.triggerDatepickerEvent)(datepicker, 'changeDate');
    } else refreshUI(datepicker, forceRefresh ? 3 : 1, true, viewDate);
    if (autohide) datepicker.hide();
}
function getOutputConverter(datepicker, format) {
    return format ? (date)=>(0, _dateFormatJs.formatDate)(date, format, datepicker.config.locale) : (date)=>new Date(date);
}
class Datepicker {
    /**
   * Create a date picker
   * @param  {Element} element - element to bind a date picker
   * @param  {Object} [options] - config options
   * @param  {DateRangePicker} [rangepicker] - DateRangePicker instance the
   * date picker belongs to. Use this only when creating date picker as a part
   * of date range picker
   */ constructor(element, options = {}, rangepicker){
        element.datepicker = this;
        this.element = element;
        this.dates = [];
        // initialize config
        const config = this.config = Object.assign({
            buttonClass: options.buttonClass && String(options.buttonClass) || 'button',
            container: null,
            defaultViewDate: (0, _dateJs.today)(),
            maxDate: undefined,
            minDate: undefined
        }, (0, _processOptionsJsDefault.default)((0, _defaultOptionsJsDefault.default), this));
        // configure by type
        let inputField;
        if (element.tagName === 'INPUT') {
            inputField = this.inputField = element;
            inputField.classList.add('datepicker-input');
            if (options.container) // omit string type check because it doesn't guarantee to avoid errors
            // (invalid selector string causes abend with sytax error)
            config.container = options.container instanceof HTMLElement ? options.container : document.querySelector(options.container);
        } else config.container = element;
        if (rangepicker) {
            // check validiry
            const index = rangepicker.inputs.indexOf(inputField);
            const datepickers = rangepicker.datepickers;
            if (index < 0 || index > 1 || !Array.isArray(datepickers)) throw Error('Invalid rangepicker object.');
            // attach itaelf to the rangepicker here so that processInputDates() can
            // determine if this is the range-end picker of the rangepicker while
            // setting inital values when pickLevel > 0
            datepickers[index] = this;
            this.rangepicker = rangepicker;
            this.rangeSideIndex = index;
        }
        // set up config
        this._options = options;
        Object.assign(config, (0, _processOptionsJsDefault.default)(options, this));
        config.shortcutKeys = (0, _shortcutKeysJsDefault.default)(options.shortcutKeys || {});
        // process initial value
        const initialDates = (0, _utilsJs.stringToArray)(element.value || element.dataset.date, config.dateDelimiter);
        delete element.dataset.date;
        const inputDateValues = processInputDates(this, initialDates);
        if (inputDateValues && inputDateValues.length > 0) this.dates = inputDateValues;
        if (inputField) inputField.value = stringifyDates(this.dates, config);
        // set up picekr element
        const picker = this.picker = new (0, _pickerJsDefault.default)(this);
        const keydownListener = [
            element,
            'keydown',
            (0, _elementListenersJs.onKeydown).bind(null, this)
        ];
        if (inputField) (0, _eventJs.registerListeners)(this, [
            keydownListener,
            [
                inputField,
                'focus',
                (0, _elementListenersJs.onFocus).bind(null, this)
            ],
            [
                inputField,
                'mousedown',
                (0, _elementListenersJs.onMousedown).bind(null, this)
            ],
            [
                inputField,
                'click',
                (0, _elementListenersJs.onClickInput).bind(null, this)
            ],
            [
                inputField,
                'paste',
                (0, _elementListenersJs.onPaste).bind(null, this)
            ],
            // To detect a click on outside, just listening to mousedown is enough,
            // no need to listen to touchstart.
            // Actually, listening to touchstart can be a problem because, while
            // mousedown is fired only on tapping but not on swiping/pinching,
            // touchstart is fired on swiping/pinching as well.
            // (issue #95)
            [
                document,
                'mousedown',
                (0, _otherListenersJs.onClickOutside).bind(null, this)
            ],
            [
                window,
                'resize',
                picker.place.bind(picker)
            ]
        ]);
        else {
            (0, _eventJs.registerListeners)(this, [
                keydownListener
            ]);
            this.show();
        }
    }
    /**
   * Format Date object or time value in given format and language
   * @param  {Date|Number} date - date or time value to format
   * @param  {String|Object} format - format string or object that contains
   * toDisplay() custom formatter, whose signature is
   * - args:
   *   - date: {Date} - Date instance of the date passed to the method
   *   - format: {Object} - the format object passed to the method
   *   - locale: {Object} - locale for the language specified by `lang`
   * - return:
   *     {String} formatted date
   * @param  {String} [lang=en] - language code for the locale to use
   * @return {String} formatted date
   */ static formatDate(date, format, lang) {
        return (0, _dateFormatJs.formatDate)(date, format, lang && (0, _baseLocalesJsDefault.default)[lang] || (0, _baseLocalesJsDefault.default).en);
    }
    /**
   * Parse date string
   * @param  {String|Date|Number} dateStr - date string, Date object or time
   * value to parse
   * @param  {String|Object} format - format string or object that contains
   * toValue() custom parser, whose signature is
   * - args:
   *   - dateStr: {String|Date|Number} - the dateStr passed to the method
   *   - format: {Object} - the format object passed to the method
   *   - locale: {Object} - locale for the language specified by `lang`
   * - return:
   *     {Date|Number} parsed date or its time value
   * @param  {String} [lang=en] - language code for the locale to use
   * @return {Number} time value of parsed date
   */ static parseDate(dateStr, format, lang) {
        return (0, _dateFormatJs.parseDate)(dateStr, format, lang && (0, _baseLocalesJsDefault.default)[lang] || (0, _baseLocalesJsDefault.default).en);
    }
    /**
   * @type {Object} - Installed locales in `[languageCode]: localeObject` format
   * en`:_English (US)_ is pre-installed.
   */ static get locales() {
        return 0, _baseLocalesJsDefault.default;
    }
    /**
   * @type {Boolean} - Whether the picker element is shown. `true` whne shown
   */ get active() {
        return !!(this.picker && this.picker.active);
    }
    /**
   * @type {HTMLDivElement} - DOM object of picker element
   */ get pickerElement() {
        return this.picker ? this.picker.element : undefined;
    }
    /**
   * Set new values to the config options
   * @param {Object} options - config options to update
   */ setOptions(options) {
        const newOptions = (0, _processOptionsJsDefault.default)(options, this);
        Object.assign(this._options, options);
        Object.assign(this.config, newOptions);
        this.picker.setOptions(newOptions);
        refreshUI(this, 3);
    }
    /**
   * Show the picker element
   */ show() {
        if (this.inputField) {
            const { config, inputField } = this;
            if (inputField.disabled || inputField.readOnly && !config.enableOnReadonly) return;
            if (!(0, _domJs.isActiveElement)(inputField) && !config.disableTouchKeyboard) {
                this._showing = true;
                inputField.focus();
                delete this._showing;
            }
        }
        this.picker.show();
    }
    /**
   * Hide the picker element
   * Not available on inline picker
   */ hide() {
        if (!this.inputField) return;
        this.picker.hide();
        this.picker.update().changeView(this.config.startView).render();
    }
    /**
   * Toggle the display of the picker element
   * Not available on inline picker
   *
   * Unlike hide(), the picker does not return to the start view when hiding.
   */ toggle() {
        if (!this.picker.active) this.show();
        else if (this.inputField) this.picker.hide();
    }
    /**
   * Destroy the Datepicker instance
   * @return {Detepicker} - the instance destroyed
   */ destroy() {
        this.hide();
        (0, _eventJs.unregisterListeners)(this);
        this.picker.detach();
        const element = this.element;
        element.classList.remove('datepicker-input');
        delete element.datepicker;
        return this;
    }
    /**
   * Get the selected date(s)
   *
   * The method returns a Date object of selected date by default, and returns
   * an array of selected dates in multidate mode. If format string is passed,
   * it returns date string(s) formatted in given format.
   *
   * @param  {String} [format] - format string to stringify the date(s)
   * @return {Date|String|Date[]|String[]} - selected date(s), or if none is
   * selected, empty array in multidate mode and undefined in sigledate mode
   */ getDate(format) {
        const callback = getOutputConverter(this, format);
        if (this.config.multidate) return this.dates.map(callback);
        if (this.dates.length > 0) return callback(this.dates[0]);
    }
    /**
   * Set selected date(s)
   *
   * In multidate mode, you can pass multiple dates as a series of arguments
   * or an array. (Since each date is parsed individually, the type of the
   * dates doesn't have to be the same.)
   * The given dates are used to toggle the select status of each date. The
   * number of selected dates is kept from exceeding the length set to
   * maxNumberOfDates.
   *
   * With clear: true option, the method can be used to clear the selection
   * and to replace the selection instead of toggling in multidate mode.
   * If the option is passed with no date arguments or an empty dates array,
   * it works as "clear" (clear the selection then set nothing), and if the
   * option is passed with new dates to select, it works as "replace" (clear
   * the selection then set the given dates)
   *
   * When render: false option is used, the method omits re-rendering the
   * picker element. In this case, you need to call refresh() method later in
   * order for the picker element to reflect the changes. The input field is
   * refreshed always regardless of this option.
   *
   * When invalid (unparsable, repeated, disabled or out-of-range) dates are
   * passed, the method ignores them and applies only valid ones. In the case
   * that all the given dates are invalid, which is distinguished from passing
   * no dates, the method considers it as an error and leaves the selection
   * untouched. (The input field also remains untouched unless revert: true
   * option is used.)
   * Replacing the selection with the same date(s) also causes a similar
   * situation. In both cases, the method does not refresh the picker element
   * unless forceRefresh: true option is used.
   *
   * If viewDate option is used, the method changes the focused date to the
   * specified date instead of the last item of the selection.
   *
   * @param {...(Date|Number|String)|Array} [dates] - Date strings, Date
   * objects, time values or mix of those for new selection
   * @param {Object} [options] - function options
   * - clear: {boolean} - Whether to clear the existing selection
   *     defualt: false
   * - render: {boolean} - Whether to re-render the picker element
   *     default: true
   * - autohide: {boolean} - Whether to hide the picker element after re-render
   *     Ignored when used with render: false
   *     default: config.autohide
   * - revert: {boolean} - Whether to refresh the input field when all the
   *     passed dates are invalid
   *     default: false
   * - forceRefresh: {boolean} - Whether to refresh the picker element when
   *     passed dates don't change the existing selection
   *     default: false
   * - viewDate: {Date|Number|String} - Date to be focused after setiing date(s)
   *     default: The last item of the resulting selection, or defaultViewDate
   *     config option if none is selected
   */ setDate(...args) {
        const dates = [
            ...args
        ];
        const opts = {};
        const lastArg = (0, _utilsJs.lastItemOf)(args);
        if (lastArg && typeof lastArg === 'object' && !Array.isArray(lastArg) && !(lastArg instanceof Date)) Object.assign(opts, dates.pop());
        const inputDates = Array.isArray(dates[0]) ? dates[0] : dates;
        setDate(this, inputDates, opts);
    }
    /**
   * Update the selected date(s) with input field's value
   * Not available on inline picker
   *
   * The input field will be refreshed with properly formatted date string.
   *
   * In the case that all the entered dates are invalid (unparsable, repeated,
   * disabled or out-of-range), which is distinguished from empty input field,
   * the method leaves the input field untouched as well as the selection by
   * default. If revert: true option is used in this case, the input field is
   * refreshed with the existing selection.
   * The method also doesn't refresh the picker element in this case and when
   * the entered dates are the same as the existing selection. If
   * forceRefresh: true option is used, the picker element is refreshed in
   * these cases too.
   *
   * @param  {Object} [options] - function options
   * - autohide: {boolean} - whether to hide the picker element after refresh
   *     default: false
   * - revert: {boolean} - Whether to refresh the input field when all the
   *     passed dates are invalid
   *     default: false
   * - forceRefresh: {boolean} - Whether to refresh the picer element when
   *     input field's value doesn't change the existing selection
   *     default: false
   */ update(options) {
        if (!this.inputField) return;
        const opts = Object.assign(options || {}, {
            clear: true,
            render: true,
            viewDate: undefined
        });
        const inputDates = (0, _utilsJs.stringToArray)(this.inputField.value, this.config.dateDelimiter);
        setDate(this, inputDates, opts);
    }
    /**
   * Get the focused date
   *
   * The method returns a Date object of focused date by default. If format
   * string is passed, it returns date string formatted in given format.
   *
   * @param  {String} [format] - format string to stringify the date
   * @return {Date|String} - focused date (viewDate)
   */ getFocusedDate(format) {
        return getOutputConverter(this, format)(this.picker.viewDate);
    }
    /**
   * Set focused date
   *
   * By default, the method updates the focus on the view shown at the time,
   * or the one set to the startView config option if the picker is hidden.
   * When resetView: true is passed, the view displayed is changed to the
   * pickLevel config option's if the picker is shown.
   *
   * @param {Date|Number|String} viewDate - date string, Date object, time
   * values of the date to focus
   * @param {Boolean} [resetView] - whether to change the view to pickLevel
   * config option's when the picker is shown. Ignored when the picker is
   * hidden
   */ setFocusedDate(viewDate, resetView = false) {
        const { config, picker, active, rangeSideIndex } = this;
        const pickLevel = config.pickLevel;
        const newViewDate = (0, _dateFormatJs.parseDate)(viewDate, config.format, config.locale);
        if (newViewDate === undefined) return;
        picker.changeFocus((0, _dateJs.regularizeDate)(newViewDate, pickLevel, rangeSideIndex));
        if (active && resetView) picker.changeView(pickLevel);
        picker.render();
    }
    /**
   * Refresh the picker element and the associated input field
   * @param {String} [target] - target item when refreshing one item only
   * 'picker' or 'input'
   * @param {Boolean} [forceRender] - whether to re-render the picker element
   * regardless of its state instead of optimized refresh
   */ refresh(target, forceRender = false) {
        if (target && typeof target !== 'string') {
            forceRender = target;
            target = undefined;
        }
        let mode;
        if (target === 'picker') mode = 2;
        else if (target === 'input') mode = 1;
        else mode = 3;
        refreshUI(this, mode, !forceRender);
    }
    /**
   * Enter edit mode
   * Not available on inline picker or when the picker element is hidden
   */ enterEditMode() {
        const inputField = this.inputField;
        if (!inputField || inputField.readOnly || !this.picker.active || this.editMode) return;
        this.editMode = true;
        inputField.classList.add('in-edit');
    }
    /**
   * Exit from edit mode
   * Not available on inline picker
   * @param  {Object} [options] - function options
   * - update: {boolean} - whether to call update() after exiting
   *     If false, input field is revert to the existing selection
   *     default: false
   */ exitEditMode(options) {
        if (!this.inputField || !this.editMode) return;
        const opts = Object.assign({
            update: false
        }, options);
        delete this.editMode;
        this.inputField.classList.remove('in-edit');
        if (opts.update) this.update(opts);
    }
}
exports.default = Datepicker;

},{"./lib/utils.js":"6mU3y","./lib/date.js":"8YjGl","./lib/date-format.js":"aydFo","./lib/dom.js":"fhH13","./lib/event.js":"iAmco","./i18n/base-locales.js":"3jvGx","./options/defaultOptions.js":"dl7rs","./options/processOptions.js":"kivuQ","./options/shortcutKeys.js":"9QV7q","./picker/Picker.js":"1dJVn","./events/functions.js":"8uzge","./events/elementListeners.js":"4IkNX","./events/otherListeners.js":"i4Soe","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"6mU3y":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lastItemOf", ()=>lastItemOf);
// push only the items not included in the array
parcelHelpers.export(exports, "pushUnique", ()=>pushUnique);
parcelHelpers.export(exports, "stringToArray", ()=>stringToArray);
parcelHelpers.export(exports, "isInRange", ()=>isInRange);
parcelHelpers.export(exports, "limitToRange", ()=>limitToRange);
parcelHelpers.export(exports, "createTagRepeat", ()=>createTagRepeat);
// Remove the spacing surrounding tags for HTML parser not to create text nodes
// before/after elements
parcelHelpers.export(exports, "optimizeTemplateHTML", ()=>optimizeTemplateHTML);
function lastItemOf(arr) {
    return arr[arr.length - 1];
}
function pushUnique(arr, ...items) {
    items.forEach((item)=>{
        if (arr.includes(item)) return;
        arr.push(item);
    });
    return arr;
}
function stringToArray(str, separator) {
    // convert empty string to an empty array
    return str ? str.split(separator) : [];
}
function isInRange(testVal, min, max) {
    const minOK = min === undefined || testVal >= min;
    const maxOK = max === undefined || testVal <= max;
    return minOK && maxOK;
}
function limitToRange(val, min, max) {
    if (val < min) return min;
    if (val > max) return max;
    return val;
}
function createTagRepeat(tagName, repeat, attributes = {}, index = 0, html = '') {
    const openTagSrc = Object.keys(attributes).reduce((src, attr)=>{
        let val = attributes[attr];
        if (typeof val === 'function') val = val(index);
        return `${src} ${attr}="${val}"`;
    }, tagName);
    html += `<${openTagSrc}></${tagName}>`;
    const next = index + 1;
    return next < repeat ? createTagRepeat(tagName, repeat, attributes, next, html) : html;
}
function optimizeTemplateHTML(html) {
    return html.replace(/>\s+/g, '>').replace(/\s+</, '<');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"8YjGl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stripTime", ()=>stripTime);
parcelHelpers.export(exports, "today", ()=>today);
// Get the time value of the start of given date or year, month and day
parcelHelpers.export(exports, "dateValue", ()=>dateValue);
parcelHelpers.export(exports, "addDays", ()=>addDays);
parcelHelpers.export(exports, "addWeeks", ()=>addWeeks);
parcelHelpers.export(exports, "addMonths", ()=>addMonths);
parcelHelpers.export(exports, "addYears", ()=>addYears);
// Get the date of the specified day of the week of given base date
parcelHelpers.export(exports, "dayOfTheWeekOf", ()=>dayOfTheWeekOf);
// Get the ISO week number of a date
parcelHelpers.export(exports, "getIsoWeek", ()=>getIsoWeek);
// Get the Western traditional week number of a date
parcelHelpers.export(exports, "getWesternTradWeek", ()=>getWesternTradWeek);
// Get the Middle Eastern week number of a date
parcelHelpers.export(exports, "getMidEasternWeek", ()=>getMidEasternWeek);
// Get the start year of the period of years that includes given date
// years: length of the year period
parcelHelpers.export(exports, "startOfYearPeriod", ()=>startOfYearPeriod);
// Convert date to the first/last date of the month/year of the date
parcelHelpers.export(exports, "regularizeDate", ()=>regularizeDate);
function stripTime(timeValue) {
    return new Date(timeValue).setHours(0, 0, 0, 0);
}
function today() {
    return new Date().setHours(0, 0, 0, 0);
}
function dateValue(...args) {
    switch(args.length){
        case 0:
            return today();
        case 1:
            return stripTime(args[0]);
    }
    // use setFullYear() to keep 2-digit year from being mapped to 1900-1999
    const newDate = new Date(0);
    newDate.setFullYear(...args);
    return newDate.setHours(0, 0, 0, 0);
}
function addDays(date, amount) {
    const newDate = new Date(date);
    return newDate.setDate(newDate.getDate() + amount);
}
function addWeeks(date, amount) {
    return addDays(date, amount * 7);
}
function addMonths(date, amount) {
    // If the day of the date is not in the new month, the last day of the new
    // month will be returned. e.g. Jan 31 + 1 month → Feb 28 (not Mar 03)
    const newDate = new Date(date);
    const monthsToSet = newDate.getMonth() + amount;
    let expectedMonth = monthsToSet % 12;
    if (expectedMonth < 0) expectedMonth += 12;
    const time = newDate.setMonth(monthsToSet);
    return newDate.getMonth() !== expectedMonth ? newDate.setDate(0) : time;
}
function addYears(date, amount) {
    // If the date is Feb 29 and the new year is not a leap year, Feb 28 of the
    // new year will be returned.
    const newDate = new Date(date);
    const expectedMonth = newDate.getMonth();
    const time = newDate.setFullYear(newDate.getFullYear() + amount);
    return expectedMonth === 1 && newDate.getMonth() === 2 ? newDate.setDate(0) : time;
}
// Calculate the distance bettwen 2 days of the week
function dayDiff(day, from) {
    return (day - from + 7) % 7;
}
function dayOfTheWeekOf(baseDate, dayOfWeek, weekStart = 0) {
    const baseDay = new Date(baseDate).getDay();
    return addDays(baseDate, dayDiff(dayOfWeek, weekStart) - dayDiff(baseDay, weekStart));
}
function calcWeekNum(dayOfTheWeek, sameDayOfFirstWeek) {
    return Math.round((dayOfTheWeek - sameDayOfFirstWeek) / 604800000) + 1;
}
function getIsoWeek(date) {
    // - Start of ISO week is Monday
    // - Use Thursday for culculation because the first Thursday of ISO week is
    //   always in January
    const thuOfTheWeek = dayOfTheWeekOf(date, 4, 1);
    // - Week 1 in ISO week is the week including Jan 04
    // - Use the Thu of given date's week (instead of given date itself) to
    //   calculate week 1 of the year so that Jan 01 - 03 won't be miscalculated
    //   as week 0 when Jan 04 is Mon - Wed
    const firstThu = dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0, 4), 4, 1);
    // return Math.round((thuOfTheWeek - firstThu) / 604800000) + 1;
    return calcWeekNum(thuOfTheWeek, firstThu);
}
// Calculate week number in traditional week number system
// @see https://en.wikipedia.org/wiki/Week#Other_week_numbering_systems
function calcTraditionalWeekNumber(date, weekStart) {
    // - Week 1 of traditional week is the week including the Jan 01
    // - Use Jan 01 of given date's year to calculate the start of week 1
    const startOfFirstWeek = dayOfTheWeekOf(new Date(date).setMonth(0, 1), weekStart, weekStart);
    const startOfTheWeek = dayOfTheWeekOf(date, weekStart, weekStart);
    const weekNum = calcWeekNum(startOfTheWeek, startOfFirstWeek);
    if (weekNum < 53) return weekNum;
    // If the 53rd week includes Jan 01, it's actually next year's week 1
    const weekOneOfNextYear = dayOfTheWeekOf(new Date(date).setDate(32), weekStart, weekStart);
    return startOfTheWeek === weekOneOfNextYear ? 1 : weekNum;
}
function getWesternTradWeek(date) {
    // Start of Western traditionl week is Sunday
    return calcTraditionalWeekNumber(date, 0);
}
function getMidEasternWeek(date) {
    // Start of Middle Eastern week is Saturday
    return calcTraditionalWeekNumber(date, 6);
}
function startOfYearPeriod(date, years) {
    /* @see https://en.wikipedia.org/wiki/Year_zero#ISO_8601 */ const year = new Date(date).getFullYear();
    return Math.floor(year / years) * years;
}
function regularizeDate(date, timeSpan, useLastDate) {
    if (timeSpan !== 1 && timeSpan !== 2) return date;
    const newDate = new Date(date);
    if (timeSpan === 1) useLastDate ? newDate.setMonth(newDate.getMonth() + 1, 0) : newDate.setDate(1);
    else useLastDate ? newDate.setFullYear(newDate.getFullYear() + 1, 0, 0) : newDate.setMonth(0, 1);
    return newDate.setHours(0, 0, 0, 0);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"aydFo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reFormatTokens", ()=>reFormatTokens);
parcelHelpers.export(exports, "reNonDateParts", ()=>reNonDateParts);
parcelHelpers.export(exports, "parseDate", ()=>parseDate);
parcelHelpers.export(exports, "formatDate", ()=>formatDate);
var _dateJs = require("./date.js");
var _utilsJs = require("./utils.js");
const reFormatTokens = /dd?|DD?|mm?|MM?|yy?(?:yy)?/;
const reNonDateParts = /[\s!-/:-@[-`{-~年月日]+/;
// cache for persed formats
let knownFormats = {};
// parse funtions for date parts
const parseFns = {
    y (date, year) {
        return new Date(date).setFullYear(parseInt(year, 10));
    },
    m (date, month, locale) {
        const newDate = new Date(date);
        let monthIndex = parseInt(month, 10) - 1;
        if (isNaN(monthIndex)) {
            if (!month) return NaN;
            const monthName = month.toLowerCase();
            const compareNames = (name)=>name.toLowerCase().startsWith(monthName);
            // compare with both short and full names because some locales have periods
            // in the short names (not equal to the first X letters of the full names)
            monthIndex = locale.monthsShort.findIndex(compareNames);
            if (monthIndex < 0) monthIndex = locale.months.findIndex(compareNames);
            if (monthIndex < 0) return NaN;
        }
        newDate.setMonth(monthIndex);
        return newDate.getMonth() !== normalizeMonth(monthIndex) ? newDate.setDate(0) : newDate.getTime();
    },
    d (date, day) {
        return new Date(date).setDate(parseInt(day, 10));
    }
};
// format functions for date parts
const formatFns = {
    d (date) {
        return date.getDate();
    },
    dd (date) {
        return padZero(date.getDate(), 2);
    },
    D (date, locale) {
        return locale.daysShort[date.getDay()];
    },
    DD (date, locale) {
        return locale.days[date.getDay()];
    },
    m (date) {
        return date.getMonth() + 1;
    },
    mm (date) {
        return padZero(date.getMonth() + 1, 2);
    },
    M (date, locale) {
        return locale.monthsShort[date.getMonth()];
    },
    MM (date, locale) {
        return locale.months[date.getMonth()];
    },
    y (date) {
        return date.getFullYear();
    },
    yy (date) {
        return padZero(date.getFullYear(), 2).slice(-2);
    },
    yyyy (date) {
        return padZero(date.getFullYear(), 4);
    }
};
// get month index in normal range (0 - 11) from any number
function normalizeMonth(monthIndex) {
    return monthIndex > -1 ? monthIndex % 12 : normalizeMonth(monthIndex + 12);
}
function padZero(num, length) {
    return num.toString().padStart(length, '0');
}
function parseFormatString(format) {
    if (typeof format !== 'string') throw new Error("Invalid date format.");
    if (format in knownFormats) return knownFormats[format];
    // sprit the format string into parts and seprators
    const separators = format.split(reFormatTokens);
    const parts = format.match(new RegExp(reFormatTokens, 'g'));
    if (separators.length === 0 || !parts) throw new Error("Invalid date format.");
    // collect format functions used in the format
    const partFormatters = parts.map((token)=>formatFns[token]);
    // collect parse function keys used in the format
    // iterate over parseFns' keys in order to keep the order of the keys.
    const partParserKeys = Object.keys(parseFns).reduce((keys, key)=>{
        const token = parts.find((part)=>part[0] !== 'D' && part[0].toLowerCase() === key);
        if (token) keys.push(key);
        return keys;
    }, []);
    return knownFormats[format] = {
        parser (dateStr, locale) {
            const dateParts = dateStr.split(reNonDateParts).reduce((dtParts, part, index)=>{
                if (part.length > 0 && parts[index]) {
                    const token = parts[index][0];
                    if (token === 'M') dtParts.m = part;
                    else if (token !== 'D') dtParts[token] = part;
                }
                return dtParts;
            }, {});
            // iterate over partParserkeys so that the parsing is made in the oder
            // of year, month and day to prevent the day parser from correcting last
            // day of month wrongly
            return partParserKeys.reduce((origDate, key)=>{
                const newDate = parseFns[key](origDate, dateParts[key], locale);
                // ingnore the part failed to parse
                return isNaN(newDate) ? origDate : newDate;
            }, (0, _dateJs.today)());
        },
        formatter (date, locale) {
            let dateStr = partFormatters.reduce((str, fn, index)=>{
                return str += `${separators[index]}${fn(date, locale)}`;
            }, '');
            // separators' length is always parts' length + 1,
            return dateStr += (0, _utilsJs.lastItemOf)(separators);
        }
    };
}
function parseDate(dateStr, format, locale) {
    if (dateStr instanceof Date || typeof dateStr === 'number') {
        const date = (0, _dateJs.stripTime)(dateStr);
        return isNaN(date) ? undefined : date;
    }
    if (!dateStr) return undefined;
    if (dateStr === 'today') return (0, _dateJs.today)();
    if (format && format.toValue) {
        const date = format.toValue(dateStr, format, locale);
        return isNaN(date) ? undefined : (0, _dateJs.stripTime)(date);
    }
    return parseFormatString(format).parser(dateStr, locale);
}
function formatDate(date, format, locale) {
    if (isNaN(date) || !date && date !== 0) return '';
    const dateObj = typeof date === 'number' ? new Date(date) : date;
    if (format.toDisplay) return format.toDisplay(dateObj, format, locale);
    return parseFormatString(format).formatter(dateObj, locale);
}

},{"./date.js":"8YjGl","./utils.js":"6mU3y","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"fhH13":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseHTML", ()=>parseHTML);
parcelHelpers.export(exports, "getParent", ()=>getParent);
parcelHelpers.export(exports, "isActiveElement", ()=>isActiveElement);
// equivalent to jQuery's :visble
parcelHelpers.export(exports, "isVisible", ()=>isVisible);
parcelHelpers.export(exports, "hideElement", ()=>hideElement);
parcelHelpers.export(exports, "showElement", ()=>showElement);
parcelHelpers.export(exports, "emptyChildNodes", ()=>emptyChildNodes);
parcelHelpers.export(exports, "replaceChildNodes", ()=>replaceChildNodes);
const range = document.createRange();
function parseHTML(html) {
    return range.createContextualFragment(html);
}
function getParent(el) {
    return el.parentElement || (el.parentNode instanceof ShadowRoot ? el.parentNode.host : undefined);
}
function isActiveElement(el) {
    return el.getRootNode().activeElement === el;
}
function isVisible(el) {
    return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
}
function hideElement(el) {
    if (el.style.display === 'none') return;
    // back up the existing display setting in data-style-display
    if (el.style.display) el.dataset.styleDisplay = el.style.display;
    el.style.display = 'none';
}
function showElement(el) {
    if (el.style.display !== 'none') return;
    if (el.dataset.styleDisplay) {
        // restore backed-up dispay property
        el.style.display = el.dataset.styleDisplay;
        delete el.dataset.styleDisplay;
    } else el.style.display = '';
}
function emptyChildNodes(el) {
    if (el.firstChild) {
        el.removeChild(el.firstChild);
        emptyChildNodes(el);
    }
}
function replaceChildNodes(el, newChildNodes) {
    emptyChildNodes(el);
    if (newChildNodes instanceof DocumentFragment) el.appendChild(newChildNodes);
    else if (typeof newChildNodes === 'string') el.appendChild(parseHTML(newChildNodes));
    else if (typeof newChildNodes.forEach === 'function') newChildNodes.forEach((node)=>{
        el.appendChild(node);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"iAmco":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Register event listeners to a key object
// listeners: array of listener definitions;
//   - each definition must be a flat array of event target and the arguments
//     used to call addEventListener() on the target
parcelHelpers.export(exports, "registerListeners", ()=>registerListeners);
parcelHelpers.export(exports, "unregisterListeners", ()=>unregisterListeners);
// Search for the actual target of a delegated event
parcelHelpers.export(exports, "findElementInEventPath", ()=>findElementInEventPath);
const listenerRegistry = new WeakMap();
const { addEventListener, removeEventListener } = EventTarget.prototype;
function registerListeners(keyObj, listeners) {
    let registered = listenerRegistry.get(keyObj);
    if (!registered) {
        registered = [];
        listenerRegistry.set(keyObj, registered);
    }
    listeners.forEach((listener)=>{
        addEventListener.call(...listener);
        registered.push(listener);
    });
}
function unregisterListeners(keyObj) {
    let listeners = listenerRegistry.get(keyObj);
    if (!listeners) return;
    listeners.forEach((listener)=>{
        removeEventListener.call(...listener);
    });
    listenerRegistry.delete(keyObj);
}
// Event.composedPath() polyfill for Edge
// based on https://gist.github.com/kleinfreund/e9787d73776c0e3750dcfcdc89f100ec
if (!Event.prototype.composedPath) {
    const getComposedPath = (node, path = [])=>{
        path.push(node);
        let parent;
        if (node.parentNode) parent = node.parentNode;
        else if (node.host) parent = node.host;
        else if (node.defaultView) parent = node.defaultView;
        return parent ? getComposedPath(parent, path) : path;
    };
    Event.prototype.composedPath = function() {
        return getComposedPath(this.target);
    };
}
function findFromPath(path, criteria, currentTarget) {
    const [node, ...rest] = path;
    if (criteria(node)) return node;
    if (node === currentTarget || node.tagName === 'HTML' || rest.length === 0) // stop when reaching currentTarget or <html>
    return;
    return findFromPath(rest, criteria, currentTarget);
}
function findElementInEventPath(ev, selector) {
    const criteria = typeof selector === 'function' ? selector : (el)=>el instanceof Element && el.matches(selector);
    return findFromPath(ev.composedPath(), criteria, ev.currentTarget);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3jvGx":[function(require,module,exports,__globalThis) {
// default locales
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    en: {
        days: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
        ],
        daysShort: [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
        ],
        daysMin: [
            "Su",
            "Mo",
            "Tu",
            "We",
            "Th",
            "Fr",
            "Sa"
        ],
        months: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        ],
        monthsShort: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ],
        today: "Today",
        clear: "Clear",
        titleFormat: "MM y"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dl7rs":[function(require,module,exports,__globalThis) {
// config options updatable by setOptions() and their default values
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    autohide: false,
    beforeShowDay: null,
    beforeShowDecade: null,
    beforeShowMonth: null,
    beforeShowYear: null,
    clearButton: false,
    dateDelimiter: ',',
    datesDisabled: [],
    daysOfWeekDisabled: [],
    daysOfWeekHighlighted: [],
    defaultViewDate: undefined,
    disableTouchKeyboard: false,
    enableOnReadonly: true,
    format: 'mm/dd/yyyy',
    language: 'en',
    maxDate: null,
    maxNumberOfDates: 1,
    maxView: 3,
    minDate: null,
    nextArrow: "\xbb",
    orientation: 'auto',
    pickLevel: 0,
    prevArrow: "\xab",
    showDaysOfWeek: true,
    showOnClick: true,
    showOnFocus: true,
    startView: 0,
    title: '',
    todayButton: false,
    todayButtonMode: 0,
    todayHighlight: false,
    updateOnBlur: true,
    weekNumbers: 0,
    weekStart: 0
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"kivuQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>processOptions);
var _utilsJs = require("../lib/utils.js");
var _dateJs = require("../lib/date.js");
var _dateFormatJs = require("../lib/date-format.js");
var _domJs = require("../lib/dom.js");
var _defaultOptionsJs = require("./defaultOptions.js");
var _defaultOptionsJsDefault = parcelHelpers.interopDefault(_defaultOptionsJs);
const { language: defaultLang, format: defaultFormat, weekStart: defaultWeekStart } = (0, _defaultOptionsJsDefault.default);
// Reducer function to filter out invalid day-of-week from the input
function sanitizeDOW(dow, day) {
    return dow.length < 6 && day >= 0 && day < 7 ? (0, _utilsJs.pushUnique)(dow, day) : dow;
}
function determineGetWeekMethod(numberingMode, weekStart) {
    const methodId = numberingMode === 4 ? weekStart === 6 ? 3 : !weekStart + 1 : numberingMode;
    switch(methodId){
        case 1:
            return 0, _dateJs.getIsoWeek;
        case 2:
            return 0, _dateJs.getWesternTradWeek;
        case 3:
            return 0, _dateJs.getMidEasternWeek;
    }
}
function updateWeekStart(newValue, config, weekNumbers) {
    config.weekStart = newValue;
    config.weekEnd = (newValue + 6) % 7;
    if (weekNumbers === 4) config.getWeekNumber = determineGetWeekMethod(4, newValue);
    return newValue;
}
// validate input date. if invalid, fallback to the original value
function validateDate(value, format, locale, origValue) {
    const date = (0, _dateFormatJs.parseDate)(value, format, locale);
    return date !== undefined ? date : origValue;
}
// Validate viewId. if invalid, fallback to the original value
function validateViewId(value, origValue, max = 3) {
    const viewId = parseInt(value, 10);
    return viewId >= 0 && viewId <= max ? viewId : origValue;
}
function replaceOptions(options, from, to, convert) {
    if (from in options) {
        if (!(to in options)) options[to] = convert ? convert(options[from]) : options[from];
        delete options[from];
    }
}
function processOptions(options, datepicker) {
    const inOpts = Object.assign({}, options);
    const config = {};
    const locales = datepicker.constructor.locales;
    const rangeEnd = !!datepicker.rangeSideIndex;
    let { datesDisabled, format, language, locale, maxDate, maxView, minDate, pickLevel, startView, weekNumbers, weekStart } = datepicker.config || {};
    // for backword compatibility
    replaceOptions(inOpts, 'calendarWeeks', 'weekNumbers', (val)=>val ? 1 : 0);
    replaceOptions(inOpts, 'clearBtn', 'clearButton');
    replaceOptions(inOpts, 'todayBtn', 'todayButton');
    replaceOptions(inOpts, 'todayBtnMode', 'todayButtonMode');
    if (inOpts.language) {
        let lang;
        if (inOpts.language !== language) {
            if (locales[inOpts.language]) lang = inOpts.language;
            else {
                // Check if langauge + region tag can fallback to the one without
                // region (e.g. fr-CA → fr)
                lang = inOpts.language.split('-')[0];
                if (!locales[lang]) lang = false;
            }
        }
        delete inOpts.language;
        if (lang) {
            language = config.language = lang;
            // update locale as well when updating language
            const origLocale = locale || locales[defaultLang];
            // use default language's properties for the fallback
            locale = Object.assign({
                format: defaultFormat,
                weekStart: defaultWeekStart
            }, locales[defaultLang]);
            if (language !== defaultLang) Object.assign(locale, locales[language]);
            config.locale = locale;
            // if format and/or weekStart are the same as old locale's defaults,
            // update them to new locale's defaults
            if (format === origLocale.format) format = config.format = locale.format;
            if (weekStart === origLocale.weekStart) weekStart = updateWeekStart(locale.weekStart, config, weekNumbers);
        }
    }
    if (inOpts.format) {
        const hasToDisplay = typeof inOpts.format.toDisplay === 'function';
        const hasToValue = typeof inOpts.format.toValue === 'function';
        const validFormatString = (0, _dateFormatJs.reFormatTokens).test(inOpts.format);
        if (hasToDisplay && hasToValue || validFormatString) format = config.format = inOpts.format;
        delete inOpts.format;
    }
    //*** pick level ***//
    let newPickLevel = pickLevel;
    if ('pickLevel' in inOpts) {
        newPickLevel = validateViewId(inOpts.pickLevel, pickLevel, 2);
        delete inOpts.pickLevel;
    }
    if (newPickLevel !== pickLevel) {
        if (newPickLevel > pickLevel) {
            // complement current minDate/madDate so that the existing range will be
            // expanded to fit the new level later
            if (!('minDate' in inOpts)) inOpts.minDate = minDate;
            if (!('maxDate' in inOpts)) inOpts.maxDate = maxDate;
        }
        // complement datesDisabled so that it will be reset later
        if (datesDisabled && !inOpts.datesDisabled) inOpts.datesDisabled = [];
        pickLevel = config.pickLevel = newPickLevel;
    }
    //*** dates ***//
    // while min and maxDate for "no limit" in the options are better to be null
    // (especially when updating), the ones in the config have to be undefined
    // because null is treated as 0 (= unix epoch) when comparing with time value
    let minDt = minDate;
    let maxDt = maxDate;
    if ('minDate' in inOpts) {
        const defaultMinDt = (0, _dateJs.dateValue)(0, 0, 1);
        minDt = inOpts.minDate === null ? defaultMinDt // set 0000-01-01 to prevent negative values for year
         : validateDate(inOpts.minDate, format, locale, minDt);
        if (minDt !== defaultMinDt) minDt = (0, _dateJs.regularizeDate)(minDt, pickLevel, false);
        delete inOpts.minDate;
    }
    if ('maxDate' in inOpts) {
        maxDt = inOpts.maxDate === null ? undefined : validateDate(inOpts.maxDate, format, locale, maxDt);
        if (maxDt !== undefined) maxDt = (0, _dateJs.regularizeDate)(maxDt, pickLevel, true);
        delete inOpts.maxDate;
    }
    if (maxDt < minDt) {
        minDate = config.minDate = maxDt;
        maxDate = config.maxDate = minDt;
    } else {
        if (minDate !== minDt) minDate = config.minDate = minDt;
        if (maxDate !== maxDt) maxDate = config.maxDate = maxDt;
    }
    if (inOpts.datesDisabled) {
        const dtsDisabled = inOpts.datesDisabled;
        if (typeof dtsDisabled === 'function') {
            config.datesDisabled = null;
            config.checkDisabled = (timeValue, viewId)=>dtsDisabled(new Date(timeValue), viewId, rangeEnd);
        } else {
            const disabled = config.datesDisabled = dtsDisabled.reduce((dates, dt)=>{
                const date = (0, _dateFormatJs.parseDate)(dt, format, locale);
                return date !== undefined ? (0, _utilsJs.pushUnique)(dates, (0, _dateJs.regularizeDate)(date, pickLevel, rangeEnd)) : dates;
            }, []);
            config.checkDisabled = (timeValue)=>disabled.includes(timeValue);
        }
        delete inOpts.datesDisabled;
    }
    if ('defaultViewDate' in inOpts) {
        const viewDate = (0, _dateFormatJs.parseDate)(inOpts.defaultViewDate, format, locale);
        if (viewDate !== undefined) config.defaultViewDate = viewDate;
        delete inOpts.defaultViewDate;
    }
    //*** days of week ***//
    if ('weekStart' in inOpts) {
        const wkStart = Number(inOpts.weekStart) % 7;
        if (!isNaN(wkStart)) weekStart = updateWeekStart(wkStart, config, weekNumbers);
        delete inOpts.weekStart;
    }
    if (inOpts.daysOfWeekDisabled) {
        config.daysOfWeekDisabled = inOpts.daysOfWeekDisabled.reduce(sanitizeDOW, []);
        delete inOpts.daysOfWeekDisabled;
    }
    if (inOpts.daysOfWeekHighlighted) {
        config.daysOfWeekHighlighted = inOpts.daysOfWeekHighlighted.reduce(sanitizeDOW, []);
        delete inOpts.daysOfWeekHighlighted;
    }
    //*** week numbers ***//
    if ('weekNumbers' in inOpts) {
        let method = inOpts.weekNumbers;
        if (method) {
            const getWeekNumber = typeof method === 'function' ? (timeValue, startOfWeek)=>method(new Date(timeValue), startOfWeek) : determineGetWeekMethod(method = parseInt(method, 10), weekStart);
            if (getWeekNumber) {
                weekNumbers = config.weekNumbers = method;
                config.getWeekNumber = getWeekNumber;
            }
        } else {
            weekNumbers = config.weekNumbers = 0;
            config.getWeekNumber = null;
        }
        delete inOpts.weekNumbers;
    }
    //*** multi date ***//
    if ('maxNumberOfDates' in inOpts) {
        const maxNumberOfDates = parseInt(inOpts.maxNumberOfDates, 10);
        if (maxNumberOfDates >= 0) {
            config.maxNumberOfDates = maxNumberOfDates;
            config.multidate = maxNumberOfDates !== 1;
        }
        delete inOpts.maxNumberOfDates;
    }
    if (inOpts.dateDelimiter) {
        config.dateDelimiter = String(inOpts.dateDelimiter);
        delete inOpts.dateDelimiter;
    }
    //*** view ***//
    let newMaxView = maxView;
    if ('maxView' in inOpts) {
        newMaxView = validateViewId(inOpts.maxView, maxView);
        delete inOpts.maxView;
    }
    // ensure max view >= pick level
    newMaxView = pickLevel > newMaxView ? pickLevel : newMaxView;
    if (newMaxView !== maxView) maxView = config.maxView = newMaxView;
    let newStartView = startView;
    if ('startView' in inOpts) {
        newStartView = validateViewId(inOpts.startView, newStartView);
        delete inOpts.startView;
    }
    // ensure pick level <= start view <= max view
    if (newStartView < pickLevel) newStartView = pickLevel;
    else if (newStartView > maxView) newStartView = maxView;
    if (newStartView !== startView) config.startView = newStartView;
    //*** template ***//
    if (inOpts.prevArrow) {
        const prevArrow = (0, _domJs.parseHTML)(inOpts.prevArrow);
        if (prevArrow.childNodes.length > 0) config.prevArrow = prevArrow.childNodes;
        delete inOpts.prevArrow;
    }
    if (inOpts.nextArrow) {
        const nextArrow = (0, _domJs.parseHTML)(inOpts.nextArrow);
        if (nextArrow.childNodes.length > 0) config.nextArrow = nextArrow.childNodes;
        delete inOpts.nextArrow;
    }
    //*** misc ***//
    if ('disableTouchKeyboard' in inOpts) {
        config.disableTouchKeyboard = 'ontouchstart' in document && !!inOpts.disableTouchKeyboard;
        delete inOpts.disableTouchKeyboard;
    }
    if (inOpts.orientation) {
        const orientation = inOpts.orientation.toLowerCase().split(/\s+/g);
        config.orientation = {
            x: orientation.find((x)=>x === 'left' || x === 'right') || 'auto',
            y: orientation.find((y)=>y === 'top' || y === 'bottom') || 'auto'
        };
        delete inOpts.orientation;
    }
    if ('todayButtonMode' in inOpts) {
        switch(inOpts.todayButtonMode){
            case 0:
            case 1:
                config.todayButtonMode = inOpts.todayButtonMode;
        }
        delete inOpts.todayButtonMode;
    }
    //*** copy the rest ***//
    Object.entries(inOpts).forEach(([key, value])=>{
        if (value !== undefined && key in (0, _defaultOptionsJsDefault.default)) config[key] = value;
    });
    return config;
}

},{"../lib/utils.js":"6mU3y","../lib/date.js":"8YjGl","../lib/date-format.js":"aydFo","../lib/dom.js":"fhH13","./defaultOptions.js":"dl7rs","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9QV7q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createShortcutKeyConfig);
const defaultShortcutKeys = {
    show: {
        key: 'ArrowDown'
    },
    hide: null,
    toggle: {
        key: 'Escape'
    },
    prevButton: {
        key: 'ArrowLeft',
        ctrlOrMetaKey: true
    },
    nextButton: {
        key: 'ArrowRight',
        ctrlOrMetaKey: true
    },
    viewSwitch: {
        key: 'ArrowUp',
        ctrlOrMetaKey: true
    },
    clearButton: {
        key: 'Backspace',
        ctrlOrMetaKey: true
    },
    todayButton: {
        key: '.',
        ctrlOrMetaKey: true
    },
    exitEditMode: {
        key: 'ArrowDown',
        ctrlOrMetaKey: true
    }
};
function createShortcutKeyConfig(options) {
    return Object.keys(defaultShortcutKeys).reduce((keyDefs, shortcut)=>{
        const keyDef = options[shortcut] === undefined ? defaultShortcutKeys[shortcut] : options[shortcut];
        const key = keyDef && keyDef.key;
        if (!key || typeof key !== 'string') return keyDefs;
        const normalizedDef = {
            key,
            ctrlOrMetaKey: !!(keyDef.ctrlOrMetaKey || keyDef.ctrlKey || keyDef.metaKey)
        };
        if (key.length > 1) {
            normalizedDef.altKey = !!keyDef.altKey;
            normalizedDef.shiftKey = !!keyDef.shiftKey;
        }
        keyDefs[shortcut] = normalizedDef;
        return keyDefs;
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1dJVn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../lib/utils.js");
var _dateJs = require("../lib/date.js");
var _domJs = require("../lib/dom.js");
var _eventJs = require("../lib/event.js");
var _pickerTemplateJs = require("./templates/pickerTemplate.js");
var _pickerTemplateJsDefault = parcelHelpers.interopDefault(_pickerTemplateJs);
var _daysViewJs = require("./views/DaysView.js");
var _daysViewJsDefault = parcelHelpers.interopDefault(_daysViewJs);
var _monthsViewJs = require("./views/MonthsView.js");
var _monthsViewJsDefault = parcelHelpers.interopDefault(_monthsViewJs);
var _yearsViewJs = require("./views/YearsView.js");
var _yearsViewJsDefault = parcelHelpers.interopDefault(_yearsViewJs);
var _functionsJs = require("../events/functions.js");
var _pickerListenersJs = require("../events/pickerListeners.js");
const orientClasses = [
    'left',
    'top',
    'right',
    'bottom'
].reduce((obj, key)=>{
    obj[key] = `datepicker-orient-${key}`;
    return obj;
}, {});
const toPx = (num)=>num ? `${num}px` : num;
function processPickerOptions(picker, options) {
    if ('title' in options) {
        if (options.title) {
            picker.controls.title.textContent = options.title;
            (0, _domJs.showElement)(picker.controls.title);
        } else {
            picker.controls.title.textContent = '';
            (0, _domJs.hideElement)(picker.controls.title);
        }
    }
    if (options.prevArrow) {
        const prevButton = picker.controls.prevButton;
        (0, _domJs.emptyChildNodes)(prevButton);
        options.prevArrow.forEach((node)=>{
            prevButton.appendChild(node.cloneNode(true));
        });
    }
    if (options.nextArrow) {
        const nextButton = picker.controls.nextButton;
        (0, _domJs.emptyChildNodes)(nextButton);
        options.nextArrow.forEach((node)=>{
            nextButton.appendChild(node.cloneNode(true));
        });
    }
    if (options.locale) {
        picker.controls.todayButton.textContent = options.locale.today;
        picker.controls.clearButton.textContent = options.locale.clear;
    }
    if ('todayButton' in options) {
        if (options.todayButton) (0, _domJs.showElement)(picker.controls.todayButton);
        else (0, _domJs.hideElement)(picker.controls.todayButton);
    }
    if ('minDate' in options || 'maxDate' in options) {
        const { minDate, maxDate } = picker.datepicker.config;
        picker.controls.todayButton.disabled = !(0, _utilsJs.isInRange)((0, _dateJs.today)(), minDate, maxDate);
    }
    if ('clearButton' in options) {
        if (options.clearButton) (0, _domJs.showElement)(picker.controls.clearButton);
        else (0, _domJs.hideElement)(picker.controls.clearButton);
    }
}
// Compute view date to reset, which will be...
// - the last item of the selected dates or defaultViewDate if no selection
// - limitted to minDate or maxDate if it exceeds the range
function computeResetViewDate(datepicker) {
    const { dates, config, rangeSideIndex } = datepicker;
    const viewDate = dates.length > 0 ? (0, _utilsJs.lastItemOf)(dates) : (0, _dateJs.regularizeDate)(config.defaultViewDate, config.pickLevel, rangeSideIndex);
    return (0, _utilsJs.limitToRange)(viewDate, config.minDate, config.maxDate);
}
// Change current view's view date
function setViewDate(picker, newDate) {
    if (!('_oldViewDate' in picker) && newDate !== picker.viewDate) picker._oldViewDate = picker.viewDate;
    picker.viewDate = newDate;
    // return whether the new date is in different period on time from the one
    // displayed in the current view
    // when true, the view needs to be re-rendered on the next UI refresh.
    const { id, year, first, last } = picker.currentView;
    const viewYear = new Date(newDate).getFullYear();
    switch(id){
        case 0:
            return newDate < first || newDate > last;
        case 1:
            return viewYear !== year;
        default:
            return viewYear < first || viewYear > last;
    }
}
function getTextDirection(el) {
    return window.getComputedStyle(el).direction;
}
// find the closet scrollable ancestor elemnt under the body
function findScrollParents(el) {
    const parent = (0, _domJs.getParent)(el);
    if (parent === document.body || !parent) return;
    // checking overflow only is enough because computed overflow cannot be
    // visible or a combination of visible and other when either axis is set
    // to other than visible.
    // (Setting one axis to other than 'visible' while the other is 'visible'
    // results in the other axis turning to 'auto')
    return window.getComputedStyle(parent).overflow !== 'visible' ? parent : findScrollParents(parent);
}
class Picker {
    constructor(datepicker){
        const { config, inputField } = this.datepicker = datepicker;
        const template = (0, _pickerTemplateJsDefault.default).replace(/%buttonClass%/g, config.buttonClass);
        const element = this.element = (0, _domJs.parseHTML)(template).firstChild;
        const [header, main, footer] = element.firstChild.children;
        const title = header.firstElementChild;
        const [prevButton, viewSwitch, nextButton] = header.lastElementChild.children;
        const [todayButton, clearButton] = footer.firstChild.children;
        const controls = {
            title,
            prevButton,
            viewSwitch,
            nextButton,
            todayButton,
            clearButton
        };
        this.main = main;
        this.controls = controls;
        const elementClass = inputField ? 'dropdown' : 'inline';
        element.classList.add(`datepicker-${elementClass}`);
        processPickerOptions(this, config);
        this.viewDate = computeResetViewDate(datepicker);
        // set up event listeners
        (0, _eventJs.registerListeners)(datepicker, [
            [
                element,
                'mousedown',
                (0, _pickerListenersJs.onMousedownPicker)
            ],
            [
                main,
                'click',
                (0, _pickerListenersJs.onClickView).bind(null, datepicker)
            ],
            [
                controls.viewSwitch,
                'click',
                (0, _pickerListenersJs.onClickViewSwitch).bind(null, datepicker)
            ],
            [
                controls.prevButton,
                'click',
                (0, _pickerListenersJs.onClickPrevButton).bind(null, datepicker)
            ],
            [
                controls.nextButton,
                'click',
                (0, _pickerListenersJs.onClickNextButton).bind(null, datepicker)
            ],
            [
                controls.todayButton,
                'click',
                (0, _functionsJs.goToOrSelectToday).bind(null, datepicker)
            ],
            [
                controls.clearButton,
                'click',
                (0, _functionsJs.clearSelection).bind(null, datepicker)
            ]
        ]);
        // set up views
        this.views = [
            new (0, _daysViewJsDefault.default)(this),
            new (0, _monthsViewJsDefault.default)(this),
            new (0, _yearsViewJsDefault.default)(this, {
                id: 2,
                name: 'years',
                cellClass: 'year',
                step: 1
            }),
            new (0, _yearsViewJsDefault.default)(this, {
                id: 3,
                name: 'decades',
                cellClass: 'decade',
                step: 10
            })
        ];
        this.currentView = this.views[config.startView];
        this.currentView.render();
        this.main.appendChild(this.currentView.element);
        if (config.container) config.container.appendChild(this.element);
        else inputField.after(this.element);
    }
    setOptions(options) {
        processPickerOptions(this, options);
        this.views.forEach((view)=>{
            view.init(options, false);
        });
        this.currentView.render();
    }
    detach() {
        this.element.remove();
    }
    show() {
        if (this.active) return;
        const { datepicker, element } = this;
        const inputField = datepicker.inputField;
        if (inputField) {
            // ensure picker's direction matches input's
            const inputDirection = getTextDirection(inputField);
            if (inputDirection !== getTextDirection((0, _domJs.getParent)(element))) element.dir = inputDirection;
            else if (element.dir) element.removeAttribute('dir');
            // Determine the picker's position first to prevent `orientation: 'auto'`
            // from being miscalculated to 'bottom' after the picker temporarily
            // shown below the input field expands the document height if the field
            // is at the bottom edge of the document
            this.place();
            element.classList.add('active');
            if (datepicker.config.disableTouchKeyboard) inputField.blur();
        } else element.classList.add('active');
        this.active = true;
        (0, _functionsJs.triggerDatepickerEvent)(datepicker, 'show');
    }
    hide() {
        if (!this.active) return;
        this.datepicker.exitEditMode();
        this.element.classList.remove('active');
        this.active = false;
        (0, _functionsJs.triggerDatepickerEvent)(this.datepicker, 'hide');
    }
    place() {
        const { classList, style } = this.element;
        // temporarily display the picker to get its size and offset parent
        style.display = 'block';
        const { width: calendarWidth, height: calendarHeight } = this.element.getBoundingClientRect();
        const offsetParent = this.element.offsetParent;
        // turn the picker back to hidden so that the position is determined with
        // the state before it is shown.
        style.display = '';
        const { config, inputField } = this.datepicker;
        const { left: inputLeft, top: inputTop, right: inputRight, bottom: inputBottom, width: inputWidth, height: inputHeight } = inputField.getBoundingClientRect();
        let { x: orientX, y: orientY } = config.orientation;
        let left = inputLeft;
        let top = inputTop;
        // caliculate offsetLeft/Top of inputField
        if (offsetParent === document.body || !offsetParent) {
            left += window.scrollX;
            top += window.scrollY;
        } else {
            const offsetParentRect = offsetParent.getBoundingClientRect();
            left -= offsetParentRect.left - offsetParent.scrollLeft;
            top -= offsetParentRect.top - offsetParent.scrollTop;
        }
        // caliculate the boundaries of the visible area that contains inputField
        const scrollParent = findScrollParents(inputField);
        let scrollAreaLeft = 0;
        let scrollAreaTop = 0;
        let { clientWidth: scrollAreaRight, clientHeight: scrollAreaBottom } = document.documentElement;
        if (scrollParent) {
            const scrollParentRect = scrollParent.getBoundingClientRect();
            if (scrollParentRect.top > 0) scrollAreaTop = scrollParentRect.top;
            if (scrollParentRect.left > 0) scrollAreaLeft = scrollParentRect.left;
            if (scrollParentRect.right < scrollAreaRight) scrollAreaRight = scrollParentRect.right;
            if (scrollParentRect.bottom < scrollAreaBottom) scrollAreaBottom = scrollParentRect.bottom;
        }
        // determine the horizontal orientation and left position
        let adjustment = 0;
        if (orientX === 'auto') {
            if (inputLeft < scrollAreaLeft) {
                orientX = 'left';
                adjustment = scrollAreaLeft - inputLeft;
            } else if (inputLeft + calendarWidth > scrollAreaRight) {
                orientX = 'right';
                if (scrollAreaRight < inputRight) adjustment = scrollAreaRight - inputRight;
            } else if (getTextDirection(inputField) === 'rtl') orientX = inputRight - calendarWidth < scrollAreaLeft ? 'left' : 'right';
            else orientX = 'left';
        }
        if (orientX === 'right') left += inputWidth - calendarWidth;
        left += adjustment;
        // determine the vertical orientation and top position
        if (orientY === 'auto') {
            if (inputTop - calendarHeight > scrollAreaTop) orientY = inputBottom + calendarHeight > scrollAreaBottom ? 'top' : 'bottom';
            else orientY = 'bottom';
        }
        if (orientY === 'top') top -= calendarHeight;
        else top += inputHeight;
        classList.remove(...Object.values(orientClasses));
        classList.add(orientClasses[orientX], orientClasses[orientY]);
        style.left = toPx(left);
        style.top = toPx(top);
    }
    setViewSwitchLabel(labelText) {
        this.controls.viewSwitch.textContent = labelText;
    }
    setPrevButtonDisabled(disabled) {
        this.controls.prevButton.disabled = disabled;
    }
    setNextButtonDisabled(disabled) {
        this.controls.nextButton.disabled = disabled;
    }
    changeView(viewId) {
        const currentView = this.currentView;
        if (viewId !== currentView.id) {
            if (!this._oldView) this._oldView = currentView;
            this.currentView = this.views[viewId];
            this._renderMethod = 'render';
        }
        return this;
    }
    // Change the focused date (view date)
    changeFocus(newViewDate) {
        this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refreshFocus';
        this.views.forEach((view)=>{
            view.updateFocus();
        });
        return this;
    }
    // Apply the change of the selected dates
    update(viewDate) {
        const newViewDate = viewDate === undefined ? computeResetViewDate(this.datepicker) : viewDate;
        this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refresh';
        this.views.forEach((view)=>{
            view.updateFocus();
            view.updateSelection();
        });
        return this;
    }
    // Refresh the picker UI
    render(quickRender = true) {
        const { currentView, datepicker, _oldView: oldView } = this;
        const oldViewDate = new Date(this._oldViewDate);
        const renderMethod = quickRender && this._renderMethod || 'render';
        delete this._oldView;
        delete this._oldViewDate;
        delete this._renderMethod;
        currentView[renderMethod]();
        if (oldView) {
            this.main.replaceChild(currentView.element, oldView.element);
            (0, _functionsJs.triggerDatepickerEvent)(datepicker, 'changeView');
        }
        if (!isNaN(oldViewDate)) {
            const newViewDate = new Date(this.viewDate);
            if (newViewDate.getFullYear() !== oldViewDate.getFullYear()) (0, _functionsJs.triggerDatepickerEvent)(datepicker, 'changeYear');
            if (newViewDate.getMonth() !== oldViewDate.getMonth()) (0, _functionsJs.triggerDatepickerEvent)(datepicker, 'changeMonth');
        }
    }
}
exports.default = Picker;

},{"../lib/utils.js":"6mU3y","../lib/date.js":"8YjGl","../lib/dom.js":"fhH13","../lib/event.js":"iAmco","./templates/pickerTemplate.js":"kqlxs","./views/DaysView.js":"biWRy","./views/MonthsView.js":"5vyam","./views/YearsView.js":"krUiN","../events/functions.js":"8uzge","../events/pickerListeners.js":"gR8so","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"kqlxs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../../lib/utils.js");
const getButtons = (buttonList)=>buttonList.map((classes)=>`<button type="button" class="%buttonClass% ${classes}" tabindex="-1"></button>`).join('');
exports.default = (0, _utilsJs.optimizeTemplateHTML)(`<div class="datepicker">
  <div class="datepicker-picker">
    <div class="datepicker-header">
      <div class="datepicker-title"></div>
      <div class="datepicker-controls">
        ${getButtons([
    'prev-button prev-btn',
    'view-switch',
    'next-button next-btn'
])}
      </div>
    </div>
    <div class="datepicker-main"></div>
    <div class="datepicker-footer">
      <div class="datepicker-controls">
        ${getButtons([
    'today-button today-btn',
    'clear-button clear-btn'
])}
      </div>
    </div>
  </div>
</div>`);

},{"../../lib/utils.js":"6mU3y","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"biWRy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dateJs = require("../../lib/date.js");
var _dateFormatJs = require("../../lib/date-format.js");
var _domJs = require("../../lib/dom.js");
var _daysTemplateJs = require("../templates/daysTemplate.js");
var _daysTemplateJsDefault = parcelHelpers.interopDefault(_daysTemplateJs);
var _weekNumbersTemplateJs = require("../templates/weekNumbersTemplate.js");
var _weekNumbersTemplateJsDefault = parcelHelpers.interopDefault(_weekNumbersTemplateJs);
var _viewJs = require("./View.js");
var _viewJsDefault = parcelHelpers.interopDefault(_viewJs);
class DaysView extends (0, _viewJsDefault.default) {
    constructor(picker){
        super(picker, {
            id: 0,
            name: 'days',
            cellClass: 'day'
        });
    }
    init(options, onConstruction = true) {
        if (onConstruction) {
            const inner = (0, _domJs.parseHTML)((0, _daysTemplateJsDefault.default)).firstChild;
            this.dow = inner.firstChild;
            this.grid = inner.lastChild;
            this.element.appendChild(inner);
        }
        super.init(options);
    }
    setOptions(options) {
        let updateDOW;
        if ('minDate' in options) this.minDate = options.minDate;
        if ('maxDate' in options) this.maxDate = options.maxDate;
        if (options.checkDisabled) this.checkDisabled = options.checkDisabled;
        if (options.daysOfWeekDisabled) {
            this.daysOfWeekDisabled = options.daysOfWeekDisabled;
            updateDOW = true;
        }
        if (options.daysOfWeekHighlighted) this.daysOfWeekHighlighted = options.daysOfWeekHighlighted;
        if ('todayHighlight' in options) this.todayHighlight = options.todayHighlight;
        if ('weekStart' in options) {
            this.weekStart = options.weekStart;
            this.weekEnd = options.weekEnd;
            updateDOW = true;
        }
        if (options.locale) {
            const locale = this.locale = options.locale;
            this.dayNames = locale.daysMin;
            this.switchLabelFormat = locale.titleFormat;
            updateDOW = true;
        }
        if ('beforeShowDay' in options) this.beforeShow = typeof options.beforeShowDay === 'function' ? options.beforeShowDay : undefined;
        if ('weekNumbers' in options) {
            if (options.weekNumbers && !this.weekNumbers) {
                const weeksElem = (0, _domJs.parseHTML)((0, _weekNumbersTemplateJsDefault.default)).firstChild;
                this.weekNumbers = {
                    element: weeksElem,
                    dow: weeksElem.firstChild,
                    weeks: weeksElem.lastChild
                };
                this.element.insertBefore(weeksElem, this.element.firstChild);
            } else if (this.weekNumbers && !options.weekNumbers) {
                this.element.removeChild(this.weekNumbers.element);
                this.weekNumbers = null;
            }
        }
        if ('getWeekNumber' in options) this.getWeekNumber = options.getWeekNumber;
        if ('showDaysOfWeek' in options) {
            if (options.showDaysOfWeek) {
                (0, _domJs.showElement)(this.dow);
                if (this.weekNumbers) (0, _domJs.showElement)(this.weekNumbers.dow);
            } else {
                (0, _domJs.hideElement)(this.dow);
                if (this.weekNumbers) (0, _domJs.hideElement)(this.weekNumbers.dow);
            }
        }
        // update days-of-week when locale, daysOfweekDisabled or weekStart is changed
        if (updateDOW) Array.from(this.dow.children).forEach((el, index)=>{
            const dow = (this.weekStart + index) % 7;
            el.textContent = this.dayNames[dow];
            el.className = this.daysOfWeekDisabled.includes(dow) ? 'dow disabled' : 'dow';
        });
    }
    // Apply update on the focused date to view's settings
    updateFocus() {
        const viewDate = new Date(this.picker.viewDate);
        const viewYear = viewDate.getFullYear();
        const viewMonth = viewDate.getMonth();
        const firstOfMonth = (0, _dateJs.dateValue)(viewYear, viewMonth, 1);
        const start = (0, _dateJs.dayOfTheWeekOf)(firstOfMonth, this.weekStart, this.weekStart);
        this.first = firstOfMonth;
        this.last = (0, _dateJs.dateValue)(viewYear, viewMonth + 1, 0);
        this.start = start;
        this.focused = this.picker.viewDate;
    }
    // Apply update on the selected dates to view's settings
    updateSelection() {
        const { dates, rangepicker } = this.picker.datepicker;
        this.selected = dates;
        if (rangepicker) this.range = rangepicker.dates;
    }
    // Update the entire view UI
    render() {
        // update today marker on ever render
        this.today = this.todayHighlight ? (0, _dateJs.today)() : undefined;
        this.prepareForRender((0, _dateFormatJs.formatDate)(this.focused, this.switchLabelFormat, this.locale), this.first <= this.minDate, this.last >= this.maxDate);
        if (this.weekNumbers) {
            const weekStart = this.weekStart;
            const startOfWeek = (0, _dateJs.dayOfTheWeekOf)(this.first, weekStart, weekStart);
            Array.from(this.weekNumbers.weeks.children).forEach((el, index)=>{
                const dateOfWeekStart = (0, _dateJs.addWeeks)(startOfWeek, index);
                el.textContent = this.getWeekNumber(dateOfWeekStart, weekStart);
                if (index > 3) el.classList[dateOfWeekStart > this.last ? 'add' : 'remove']('next');
            });
        }
        Array.from(this.grid.children).forEach((el, index)=>{
            const current = (0, _dateJs.addDays)(this.start, index);
            const dateObj = new Date(current);
            const day = dateObj.getDay();
            const extraClasses = [];
            if (this.today === current) extraClasses.push('today');
            if (this.daysOfWeekHighlighted.includes(day)) extraClasses.push('highlighted');
            this.renderCell(el, dateObj.getDate(), current, current, this, current < this.minDate || current > this.maxDate || this.daysOfWeekDisabled.includes(day), extraClasses);
        });
    }
    // Update the view UI by applying the changes of selected and focused items
    refresh() {
        const range = this.range || [];
        Array.from(this.grid.children).forEach((el)=>{
            this.refreshCell(el, Number(el.dataset.date), this.selected, range);
        });
    }
    // Update the view UI by applying the change of focused item
    refreshFocus() {
        this.changeFocusedCell(Math.round((this.focused - this.start) / 86400000));
    }
}
exports.default = DaysView;

},{"../../lib/date.js":"8YjGl","../../lib/date-format.js":"aydFo","../../lib/dom.js":"fhH13","../templates/daysTemplate.js":"5Esg3","../templates/weekNumbersTemplate.js":"lEJXs","./View.js":"5w2kY","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5Esg3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../../lib/utils.js");
exports.default = (0, _utilsJs.optimizeTemplateHTML)(`<div class="days">
  <div class="days-of-week">${(0, _utilsJs.createTagRepeat)('span', 7, {
    class: 'dow'
})}</div>
  <div class="datepicker-grid">${(0, _utilsJs.createTagRepeat)('span', 42)}</div>
</div>`);

},{"../../lib/utils.js":"6mU3y","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"lEJXs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../../lib/utils.js");
exports.default = (0, _utilsJs.optimizeTemplateHTML)(`<div class="week-numbers calendar-weeks">
  <div class="days-of-week"><span class="dow"></span></div>
  <div class="weeks">${(0, _utilsJs.createTagRepeat)('span', 6, {
    class: 'week'
})}</div>
</div>`);

},{"../../lib/utils.js":"6mU3y","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5w2kY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../../lib/utils.js");
var _domJs = require("../../lib/dom.js");
class View {
    constructor(picker, config){
        Object.assign(this, config, {
            picker,
            element: (0, _domJs.parseHTML)(`<div class="datepicker-view"></div>`).firstChild,
            selected: [],
            isRangeEnd: !!picker.datepicker.rangeSideIndex
        });
        this.init(this.picker.datepicker.config);
    }
    init(options) {
        if ('pickLevel' in options) this.isMinView = this.id === options.pickLevel;
        this.setOptions(options);
        this.updateFocus();
        this.updateSelection();
    }
    prepareForRender(switchLabel, prevButtonDisabled, nextButtonDisabled) {
        // refresh disabled years on every render in order to clear the ones added
        // by beforeShow hook at previous render
        this.disabled = [];
        const picker = this.picker;
        picker.setViewSwitchLabel(switchLabel);
        picker.setPrevButtonDisabled(prevButtonDisabled);
        picker.setNextButtonDisabled(nextButtonDisabled);
    }
    setDisabled(date, classList) {
        classList.add('disabled');
        (0, _utilsJs.pushUnique)(this.disabled, date);
    }
    // Execute beforeShow() callback and apply the result to the element
    // args:
    performBeforeHook(el, timeValue) {
        let result = this.beforeShow(new Date(timeValue));
        switch(typeof result){
            case 'boolean':
                result = {
                    enabled: result
                };
                break;
            case 'string':
                result = {
                    classes: result
                };
        }
        if (result) {
            const classList = el.classList;
            if (result.enabled === false) this.setDisabled(timeValue, classList);
            if (result.classes) {
                const extraClasses = result.classes.split(/\s+/);
                classList.add(...extraClasses);
                if (extraClasses.includes('disabled')) this.setDisabled(timeValue, classList);
            }
            if (result.content) (0, _domJs.replaceChildNodes)(el, result.content);
        }
    }
    renderCell(el, content, cellVal, date, { selected, range }, outOfScope, extraClasses = []) {
        el.textContent = content;
        if (this.isMinView) el.dataset.date = date;
        const classList = el.classList;
        el.className = `datepicker-cell ${this.cellClass}`;
        if (cellVal < this.first) classList.add('prev');
        else if (cellVal > this.last) classList.add('next');
        classList.add(...extraClasses);
        if (outOfScope || this.checkDisabled(date, this.id)) this.setDisabled(date, classList);
        if (range) {
            const [rangeStart, rangeEnd] = range;
            if (cellVal > rangeStart && cellVal < rangeEnd) classList.add('range');
            if (cellVal === rangeStart) classList.add('range-start');
            if (cellVal === rangeEnd) classList.add('range-end');
        }
        if (selected.includes(cellVal)) classList.add('selected');
        if (cellVal === this.focused) classList.add('focused');
        if (this.beforeShow) this.performBeforeHook(el, date);
    }
    refreshCell(el, cellVal, selected, [rangeStart, rangeEnd]) {
        const classList = el.classList;
        classList.remove('range', 'range-start', 'range-end', 'selected', 'focused');
        if (cellVal > rangeStart && cellVal < rangeEnd) classList.add('range');
        if (cellVal === rangeStart) classList.add('range-start');
        if (cellVal === rangeEnd) classList.add('range-end');
        if (selected.includes(cellVal)) classList.add('selected');
        if (cellVal === this.focused) classList.add('focused');
    }
    changeFocusedCell(cellIndex) {
        this.grid.querySelectorAll('.focused').forEach((el)=>{
            el.classList.remove('focused');
        });
        this.grid.children[cellIndex].classList.add('focused');
    }
}
exports.default = View;

},{"../../lib/utils.js":"6mU3y","../../lib/dom.js":"fhH13","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5vyam":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../../lib/utils.js");
var _dateJs = require("../../lib/date.js");
var _domJs = require("../../lib/dom.js");
var _viewJs = require("./View.js");
var _viewJsDefault = parcelHelpers.interopDefault(_viewJs);
function computeMonthRange(range, thisYear) {
    if (!range || !range[0] || !range[1]) return;
    const [[startY, startM], [endY, endM]] = range;
    if (startY > thisYear || endY < thisYear) return;
    return [
        startY === thisYear ? startM : -1,
        endY === thisYear ? endM : 12
    ];
}
class MonthsView extends (0, _viewJsDefault.default) {
    constructor(picker){
        super(picker, {
            id: 1,
            name: 'months',
            cellClass: 'month'
        });
    }
    init(options, onConstruction = true) {
        if (onConstruction) {
            this.grid = this.element;
            this.element.classList.add('months', 'datepicker-grid');
            this.grid.appendChild((0, _domJs.parseHTML)((0, _utilsJs.createTagRepeat)('span', 12, {
                'data-month': (ix)=>ix
            })));
            this.first = 0;
            this.last = 11;
        }
        super.init(options);
    }
    setOptions(options) {
        if (options.locale) this.monthNames = options.locale.monthsShort;
        if ('minDate' in options) {
            if (options.minDate === undefined) this.minYear = this.minMonth = this.minDate = undefined;
            else {
                const minDateObj = new Date(options.minDate);
                this.minYear = minDateObj.getFullYear();
                this.minMonth = minDateObj.getMonth();
                this.minDate = minDateObj.setDate(1);
            }
        }
        if ('maxDate' in options) {
            if (options.maxDate === undefined) this.maxYear = this.maxMonth = this.maxDate = undefined;
            else {
                const maxDateObj = new Date(options.maxDate);
                this.maxYear = maxDateObj.getFullYear();
                this.maxMonth = maxDateObj.getMonth();
                this.maxDate = (0, _dateJs.dateValue)(this.maxYear, this.maxMonth + 1, 0);
            }
        }
        if (options.checkDisabled) this.checkDisabled = this.isMinView || options.datesDisabled === null ? options.checkDisabled : ()=>false;
        if ('beforeShowMonth' in options) this.beforeShow = typeof options.beforeShowMonth === 'function' ? options.beforeShowMonth : undefined;
    }
    // Update view's settings to reflect the viewDate set on the picker
    updateFocus() {
        const viewDate = new Date(this.picker.viewDate);
        this.year = viewDate.getFullYear();
        this.focused = viewDate.getMonth();
    }
    // Update view's settings to reflect the selected dates
    updateSelection() {
        const { dates, rangepicker } = this.picker.datepicker;
        this.selected = dates.reduce((selected, timeValue)=>{
            const date = new Date(timeValue);
            const year = date.getFullYear();
            const month = date.getMonth();
            if (selected[year] === undefined) selected[year] = [
                month
            ];
            else (0, _utilsJs.pushUnique)(selected[year], month);
            return selected;
        }, {});
        if (rangepicker && rangepicker.dates) this.range = rangepicker.dates.map((timeValue)=>{
            const date = new Date(timeValue);
            return isNaN(date) ? undefined : [
                date.getFullYear(),
                date.getMonth()
            ];
        });
    }
    // Update the entire view UI
    render() {
        this.prepareForRender(this.year, this.year <= this.minYear, this.year >= this.maxYear);
        const selected = this.selected[this.year] || [];
        const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;
        const isMinYear = this.year === this.minYear;
        const isMaxYear = this.year === this.maxYear;
        const range = computeMonthRange(this.range, this.year);
        Array.from(this.grid.children).forEach((el, index)=>{
            const date = (0, _dateJs.regularizeDate)(new Date(this.year, index, 1), 1, this.isRangeEnd);
            this.renderCell(el, this.monthNames[index], index, date, {
                selected,
                range
            }, yrOutOfRange || isMinYear && index < this.minMonth || isMaxYear && index > this.maxMonth);
        });
    }
    // Update the view UI by applying the changes of selected and focused items
    refresh() {
        const selected = this.selected[this.year] || [];
        const range = computeMonthRange(this.range, this.year) || [];
        Array.from(this.grid.children).forEach((el, index)=>{
            this.refreshCell(el, index, selected, range);
        });
    }
    // Update the view UI by applying the change of focused item
    refreshFocus() {
        this.changeFocusedCell(this.focused);
    }
}
exports.default = MonthsView;

},{"../../lib/utils.js":"6mU3y","../../lib/date.js":"8YjGl","../../lib/dom.js":"fhH13","./View.js":"5w2kY","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"krUiN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../../lib/utils.js");
var _dateJs = require("../../lib/date.js");
var _domJs = require("../../lib/dom.js");
var _viewJs = require("./View.js");
var _viewJsDefault = parcelHelpers.interopDefault(_viewJs);
function toTitleCase(word) {
    return [
        ...word
    ].reduce((str, ch, ix)=>str += ix ? ch : ch.toUpperCase(), '');
}
class YearsView extends (0, _viewJsDefault.default) {
    constructor(picker, config){
        super(picker, config);
    }
    init(options, onConstruction = true) {
        if (onConstruction) {
            this.navStep = this.step * 10;
            this.beforeShowOption = `beforeShow${toTitleCase(this.cellClass)}`;
            this.grid = this.element;
            this.element.classList.add(this.name, 'datepicker-grid');
            this.grid.appendChild((0, _domJs.parseHTML)((0, _utilsJs.createTagRepeat)('span', 12)));
        }
        super.init(options);
    }
    setOptions(options) {
        if ('minDate' in options) {
            if (options.minDate === undefined) this.minYear = this.minDate = undefined;
            else {
                this.minYear = (0, _dateJs.startOfYearPeriod)(options.minDate, this.step);
                this.minDate = (0, _dateJs.dateValue)(this.minYear, 0, 1);
            }
        }
        if ('maxDate' in options) {
            if (options.maxDate === undefined) this.maxYear = this.maxDate = undefined;
            else {
                this.maxYear = (0, _dateJs.startOfYearPeriod)(options.maxDate, this.step);
                this.maxDate = (0, _dateJs.dateValue)(this.maxYear, 11, 31);
            }
        }
        if (options.checkDisabled) this.checkDisabled = this.isMinView || options.datesDisabled === null ? options.checkDisabled : ()=>false;
        if (this.beforeShowOption in options) {
            const beforeShow = options[this.beforeShowOption];
            this.beforeShow = typeof beforeShow === 'function' ? beforeShow : undefined;
        }
    }
    // Update view's settings to reflect the viewDate set on the picker
    updateFocus() {
        const viewDate = new Date(this.picker.viewDate);
        const first = (0, _dateJs.startOfYearPeriod)(viewDate, this.navStep);
        const last = first + 9 * this.step;
        this.first = first;
        this.last = last;
        this.start = first - this.step;
        this.focused = (0, _dateJs.startOfYearPeriod)(viewDate, this.step);
    }
    // Update view's settings to reflect the selected dates
    updateSelection() {
        const { dates, rangepicker } = this.picker.datepicker;
        this.selected = dates.reduce((years, timeValue)=>{
            return (0, _utilsJs.pushUnique)(years, (0, _dateJs.startOfYearPeriod)(timeValue, this.step));
        }, []);
        if (rangepicker && rangepicker.dates) this.range = rangepicker.dates.map((timeValue)=>{
            if (timeValue !== undefined) return (0, _dateJs.startOfYearPeriod)(timeValue, this.step);
        });
    }
    // Update the entire view UI
    render() {
        this.prepareForRender(`${this.first}-${this.last}`, this.first <= this.minYear, this.last >= this.maxYear);
        Array.from(this.grid.children).forEach((el, index)=>{
            const current = this.start + index * this.step;
            const date = (0, _dateJs.regularizeDate)(new Date(current, 0, 1), 2, this.isRangeEnd);
            el.dataset.year = current;
            this.renderCell(el, current, current, date, this, current < this.minYear || current > this.maxYear);
        });
    }
    // Update the view UI by applying the changes of selected and focused items
    refresh() {
        const range = this.range || [];
        Array.from(this.grid.children).forEach((el)=>{
            this.refreshCell(el, Number(el.textContent), this.selected, range);
        });
    }
    // Update the view UI by applying the change of focused item
    refreshFocus() {
        this.changeFocusedCell(Math.round((this.focused - this.start) / this.step));
    }
}
exports.default = YearsView;

},{"../../lib/utils.js":"6mU3y","../../lib/date.js":"8YjGl","../../lib/dom.js":"fhH13","./View.js":"5w2kY","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"8uzge":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "triggerDatepickerEvent", ()=>triggerDatepickerEvent);
// direction: -1 (to previous), 1 (to next)
parcelHelpers.export(exports, "goToPrevOrNext", ()=>goToPrevOrNext);
parcelHelpers.export(exports, "switchView", ()=>switchView);
parcelHelpers.export(exports, "clearSelection", ()=>clearSelection);
parcelHelpers.export(exports, "goToOrSelectToday", ()=>goToOrSelectToday);
parcelHelpers.export(exports, "unfocus", ()=>unfocus);
var _utilsJs = require("../lib/utils.js");
var _dateJs = require("../lib/date.js");
var _domJs = require("../lib/dom.js");
function triggerDatepickerEvent(datepicker, type) {
    const options = {
        bubbles: true,
        cancelable: true,
        detail: {
            date: datepicker.getDate(),
            viewDate: new Date(datepicker.picker.viewDate),
            viewId: datepicker.picker.currentView.id,
            datepicker
        }
    };
    datepicker.element.dispatchEvent(new CustomEvent(type, options));
}
function goToPrevOrNext(datepicker, direction) {
    const { config, picker } = datepicker;
    const { currentView, viewDate } = picker;
    let newViewDate;
    switch(currentView.id){
        case 0:
            newViewDate = (0, _dateJs.addMonths)(viewDate, direction);
            break;
        case 1:
            newViewDate = (0, _dateJs.addYears)(viewDate, direction);
            break;
        default:
            newViewDate = (0, _dateJs.addYears)(viewDate, direction * currentView.navStep);
    }
    newViewDate = (0, _utilsJs.limitToRange)(newViewDate, config.minDate, config.maxDate);
    picker.changeFocus(newViewDate).render();
}
function switchView(datepicker) {
    const viewId = datepicker.picker.currentView.id;
    if (viewId === datepicker.config.maxView) return;
    datepicker.picker.changeView(viewId + 1).render();
}
function clearSelection(datepicker) {
    datepicker.setDate({
        clear: true
    });
}
function goToOrSelectToday(datepicker) {
    const currentDate = (0, _dateJs.today)();
    if (datepicker.config.todayButtonMode === 1) datepicker.setDate(currentDate, {
        forceRefresh: true,
        viewDate: currentDate
    });
    else datepicker.setFocusedDate(currentDate, true);
}
function unfocus(datepicker) {
    const onBlur = ()=>{
        if (datepicker.config.updateOnBlur) datepicker.update({
            revert: true
        });
        else datepicker.refresh('input');
        datepicker.hide();
    };
    const element = datepicker.element;
    if ((0, _domJs.isActiveElement)(element)) element.addEventListener('blur', onBlur, {
        once: true
    });
    else onBlur();
}

},{"../lib/utils.js":"6mU3y","../lib/date.js":"8YjGl","../lib/dom.js":"fhH13","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"gR8so":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onClickViewSwitch", ()=>onClickViewSwitch);
parcelHelpers.export(exports, "onClickPrevButton", ()=>onClickPrevButton);
parcelHelpers.export(exports, "onClickNextButton", ()=>onClickNextButton);
// For the picker's main block to delegete the events from `datepicker-cell`s
parcelHelpers.export(exports, "onClickView", ()=>onClickView);
parcelHelpers.export(exports, "onMousedownPicker", ()=>onMousedownPicker);
var _dateJs = require("../lib/date.js");
var _eventJs = require("../lib/event.js");
var _functionsJs = require("./functions.js");
function goToSelectedMonthOrYear(datepicker, selection) {
    const picker = datepicker.picker;
    const viewDate = new Date(picker.viewDate);
    const viewId = picker.currentView.id;
    const newDate = viewId === 1 ? (0, _dateJs.addMonths)(viewDate, selection - viewDate.getMonth()) : (0, _dateJs.addYears)(viewDate, selection - viewDate.getFullYear());
    picker.changeFocus(newDate).changeView(viewId - 1).render();
}
function onClickViewSwitch(datepicker) {
    (0, _functionsJs.switchView)(datepicker);
}
function onClickPrevButton(datepicker) {
    (0, _functionsJs.goToPrevOrNext)(datepicker, -1);
}
function onClickNextButton(datepicker) {
    (0, _functionsJs.goToPrevOrNext)(datepicker, 1);
}
function onClickView(datepicker, ev) {
    const target = (0, _eventJs.findElementInEventPath)(ev, '.datepicker-cell');
    if (!target || target.classList.contains('disabled')) return;
    const { id, isMinView } = datepicker.picker.currentView;
    const data = target.dataset;
    if (isMinView) datepicker.setDate(Number(data.date));
    else if (id === 1) goToSelectedMonthOrYear(datepicker, Number(data.month));
    else goToSelectedMonthOrYear(datepicker, Number(data.year));
}
function onMousedownPicker(ev) {
    ev.preventDefault();
}

},{"../lib/date.js":"8YjGl","../lib/event.js":"iAmco","./functions.js":"8uzge","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"4IkNX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onKeydown", ()=>onKeydown);
parcelHelpers.export(exports, "onFocus", ()=>onFocus);
// for the prevention for entering edit mode while getting focus on click
parcelHelpers.export(exports, "onMousedown", ()=>onMousedown);
parcelHelpers.export(exports, "onClickInput", ()=>onClickInput);
parcelHelpers.export(exports, "onPaste", ()=>onPaste);
var _utilsJs = require("../lib/utils.js");
var _domJs = require("../lib/dom.js");
var _dateJs = require("../lib/date.js");
var _functionsJs = require("./functions.js");
// Find the closest date that doesn't meet the condition for unavailable date
// Returns undefined if no available date is found
// addFn: function to calculate the next date
//   - args: time value, amount
// increase: amount to pass to addFn
// testFn: function to test the unavailability of the date
//   - args: time value; return: true if unavailable
function findNextAvailableOne(date, addFn, increase, testFn, min, max) {
    if (!(0, _utilsJs.isInRange)(date, min, max)) return;
    if (testFn(date)) {
        const newDate = addFn(date, increase);
        return findNextAvailableOne(newDate, addFn, increase, testFn, min, max);
    }
    return date;
}
// direction: -1 (left/up), 1 (right/down)
// vertical: true for up/down, false for left/right
function moveByArrowKey(datepicker, direction, vertical) {
    const picker = datepicker.picker;
    const currentView = picker.currentView;
    const step = currentView.step || 1;
    let viewDate = picker.viewDate;
    let addFn;
    switch(currentView.id){
        case 0:
            viewDate = (0, _dateJs.addDays)(viewDate, vertical ? direction * 7 : direction);
            addFn = (0, _dateJs.addDays);
            break;
        case 1:
            viewDate = (0, _dateJs.addMonths)(viewDate, vertical ? direction * 4 : direction);
            addFn = (0, _dateJs.addMonths);
            break;
        default:
            viewDate = (0, _dateJs.addYears)(viewDate, direction * (vertical ? 4 : 1) * step);
            addFn = (0, _dateJs.addYears);
    }
    viewDate = findNextAvailableOne(viewDate, addFn, direction < 0 ? -step : step, (date)=>currentView.disabled.includes(date), currentView.minDate, currentView.maxDate);
    if (viewDate !== undefined) picker.changeFocus(viewDate).render();
}
function onKeydown(datepicker, ev) {
    const { config, picker, editMode } = datepicker;
    const active = picker.active;
    const { key, altKey, shiftKey } = ev;
    const ctrlOrMetaKey = ev.ctrlKey || ev.metaKey;
    const cancelEvent = ()=>{
        ev.preventDefault();
        ev.stopPropagation();
    };
    // tab/enter keys should not be taken by shortcut keys
    if (key === 'Tab') {
        (0, _functionsJs.unfocus)(datepicker);
        return;
    }
    if (key === 'Enter') {
        if (!active) datepicker.update();
        else if (editMode) datepicker.exitEditMode({
            update: true,
            autohide: config.autohide
        });
        else {
            const currentView = picker.currentView;
            if (currentView.isMinView) datepicker.setDate(picker.viewDate);
            else {
                picker.changeView(currentView.id - 1).render();
                cancelEvent();
            }
        }
        return;
    }
    const shortcutKeys = config.shortcutKeys;
    const keyInfo = {
        key,
        ctrlOrMetaKey,
        altKey,
        shiftKey
    };
    const shortcut = Object.keys(shortcutKeys).find((item)=>{
        const keyDef = shortcutKeys[item];
        return !Object.keys(keyDef).find((prop)=>keyDef[prop] !== keyInfo[prop]);
    });
    if (shortcut) {
        let action;
        if (shortcut === 'toggle') action = shortcut;
        else if (editMode) {
            if (shortcut === 'exitEditMode') action = shortcut;
        } else if (active) {
            if (shortcut === 'hide') action = shortcut;
            else if (shortcut === 'prevButton') action = [
                (0, _functionsJs.goToPrevOrNext),
                [
                    datepicker,
                    -1
                ]
            ];
            else if (shortcut === 'nextButton') action = [
                (0, _functionsJs.goToPrevOrNext),
                [
                    datepicker,
                    1
                ]
            ];
            else if (shortcut === 'viewSwitch') action = [
                (0, _functionsJs.switchView),
                [
                    datepicker
                ]
            ];
            else if (config.clearButton && shortcut === 'clearButton') action = [
                (0, _functionsJs.clearSelection),
                [
                    datepicker
                ]
            ];
            else if (config.todayButton && shortcut === 'todayButton') action = [
                (0, _functionsJs.goToOrSelectToday),
                [
                    datepicker
                ]
            ];
        } else if (shortcut === 'show') action = shortcut;
        if (action) {
            if (Array.isArray(action)) action[0].apply(null, action[1]);
            else datepicker[action]();
            cancelEvent();
            return;
        }
    }
    // perform as a regular <input> when picker in hidden or in edit mode
    if (!active || editMode) return;
    const handleArrowKeyPress = (direction, vertical)=>{
        if (shiftKey || ctrlOrMetaKey || altKey) datepicker.enterEditMode();
        else {
            moveByArrowKey(datepicker, direction, vertical);
            ev.preventDefault();
        }
    };
    if (key === 'ArrowLeft') handleArrowKeyPress(-1, false);
    else if (key === 'ArrowRight') handleArrowKeyPress(1, false);
    else if (key === 'ArrowUp') handleArrowKeyPress(-1, true);
    else if (key === 'ArrowDown') handleArrowKeyPress(1, true);
    else if (key === 'Backspace' || key === 'Delete' || key && key.length === 1 && !ctrlOrMetaKey) datepicker.enterEditMode();
}
function onFocus(datepicker) {
    if (datepicker.config.showOnFocus && !datepicker._showing) datepicker.show();
}
function onMousedown(datepicker, ev) {
    const el = ev.target;
    if (datepicker.picker.active || datepicker.config.showOnClick) {
        el._active = (0, _domJs.isActiveElement)(el);
        el._clicking = setTimeout(()=>{
            delete el._active;
            delete el._clicking;
        }, 2000);
    }
}
function onClickInput(datepicker, ev) {
    const el = ev.target;
    if (!el._clicking) return;
    clearTimeout(el._clicking);
    delete el._clicking;
    if (el._active) datepicker.enterEditMode();
    delete el._active;
    if (datepicker.config.showOnClick) datepicker.show();
}
function onPaste(datepicker, ev) {
    if (ev.clipboardData.types.includes('text/plain')) datepicker.enterEditMode();
}

},{"../lib/utils.js":"6mU3y","../lib/dom.js":"fhH13","../lib/date.js":"8YjGl","./functions.js":"8uzge","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"i4Soe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// for the `document` to delegate the events from outside the picker/input field
parcelHelpers.export(exports, "onClickOutside", ()=>onClickOutside);
var _domJs = require("../lib/dom.js");
var _eventJs = require("../lib/event.js");
var _functionsJs = require("./functions.js");
function onClickOutside(datepicker, ev) {
    const { element, picker } = datepicker;
    // check both picker's and input's activeness to make updateOnBlur work in
    // the cases where...
    // - picker is hidden by ESC key press → input stays focused
    // - input is unfocused by closing mobile keyboard → piker is kept shown
    if (!picker.active && !(0, _domJs.isActiveElement)(element)) return;
    const pickerElem = picker.element;
    if ((0, _eventJs.findElementInEventPath)(ev, (el)=>el === element || el === pickerElem)) return;
    (0, _functionsJs.unfocus)(datepicker);
}

},{"../lib/dom.js":"fhH13","../lib/event.js":"iAmco","./functions.js":"8uzge","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"F30jS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventJs = require("./lib/event.js");
var _dateFormatJs = require("./lib/date-format.js");
var _datepickerJs = require("./Datepicker.js");
var _datepickerJsDefault = parcelHelpers.interopDefault(_datepickerJs);
// filter out the config options inapproprite to pass to Datepicker
function filterOptions(options) {
    const newOpts = Object.assign({}, options);
    delete newOpts.inputs;
    delete newOpts.allowOneSidedRange;
    delete newOpts.maxNumberOfDates; // to ensure each datepicker handles a single date
    return newOpts;
}
function setupDatepicker(rangepicker, changeDateListener, el, options) {
    (0, _eventJs.registerListeners)(rangepicker, [
        [
            el,
            'changeDate',
            changeDateListener
        ]
    ]);
    new (0, _datepickerJsDefault.default)(el, options, rangepicker);
}
function onChangeDate(rangepicker, ev) {
    // to prevent both datepickers trigger the other side's update each other
    if (rangepicker._updating) return;
    rangepicker._updating = true;
    const target = ev.target;
    if (target.datepicker === undefined) return;
    const datepickers = rangepicker.datepickers;
    const [datepicker0, datepicker1] = datepickers;
    const setDateOptions = {
        render: false
    };
    const changedSide = rangepicker.inputs.indexOf(target);
    const otherSide = changedSide === 0 ? 1 : 0;
    const changedDate = datepickers[changedSide].dates[0];
    const otherDate = datepickers[otherSide].dates[0];
    if (changedDate !== undefined && otherDate !== undefined) {
        // if the start of the range > the end, swap them
        if (changedSide === 0 && changedDate > otherDate) {
            datepicker0.setDate(otherDate, setDateOptions);
            datepicker1.setDate(changedDate, setDateOptions);
        } else if (changedSide === 1 && changedDate < otherDate) {
            datepicker0.setDate(changedDate, setDateOptions);
            datepicker1.setDate(otherDate, setDateOptions);
        }
    } else if (!rangepicker.allowOneSidedRange) // to prevent the range from becoming one-sided, copy changed side's
    // selection (no matter if it's empty) to the other side
    {
        if (changedDate !== undefined || otherDate !== undefined) {
            setDateOptions.clear = true;
            datepickers[otherSide].setDate(datepickers[changedSide].dates, setDateOptions);
        }
    }
    datepickers.forEach((datepicker)=>{
        datepicker.picker.update().render();
    });
    delete rangepicker._updating;
}
class DateRangePicker {
    /**
   * Create a date range picker
   * @param  {Element} element - element to bind a date range picker
   * @param  {Object} [options] - config options
   */ constructor(element, options = {}){
        let inputs = Array.isArray(options.inputs) ? options.inputs : Array.from(element.querySelectorAll('input'));
        if (inputs.length < 2) return;
        element.rangepicker = this;
        this.element = element;
        this.inputs = inputs = inputs.slice(0, 2);
        Object.freeze(inputs);
        this.allowOneSidedRange = !!options.allowOneSidedRange;
        const changeDateListener = onChangeDate.bind(null, this);
        const cleanOptions = filterOptions(options);
        // in order for initial date setup to work right when pcicLvel > 0,
        // let Datepicker constructor add the instance to the rangepicker
        const datepickers = this.datepickers = [];
        inputs.forEach((input)=>{
            setupDatepicker(this, changeDateListener, input, cleanOptions);
        });
        Object.freeze(datepickers);
        Object.defineProperty(this, 'dates', {
            get () {
                return datepickers.map((datepicker)=>datepicker.dates[0]);
            }
        });
        // normalize the range if inital dates are given
        if (datepickers[0].dates.length > 0) onChangeDate(this, {
            target: inputs[0]
        });
        else if (datepickers[1].dates.length > 0) onChangeDate(this, {
            target: inputs[1]
        });
    }
    /**
   * Set new values to the config options
   * @param {Object} options - config options to update
   */ setOptions(options) {
        this.allowOneSidedRange = !!options.allowOneSidedRange;
        const cleanOptions = filterOptions(options);
        this.datepickers.forEach((datepicker)=>{
            datepicker.setOptions(cleanOptions);
        });
    }
    /**
   * Destroy the DateRangePicker instance
   * @return {DateRangePicker} - the instance destroyed
   */ destroy() {
        this.datepickers.forEach((datepicker)=>{
            datepicker.destroy();
        });
        (0, _eventJs.unregisterListeners)(this);
        delete this.element.rangepicker;
    }
    /**
   * Get the start and end dates of the date range
   *
   * The method returns Date objects by default. If format string is passed,
   * it returns date strings formatted in given format.
   * The result array always contains 2 items (start date/end date) and
   * undefined is used for unselected side. (e.g. If none is selected,
   * the result will be [undefined, undefined]. If only the end date is set
   * when allowOneSidedRange config option is true, [undefined, endDate] will
   * be returned.)
   *
   * @param  {String} [format] - Format string to stringify the dates
   * @return {Array} - Start and end dates
   */ getDates(format) {
        const callback = format ? (date)=>(0, _dateFormatJs.formatDate)(date, format, this.datepickers[0].config.locale) : (date)=>new Date(date);
        return this.dates.map((date)=>date === undefined ? date : callback(date));
    }
    /**
   * Set the start and end dates of the date range
   *
   * The method calls datepicker.setDate() internally using each of the
   * arguments in start→end order.
   *
   * When a clear: true option object is passed instead of a date, the method
   * clears the date.
   *
   * If an invalid date, the same date as the current one or an option object
   * without clear: true is passed, the method considers that argument as an
   * "ineffective" argument because calling datepicker.setDate() with those
   * values makes no changes to the date selection.
   *
   * When the allowOneSidedRange config option is false, passing {clear: true}
   * to clear the range works only when it is done to the last effective
   * argument (in other words, passed to rangeEnd or to rangeStart along with
   * ineffective rangeEnd). This is because when the date range is changed,
   * it gets normalized based on the last change at the end of the changing
   * process.
   *
   * @param {Date|Number|String|Object} rangeStart - Start date of the range
   * or {clear: true} to clear the date
   * @param {Date|Number|String|Object} rangeEnd - End date of the range
   * or {clear: true} to clear the date
   */ setDates(rangeStart, rangeEnd) {
        const { datepickers: [datepicker0, datepicker1], inputs: [input0, input1], dates: [origDate0, origDate1] } = this;
        // If range normalization runs on every change, we can't set a new range
        // that starts after the end of the current range correctly because the
        // normalization process swaps start↔︎end right after setting the new start
        // date. To prevent this, the normalization process needs to run once after
        // both of the new dates are set.
        this._updating = true;
        datepicker0.setDate(rangeStart);
        datepicker1.setDate(rangeEnd);
        delete this._updating;
        if (datepicker1.dates[0] !== origDate1) onChangeDate(this, {
            target: input1
        });
        else if (datepicker0.dates[0] !== origDate0) onChangeDate(this, {
            target: input0
        });
    }
}
exports.default = DateRangePicker;

},{"./lib/event.js":"iAmco","./lib/date-format.js":"aydFo","./Datepicker.js":"5ptSV","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"zGWju":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "searchResults", ()=>searchResults);
var _data = require("./data");
const searchResults = ()=>{
    const WRAPPER = document.getElementById("search-results");
    const HIGHLIGHT_WORDS = [
        "sales",
        "leads",
        "sale",
        "lead"
    ];
    const REGEX = new RegExp(`\\b(${HIGHLIGHT_WORDS.join("|")})\\b`, "gi");
    let list = "";
    if (WRAPPER) {
        (0, _data.DATA).map((item)=>{
            const HIGLIGHTENED_TITLE = item.title.replace(REGEX, '<span class="bg-warning bg-opacity-75 text-black">$1</span>');
            list += `<a href="" class="card card-hover py-3 px-4 mb-2">
                        <div class="fw-medium text-body text-truncate mb-1">${HIGLIGHTENED_TITLE}</div>
                        <div class="text-body-secondary fs-7 text-truncate">${item.page}</div>
                    </a>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"./data":"ls7Vz","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"ls7Vz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
const DATA = [
    {
        title: "Sales leads play a crucial role in business development",
        page: "invoice/invoice-2012-10"
    },
    {
        title: "Effective lead management enhances sales performance",
        page: "mail/sent"
    },
    {
        title: "Lead generation strategies vary based on industry",
        page: "messages/archived"
    },
    {
        title: "Successful lead nurturing requires consistent effort",
        page: "mail/inbox"
    },
    {
        title: "Converting a sales lead can be a rewarding process",
        page: "presentation/demos"
    },
    {
        title: "Lead scoring helps identify potential opportunities",
        page: "reports/spreadsheets"
    },
    {
        title: "Lead capture forms are widely used in digital marketing",
        page: "users/collaborators"
    },
    {
        title: "Sales lead databases store valuable contact details",
        page: "documents/misc"
    },
    {
        title: "Quality leads are a valuable asset for any company",
        page: "todo/upcoming"
    },
    {
        title: "Exploring new lead sources can boost sales efforts",
        page: "dashboard/website-analytics"
    },
    {
        title: "Lead qualification is vital for efficient sales operations",
        page: "calendar/upcoming"
    },
    {
        title: "A strong sales team can effectively handle leads",
        page: "reports/sales-completed"
    },
    {
        title: "Follow-up is key to converting cold leads into clients",
        page: "calendar/events"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3MSC1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "faq", ()=>faq);
var _data = require("./data");
const faq = ()=>{
    const WRAPPER = document.getElementById("faq");
    let list = "";
    if (WRAPPER) {
        (0, _data.DATA).map((item)=>{
            let faqLinks = document.createElement("div");
            let faqCategory = document.createElement("h3");
            faqCategory.innerText = item.category;
            item.links.map((link)=>{
                let faqLinkItem = document.createElement("a");
                faqLinkItem.href = "#";
                faqLinkItem.innerText = link;
                faqLinkItem.classList.add("d-block", "border-bottom", "py-2", "link-body");
                faqLinkItem.setAttribute("data-bs-toggle", "modal");
                faqLinkItem.setAttribute("data-bs-target", "#faq-details");
                faqLinks.appendChild(faqLinkItem);
            });
            list += `<div class="card g-col-12 g-col-md-6 g-col-xl-4 px-7 py-6">
                        <h3 class="d-flex align-items-center text-body-emphasis mb-5">
                            <div class="flex-grow-1 fs-5">${item.category}</div> 
                            <i class="ms-auto fs-4 me-n1 ph ${item.icon}"></i>
                        </h3>
                        ${faqLinks.outerHTML}
                        <a href="#" class="d-flex align-items-center fs-7 mt-5">
                            Browse all questions

							<i class="ph ph-arrow-right ms-auto"></i>	
                        </a>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"./data":"gyUwt","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"gyUwt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
const DATA = [
    {
        category: "Manage your account",
        description: "Morbi leo risus porta consectetur vestibulum ateros",
        icon: "ph-user-circle",
        links: [
            "How do I create an account?",
            "Can I change my account password?",
            "How do I update my profile information?",
            "Can I add or remove profile pictures?",
            "Is it possible to merge or link multiple accounts?",
            "What privacy settings are available for my account?",
            "How can I deactivate or delete my account?"
        ]
    },
    {
        category: "Payment and billing",
        description: "Etiam consectetur duiut felis gravida laoreet",
        icon: "ph-currency-circle-dollar",
        links: [
            "How do I update my payment method?",
            "When will I be billed for my subscription?",
            "Can I change my subscription plan?",
            "What payment options are accepted?",
            "Is my payment information secure?",
            "How can I view my billing history?",
            "What should I do if my payment fails?"
        ]
    },
    {
        category: "Legal and privacy",
        description: "Etiam sagittis neque finibus rutrum faucibus",
        icon: "ph-shield-star	",
        links: [
            "What is your privacy policy?",
            "How do you protect my personal information?",
            "Can I opt out of data collection and tracking?",
            "What are your terms of service and user agreements?",
            "How do I report a privacy concern or data breach?",
            "Is my data shared with third parties?",
            "What are my rights regarding my personal data?"
        ]
    },
    {
        category: "Login and registration",
        description: "Duis scelerisque rhoncus semid gravida",
        icon: "ph-keyhole",
        links: [
            "How do I create a new account?",
            "What information is required for registration?",
            "I forgot my password. What should I do?",
            "Is there a minimum password strength requirement?",
            "How do I change my password?",
            "Can I update my registered email address?",
            "How can I delete my account if needed?"
        ]
    },
    {
        category: "User interface and experience",
        description: "Curabitur sesem uturna volutpat vestibulum",
        icon: "ph-hand-pointing",
        links: [
            "How can I provide feedback on the user interface?",
            "What are some tips for improving user experience?",
            "Can I customize the interface to my preferences?",
            "What accessibility features are available?",
            "How do I navigate the user interface efficiently?",
            "Are there keyboard shortcuts for common actions?",
            "How often are user interface updates released?"
        ]
    },
    {
        category: "Everything else",
        description: "Curabitur sesem uturna volutpat vestibulum",
        icon: "ph-dots-nine",
        links: [
            "How can I contact customer support?",
            "What are your business hours?",
            "Is there a mobile app available?",
            "How do I reset my security questions?",
            "Can I change my username or display name?",
            "What are the system requirements for your service?",
            "Is there a referral program or rewards program?"
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jJ1jr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "teams", ()=>teams);
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
var _jpg1 = require("../../../img/team/*.jpg");
var _jpgDefault1 = parcelHelpers.interopDefault(_jpg1);
var _data = require("./data");
const teams = ()=>{
    const WRAPPER = document.getElementById("teams");
    let list = "";
    if (WRAPPER) {
        (0, _data.DATA).map((item)=>{
            let members = "";
            item.members.map((member)=>{
                members += `<img class="w-9 h-9 rounded-circle ms-n3 border border-3 border-gray-200" src="${(0, _jpgDefault.default)[member.img]}">`;
            });
            list += `<div class="card p-1 g-col-12 g-col-md-6 g-col-lg-4">
                        <img class="w-100 h-32 object-fit-cover rounded-1" src="${(0, _jpgDefault1.default)[item.img]}" alt="">
                        
                        <div class="p-5 text-center">
                            <h3 class="text-body-emphasis fw-medium mb-2 fs-6">${item.title}</h3>
                            <div class="mb-5 text-body-secondary">${item.description}</div>
    
                            <div class="d-flex align-items-center justify-content-center mb-2 ps-3">
                                ${members}
                            </div>
                            
                            <div class="text-body-secondary fs-7">${item.count} Members</div>
                        </div>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/contacts/*.jpg":"3rZQy","../../../img/team/*.jpg":"lfmMk","./data":"iN4gt","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3rZQy":[function(require,module,exports,__globalThis) {
const _temp0 = require("f3a39e5ff05df75b");
const _temp1 = require("df482cc2cc551dd");
const _temp2 = require("ec05414e46e2ace");
const _temp3 = require("997180b482563cd7");
const _temp4 = require("db50fe2cb8d5bb9f");
const _temp5 = require("ffc6b008814868f3");
const _temp6 = require("c282a906ac4ed983");
const _temp7 = require("f13bd8726f9e6a47");
const _temp8 = require("75c02fbd501f1fee");
const _temp9 = require("63a0048fae14a4bb");
const _temp10 = require("efe5c9cadd6cb953");
const _temp11 = require("96d88d8cc127ea85");
const _temp12 = require("14565fe12f019614");
const _temp13 = require("c82a85dff5b2ba3e");
const _temp14 = require("7a37fb54c03a8f1c");
const _temp15 = require("fb24ca5ebc2d6b5c");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"f3a39e5ff05df75b":"eM9AY","df482cc2cc551dd":"4tWpl","ec05414e46e2ace":"egP4V","997180b482563cd7":"dRrEf","db50fe2cb8d5bb9f":"cG5Jh","ffc6b008814868f3":"945u4","c282a906ac4ed983":"go82E","f13bd8726f9e6a47":"4qG8A","75c02fbd501f1fee":"4jtK8","63a0048fae14a4bb":"8Gxhp","efe5c9cadd6cb953":"5foDv","96d88d8cc127ea85":"hSAKF","14565fe12f019614":"3Jp7F","c82a85dff5b2ba3e":"elJBN","7a37fb54c03a8f1c":"3eInA","fb24ca5ebc2d6b5c":"a5Vjj"}],"lfmMk":[function(require,module,exports,__globalThis) {
const _temp0 = require("9c44743834a49218");
const _temp1 = require("fecb31aad573fc1d");
const _temp2 = require("52a401cb4b97c985");
const _temp3 = require("a7641c41325870cb");
const _temp4 = require("4bb3047766f9816e");
const _temp5 = require("13ee8f3573be358d");
const _temp6 = require("9bf5e262defbc6b1");
const _temp7 = require("30c0fc4610ebf287");
const _temp8 = require("57fffc3ab924e532");
const _temp9 = require("5c8ed634bc9a76c1");
const _temp10 = require("1306be3d63d9c8bc");
const _temp11 = require("e94301258349b80");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11
};

},{"9c44743834a49218":"lnEL1","fecb31aad573fc1d":"gD0JK","52a401cb4b97c985":"NnPkt","a7641c41325870cb":"culry","4bb3047766f9816e":"iAhsC","13ee8f3573be358d":"1YbkS","9bf5e262defbc6b1":"RM6pB","30c0fc4610ebf287":"jfRct","57fffc3ab924e532":"eI9IQ","5c8ed634bc9a76c1":"8aH6g","1306be3d63d9c8bc":"lBMLG","e94301258349b80":"37H7v"}],"lnEL1":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("1.3d0ebcc5.jpg") + "?" + Date.now();

},{}],"gD0JK":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("2.a5c723d3.jpg") + "?" + Date.now();

},{}],"NnPkt":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("3.6a2c3f1d.jpg") + "?" + Date.now();

},{}],"culry":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("4.eb756bc8.jpg") + "?" + Date.now();

},{}],"iAhsC":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("5.b20cc1af.jpg") + "?" + Date.now();

},{}],"1YbkS":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("6.8b93f482.jpg") + "?" + Date.now();

},{}],"RM6pB":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("7.a784a8df.jpg") + "?" + Date.now();

},{}],"jfRct":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("8.1eafb14a.jpg") + "?" + Date.now();

},{}],"eI9IQ":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("9.ac997f0c.jpg") + "?" + Date.now();

},{}],"8aH6g":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("10.b402e953.jpg") + "?" + Date.now();

},{}],"lBMLG":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("11.0b8e48be.jpg") + "?" + Date.now();

},{}],"37H7v":[function(require,module,exports,__globalThis) {
module.exports = module.bundle.resolve("12.1b96ede1.jpg") + "?" + Date.now();

},{}],"iN4gt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATA", ()=>DATA);
const DATA = [
    {
        img: "1",
        title: "IT and Engineering",
        description: "Building the future with technology and innovation",
        count: 43,
        members: [
            {
                name: "Lizzie Wells",
                img: "6"
            },
            {
                name: "Susie Kelley",
                img: "7"
            },
            {
                name: "Dora Norris",
                img: "8"
            },
            {
                name: "Ola Briggs",
                img: "9"
            },
            {
                name: "Jesse Vega",
                img: "10"
            },
            {
                name: "Gabriel Richards",
                img: "11"
            }
        ]
    },
    {
        img: "3",
        title: "UI and Design",
        description: "Crafting user experiences through exceptional design",
        count: 20,
        members: [
            {
                name: "Chase Chavez",
                img: "2"
            },
            {
                name: "Beatrice Tyler",
                img: "10"
            },
            {
                name: "Lura Willis",
                img: "11"
            },
            {
                name: "Arthur Stevens",
                img: "3"
            },
            {
                name: "Tillie Woods",
                img: "9"
            },
            {
                name: "Howard Holland",
                img: "4"
            }
        ]
    },
    {
        img: "2",
        title: "Sales and Marketing",
        description: "Where strategy meets execution in sales and marketing",
        count: 32,
        members: [
            {
                name: "Lucile Lamb",
                img: "3"
            },
            {
                name: "Josie Day",
                img: "5"
            },
            {
                name: "Ivan Higgins",
                img: "1"
            },
            {
                name: "Katharine Gill",
                img: "2"
            },
            {
                name: "Amy Russell",
                img: "16"
            },
            {
                name: "Blake Allison",
                img: "15"
            }
        ]
    },
    {
        img: "3",
        title: "Search Engine Optimization",
        description: "Boosting visibility and rankings with SEO strategies",
        count: 25,
        members: [
            {
                name: "Mina Daniels",
                img: "4"
            },
            {
                name: "Francis Duncan",
                img: "10"
            },
            {
                name: "Chad Brock",
                img: "9"
            },
            {
                name: "Raymond Morales",
                img: "14"
            },
            {
                name: "Nettie Floyd",
                img: "11"
            },
            {
                name: "Clarence Bass",
                img: "7"
            }
        ]
    },
    {
        img: "4",
        title: "Human Resource Management",
        description: "Maximizing employee potential with HR expertise",
        count: 24,
        members: [
            {
                name: "Ruby Ramsey",
                img: "12"
            },
            {
                name: "Nettie Becker",
                img: "13"
            },
            {
                name: "Kathryn Spencer",
                img: "14"
            },
            {
                name: "Ronald Delgado",
                img: "15"
            },
            {
                name: "Stella Ramos",
                img: "16"
            },
            {
                name: "John Jefferson",
                img: "12"
            }
        ]
    },
    {
        img: "5",
        title: "Research and Development",
        description: "Driving innovation through dedicated R&D efforts",
        count: 10,
        members: [
            {
                name: "Georgia Ruiz",
                img: "6"
            },
            {
                name: "Peter Warner",
                img: "7"
            },
            {
                name: "Virginia Hansen",
                img: "8"
            },
            {
                name: "Ora Hughes",
                img: "9"
            },
            {
                name: "Mathilda Ruiz",
                img: "10"
            }
        ]
    },
    {
        img: "6",
        title: "AI and ML",
        description: "Leading the way in AI and ML advancements",
        count: 8,
        members: [
            {
                name: "Georgia Ruiz",
                img: "9"
            },
            {
                name: "Peter Warner",
                img: "10"
            },
            {
                name: "Virginia Hansen",
                img: "11"
            },
            {
                name: "Ora Hughes",
                img: "12"
            },
            {
                name: "Mathilda Ruiz",
                img: "13"
            }
        ]
    },
    {
        img: "7",
        title: "Finance and Accounting",
        description: "Nulla labore excepteur suntelit nostrud labore aliqua",
        count: 4,
        members: [
            {
                name: "Georgia Ruiz",
                img: "6"
            },
            {
                name: "Peter Warner",
                img: "7"
            },
            {
                name: "Virginia Hansen",
                img: "8"
            },
            {
                name: "Ora Hughes",
                img: "9"
            }
        ]
    },
    {
        img: "8",
        title: "Customer Support",
        description: "Connecting with customers through empathetic service",
        count: 4,
        members: [
            {
                name: "Georgia Ruiz",
                img: "15"
            },
            {
                name: "Peter Warner",
                img: "14"
            },
            {
                name: "Virginia Hansen",
                img: "13"
            },
            {
                name: "Ora Hughes",
                img: "12"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"45R1J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "demo", ()=>demo);
var _bootstrap = require("bootstrap");
const demo = ()=>{
    //----------------------------------------------
    // TOC
    //----------------------------------------------
    const TOC_WRAPPER = document.getElementById("toc-wrapper");
    if (TOC_WRAPPER) {
        let tocTitles = document.querySelectorAll(".card-title");
        let tocGroupTitles = document.querySelectorAll(".card-group-title");
        let list = "";
        let titles = "";
        if (tocGroupTitles.length > 0) titles = tocGroupTitles;
        else titles = tocTitles;
        titles.forEach((item)=>{
            let id = item.innerText.replace(/\s+/g, "-").toLowerCase();
            item.parentNode.id = id;
            list += `<a class="dropdown-item" href="#${id}">${item.innerText}</a>`;
        });
        TOC_WRAPPER.innerHTML = `<div class="dropdown">
                                    <button class="icon-link" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="ph ph-list-dashes"></i>
                                        Navigate
                                        <i class="ph ph-caret-down fs-7"></i>
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-end">
                                        ${list}
                                    </div>
                                </div>`;
    }
    //----------------------------------------------
    // Toast
    //----------------------------------------------
    const toastTrigger = document.getElementById("liveToastBtn");
    const toastLiveExample = document.getElementById("liveToast");
    if (toastTrigger) {
        if (toastTrigger) {
            const toastBootstrap = _bootstrap.Toast.getOrCreateInstance(toastLiveExample);
            toastTrigger.addEventListener("click", ()=>{
                toastBootstrap.show();
            });
        }
    }
};

},{"bootstrap":"94c0v","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"94c0v":[function(require,module,exports,__globalThis) {
/*!
  * Bootstrap v5.3.6 (https://getbootstrap.com/)
  * Copyright 2011-2025 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Alert", ()=>Alert);
parcelHelpers.export(exports, "Button", ()=>Button);
parcelHelpers.export(exports, "Carousel", ()=>Carousel);
parcelHelpers.export(exports, "Collapse", ()=>Collapse);
parcelHelpers.export(exports, "Dropdown", ()=>Dropdown);
parcelHelpers.export(exports, "Modal", ()=>Modal);
parcelHelpers.export(exports, "Offcanvas", ()=>Offcanvas);
parcelHelpers.export(exports, "Popover", ()=>Popover);
parcelHelpers.export(exports, "ScrollSpy", ()=>ScrollSpy);
parcelHelpers.export(exports, "Tab", ()=>Tab);
parcelHelpers.export(exports, "Toast", ()=>Toast);
parcelHelpers.export(exports, "Tooltip", ()=>Tooltip);
var _core = require("@popperjs/core");
/**
 * --------------------------------------------------------------------------
 * Bootstrap dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const elementMap = new Map();
const Data = {
    set (element, key, instance) {
        if (!elementMap.has(element)) elementMap.set(element, new Map());
        const instanceMap = elementMap.get(element);
        // make it clear we only want one instance per element
        // can be removed later when multiple key/instances are fine to be used
        if (!instanceMap.has(key) && instanceMap.size !== 0) {
            // eslint-disable-next-line no-console
            console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
            return;
        }
        instanceMap.set(key, instance);
    },
    get (element, key) {
        if (elementMap.has(element)) return elementMap.get(element).get(key) || null;
        return null;
    },
    remove (element, key) {
        if (!elementMap.has(element)) return;
        const instanceMap = elementMap.get(element);
        instanceMap.delete(key);
        // free up element references if there are no instances left for an element
        if (instanceMap.size === 0) elementMap.delete(element);
    }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ const MAX_UID = 1000000;
const MILLISECONDS_MULTIPLIER = 1000;
const TRANSITION_END = 'transitionend';
/**
 * Properly escape IDs selectors to handle weird IDs
 * @param {string} selector
 * @returns {string}
 */ const parseSelector = (selector)=>{
    if (selector && window.CSS && window.CSS.escape) // document.querySelector needs escaping to handle IDs (html5+) containing for instance /
    selector = selector.replace(/#([^\s"#']+)/g, (match, id)=>`#${CSS.escape(id)}`);
    return selector;
};
// Shout-out Angus Croll (https://goo.gl/pxwQGp)
const toType = (object)=>{
    if (object === null || object === undefined) return `${object}`;
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
};
/**
 * Public Util API
 */ const getUID = (prefix)=>{
    do prefix += Math.floor(Math.random() * MAX_UID);
    while (document.getElementById(prefix));
    return prefix;
};
const getTransitionDurationFromElement = (element)=>{
    if (!element) return 0;
    // Get transition-duration of the element
    let { transitionDuration, transitionDelay } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay);
    // Return 0 if element or transition duration is not found
    if (!floatTransitionDuration && !floatTransitionDelay) return 0;
    // If multiple durations are defined, take the first
    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};
const triggerTransitionEnd = (element)=>{
    element.dispatchEvent(new Event(TRANSITION_END));
};
const isElement = (object)=>{
    if (!object || typeof object !== 'object') return false;
    if (typeof object.jquery !== 'undefined') object = object[0];
    return typeof object.nodeType !== 'undefined';
};
const getElement = (object)=>{
    // it's a jQuery object or a node element
    if (isElement(object)) return object.jquery ? object[0] : object;
    if (typeof object === 'string' && object.length > 0) return document.querySelector(parseSelector(object));
    return null;
};
const isVisible = (element)=>{
    if (!isElement(element) || element.getClientRects().length === 0) return false;
    const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    // Handle `details` element as its content may falsie appear visible when it is closed
    const closedDetails = element.closest('details:not([open])');
    if (!closedDetails) return elementIsVisible;
    if (closedDetails !== element) {
        const summary = element.closest('summary');
        if (summary && summary.parentNode !== closedDetails) return false;
        if (summary === null) return false;
    }
    return elementIsVisible;
};
const isDisabled = (element)=>{
    if (!element || element.nodeType !== Node.ELEMENT_NODE) return true;
    if (element.classList.contains('disabled')) return true;
    if (typeof element.disabled !== 'undefined') return element.disabled;
    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
};
const findShadowRoot = (element)=>{
    if (!document.documentElement.attachShadow) return null;
    // Can find the shadow root otherwise it'll return the document
    if (typeof element.getRootNode === 'function') {
        const root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) return element;
    // when we don't find a shadow root
    if (!element.parentNode) return null;
    return findShadowRoot(element.parentNode);
};
const noop = ()=>{};
/**
 * Trick to restart an element's animation
 *
 * @param {HTMLElement} element
 * @return void
 *
 * @see https://www.harrytheo.com/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
 */ const reflow = (element)=>{
    element.offsetHeight; // eslint-disable-line no-unused-expressions
};
const getjQuery = ()=>{
    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) return window.jQuery;
    return null;
};
const DOMContentLoadedCallbacks = [];
const onDOMContentLoaded = (callback)=>{
    if (document.readyState === 'loading') {
        // add listener on the first call when the document is in loading state
        if (!DOMContentLoadedCallbacks.length) document.addEventListener('DOMContentLoaded', ()=>{
            for (const callback of DOMContentLoadedCallbacks)callback();
        });
        DOMContentLoadedCallbacks.push(callback);
    } else callback();
};
const isRTL = ()=>document.documentElement.dir === 'rtl';
const defineJQueryPlugin = (plugin)=>{
    onDOMContentLoaded(()=>{
        const $ = getjQuery();
        /* istanbul ignore if */ if ($) {
            const name = plugin.NAME;
            const JQUERY_NO_CONFLICT = $.fn[name];
            $.fn[name] = plugin.jQueryInterface;
            $.fn[name].Constructor = plugin;
            $.fn[name].noConflict = ()=>{
                $.fn[name] = JQUERY_NO_CONFLICT;
                return plugin.jQueryInterface;
            };
        }
    });
};
const execute = (possibleCallback, args = [], defaultValue = possibleCallback)=>{
    return typeof possibleCallback === 'function' ? possibleCallback.call(...args) : defaultValue;
};
const executeAfterTransition = (callback, transitionElement, waitForTransition = true)=>{
    if (!waitForTransition) {
        execute(callback);
        return;
    }
    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;
    const handler = ({ target })=>{
        if (target !== transitionElement) return;
        called = true;
        transitionElement.removeEventListener(TRANSITION_END, handler);
        execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(()=>{
        if (!called) triggerTransitionEnd(transitionElement);
    }, emulatedDuration);
};
/**
 * Return the previous/next element of a list.
 *
 * @param {array} list    The list of elements
 * @param activeElement   The active element
 * @param shouldGetNext   Choose to get next or previous element
 * @param isCycleAllowed
 * @return {Element|elem} The proper element
 */ const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed)=>{
    const listLength = list.length;
    let index = list.indexOf(activeElement);
    // if the element does not exist in the list return an element
    // depending on the direction and if cycle is allowed
    if (index === -1) return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) index = (index + listLength) % listLength;
    return list[Math.max(0, Math.min(index, listLength - 1))];
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap dom/event-handler.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
const stripNameRegex = /\..*/;
const stripUidRegex = /::\d+$/;
const eventRegistry = {}; // Events storage
let uidEvent = 1;
const customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
};
const nativeEvents = new Set([
    'click',
    'dblclick',
    'mouseup',
    'mousedown',
    'contextmenu',
    'mousewheel',
    'DOMMouseScroll',
    'mouseover',
    'mouseout',
    'mousemove',
    'selectstart',
    'selectend',
    'keydown',
    'keypress',
    'keyup',
    'orientationchange',
    'touchstart',
    'touchmove',
    'touchend',
    'touchcancel',
    'pointerdown',
    'pointermove',
    'pointerup',
    'pointerleave',
    'pointercancel',
    'gesturestart',
    'gesturechange',
    'gestureend',
    'focus',
    'blur',
    'change',
    'reset',
    'select',
    'submit',
    'focusin',
    'focusout',
    'load',
    'unload',
    'beforeunload',
    'resize',
    'move',
    'DOMContentLoaded',
    'readystatechange',
    'error',
    'abort',
    'scroll'
]);
/**
 * Private methods
 */ function makeEventUid(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
}
function getElementEvents(element) {
    const uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
}
function bootstrapHandler(element, fn) {
    return function handler(event) {
        hydrateObj(event, {
            delegateTarget: element
        });
        if (handler.oneOff) EventHandler.off(element, event.type, fn);
        return fn.apply(element, [
            event
        ]);
    };
}
function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
        const domElements = element.querySelectorAll(selector);
        for(let { target } = event; target && target !== this; target = target.parentNode)for (const domElement of domElements){
            if (domElement !== target) continue;
            hydrateObj(event, {
                delegateTarget: target
            });
            if (handler.oneOff) EventHandler.off(element, event.type, selector, fn);
            return fn.apply(target, [
                event
            ]);
        }
    };
}
function findHandler(events, callable, delegationSelector = null) {
    return Object.values(events).find((event)=>event.callable === callable && event.delegationSelector === delegationSelector);
}
function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === 'string';
    // TODO: tooltip passes `false` instead of selector, so we need to check
    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
    let typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) typeEvent = originalTypeEvent;
    return [
        isDelegated,
        callable,
        typeEvent
    ];
}
function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) return;
    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does
    if (originalTypeEvent in customEvents) {
        const wrapFunction = (fn)=>{
            return function(event) {
                if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) return fn.call(this, event);
            };
        };
        callable = wrapFunction(callable);
    }
    const events = getElementEvents(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
        previousFunction.oneOff = previousFunction.oneOff && oneOff;
        return;
    }
    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
    const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn.delegationSelector = isDelegated ? handler : null;
    fn.callable = callable;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, isDelegated);
}
function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn = findHandler(events[typeEvent], handler, delegationSelector);
    if (!fn) return;
    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
}
function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};
    for (const [handlerKey, event] of Object.entries(storeElementEvent))if (handlerKey.includes(namespace)) removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
}
function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
}
const EventHandler = {
    on (element, event, handler, delegationFunction) {
        addHandler(element, event, handler, delegationFunction, false);
    },
    one (element, event, handler, delegationFunction) {
        addHandler(element, event, handler, delegationFunction, true);
    },
    off (element, originalTypeEvent, handler, delegationFunction) {
        if (typeof originalTypeEvent !== 'string' || !element) return;
        const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
        const inNamespace = typeEvent !== originalTypeEvent;
        const events = getElementEvents(element);
        const storeElementEvent = events[typeEvent] || {};
        const isNamespace = originalTypeEvent.startsWith('.');
        if (typeof callable !== 'undefined') {
            // Simplest case: handler is passed, remove that listener ONLY.
            if (!Object.keys(storeElementEvent).length) return;
            removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
            return;
        }
        if (isNamespace) for (const elementEvent of Object.keys(events))removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        for (const [keyHandlers, event] of Object.entries(storeElementEvent)){
            const handlerKey = keyHandlers.replace(stripUidRegex, '');
            if (!inNamespace || originalTypeEvent.includes(handlerKey)) removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
    },
    trigger (element, event, args) {
        if (typeof event !== 'string' || !element) return null;
        const $ = getjQuery();
        const typeEvent = getTypeEvent(event);
        const inNamespace = event !== typeEvent;
        let jQueryEvent = null;
        let bubbles = true;
        let nativeDispatch = true;
        let defaultPrevented = false;
        if (inNamespace && $) {
            jQueryEvent = $.Event(event, args);
            $(element).trigger(jQueryEvent);
            bubbles = !jQueryEvent.isPropagationStopped();
            nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
            defaultPrevented = jQueryEvent.isDefaultPrevented();
        }
        const evt = hydrateObj(new Event(event, {
            bubbles,
            cancelable: true
        }), args);
        if (defaultPrevented) evt.preventDefault();
        if (nativeDispatch) element.dispatchEvent(evt);
        if (evt.defaultPrevented && jQueryEvent) jQueryEvent.preventDefault();
        return evt;
    }
};
function hydrateObj(obj, meta = {}) {
    for (const [key, value] of Object.entries(meta))try {
        obj[key] = value;
    } catch (_unused) {
        Object.defineProperty(obj, key, {
            configurable: true,
            get () {
                return value;
            }
        });
    }
    return obj;
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ function normalizeData(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    if (value === Number(value).toString()) return Number(value);
    if (value === '' || value === 'null') return null;
    if (typeof value !== 'string') return value;
    try {
        return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
        return value;
    }
}
function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, (chr)=>`-${chr.toLowerCase()}`);
}
const Manipulator = {
    setDataAttribute (element, key, value) {
        element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },
    removeDataAttribute (element, key) {
        element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },
    getDataAttributes (element) {
        if (!element) return {};
        const attributes = {};
        const bsKeys = Object.keys(element.dataset).filter((key)=>key.startsWith('bs') && !key.startsWith('bsConfig'));
        for (const key of bsKeys){
            let pureKey = key.replace(/^bs/, '');
            pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1);
            attributes[pureKey] = normalizeData(element.dataset[key]);
        }
        return attributes;
    },
    getDataAttribute (element, key) {
        return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/config.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Class definition
 */ class Config {
    // Getters
    static get Default() {
        return {};
    }
    static get DefaultType() {
        return {};
    }
    static get NAME() {
        throw new Error('You have to implement the static method "NAME", for each component!');
    }
    _getConfig(config) {
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
    }
    _configAfterMerge(config) {
        return config;
    }
    _mergeConfigObj(config, element) {
        const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse
        return {
            ...this.constructor.Default,
            ...typeof jsonConfig === 'object' ? jsonConfig : {},
            ...isElement(element) ? Manipulator.getDataAttributes(element) : {},
            ...typeof config === 'object' ? config : {}
        };
    }
    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
        for (const [property, expectedTypes] of Object.entries(configTypes)){
            const value = config[property];
            const valueType = isElement(value) ? 'element' : toType(value);
            if (!new RegExp(expectedTypes).test(valueType)) throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap base-component.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const VERSION = '5.3.6';
/**
 * Class definition
 */ class BaseComponent extends Config {
    constructor(element, config){
        super();
        element = getElement(element);
        if (!element) return;
        this._element = element;
        this._config = this._getConfig(config);
        Data.set(this._element, this.constructor.DATA_KEY, this);
    }
    // Public
    dispose() {
        Data.remove(this._element, this.constructor.DATA_KEY);
        EventHandler.off(this._element, this.constructor.EVENT_KEY);
        for (const propertyName of Object.getOwnPropertyNames(this))this[propertyName] = null;
    }
    // Private
    _queueCallback(callback, element, isAnimated = true) {
        executeAfterTransition(callback, element, isAnimated);
    }
    _getConfig(config) {
        config = this._mergeConfigObj(config, this._element);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
    }
    // Static
    static getInstance(element) {
        return Data.get(getElement(element), this.DATA_KEY);
    }
    static getOrCreateInstance(element, config = {}) {
        return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
    }
    static get VERSION() {
        return VERSION;
    }
    static get DATA_KEY() {
        return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
        return `.${this.DATA_KEY}`;
    }
    static eventName(name) {
        return `${name}${this.EVENT_KEY}`;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ const getSelector = (element)=>{
    let selector = element.getAttribute('data-bs-target');
    if (!selector || selector === '#') {
        let hrefAttribute = element.getAttribute('href');
        // The only valid content that could double as a selector are IDs or classes,
        // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
        // `document.querySelector` will rightfully complain it is invalid.
        // See https://github.com/twbs/bootstrap/issues/32273
        if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) return null;
        // Just in case some CMS puts out a full URL with the anchor appended
        if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) hrefAttribute = `#${hrefAttribute.split('#')[1]}`;
        selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
    }
    return selector ? selector.split(',').map((sel)=>parseSelector(sel)).join(',') : null;
};
const SelectorEngine = {
    find (selector, element = document.documentElement) {
        return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne (selector, element = document.documentElement) {
        return Element.prototype.querySelector.call(element, selector);
    },
    children (element, selector) {
        return [].concat(...element.children).filter((child)=>child.matches(selector));
    },
    parents (element, selector) {
        const parents = [];
        let ancestor = element.parentNode.closest(selector);
        while(ancestor){
            parents.push(ancestor);
            ancestor = ancestor.parentNode.closest(selector);
        }
        return parents;
    },
    prev (element, selector) {
        let previous = element.previousElementSibling;
        while(previous){
            if (previous.matches(selector)) return [
                previous
            ];
            previous = previous.previousElementSibling;
        }
        return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next (element, selector) {
        let next = element.nextElementSibling;
        while(next){
            if (next.matches(selector)) return [
                next
            ];
            next = next.nextElementSibling;
        }
        return [];
    },
    focusableChildren (element) {
        const focusables = [
            'a',
            'button',
            'input',
            'textarea',
            'select',
            'details',
            '[tabindex]',
            '[contenteditable="true"]'
        ].map((selector)=>`${selector}:not([tabindex^="-"])`).join(',');
        return this.find(focusables, element).filter((el)=>!isDisabled(el) && isVisible(el));
    },
    getSelectorFromElement (element) {
        const selector = getSelector(element);
        if (selector) return SelectorEngine.findOne(selector) ? selector : null;
        return null;
    },
    getElementFromSelector (element) {
        const selector = getSelector(element);
        return selector ? SelectorEngine.findOne(selector) : null;
    },
    getMultipleElementsFromSelector (element) {
        const selector = getSelector(element);
        return selector ? SelectorEngine.find(selector) : [];
    }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/component-functions.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ const enableDismissTrigger = (component, method = 'hide')=>{
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
        if ([
            'A',
            'AREA'
        ].includes(this.tagName)) event.preventDefault();
        if (isDisabled(this)) return;
        const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`);
        const instance = component.getOrCreateInstance(target);
        // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
        instance[method]();
    });
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$f = 'alert';
const DATA_KEY$a = 'bs.alert';
const EVENT_KEY$b = `.${DATA_KEY$a}`;
const EVENT_CLOSE = `close${EVENT_KEY$b}`;
const EVENT_CLOSED = `closed${EVENT_KEY$b}`;
const CLASS_NAME_FADE$5 = 'fade';
const CLASS_NAME_SHOW$8 = 'show';
/**
 * Class definition
 */ class Alert extends BaseComponent {
    // Getters
    static get NAME() {
        return NAME$f;
    }
    // Public
    close() {
        const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
        if (closeEvent.defaultPrevented) return;
        this._element.classList.remove(CLASS_NAME_SHOW$8);
        const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
        this._queueCallback(()=>this._destroyElement(), this._element, isAnimated);
    }
    // Private
    _destroyElement() {
        this._element.remove();
        EventHandler.trigger(this._element, EVENT_CLOSED);
        this.dispose();
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Alert.getOrCreateInstance(this);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config](this);
        });
    }
}
/**
 * Data API implementation
 */ enableDismissTrigger(Alert, 'close');
/**
 * jQuery
 */ defineJQueryPlugin(Alert);
/**
 * --------------------------------------------------------------------------
 * Bootstrap button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$e = 'button';
const DATA_KEY$9 = 'bs.button';
const EVENT_KEY$a = `.${DATA_KEY$9}`;
const DATA_API_KEY$6 = '.data-api';
const CLASS_NAME_ACTIVE$3 = 'active';
const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
/**
 * Class definition
 */ class Button extends BaseComponent {
    // Getters
    static get NAME() {
        return NAME$e;
    }
    // Public
    toggle() {
        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Button.getOrCreateInstance(this);
            if (config === 'toggle') data[config]();
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event)=>{
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
});
/**
 * jQuery
 */ defineJQueryPlugin(Button);
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/swipe.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$d = 'swipe';
const EVENT_KEY$9 = '.bs.swipe';
const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
const POINTER_TYPE_TOUCH = 'touch';
const POINTER_TYPE_PEN = 'pen';
const CLASS_NAME_POINTER_EVENT = 'pointer-event';
const SWIPE_THRESHOLD = 40;
const Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
};
const DefaultType$c = {
    endCallback: '(function|null)',
    leftCallback: '(function|null)',
    rightCallback: '(function|null)'
};
/**
 * Class definition
 */ class Swipe extends Config {
    constructor(element, config){
        super();
        this._element = element;
        if (!element || !Swipe.isSupported()) return;
        this._config = this._getConfig(config);
        this._deltaX = 0;
        this._supportPointerEvents = Boolean(window.PointerEvent);
        this._initEvents();
    }
    // Getters
    static get Default() {
        return Default$c;
    }
    static get DefaultType() {
        return DefaultType$c;
    }
    static get NAME() {
        return NAME$d;
    }
    // Public
    dispose() {
        EventHandler.off(this._element, EVENT_KEY$9);
    }
    // Private
    _start(event) {
        if (!this._supportPointerEvents) {
            this._deltaX = event.touches[0].clientX;
            return;
        }
        if (this._eventIsPointerPenTouch(event)) this._deltaX = event.clientX;
    }
    _end(event) {
        if (this._eventIsPointerPenTouch(event)) this._deltaX = event.clientX - this._deltaX;
        this._handleSwipe();
        execute(this._config.endCallback);
    }
    _move(event) {
        this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
        const absDeltaX = Math.abs(this._deltaX);
        if (absDeltaX <= SWIPE_THRESHOLD) return;
        const direction = absDeltaX / this._deltaX;
        this._deltaX = 0;
        if (!direction) return;
        execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
        if (this._supportPointerEvents) {
            EventHandler.on(this._element, EVENT_POINTERDOWN, (event)=>this._start(event));
            EventHandler.on(this._element, EVENT_POINTERUP, (event)=>this._end(event));
            this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
            EventHandler.on(this._element, EVENT_TOUCHSTART, (event)=>this._start(event));
            EventHandler.on(this._element, EVENT_TOUCHMOVE, (event)=>this._move(event));
            EventHandler.on(this._element, EVENT_TOUCHEND, (event)=>this._end(event));
        }
    }
    _eventIsPointerPenTouch(event) {
        return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    }
    // Static
    static isSupported() {
        return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$c = 'carousel';
const DATA_KEY$8 = 'bs.carousel';
const EVENT_KEY$8 = `.${DATA_KEY$8}`;
const DATA_API_KEY$5 = '.data-api';
const ARROW_LEFT_KEY$1 = 'ArrowLeft';
const ARROW_RIGHT_KEY$1 = 'ArrowRight';
const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch
const ORDER_NEXT = 'next';
const ORDER_PREV = 'prev';
const DIRECTION_LEFT = 'left';
const DIRECTION_RIGHT = 'right';
const EVENT_SLIDE = `slide${EVENT_KEY$8}`;
const EVENT_SLID = `slid${EVENT_KEY$8}`;
const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
const CLASS_NAME_CAROUSEL = 'carousel';
const CLASS_NAME_ACTIVE$2 = 'active';
const CLASS_NAME_SLIDE = 'slide';
const CLASS_NAME_END = 'carousel-item-end';
const CLASS_NAME_START = 'carousel-item-start';
const CLASS_NAME_NEXT = 'carousel-item-next';
const CLASS_NAME_PREV = 'carousel-item-prev';
const SELECTOR_ACTIVE = '.active';
const SELECTOR_ITEM = '.carousel-item';
const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
const SELECTOR_ITEM_IMG = '.carousel-item img';
const SELECTOR_INDICATORS = '.carousel-indicators';
const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
const KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
};
const Default$b = {
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    ride: false,
    touch: true,
    wrap: true
};
const DefaultType$b = {
    interval: '(number|boolean)',
    // TODO:v6 remove boolean support
    keyboard: 'boolean',
    pause: '(string|boolean)',
    ride: '(boolean|string)',
    touch: 'boolean',
    wrap: 'boolean'
};
/**
 * Class definition
 */ class Carousel extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._interval = null;
        this._activeElement = null;
        this._isSliding = false;
        this.touchTimeout = null;
        this._swipeHelper = null;
        this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
        this._addEventListeners();
        if (this._config.ride === CLASS_NAME_CAROUSEL) this.cycle();
    }
    // Getters
    static get Default() {
        return Default$b;
    }
    static get DefaultType() {
        return DefaultType$b;
    }
    static get NAME() {
        return NAME$c;
    }
    // Public
    next() {
        this._slide(ORDER_NEXT);
    }
    nextWhenVisible() {
        // FIXME TODO use `document.visibilityState`
        // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible
        if (!document.hidden && isVisible(this._element)) this.next();
    }
    prev() {
        this._slide(ORDER_PREV);
    }
    pause() {
        if (this._isSliding) triggerTransitionEnd(this._element);
        this._clearInterval();
    }
    cycle() {
        this._clearInterval();
        this._updateInterval();
        this._interval = setInterval(()=>this.nextWhenVisible(), this._config.interval);
    }
    _maybeEnableCycle() {
        if (!this._config.ride) return;
        if (this._isSliding) {
            EventHandler.one(this._element, EVENT_SLID, ()=>this.cycle());
            return;
        }
        this.cycle();
    }
    to(index) {
        const items = this._getItems();
        if (index > items.length - 1 || index < 0) return;
        if (this._isSliding) {
            EventHandler.one(this._element, EVENT_SLID, ()=>this.to(index));
            return;
        }
        const activeIndex = this._getItemIndex(this._getActive());
        if (activeIndex === index) return;
        const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
        this._slide(order, items[index]);
    }
    dispose() {
        if (this._swipeHelper) this._swipeHelper.dispose();
        super.dispose();
    }
    // Private
    _configAfterMerge(config) {
        config.defaultInterval = config.interval;
        return config;
    }
    _addEventListeners() {
        if (this._config.keyboard) EventHandler.on(this._element, EVENT_KEYDOWN$1, (event)=>this._keydown(event));
        if (this._config.pause === 'hover') {
            EventHandler.on(this._element, EVENT_MOUSEENTER$1, ()=>this.pause());
            EventHandler.on(this._element, EVENT_MOUSELEAVE$1, ()=>this._maybeEnableCycle());
        }
        if (this._config.touch && Swipe.isSupported()) this._addTouchEventListeners();
    }
    _addTouchEventListeners() {
        for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element))EventHandler.on(img, EVENT_DRAG_START, (event)=>event.preventDefault());
        const endCallBack = ()=>{
            if (this._config.pause !== 'hover') return;
            // If it's a touch-enabled device, mouseenter/leave are fired as
            // part of the mouse compatibility events on first tap - the carousel
            // would stop cycling until user tapped out of it;
            // here, we listen for touchend, explicitly pause the carousel
            // (as if it's the second time we tap on it, mouseenter compat event
            // is NOT fired) and after a timeout (to allow for mouse compatibility
            // events to fire) we explicitly restart cycling
            this.pause();
            if (this.touchTimeout) clearTimeout(this.touchTimeout);
            this.touchTimeout = setTimeout(()=>this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
        };
        const swipeConfig = {
            leftCallback: ()=>this._slide(this._directionToOrder(DIRECTION_LEFT)),
            rightCallback: ()=>this._slide(this._directionToOrder(DIRECTION_RIGHT)),
            endCallback: endCallBack
        };
        this._swipeHelper = new Swipe(this._element, swipeConfig);
    }
    _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) return;
        const direction = KEY_TO_DIRECTION[event.key];
        if (direction) {
            event.preventDefault();
            this._slide(this._directionToOrder(direction));
        }
    }
    _getItemIndex(element) {
        return this._getItems().indexOf(element);
    }
    _setActiveIndicatorElement(index) {
        if (!this._indicatorsElement) return;
        const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute('aria-current');
        const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
        if (newActiveIndicator) {
            newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
            newActiveIndicator.setAttribute('aria-current', 'true');
        }
    }
    _updateInterval() {
        const element = this._activeElement || this._getActive();
        if (!element) return;
        const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
        this._config.interval = elementInterval || this._config.defaultInterval;
    }
    _slide(order, element = null) {
        if (this._isSliding) return;
        const activeElement = this._getActive();
        const isNext = order === ORDER_NEXT;
        const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
        if (nextElement === activeElement) return;
        const nextElementIndex = this._getItemIndex(nextElement);
        const triggerEvent = (eventName)=>{
            return EventHandler.trigger(this._element, eventName, {
                relatedTarget: nextElement,
                direction: this._orderToDirection(order),
                from: this._getItemIndex(activeElement),
                to: nextElementIndex
            });
        };
        const slideEvent = triggerEvent(EVENT_SLIDE);
        if (slideEvent.defaultPrevented) return;
        if (!activeElement || !nextElement) // Some weirdness is happening, so we bail
        // TODO: change tests that use empty divs to avoid this check
        return;
        const isCycling = Boolean(this._interval);
        this.pause();
        this._isSliding = true;
        this._setActiveIndicatorElement(nextElementIndex);
        this._activeElement = nextElement;
        const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
        const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);
        const completeCallBack = ()=>{
            nextElement.classList.remove(directionalClassName, orderClassName);
            nextElement.classList.add(CLASS_NAME_ACTIVE$2);
            activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
            this._isSliding = false;
            triggerEvent(EVENT_SLID);
        };
        this._queueCallback(completeCallBack, activeElement, this._isAnimated());
        if (isCycling) this.cycle();
    }
    _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_SLIDE);
    }
    _getActive() {
        return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
    }
    _getItems() {
        return SelectorEngine.find(SELECTOR_ITEM, this._element);
    }
    _clearInterval() {
        if (this._interval) {
            clearInterval(this._interval);
            this._interval = null;
        }
    }
    _directionToOrder(direction) {
        if (isRTL()) return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
    _orderToDirection(order) {
        if (isRTL()) return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Carousel.getOrCreateInstance(this, config);
            if (typeof config === 'number') {
                data.to(config);
                return;
            }
            if (typeof config === 'string') {
                if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
                data[config]();
            }
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) return;
    event.preventDefault();
    const carousel = Carousel.getOrCreateInstance(target);
    const slideIndex = this.getAttribute('data-bs-slide-to');
    if (slideIndex) {
        carousel.to(slideIndex);
        carousel._maybeEnableCycle();
        return;
    }
    if (Manipulator.getDataAttribute(this, 'slide') === 'next') {
        carousel.next();
        carousel._maybeEnableCycle();
        return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
});
EventHandler.on(window, EVENT_LOAD_DATA_API$3, ()=>{
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    for (const carousel of carousels)Carousel.getOrCreateInstance(carousel);
});
/**
 * jQuery
 */ defineJQueryPlugin(Carousel);
/**
 * --------------------------------------------------------------------------
 * Bootstrap collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$b = 'collapse';
const DATA_KEY$7 = 'bs.collapse';
const EVENT_KEY$7 = `.${DATA_KEY$7}`;
const DATA_API_KEY$4 = '.data-api';
const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
const CLASS_NAME_SHOW$7 = 'show';
const CLASS_NAME_COLLAPSE = 'collapse';
const CLASS_NAME_COLLAPSING = 'collapsing';
const CLASS_NAME_COLLAPSED = 'collapsed';
const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
const WIDTH = 'width';
const HEIGHT = 'height';
const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
const Default$a = {
    parent: null,
    toggle: true
};
const DefaultType$a = {
    parent: '(null|element)',
    toggle: 'boolean'
};
/**
 * Class definition
 */ class Collapse extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._isTransitioning = false;
        this._triggerArray = [];
        const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
        for (const elem of toggleList){
            const selector = SelectorEngine.getSelectorFromElement(elem);
            const filterElement = SelectorEngine.find(selector).filter((foundElement)=>foundElement === this._element);
            if (selector !== null && filterElement.length) this._triggerArray.push(elem);
        }
        this._initializeChildren();
        if (!this._config.parent) this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
        if (this._config.toggle) this.toggle();
    }
    // Getters
    static get Default() {
        return Default$a;
    }
    static get DefaultType() {
        return DefaultType$a;
    }
    static get NAME() {
        return NAME$b;
    }
    // Public
    toggle() {
        if (this._isShown()) this.hide();
        else this.show();
    }
    show() {
        if (this._isTransitioning || this._isShown()) return;
        let activeChildren = [];
        // find active children
        if (this._config.parent) activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element)=>element !== this._element).map((element)=>Collapse.getOrCreateInstance(element, {
                toggle: false
            }));
        if (activeChildren.length && activeChildren[0]._isTransitioning) return;
        const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
        if (startEvent.defaultPrevented) return;
        for (const activeInstance of activeChildren)activeInstance.hide();
        const dimension = this._getDimension();
        this._element.classList.remove(CLASS_NAME_COLLAPSE);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.style[dimension] = 0;
        this._addAriaAndCollapsedClass(this._triggerArray, true);
        this._isTransitioning = true;
        const complete = ()=>{
            this._isTransitioning = false;
            this._element.classList.remove(CLASS_NAME_COLLAPSING);
            this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
            this._element.style[dimension] = '';
            EventHandler.trigger(this._element, EVENT_SHOWN$6);
        };
        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        const scrollSize = `scroll${capitalizedDimension}`;
        this._queueCallback(complete, this._element, true);
        this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }
    hide() {
        if (this._isTransitioning || !this._isShown()) return;
        const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
        if (startEvent.defaultPrevented) return;
        const dimension = this._getDimension();
        this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        for (const trigger of this._triggerArray){
            const element = SelectorEngine.getElementFromSelector(trigger);
            if (element && !this._isShown(element)) this._addAriaAndCollapsedClass([
                trigger
            ], false);
        }
        this._isTransitioning = true;
        const complete = ()=>{
            this._isTransitioning = false;
            this._element.classList.remove(CLASS_NAME_COLLAPSING);
            this._element.classList.add(CLASS_NAME_COLLAPSE);
            EventHandler.trigger(this._element, EVENT_HIDDEN$6);
        };
        this._element.style[dimension] = '';
        this._queueCallback(complete, this._element, true);
    }
    // Private
    _isShown(element = this._element) {
        return element.classList.contains(CLASS_NAME_SHOW$7);
    }
    _configAfterMerge(config) {
        config.toggle = Boolean(config.toggle); // Coerce string values
        config.parent = getElement(config.parent);
        return config;
    }
    _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
    _initializeChildren() {
        if (!this._config.parent) return;
        const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
        for (const element of children){
            const selected = SelectorEngine.getElementFromSelector(element);
            if (selected) this._addAriaAndCollapsedClass([
                element
            ], this._isShown(selected));
        }
    }
    _getFirstLevelChildren(selector) {
        const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
        // remove children if greater depth
        return SelectorEngine.find(selector, this._config.parent).filter((element)=>!children.includes(element));
    }
    _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) return;
        for (const element of triggerArray){
            element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
            element.setAttribute('aria-expanded', isOpen);
        }
    }
    // Static
    static jQueryInterface(config) {
        const _config = {};
        if (typeof config === 'string' && /show|hide/.test(config)) _config.toggle = false;
        return this.each(function() {
            const data = Collapse.getOrCreateInstance(this, _config);
            if (typeof config === 'string') {
                if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                data[config]();
            }
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') event.preventDefault();
    for (const element of SelectorEngine.getMultipleElementsFromSelector(this))Collapse.getOrCreateInstance(element, {
        toggle: false
    }).toggle();
});
/**
 * jQuery
 */ defineJQueryPlugin(Collapse);
/**
 * --------------------------------------------------------------------------
 * Bootstrap dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$a = 'dropdown';
const DATA_KEY$6 = 'bs.dropdown';
const EVENT_KEY$6 = `.${DATA_KEY$6}`;
const DATA_API_KEY$3 = '.data-api';
const ESCAPE_KEY$2 = 'Escape';
const TAB_KEY$1 = 'Tab';
const ARROW_UP_KEY$1 = 'ArrowUp';
const ARROW_DOWN_KEY$1 = 'ArrowDown';
const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button
const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
const CLASS_NAME_SHOW$6 = 'show';
const CLASS_NAME_DROPUP = 'dropup';
const CLASS_NAME_DROPEND = 'dropend';
const CLASS_NAME_DROPSTART = 'dropstart';
const CLASS_NAME_DROPUP_CENTER = 'dropup-center';
const CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';
const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
const SELECTOR_MENU = '.dropdown-menu';
const SELECTOR_NAVBAR = '.navbar';
const SELECTOR_NAVBAR_NAV = '.navbar-nav';
const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
const PLACEMENT_TOPCENTER = 'top';
const PLACEMENT_BOTTOMCENTER = 'bottom';
const Default$9 = {
    autoClose: true,
    boundary: 'clippingParents',
    display: 'dynamic',
    offset: [
        0,
        2
    ],
    popperConfig: null,
    reference: 'toggle'
};
const DefaultType$9 = {
    autoClose: '(boolean|string)',
    boundary: '(string|element)',
    display: 'string',
    offset: '(array|string|function)',
    popperConfig: '(null|object|function)',
    reference: '(string|element|object)'
};
/**
 * Class definition
 */ class Dropdown extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._popper = null;
        this._parent = this._element.parentNode; // dropdown wrapper
        // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
        this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
        this._inNavbar = this._detectNavbar();
    }
    // Getters
    static get Default() {
        return Default$9;
    }
    static get DefaultType() {
        return DefaultType$9;
    }
    static get NAME() {
        return NAME$a;
    }
    // Public
    toggle() {
        return this._isShown() ? this.hide() : this.show();
    }
    show() {
        if (isDisabled(this._element) || this._isShown()) return;
        const relatedTarget = {
            relatedTarget: this._element
        };
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
        if (showEvent.defaultPrevented) return;
        this._createPopper();
        // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) for (const element of [].concat(...document.body.children))EventHandler.on(element, 'mouseover', noop);
        this._element.focus();
        this._element.setAttribute('aria-expanded', true);
        this._menu.classList.add(CLASS_NAME_SHOW$6);
        this._element.classList.add(CLASS_NAME_SHOW$6);
        EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
    }
    hide() {
        if (isDisabled(this._element) || !this._isShown()) return;
        const relatedTarget = {
            relatedTarget: this._element
        };
        this._completeHide(relatedTarget);
    }
    dispose() {
        if (this._popper) this._popper.destroy();
        super.dispose();
    }
    update() {
        this._inNavbar = this._detectNavbar();
        if (this._popper) this._popper.update();
    }
    // Private
    _completeHide(relatedTarget) {
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
        if (hideEvent.defaultPrevented) return;
        // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) for (const element of [].concat(...document.body.children))EventHandler.off(element, 'mouseover', noop);
        if (this._popper) this._popper.destroy();
        this._menu.classList.remove(CLASS_NAME_SHOW$6);
        this._element.classList.remove(CLASS_NAME_SHOW$6);
        this._element.setAttribute('aria-expanded', 'false');
        Manipulator.removeDataAttribute(this._menu, 'popper');
        EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
        // Explicitly return focus to the trigger element
        this._element.focus();
    }
    _getConfig(config) {
        config = super._getConfig(config);
        if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
        return config;
    }
    _createPopper() {
        if (typeof _core === 'undefined') throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org/docs/v2/)');
        let referenceElement = this._element;
        if (this._config.reference === 'parent') referenceElement = this._parent;
        else if (isElement(this._config.reference)) referenceElement = getElement(this._config.reference);
        else if (typeof this._config.reference === 'object') referenceElement = this._config.reference;
        const popperConfig = this._getPopperConfig();
        this._popper = _core.createPopper(referenceElement, this._menu, popperConfig);
    }
    _isShown() {
        return this._menu.classList.contains(CLASS_NAME_SHOW$6);
    }
    _getPlacement() {
        const parentDropdown = this._parent;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) return PLACEMENT_RIGHT;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) return PLACEMENT_LEFT;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) return PLACEMENT_TOPCENTER;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) return PLACEMENT_BOTTOMCENTER;
        // We need to trim the value because custom properties can also include spaces
        const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
    _detectNavbar() {
        return this._element.closest(SELECTOR_NAVBAR) !== null;
    }
    _getOffset() {
        const { offset } = this._config;
        if (typeof offset === 'string') return offset.split(',').map((value)=>Number.parseInt(value, 10));
        if (typeof offset === 'function') return (popperData)=>offset(popperData, this._element);
        return offset;
    }
    _getPopperConfig() {
        const defaultBsPopperConfig = {
            placement: this._getPlacement(),
            modifiers: [
                {
                    name: 'preventOverflow',
                    options: {
                        boundary: this._config.boundary
                    }
                },
                {
                    name: 'offset',
                    options: {
                        offset: this._getOffset()
                    }
                }
            ]
        };
        // Disable Popper if we have a static display or Dropdown is in Navbar
        if (this._inNavbar || this._config.display === 'static') {
            Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // TODO: v6 remove
            defaultBsPopperConfig.modifiers = [
                {
                    name: 'applyStyles',
                    enabled: false
                }
            ];
        }
        return {
            ...defaultBsPopperConfig,
            ...execute(this._config.popperConfig, [
                undefined,
                defaultBsPopperConfig
            ])
        };
    }
    _selectMenuItem({ key, target }) {
        const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element)=>isVisible(element));
        if (!items.length) return;
        // if target isn't included in items (e.g. when expanding the dropdown)
        // allow cycling to get the last item in case key equals ARROW_UP_KEY
        getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Dropdown.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
    static clearMenus(event) {
        if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) return;
        const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
        for (const toggle of openToggles){
            const context = Dropdown.getInstance(toggle);
            if (!context || context._config.autoClose === false) continue;
            const composedPath = event.composedPath();
            const isMenuTarget = composedPath.includes(context._menu);
            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) continue;
            // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu
            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) continue;
            const relatedTarget = {
                relatedTarget: context._element
            };
            if (event.type === 'click') relatedTarget.clickEvent = event;
            context._completeHide(relatedTarget);
        }
    }
    static dataApiKeydownHandler(event) {
        // If not an UP | DOWN | ESCAPE key => not a dropdown command
        // If input/textarea && if key is other than ESCAPE => not a dropdown command
        const isInput = /input|textarea/i.test(event.target.tagName);
        const isEscapeEvent = event.key === ESCAPE_KEY$2;
        const isUpOrDownEvent = [
            ARROW_UP_KEY$1,
            ARROW_DOWN_KEY$1
        ].includes(event.key);
        if (!isUpOrDownEvent && !isEscapeEvent) return;
        if (isInput && !isEscapeEvent) return;
        event.preventDefault();
        // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
        const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
        const instance = Dropdown.getOrCreateInstance(getToggleButton);
        if (isUpOrDownEvent) {
            event.stopPropagation();
            instance.show();
            instance._selectMenuItem(event);
            return;
        }
        if (instance._isShown()) {
            // else is escape and we check if it is shown
            event.stopPropagation();
            instance.hide();
            getToggleButton.focus();
        }
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
});
/**
 * jQuery
 */ defineJQueryPlugin(Dropdown);
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/backdrop.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$9 = 'backdrop';
const CLASS_NAME_FADE$4 = 'fade';
const CLASS_NAME_SHOW$5 = 'show';
const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
const Default$8 = {
    className: 'modal-backdrop',
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: 'body' // give the choice to place backdrop under different elements
};
const DefaultType$8 = {
    className: 'string',
    clickCallback: '(function|null)',
    isAnimated: 'boolean',
    isVisible: 'boolean',
    rootElement: '(element|string)'
};
/**
 * Class definition
 */ class Backdrop extends Config {
    constructor(config){
        super();
        this._config = this._getConfig(config);
        this._isAppended = false;
        this._element = null;
    }
    // Getters
    static get Default() {
        return Default$8;
    }
    static get DefaultType() {
        return DefaultType$8;
    }
    static get NAME() {
        return NAME$9;
    }
    // Public
    show(callback) {
        if (!this._config.isVisible) {
            execute(callback);
            return;
        }
        this._append();
        const element = this._getElement();
        if (this._config.isAnimated) reflow(element);
        element.classList.add(CLASS_NAME_SHOW$5);
        this._emulateAnimation(()=>{
            execute(callback);
        });
    }
    hide(callback) {
        if (!this._config.isVisible) {
            execute(callback);
            return;
        }
        this._getElement().classList.remove(CLASS_NAME_SHOW$5);
        this._emulateAnimation(()=>{
            this.dispose();
            execute(callback);
        });
    }
    dispose() {
        if (!this._isAppended) return;
        EventHandler.off(this._element, EVENT_MOUSEDOWN);
        this._element.remove();
        this._isAppended = false;
    }
    // Private
    _getElement() {
        if (!this._element) {
            const backdrop = document.createElement('div');
            backdrop.className = this._config.className;
            if (this._config.isAnimated) backdrop.classList.add(CLASS_NAME_FADE$4);
            this._element = backdrop;
        }
        return this._element;
    }
    _configAfterMerge(config) {
        // use getElement() with the default "body" to get a fresh Element on each instantiation
        config.rootElement = getElement(config.rootElement);
        return config;
    }
    _append() {
        if (this._isAppended) return;
        const element = this._getElement();
        this._config.rootElement.append(element);
        EventHandler.on(element, EVENT_MOUSEDOWN, ()=>{
            execute(this._config.clickCallback);
        });
        this._isAppended = true;
    }
    _emulateAnimation(callback) {
        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/focustrap.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$8 = 'focustrap';
const DATA_KEY$5 = 'bs.focustrap';
const EVENT_KEY$5 = `.${DATA_KEY$5}`;
const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
const TAB_KEY = 'Tab';
const TAB_NAV_FORWARD = 'forward';
const TAB_NAV_BACKWARD = 'backward';
const Default$7 = {
    autofocus: true,
    trapElement: null // The element to trap focus inside of
};
const DefaultType$7 = {
    autofocus: 'boolean',
    trapElement: 'element'
};
/**
 * Class definition
 */ class FocusTrap extends Config {
    constructor(config){
        super();
        this._config = this._getConfig(config);
        this._isActive = false;
        this._lastTabNavDirection = null;
    }
    // Getters
    static get Default() {
        return Default$7;
    }
    static get DefaultType() {
        return DefaultType$7;
    }
    static get NAME() {
        return NAME$8;
    }
    // Public
    activate() {
        if (this._isActive) return;
        if (this._config.autofocus) this._config.trapElement.focus();
        EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop
        EventHandler.on(document, EVENT_FOCUSIN$2, (event)=>this._handleFocusin(event));
        EventHandler.on(document, EVENT_KEYDOWN_TAB, (event)=>this._handleKeydown(event));
        this._isActive = true;
    }
    deactivate() {
        if (!this._isActive) return;
        this._isActive = false;
        EventHandler.off(document, EVENT_KEY$5);
    }
    // Private
    _handleFocusin(event) {
        const { trapElement } = this._config;
        if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) return;
        const elements = SelectorEngine.focusableChildren(trapElement);
        if (elements.length === 0) trapElement.focus();
        else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) elements[elements.length - 1].focus();
        else elements[0].focus();
    }
    _handleKeydown(event) {
        if (event.key !== TAB_KEY) return;
        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/scrollBar.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
const SELECTOR_STICKY_CONTENT = '.sticky-top';
const PROPERTY_PADDING = 'padding-right';
const PROPERTY_MARGIN = 'margin-right';
/**
 * Class definition
 */ class ScrollBarHelper {
    constructor(){
        this._element = document.body;
    }
    // Public
    getWidth() {
        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
        const documentWidth = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
    }
    hide() {
        const width = this.getWidth();
        this._disableOverFlow();
        // give padding to element to balance the hidden scrollbar width
        this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width);
        // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
        this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width);
        this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue)=>calculatedValue - width);
    }
    reset() {
        this._resetElementAttributes(this._element, 'overflow');
        this._resetElementAttributes(this._element, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
    }
    isOverflowing() {
        return this.getWidth() > 0;
    }
    // Private
    _disableOverFlow() {
        this._saveInitialAttribute(this._element, 'overflow');
        this._element.style.overflow = 'hidden';
    }
    _setElementAttributes(selector, styleProperty, callback) {
        const scrollbarWidth = this.getWidth();
        const manipulationCallBack = (element)=>{
            if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) return;
            this._saveInitialAttribute(element, styleProperty);
            const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
            element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _saveInitialAttribute(element, styleProperty) {
        const actualValue = element.style.getPropertyValue(styleProperty);
        if (actualValue) Manipulator.setDataAttribute(element, styleProperty, actualValue);
    }
    _resetElementAttributes(selector, styleProperty) {
        const manipulationCallBack = (element)=>{
            const value = Manipulator.getDataAttribute(element, styleProperty);
            // We only want to remove the property if the value is `null`; the value can also be zero
            if (value === null) {
                element.style.removeProperty(styleProperty);
                return;
            }
            Manipulator.removeDataAttribute(element, styleProperty);
            element.style.setProperty(styleProperty, value);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _applyManipulationCallback(selector, callBack) {
        if (isElement(selector)) {
            callBack(selector);
            return;
        }
        for (const sel of SelectorEngine.find(selector, this._element))callBack(sel);
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$7 = 'modal';
const DATA_KEY$4 = 'bs.modal';
const EVENT_KEY$4 = `.${DATA_KEY$4}`;
const DATA_API_KEY$2 = '.data-api';
const ESCAPE_KEY$1 = 'Escape';
const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
const CLASS_NAME_OPEN = 'modal-open';
const CLASS_NAME_FADE$3 = 'fade';
const CLASS_NAME_SHOW$4 = 'show';
const CLASS_NAME_STATIC = 'modal-static';
const OPEN_SELECTOR$1 = '.modal.show';
const SELECTOR_DIALOG = '.modal-dialog';
const SELECTOR_MODAL_BODY = '.modal-body';
const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
const Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
};
const DefaultType$6 = {
    backdrop: '(boolean|string)',
    focus: 'boolean',
    keyboard: 'boolean'
};
/**
 * Class definition
 */ class Modal extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
        this._backdrop = this._initializeBackDrop();
        this._focustrap = this._initializeFocusTrap();
        this._isShown = false;
        this._isTransitioning = false;
        this._scrollBar = new ScrollBarHelper();
        this._addEventListeners();
    }
    // Getters
    static get Default() {
        return Default$6;
    }
    static get DefaultType() {
        return DefaultType$6;
    }
    static get NAME() {
        return NAME$7;
    }
    // Public
    toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
        if (this._isShown || this._isTransitioning) return;
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
            relatedTarget
        });
        if (showEvent.defaultPrevented) return;
        this._isShown = true;
        this._isTransitioning = true;
        this._scrollBar.hide();
        document.body.classList.add(CLASS_NAME_OPEN);
        this._adjustDialog();
        this._backdrop.show(()=>this._showElement(relatedTarget));
    }
    hide() {
        if (!this._isShown || this._isTransitioning) return;
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
        if (hideEvent.defaultPrevented) return;
        this._isShown = false;
        this._isTransitioning = true;
        this._focustrap.deactivate();
        this._element.classList.remove(CLASS_NAME_SHOW$4);
        this._queueCallback(()=>this._hideModal(), this._element, this._isAnimated());
    }
    dispose() {
        EventHandler.off(window, EVENT_KEY$4);
        EventHandler.off(this._dialog, EVENT_KEY$4);
        this._backdrop.dispose();
        this._focustrap.deactivate();
        super.dispose();
    }
    handleUpdate() {
        this._adjustDialog();
    }
    // Private
    _initializeBackDrop() {
        return new Backdrop({
            isVisible: Boolean(this._config.backdrop),
            // 'static' option will be translated to true, and booleans will keep their value,
            isAnimated: this._isAnimated()
        });
    }
    _initializeFocusTrap() {
        return new FocusTrap({
            trapElement: this._element
        });
    }
    _showElement(relatedTarget) {
        // try to append dynamic modal
        if (!document.body.contains(this._element)) document.body.append(this._element);
        this._element.style.display = 'block';
        this._element.removeAttribute('aria-hidden');
        this._element.setAttribute('aria-modal', true);
        this._element.setAttribute('role', 'dialog');
        this._element.scrollTop = 0;
        const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
        if (modalBody) modalBody.scrollTop = 0;
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW$4);
        const transitionComplete = ()=>{
            if (this._config.focus) this._focustrap.activate();
            this._isTransitioning = false;
            EventHandler.trigger(this._element, EVENT_SHOWN$4, {
                relatedTarget
            });
        };
        this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
    }
    _addEventListeners() {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event)=>{
            if (event.key !== ESCAPE_KEY$1) return;
            if (this._config.keyboard) {
                this.hide();
                return;
            }
            this._triggerBackdropTransition();
        });
        EventHandler.on(window, EVENT_RESIZE$1, ()=>{
            if (this._isShown && !this._isTransitioning) this._adjustDialog();
        });
        EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event)=>{
            // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
            EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2)=>{
                if (this._element !== event.target || this._element !== event2.target) return;
                if (this._config.backdrop === 'static') {
                    this._triggerBackdropTransition();
                    return;
                }
                if (this._config.backdrop) this.hide();
            });
        });
    }
    _hideModal() {
        this._element.style.display = 'none';
        this._element.setAttribute('aria-hidden', true);
        this._element.removeAttribute('aria-modal');
        this._element.removeAttribute('role');
        this._isTransitioning = false;
        this._backdrop.hide(()=>{
            document.body.classList.remove(CLASS_NAME_OPEN);
            this._resetAdjustments();
            this._scrollBar.reset();
            EventHandler.trigger(this._element, EVENT_HIDDEN$4);
        });
    }
    _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
    _triggerBackdropTransition() {
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
        if (hideEvent.defaultPrevented) return;
        const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        const initialOverflowY = this._element.style.overflowY;
        // return if the following background transition hasn't yet completed
        if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) return;
        if (!isModalOverflowing) this._element.style.overflowY = 'hidden';
        this._element.classList.add(CLASS_NAME_STATIC);
        this._queueCallback(()=>{
            this._element.classList.remove(CLASS_NAME_STATIC);
            this._queueCallback(()=>{
                this._element.style.overflowY = initialOverflowY;
            }, this._dialog);
        }, this._dialog);
        this._element.focus();
    }
    /**
   * The following methods are used to handle overflowing modals
   */ _adjustDialog() {
        const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        const scrollbarWidth = this._scrollBar.getWidth();
        const isBodyOverflowing = scrollbarWidth > 0;
        if (isBodyOverflowing && !isModalOverflowing) {
            const property = isRTL() ? 'paddingLeft' : 'paddingRight';
            this._element.style[property] = `${scrollbarWidth}px`;
        }
        if (!isBodyOverflowing && isModalOverflowing) {
            const property = isRTL() ? 'paddingRight' : 'paddingLeft';
            this._element.style[property] = `${scrollbarWidth}px`;
        }
    }
    _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
    }
    // Static
    static jQueryInterface(config, relatedTarget) {
        return this.each(function() {
            const data = Modal.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config](relatedTarget);
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if ([
        'A',
        'AREA'
    ].includes(this.tagName)) event.preventDefault();
    EventHandler.one(target, EVENT_SHOW$4, (showEvent)=>{
        if (showEvent.defaultPrevented) // only register focus restorer if modal will actually get shown
        return;
        EventHandler.one(target, EVENT_HIDDEN$4, ()=>{
            if (isVisible(this)) this.focus();
        });
    });
    // avoid conflict when clicking modal toggler while another one is open
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) Modal.getInstance(alreadyOpen).hide();
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
});
enableDismissTrigger(Modal);
/**
 * jQuery
 */ defineJQueryPlugin(Modal);
/**
 * --------------------------------------------------------------------------
 * Bootstrap offcanvas.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$6 = 'offcanvas';
const DATA_KEY$3 = 'bs.offcanvas';
const EVENT_KEY$3 = `.${DATA_KEY$3}`;
const DATA_API_KEY$1 = '.data-api';
const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
const ESCAPE_KEY = 'Escape';
const CLASS_NAME_SHOW$3 = 'show';
const CLASS_NAME_SHOWING$1 = 'showing';
const CLASS_NAME_HIDING = 'hiding';
const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
const OPEN_SELECTOR = '.offcanvas.show';
const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
const EVENT_RESIZE = `resize${EVENT_KEY$3}`;
const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
const Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
};
const DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    scroll: 'boolean'
};
/**
 * Class definition
 */ class Offcanvas extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._isShown = false;
        this._backdrop = this._initializeBackDrop();
        this._focustrap = this._initializeFocusTrap();
        this._addEventListeners();
    }
    // Getters
    static get Default() {
        return Default$5;
    }
    static get DefaultType() {
        return DefaultType$5;
    }
    static get NAME() {
        return NAME$6;
    }
    // Public
    toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
        if (this._isShown) return;
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
            relatedTarget
        });
        if (showEvent.defaultPrevented) return;
        this._isShown = true;
        this._backdrop.show();
        if (!this._config.scroll) new ScrollBarHelper().hide();
        this._element.setAttribute('aria-modal', true);
        this._element.setAttribute('role', 'dialog');
        this._element.classList.add(CLASS_NAME_SHOWING$1);
        const completeCallBack = ()=>{
            if (!this._config.scroll || this._config.backdrop) this._focustrap.activate();
            this._element.classList.add(CLASS_NAME_SHOW$3);
            this._element.classList.remove(CLASS_NAME_SHOWING$1);
            EventHandler.trigger(this._element, EVENT_SHOWN$3, {
                relatedTarget
            });
        };
        this._queueCallback(completeCallBack, this._element, true);
    }
    hide() {
        if (!this._isShown) return;
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
        if (hideEvent.defaultPrevented) return;
        this._focustrap.deactivate();
        this._element.blur();
        this._isShown = false;
        this._element.classList.add(CLASS_NAME_HIDING);
        this._backdrop.hide();
        const completeCallback = ()=>{
            this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
            this._element.removeAttribute('aria-modal');
            this._element.removeAttribute('role');
            if (!this._config.scroll) new ScrollBarHelper().reset();
            EventHandler.trigger(this._element, EVENT_HIDDEN$3);
        };
        this._queueCallback(completeCallback, this._element, true);
    }
    dispose() {
        this._backdrop.dispose();
        this._focustrap.deactivate();
        super.dispose();
    }
    // Private
    _initializeBackDrop() {
        const clickCallback = ()=>{
            if (this._config.backdrop === 'static') {
                EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
                return;
            }
            this.hide();
        };
        // 'static' option will be translated to true, and booleans will keep their value
        const isVisible = Boolean(this._config.backdrop);
        return new Backdrop({
            className: CLASS_NAME_BACKDROP,
            isVisible,
            isAnimated: true,
            rootElement: this._element.parentNode,
            clickCallback: isVisible ? clickCallback : null
        });
    }
    _initializeFocusTrap() {
        return new FocusTrap({
            trapElement: this._element
        });
    }
    _addEventListeners() {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event)=>{
            if (event.key !== ESCAPE_KEY) return;
            if (this._config.keyboard) {
                this.hide();
                return;
            }
            EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        });
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Offcanvas.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config](this);
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if ([
        'A',
        'AREA'
    ].includes(this.tagName)) event.preventDefault();
    if (isDisabled(this)) return;
    EventHandler.one(target, EVENT_HIDDEN$3, ()=>{
        // focus on trigger when it is closed
        if (isVisible(this)) this.focus();
    });
    // avoid conflict when clicking a toggler of an offcanvas, while another is open
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) Offcanvas.getInstance(alreadyOpen).hide();
    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$2, ()=>{
    for (const selector of SelectorEngine.find(OPEN_SELECTOR))Offcanvas.getOrCreateInstance(selector).show();
});
EventHandler.on(window, EVENT_RESIZE, ()=>{
    for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]'))if (getComputedStyle(element).position !== 'fixed') Offcanvas.getOrCreateInstance(element).hide();
});
enableDismissTrigger(Offcanvas);
/**
 * jQuery
 */ defineJQueryPlugin(Offcanvas);
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ // js-docs-start allow-list
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
const DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': [
        'class',
        'dir',
        'id',
        'lang',
        'role',
        ARIA_ATTRIBUTE_PATTERN
    ],
    a: [
        'target',
        'href',
        'title',
        'rel'
    ],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    dd: [],
    div: [],
    dl: [],
    dt: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: [
        'src',
        'srcset',
        'alt',
        'title',
        'width',
        'height'
    ],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
};
// js-docs-end allow-list
const uriAttributes = new Set([
    'background',
    'cite',
    'href',
    'itemtype',
    'longdesc',
    'poster',
    'src',
    'xlink:href'
]);
/**
 * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation
 * contexts.
 *
 * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38
 */ // eslint-disable-next-line unicorn/better-regex
const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;
const allowedAttribute = (attribute, allowedAttributeList)=>{
    const attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
        if (uriAttributes.has(attributeName)) return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));
        return true;
    }
    // Check if a regular expression validates the attribute.
    return allowedAttributeList.filter((attributeRegex)=>attributeRegex instanceof RegExp).some((regex)=>regex.test(attributeName));
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) return unsafeHtml;
    if (sanitizeFunction && typeof sanitizeFunction === 'function') return sanitizeFunction(unsafeHtml);
    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));
    for (const element of elements){
        const elementName = element.nodeName.toLowerCase();
        if (!Object.keys(allowList).includes(elementName)) {
            element.remove();
            continue;
        }
        const attributeList = [].concat(...element.attributes);
        const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
        for (const attribute of attributeList)if (!allowedAttribute(attribute, allowedAttributes)) element.removeAttribute(attribute.nodeName);
    }
    return createdDocument.body.innerHTML;
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap util/template-factory.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$5 = 'TemplateFactory';
const Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    // { selector : text ,  selector2 : text2 , }
    extraClass: '',
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: '<div></div>'
};
const DefaultType$4 = {
    allowList: 'object',
    content: 'object',
    extraClass: '(string|function)',
    html: 'boolean',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    template: 'string'
};
const DefaultContentType = {
    entry: '(string|element|function|null)',
    selector: '(string|element)'
};
/**
 * Class definition
 */ class TemplateFactory extends Config {
    constructor(config){
        super();
        this._config = this._getConfig(config);
    }
    // Getters
    static get Default() {
        return Default$4;
    }
    static get DefaultType() {
        return DefaultType$4;
    }
    static get NAME() {
        return NAME$5;
    }
    // Public
    getContent() {
        return Object.values(this._config.content).map((config)=>this._resolvePossibleFunction(config)).filter(Boolean);
    }
    hasContent() {
        return this.getContent().length > 0;
    }
    changeContent(content) {
        this._checkContent(content);
        this._config.content = {
            ...this._config.content,
            ...content
        };
        return this;
    }
    toHtml() {
        const templateWrapper = document.createElement('div');
        templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
        for (const [selector, text] of Object.entries(this._config.content))this._setContent(templateWrapper, text, selector);
        const template = templateWrapper.children[0];
        const extraClass = this._resolvePossibleFunction(this._config.extraClass);
        if (extraClass) template.classList.add(...extraClass.split(' '));
        return template;
    }
    // Private
    _typeCheckConfig(config) {
        super._typeCheckConfig(config);
        this._checkContent(config.content);
    }
    _checkContent(arg) {
        for (const [selector, content] of Object.entries(arg))super._typeCheckConfig({
            selector,
            entry: content
        }, DefaultContentType);
    }
    _setContent(template, content, selector) {
        const templateElement = SelectorEngine.findOne(selector, template);
        if (!templateElement) return;
        content = this._resolvePossibleFunction(content);
        if (!content) {
            templateElement.remove();
            return;
        }
        if (isElement(content)) {
            this._putElementInTemplate(getElement(content), templateElement);
            return;
        }
        if (this._config.html) {
            templateElement.innerHTML = this._maybeSanitize(content);
            return;
        }
        templateElement.textContent = content;
    }
    _maybeSanitize(arg) {
        return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
    }
    _resolvePossibleFunction(arg) {
        return execute(arg, [
            undefined,
            this
        ]);
    }
    _putElementInTemplate(element, templateElement) {
        if (this._config.html) {
            templateElement.innerHTML = '';
            templateElement.append(element);
            return;
        }
        templateElement.textContent = element.textContent;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$4 = 'tooltip';
const DISALLOWED_ATTRIBUTES = new Set([
    'sanitize',
    'allowList',
    'sanitizeFn'
]);
const CLASS_NAME_FADE$2 = 'fade';
const CLASS_NAME_MODAL = 'modal';
const CLASS_NAME_SHOW$2 = 'show';
const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
const EVENT_MODAL_HIDE = 'hide.bs.modal';
const TRIGGER_HOVER = 'hover';
const TRIGGER_FOCUS = 'focus';
const TRIGGER_CLICK = 'click';
const TRIGGER_MANUAL = 'manual';
const EVENT_HIDE$2 = 'hide';
const EVENT_HIDDEN$2 = 'hidden';
const EVENT_SHOW$2 = 'show';
const EVENT_SHOWN$2 = 'shown';
const EVENT_INSERTED = 'inserted';
const EVENT_CLICK$1 = 'click';
const EVENT_FOCUSIN$1 = 'focusin';
const EVENT_FOCUSOUT$1 = 'focusout';
const EVENT_MOUSEENTER = 'mouseenter';
const EVENT_MOUSELEAVE = 'mouseleave';
const AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
};
const Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: 'clippingParents',
    container: false,
    customClass: '',
    delay: 0,
    fallbackPlacements: [
        'top',
        'right',
        'bottom',
        'left'
    ],
    html: false,
    offset: [
        0,
        6
    ],
    placement: 'top',
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    title: '',
    trigger: 'hover focus'
};
const DefaultType$3 = {
    allowList: 'object',
    animation: 'boolean',
    boundary: '(string|element)',
    container: '(string|element|boolean)',
    customClass: '(string|function)',
    delay: '(number|object)',
    fallbackPlacements: 'array',
    html: 'boolean',
    offset: '(array|string|function)',
    placement: '(string|function)',
    popperConfig: '(null|object|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    selector: '(string|boolean)',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string'
};
/**
 * Class definition
 */ class Tooltip extends BaseComponent {
    constructor(element, config){
        if (typeof _core === 'undefined') throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org/docs/v2/)');
        super(element, config);
        // Private
        this._isEnabled = true;
        this._timeout = 0;
        this._isHovered = null;
        this._activeTrigger = {};
        this._popper = null;
        this._templateFactory = null;
        this._newContent = null;
        // Protected
        this.tip = null;
        this._setListeners();
        if (!this._config.selector) this._fixTitle();
    }
    // Getters
    static get Default() {
        return Default$3;
    }
    static get DefaultType() {
        return DefaultType$3;
    }
    static get NAME() {
        return NAME$4;
    }
    // Public
    enable() {
        this._isEnabled = true;
    }
    disable() {
        this._isEnabled = false;
    }
    toggleEnabled() {
        this._isEnabled = !this._isEnabled;
    }
    toggle() {
        if (!this._isEnabled) return;
        if (this._isShown()) {
            this._leave();
            return;
        }
        this._enter();
    }
    dispose() {
        clearTimeout(this._timeout);
        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
        if (this._element.getAttribute('data-bs-original-title')) this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));
        this._disposePopper();
        super.dispose();
    }
    show() {
        if (this._element.style.display === 'none') throw new Error('Please use show on visible elements');
        if (!(this._isWithContent() && this._isEnabled)) return;
        const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
        const shadowRoot = findShadowRoot(this._element);
        const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
        if (showEvent.defaultPrevented || !isInTheDom) return;
        // TODO: v6 remove this or make it optional
        this._disposePopper();
        const tip = this._getTipElement();
        this._element.setAttribute('aria-describedby', tip.getAttribute('id'));
        const { container } = this._config;
        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
            container.append(tip);
            EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
        }
        this._popper = this._createPopper(tip);
        tip.classList.add(CLASS_NAME_SHOW$2);
        // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement) for (const element of [].concat(...document.body.children))EventHandler.on(element, 'mouseover', noop);
        const complete = ()=>{
            EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
            if (this._isHovered === false) this._leave();
            this._isHovered = false;
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
    }
    hide() {
        if (!this._isShown()) return;
        const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
        if (hideEvent.defaultPrevented) return;
        const tip = this._getTipElement();
        tip.classList.remove(CLASS_NAME_SHOW$2);
        // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) for (const element of [].concat(...document.body.children))EventHandler.off(element, 'mouseover', noop);
        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;
        this._isHovered = null; // it is a trick to support manual triggering
        const complete = ()=>{
            if (this._isWithActiveTrigger()) return;
            if (!this._isHovered) this._disposePopper();
            this._element.removeAttribute('aria-describedby');
            EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
    }
    update() {
        if (this._popper) this._popper.update();
    }
    // Protected
    _isWithContent() {
        return Boolean(this._getTitle());
    }
    _getTipElement() {
        if (!this.tip) this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
        return this.tip;
    }
    _createTipElement(content) {
        const tip = this._getTemplateFactory(content).toHtml();
        // TODO: remove this check in v6
        if (!tip) return null;
        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
        // TODO: v6 the following can be achieved with CSS only
        tip.classList.add(`bs-${this.constructor.NAME}-auto`);
        const tipId = getUID(this.constructor.NAME).toString();
        tip.setAttribute('id', tipId);
        if (this._isAnimated()) tip.classList.add(CLASS_NAME_FADE$2);
        return tip;
    }
    setContent(content) {
        this._newContent = content;
        if (this._isShown()) {
            this._disposePopper();
            this.show();
        }
    }
    _getTemplateFactory(content) {
        if (this._templateFactory) this._templateFactory.changeContent(content);
        else this._templateFactory = new TemplateFactory({
            ...this._config,
            // the `content` var has to be after `this._config`
            // to override config.content in case of popover
            content,
            extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
        return this._templateFactory;
    }
    _getContentForTemplate() {
        return {
            [SELECTOR_TOOLTIP_INNER]: this._getTitle()
        };
    }
    _getTitle() {
        return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');
    }
    // Private
    _initializeOnDelegatedTarget(event) {
        return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
    _isAnimated() {
        return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
    }
    _isShown() {
        return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
    }
    _createPopper(tip) {
        const placement = execute(this._config.placement, [
            this,
            tip,
            this._element
        ]);
        const attachment = AttachmentMap[placement.toUpperCase()];
        return _core.createPopper(this._element, tip, this._getPopperConfig(attachment));
    }
    _getOffset() {
        const { offset } = this._config;
        if (typeof offset === 'string') return offset.split(',').map((value)=>Number.parseInt(value, 10));
        if (typeof offset === 'function') return (popperData)=>offset(popperData, this._element);
        return offset;
    }
    _resolvePossibleFunction(arg) {
        return execute(arg, [
            this._element,
            this._element
        ]);
    }
    _getPopperConfig(attachment) {
        const defaultBsPopperConfig = {
            placement: attachment,
            modifiers: [
                {
                    name: 'flip',
                    options: {
                        fallbackPlacements: this._config.fallbackPlacements
                    }
                },
                {
                    name: 'offset',
                    options: {
                        offset: this._getOffset()
                    }
                },
                {
                    name: 'preventOverflow',
                    options: {
                        boundary: this._config.boundary
                    }
                },
                {
                    name: 'arrow',
                    options: {
                        element: `.${this.constructor.NAME}-arrow`
                    }
                },
                {
                    name: 'preSetPlacement',
                    enabled: true,
                    phase: 'beforeMain',
                    fn: (data)=>{
                        // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
                        // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
                        this._getTipElement().setAttribute('data-popper-placement', data.state.placement);
                    }
                }
            ]
        };
        return {
            ...defaultBsPopperConfig,
            ...execute(this._config.popperConfig, [
                undefined,
                defaultBsPopperConfig
            ])
        };
    }
    _setListeners() {
        const triggers = this._config.trigger.split(' ');
        for (const trigger of triggers){
            if (trigger === 'click') EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event)=>{
                const context = this._initializeOnDelegatedTarget(event);
                context.toggle();
            });
            else if (trigger !== TRIGGER_MANUAL) {
                const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
                const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
                EventHandler.on(this._element, eventIn, this._config.selector, (event)=>{
                    const context = this._initializeOnDelegatedTarget(event);
                    context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
                    context._enter();
                });
                EventHandler.on(this._element, eventOut, this._config.selector, (event)=>{
                    const context = this._initializeOnDelegatedTarget(event);
                    context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
                    context._leave();
                });
            }
        }
        this._hideModalHandler = ()=>{
            if (this._element) this.hide();
        };
        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    }
    _fixTitle() {
        const title = this._element.getAttribute('title');
        if (!title) return;
        if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) this._element.setAttribute('aria-label', title);
        this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility
        this._element.removeAttribute('title');
    }
    _enter() {
        if (this._isShown() || this._isHovered) {
            this._isHovered = true;
            return;
        }
        this._isHovered = true;
        this._setTimeout(()=>{
            if (this._isHovered) this.show();
        }, this._config.delay.show);
    }
    _leave() {
        if (this._isWithActiveTrigger()) return;
        this._isHovered = false;
        this._setTimeout(()=>{
            if (!this._isHovered) this.hide();
        }, this._config.delay.hide);
    }
    _setTimeout(handler, timeout) {
        clearTimeout(this._timeout);
        this._timeout = setTimeout(handler, timeout);
    }
    _isWithActiveTrigger() {
        return Object.values(this._activeTrigger).includes(true);
    }
    _getConfig(config) {
        const dataAttributes = Manipulator.getDataAttributes(this._element);
        for (const dataAttribute of Object.keys(dataAttributes))if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) delete dataAttributes[dataAttribute];
        config = {
            ...dataAttributes,
            ...typeof config === 'object' && config ? config : {}
        };
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
    }
    _configAfterMerge(config) {
        config.container = config.container === false ? document.body : getElement(config.container);
        if (typeof config.delay === 'number') config.delay = {
            show: config.delay,
            hide: config.delay
        };
        if (typeof config.title === 'number') config.title = config.title.toString();
        if (typeof config.content === 'number') config.content = config.content.toString();
        return config;
    }
    _getDelegateConfig() {
        const config = {};
        for (const [key, value] of Object.entries(this._config))if (this.constructor.Default[key] !== value) config[key] = value;
        config.selector = false;
        config.trigger = 'manual';
        // In the future can be replaced with:
        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
        // `Object.fromEntries(keysWithDifferentValues)`
        return config;
    }
    _disposePopper() {
        if (this._popper) {
            this._popper.destroy();
            this._popper = null;
        }
        if (this.tip) {
            this.tip.remove();
            this.tip = null;
        }
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Tooltip.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * jQuery
 */ defineJQueryPlugin(Tooltip);
/**
 * --------------------------------------------------------------------------
 * Bootstrap popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$3 = 'popover';
const SELECTOR_TITLE = '.popover-header';
const SELECTOR_CONTENT = '.popover-body';
const Default$2 = {
    ...Tooltip.Default,
    content: '',
    offset: [
        0,
        8
    ],
    placement: 'right',
    template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
    trigger: 'click'
};
const DefaultType$2 = {
    ...Tooltip.DefaultType,
    content: '(null|string|element|function)'
};
/**
 * Class definition
 */ class Popover extends Tooltip {
    // Getters
    static get Default() {
        return Default$2;
    }
    static get DefaultType() {
        return DefaultType$2;
    }
    static get NAME() {
        return NAME$3;
    }
    // Overrides
    _isWithContent() {
        return this._getTitle() || this._getContent();
    }
    // Private
    _getContentForTemplate() {
        return {
            [SELECTOR_TITLE]: this._getTitle(),
            [SELECTOR_CONTENT]: this._getContent()
        };
    }
    _getContent() {
        return this._resolvePossibleFunction(this._config.content);
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Popover.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * jQuery
 */ defineJQueryPlugin(Popover);
/**
 * --------------------------------------------------------------------------
 * Bootstrap scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$2 = 'scrollspy';
const DATA_KEY$2 = 'bs.scrollspy';
const EVENT_KEY$2 = `.${DATA_KEY$2}`;
const DATA_API_KEY = '.data-api';
const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
const EVENT_CLICK = `click${EVENT_KEY$2}`;
const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
const CLASS_NAME_ACTIVE$1 = 'active';
const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
const SELECTOR_TARGET_LINKS = '[href]';
const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
const SELECTOR_NAV_LINKS = '.nav-link';
const SELECTOR_NAV_ITEMS = '.nav-item';
const SELECTOR_LIST_ITEMS = '.list-group-item';
const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
const SELECTOR_DROPDOWN = '.dropdown';
const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
const Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: '0px 0px -25%',
    smoothScroll: false,
    target: null,
    threshold: [
        0.1,
        0.5,
        1
    ]
};
const DefaultType$1 = {
    offset: '(number|null)',
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: 'string',
    smoothScroll: 'boolean',
    target: 'element',
    threshold: 'array'
};
/**
 * Class definition
 */ class ScrollSpy extends BaseComponent {
    constructor(element, config){
        super(element, config);
        // this._element is the observablesContainer and config.target the menu links wrapper
        this._targetLinks = new Map();
        this._observableSections = new Map();
        this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element;
        this._activeTarget = null;
        this._observer = null;
        this._previousScrollData = {
            visibleEntryTop: 0,
            parentScrollTop: 0
        };
        this.refresh(); // initialize
    }
    // Getters
    static get Default() {
        return Default$1;
    }
    static get DefaultType() {
        return DefaultType$1;
    }
    static get NAME() {
        return NAME$2;
    }
    // Public
    refresh() {
        this._initializeTargetsAndObservables();
        this._maybeEnableSmoothScroll();
        if (this._observer) this._observer.disconnect();
        else this._observer = this._getNewObserver();
        for (const section of this._observableSections.values())this._observer.observe(section);
    }
    dispose() {
        this._observer.disconnect();
        super.dispose();
    }
    // Private
    _configAfterMerge(config) {
        // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
        config.target = getElement(config.target) || document.body;
        // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only
        config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;
        if (typeof config.threshold === 'string') config.threshold = config.threshold.split(',').map((value)=>Number.parseFloat(value));
        return config;
    }
    _maybeEnableSmoothScroll() {
        if (!this._config.smoothScroll) return;
        // unregister any previous listeners
        EventHandler.off(this._config.target, EVENT_CLICK);
        EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event)=>{
            const observableSection = this._observableSections.get(event.target.hash);
            if (observableSection) {
                event.preventDefault();
                const root = this._rootElement || window;
                const height = observableSection.offsetTop - this._element.offsetTop;
                if (root.scrollTo) {
                    root.scrollTo({
                        top: height,
                        behavior: 'smooth'
                    });
                    return;
                }
                // Chrome 60 doesn't support `scrollTo`
                root.scrollTop = height;
            }
        });
    }
    _getNewObserver() {
        const options = {
            root: this._rootElement,
            threshold: this._config.threshold,
            rootMargin: this._config.rootMargin
        };
        return new IntersectionObserver((entries)=>this._observerCallback(entries), options);
    }
    // The logic of selection
    _observerCallback(entries) {
        const targetElement = (entry)=>this._targetLinks.get(`#${entry.target.id}`);
        const activate = (entry)=>{
            this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
            this._process(targetElement(entry));
        };
        const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
        const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
        this._previousScrollData.parentScrollTop = parentScrollTop;
        for (const entry of entries){
            if (!entry.isIntersecting) {
                this._activeTarget = null;
                this._clearActiveClass(targetElement(entry));
                continue;
            }
            const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
            // if we are scrolling down, pick the bigger offsetTop
            if (userScrollsDown && entryIsLowerThanPrevious) {
                activate(entry);
                // if parent isn't scrolled, let's keep the first visible item, breaking the iteration
                if (!parentScrollTop) return;
                continue;
            }
            // if we are scrolling up, pick the smallest offsetTop
            if (!userScrollsDown && !entryIsLowerThanPrevious) activate(entry);
        }
    }
    _initializeTargetsAndObservables() {
        this._targetLinks = new Map();
        this._observableSections = new Map();
        const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
        for (const anchor of targetLinks){
            // ensure that the anchor has an id and is not disabled
            if (!anchor.hash || isDisabled(anchor)) continue;
            const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);
            // ensure that the observableSection exists & is visible
            if (isVisible(observableSection)) {
                this._targetLinks.set(decodeURI(anchor.hash), anchor);
                this._observableSections.set(anchor.hash, observableSection);
            }
        }
    }
    _process(target) {
        if (this._activeTarget === target) return;
        this._clearActiveClass(this._config.target);
        this._activeTarget = target;
        target.classList.add(CLASS_NAME_ACTIVE$1);
        this._activateParents(target);
        EventHandler.trigger(this._element, EVENT_ACTIVATE, {
            relatedTarget: target
        });
    }
    _activateParents(target) {
        // Activate dropdown parents
        if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
            SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
            return;
        }
        for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP))// Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
        for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS))item.classList.add(CLASS_NAME_ACTIVE$1);
    }
    _clearActiveClass(parent) {
        parent.classList.remove(CLASS_NAME_ACTIVE$1);
        const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
        for (const node of activeNodes)node.classList.remove(CLASS_NAME_ACTIVE$1);
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = ScrollSpy.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(window, EVENT_LOAD_DATA_API$1, ()=>{
    for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY))ScrollSpy.getOrCreateInstance(spy);
});
/**
 * jQuery
 */ defineJQueryPlugin(ScrollSpy);
/**
 * --------------------------------------------------------------------------
 * Bootstrap tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$1 = 'tab';
const DATA_KEY$1 = 'bs.tab';
const EVENT_KEY$1 = `.${DATA_KEY$1}`;
const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
const ARROW_LEFT_KEY = 'ArrowLeft';
const ARROW_RIGHT_KEY = 'ArrowRight';
const ARROW_UP_KEY = 'ArrowUp';
const ARROW_DOWN_KEY = 'ArrowDown';
const HOME_KEY = 'Home';
const END_KEY = 'End';
const CLASS_NAME_ACTIVE = 'active';
const CLASS_NAME_FADE$1 = 'fade';
const CLASS_NAME_SHOW$1 = 'show';
const CLASS_DROPDOWN = 'dropdown';
const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
const SELECTOR_DROPDOWN_MENU = '.dropdown-menu';
const NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`;
const SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
const SELECTOR_OUTER = '.nav-item, .list-group-item';
const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]'; // TODO: could only be `tab` in v6
const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
/**
 * Class definition
 */ class Tab extends BaseComponent {
    constructor(element){
        super(element);
        this._parent = this._element.closest(SELECTOR_TAB_PANEL);
        if (!this._parent) return;
        // Set up initial aria attributes
        this._setInitialAttributes(this._parent, this._getChildren());
        EventHandler.on(this._element, EVENT_KEYDOWN, (event)=>this._keydown(event));
    }
    // Getters
    static get NAME() {
        return NAME$1;
    }
    // Public
    show() {
        // Shows this elem and deactivate the active sibling if exists
        const innerElem = this._element;
        if (this._elemIsActive(innerElem)) return;
        // Search for active tab on same parent to deactivate it
        const active = this._getActiveElem();
        const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
            relatedTarget: innerElem
        }) : null;
        const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
            relatedTarget: active
        });
        if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) return;
        this._deactivate(active, innerElem);
        this._activate(innerElem, active);
    }
    // Private
    _activate(element, relatedElem) {
        if (!element) return;
        element.classList.add(CLASS_NAME_ACTIVE);
        this._activate(SelectorEngine.getElementFromSelector(element)); // Search and activate/show the proper section
        const complete = ()=>{
            if (element.getAttribute('role') !== 'tab') {
                element.classList.add(CLASS_NAME_SHOW$1);
                return;
            }
            element.removeAttribute('tabindex');
            element.setAttribute('aria-selected', true);
            this._toggleDropDown(element, true);
            EventHandler.trigger(element, EVENT_SHOWN$1, {
                relatedTarget: relatedElem
            });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _deactivate(element, relatedElem) {
        if (!element) return;
        element.classList.remove(CLASS_NAME_ACTIVE);
        element.blur();
        this._deactivate(SelectorEngine.getElementFromSelector(element)); // Search and deactivate the shown section too
        const complete = ()=>{
            if (element.getAttribute('role') !== 'tab') {
                element.classList.remove(CLASS_NAME_SHOW$1);
                return;
            }
            element.setAttribute('aria-selected', false);
            element.setAttribute('tabindex', '-1');
            this._toggleDropDown(element, false);
            EventHandler.trigger(element, EVENT_HIDDEN$1, {
                relatedTarget: relatedElem
            });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _keydown(event) {
        if (![
            ARROW_LEFT_KEY,
            ARROW_RIGHT_KEY,
            ARROW_UP_KEY,
            ARROW_DOWN_KEY,
            HOME_KEY,
            END_KEY
        ].includes(event.key)) return;
        event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page
        event.preventDefault();
        const children = this._getChildren().filter((element)=>!isDisabled(element));
        let nextActiveElement;
        if ([
            HOME_KEY,
            END_KEY
        ].includes(event.key)) nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1];
        else {
            const isNext = [
                ARROW_RIGHT_KEY,
                ARROW_DOWN_KEY
            ].includes(event.key);
            nextActiveElement = getNextActiveElement(children, event.target, isNext, true);
        }
        if (nextActiveElement) {
            nextActiveElement.focus({
                preventScroll: true
            });
            Tab.getOrCreateInstance(nextActiveElement).show();
        }
    }
    _getChildren() {
        // collection of inner elements
        return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
    }
    _getActiveElem() {
        return this._getChildren().find((child)=>this._elemIsActive(child)) || null;
    }
    _setInitialAttributes(parent, children) {
        this._setAttributeIfNotExists(parent, 'role', 'tablist');
        for (const child of children)this._setInitialAttributesOnChild(child);
    }
    _setInitialAttributesOnChild(child) {
        child = this._getInnerElement(child);
        const isActive = this._elemIsActive(child);
        const outerElem = this._getOuterElement(child);
        child.setAttribute('aria-selected', isActive);
        if (outerElem !== child) this._setAttributeIfNotExists(outerElem, 'role', 'presentation');
        if (!isActive) child.setAttribute('tabindex', '-1');
        this._setAttributeIfNotExists(child, 'role', 'tab');
        // set attributes to the related panel too
        this._setInitialAttributesOnTargetPanel(child);
    }
    _setInitialAttributesOnTargetPanel(child) {
        const target = SelectorEngine.getElementFromSelector(child);
        if (!target) return;
        this._setAttributeIfNotExists(target, 'role', 'tabpanel');
        if (child.id) this._setAttributeIfNotExists(target, 'aria-labelledby', `${child.id}`);
    }
    _toggleDropDown(element, open) {
        const outerElem = this._getOuterElement(element);
        if (!outerElem.classList.contains(CLASS_DROPDOWN)) return;
        const toggle = (selector, className)=>{
            const element = SelectorEngine.findOne(selector, outerElem);
            if (element) element.classList.toggle(className, open);
        };
        toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
        toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
        outerElem.setAttribute('aria-expanded', open);
    }
    _setAttributeIfNotExists(element, attribute, value) {
        if (!element.hasAttribute(attribute)) element.setAttribute(attribute, value);
    }
    _elemIsActive(elem) {
        return elem.classList.contains(CLASS_NAME_ACTIVE);
    }
    // Try to get the inner element (usually the .nav-link)
    _getInnerElement(elem) {
        return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
    }
    // Try to get the outer element (usually the .nav-item)
    _getOuterElement(elem) {
        return elem.closest(SELECTOR_OUTER) || elem;
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Tab.getOrCreateInstance(this);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
    if ([
        'A',
        'AREA'
    ].includes(this.tagName)) event.preventDefault();
    if (isDisabled(this)) return;
    Tab.getOrCreateInstance(this).show();
});
/**
 * Initialize on focus
 */ EventHandler.on(window, EVENT_LOAD_DATA_API, ()=>{
    for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE))Tab.getOrCreateInstance(element);
});
/**
 * jQuery
 */ defineJQueryPlugin(Tab);
/**
 * --------------------------------------------------------------------------
 * Bootstrap toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME = 'toast';
const DATA_KEY = 'bs.toast';
const EVENT_KEY = `.${DATA_KEY}`;
const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
const EVENT_HIDE = `hide${EVENT_KEY}`;
const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
const EVENT_SHOW = `show${EVENT_KEY}`;
const EVENT_SHOWN = `shown${EVENT_KEY}`;
const CLASS_NAME_FADE = 'fade';
const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility
const CLASS_NAME_SHOW = 'show';
const CLASS_NAME_SHOWING = 'showing';
const DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
};
const Default = {
    animation: true,
    autohide: true,
    delay: 5000
};
/**
 * Class definition
 */ class Toast extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._timeout = null;
        this._hasMouseInteraction = false;
        this._hasKeyboardInteraction = false;
        this._setListeners();
    }
    // Getters
    static get Default() {
        return Default;
    }
    static get DefaultType() {
        return DefaultType;
    }
    static get NAME() {
        return NAME;
    }
    // Public
    show() {
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
        if (showEvent.defaultPrevented) return;
        this._clearTimeout();
        if (this._config.animation) this._element.classList.add(CLASS_NAME_FADE);
        const complete = ()=>{
            this._element.classList.remove(CLASS_NAME_SHOWING);
            EventHandler.trigger(this._element, EVENT_SHOWN);
            this._maybeScheduleHide();
        };
        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
    }
    hide() {
        if (!this.isShown()) return;
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
        if (hideEvent.defaultPrevented) return;
        const complete = ()=>{
            this._element.classList.add(CLASS_NAME_HIDE); // @deprecated
            this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
            EventHandler.trigger(this._element, EVENT_HIDDEN);
        };
        this._element.classList.add(CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
    }
    dispose() {
        this._clearTimeout();
        if (this.isShown()) this._element.classList.remove(CLASS_NAME_SHOW);
        super.dispose();
    }
    isShown() {
        return this._element.classList.contains(CLASS_NAME_SHOW);
    }
    // Private
    _maybeScheduleHide() {
        if (!this._config.autohide) return;
        if (this._hasMouseInteraction || this._hasKeyboardInteraction) return;
        this._timeout = setTimeout(()=>{
            this.hide();
        }, this._config.delay);
    }
    _onInteraction(event, isInteracting) {
        switch(event.type){
            case 'mouseover':
            case 'mouseout':
                this._hasMouseInteraction = isInteracting;
                break;
            case 'focusin':
            case 'focusout':
                this._hasKeyboardInteraction = isInteracting;
                break;
        }
        if (isInteracting) {
            this._clearTimeout();
            return;
        }
        const nextElement = event.relatedTarget;
        if (this._element === nextElement || this._element.contains(nextElement)) return;
        this._maybeScheduleHide();
    }
    _setListeners() {
        EventHandler.on(this._element, EVENT_MOUSEOVER, (event)=>this._onInteraction(event, true));
        EventHandler.on(this._element, EVENT_MOUSEOUT, (event)=>this._onInteraction(event, false));
        EventHandler.on(this._element, EVENT_FOCUSIN, (event)=>this._onInteraction(event, true));
        EventHandler.on(this._element, EVENT_FOCUSOUT, (event)=>this._onInteraction(event, false));
    }
    _clearTimeout() {
        clearTimeout(this._timeout);
        this._timeout = null;
    }
    // Static
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Toast.getOrCreateInstance(this, config);
            if (typeof config === 'string') {
                if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                data[config](this);
            }
        });
    }
}
/**
 * Data API implementation
 */ enableDismissTrigger(Toast);
/**
 * jQuery
 */ defineJQueryPlugin(Toast);

},{"@popperjs/core":"bNVhK","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bNVhK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
parcelHelpers.export(exports, "createPopperBase", ()=>(0, _createPopperJs.createPopper));
parcelHelpers.export(exports, "createPopper", ()=>(0, _popperJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper));
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":"dqsI9","./modifiers/index.js":"g9sBh","./createPopper.js":"iYSVN","./popper.js":"cxjOo","./popper-lite.js":"2p4KJ","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dqsI9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top);
parcelHelpers.export(exports, "bottom", ()=>bottom);
parcelHelpers.export(exports, "right", ()=>right);
parcelHelpers.export(exports, "left", ()=>left);
parcelHelpers.export(exports, "auto", ()=>auto);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements);
parcelHelpers.export(exports, "start", ()=>start);
parcelHelpers.export(exports, "end", ()=>end);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents);
parcelHelpers.export(exports, "viewport", ()=>viewport);
parcelHelpers.export(exports, "popper", ()=>popper);
parcelHelpers.export(exports, "reference", ()=>reference);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements);
parcelHelpers.export(exports, "placements", ()=>placements);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead);
parcelHelpers.export(exports, "read", ()=>read);
parcelHelpers.export(exports, "afterRead", ()=>afterRead);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain);
parcelHelpers.export(exports, "main", ()=>main);
parcelHelpers.export(exports, "afterMain", ()=>afterMain);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite);
parcelHelpers.export(exports, "write", ()=>write);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases);
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"g9sBh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", ()=>(0, _applyStylesJsDefault.default));
parcelHelpers.export(exports, "arrow", ()=>(0, _arrowJsDefault.default));
parcelHelpers.export(exports, "computeStyles", ()=>(0, _computeStylesJsDefault.default));
parcelHelpers.export(exports, "eventListeners", ()=>(0, _eventListenersJsDefault.default));
parcelHelpers.export(exports, "flip", ()=>(0, _flipJsDefault.default));
parcelHelpers.export(exports, "hide", ()=>(0, _hideJsDefault.default));
parcelHelpers.export(exports, "offset", ()=>(0, _offsetJsDefault.default));
parcelHelpers.export(exports, "popperOffsets", ()=>(0, _popperOffsetsJsDefault.default));
parcelHelpers.export(exports, "preventOverflow", ()=>(0, _preventOverflowJsDefault.default));
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"fUaxu","./arrow.js":"iZmP4","./computeStyles.js":"STvZ4","./eventListeners.js":"1DhCo","./flip.js":"aT75r","./hide.js":"hxy5e","./offset.js":"532CI","./popperOffsets.js":"33iAi","./preventOverflow.js":"1OUS8","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"fUaxu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? '' : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style, property) {
                style[property] = '';
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: [
        'computeStyles'
    ]
};

},{"../dom-utils/getNodeName.js":"9sdcM","../dom-utils/instanceOf.js":"fZZLP","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9sdcM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeName);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"fZZLP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = (0, _getWindowJsDefault.default)(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"dDWA0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dDWA0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindow);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"iZmP4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return (0, _mergePaddingObjectJsDefault.default)(typeof padding !== 'number' ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var axis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var isVertical = [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = (0, _getLayoutRectJsDefault.default)(arrowElement);
    var minProp = axis === 'y' ? (0, _enumsJs.top) : (0, _enumsJs.left);
    var maxProp = axis === 'y' ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = (0, _getOffsetParentJsDefault.default)(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = (0, _withinJs.within)(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!(0, _containsJsDefault.default)(state.elements.popper, arrowElement)) return;
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"9efyB","../dom-utils/getLayoutRect.js":"lD5bH","../dom-utils/contains.js":"jzgTK","../dom-utils/getOffsetParent.js":"esdlY","../utils/getMainAxisFromPlacement.js":"9xoRu","../utils/within.js":"eFY46","../utils/mergePaddingObject.js":"lqz1Y","../utils/expandToHashMap.js":"eIW4O","../enums.js":"dqsI9","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9efyB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBasePlacement);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}

},{"../enums.js":"dqsI9","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"lD5bH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getLayoutRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = (0, _getBoundingClientRectJsDefault.default)(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}

},{"./getBoundingClientRect.js":"9UlM0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9UlM0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBoundingClientRect);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) includeScale = false;
    if (isFixedStrategy === void 0) isFixedStrategy = false;
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && (0, _instanceOfJs.isHTMLElement)(element)) {
        scaleX = element.offsetWidth > 0 ? (0, _mathJs.round)(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? (0, _mathJs.round)(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = (0, _instanceOfJs.isElement)(element) ? (0, _getWindowJsDefault.default)(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !(0, _isLayoutViewportJsDefault.default)() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}

},{"./instanceOf.js":"fZZLP","../utils/math.js":"dqB5O","./getWindow.js":"dDWA0","./isLayoutViewport.js":"dFmXr","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dqB5O":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "round", ()=>round);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"dFmXr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isLayoutViewport);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test((0, _userAgentJsDefault.default)());
}

},{"../utils/userAgent.js":"5c68l","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5c68l":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getUAString);
function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
    }).join(' ');
    return navigator.userAgent;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jzgTK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>contains);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && (0, _instanceOfJs.isShadowRoot)(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next);
    } // Give up, the result is false
    return false;
}

},{"./instanceOf.js":"fZZLP","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"esdlY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOffsetParent);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function getTrueOffsetParent(element) {
    if (!(0, _instanceOfJs.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
    (0, _getComputedStyleJsDefault.default)(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = /firefox/i.test((0, _userAgentJsDefault.default)());
    var isIE = /Trident/i.test((0, _userAgentJsDefault.default)());
    if (isIE && (0, _instanceOfJs.isHTMLElement)(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = (0, _getComputedStyleJsDefault.default)(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = (0, _getParentNodeJsDefault.default)(element);
    if ((0, _instanceOfJs.isShadowRoot)(currentNode)) currentNode = currentNode.host;
    while((0, _instanceOfJs.isHTMLElement)(currentNode) && [
        'html',
        'body'
    ].indexOf((0, _getNodeNameJsDefault.default)(currentNode)) < 0){
        var css = (0, _getComputedStyleJsDefault.default)(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = (0, _getWindowJsDefault.default)(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && (0, _isTableElementJsDefault.default)(offsetParent) && (0, _getComputedStyleJsDefault.default)(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && ((0, _getNodeNameJsDefault.default)(offsetParent) === 'html' || (0, _getNodeNameJsDefault.default)(offsetParent) === 'body' && (0, _getComputedStyleJsDefault.default)(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}

},{"./getWindow.js":"dDWA0","./getNodeName.js":"9sdcM","./getComputedStyle.js":"351ZE","./instanceOf.js":"fZZLP","./isTableElement.js":"lFN2l","./getParentNode.js":"5gcXv","../utils/userAgent.js":"5c68l","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"351ZE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getComputedStyle);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return (0, _getWindowJsDefault.default)(element).getComputedStyle(element);
}

},{"./getWindow.js":"dDWA0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"lFN2l":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isTableElement);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf((0, _getNodeNameJsDefault.default)(element)) >= 0;
}

},{"./getNodeName.js":"9sdcM","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5gcXv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getParentNode);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if ((0, _getNodeNameJsDefault.default)(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ((0, _instanceOfJs.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0, _getDocumentElementJsDefault.default)(element) // fallback
    );
}

},{"./getNodeName.js":"9sdcM","./getDocumentElement.js":"c7zg9","./instanceOf.js":"fZZLP","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"c7zg9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentElement);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return (((0, _instanceOfJs.isElement)(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

},{"./instanceOf.js":"fZZLP","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9xoRu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getMainAxisFromPlacement);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"eFY46":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return (0, _mathJs.max)(min, (0, _mathJs.min)(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"dqB5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"lqz1Y":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergePaddingObject);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({}, (0, _getFreshSideObjectJsDefault.default)(), paddingObject);
}

},{"./getFreshSideObject.js":"j8h8r","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"j8h8r":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getFreshSideObject);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"eIW4O":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>expandToHashMap);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"STvZ4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: (0, _mathJs.round)(x * dpr) / dpr || 0,
        y: (0, _mathJs.round)(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = (0, _enumsJs.left);
    var sideY = (0, _enumsJs.top);
    var win = window;
    if (adaptive) {
        var offsetParent = (0, _getOffsetParentJsDefault.default)(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === (0, _getWindowJsDefault.default)(popper)) {
            offsetParent = (0, _getDocumentElementJsDefault.default)(popper);
            if ((0, _getComputedStyleJsDefault.default)(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent;
        if (placement === (0, _enumsJs.top) || (placement === (0, _enumsJs.left) || placement === (0, _enumsJs.right)) && variation === (0, _enumsJs.end)) {
            sideY = (0, _enumsJs.bottom);
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === (0, _enumsJs.left) || (placement === (0, _enumsJs.top) || placement === (0, _enumsJs.bottom)) && variation === (0, _enumsJs.end)) {
            sideX = (0, _enumsJs.right);
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }, (0, _getWindowJsDefault.default)(popper)) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
        placement: (0, _getBasePlacementJsDefault.default)(state.placement),
        variation: (0, _getVariationJsDefault.default)(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
};

},{"../enums.js":"dqsI9","../dom-utils/getOffsetParent.js":"esdlY","../dom-utils/getWindow.js":"dDWA0","../dom-utils/getDocumentElement.js":"c7zg9","../dom-utils/getComputedStyle.js":"351ZE","../utils/getBasePlacement.js":"9efyB","../utils/getVariation.js":"2m8gR","../utils/math.js":"dqB5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2m8gR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getVariation);
function getVariation(placement) {
    return placement.split('-')[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1DhCo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = (0, _getWindowJsDefault.default)(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
};

},{"../dom-utils/getWindow.js":"dDWA0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"aT75r":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if ((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto)) return [];
    var oppositePlacement = (0, _getOppositePlacementJsDefault.default)(placement);
    return [
        (0, _getOppositeVariationPlacementJsDefault.default)(placement),
        oppositePlacement,
        (0, _getOppositeVariationPlacementJsDefault.default)(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        (0, _getOppositePlacementJsDefault.default)(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto) ? (0, _computeAutoPlacementJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement = placements[i];
        var _basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
        var isStartVariation = (0, _getVariationJsDefault.default)(placement) === (0, _enumsJs.start);
        var isVertical = [
            (0, _enumsJs.top),
            (0, _enumsJs.bottom)
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? (0, _enumsJs.right) : (0, _enumsJs.left) : isStartVariation ? (0, _enumsJs.bottom) : (0, _enumsJs.top);
        if (referenceRect[len] > popperRect[len]) mainVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var altVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"jplAV","../utils/getBasePlacement.js":"9efyB","../utils/getOppositeVariationPlacement.js":"mhxxa","../utils/detectOverflow.js":"aNm7x","../utils/computeAutoPlacement.js":"ejh2m","../enums.js":"dqsI9","../utils/getVariation.js":"2m8gR","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jplAV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositePlacement);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"mhxxa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositeVariationPlacement);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"aNm7x":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>detectOverflow);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {};
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? (0, _enumsJs.clippingParents) : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? (0, _enumsJs.viewport) : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? (0, _enumsJs.popper) : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = (0, _mergePaddingObjectJsDefault.default)(typeof padding !== 'number' ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
    var altContext = elementContext === (0, _enumsJs.popper) ? (0, _enumsJs.reference) : (0, _enumsJs.popper);
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = (0, _getClippingRectJsDefault.default)((0, _instanceOfJs.isElement)(element) ? element : element.contextElement || (0, _getDocumentElementJsDefault.default)(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = (0, _getBoundingClientRectJsDefault.default)(state.elements.reference);
    var popperOffsets = (0, _computeOffsetsJsDefault.default)({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = (0, _rectToClientRectJsDefault.default)(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === (0, _enumsJs.popper) ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === (0, _enumsJs.popper) && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                (0, _enumsJs.right),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                (0, _enumsJs.top),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}

},{"../dom-utils/getClippingRect.js":"20F13","../dom-utils/getDocumentElement.js":"c7zg9","../dom-utils/getBoundingClientRect.js":"9UlM0","./computeOffsets.js":"ak6aU","./rectToClientRect.js":"fRMO3","../enums.js":"dqsI9","../dom-utils/instanceOf.js":"fZZLP","./mergePaddingObject.js":"lqz1Y","./expandToHashMap.js":"eIW4O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"20F13":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getClippingRect);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element, strategy) {
    var rect = (0, _getBoundingClientRectJsDefault.default)(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === (0, _enumsJs.viewport) ? (0, _rectToClientRectJsDefault.default)((0, _getViewportRectJsDefault.default)(element, strategy)) : (0, _instanceOfJs.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0, _rectToClientRectJsDefault.default)((0, _getDocumentRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = (0, _listScrollParentsJsDefault.default)((0, _getParentNodeJsDefault.default)(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf((0, _getComputedStyleJsDefault.default)(element).position) >= 0;
    var clipperElement = canEscapeClipping && (0, _instanceOfJs.isHTMLElement)(element) ? (0, _getOffsetParentJsDefault.default)(element) : element;
    if (!(0, _instanceOfJs.isElement)(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return (0, _instanceOfJs.isElement)(clippingParent) && (0, _containsJsDefault.default)(clippingParent, clipperElement) && (0, _getNodeNameJsDefault.default)(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = (0, _mathJs.max)(rect.top, accRect.top);
        accRect.right = (0, _mathJs.min)(rect.right, accRect.right);
        accRect.bottom = (0, _mathJs.min)(rect.bottom, accRect.bottom);
        accRect.left = (0, _mathJs.max)(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}

},{"../enums.js":"dqsI9","./getViewportRect.js":"8cjc6","./getDocumentRect.js":"kT69k","./listScrollParents.js":"bvZa9","./getOffsetParent.js":"esdlY","./getDocumentElement.js":"c7zg9","./getComputedStyle.js":"351ZE","./instanceOf.js":"fZZLP","./getBoundingClientRect.js":"9UlM0","./getParentNode.js":"5gcXv","./contains.js":"jzgTK","./getNodeName.js":"9sdcM","../utils/rectToClientRect.js":"fRMO3","../utils/math.js":"dqB5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"8cjc6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getViewportRect);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getViewportRect(element, strategy) {
    var win = (0, _getWindowJsDefault.default)(element);
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = (0, _isLayoutViewportJsDefault.default)();
        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + (0, _getWindowScrollBarXJsDefault.default)(element),
        y: y
    };
}

},{"./getWindow.js":"dDWA0","./getDocumentElement.js":"c7zg9","./getWindowScrollBarX.js":"imnVb","./isLayoutViewport.js":"dFmXr","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"imnVb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScrollBarX);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return (0, _getBoundingClientRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)).left + (0, _getWindowScrollJsDefault.default)(element).scrollLeft;
}

},{"./getBoundingClientRect.js":"9UlM0","./getDocumentElement.js":"c7zg9","./getWindowScroll.js":"gYcWm","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"gYcWm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScroll);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = (0, _getWindowJsDefault.default)(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}

},{"./getWindow.js":"dDWA0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"kT69k":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentRect);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var winScroll = (0, _getWindowScrollJsDefault.default)(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = (0, _mathJs.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = (0, _mathJs.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + (0, _getWindowScrollBarXJsDefault.default)(element);
    var y = -winScroll.scrollTop;
    if ((0, _getComputedStyleJsDefault.default)(body || html).direction === 'rtl') x += (0, _mathJs.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}

},{"./getDocumentElement.js":"c7zg9","./getComputedStyle.js":"351ZE","./getWindowScrollBarX.js":"imnVb","./getWindowScroll.js":"gYcWm","../utils/math.js":"dqB5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bvZa9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>listScrollParents);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = (0, _getScrollParentJsDefault.default)(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = (0, _getWindowJsDefault.default)(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], (0, _isScrollParentJsDefault.default)(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents((0, _getParentNodeJsDefault.default)(target)));
}

},{"./getScrollParent.js":"d98Im","./getParentNode.js":"5gcXv","./getWindow.js":"dDWA0","./isScrollParent.js":"7wjOU","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"d98Im":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getScrollParent);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf((0, _getNodeNameJsDefault.default)(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if ((0, _instanceOfJs.isHTMLElement)(node) && (0, _isScrollParentJsDefault.default)(node)) return node;
    return getScrollParent((0, _getParentNodeJsDefault.default)(node));
}

},{"./getParentNode.js":"5gcXv","./isScrollParent.js":"7wjOU","./getNodeName.js":"9sdcM","./instanceOf.js":"fZZLP","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7wjOU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isScrollParent);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = (0, _getComputedStyleJsDefault.default)(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

},{"./getComputedStyle.js":"351ZE","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"fRMO3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rectToClientRect);
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"ak6aU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeOffsets);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? (0, _getBasePlacementJsDefault.default)(placement) : null;
    var variation = placement ? (0, _getVariationJsDefault.default)(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case 0, _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case 0, _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case 0, _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case 0, _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case 0, _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case 0, _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}

},{"./getBasePlacement.js":"9efyB","./getVariation.js":"2m8gR","./getMainAxisFromPlacement.js":"9xoRu","../enums.js":"dqsI9","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"ejh2m":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeAutoPlacement);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {};
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? (0, _enumsJs.placements) : _options$allowedAutoP;
    var variation = (0, _getVariationJsDefault.default)(placement);
    var placements = variation ? flipVariations ? (0, _enumsJs.variationPlacements) : (0, _enumsJs.variationPlacements).filter(function(placement) {
        return (0, _getVariationJsDefault.default)(placement) === variation;
    }) : (0, _enumsJs.basePlacements);
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) allowedPlacements = placements;
     // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[(0, _getBasePlacementJsDefault.default)(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}

},{"./getVariation.js":"2m8gR","../enums.js":"dqsI9","./detectOverflow.js":"aNm7x","./getBasePlacement.js":"9efyB","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"hxy5e":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        (0, _enumsJs.top),
        (0, _enumsJs.right),
        (0, _enumsJs.bottom),
        (0, _enumsJs.left)
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = (0, _detectOverflowJsDefault.default)(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = (0, _detectOverflowJsDefault.default)(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"dqsI9","../utils/detectOverflow.js":"aNm7x","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"532CI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
    var invertDistance = [
        (0, _enumsJs.left),
        (0, _enumsJs.top)
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = (0, _enumsJs.placements).reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"9efyB","../enums.js":"dqsI9","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"33iAi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = (0, _computeOffsetsJsDefault.default)({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
};

},{"../utils/computeOffsets.js":"ak6aU","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1OUS8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = (0, _detectOverflowJsDefault.default)(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var variation = (0, _getVariationJsDefault.default)(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var altAxis = (0, _getAltAxisJsDefault.default)(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var altSide = mainAxis === 'y' ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === (0, _enumsJs.start) ? referenceRect[len] : popperRect[len];
        var maxLen = variation === (0, _enumsJs.start) ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? (0, _getLayoutRectJsDefault.default)(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0, _getFreshSideObjectJsDefault.default)();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = (0, _withinJs.within)(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && (0, _getOffsetParentJsDefault.default)(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = (0, _withinJs.within)(tether ? (0, _mathJs.min)(min, tetherMin) : min, offset, tether ? (0, _mathJs.max)(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var _altSide = mainAxis === 'x' ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            (0, _enumsJs.top),
            (0, _enumsJs.left)
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? (0, _withinJs.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0, _withinJs.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"dqsI9","../utils/getBasePlacement.js":"9efyB","../utils/getMainAxisFromPlacement.js":"9xoRu","../utils/getAltAxis.js":"91G3I","../utils/within.js":"eFY46","../dom-utils/getLayoutRect.js":"lD5bH","../dom-utils/getOffsetParent.js":"esdlY","../utils/detectOverflow.js":"aNm7x","../utils/getVariation.js":"2m8gR","../utils/getFreshSideObject.js":"j8h8r","../utils/math.js":"dqB5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"91G3I":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getAltAxis);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"iYSVN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator);
parcelHelpers.export(exports, "createPopper", ()=>createPopper);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _detectOverflowJsDefault.default));
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {};
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: (0, _instanceOfJs.isElement)(reference) ? (0, _listScrollParentsJsDefault.default)(reference) : reference.contextElement ? (0, _listScrollParentsJsDefault.default)(reference.contextElement) : [],
                    popper: (0, _listScrollParentsJsDefault.default)(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = (0, _orderModifiersJsDefault.default)((0, _mergeByNameJsDefault.default)([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                });
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) return;
                 // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: (0, _getCompositeRectJsDefault.default)(reference, (0, _getOffsetParentJsDefault.default)(popper), state.options.strategy === 'fixed'),
                    popper: (0, _getLayoutRectJsDefault.default)(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: (0, _debounceJsDefault.default)(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) return instance;
        instance.setOptions(options).then(function(state) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref) {
                var name = _ref.name, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, effect = _ref.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {};
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"f0K5R","./dom-utils/getLayoutRect.js":"lD5bH","./dom-utils/listScrollParents.js":"bvZa9","./dom-utils/getOffsetParent.js":"esdlY","./utils/orderModifiers.js":"kI9N2","./utils/debounce.js":"2cgVb","./utils/mergeByName.js":"2hJWV","./utils/detectOverflow.js":"aNm7x","./dom-utils/instanceOf.js":"fZZLP","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"f0K5R":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getCompositeRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = (0, _mathJs.round)(rect.width) / element.offsetWidth || 1;
    var scaleY = (0, _mathJs.round)(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = (0, _instanceOfJs.isHTMLElement)(offsetParent);
    var offsetParentIsScaled = (0, _instanceOfJs.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
    var documentElement = (0, _getDocumentElementJsDefault.default)(offsetParent);
    var rect = (0, _getBoundingClientRectJsDefault.default)(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if ((0, _getNodeNameJsDefault.default)(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        (0, _isScrollParentJsDefault.default)(documentElement)) scroll = (0, _getNodeScrollJsDefault.default)(offsetParent);
        if ((0, _instanceOfJs.isHTMLElement)(offsetParent)) {
            offsets = (0, _getBoundingClientRectJsDefault.default)(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = (0, _getWindowScrollBarXJsDefault.default)(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}

},{"./getBoundingClientRect.js":"9UlM0","./getNodeScroll.js":"22GET","./getNodeName.js":"9sdcM","./instanceOf.js":"fZZLP","./getWindowScrollBarX.js":"imnVb","./getDocumentElement.js":"c7zg9","./isScrollParent.js":"7wjOU","../utils/math.js":"dqB5O","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"22GET":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeScroll);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === (0, _getWindowJsDefault.default)(node) || !(0, _instanceOfJs.isHTMLElement)(node)) return (0, _getWindowScrollJsDefault.default)(node);
    else return (0, _getHTMLElementScrollJsDefault.default)(node);
}

},{"./getWindowScroll.js":"gYcWm","./getWindow.js":"dDWA0","./instanceOf.js":"fZZLP","./getHTMLElementScroll.js":"9dA3n","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9dA3n":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getHTMLElementScroll);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"kI9N2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>orderModifiers);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return (0, _enumsJs.modifierPhases).reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}

},{"../enums.js":"dqsI9","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2cgVb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>debounce);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2hJWV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergeByName);
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"cxjOo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopper", ()=>createPopper) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator));
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    (0, _eventListenersJsDefault.default),
    (0, _popperOffsetsJsDefault.default),
    (0, _computeStylesJsDefault.default),
    (0, _applyStylesJsDefault.default),
    (0, _offsetJsDefault.default),
    (0, _flipJsDefault.default),
    (0, _preventOverflowJsDefault.default),
    (0, _arrowJsDefault.default),
    (0, _hideJsDefault.default)
];
var createPopper = /*#__PURE__*/ (0, _createPopperJs.popperGenerator)({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"iYSVN","./modifiers/eventListeners.js":"1DhCo","./modifiers/popperOffsets.js":"33iAi","./modifiers/computeStyles.js":"STvZ4","./modifiers/applyStyles.js":"fUaxu","./modifiers/offset.js":"532CI","./modifiers/flip.js":"aT75r","./modifiers/preventOverflow.js":"1OUS8","./modifiers/arrow.js":"iZmP4","./modifiers/hide.js":"hxy5e","./popper-lite.js":false,"./modifiers/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2p4KJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper);
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator));
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var defaultModifiers = [
    (0, _eventListenersJsDefault.default),
    (0, _popperOffsetsJsDefault.default),
    (0, _computeStylesJsDefault.default),
    (0, _applyStylesJsDefault.default)
];
var createPopper = /*#__PURE__*/ (0, _createPopperJs.popperGenerator)({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"iYSVN","./modifiers/eventListeners.js":"1DhCo","./modifiers/popperOffsets.js":"33iAi","./modifiers/computeStyles.js":"STvZ4","./modifiers/applyStyles.js":"fUaxu","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1NeKU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "icons", ()=>icons);
var _data = require("./data");
const icons = ()=>{
    const WRAPPER = document.getElementById("icons");
    let list = "";
    if (WRAPPER) {
        (0, _data.ICONS_DATA).map((item)=>{
            list += `<div class="g-col-4 g-col-sm-3 g-col-lg-2 p-3 text-center">
                        <i class="ph ph-${item} fs-2 text-body-emphasis"></i>
                        <div class="hidden sm:block text-body-secondary fs-7">${item}</div>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"./data":"3Ayis","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3Ayis":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ICONS_DATA", ()=>ICONS_DATA);
const ICONS_DATA = [
    "address-book",
    "air-traffic-control",
    "airplane",
    "airplane-in-flight",
    "airplane-landing",
    "airplane-takeoff",
    "airplane-tilt",
    "airplay",
    "alarm",
    "alien",
    "align-bottom",
    "align-bottom-simple",
    "align-center-horizontal",
    "align-center-horizontal-simple",
    "align-center-vertical",
    "align-center-vertical-simple",
    "align-left",
    "align-left-simple",
    "align-right",
    "align-right-simple",
    "align-top",
    "align-top-simple",
    "amazon-logo",
    "anchor",
    "anchor-simple",
    "android-logo",
    "angular-logo",
    "aperture",
    "app-store-logo",
    "app-window",
    "apple-logo",
    "apple-podcasts-logo",
    "archive",
    "archive-box",
    "archive-tray",
    "armchair",
    "arrow-arc-left",
    "arrow-arc-right",
    "arrow-bend-double-up-left",
    "arrow-bend-double-up-right",
    "arrow-bend-down-left",
    "arrow-bend-down-right",
    "arrow-bend-left-down",
    "arrow-bend-left-up",
    "arrow-bend-right-down",
    "arrow-bend-right-up",
    "arrow-bend-up-left",
    "arrow-bend-up-right",
    "arrow-circle-down",
    "arrow-circle-down-left",
    "arrow-circle-down-right",
    "arrow-circle-left",
    "arrow-circle-right",
    "arrow-circle-up",
    "arrow-circle-up-left",
    "arrow-circle-up-right",
    "arrow-clockwise",
    "arrow-counter-clockwise",
    "arrow-down",
    "arrow-down-left",
    "arrow-down-right",
    "arrow-elbow-down-left",
    "arrow-elbow-down-right",
    "arrow-elbow-left",
    "arrow-elbow-left-down",
    "arrow-elbow-left-up",
    "arrow-elbow-right",
    "arrow-elbow-right-down",
    "arrow-elbow-right-up",
    "arrow-elbow-up-left",
    "arrow-elbow-up-right",
    "arrow-fat-down",
    "arrow-fat-left",
    "arrow-fat-line-down",
    "arrow-fat-line-left",
    "arrow-fat-line-right",
    "arrow-fat-line-up",
    "arrow-fat-lines-down",
    "arrow-fat-lines-left",
    "arrow-fat-lines-right",
    "arrow-fat-lines-up",
    "arrow-fat-right",
    "arrow-fat-up",
    "arrow-left",
    "arrow-line-down",
    "arrow-line-down-left",
    "arrow-line-down-right",
    "arrow-line-left",
    "arrow-line-right",
    "arrow-line-up",
    "arrow-line-up-left",
    "arrow-line-up-right",
    "arrow-right",
    "arrow-square-down",
    "arrow-square-down-left",
    "arrow-square-down-right",
    "arrow-square-in",
    "arrow-square-left",
    "arrow-square-out",
    "arrow-square-right",
    "arrow-square-up",
    "arrow-square-up-left",
    "arrow-square-up-right",
    "arrow-u-down-left",
    "arrow-u-down-right",
    "arrow-u-left-down",
    "arrow-u-left-up",
    "arrow-u-right-down",
    "arrow-u-right-up",
    "arrow-u-up-left",
    "arrow-u-up-right",
    "arrow-up",
    "arrow-up-left",
    "arrow-up-right",
    "arrows-clockwise",
    "arrows-counter-clockwise",
    "arrows-down-up",
    "arrows-horizontal",
    "arrows-in",
    "arrows-in-cardinal",
    "arrows-in-line-horizontal",
    "arrows-in-line-vertical",
    "arrows-in-simple",
    "arrows-left-right",
    "arrows-merge",
    "arrows-out",
    "arrows-out-cardinal",
    "arrows-out-line-horizontal",
    "arrows-out-line-vertical",
    "arrows-out-simple",
    "arrows-split",
    "arrows-vertical",
    "article",
    "article-medium",
    "article-ny-times",
    "asterisk",
    "asterisk-simple",
    "at",
    "atom",
    "baby",
    "backpack",
    "backspace",
    "bag",
    "bag-simple",
    "balloon",
    "bandaids",
    "bank",
    "barbell",
    "barcode",
    "barricade",
    "baseball",
    "baseball-cap",
    "basket",
    "basketball",
    "bathtub",
    "battery-charging",
    "battery-charging-vertical",
    "battery-empty",
    "battery-full",
    "battery-high",
    "battery-low",
    "battery-medium",
    "battery-plus",
    "battery-plus-vertical",
    "battery-vertical-empty",
    "battery-vertical-full",
    "battery-vertical-high",
    "battery-vertical-low",
    "battery-vertical-medium",
    "battery-warning",
    "battery-warning-vertical",
    "bed",
    "beer-bottle",
    "beer-stein",
    "behance-logo",
    "bell",
    "bell-ringing",
    "bell-simple",
    "bell-simple-ringing",
    "bell-simple-slash",
    "bell-simple-z",
    "bell-slash",
    "bell-z",
    "bezier-curve",
    "bicycle",
    "binoculars",
    "bird",
    "bluetooth",
    "bluetooth-connected",
    "bluetooth-slash",
    "bluetooth-x",
    "boat",
    "bone",
    "book",
    "book-bookmark",
    "book-open",
    "book-open-text",
    "bookmark",
    "bookmark-simple",
    "bookmarks",
    "bookmarks-simple",
    "books",
    "boot",
    "bounding-box",
    "bowl-food",
    "brackets-angle",
    "brackets-curly",
    "brackets-round",
    "brackets-square",
    "brain",
    "brandy",
    "bridge",
    "briefcase",
    "briefcase-metal",
    "broadcast",
    "broom",
    "browser",
    "browsers",
    "bug",
    "bug-beetle",
    "bug-droid",
    "buildings",
    "bus",
    "butterfly",
    "cactus",
    "cake",
    "calculator",
    "calendar",
    "calendar-blank",
    "calendar-check",
    "calendar-plus",
    "calendar-x",
    "call-bell",
    "camera",
    "camera-plus",
    "camera-rotate",
    "camera-slash",
    "campfire",
    "car",
    "car-profile",
    "car-simple",
    "cardholder",
    "cards",
    "caret-circle-double-down",
    "caret-circle-double-left",
    "caret-circle-double-right",
    "caret-circle-double-up",
    "caret-circle-down",
    "caret-circle-left",
    "caret-circle-right",
    "caret-circle-up",
    "caret-circle-up-down",
    "caret-double-down",
    "caret-double-left",
    "caret-double-right",
    "caret-double-up",
    "caret-down",
    "caret-left",
    "caret-right",
    "caret-up",
    "caret-up-down",
    "carrot",
    "cassette-tape",
    "castle-turret",
    "cat",
    "cell-signal-full",
    "cell-signal-high",
    "cell-signal-low",
    "cell-signal-medium",
    "cell-signal-none",
    "cell-signal-slash",
    "cell-signal-x",
    "certificate",
    "chair",
    "chalkboard",
    "chalkboard-simple",
    "chalkboard-teacher",
    "champagne",
    "charging-station",
    "chart-bar",
    "chart-bar-horizontal",
    "chart-donut",
    "chart-line",
    "chart-line-down",
    "chart-line-up",
    "chart-pie",
    "chart-pie-slice",
    "chart-polar",
    "chart-scatter",
    "chat",
    "chat-centered",
    "chat-centered-dots",
    "chat-centered-text",
    "chat-circle",
    "chat-circle-dots",
    "chat-circle-text",
    "chat-dots",
    "chat-teardrop",
    "chat-teardrop-dots",
    "chat-teardrop-text",
    "chat-text",
    "chats",
    "chats-circle",
    "chats-teardrop",
    "check",
    "check-circle",
    "check-fat",
    "check-square",
    "check-square-offset",
    "checks",
    "church",
    "circle",
    "circle-dashed",
    "circle-half",
    "circle-half-tilt",
    "circle-notch",
    "circles-four",
    "circles-three",
    "circles-three-plus",
    "circuitry",
    "clipboard",
    "clipboard-text",
    "clock",
    "clock-afternoon",
    "clock-clockwise",
    "clock-countdown",
    "clock-counter-clockwise",
    "closed-captioning",
    "cloud",
    "cloud-arrow-down",
    "cloud-arrow-up",
    "cloud-check",
    "cloud-fog",
    "cloud-lightning",
    "cloud-moon",
    "cloud-rain",
    "cloud-slash",
    "cloud-snow",
    "cloud-sun",
    "cloud-warning",
    "cloud-x",
    "club",
    "coat-hanger",
    "coda-logo",
    "code",
    "code-block",
    "code-simple",
    "codepen-logo",
    "codesandbox-logo",
    "coffee",
    "coin",
    "coin-vertical",
    "coins",
    "columns",
    "command",
    "compass",
    "compass-tool",
    "computer-tower",
    "confetti",
    "contactless-payment",
    "control",
    "cookie",
    "cooking-pot",
    "copy",
    "copy-simple",
    "copyleft",
    "copyright",
    "corners-in",
    "corners-out",
    "couch",
    "cpu",
    "credit-card",
    "crop",
    "cross",
    "crosshair",
    "crosshair-simple",
    "crown",
    "crown-simple",
    "cube",
    "cube-focus",
    "cube-transparent",
    "currency-btc",
    "currency-circle-dollar",
    "currency-cny",
    "currency-dollar",
    "currency-dollar-simple",
    "currency-eth",
    "currency-eur",
    "currency-gbp",
    "currency-inr",
    "currency-jpy",
    "currency-krw",
    "currency-kzt",
    "currency-ngn",
    "currency-rub",
    "cursor",
    "cursor-click",
    "cursor-text",
    "cylinder",
    "database",
    "desktop",
    "desktop-tower",
    "detective",
    "dev-to-logo",
    "device-mobile",
    "device-mobile-camera",
    "device-mobile-speaker",
    "device-tablet",
    "device-tablet-camera",
    "device-tablet-speaker",
    "devices",
    "diamond",
    "diamonds-four",
    "dice-five",
    "dice-four",
    "dice-one",
    "dice-six",
    "dice-three",
    "dice-two",
    "disc",
    "discord-logo",
    "divide",
    "dna",
    "dog",
    "door",
    "door-open",
    "dot",
    "dot-outline",
    "dots-nine",
    "dots-six",
    "dots-six-vertical",
    "dots-three",
    "dots-three-circle",
    "dots-three-circle-vertical",
    "dots-three-outline",
    "dots-three-outline-vertical",
    "dots-three-vertical",
    "download",
    "download-simple",
    "dress",
    "dribbble-logo",
    "drop",
    "drop-half",
    "drop-half-bottom",
    "dropbox-logo",
    "ear",
    "ear-slash",
    "egg",
    "egg-crack",
    "eject",
    "eject-simple",
    "elevator",
    "engine",
    "envelope",
    "envelope-open",
    "envelope-simple",
    "envelope-simple-open",
    "equalizer",
    "equals",
    "eraser",
    "escalator-down",
    "escalator-up",
    "exam",
    "exclude",
    "exclude-square",
    "export",
    "eye",
    "eye-closed",
    "eye-slash",
    "eyedropper",
    "eyedropper-sample",
    "eyeglasses",
    "face-mask",
    "facebook-logo",
    "factory",
    "faders",
    "faders-horizontal",
    "fan",
    "fast-forward",
    "fast-forward-circle",
    "feather",
    "figma-logo",
    "file",
    "file-archive",
    "file-arrow-down",
    "file-arrow-up",
    "file-audio",
    "file-cloud",
    "file-code",
    "file-css",
    "file-csv",
    "file-dashed",
    "file-doc",
    "file-html",
    "file-image",
    "file-jpg",
    "file-js",
    "file-jsx",
    "file-lock",
    "file-minus",
    "file-pdf",
    "file-plus",
    "file-png",
    "file-ppt",
    "file-rs",
    "file-search",
    "file-sql",
    "file-svg",
    "file-text",
    "file-ts",
    "file-tsx",
    "file-video",
    "file-vue",
    "file-x",
    "file-xls",
    "file-zip",
    "files",
    "film-reel",
    "film-script",
    "film-slate",
    "film-strip",
    "fingerprint",
    "fingerprint-simple",
    "finn-the-human",
    "fire",
    "fire-extinguisher",
    "fire-simple",
    "first-aid",
    "first-aid-kit",
    "fish",
    "fish-simple",
    "flag",
    "flag-banner",
    "flag-checkered",
    "flag-pennant",
    "flame",
    "flashlight",
    "flask",
    "floppy-disk",
    "floppy-disk-back",
    "flow-arrow",
    "flower",
    "flower-lotus",
    "flower-tulip",
    "flying-saucer",
    "folder",
    "folder-dashed",
    "folder-lock",
    "folder-minus",
    "folder-notch",
    "folder-notch-minus",
    "folder-notch-open",
    "folder-notch-plus",
    "folder-open",
    "folder-plus",
    "folder-simple",
    "folder-simple-dashed",
    "folder-simple-lock",
    "folder-simple-minus",
    "folder-simple-plus",
    "folder-simple-star",
    "folder-simple-user",
    "folder-star",
    "folder-user",
    "folders",
    "football",
    "footprints",
    "fork-knife",
    "frame-corners",
    "framer-logo",
    "function",
    "funnel",
    "funnel-simple",
    "game-controller",
    "garage",
    "gas-can",
    "gas-pump",
    "gauge",
    "gavel",
    "gear",
    "gear-fine",
    "gear-six",
    "gender-female",
    "gender-intersex",
    "gender-male",
    "gender-neuter",
    "gender-nonbinary",
    "gender-transgender",
    "ghost",
    "gif",
    "gift",
    "git-branch",
    "git-commit",
    "git-diff",
    "git-fork",
    "git-merge",
    "git-pull-request",
    "github-logo",
    "gitlab-logo",
    "gitlab-logo-simple",
    "globe",
    "globe-hemisphere-east",
    "globe-hemisphere-west",
    "globe-simple",
    "globe-stand",
    "goggles",
    "goodreads-logo",
    "google-cardboard-logo",
    "google-chrome-logo",
    "google-drive-logo",
    "google-logo",
    "google-photos-logo",
    "google-play-logo",
    "google-podcasts-logo",
    "gradient",
    "graduation-cap",
    "grains",
    "grains-slash",
    "graph",
    "grid-four",
    "grid-nine",
    "guitar",
    "hamburger",
    "hammer",
    "hand",
    "hand-coins",
    "hand-eye",
    "hand-fist",
    "hand-grabbing",
    "hand-heart",
    "hand-palm",
    "hand-pointing",
    "hand-soap",
    "hand-swipe-left",
    "hand-swipe-right",
    "hand-tap",
    "hand-waving",
    "handbag",
    "handbag-simple",
    "hands-clapping",
    "hands-praying",
    "handshake",
    "hard-drive",
    "hard-drives",
    "hash",
    "hash-straight",
    "headlights",
    "headphones",
    "headset",
    "heart",
    "heart-break",
    "heart-half",
    "heart-straight",
    "heart-straight-break",
    "heartbeat",
    "hexagon",
    "high-heel",
    "highlighter-circle",
    "hoodie",
    "horse",
    "hourglass",
    "hourglass-high",
    "hourglass-low",
    "hourglass-medium",
    "hourglass-simple",
    "hourglass-simple-high",
    "hourglass-simple-low",
    "hourglass-simple-medium",
    "house",
    "house-line",
    "house-simple",
    "ice-cream",
    "identification-badge",
    "identification-card",
    "image",
    "image-square",
    "images",
    "images-square",
    "infinity",
    "info",
    "instagram-logo",
    "intersect",
    "intersect-square",
    "intersect-three",
    "jeep",
    "kanban",
    "key",
    "key-return",
    "keyboard",
    "keyhole",
    "knife",
    "ladder",
    "ladder-simple",
    "lamp",
    "laptop",
    "layout",
    "leaf",
    "lifebuoy",
    "lightbulb",
    "lightbulb-filament",
    "lighthouse",
    "lightning",
    "lightning-a",
    "lightning-slash",
    "line-segment",
    "line-segments",
    "link",
    "link-break",
    "link-simple",
    "link-simple-break",
    "link-simple-horizontal",
    "link-simple-horizontal-break",
    "linkedin-logo",
    "linux-logo",
    "list",
    "list-bullets",
    "list-checks",
    "list-dashes",
    "list-magnifying-glass",
    "list-numbers",
    "list-plus",
    "lock",
    "lock-key",
    "lock-key-open",
    "lock-laminated",
    "lock-laminated-open",
    "lock-open",
    "lock-simple",
    "lock-simple-open",
    "lockers",
    "magic-wand",
    "magnet",
    "magnet-straight",
    "magnifying-glass",
    "magnifying-glass-minus",
    "magnifying-glass-plus",
    "map-pin",
    "map-pin-line",
    "map-trifold",
    "marker-circle",
    "martini",
    "mask-happy",
    "mask-sad",
    "math-operations",
    "medal",
    "medal-military",
    "medium-logo",
    "megaphone",
    "megaphone-simple",
    "messenger-logo",
    "meta-logo",
    "metronome",
    "microphone",
    "microphone-slash",
    "microphone-stage",
    "microsoft-excel-logo",
    "microsoft-outlook-logo",
    "microsoft-powerpoint-logo",
    "microsoft-teams-logo",
    "microsoft-word-logo",
    "minus",
    "minus-circle",
    "minus-square",
    "money",
    "monitor",
    "monitor-play",
    "moon",
    "moon-stars",
    "moped",
    "moped-front",
    "mosque",
    "motorcycle",
    "mountains",
    "mouse",
    "mouse-simple",
    "music-note",
    "music-note-simple",
    "music-notes",
    "music-notes-plus",
    "music-notes-simple",
    "navigation-arrow",
    "needle",
    "newspaper",
    "newspaper-clipping",
    "notches",
    "note",
    "note-blank",
    "note-pencil",
    "notebook",
    "notepad",
    "notification",
    "notion-logo",
    "number-circle-eight",
    "number-circle-five",
    "number-circle-four",
    "number-circle-nine",
    "number-circle-one",
    "number-circle-seven",
    "number-circle-six",
    "number-circle-three",
    "number-circle-two",
    "number-circle-zero",
    "number-eight",
    "number-five",
    "number-four",
    "number-nine",
    "number-one",
    "number-seven",
    "number-six",
    "number-square-eight",
    "number-square-five",
    "number-square-four",
    "number-square-nine",
    "number-square-one",
    "number-square-seven",
    "number-square-six",
    "number-square-three",
    "number-square-two",
    "number-square-zero",
    "number-three",
    "number-two",
    "number-zero",
    "nut",
    "ny-times-logo",
    "octagon",
    "office-chair",
    "option",
    "orange-slice",
    "package",
    "paint-brush",
    "paint-brush-broad",
    "paint-brush-household",
    "paint-bucket",
    "paint-roller",
    "palette",
    "pants",
    "paper-plane",
    "paper-plane-right",
    "paper-plane-tilt",
    "paperclip",
    "paperclip-horizontal",
    "parachute",
    "paragraph",
    "parallelogram",
    "park",
    "password",
    "path",
    "patreon-logo",
    "pause",
    "pause-circle",
    "paw-print",
    "paypal-logo",
    "peace",
    "pen",
    "pen-nib",
    "pen-nib-straight",
    "pencil",
    "pencil-circle",
    "pencil-line",
    "pencil-simple",
    "pencil-simple-line",
    "pencil-simple-slash",
    "pencil-slash",
    "pentagram",
    "pepper",
    "percent",
    "person",
    "person-arms-spread",
    "person-simple",
    "person-simple-bike",
    "person-simple-run",
    "person-simple-throw",
    "person-simple-walk",
    "perspective",
    "phone",
    "phone-call",
    "phone-disconnect",
    "phone-incoming",
    "phone-outgoing",
    "phone-plus",
    "phone-slash",
    "phone-x",
    "phosphor-logo",
    "pi",
    "piano-keys",
    "picture-in-picture",
    "piggy-bank",
    "pill",
    "pinterest-logo",
    "pinwheel",
    "pizza",
    "placeholder",
    "planet",
    "plant",
    "play",
    "play-circle",
    "play-pause",
    "playlist",
    "plug",
    "plug-charging",
    "plugs",
    "plugs-connected",
    "plus",
    "plus-circle",
    "plus-minus",
    "plus-square",
    "poker-chip",
    "police-car",
    "polygon",
    "popcorn",
    "potted-plant",
    "power",
    "prescription",
    "presentation",
    "presentation-chart",
    "printer",
    "prohibit",
    "prohibit-inset",
    "projector-screen",
    "projector-screen-chart",
    "pulse",
    "push-pin",
    "push-pin-simple",
    "push-pin-simple-slash",
    "push-pin-slash",
    "puzzle-piece",
    "qr-code",
    "question",
    "queue",
    "quotes",
    "radical",
    "radio",
    "radio-button",
    "radioactive",
    "rainbow",
    "rainbow-cloud",
    "read-cv-logo",
    "receipt",
    "receipt-x",
    "record",
    "rectangle",
    "recycle",
    "reddit-logo",
    "repeat",
    "repeat-once",
    "rewind",
    "rewind-circle",
    "road-horizon",
    "robot",
    "rocket",
    "rocket-launch",
    "rows",
    "rss",
    "rss-simple",
    "rug",
    "ruler",
    "scales",
    "scan",
    "scissors",
    "scooter",
    "screencast",
    "scribble-loop",
    "scroll",
    "seal",
    "seal-check",
    "seal-question",
    "seal-warning",
    "selection",
    "selection-all",
    "selection-background",
    "selection-foreground",
    "selection-inverse",
    "selection-plus",
    "selection-slash",
    "shapes",
    "share",
    "share-fat",
    "share-network",
    "shield",
    "shield-check",
    "shield-checkered",
    "shield-chevron",
    "shield-plus",
    "shield-slash",
    "shield-star",
    "shield-warning",
    "shirt-folded",
    "shooting-star",
    "shopping-bag",
    "shopping-bag-open",
    "shopping-cart",
    "shopping-cart-simple",
    "shower",
    "shrimp",
    "shuffle",
    "shuffle-angular",
    "shuffle-simple",
    "sidebar",
    "sidebar-simple",
    "sigma",
    "sign-in",
    "sign-out",
    "signature",
    "signpost",
    "sim-card",
    "siren",
    "sketch-logo",
    "skip-back",
    "skip-back-circle",
    "skip-forward",
    "skip-forward-circle",
    "skull",
    "slack-logo",
    "sliders",
    "sliders-horizontal",
    "slideshow",
    "smiley",
    "smiley-angry",
    "smiley-blank",
    "smiley-meh",
    "smiley-nervous",
    "smiley-sad",
    "smiley-sticker",
    "smiley-wink",
    "smiley-x-eyes",
    "snapchat-logo",
    "sneaker",
    "sneaker-move",
    "snowflake",
    "soccer-ball",
    "sort-ascending",
    "sort-descending",
    "soundcloud-logo",
    "spade",
    "sparkle",
    "speaker-hifi",
    "speaker-high",
    "speaker-low",
    "speaker-none",
    "speaker-simple-high",
    "speaker-simple-low",
    "speaker-simple-none",
    "speaker-simple-slash",
    "speaker-simple-x",
    "speaker-slash",
    "speaker-x",
    "spinner",
    "spinner-gap",
    "spiral",
    "split-horizontal",
    "split-vertical",
    "spotify-logo",
    "square",
    "square-half",
    "square-half-bottom",
    "square-logo",
    "square-split-horizontal",
    "square-split-vertical",
    "squares-four",
    "stack",
    "stack-overflow-logo",
    "stack-simple",
    "stairs",
    "stamp",
    "star",
    "star-and-crescent",
    "star-four",
    "star-half",
    "star-of-david",
    "steering-wheel",
    "steps",
    "stethoscope",
    "sticker",
    "stool",
    "stop",
    "stop-circle",
    "storefront",
    "strategy",
    "stripe-logo",
    "student",
    "subtitles",
    "subtract",
    "subtract-square",
    "suitcase",
    "suitcase-rolling",
    "suitcase-simple",
    "sun",
    "sun-dim",
    "sun-horizon",
    "sunglasses",
    "swap",
    "swatches",
    "swimming-pool",
    "sword",
    "synagogue",
    "syringe",
    "t-shirt",
    "table",
    "tabs",
    "tag",
    "tag-chevron",
    "tag-simple",
    "target",
    "taxi",
    "telegram-logo",
    "television",
    "television-simple",
    "tennis-ball",
    "tent",
    "terminal",
    "terminal-window",
    "test-tube",
    "text-a-underline",
    "text-aa",
    "text-align-center",
    "text-align-justify",
    "text-align-left",
    "text-align-right",
    "text-b",
    "text-columns",
    "text-h",
    "text-h-five",
    "text-h-four",
    "text-h-one",
    "text-h-six",
    "text-h-three",
    "text-h-two",
    "text-indent",
    "text-italic",
    "text-outdent",
    "text-strikethrough",
    "text-t",
    "text-underline",
    "textbox",
    "thermometer",
    "thermometer-cold",
    "thermometer-hot",
    "thermometer-simple",
    "thumbs-down",
    "thumbs-up",
    "ticket",
    "tidal-logo",
    "tiktok-logo",
    "timer",
    "tipi",
    "toggle-left",
    "toggle-right",
    "toilet",
    "toilet-paper",
    "toolbox",
    "tooth",
    "tote",
    "tote-simple",
    "trademark",
    "trademark-registered",
    "traffic-cone",
    "traffic-sign",
    "traffic-signal",
    "train",
    "train-regional",
    "train-simple",
    "tram",
    "translate",
    "trash",
    "trash-simple",
    "tray",
    "tree",
    "tree-evergreen",
    "tree-palm",
    "tree-structure",
    "trend-down",
    "trend-up",
    "triangle",
    "trophy",
    "truck",
    "twitch-logo",
    "twitter-logo",
    "umbrella",
    "umbrella-simple",
    "unite",
    "unite-square",
    "upload",
    "upload-simple",
    "usb",
    "user",
    "user-circle",
    "user-circle-gear",
    "user-circle-minus",
    "user-circle-plus",
    "user-focus",
    "user-gear",
    "user-list",
    "user-minus",
    "user-plus",
    "user-rectangle",
    "user-square",
    "user-switch",
    "users",
    "users-four",
    "users-three",
    "van",
    "vault",
    "vibrate",
    "video",
    "video-camera",
    "video-camera-slash",
    "vignette",
    "vinyl-record",
    "virtual-reality",
    "virus",
    "voicemail",
    "volleyball",
    "wall",
    "wallet",
    "warehouse",
    "warning",
    "warning-circle",
    "warning-diamond",
    "warning-octagon",
    "watch",
    "wave-sawtooth",
    "wave-sine",
    "wave-square",
    "wave-triangle",
    "waveform",
    "waves",
    "webcam",
    "webcam-slash",
    "webhooks-logo",
    "wechat-logo",
    "whatsapp-logo",
    "wheelchair",
    "wheelchair-motion",
    "wifi-high",
    "wifi-low",
    "wifi-medium",
    "wifi-none",
    "wifi-slash",
    "wifi-x",
    "wind",
    "windows-logo",
    "wine",
    "wrench",
    "x",
    "x-circle",
    "x-square",
    "yin-yang",
    "youtube-logo"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jMSzf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "charts", ()=>charts);
parcelHelpers.export(exports, "chartsUpdate", ()=>chartsUpdate);
var _area = require("./area");
var _bar = require("./bar");
var _curvedLine = require("./curvedLine");
var _horizontalBar = require("./horizontalBar");
var _line = require("./line");
var _pie = require("./pie");
var _doughnut = require("./doughnut");
var _scatter = require("./scatter");
var _stackedBar = require("./stackedBar");
var _stackedHorizontalBar = require("./stackedHorizontalBar");
const charts = ()=>{
    // Bar chart
    (0, _bar.bar)();
    // Horizontal bar chart
    (0, _horizontalBar.horizontalBar)();
    // Stcked bar chart
    (0, _stackedBar.stackedBar)();
    // Stacked horizontal bar chart
    (0, _stackedHorizontalBar.stackedHorizontalBar)();
    // Line chart
    (0, _line.line)();
    // Curved line chart
    (0, _curvedLine.curvedLine)();
    // Area chart
    (0, _area.area)();
    // Scatter chart
    (0, _scatter.scatter)();
    // Pie chart
    (0, _pie.pie)();
    // Daughnut chart
    (0, _doughnut.doughnut)();
};
const chartsUpdate = ()=>{
    // Pie chart
    (0, _pie.pieChartUpdate)();
    // Doughnut chart
    (0, _doughnut.doughnutChartUpdate)();
    // Scatter chart
    (0, _scatter.scatterChartUpdate)();
    // Area chart
    (0, _area.areaChartUpdate)();
    // Bar chart
    (0, _bar.barChartUpdate)();
    // Curved line chart
    (0, _curvedLine.curvedLineChartUpdate)();
    // Horizontal bar chart
    (0, _horizontalBar.horizontalBarUpdate)();
    // Line chart
    (0, _line.lineChartUpdate)();
    // Stacked bar chart
    (0, _stackedBar.stackedBarUpdate)();
    // Stacked horizontal bar chart
    (0, _stackedHorizontalBar.stackedHorizontalBarUpdate)();
};

},{"./area":"2VDQH","./bar":"qaPbc","./curvedLine":"cc7lb","./horizontalBar":"j21Tm","./line":"95Llg","./pie":"5RlYN","./doughnut":"kL126","./scatter":"4oJWC","./stackedBar":"3eRMV","./stackedHorizontalBar":"jjIg4","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2VDQH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "area", ()=>area);
parcelHelpers.export(exports, "areaChartUpdate", ()=>areaChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-area");
let areaChart;
const area = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    15,
                    3,
                    10,
                    9,
                    29,
                    5,
                    22
                ],
                fill: true,
                borderColor: "#22d3ee",
                backgroundColor: "rgba(34, 211, 238, 0.1)",
                hoverBackgroundColor: "rgba(34, 211, 238, 0.1)",
                borderWidth: 1.25,
                pointRadius: 0,
                tension: 0.4,
                pointBackgroundColor: "#22d3ee",
                pointBorderColor: "#22d3ee",
                pointHoverBorderColor: "#22d3ee",
                pointHoverBorderWidth: 1.75,
                pointHoverBackgroundColor: "#22d3ee"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "line",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) areaChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const areaChartUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(areaChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"qaPbc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bar", ()=>bar);
parcelHelpers.export(exports, "barChartUpdate", ()=>barChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-bar");
let barChart;
const bar = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    44,
                    55,
                    41,
                    37,
                    22,
                    43,
                    21
                ],
                barThickness: 8,
                backgroundColor: "rgba(9, 182, 234, 0.30)",
                hoverBackgroundColor: "rgba(9, 182, 234, 0.30)"
            },
            {
                label: "February",
                data: [
                    53,
                    32,
                    33,
                    52,
                    13,
                    43,
                    32
                ],
                barThickness: 8,
                backgroundColor: "#09b7ea",
                hoverBackgroundColor: "#09b7ea"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "bar",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        maxTicksLimit: 7,
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) barChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const barChartUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(barChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"cc7lb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "curvedLine", ()=>curvedLine);
parcelHelpers.export(exports, "curvedLineChartUpdate", ()=>curvedLineChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-curved-line");
let curvedLineChart;
const curvedLine = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    15,
                    3,
                    10,
                    9,
                    29,
                    5,
                    22
                ],
                borderColor: "rgb(20, 184, 166, 0.3)",
                backgroundColor: "transparent",
                hoverBackgroundColor: "rgb(20, 184, 166, 0.3)",
                borderWidth: 1.25,
                pointRadius: 0,
                tension: 0.4,
                pointBackgroundColor: "transparent",
                pointBorderColor: "rgb(20, 184, 166, 0.3)",
                pointHoverBorderColor: "rgb(20, 184, 166, 0.3)",
                pointHoverBorderWidth: 1.75,
                pointHoverBackgroundColor: "rgb(20, 184, 166, 0.3)"
            },
            {
                label: "February",
                data: [
                    5,
                    19,
                    15,
                    24,
                    12,
                    30,
                    9
                ],
                borderColor: "#2dd4bf",
                backgroundColor: "transparent",
                hoverBackgroundColor: "#2dd4bf",
                borderWidth: 1.25,
                pointRadius: 0,
                tension: 0.4,
                pointBackgroundColor: "transparent",
                pointBorderColor: "#2dd4bf",
                pointHoverBorderColor: "#2dd4bf",
                pointHoverBorderWidth: 1.75,
                pointHoverBackgroundColor: "#2dd4bf"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "line",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) curvedLineChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const curvedLineChartUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(curvedLineChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"j21Tm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "horizontalBar", ()=>horizontalBar);
parcelHelpers.export(exports, "horizontalBarUpdate", ()=>horizontalBarUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-horizontal-bar");
let horizontalBarChart;
const horizontalBar = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    44,
                    55,
                    41,
                    37,
                    22,
                    43,
                    21
                ],
                barThickness: 8,
                backgroundColor: "rgba(192, 132, 252, 0.3)",
                hoverBackgroundColor: "rgba(192, 132, 252, 0.3)"
            },
            {
                label: "February",
                data: [
                    53,
                    32,
                    33,
                    52,
                    13,
                    43,
                    32
                ],
                barThickness: 8,
                backgroundColor: "#c084fc",
                hoverBackgroundColor: "#c084fc"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "bar",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            indexAxis: "y",
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        ...(0, _chart.CHART_LEGEND_LABEL),
                        usePointStyle: true
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        maxTicksLimit: 7,
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) horizontalBarChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const horizontalBarUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(horizontalBarChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"95Llg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "line", ()=>line);
parcelHelpers.export(exports, "lineChartUpdate", ()=>lineChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-line");
let lineChart;
const line = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    15,
                    3,
                    10,
                    9,
                    29,
                    5,
                    22
                ],
                borderColor: "rgba(9, 182, 234, 0.30)",
                backgroundColor: "transparent",
                hoverBackgroundColor: "rgba(9, 182, 234, 0.30)",
                borderWidth: 1.25,
                pointRadius: 0,
                pointBackgroundColor: "transparent",
                pointBorderColor: "rgba(9, 182, 234, 0.30)",
                pointHoverBorderColor: "rgba(9, 182, 234, 0.30)",
                pointHoverBorderWidth: 1.75,
                pointHoverBackgroundColor: "rgba(9, 182, 234, 0.30)"
            },
            {
                label: "February",
                data: [
                    5,
                    19,
                    15,
                    24,
                    12,
                    30,
                    9
                ],
                borderColor: "#09b7ea",
                backgroundColor: "transparent",
                hoverBackgroundColor: "#09b7ea",
                borderWidth: 1.25,
                pointRadius: 0,
                pointBackgroundColor: "transparent",
                pointBorderColor: "#09b7ea",
                pointHoverBorderColor: "#09b7ea",
                pointHoverBorderWidth: 1.75,
                pointHoverBackgroundColor: "#09b7ea"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "line",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) lineChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const lineChartUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(lineChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5RlYN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pie", ()=>pie);
parcelHelpers.export(exports, "pieChartUpdate", ()=>pieChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const WRAPPER = document.getElementById("chart-pie");
let chart;
const pie = ()=>{
    const DATA = {
        labels: [
            "Jan",
            "Feb",
            "Mar",
            "April"
        ],
        datasets: [
            {
                data: [
                    23981,
                    16342,
                    9736,
                    7632
                ],
                backgroundColor: [
                    (0, _utils.COLORS).blue,
                    (0, _utils.COLORS).teal,
                    (0, _utils.COLORS).purple,
                    (0, _utils.COLORS).orange
                ],
                borderWidth: 3,
                borderColor: (0, _utils.cssVar)("--bs-chart-pie-border-color"),
                hoverOffset: 1,
                hoverBorderWidth: 0,
                borderRadius: 5
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "pie",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Init chart
    if (WRAPPER) chart = new (0, _autoDefault.default)(WRAPPER, CONFIG);
};
const pieChartUpdate = ()=>{
    if (WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(chart, chart.data.datasets[0].borderColor = (0, _utils.cssVar)("--bs-chart-pie-border-color"));
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"kL126":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "doughnut", ()=>doughnut);
parcelHelpers.export(exports, "doughnutChartUpdate", ()=>doughnutChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const WRAPPER = document.getElementById("chart-doughnut");
let chart;
const doughnut = ()=>{
    const DATA = {
        labels: [
            "Jan",
            "Feb",
            "Mar",
            "Apr"
        ],
        datasets: [
            {
                data: [
                    23981,
                    16342,
                    9736,
                    7632
                ],
                backgroundColor: [
                    (0, _utils.COLORS).blue,
                    (0, _utils.COLORS).teal,
                    (0, _utils.COLORS).purple,
                    (0, _utils.COLORS).orange
                ],
                borderWidth: 3,
                borderColor: (0, _utils.cssVar)("--bs-chart-pie-border-color"),
                hoverOffset: 1,
                hoverBorderWidth: 0,
                borderRadius: 5
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "pie",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            cutout: 75,
            interaction: {
                mode: "index",
                intersect: false
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Init chart
    if (WRAPPER) chart = new (0, _autoDefault.default)(WRAPPER, CONFIG);
};
const doughnutChartUpdate = ()=>{
    if (WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(chart, chart.data.datasets[0].borderColor = (0, _utils.cssVar)("--bs-chart-pie-border-color"));
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"4oJWC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scatter", ()=>scatter);
parcelHelpers.export(exports, "scatterChartUpdate", ()=>scatterChartUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-scatter");
let scatterChart;
const scatter = ()=>{
    // Chart data
    const SCATTER_DATA_1 = [
        {
            x: 16.4,
            y: 5.4
        },
        {
            x: 21.7,
            y: 2
        },
        {
            x: 25.4,
            y: 3
        },
        {
            x: 19,
            y: 2
        },
        {
            x: 10.9,
            y: 1
        },
        {
            x: 13.6,
            y: 3.2
        },
        {
            x: 10.9,
            y: 7.4
        },
        {
            x: 10.9,
            y: 0
        },
        {
            x: 10.9,
            y: 8.2
        },
        {
            x: 16.4,
            y: 0
        },
        {
            x: 16.4,
            y: 1.8
        },
        {
            x: 13.6,
            y: 0.3
        },
        {
            x: 13.6,
            y: 0
        },
        {
            x: 29.9,
            y: 0
        },
        {
            x: 27.1,
            y: 2.3
        },
        {
            x: 16.4,
            y: 0
        },
        {
            x: 13.6,
            y: 3.7
        },
        {
            x: 10.9,
            y: 5.2
        },
        {
            x: 16.4,
            y: 6.5
        },
        {
            x: 10.9,
            y: 0
        },
        {
            x: 24.5,
            y: 7.1
        },
        {
            x: 10.9,
            y: 0
        },
        {
            x: 8.1,
            y: 4.7
        },
        {
            x: 19,
            y: 0
        },
        {
            x: 21.7,
            y: 1.8
        },
        {
            x: 27.1,
            y: 0
        },
        {
            x: 24.5,
            y: 0
        },
        {
            x: 27.1,
            y: 0
        },
        {
            x: 29.9,
            y: 1.5
        },
        {
            x: 27.1,
            y: 0.8
        },
        {
            x: 22.1,
            y: 2
        }
    ];
    const SCATTER_DATA_2 = [
        {
            x: 36.4,
            y: 13.4
        },
        {
            x: 1.7,
            y: 11
        },
        {
            x: 5.4,
            y: 8
        },
        {
            x: 9,
            y: 17
        },
        {
            x: 1.9,
            y: 4
        },
        {
            x: 3.6,
            y: 12.2
        },
        {
            x: 1.9,
            y: 14.4
        },
        {
            x: 1.9,
            y: 9
        },
        {
            x: 1.9,
            y: 13.2
        },
        {
            x: 1.4,
            y: 7
        },
        {
            x: 6.4,
            y: 8.8
        },
        {
            x: 3.6,
            y: 4.3
        },
        {
            x: 1.6,
            y: 10
        },
        {
            x: 9.9,
            y: 2
        },
        {
            x: 7.1,
            y: 15
        },
        {
            x: 1.4,
            y: 0
        },
        {
            x: 3.6,
            y: 13.7
        },
        {
            x: 1.9,
            y: 15.2
        },
        {
            x: 6.4,
            y: 16.5
        },
        {
            x: 0.9,
            y: 10
        },
        {
            x: 4.5,
            y: 17.1
        },
        {
            x: 10.9,
            y: 10
        },
        {
            x: 0.1,
            y: 14.7
        },
        {
            x: 9,
            y: 10
        },
        {
            x: 12.7,
            y: 11.8
        },
        {
            x: 2.1,
            y: 10
        },
        {
            x: 2.5,
            y: 10
        },
        {
            x: 27.1,
            y: 10
        },
        {
            x: 2.9,
            y: 11.5
        },
        {
            x: 7.1,
            y: 10.8
        },
        {
            x: 2.1,
            y: 12
        }
    ];
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: SCATTER_DATA_1,
                pointRadius: 5,
                pointHoverRadius: 6,
                pointBorderColor: "transparent",
                pointHoverBorderColor: "transparent",
                pointBackgroundColor: "rgba(245, 158, 11, 0.3)",
                pointHoverBackgroundColor: "rgba(245, 158, 11, 0.3)"
            },
            {
                label: "February",
                data: SCATTER_DATA_2,
                pointRadius: 5,
                pointHoverRadius: 6,
                pointBorderColor: "transparent",
                pointHoverBorderColor: "transparent",
                pointBackgroundColor: "#f59e0b",
                pointHoverBackgroundColor: "#f59e0b"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "scatter",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        maxTicksLimit: 8,
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) scatterChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const scatterChartUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(scatterChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3eRMV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stackedBar", ()=>stackedBar);
parcelHelpers.export(exports, "stackedBarUpdate", ()=>stackedBarUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-stacked-bar");
let stackedBarChart;
const stackedBar = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    44,
                    55,
                    41,
                    37,
                    22,
                    43,
                    21
                ],
                barThickness: 8,
                backgroundColor: "#c0ca33",
                hoverBackgroundColor: "#c0ca33"
            },
            {
                label: "February",
                data: [
                    53,
                    32,
                    33,
                    52,
                    13,
                    43,
                    32
                ],
                barThickness: 8,
                backgroundColor: "rgba(192, 202, 51, 0.3)",
                hoverBackgroundColor: "rgba(192, 202, 51, 0.3)"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "bar",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    stacked: true,
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    stacked: true,
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        maxTicksLimit: 7,
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) stackedBarChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const stackedBarUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(stackedBarChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jjIg4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stackedHorizontalBar", ()=>stackedHorizontalBar);
parcelHelpers.export(exports, "stackedHorizontalBarUpdate", ()=>stackedHorizontalBarUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
const CHART_WRAPPER = document.getElementById("chart-stacked-horizontal-bar");
let stackedHorizontalBarChart;
const stackedHorizontalBar = ()=>{
    // Chart data
    const DATA = {
        labels: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700"
        ],
        datasets: [
            {
                label: "January",
                data: [
                    44,
                    55,
                    41,
                    37,
                    22,
                    43,
                    21
                ],
                barThickness: 8,
                backgroundColor: "#4ade80",
                hoverBackgroundColor: "#4ade80"
            },
            {
                label: "February",
                data: [
                    53,
                    32,
                    33,
                    52,
                    13,
                    43,
                    32
                ],
                barThickness: 8,
                backgroundColor: "rgba(74, 222, 128, 0.3)",
                hoverBackgroundColor: "rgba(74, 222, 128, 0.3)"
            }
        ]
    };
    // Chart config
    const CONFIG = {
        type: "bar",
        data: DATA,
        options: {
            maintainAspectRatio: false,
            indexAxis: "y",
            layout: {
                padding: {
                    left: -8,
                    right: 15
                }
            },
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom",
                    labels: {
                        usePointStyle: true,
                        ...(0, _chart.CHART_LEGEND_LABEL)
                    }
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    stacked: true,
                    border: {
                        display: false
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    stacked: true,
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) stackedHorizontalBarChart = new (0, _autoDefault.default)(CHART_WRAPPER, CONFIG);
};
const stackedHorizontalBarUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(stackedHorizontalBarChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"eMSIu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "colorMode", ()=>colorMode);
var _activeUsers = require("../../views/analytics/activeUsers");
var _averageVisitDurarion = require("../../views/analytics/averageVisitDurarion");
var _sessionsByCountry = require("../../views/analytics/sessionsByCountry");
var _userAcquisition = require("../../views/analytics/userAcquisition");
var _visitsBySource = require("../../views/analytics/visitsBySource");
var _charts = require("../../views/charts/charts");
var _convertedLeads = require("../../views/crm/convertedLeads");
var _leadsByIndustry = require("../../views/crm/leadsByIndustry");
var _leadsGenerationRate = require("../../views/crm/leadsGenerationRate");
var _leadsSources = require("../../views/crm/leadsSources");
var _outboundCalls = require("../../views/crm/outboundCalls");
var _resolutionByChannel = require("../../views/crm/resolutionByChannel");
var _campaignReach = require("../../views/email-marketing/campaignReach");
var _campaignSales = require("../../views/email-marketing/campaignSales");
var _deliveredVsOpen = require("../../views/email-marketing/deliveredVsOpen");
var _budgetExpenses = require("../../views/project-management/budgetExpenses");
var _budgetUtilization = require("../../views/project-management/budgetUtilization");
var _plannedVsActual = require("../../views/project-management/plannedVsActual");
var _projectsByStatus = require("../../views/project-management/projectsByStatus");
var _ticketsReopened = require("../../views/project-management/ticketsReopened");
var _salesHistory = require("../../views/sales/salesHistory");
var _storeSessions = require("../../views/sales/storeSessions");
const TOGGLE_EL = document.getElementById("color-mode-toggle");
// Some of the charts need to updated on color mode change
const updateWidgets = ()=>{
    (0, _salesHistory.salesHistoryUpdate)();
    (0, _storeSessions.storeSessionsUpdate)();
    (0, _leadsGenerationRate.leadsGenerationRateUpdate)();
    (0, _convertedLeads.convertedLeadsUpdate)();
    (0, _leadsByIndustry.leadsByIndustryUpdate)();
    (0, _leadsSources.leadsSourcesUpdate)();
    (0, _sessionsByCountry.sessionsByCountryUpdate)();
    (0, _visitsBySource.visitsBySourceUpdate)();
    (0, _userAcquisition.userAcquisitionChartUpdate)();
    (0, _activeUsers.activeUsersUpdate)();
    (0, _averageVisitDurarion.visitDurationUpdate)();
    (0, _resolutionByChannel.resolutionByChanneUpdate)();
    (0, _outboundCalls.outboundCalsUpdate)();
    (0, _deliveredVsOpen.deliveredVsOpenUpdate)();
    (0, _campaignSales.campaignSalesUpdate)();
    (0, _campaignReach.campaignReachUpdate)();
    (0, _projectsByStatus.projectsByStatusUpdate)();
    (0, _budgetUtilization.budgetUtilizationUpdate)();
    (0, _budgetExpenses.budgetExpensesUpdate)();
    (0, _ticketsReopened.ticketsReopenedUpdate)();
    (0, _plannedVsActual.plannedVsActualUpdate)();
    (0, _charts.chartsUpdate)();
};
const colorMode = ()=>{
    if (TOGGLE_EL) {
        let color = localStorage.getItem("color-mode") || "light";
        // Set color mode on toggle click
        TOGGLE_EL.addEventListener("click", ()=>{
            color === "dark" ? color = "light" : color = "dark";
            localStorage.setItem("color-mode", color);
            document.documentElement.setAttribute("data-bs-theme", color);
            updateWidgets();
        });
    }
};

},{"../../views/analytics/activeUsers":"1OmZn","../../views/analytics/averageVisitDurarion":"iqg6c","../../views/analytics/sessionsByCountry":"dfUe0","../../views/analytics/userAcquisition":"3mJRo","../../views/analytics/visitsBySource":"9cSKT","../../views/charts/charts":"jMSzf","../../views/crm/convertedLeads":"bEkql","../../views/crm/leadsByIndustry":"7LvUU","../../views/crm/leadsGenerationRate":"a8diU","../../views/crm/leadsSources":"04VtS","../../views/crm/outboundCalls":"jpAue","../../views/crm/resolutionByChannel":"cPswT","../../views/email-marketing/campaignReach":"3zWYx","../../views/email-marketing/campaignSales":"6C5NI","../../views/email-marketing/deliveredVsOpen":"9XCkh","../../views/project-management/budgetExpenses":"2RAP5","../../views/project-management/budgetUtilization":"bWgJj","../../views/project-management/plannedVsActual":"jzB2i","../../views/project-management/projectsByStatus":"7CVvd","../../views/project-management/ticketsReopened":"6Sf0h","../../views/sales/salesHistory":"g1bww","../../views/sales/storeSessions":"k1tFS","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3zWYx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "campaignReach", ()=>campaignReach);
parcelHelpers.export(exports, "campaignReachUpdate", ()=>campaignReachUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-campaign-reach");
let campaignReachChart;
const campaignReach = ()=>{
    //------------------------------------------------------------
    // Chart
    //------------------------------------------------------------
    const CHART_DATA = {
        labels: [
            "01",
            "02",
            "03",
            "04",
            "05",
            "06",
            "07",
            "08",
            "09",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
        ],
        datasets: [
            {
                label: "Impressions",
                data: [
                    100,
                    150,
                    180,
                    100,
                    240,
                    150,
                    200,
                    140,
                    145,
                    160,
                    220,
                    180,
                    100,
                    150,
                    190,
                    160,
                    195,
                    160,
                    170,
                    150,
                    200,
                    160,
                    190,
                    157,
                    190
                ],
                backgroundColor: "rgba(30, 145, 255, 0.25)",
                categoryPercentage: 0.25,
                borderWidth: 0,
                borderRadius: 5
            },
            {
                label: "Views",
                data: [
                    50,
                    100,
                    120,
                    50,
                    180,
                    100,
                    150,
                    100,
                    100,
                    130,
                    170,
                    150,
                    90,
                    120,
                    150,
                    110,
                    140,
                    100,
                    150,
                    100,
                    170,
                    110,
                    160,
                    100,
                    140
                ],
                backgroundColor: "rgba(30, 145, 255, 0.75)",
                categoryPercentage: 0.25,
                borderWidth: 0,
                borderRadius: 5
            },
            {
                label: "Clicks",
                data: [
                    10,
                    30,
                    40,
                    10,
                    60,
                    20,
                    40,
                    10,
                    20,
                    20,
                    50,
                    20,
                    10,
                    30,
                    40,
                    20,
                    40,
                    30,
                    50,
                    20,
                    35,
                    40,
                    50,
                    10,
                    30
                ],
                backgroundColor: (0, _utils.COLORS).orange,
                categoryPercentage: 0.25,
                borderWidth: 0,
                borderRadius: 5
            }
        ]
    };
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            indexAxis: "x",
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP),
                    callbacks: {
                        label: (tooltipItem, data)=>{
                            return tooltipItem.formattedValue + "K";
                        }
                    }
                }
            },
            scales: {
                x: {
                    stacked: true,
                    grid: {
                        display: false
                    },
                    border: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0, "center"),
                        maxTicksLimit: 10
                    }
                },
                y: {
                    stacked: true,
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    border: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            }
        }
    };
    if (CHART_WRAPPER) campaignReachChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const campaignReachUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(campaignReachChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"6C5NI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "campaignSales", ()=>campaignSales);
parcelHelpers.export(exports, "campaignSalesUpdate", ()=>campaignSalesUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-campaign-sales");
let campaignSalesChart;
const campaignSales = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "15",
            "16",
            "17",
            "18"
        ],
        datasets: [
            {
                label: "Transections",
                data: [
                    109,
                    106,
                    105,
                    106,
                    108,
                    109,
                    106,
                    109,
                    107,
                    105,
                    105,
                    105,
                    105,
                    108,
                    105,
                    107,
                    106,
                    109,
                    107
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(38, 198, 218, 0.25)", "rgba(38, 198, 218, 0"),
                borderColor: (0, _utils.COLORS).cyan,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).cyan,
                pointBorderColor: (0, _utils.COLORS).cyan,
                pointHoverBorderColor: (0, _utils.COLORS).cyan,
                pointHoverBackgroundColor: (0, _utils.COLORS).cyan
            },
            {
                label: "Transections Revenue",
                data: [
                    112,
                    113,
                    112,
                    111,
                    111,
                    113,
                    113,
                    110,
                    113,
                    112,
                    113,
                    113,
                    112,
                    114,
                    111,
                    113,
                    115,
                    115,
                    111
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: "-5"
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 12
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 100,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) campaignSalesChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const campaignSalesUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(campaignSalesChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"9XCkh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deliveredVsOpen", ()=>deliveredVsOpen);
parcelHelpers.export(exports, "deliveredVsOpenUpdate", ()=>deliveredVsOpenUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-delivered-vs-open");
let deliveredVsOpenChart;
const deliveredVsOpen = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Chart data
    const CHART_DATA = {
        labels: [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            15,
            16,
            17,
            18,
            19,
            20
        ],
        datasets: [
            {
                label: "Opened",
                data: [
                    75,
                    54,
                    145,
                    110,
                    145,
                    35,
                    135,
                    100,
                    30,
                    60,
                    70,
                    90,
                    100,
                    80,
                    180,
                    134,
                    180,
                    70,
                    225,
                    150,
                    35
                ],
                categoryPercentage: 0.25,
                borderRadius: 15,
                backgroundColor: (0, _utils.cssVar)("--bs-chart-common-main-fill"),
                borderWidth: 0,
                grouped: false,
                maxBarThickness: 6
            },
            {
                label: "Delivered",
                data: [
                    100,
                    80,
                    180,
                    134,
                    180,
                    70,
                    225,
                    150,
                    35,
                    100,
                    120,
                    160,
                    120,
                    145,
                    200,
                    145,
                    200,
                    135,
                    230,
                    180,
                    60
                ],
                categoryPercentage: 0.5,
                borderRadius: 15,
                backgroundColor: (0, _utils.cssVar)("--bs-chart-common-sub-fill"),
                borderWidth: 0,
                maxBarThickness: 12
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -5,
                    right: 1
                }
            },
            indexAxis: "x",
            elements: {
                bar: {
                    borderWidth: 0
                }
            },
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0),
                        maxTicksLimit: 10
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    // Init chart
    if (CHART_WRAPPER) deliveredVsOpenChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const deliveredVsOpenUpdate = ()=>{
    const updateColors = ()=>{
        deliveredVsOpenChart.data.datasets[0].backgroundColor = (0, _utils.cssVar)("--bs-chart-common-main-fill");
        deliveredVsOpenChart.data.datasets[1].backgroundColor = (0, _utils.cssVar)("--bs-chart-common-sub-fill");
    };
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(deliveredVsOpenChart, updateColors());
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"2RAP5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "budgetExpenses", ()=>budgetExpenses);
parcelHelpers.export(exports, "budgetExpensesUpdate", ()=>budgetExpensesUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-budget-expenses");
let budgetExpensesChart;
const budgetExpenses = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "Q2 19",
            "Q3 19",
            "Q4 19",
            "Q1 20",
            "Q2 20",
            "Q3 20",
            "Q4 20",
            "Q1 21",
            "Q2 21",
            "Q3 21",
            "Q4 21",
            "Q1 22",
            "Q2 22",
            "Q3 22",
            "Q4 22",
            "Q1 23",
            "Q2 23",
            "Q3 23",
            "Q4 23"
        ],
        datasets: [
            {
                label: "Receieved",
                data: [
                    114,
                    110,
                    110,
                    106,
                    108,
                    109,
                    106,
                    115,
                    110,
                    108,
                    108,
                    110,
                    105,
                    108,
                    105,
                    107,
                    106,
                    116,
                    107
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            },
            {
                label: "Converted",
                data: [
                    112,
                    113,
                    112,
                    111,
                    111,
                    113,
                    113,
                    110,
                    113,
                    112,
                    113,
                    113,
                    112,
                    114,
                    111,
                    113,
                    115,
                    112,
                    111
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: "-5",
                    bottom: "-5"
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 12
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 100,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return "$" + label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) budgetExpensesChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const budgetExpensesUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(budgetExpensesChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bWgJj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "budgetUtilization", ()=>budgetUtilization);
parcelHelpers.export(exports, "budgetUtilizationUpdate", ()=>budgetUtilizationUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-budget-utilization");
let budgetUtilizationChart;
const budgetUtilization = ()=>{
    // ----------------------------------------------
    // Chart
    // ----------------------------------------------
    const CHART_DATA = {
        labels: [
            "#3243",
            "#4546",
            "#3001",
            "#6079",
            "#9943",
            "#1930"
        ],
        datasets: [
            {
                label: "Current Utilization",
                data: [
                    83,
                    5,
                    69.25,
                    53,
                    0,
                    28
                ],
                backgroundColor: (0, _utils.COLORS).cyan,
                categoryPercentage: 0.15,
                borderWidth: 0,
                borderRadius: 10
            },
            {
                label: "Proposed Budget",
                data: [
                    70,
                    70,
                    70,
                    70,
                    70,
                    70
                ],
                backgroundColor: "rgba(38, 198, 218, 0.3)",
                categoryPercentage: 0.3,
                borderWidth: 0,
                borderRadius: 10,
                grouped: false
            }
        ]
    };
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    left: -5,
                    bottom: 0
                }
            },
            responsive: true,
            indexAxis: "y",
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP),
                    callbacks: {
                        label: (tooltipItem, data)=>{
                            return tooltipItem.formattedValue + "K";
                        }
                    }
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        callback: (label, index, labels)=>{
                            return label + "K";
                        }
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                }
            }
        }
    };
    if (CHART_WRAPPER) budgetUtilizationChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const budgetUtilizationUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(budgetUtilizationChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jzB2i":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "plannedVsActual", ()=>plannedVsActual);
parcelHelpers.export(exports, "plannedVsActualUpdate", ()=>plannedVsActualUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-planned-vs-actual");
let plannedVsActualChart;
const plannedVsActual = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        ],
        datasets: [
            {
                label: "Planned",
                data: [
                    96,
                    64,
                    35,
                    76,
                    45,
                    109,
                    80,
                    50,
                    100
                ],
                fill: true,
                backgroundColor: "rgba(30, 145, 255, 0.25)",
                borderRadius: 5,
                borderWidth: 0,
                type: "bar",
                grouped: false,
                categoryPercentage: 0.5,
                maxBarThickness: 20
            },
            {
                label: "Billable Hours",
                data: [
                    45,
                    50,
                    30,
                    60,
                    30,
                    70,
                    40,
                    10,
                    60
                ],
                fill: false,
                borderRadius: 5,
                borderWidth: 1.25,
                borderColor: (0, _utils.COLORS).orange,
                type: "line",
                tension: 0.4,
                pointRadius: 2,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            },
            {
                label: "Actual",
                data: [
                    80,
                    78,
                    50,
                    64,
                    40,
                    87,
                    90,
                    40,
                    70
                ],
                fill: true,
                backgroundColor: (0, _utils.COLORS).blue,
                borderRadius: 5,
                borderWidth: 0,
                type: "bar",
                categoryPercentage: 0.25,
                maxBarThickness: 10
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -5
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0, "center")
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 0,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) plannedVsActualChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    let list = "";
    const LIST_WRAPPER = document.getElementById("list-projects-by-status");
    const DATA = [
        {
            type: "In Progress",
            percentage: 56,
            change: 23.61,
            className: "bg-primary",
            projects: 96,
            up: true,
            percentage: 24.3
        },
        {
            type: "Completed",
            percentage: 37,
            change: 2.35,
            className: "bg-success",
            projects: 64,
            up: true,
            percentage: 16.2
        },
        {
            type: "Overdue",
            change: 8.54,
            className: "bg-warning",
            projects: 35,
            up: false,
            percentage: 8.8
        },
        {
            type: "On Hold",
            change: 3.22,
            className: "bg-info",
            projects: 76,
            up: true,
            percentage: 19.2
        },
        {
            type: "Cancelled",
            change: 33.25,
            className: "bg-danger",
            projects: 16,
            up: false,
            percentage: 4.1
        },
        {
            type: "Planned",
            change: 0.83,
            className: "bg-purple",
            projects: 4.1,
            up: true,
            percentage: 27.6
        }
    ];
    if (LIST_WRAPPER) DATA.forEach((item, index)=>{
        list += `<div class="d-flex align-items-center">
                        <i class="${item.className} w-2.5 h-2.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center py-3 ${index !== DATA.length - 1 ? "border-bottom" : ""}">
							<div class="flex-grow-1">${item.type}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${item.up ? "text-success" : "text-danger"}">
								${item.change}

								<i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
							</div>

							<div class="fs-5 fw-medium text-end w-12">${item.projects}</div>
							<div class="fs-5 fw-medium text-end w-16">${item.percentage}%</div>
						</div>
                    </div>`;
        LIST_WRAPPER.innerHTML = list;
    });
};
const plannedVsActualUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(plannedVsActualChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7CVvd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "projectsByStatus", ()=>projectsByStatus);
parcelHelpers.export(exports, "projectsByStatusUpdate", ()=>projectsByStatusUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-projects-by-status");
let projectsByStatusChart;
const projectsByStatus = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "In Progress",
            "Completed",
            "Overdue",
            "On Hold",
            "Cancelled",
            "Planned"
        ],
        datasets: [
            {
                label: "Current Month",
                data: [
                    96,
                    64,
                    35,
                    76,
                    14,
                    109
                ],
                fill: true,
                backgroundColor: (context)=>[
                        gradientBg(context, "rgba(30, 145, 255, 0.25)", "rgba(30, 145, 255, 0"),
                        gradientBg(context, "rgba(40, 199, 111, 0.25)", "rgba(40, 199, 111, 0"),
                        gradientBg(context, "rgba(254, 168, 76, 0.25)", "rgba(254, 168, 76, 0"),
                        gradientBg(context, "rgba(38, 198, 218, 0.25)", "rgba(38, 198, 218, 0"),
                        gradientBg(context, "rgba(255, 99, 99, 0.25)", "rgba(255, 99, 99, 0"),
                        gradientBg(context, "rgba(226, 108, 245, 0.25)", "rgba(226, 108, 245, 0")
                    ],
                borderColor: (context)=>[
                        gradientBg(context, "rgba(30, 145, 255, 0.9)", "rgba(30, 145, 255, 0.5"),
                        gradientBg(context, "rgba(40, 199, 111, 0.9)", "rgba(40, 199, 111, 0.5"),
                        gradientBg(context, "rgba(254, 168, 76, 0.9)", "rgba(254, 168, 76, 0.5"),
                        gradientBg(context, "rgba(38, 198, 218, 0.9)", "rgba(38, 198, 218, 0.5"),
                        gradientBg(context, "rgba(255, 99, 99, 0.9)", "rgba(255, 99, 99, 0.5"),
                        gradientBg(context, "rgba(226, 108, 245, 0.9)", "rgba(226, 108, 245, 0.5")
                    ],
                borderRadius: 5,
                borderWidth: 1.25
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "bar",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: -5
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0, "center")
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 0,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) projectsByStatusChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
    //---------------------------------------------------------
    // Data
    //---------------------------------------------------------
    let list = "";
    const LIST_WRAPPER = document.getElementById("list-projects-by-status");
    const DATA = [
        {
            type: "In Progress",
            percentage: 56,
            change: 23.61,
            className: "bg-primary",
            projects: 96,
            up: true,
            percentage: 24.3
        },
        {
            type: "Completed",
            percentage: 37,
            change: 2.35,
            className: "bg-success",
            projects: 64,
            up: true,
            percentage: 16.2
        },
        {
            type: "Overdue",
            change: 8.54,
            className: "bg-warning",
            projects: 35,
            up: false,
            percentage: 8.8
        },
        {
            type: "On Hold",
            change: 3.22,
            className: "bg-info",
            projects: 76,
            up: true,
            percentage: 19.2
        },
        {
            type: "Cancelled",
            change: 33.25,
            className: "bg-danger",
            projects: 16,
            up: false,
            percentage: 4.1
        },
        {
            type: "Planned",
            change: 0.83,
            className: "bg-purple",
            projects: 4.1,
            up: true,
            percentage: 27.6
        }
    ];
    if (LIST_WRAPPER) DATA.forEach((item, index)=>{
        list += `<div class="d-flex align-items-center">
                        <i class="${item.className} w-2.5 h-2.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center py-3 ${index !== DATA.length - 1 ? "border-bottom" : ""}">
							<div class="flex-grow-1">${item.type}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${item.up ? "text-success" : "text-danger"}">
								${item.change}

								<i class="ph fs-5 ms-1 ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"}"></i>
							</div>

							<div class="fs-5 fw-medium text-end w-12">${item.projects}</div>
							<div class="fs-5 fw-medium text-end w-16">${item.percentage}%</div>
						</div>
                    </div>`;
        LIST_WRAPPER.innerHTML = list;
    });
};
const projectsByStatusUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(projectsByStatusChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"6Sf0h":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ticketsReopened", ()=>ticketsReopened);
parcelHelpers.export(exports, "ticketsReopenedUpdate", ()=>ticketsReopenedUpdate);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-tickets-reopened");
let ticketsReopenedChart;
const ticketsReopened = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "15",
            "16",
            "17",
            "18"
        ],
        datasets: [
            {
                label: "Tickets",
                data: [
                    105,
                    105,
                    105,
                    107,
                    105,
                    107,
                    106,
                    106,
                    107,
                    107,
                    107,
                    109,
                    107,
                    109,
                    106,
                    107,
                    106,
                    106,
                    109
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            layout: {
                padding: {
                    left: "-5"
                }
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)(0),
                        maxTicksLimit: 12
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 80,
                    max: 120,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) ticketsReopenedChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const ticketsReopenedUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(ticketsReopenedChart);
    });
};

},{"chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"gmgwt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "header", ()=>header);
const header = ()=>{
    const HEADER = document.querySelector(".headerd");
    const CONTENT_INNER = document.querySelector(".content-innerd");
    const handleScroll = (el)=>{
        if (window.innerWidth > 576) el.addEventListener("scroll", ()=>{
            HEADER.classList.toggle("header-stuck", el.scrollTop > 20);
        }, {
            passive: true
        });
    };
    const observer = new MutationObserver(()=>{
        const CONTENT = document.querySelector(".content-inner .simplebar-content-wrapper");
        if (CONTENT) handleScroll(CONTENT);
    });
    if (HEADER && CONTENT_INNER) observer.observe(CONTENT_INNER, {
        childList: true,
        subtree: true
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"3HvTE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "emailMarketing", ()=>emailMarketing);
var _campaignPerformance = require("./campaignPerformance");
var _campaignReach = require("./campaignReach");
var _campaignSales = require("./campaignSales");
var _deliveredVsOpen = require("./deliveredVsOpen");
var _geographicalEngagementas = require("./geographicalEngagementas");
var _openRateByDevice = require("./openRateByDevice");
var _sentVsNotSent = require("./sentVsNotSent");
const emailMarketing = ()=>{
    (0, _deliveredVsOpen.deliveredVsOpen)();
    (0, _openRateByDevice.openRateByDevice)();
    (0, _campaignPerformance.campaignPerformance)();
    (0, _campaignSales.campaignSales)();
    (0, _geographicalEngagementas.geographicalEngagementas)();
    (0, _campaignReach.campaignReach)();
    (0, _sentVsNotSent.sentVsNotSent)();
};

},{"./campaignPerformance":"5hSxf","./campaignReach":"3zWYx","./campaignSales":"6C5NI","./deliveredVsOpen":"9XCkh","./geographicalEngagementas":"dAVFE","./openRateByDevice":"eLcrD","./sentVsNotSent":"k45wy","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5hSxf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "campaignPerformance", ()=>campaignPerformance);
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const campaignPerformance = ()=>{
    const WRAPPER = document.getElementById("list-campaign-performance");
    const DATA = [
        {
            campaign: "Weekly Newsletter",
            clicks: 1200,
            conversions: 80,
            revenue: 1500
        },
        {
            campaign: "Summer Promo",
            clicks: 800,
            conversions: 40,
            revenue: 1000
        },
        {
            campaign: "Google Ads Campaign",
            clicks: 1500,
            conversions: 120,
            revenue: 2000
        },
        {
            campaign: "Daily Customer Update",
            clicks: 500,
            conversions: 30,
            revenue: 750
        },
        {
            campaign: "Content Marketing",
            clicks: 1000,
            conversions: 60,
            revenue: 900
        },
        {
            campaign: "Event Sponsorship",
            clicks: 300,
            conversions: 20,
            revenue: 400
        },
        {
            campaign: "VIP Announcement",
            clicks: 1100,
            conversions: 70,
            revenue: 1300
        },
        {
            campaign: "Special Offers",
            clicks: 850,
            conversions: 45,
            revenue: 1050
        },
        {
            campaign: "Social Media Campaign",
            clicks: 1600,
            conversions: 110,
            revenue: 1900
        },
        {
            campaign: "New Product Launch",
            clicks: 700,
            conversions: 50,
            revenue: 800
        },
        {
            campaign: "Monthly Newsletter",
            clicks: 1200,
            conversions: 80,
            revenue: 1500
        },
        {
            campaign: "Winter Promo",
            clicks: 800,
            conversions: 40,
            revenue: 1000
        },
        {
            campaign: "Facebook Ads Campaign",
            clicks: 1500,
            conversions: 120,
            revenue: 2000
        }
    ];
    let list = "";
    if (WRAPPER) {
        DATA.forEach((item, index)=>{
            // Even row background
            let rowClass = "";
            if (index % 2 === 0) rowClass = "bg-highlight";
            else rowClass = "";
            list += `<div class="d-flex justify-content-between align-items-center h-12 rounded px-3 ${rowClass}">
                        <div class="flex-shrink-0">
                            
                        </div> 
                        <div class="flex-grow-1 text-truncate">${item.campaign}</div>
                        <div class="w-20 text-end d-none d-sm-block">${item.clicks}</div>
                        <div class="w-16 w-sm-20 text-end flex-shrink-0 ms-sm-2">${item.conversions}</div>
                        <div class="w-20 text-end flex-shrink-0 ms-sm-2">$${item.revenue.toLocaleString()}</div>
                    </div>
            `;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../../img/contacts/*.jpg":"7H6g0","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"7H6g0":[function(require,module,exports,__globalThis) {
const _temp0 = require("9e30c3c4ee05fbeb");
const _temp1 = require("f7255aa45d5ebe1");
const _temp2 = require("da306ba673422995");
const _temp3 = require("2b2534b7420f0c57");
const _temp4 = require("707129c5ee671093");
const _temp5 = require("4546c26b55790b7c");
const _temp6 = require("242355e4399897b0");
const _temp7 = require("486e86a24b7d2fa1");
const _temp8 = require("370a214c25fd5d85");
const _temp9 = require("f3dbfb648a9657f0");
const _temp10 = require("841d8854be616b9e");
const _temp11 = require("38c1adb6b49f3be5");
const _temp12 = require("7c3bbb7ee966593f");
const _temp13 = require("8f5a6d3d6f97922c");
const _temp14 = require("4572e00285c9b2c7");
const _temp15 = require("1d1ef9b75da64640");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"9e30c3c4ee05fbeb":"eM9AY","f7255aa45d5ebe1":"4tWpl","da306ba673422995":"egP4V","2b2534b7420f0c57":"dRrEf","707129c5ee671093":"cG5Jh","4546c26b55790b7c":"945u4","242355e4399897b0":"go82E","486e86a24b7d2fa1":"4qG8A","370a214c25fd5d85":"4jtK8","f3dbfb648a9657f0":"8Gxhp","841d8854be616b9e":"5foDv","38c1adb6b49f3be5":"hSAKF","7c3bbb7ee966593f":"3Jp7F","8f5a6d3d6f97922c":"elJBN","4572e00285c9b2c7":"3eInA","1d1ef9b75da64640":"a5Vjj"}],"dAVFE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "geographicalEngagementas", ()=>geographicalEngagementas);
var _jsvectormap = require("jsvectormap");
var _jsvectormapDefault = parcelHelpers.interopDefault(_jsvectormap);
var _worldJs = require("jsvectormap/dist/maps/world.js");
var _jsVectorMap = require("../../vendors/jsvectormap/jsVectorMap");
var _utils = require("../../utils");
var _svg = require("../../../img/flags/*.svg");
var _svgDefault = parcelHelpers.interopDefault(_svg);
const geographicalEngagementas = ()=>{
    //------------------------------------------------------
    // Map
    //------------------------------------------------------
    const MAP_WRAPPER = document.getElementById("map-geographical-engagementas");
    const markerFils = {
        1: "rgba(223, 122, 0, 0.8)",
        2: "rgba(223, 122, 0, 0.7)",
        3: "rgba(223, 122, 0, 0.6)",
        4: "rgba(223, 122, 0, 0.5)",
        5: "rgba(223, 122, 0, 0.4)"
    };
    if (MAP_WRAPPER) {
        // Resize map on load
        (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
        // Initiate map
        new (0, _jsvectormapDefault.default)({
            selector: "#map-geographical-engagementas",
            map: "world",
            draggable: false,
            zoomButtons: false,
            zoomOnScroll: false,
            regionStyle: {
                initial: {
                    fill: "rgba(254, 168, 76, 0.25)",
                    fillOpacity: 1,
                    stroke: (0, _utils.COLORS).transparent,
                    strokeWidth: 1
                },
                hover: {
                    fillOpacity: 1
                }
            },
            markerStyle: {
                hover: {
                    fill: markerFils[1]
                }
            },
            markers: [
                {
                    name: "United States",
                    coords: [
                        37.0902,
                        -95.7129
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Canada",
                    coords: [
                        56.1304,
                        -106.3468
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Mexico",
                    coords: [
                        23.6345,
                        -102.5528
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Cuba",
                    coords: [
                        21.5218,
                        -77.7812
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Jamaica",
                    coords: [
                        18.1096,
                        -77.2975
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "France",
                    coords: [
                        46.603354,
                        1.888334
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 8
                        }
                    }
                },
                {
                    name: "Germany",
                    coords: [
                        51.1657,
                        10.4515
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 8
                        }
                    }
                },
                {
                    name: "Italy",
                    coords: [
                        41.8719,
                        12.5675
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 8
                        }
                    }
                },
                {
                    name: "Spain",
                    coords: [
                        40.4637,
                        -3.7492
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 8
                        }
                    }
                },
                {
                    name: "Greece",
                    coords: [
                        39.0742,
                        21.8243
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 8
                        }
                    }
                },
                {
                    name: "China",
                    coords: [
                        35.8617,
                        104.1954
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 6
                        }
                    }
                },
                {
                    name: "India",
                    coords: [
                        20.5937,
                        78.9629
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 6
                        }
                    }
                },
                {
                    name: "Japan",
                    coords: [
                        36.2048,
                        138.2529
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 6
                        }
                    }
                },
                {
                    name: "South Korea",
                    coords: [
                        35.9078,
                        127.7669
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 6
                        }
                    }
                },
                {
                    name: "Indonesia",
                    coords: [
                        -0.7893,
                        113.9213
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 6
                        }
                    }
                },
                {
                    name: "South Africa",
                    coords: [
                        -30.5595,
                        22.9375
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 4
                        }
                    }
                },
                {
                    name: "Nigeria",
                    coords: [
                        9.082,
                        8.6753
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 4
                        }
                    }
                },
                {
                    name: "Egypt",
                    coords: [
                        26.8206,
                        30.8025
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 4
                        }
                    }
                },
                {
                    name: "Kenya",
                    coords: [
                        -0.0236,
                        37.9062
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 4
                        }
                    }
                },
                {
                    name: "Algeria",
                    coords: [
                        28.0339,
                        1.6596
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 4
                        }
                    }
                },
                {
                    name: "Brazil",
                    coords: [
                        -14.235,
                        -51.9253
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 2
                        }
                    }
                },
                {
                    name: "Mexico",
                    coords: [
                        23.6345,
                        -102.5528
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 2
                        }
                    }
                },
                {
                    name: "Argentina",
                    coords: [
                        -38.4161,
                        -63.6167
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 2
                        }
                    }
                },
                {
                    name: "Peru",
                    coords: [
                        -9.19,
                        -75.0152
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 2
                        }
                    }
                },
                {
                    name: "Colombia",
                    coords: [
                        4.5709,
                        -74.2973
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 2
                        }
                    }
                },
                {
                    name: "Australia",
                    coords: [
                        -25.2744,
                        133.7751
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "United Arab Emirates",
                    coords: [
                        23.4241,
                        53.8478
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Saudi Arabia",
                    coords: [
                        23.8859,
                        45.0792
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Russia",
                    coords: [
                        61.524,
                        105.3188
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                },
                {
                    name: "Mongolia",
                    coords: [
                        46.8625,
                        103.8467
                    ],
                    style: {
                        initial: {
                            strokeWidth: 1,
                            stroke: markerFils[5],
                            fill: markerFils[1],
                            r: 10
                        }
                    }
                }
            ],
            onLoaded (map) {
                window.addEventListener("resize", ()=>{
                    // Set map size on window resize
                    (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
                    setTimeout(()=>{
                        map.updateSize();
                    });
                });
            }
        });
    }
    //------------------------------------------------------
    // List
    //------------------------------------------------------
    const LIST_WRAPPER = document.getElementById("list-geographical-engagementas");
    if (LIST_WRAPPER) {
        let list = "";
        const DATA = [
            {
                img: "us",
                country: "United States of America",
                clicks: 6732,
                up: true,
                percentage: 44,
                change: 4.58
            },
            {
                img: "japan",
                country: "Japan",
                clicks: 4532,
                up: true,
                percentage: 32,
                change: 0.43
            },
            {
                img: "england",
                country: "United Kingdom",
                clicks: 4487,
                up: false,
                percentage: 24,
                change: 5.43
            },
            {
                img: "china",
                country: "China",
                clicks: 3982,
                up: true,
                percentage: 19,
                change: 21.54
            },
            {
                img: "germany",
                country: "Germany",
                clicks: 3241,
                up: false,
                percentage: 16,
                change: 10.32
            },
            {
                img: "france",
                country: "France",
                clicks: 2985,
                up: true,
                percentage: 9,
                change: 0.54
            }
        ];
        let last = DATA.length - 1;
        DATA.forEach((item, index)=>{
            list += `<div class="d-flex align-items-start">
                        <img class="w-6 me-4 rounded-circle" src="${(0, _svgDefault.default)[item.img]}" alt="${item.country}" />

                        <div class="d-flex align-items-center flex-grow-1 ${index !== last ? "border-bottom mb-2 pb-2" : ""}">
                            <div class="flex-grow-1">
                                <div class="text-body-emphasis">${item.country}</div>
                                <span class="text-body-secondary fs-7">${item.clicks} Clicks</span>
                            </div>

                            <div class="fs-7 d-flex align-items-center justify-content-end ms-auto ${item.up ? "text-success" : "text-danger"}">
                                <i class="ph ${item.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"} fs-4 me-1"></i>
                                ${item.change}%
                            </div>

							<div class="fs-5 text-body-emphasis text-end w-12">${item.percentage}%</div>
                        </div> 
                    </div>`;
        });
        LIST_WRAPPER.innerHTML = list;
    }
};

},{"jsvectormap":"17NmK","jsvectormap/dist/maps/world.js":"Zvkp7","../../vendors/jsvectormap/jsVectorMap":"2cM0S","../../utils":"hgAea","../../../img/flags/*.svg":"k3fFa","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"k3fFa":[function(require,module,exports,__globalThis) {
const _temp0 = require("36b6649a0d5a9480");
const _temp1 = require("5bb480eac3f12f74");
const _temp2 = require("c4af2f8a234ff3d8");
const _temp3 = require("efbcbda7dfac55b");
const _temp4 = require("2fd42554cd624c3e");
const _temp5 = require("73accc52fd8f6acf");
module.exports = {
    "china": _temp0,
    "england": _temp1,
    "france": _temp2,
    "germany": _temp3,
    "japan": _temp4,
    "us": _temp5
};

},{"36b6649a0d5a9480":"4mcMp","5bb480eac3f12f74":"ePqBL","c4af2f8a234ff3d8":"eF1xd","efbcbda7dfac55b":"lt23G","2fd42554cd624c3e":"74HqK","73accc52fd8f6acf":"a2JKY"}],"eLcrD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "openRateByDevice", ()=>openRateByDevice);
const openRateByDevice = ()=>{
    const WRAPPER = document.getElementById("list-open-rate-by-device");
    let list = "";
    const DATA = [
        {
            icon: "ph-laptop",
            percentage: 62,
            sessions: 12453,
            bg: "bg-info",
            text: "text-info"
        },
        {
            icon: "ph-device-mobile-camera",
            percentage: 30,
            sessions: 4853,
            bg: "bg-purple",
            text: "text-purple"
        },
        {
            icon: "ph-device-tablet-speaker",
            percentage: 8,
            sessions: 983,
            bg: "bg-warning",
            text: "text-warning"
        }
    ];
    if (WRAPPER) {
        DATA.forEach((item)=>{
            list += `<div style="--bs-bg-opacity: 0.2" class="flex-grow-1 rounded d-flex align-items-center py-1 mb-5 ${item.bg + " " + item.text}">
                    <i class="ph fs-4 mx-3 ${item.icon}"></i>
                    <div class="flex-grow-1 d-flex align-items-center">
                        <div class="h-8 d-flex align-items-center justify-content-end rounded-1 bg-current" style="width: ${item.percentage + "%"}">
                            ${item.percentage > 10 ? `<div class="text-white fs-8 px-2">${item.percentage}%</div>` : ""}
                        </div>
                        ${item.percentage <= 9 ? `<div class="text-current fs-8 px-2">${item.percentage}%</div>` : ""}
                    </div>
                    <div class="ms-auto pe-3 text-current w-14 text-end">${item.sessions}</div>
                </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"k45wy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sentVsNotSent", ()=>sentVsNotSent);
parcelHelpers.export(exports, "sentVsNotSentUpdate", ()=>sentVsNotSentUpdate);
var _chartjsAdapterMoment = require("chartjs-adapter-moment");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chart = require("../../vendors/chart");
var _utils = require("../../utils");
const CHART_WRAPPER = document.getElementById("chart-sent-not-sent");
let sentVsNotSentChart;
const sentVsNotSent = ()=>{
    //---------------------------------------------------------
    // Chart
    //---------------------------------------------------------
    // Helper function for chart gradient fill
    const gradientBg = (context, colorStart, colorEnd)=>{
        const chart = context.chart;
        const { ctx, chartArea } = chart;
        return chartArea ? (0, _chart.chartGradient)(ctx, chartArea, 0.75, colorStart, colorEnd) : null;
    };
    // Chart data
    const CHART_DATA = {
        labels: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Nov",
            "Dec"
        ],
        datasets: [
            {
                label: "Current Month",
                data: [
                    100,
                    80,
                    100,
                    75,
                    95,
                    80,
                    100,
                    85,
                    110,
                    80,
                    110
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: (0, _utils.COLORS).green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).green,
                pointBorderColor: (0, _utils.COLORS).green,
                pointHoverBorderColor: (0, _utils.COLORS).green,
                pointHoverBackgroundColor: (0, _utils.COLORS).green
            },
            {
                label: "Last Month",
                data: [
                    160,
                    130,
                    160,
                    110,
                    150,
                    120,
                    165,
                    130,
                    170,
                    110,
                    160
                ],
                fill: true,
                backgroundColor: (context)=>gradientBg(context, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: (0, _utils.COLORS).orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: (0, _utils.COLORS).orange,
                pointBorderColor: (0, _utils.COLORS).orange,
                pointHoverBorderColor: (0, _utils.COLORS).orange,
                pointHoverBackgroundColor: (0, _utils.COLORS).orange
            }
        ]
    };
    // Chart config
    const CHART_CONFIG = {
        type: "line",
        data: CHART_DATA,
        options: {
            maintainAspectRatio: false,
            interaction: {
                mode: "index",
                intersect: false
            },
            scales: {
                x: {
                    border: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        ...(0, _chart.chartTicks)()
                    }
                },
                y: {
                    border: {
                        display: false
                    },
                    grid: {
                        ...(0, _chart.CHART_GRID)
                    },
                    min: 0,
                    max: 200,
                    ticks: {
                        ...(0, _chart.chartTicks)(),
                        maxTicksLimit: 6,
                        callback: (label)=>{
                            return label + "K";
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    ...(0, _chart.CHART_TOOLTIP)
                }
            }
        }
    };
    // Chart init
    if (CHART_WRAPPER) sentVsNotSentChart = new (0, _autoDefault.default)(CHART_WRAPPER, CHART_CONFIG);
};
const sentVsNotSentUpdate = ()=>{
    if (CHART_WRAPPER) setTimeout(()=>{
        (0, _chart.reloadChart)(sentVsNotSentChart);
    });
};

},{"chartjs-adapter-moment":"eFMDe","chart.js/auto":"avKfP","../../vendors/chart":"gBHif","../../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"5q0Ut":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "projectManagement", ()=>projectManagement);
var _budgetExpenses = require("./budgetExpenses");
var _budgetUtilization = require("./budgetUtilization");
var _health = require("./health");
var _overdueProjects = require("./overdueProjects");
var _plannedVsActual = require("./plannedVsActual");
var _projectsByStatus = require("./projectsByStatus");
var _ticketsReopened = require("./ticketsReopened");
var _upcomingTasks = require("./upcomingTasks");
const projectManagement = ()=>{
    (0, _upcomingTasks.upcomingTasks)();
    (0, _projectsByStatus.projectsByStatus)();
    (0, _budgetUtilization.budgetUtilization)();
    (0, _budgetExpenses.budgetExpenses)();
    (0, _overdueProjects.overdueProjects)();
    (0, _health.health)();
    (0, _ticketsReopened.ticketsReopened)();
    (0, _plannedVsActual.plannedVsActual)();
};

},{"./budgetExpenses":"2RAP5","./budgetUtilization":"bWgJj","./health":"jzkhI","./overdueProjects":"kzfZ7","./plannedVsActual":"jzB2i","./projectsByStatus":"7CVvd","./ticketsReopened":"6Sf0h","./upcomingTasks":"1Hzw6","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"jzkhI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "health", ()=>health);
const health = ()=>{
    const WRAPPER = document.getElementById("list-health");
    let list = "";
    const DATA = [
        {
            icon: "ph-clock",
            title: "Time",
            description: "30% ahead of schedule",
            feedback: "ph-calendar-check",
            feedbackColor: "text-success"
        },
        {
            icon: "ph-dots-three-circle",
            title: "Workload",
            description: "5 tasks overdue",
            feedback: "ph-warning-octagon",
            feedbackColor: "text-danger"
        },
        {
            icon: "ph-check-circle",
            title: "Tasks",
            description: "23 tasks to be completed",
            feedback: "ph-warning-circle",
            feedbackColor: "text-warning"
        },
        {
            icon: "ph-chart-pie",
            title: "Progress",
            description: "76% completed",
            feedback: "ph-calendar-check",
            feedbackColor: "text-success"
        },
        {
            icon: "ph-currency-circle-dollar",
            title: "Budget",
            description: "10.43% under budget",
            feedback: "ph-check-circle",
            feedbackColor: "text-success"
        }
    ];
    if (WRAPPER) {
        DATA.forEach((item, index)=>{
            list += `<div class="d-flex align-items-center mt-3">
                        <div class="w-28 flex-shrink-0">
                            <div class="rounded border text-body-emphasis py-1.5 px-2.5 d-inline-flex align-items-center">
                                <i class="ph fs-4 me-1.5 ${item.icon}"></i>
                                ${item.title}
                            </div>
                        </div>
                        <div class="ms-2 flex-grow-1 ${DATA.length - 1 !== index ? "border-bottom pb-3 mb-n3" : ""}">${item.description}</div>
                        <i class="ph fs-4 ms-3 d-none d-sm-block ${item.feedback} ${item.feedbackColor}"></i>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"kzfZ7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "overdueProjects", ()=>overdueProjects);
const overdueProjects = ()=>{
    const WRAPPER = document.getElementById("list-overdue-projects");
    let list = "";
    const DATA = [
        {
            task: "Gather stakeholder requirements for features.",
            daysPassed: 2,
            assignee: "John",
            deadline: "2023-09-01"
        },
        {
            task: "Create wireframes and UI/UX concepts.",
            daysPassed: 5,
            assignee: "Emma",
            deadline: "2023-09-05"
        },
        {
            task: "Develop backend and APIs.",
            daysPassed: 8,
            assignee: "Olivia",
            deadline: "2023-09-08"
        },
        {
            task: "Code frontend and integrate APIs.",
            daysPassed: 10,
            assignee: "Michael",
            deadline: "2023-09-15"
        },
        {
            task: "Perform unit testing and resolve errors.",
            daysPassed: 14,
            assignee: "Sophia",
            deadline: "2023-09-10"
        },
        {
            task: "Conduct cross-browser compatibility testing.",
            daysPassed: 20,
            assignee: "Daniel",
            deadline: "2023-09-18"
        },
        {
            task: "Deploy to production server.",
            daysPassed: 25,
            assignee: "Liam",
            deadline: "2023-09-20"
        },
        {
            task: "Perform user acceptance testing.",
            daysPassed: 30,
            assignee: "Ava",
            deadline: "2023-09-25"
        }
    ];
    if (WRAPPER) {
        DATA.forEach((item, index)=>{
            // Severity
            let severityClasses = item.daysPassed > 10 ? "text-danger-emphasis border-danger" : "text-warning-emphasis border-warning";
            list += `<div class="d-flex align-items-start lh-1">
                        <div class="w-10 h-10 rounded border border-opacity-50 text-center fs-7 me-3 flex-shrink-0 ${severityClasses}">
                            <div class="mt-1.5 mb-px">${item.daysPassed}</div>
                            Days
                        </div>
                        <div class="flex-grow-1 text-truncate ${DATA.length - 1 !== index ? "border-bottom pb-4 mb-4" : ""}">
                            <div class="mb-1 text-truncate">${item.task}</div>
                            <div class="d-flex align-items-center text-body-secondary fs-8 gap-1">
                                <span class="border rounded-1 p-1">Assignee: ${item.assignee}</span>
                                <span class="border rounded-1 p-1">Deadline: ${item.deadline}</span>
                            </div>
                        </div>
						<i class="ph ph-warning-octagon fs-4 ms-3 mt-2 d-none d-sm-block ${item.daysPassed > 10 ? "text-danger" : "text-warning"}"></i>	
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1Hzw6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "upcomingTasks", ()=>upcomingTasks);
var _utils = require("../../utils");
var _jpg = require("../../../img/contacts/*.jpg");
var _jpgDefault = parcelHelpers.interopDefault(_jpg);
const upcomingTasks = ()=>{
    const WRAPPER = document.getElementById("list-upcoming-tasks");
    const DATA = [
        {
            project: "Website Redesign",
            task: "Develop User Registration Module",
            risk: "At Risk",
            endDate: "2023-09-05",
            assignee: "John Smith",
            img: 1,
            completion: 65,
            color: "bg-primary"
        },
        {
            project: "Mobile App Launch",
            task: "Design UI Mockups for Mobile App",
            risk: "On Track",
            endDate: "2023-09-08",
            assignee: "Emily Brown",
            img: 2,
            completion: 52,
            color: "bg-warning"
        },
        {
            project: "Software Upgrade",
            task: "Conduct User Acceptance Testing (UAT)",
            risk: "On Track",
            endDate: "2023-09-12",
            assignee: "QA Team",
            img: 3,
            completion: 73,
            color: "bg-success"
        },
        {
            project: "Quarterly Report",
            task: "Prepare Project Status Report",
            risk: "On Track",
            endDate: "2023-09-14",
            assignee: "Project Manager",
            img: 4,
            completion: 41,
            color: "bg-danger"
        },
        {
            project: "Marketing Campaign",
            task: "Review and Approve Marketing Materials",
            risk: "On Track",
            endDate: "2023-09-18",
            assignee: "Marketing Team",
            img: 5,
            completion: 62,
            color: "bg-primary"
        },
        {
            project: "Code Optimization",
            task: "Code Refactoring for Performance Optimization",
            risk: "Planned",
            endDate: "2023-09-20",
            assignee: "Development Team",
            img: 6,
            completion: 76,
            color: "bg-primary"
        },
        {
            project: "Employee Training",
            task: "Plan and Schedule Team Training Session",
            risk: "At Risk",
            endDate: "2023-09-23",
            assignee: "Training Coordinator",
            img: 7,
            completion: 58,
            color: "bg-teal"
        },
        {
            project: "Documentation Update",
            task: "Update Documentation for New Feature Release",
            risk: "Delayed",
            endDate: "2023-09-25",
            assignee: "Technical Writer",
            img: 8,
            completion: 67,
            color: "bg-purple"
        },
        {
            project: "Budget Planning",
            task: "Finalize Budget Proposal for Q4",
            risk: "On Track",
            endDate: "2023-09-28",
            assignee: "Finance Team",
            img: 9,
            completion: 49,
            color: "bg-info"
        },
        {
            project: "Client Engagement",
            task: "Conduct Client Feedback Session",
            risk: "Planned",
            endDate: "2023-09-30",
            assignee: "Account Manager",
            img: 10,
            completion: 71,
            color: "bg-info"
        }
    ];
    let list = "";
    let badgeClass = {
        "At Risk": "border-danger text-danger",
        "On Track": "border-success text-success",
        Planned: "border-info text-info",
        Delayed: "border-warning text-warning"
    };
    if (WRAPPER) {
        DATA.forEach((item, index)=>{
            list += `<div class="py-3 rounded d-flex align-items-center justify-content-between ${(0, _utils.evenRow)(index)}">
                        <div class="w-sm-40 px-3 flex-shrink-0">
                            ${item.project}
                        </div>
                        <div class="w-sm-16 px-3 flex-shrink-0">
							<span class="badge rounded-pill border ${badgeClass[item.risk]}">${item.risk}</span>
						</div>
                        <div class="w-24 px-3 text-end flex-shrink-0 d-none d-sm-block">
							${item.endDate}
						</div>
                        <div class="w-14 px-3 text-end flex-shrink-0 d-none d-sm-block">${item.completion}%</div>
                    </div>`;
        });
        WRAPPER.innerHTML = list;
    }
};

},{"../../utils":"hgAea","../../../img/contacts/*.jpg":"bHoum","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"bHoum":[function(require,module,exports,__globalThis) {
const _temp0 = require("af2bf5a2ab4bb4e1");
const _temp1 = require("575b8cc774371327");
const _temp2 = require("cc128be695083d4f");
const _temp3 = require("624e82556edd06f8");
const _temp4 = require("e144ec8c511f2ced");
const _temp5 = require("73799def3e2deeea");
const _temp6 = require("1c3a99c439a711e7");
const _temp7 = require("b7c829767076e7c5");
const _temp8 = require("53ca3506503a666d");
const _temp9 = require("bc277de7a339cf82");
const _temp10 = require("bbe1bde2e60f1e69");
const _temp11 = require("315b78593ea65e7a");
const _temp12 = require("4f21b55f958b71af");
const _temp13 = require("d8e71629cdc30b64");
const _temp14 = require("26e87a6cee7effd5");
const _temp15 = require("4f386f6f7d98f2d7");
module.exports = {
    "1": _temp0,
    "2": _temp1,
    "3": _temp2,
    "4": _temp3,
    "5": _temp4,
    "6": _temp5,
    "7": _temp6,
    "8": _temp7,
    "9": _temp8,
    "10": _temp9,
    "11": _temp10,
    "12": _temp11,
    "13": _temp12,
    "14": _temp13,
    "15": _temp14,
    "16": _temp15
};

},{"af2bf5a2ab4bb4e1":"eM9AY","575b8cc774371327":"4tWpl","cc128be695083d4f":"egP4V","624e82556edd06f8":"dRrEf","e144ec8c511f2ced":"cG5Jh","73799def3e2deeea":"945u4","1c3a99c439a711e7":"go82E","b7c829767076e7c5":"4qG8A","53ca3506503a666d":"4jtK8","bc277de7a339cf82":"8Gxhp","bbe1bde2e60f1e69":"5foDv","315b78593ea65e7a":"hSAKF","4f21b55f958b71af":"3Jp7F","d8e71629cdc30b64":"elJBN","26e87a6cee7effd5":"3eInA","4f386f6f7d98f2d7":"a5Vjj"}],"6tIO2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentHeader", ()=>contentHeader);
var _utils = require("../utils");
const contentHeader = ()=>{
    const CONTENT_HEADERS = document.querySelectorAll(".content-header");
    const CONTENT = document.getElementById("content");
    const handleScroll = (el)=>{
        let lastScrollPosition = 0;
        let scrollEl = el.closest(".simplebar-content-wrapper");
        const throttleScrollHandler = (0, _utils.throttle)(()=>{
            let currentScrollPosition = scrollEl.scrollTop;
            if (currentScrollPosition > lastScrollPosition) {
                el.classList.toggle("scrolling-up", currentScrollPosition > 50);
                el.classList.add("scrolling-down");
            } else {
                el.classList.remove("scrolling-up");
                el.classList.toggle("scrolling-down", currentScrollPosition > 5);
            }
            lastScrollPosition = currentScrollPosition;
        }, 15);
        scrollEl.addEventListener("scroll", ()=>throttleScrollHandler());
    };
    const observer = new MutationObserver(()=>{
        const SCROLL_WRAPPERS = CONTENT.querySelectorAll(".simplebar-content-wrapper");
        if (SCROLL_WRAPPERS.length > 0) CONTENT_HEADERS.forEach((header)=>{
            handleScroll(header);
        });
    });
    observer.observe(CONTENT, {
        childList: true,
        subtree: true
    });
};

},{"../utils":"hgAea","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"gt4gk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maps", ()=>maps);
var _jsvectormap = require("jsvectormap");
var _jsvectormapDefault = parcelHelpers.interopDefault(_jsvectormap);
var _worldJs = require("jsvectormap/dist/maps/world.js");
var _worldMercJs = require("./world-merc.js");
var _canadaJs = require("./canada.js");
var _russiaJs = require("./russia.js");
var _spainJs = require("./spain.js");
var _usAeaEnJs = require("./us-aea-en.js");
var _usLccEnJs = require("./us-lcc-en.js");
var _usMercEnJs = require("./us-merc-en.js");
var _usMillEnJs = require("./us-mill-en.js");
var _jsVectorMap = require("../../vendors/jsvectormap/jsVectorMap");
const maps = (item)=>{
    // Map config
    const OPTIONS = {
        draggable: false,
        zoomButtons: false,
        zoomOnScroll: false
    };
    // Maps
    const MAP_ITEMS = [
        {
            name: "World",
            options: {
                map: "world",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#1E91FF"
                    }
                }
            }
        },
        {
            name: "World - Mercator",
            options: {
                map: "world_merc",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#43D271"
                    }
                }
            }
        },
        {
            name: "USA - Miller",
            options: {
                map: "us_mill_en",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#26C6DA"
                    }
                }
            }
        },
        {
            name: "USA - Mercator",
            options: {
                map: "us_merc_en",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#FD7171"
                    }
                }
            }
        },
        {
            name: "USA - Lambert Conformal Conic",
            options: {
                map: "us_lcc_en",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#FFA950"
                    }
                }
            }
        },
        {
            name: "USA - Albers Equal Area",
            options: {
                map: "us_aea_en",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#E26CF5"
                    }
                }
            }
        },
        {
            name: "Spain",
            options: {
                map: "spain",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#7E57C2"
                    }
                }
            }
        },
        {
            name: "Canada",
            options: {
                map: "canada",
                ...OPTIONS,
                regionStyle: {
                    initial: {
                        fill: "#D4E157"
                    }
                }
            }
        }
    ];
    // Init map
    const initMap = (item)=>{
        const MAP_WRAPPER = document.getElementById(`map-${item.options.map}`);
        // Set map size on load
        (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
        new (0, _jsvectormapDefault.default)({
            selector: `#map-${item.options.map}`,
            ...item.options,
            onLoaded (map) {
                window.addEventListener("resize", ()=>{
                    // Set map size on window resize
                    (0, _jsVectorMap.resizeMap)(MAP_WRAPPER);
                    setTimeout(()=>{
                        map.updateSize();
                    });
                });
            }
        });
    };
    // Card
    const CARD = document.createElement("div");
    CARD.setAttribute("class", "card-body");
    const WRAPPER = document.createElement("div");
    WRAPPER.classList.add("mx-auto");
    const mapCard = (id, name)=>{
        WRAPPER.id = id;
        CARD.innerHTML = `<h3 class="card-title fs-5 mb-8">${name}</h3>`;
        CARD.appendChild(WRAPPER);
        return CARD.outerHTML;
    };
    // Render
    const MAPS_WRAPPER = document.querySelector("#maps-wrapper");
    let list = "";
    if (MAPS_WRAPPER) {
        MAP_ITEMS.forEach((map)=>{
            list += `<div class="col-md-6">
						<div class="card">
							${mapCard(`map-${map.options.map}`, map.name)}
						</div>
					</div>`;
            setTimeout(()=>{
                initMap(map);
            });
        });
        MAPS_WRAPPER.innerHTML = list;
    }
};

},{"jsvectormap":"17NmK","jsvectormap/dist/maps/world.js":"Zvkp7","./world-merc.js":"1xo76","./canada.js":"dA3La","./russia.js":"2IqDx","./spain.js":"eCK3t","./us-aea-en.js":"3pSC7","./us-lcc-en.js":"ehkFF","./us-merc-en.js":"6c6zq","./us-mill-en.js":"9OmMc","../../vendors/jsvectormap/jsVectorMap":"2cM0S","@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}],"1xo76":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap("world_merc", {
    "insets": [
        {
            "width": 900,
            "top": 0,
            "height": 583.0802520919394,
            "bbox": [
                {
                    "y": -18449355.69035302,
                    "x": -20004297.151525836
                },
                {
                    "y": 7485321.539093307,
                    "x": 20026572.394749384
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "BD": {
            "path": "M651.84,359.63l-0.6,-2.05l-1.36,-1.76l-2.31,-0.11l-0.41,0.48l0.2,0.98l-0.54,1.03l-0.71,-0.37l-0.68,0.36l-1.19,-0.37l-0.37,-2.06l-0.81,-1.92l0.39,-1.52l-0.21,-0.46l-1.16,-0.55l0.3,-0.55l1.48,-0.98l0.03,-0.64l-1.56,-1.27l0.56,-1.2l1.6,0.97l1.04,0.16l0.18,1.62l0.33,0.35l5.65,0.65l-0.86,1.73l-1.21,0.35l-0.77,1.56l0.07,0.46l1.37,1.41l0.68,-0.19l0.42,-1.44l1.21,3.96l-0.03,1.26l-0.32,-0.15l-0.41,0.28Z",
            "name": "Bangladesh"
        },
        "BE": {
            "path": "M429.3,264.88l1.93,0.28l2.07,-0.74l1.41,1.55l1.25,0.86l-0.23,2.13l-0.68,0.42l-0.18,1.46l-1.63,-1.32l-1.4,0.17l-2.72,-3.22l-1.17,-0.21l-0.2,-0.77l1.57,-0.62Z",
            "name": "Belgium"
        },
        "BF": {
            "path": "M421.42,377.38l-0.11,0.96l0.34,1.18l1.4,1.73l0.07,1.11l0.32,0.37l2.56,0.52l-0.04,1.3l-0.38,0.54l-1.07,0.21l-0.73,1.19l-0.63,0.21l-3.22,-0.25l-0.94,0.39l-5.4,-0.05l-0.39,0.38l0.16,2.75l-1.23,-0.43l-1.17,0.1l-0.89,0.57l-2.27,-1.73l-0.13,-1.12l0.61,-0.96l0.01,-0.93l1.87,-2.0l0.44,-1.83l0.43,-0.39l1.28,0.26l1.05,-0.52l0.47,-0.73l1.84,-1.1l0.55,-0.84l2.2,-1.01l1.15,-0.31l0.72,0.46l1.13,-0.01Z",
            "name": "Burkina Faso"
        },
        "BG": {
            "path": "M491.72,293.09l-0.93,1.06l-0.91,2.45l0.52,1.52l-1.65,-0.27l-2.55,1.06l-0.27,1.69l-1.79,0.25l-2.03,-1.11l-1.92,0.88l-1.4,-0.07l-0.15,-1.87l-1.09,-1.09l0.34,-1.71l0.91,-1.02l0.01,-0.52l-1.15,-1.41l-0.06,-1.14l0.44,0.87l0.46,0.21l0.87,-0.23l1.91,0.53l3.68,0.18l1.44,-0.92l2.7,-0.74l1.67,1.16l0.95,0.26Z",
            "name": "Bulgaria"
        },
        "BA": {
            "path": "M463.49,287.91l2.09,0.57l1.72,-0.03l1.56,0.78l-0.4,0.99l1.14,1.61l-0.27,1.19l-1.82,1.31l-0.37,1.54l-1.65,-0.96l-0.89,-1.36l-2.11,-2.07l-1.65,-2.57l0.25,-0.7l0.45,0.41l0.59,-0.06l0.43,-0.59l0.92,-0.06Z",
            "name": "Bosnia and Herz."
        },
        "BN": {
            "path": "M707.48,403.47l0.69,-0.65l1.41,-0.91l-0.15,1.64l-0.81,-0.05l-0.61,0.58l-0.53,-0.6Z",
            "name": "Brunei"
        },
        "BO": {
            "path": "M263.83,471.11l-3.09,-0.24l-0.38,0.24l-0.7,1.56l-1.31,-1.57l-3.28,-0.66l-2.38,2.47l-1.3,0.27l-0.88,-3.36l-1.31,-2.93l0.74,-2.43l-0.12,-0.42l-1.2,-1.03l-0.37,-1.92l-1.09,-1.59l1.46,-2.61l-0.97,-2.36l0.48,-1.07l-0.35,-0.74l0.91,-1.33l0.16,-3.89l0.5,-1.18l-1.81,-3.45l2.46,0.08l0.8,-0.85l3.4,-1.92l2.66,-0.35l-0.19,1.39l0.3,1.07l-0.05,1.98l2.72,2.29l2.88,0.49l0.89,0.87l1.79,0.59l0.98,0.71l1.71,0.05l1.17,0.61l0.6,2.74l-0.7,0.54l0.96,3.03l0.37,0.28l4.3,0.1l-0.25,1.22l0.27,1.03l1.43,0.92l0.5,1.38l-0.41,1.9l-0.65,1.11l0.13,1.37l-2.69,-1.68l-2.4,-0.03l-4.36,0.77l-1.49,2.56l-0.1,1.55l-0.75,2.44Z",
            "name": "Bolivia"
        },
        "JP": {
            "path": "M781.1,291.58l1.81,0.77l1.63,-1.08l0.4,2.83l-3.6,1.02l-1.98,3.05l-3.61,-2.12l-0.58,0.21l-1.27,3.44l-2.14,0.04l-0.3,-2.88l1.09,-2.32l2.44,-0.17l0.37,-0.34l1.26,-6.78l2.45,3.07l2.03,1.27ZM773.56,314.42l-0.92,2.42l0.38,1.64l-1.15,1.91l-3.02,1.35l-4.59,0.3l-3.33,3.22l-1.25,-0.86l-0.09,-2.06l-0.46,-0.38l-4.35,0.67l-3.0,1.42l-2.84,0.06l-0.37,0.26l0.11,0.44l2.34,2.04l-1.55,4.67l-1.25,0.95l-0.8,-0.75l0.56,-2.43l-0.2,-0.44l-1.47,-0.8l-0.77,-1.54l2.14,-0.91l1.27,-1.83l2.45,-1.53l1.83,-2.06l4.77,-0.88l2.6,0.61l0.45,-0.22l2.39,-5.05l1.27,1.14l0.53,0.01l5.1,-4.39l1.68,-4.08l-0.39,-3.75l0.92,-1.82l2.11,-0.49l1.24,4.16l-0.07,2.45l-2.25,3.13l-0.03,3.43ZM757.77,324.02l0.2,0.64l-1.01,1.31l-1.17,-0.72l-1.28,0.7l-0.69,1.54l-1.01,-0.53l0.01,-1.04l1.14,-1.49l1.58,0.15l0.85,-1.05l1.38,0.49Z",
            "name": "Japan"
        },
        "BI": {
            "path": "M495.45,425.39l-1.08,-2.99l1.14,-0.11l0.64,-1.19l0.76,0.09l0.65,1.83l-2.1,2.37Z",
            "name": "Burundi"
        },
        "BJ": {
            "path": "M429.57,385.57l-0.05,0.81l0.5,1.35l-0.42,0.87l0.17,0.79l-1.82,2.14l-0.57,1.77l-0.08,5.44l-1.41,0.2l-0.48,-1.36l0.11,-5.73l-0.52,-0.7l-0.2,-1.35l-1.48,-1.49l0.22,-0.91l0.89,-0.43l0.42,-0.93l1.27,-0.36l1.22,-1.35l0.61,-0.0l1.62,1.25Z",
            "name": "Benin"
        },
        "BT": {
            "path": "M650.32,342.67l0.85,0.75l-0.12,1.18l-3.76,-0.12l-1.57,0.41l-1.93,-0.91l1.49,-2.09l1.12,-0.6l1.62,0.6l1.33,0.09l0.98,0.68Z",
            "name": "Bhutan"
        },
        "JM": {
            "path": "M228.38,368.9l-0.8,0.41l-2.27,-1.09l0.84,-0.25l2.14,0.31l1.18,0.59l-1.09,0.03Z",
            "name": "Jamaica"
        },
        "BW": {
            "path": "M483.92,460.24l2.27,4.08l2.83,2.92l0.96,0.32l0.77,2.5l2.13,0.63l1.04,0.8l-3.01,1.7l-2.32,2.09l-1.54,2.79l-1.52,0.46l-0.64,2.01l-1.34,0.54l-1.84,-0.12l-1.21,-0.77l-1.36,-0.31l-1.22,0.64l-0.75,1.42l-2.31,1.98l-1.39,0.22l-0.36,-0.63l0.16,-1.82l-1.48,-2.63l-0.62,-0.44l-0.0,-7.35l2.08,-0.08l0.38,-0.4l0.07,-9.12l1.56,-0.08l3.63,-0.87l0.8,0.91l0.52,0.07l1.5,-0.97l2.2,-0.5Z",
            "name": "Botswana"
        },
        "BR": {
            "path": "M259.98,404.95l3.24,0.7l0.65,-0.53l4.55,-1.32l1.08,-1.06l-0.02,-0.64l0.55,-0.05l0.28,0.28l-0.26,0.87l0.22,0.48l0.73,0.32l0.4,0.81l-0.62,0.86l-0.4,2.13l0.82,2.56l1.69,1.43l1.43,0.2l3.17,-1.68l3.18,0.3l0.65,-0.75l-0.27,-0.92l1.9,-0.09l2.39,0.99l1.06,-0.61l0.84,0.78l1.2,-0.18l1.18,-1.06l0.84,-1.94l1.36,-2.11l0.37,-0.05l1.89,5.46l1.33,0.59l0.05,1.28l-1.77,1.94l0.02,0.56l1.02,0.87l4.07,0.36l0.08,2.16l0.66,0.29l1.74,-1.5l6.97,2.32l1.02,1.22l-0.35,1.18l0.49,0.5l2.81,-0.74l4.77,1.3l3.75,-0.08l3.57,2.0l3.29,2.86l1.93,0.73l2.12,0.12l0.71,0.62l1.21,4.52l-0.95,4.0l-4.72,5.09l-1.64,2.95l-1.72,2.07l-0.8,0.3l-0.72,2.05l0.18,4.81l-0.94,5.62l-0.81,1.15l-0.43,3.44l-2.55,3.58l-0.4,2.59l-1.86,1.08l-0.67,1.57l-2.54,0.01l-3.94,1.05l-1.83,1.24l-2.87,0.85l-3.03,2.27l-2.2,2.92l-0.36,2.08l0.4,1.64l-0.45,2.73l-0.52,1.26l-1.77,1.62l-2.75,5.05l-3.83,3.63l-1.23,2.92l-1.18,1.22l-0.37,-0.92l0.96,-1.23l0.01,-0.48l-1.52,-2.09l-4.56,-3.52l-1.03,-0.01l-2.38,-2.13l-0.85,0.0l5.38,-5.77l3.77,-2.69l0.21,-2.55l-1.34,-1.86l-0.92,0.07l0.59,-2.44l0.01,-1.59l-1.11,-0.85l-1.75,0.31l-0.44,-3.22l-0.52,-0.97l-1.88,-0.9l-1.24,0.48l-2.17,-0.43l0.15,-3.31l-0.63,-1.37l0.67,-0.74l-0.22,-1.37l0.66,-1.16l0.44,-2.08l-0.61,-1.86l-1.4,-0.87l-0.2,-0.77l0.34,-1.41l-0.38,-0.49l-4.52,-0.1l-0.72,-2.27l0.59,-0.42l-0.03,-1.12l-0.5,-0.87l-0.32,-1.71l-1.45,-0.76l-1.63,-0.02l-1.05,-0.73l-1.6,-0.48l-1.13,-1.0l-2.69,-0.41l-2.47,-2.08l0.13,-4.38l-0.45,-0.45l-3.46,0.5l-3.44,1.95l-0.6,0.74l-2.89,-0.17l-1.47,0.42l-0.72,-0.18l0.15,-3.54l-0.64,-0.34l-1.94,1.42l-1.87,-0.06l-0.83,-1.19l-1.38,-0.27l0.21,-1.01l-1.35,-1.5l-0.88,-1.92l0.56,-0.6l-0.0,-0.81l1.29,-0.62l0.22,-0.43l-0.22,-1.19l0.61,-0.91l0.15,-0.99l2.65,-1.58l1.99,-0.47l0.42,-0.36l2.06,0.11l0.42,-0.33l1.19,-8.0l-0.41,-1.56l-1.1,-1.0l0.01,-1.33l1.91,-0.42l0.08,-0.96l-0.33,-0.43l-1.14,-0.2l-0.02,-0.83l4.47,0.05l0.82,-0.67l0.82,1.81l0.8,0.07l1.15,1.1l2.26,-0.05l0.71,-0.83l2.78,-0.96l0.48,-1.13l1.6,-0.64l0.24,-0.47l-0.48,-0.83l-1.83,-0.19l-0.36,-3.22Z",
            "name": "Brazil"
        },
        "BS": {
            "path": "M227.69,345.88l0.0,-0.01l0.0,0.0l-0.0,0.01ZM226.4,353.1l-0.48,-1.18l-0.85,-0.78l0.36,-1.17l0.95,2.03l0.01,1.1ZM225.65,345.38l-1.96,0.32l-0.04,-0.26l0.74,-0.14l1.26,0.08Z",
            "name": "Bahamas"
        },
        "BY": {
            "path": "M493.82,245.43l0.3,0.93l0.53,0.25l1.16,-0.47l2.08,0.9l0.2,1.73l-0.48,1.43l1.57,2.82l0.93,0.75l0.13,0.97l1.58,0.7l0.48,0.74l-0.6,0.57l-1.85,-0.13l-0.76,0.48l-0.12,0.47l1.08,3.5l-1.96,0.33l-0.87,1.12l-0.12,1.49l-0.67,-0.22l-2.03,0.17l-0.52,-0.75l-0.57,-0.09l-0.72,0.54l-0.9,-0.5l-1.91,-0.08l-2.74,-0.95l-2.61,-0.34l-2.01,0.09l-1.52,1.11l-0.65,0.08l-0.07,-1.5l-0.64,-1.57l1.4,-1.01l0.01,-1.65l-0.7,-1.69l-0.08,-1.37l2.2,-0.03l2.72,-1.61l0.73,-2.54l2.1,-1.69l-0.2,-1.69l3.82,-2.26l2.27,0.97Z",
            "name": "Belarus"
        },
        "BZ": {
            "path": "M198.03,374.09l0.1,-4.57l0.69,-0.06l0.74,-1.32l0.34,0.28l-0.4,1.33l0.17,0.59l-0.34,2.3l-1.3,1.44Z",
            "name": "Belize"
        },
        "RU": {
            "path": "M491.5,228.55l2.65,-2.55l-0.01,-0.58l-2.35,-2.15l7.46,-9.43l1.0,-2.89l-0.09,-0.41l-3.55,-3.64l0.93,-3.78l-2.18,-4.19l1.62,-5.27l-2.85,-6.95l2.24,-4.74l-0.06,-0.43l-3.73,-4.33l0.33,-4.4l1.87,-0.61l4.26,-2.85l2.35,-2.28l3.83,4.05l6.96,1.77l9.34,7.63l1.83,2.99l0.16,4.03l-2.62,3.11l-3.84,1.55l-11.03,-4.69l-2.16,0.81l-0.14,0.63l3.99,4.45l0.31,8.71l5.34,3.55l0.64,-0.27l0.32,-2.78l-1.43,-2.53l1.23,-1.72l5.74,3.47l0.43,-0.01l2.11,-1.42l0.15,-0.48l-1.59,-4.12l5.51,-5.69l1.99,0.31l2.25,2.09l0.65,-0.16l1.46,-4.3l-2.03,-4.0l1.18,-3.78l-1.5,-3.67l5.98,1.86l1.2,3.14l-2.74,0.7l-0.3,0.39l0.02,3.61l2.07,2.45l0.43,0.11l3.87,-1.38l0.85,-4.25l13.69,-8.82l1.16,0.21l-2.17,3.65l0.26,0.59l3.11,0.7l0.4,-0.14l1.68,-2.16l4.51,-0.18l3.61,-2.68l2.61,3.78l0.67,-0.02l2.85,-4.55l-0.0,-0.43l-2.5,-3.89l1.03,-1.89l7.03,2.08l3.39,2.18l9.05,7.85l0.62,-0.13l1.64,-3.95l-2.48,-3.58l-0.07,-1.39l-0.31,-0.37l-2.62,-0.61l0.73,-3.21l-1.33,-5.76l-0.07,-2.28l4.55,-7.04l1.67,-7.53l1.59,-1.44l6.17,2.09l0.48,4.29l-2.34,6.42l1.55,2.76l0.79,5.18l-0.57,9.85l2.73,4.33l-1.02,4.26l-4.88,9.07l0.23,0.57l2.86,0.92l0.49,-0.22l0.94,-2.13l2.83,-1.82l0.65,-3.1l2.12,-3.05l-1.37,-4.06l1.14,-4.42l-0.31,-0.49l-2.47,-0.52l-0.55,-3.59l1.95,-7.61l-3.13,-6.05l4.31,-5.2l-0.45,-5.83l0.53,-0.08l1.2,4.22l-0.98,7.66l0.21,0.4l2.68,1.42l0.58,-0.43l-1.09,-5.45l3.9,-2.98l4.9,-0.41l4.5,4.5l0.49,0.06l0.17,-0.47l-2.21,-6.76l-0.24,-8.85l4.01,-1.66l5.93,0.39l5.54,-1.19l0.28,-0.55l-1.97,-4.64l2.73,-5.9l2.89,-0.36l4.78,-4.84l6.49,-1.33l1.07,-2.85l6.11,-0.9l1.91,2.17l0.58,0.02l5.5,-5.45l4.43,0.17l0.41,-0.34l0.68,-4.62l2.32,-4.63l5.58,-4.48l3.69,3.23l-3.04,2.5l0.14,0.69l5.42,1.64l0.64,5.13l0.7,0.21l2.17,-2.49l6.98,0.14l5.48,5.07l1.92,3.72l-0.59,4.98l-2.66,2.78l-6.56,5.27l-1.96,2.84l0.18,0.6l3.08,1.27l3.68,2.26l0.45,-0.02l1.76,-1.33l1.14,5.11l0.34,0.31l0.41,-0.22l1.03,-2.14l3.75,-1.32l7.65,1.4l0.57,3.81l0.35,0.34l10.47,1.28l0.45,-0.39l0.13,-6.16l4.81,1.41l3.93,-0.03l3.85,4.37l1.1,5.17l-1.42,3.65l3.15,6.24l4.05,3.25l0.63,-0.2l2.24,-7.6l3.55,3.15l0.44,0.06l4.09,-2.03l4.67,2.34l0.49,-0.1l1.68,-2.01l3.85,1.04l0.49,-0.48l-1.76,-7.3l3.0,-3.3l22.19,5.31l2.15,4.74l6.55,5.95l10.36,-1.34l4.76,1.21l1.93,2.89l-0.3,5.24l3.26,2.4l3.66,-1.4l4.3,-0.18l4.84,1.4l4.5,-0.75l4.22,6.04l0.56,0.1l3.1,-2.22l0.13,-0.49l-1.96,-4.39l0.94,-2.74l7.63,1.95l5.23,-0.41l7.05,3.36l9.59,8.27l6.43,6.42l-0.21,3.79l1.82,1.88l0.45,0.06l0.21,-0.41l-0.52,-4.08l6.13,0.86l4.58,5.48l-2.15,2.3l-3.97,0.6l-0.34,0.39l-0.06,5.64l-0.78,0.94l-1.98,-0.15l-1.91,-1.99l-3.16,-1.63l-0.77,-2.69l-2.54,-0.99l-2.81,0.69l-1.11,-1.73l0.5,-2.12l-0.56,-0.45l-3.0,1.46l-0.2,0.51l1.06,2.68l-1.31,2.33l-3.03,2.42l-3.08,-0.41l-0.37,0.63l2.22,3.03l1.47,4.59l1.16,1.53l0.26,2.04l-0.46,1.02l-4.64,-1.05l-6.95,4.01l-2.18,0.6l-7.62,6.88l-0.81,1.88l-3.15,-3.07l-0.49,-0.06l-6.18,3.75l-0.93,-1.52l-0.61,-0.09l-2.26,2.01l-3.15,-0.64l-0.47,0.3l-0.79,3.18l-3.03,4.85l0.09,1.91l0.26,0.36l2.58,0.95l-0.3,6.03l-1.97,0.14l-0.36,0.29l-1.07,3.72l0.87,1.82l-4.01,2.02l-1.04,4.88l-3.49,0.95l-0.29,0.32l-0.73,4.06l-3.07,3.18l-0.71,-2.11l-2.45,-15.41l1.17,-6.06l2.06,-2.67l0.2,-2.12l3.83,-1.13l4.47,-6.06l4.28,-5.09l4.48,-4.07l2.13,-7.67l-0.45,-0.5l-3.36,0.72l-1.47,4.3l-5.81,5.21l-1.86,-5.8l-0.49,-0.26l-6.68,1.94l-6.27,8.55l-0.01,0.46l1.74,2.54l-8.37,1.57l0.16,-3.05l-0.32,-0.41l-3.89,-0.75l-3.3,2.39l-7.61,-0.82l-8.47,1.58l-17.7,19.78l0.24,0.67l3.73,0.52l1.14,2.49l2.65,1.15l0.46,-0.13l1.47,-1.95l2.35,0.24l3.43,4.41l0.08,3.28l-1.96,4.11l-0.21,4.69l-1.11,6.02l-3.72,5.32l-0.87,2.56l-8.3,10.17l-3.18,1.92l-1.29,0.04l-1.45,-1.54l-0.53,-0.05l-2.48,1.84l0.28,-0.27l0.36,-4.08l-0.6,-2.85l1.77,-1.03l2.89,0.6l0.44,-0.22l1.71,-3.57l0.84,-3.92l0.97,-1.37l1.32,-3.37l-0.48,-0.53l-4.14,1.11l-2.19,1.46l-3.38,-0.0l-1.05,-3.43l-2.97,-2.72l-4.29,-1.26l-1.76,-6.1l-2.63,-6.06l-2.3,-1.58l-3.75,-1.25l-3.46,0.09l-3.19,0.77l-2.26,2.18l0.05,0.61l1.21,0.86l0.03,1.88l-1.34,1.28l-2.26,4.23l-0.03,1.71l-3.16,2.2l-2.8,-1.36l-3.02,0.27l-1.18,-1.17l-1.68,-0.52l-3.94,2.75l-3.21,0.62l-2.27,0.93l-3.04,-0.6l-2.21,0.03l-1.47,-1.89l-2.61,-1.95l-2.65,-0.52l-5.44,1.21l-3.23,-1.49l-0.71,-3.08l-5.2,-1.5l-2.75,-1.64l-0.54,0.13l-2.59,4.17l0.89,2.46l-2.1,2.34l-3.38,-0.91l-2.42,-0.14l-1.85,-1.84l-2.51,-0.06l-2.46,-1.17l-3.86,1.89l-4.72,3.31l-3.26,0.87l-1.17,-2.07l-0.41,-0.2l-2.97,0.48l-1.1,-1.58l-1.62,-0.7l-1.31,-2.32l-1.38,-0.72l-3.71,0.94l-3.3,-2.2l-0.56,0.12l-0.97,1.52l-5.27,-9.77l-3.03,-3.13l0.73,-1.08l-0.04,-0.5l-0.5,-0.06l-6.2,3.97l-1.82,0.18l0.16,-1.83l-0.23,-0.4l-3.22,-1.46l-2.47,0.85l-0.7,-4.0l-0.31,-0.32l-4.5,-0.95l-2.52,1.84l-6.18,1.58l-1.3,1.08l-9.51,1.62l-1.15,1.45l-0.03,0.46l1.56,2.48l-1.98,0.89l-0.21,0.52l0.35,0.85l-2.18,1.8l0.03,0.64l3.81,2.6l-0.44,1.31l-3.21,-0.16l-0.87,1.02l-3.08,-1.9l-3.97,0.08l-2.66,1.61l-8.29,-4.28l-4.1,0.06l-5.42,4.44l-0.37,2.36l-2.0,-1.76l-0.63,0.13l-2.0,4.27l0.61,1.02l-1.32,2.63l0.05,0.44l2.13,2.54l1.95,0.05l1.39,2.15l-0.23,1.74l1.12,0.83l-0.86,1.61l-2.49,0.71l-2.49,3.66l0.0,0.45l2.19,3.19l-0.16,2.44l2.54,3.7l-1.62,1.81l-0.67,-0.14l-1.63,-1.93l-2.29,-0.94l-0.94,-1.47l-2.34,-0.71l-1.48,0.44l-0.42,-0.51l-3.52,-1.68l-5.76,-1.14l-0.47,0.2l-2.87,-2.64l-2.9,-1.36l-1.63,-1.56l1.39,-0.52l2.08,-3.01l-0.04,-0.51l-0.98,-1.01l3.14,-1.27l0.25,-0.4l-0.07,-0.8l-0.5,-0.35l-1.72,0.45l0.04,-0.92l1.06,-0.85l2.31,-0.26l0.34,-0.28l0.4,-1.47l-0.51,-1.94l0.95,-1.86l0.01,-1.32l-0.27,-0.37l-3.69,-1.26l-1.41,0.02l-1.42,-1.68l-0.43,-0.12l-1.78,0.57l-2.78,-1.21l-0.01,-0.71l-0.89,-1.73l-2.01,-0.38l-0.13,-0.77l0.53,-1.15l-1.6,-2.31l-3.58,0.03l-0.92,0.88l-0.42,-0.07l-1.05,-3.54l2.29,-0.07l0.97,-0.92l0.06,-0.51l-0.9,-1.27l-1.4,-0.62l-0.06,-0.85l-0.95,-0.73l-1.43,-2.57l0.49,-1.21l-0.25,-2.07l-2.69,-1.38l-1.22,0.37l-0.45,-0.94l-2.46,-1.05l-0.74,-2.46l-0.21,-2.19l-1.07,-1.09l0.93,-1.49l-0.72,-4.29l1.7,-2.67l-0.24,-0.98ZM749.34,295.94l-0.76,0.56l-0.11,0.15l-0.01,-0.65l0.87,-0.06ZM871.96,154.57l2.04,-0.2l3.29,2.04l-0.13,0.64l-2.37,1.7l-5.54,0.79l-0.34,-1.85l3.05,-3.11ZM797.75,123.25l-2.42,3.18l-3.66,-0.78l-4.39,-3.6l0.47,-2.52l10.01,3.72ZM783.79,118.53l-1.81,6.68l-8.92,-0.26l-4.06,2.13l-4.64,-5.86l1.28,-6.57l3.04,-1.79l6.39,0.44l8.71,5.22ZM778.23,253.99l-0.64,-1.28l0.31,-0.17l0.33,1.45ZM778.36,254.55l0.92,4.28l-0.05,4.08l1.05,4.08l2.23,6.09l-2.91,-0.99l-0.51,0.27l-1.54,5.47l2.42,4.01l-0.04,1.39l-1.22,-1.41l-0.65,0.06l-1.07,1.83l-0.29,-1.88l0.28,-3.61l-0.28,-4.01l0.58,-2.92l0.11,-5.24l-1.46,-4.02l0.21,-5.38l2.23,-2.09ZM780.09,139.86l-3.31,0.05l-5.09,-1.07l2.11,-3.11l2.77,-0.74l3.29,3.15l0.23,1.71ZM683.7,87.54l-13.17,4.38l4.34,-15.76l1.75,-1.29l1.59,0.74l6.17,7.25l-0.68,4.69ZM670.82,80.26l-5.03,1.48l-6.76,-3.64l-4.04,-4.98l-1.9,-10.03l-3.29,-2.93l6.28,-10.21l5.0,-3.39l4.63,7.67l5.72,14.22l-0.6,11.8ZM564.4,160.28l-0.92,0.41l-7.78,-0.94l-0.83,-3.41l-4.32,-2.0l-0.33,-3.85l2.54,-1.96l-0.08,-4.42l4.9,-7.29l-0.16,-0.58l-1.86,-0.88l5.7,-7.68l-0.57,-4.44l5.43,-5.07l8.18,-6.55l8.25,-1.96l4.4,-4.05l4.43,-1.3l1.54,3.81l-1.55,3.04l-16.43,9.84l-7.93,9.27l-7.69,17.13l0.59,6.93l4.49,5.95ZM548.68,56.87l-5.47,3.05l-0.54,2.57l-2.49,2.05l-2.33,-2.98l1.37,-4.49l-0.35,-0.52l-4.3,-0.36l3.7,-2.13l3.34,-0.17l0.47,3.78l0.35,0.35l0.42,-0.25l1.41,-3.62l2.04,-2.24l3.21,2.97l-0.81,1.96ZM477.39,251.71l-4.1,0.06l-2.6,-0.41l0.38,-1.28l3.15,-1.29l3.25,1.22l-0.09,1.7Z",
            "name": "Russia"
        },
        "RW": {
            "path": "M497.0,418.15l0.71,1.01l-0.11,1.09l-1.63,0.03l-1.04,1.39l-0.83,-0.11l0.51,-1.2l0.08,-1.34l0.42,-0.41l0.7,0.14l1.19,-0.61Z",
            "name": "Rwanda"
        },
        "RS": {
            "path": "M469.33,288.43l0.49,-1.17l-1.2,-1.97l1.47,-0.73l1.3,0.13l1.18,1.23l0.45,1.29l1.35,0.74l0.34,1.53l1.46,1.02l0.76,-0.3l0.25,0.82l-0.51,0.87l0.22,1.27l1.08,1.41l-0.8,0.94l-0.38,1.72l-1.22,0.09l0.27,-0.81l-2.46,-2.38l-0.93,0.06l-0.47,1.05l-2.15,-1.58l0.57,-1.85l-1.13,-1.51l0.53,-1.32l-0.49,-0.55Z",
            "name": "Serbia"
        },
        "TL": {
            "path": "M734.55,437.87l-0.09,-0.98l4.5,-0.86l-2.82,1.28l-1.59,0.55Z",
            "name": "Timor-Leste"
        },
        "TM": {
            "path": "M553.03,299.38l-0.05,0.44l-0.1,-0.29l0.15,-0.15ZM555.85,298.15l0.46,-0.11l1.47,0.82l2.08,2.72l4.07,-0.21l0.38,-0.49l-0.34,-1.39l1.95,-1.07l1.9,-1.78l2.93,1.56l0.41,2.75l1.21,0.76l2.57,-0.15l0.62,0.45l1.32,3.46l4.54,3.8l2.67,1.6l3.07,1.26l-0.04,1.22l-1.32,-0.81l-0.61,0.19l-0.32,0.93l-2.19,0.86l-0.47,2.34l-1.21,0.81l-1.91,0.45l-0.73,1.44l-1.54,0.33l-2.22,-1.01l-0.2,-2.37l-0.37,-0.37l-1.72,-0.1l-2.76,-2.67l-2.14,-0.44l-2.84,-1.62l-1.78,-0.29l-1.25,0.58l-1.56,-0.09l-2.01,1.85l-1.69,0.47l-0.37,-1.75l0.36,-3.28l-0.2,-0.39l-1.68,-0.94l0.55,-1.92l-0.34,-0.51l-1.23,-0.14l0.38,-1.9l2.23,0.64l2.2,-1.06l0.12,-0.63l-1.77,-1.94l-0.69,-1.85Z",
            "name": "Turkmenistan"
        },
        "TJ": {
            "path": "M597.8,305.02l-0.08,0.09l-2.5,-0.5l-0.48,0.34l-0.24,1.88l0.43,0.45l2.63,-0.24l3.18,1.04l4.38,-0.45l0.56,2.63l0.54,0.29l0.66,-0.26l1.12,0.54l0.21,2.4l-3.76,-0.23l-1.81,1.45l-1.74,0.8l-0.62,-0.64l0.22,-2.47l-0.65,-0.49l-0.04,-1.02l-1.36,-0.73l-0.48,0.07l-1.08,1.11l-0.54,1.62l-1.3,-0.06l-0.96,1.26l-0.91,-0.37l-1.63,0.91l-0.24,-0.12l1.28,-3.1l-0.54,-2.38l-1.69,-0.89l0.36,-0.8l2.18,-0.05l1.19,-1.8l0.76,-1.99l2.44,-0.56l-0.28,1.13l0.36,0.91l0.43,0.25Z",
            "name": "Tajikistan"
        },
        "RO": {
            "path": "M487.52,276.99l0.59,0.28l2.89,4.68l-0.18,3.12l0.45,1.64l1.3,0.9l1.37,-0.47l0.76,0.41l0.03,0.46l-0.83,0.52l-0.57,-0.25l-0.55,0.3l-0.63,3.8l-0.98,-0.24l-2.1,-1.28l-2.95,0.81l-1.25,0.86l-3.49,-0.17l-1.88,-0.53l-0.87,0.17l-0.86,-1.54l0.34,-0.35l-0.05,-0.61l-0.62,-0.44l-0.51,0.04l-0.55,0.55l-1.04,-0.73l-0.17,-1.29l-1.58,-1.05l-0.34,-1.15l-0.92,-0.96l1.63,-0.65l2.66,-4.89l2.39,-1.44l2.93,0.39l1.06,0.83l0.47,0.02l0.79,-0.53l1.77,-0.34l0.76,-0.87l0.76,0.0Z",
            "name": "Romania"
        },
        "GW": {
            "path": "M386.23,383.41l-0.29,0.84l0.15,0.61l-2.21,0.6l-0.86,0.96l-1.04,-0.83l-1.09,-0.23l-0.54,-1.07l-0.66,-0.5l2.41,-0.49l4.13,0.1Z",
            "name": "Guinea-Bissau"
        },
        "GT": {
            "path": "M195.08,379.54l-2.48,-0.37l-1.03,-0.46l-1.14,-0.9l0.3,-1.01l-0.24,-0.68l0.96,-1.69l2.98,-0.01l0.4,-0.37l-0.19,-1.29l-1.68,-1.44l0.53,-0.4l0.0,-1.08l3.85,0.02l-0.21,4.61l0.4,0.43l1.48,0.38l-1.5,1.01l-0.34,0.71l0.12,0.57l-2.2,1.98Z",
            "name": "Guatemala"
        },
        "GR": {
            "path": "M487.09,300.31l-0.62,1.67l-0.37,0.23l-2.84,-0.38l-3.03,0.86l-0.18,0.66l1.34,1.43l-0.67,0.28l-1.12,0.0l-1.2,-1.54l-0.65,0.03l-0.52,1.05l0.56,1.95l1.06,1.34l-0.61,0.46l-0.05,0.59l2.53,2.34l0.02,1.02l-1.77,-0.64l-0.5,0.54l0.53,1.16l-1.1,0.23l-0.3,0.52l0.77,2.24l-0.99,0.02l-1.84,-1.22l-1.37,-4.59l-2.21,-3.25l-0.12,-0.67l1.06,-1.44l0.2,-1.06l0.84,-0.7l0.03,-0.55l1.33,-0.24l1.01,-0.71l1.21,0.06l0.67,-0.62l2.26,-0.01l1.8,-0.83l1.85,1.11l2.28,-0.31l0.35,-0.39l0.01,-0.9l0.35,0.26ZM480.49,319.61l0.67,0.51l-0.8,-0.16l0.13,-0.35ZM482.3,320.35l2.74,0.05l0.29,0.4l-2.04,0.15l-0.32,-0.47l-0.67,-0.13Z",
            "name": "Greece"
        },
        "GQ": {
            "path": "M448.79,409.52l0.02,2.22l-4.09,0.0l0.69,-2.27l3.38,0.05Z",
            "name": "Eq. Guinea"
        },
        "GY": {
            "path": "M277.42,399.96l-0.32,1.83l-1.32,0.57l-0.23,0.46l-0.28,2.01l1.11,1.82l0.83,0.19l0.32,1.25l1.13,1.62l-1.21,-0.19l-1.08,0.71l-1.77,0.5l-0.44,0.46l-0.86,-0.09l-1.32,-1.01l-0.77,-2.27l0.36,-1.91l0.68,-1.23l-0.57,-1.17l-0.74,-0.43l0.12,-1.16l-0.9,-0.69l-1.1,0.09l-1.31,-1.48l0.53,-0.72l-0.04,-0.84l1.99,-0.86l0.05,-0.59l-0.71,-0.78l0.14,-0.57l1.66,-1.24l1.36,0.77l1.41,1.5l0.06,1.15l0.37,0.38l0.8,0.05l2.06,1.87Z",
            "name": "Guyana"
        },
        "GE": {
            "path": "M521.61,293.9l5.38,1.03l3.26,1.57l0.84,0.7l1.39,-0.49l2.05,0.63l0.69,1.25l1.15,0.65l-0.2,0.63l1.05,1.54l-1.06,-0.15l-1.81,-0.93l-0.97,0.52l-3.21,0.48l-2.28,-1.55l-2.37,0.06l0.23,-1.11l-0.75,-2.51l-1.45,-1.26l-1.43,-0.44l-0.53,-0.61Z",
            "name": "Georgia"
        },
        "GB": {
            "path": "M412.72,233.04l-2.32,4.44l0.45,0.57l2.5,-0.63l2.22,0.02l-0.56,3.24l-2.22,4.0l0.31,0.59l2.36,0.26l2.34,5.43l1.76,0.84l2.21,6.35l2.96,0.93l-0.25,2.13l-1.17,1.09l-0.09,0.47l0.87,1.82l-1.92,1.78l-3.29,-0.02l-4.09,1.04l-1.02,-0.68l-0.52,0.07l-1.5,1.67l-2.09,-0.4l-1.88,1.4l-0.67,-0.39l3.29,-3.71l2.15,-0.83l0.25,-0.41l-0.33,-0.35l-3.72,-0.64l-0.47,-1.06l2.27,-1.1l0.17,-0.57l-1.29,-2.09l0.39,-2.22l3.35,0.34l0.44,-0.34l0.37,-2.46l-1.77,-2.98l-3.1,-0.89l-0.43,-0.84l0.8,-2.18l-0.82,-1.22l-0.67,0.01l-0.66,1.02l-0.1,-3.02l-1.24,-2.37l0.87,-4.6l1.78,-3.54l1.83,0.33l2.26,-0.3ZM406.3,251.21l-1.06,2.32l-1.53,-0.71l-1.21,0.0l0.4,-1.97l-0.42,-1.89l1.46,-0.13l2.36,2.36Z",
            "name": "United Kingdom"
        },
        "GA": {
            "path": "M453.24,409.42l-0.08,0.98l0.7,1.29l2.36,0.24l-0.98,2.63l1.18,1.79l0.25,1.78l-0.29,1.52l-0.6,0.93l-1.84,-0.09l-1.23,-1.11l-0.66,0.23l-0.15,0.84l-1.42,0.26l-1.02,0.7l-0.11,0.52l0.77,1.35l-1.34,0.98l-3.94,-4.31l-1.44,-2.45l0.06,-0.6l0.54,-0.81l1.05,-3.46l4.17,-0.07l0.4,-0.4l-0.02,-2.66l2.39,0.21l1.25,-0.27Z",
            "name": "Gabon"
        },
        "GN": {
            "path": "M391.8,383.91l0.47,0.81l1.11,-0.32l0.98,0.71l1.07,0.2l2.26,-1.23l0.63,0.44l1.13,1.58l-0.48,1.41l0.8,0.3l-0.08,0.48l0.46,0.69l-0.35,1.37l1.05,2.63l-1.0,0.69l0.03,1.42l-0.72,-0.06l-1.07,1.01l-0.24,-0.27l0.07,-1.11l-1.05,-1.55l-0.49,-0.14l-1.3,0.36l-0.35,-2.01l-1.6,-2.19l-2.0,-0.0l-1.31,0.54l-1.95,2.19l-1.86,-2.2l-1.2,-0.78l-0.3,-1.12l-0.8,-0.86l0.65,-0.73l0.81,-0.03l1.64,-0.8l0.23,-1.88l2.67,0.64l0.89,-0.31l1.21,0.15Z",
            "name": "Guinea"
        },
        "GM": {
            "path": "M379.31,381.18l0.1,-0.36l2.43,-0.07l0.74,-0.62l0.5,-0.03l0.83,0.53l-1.08,-0.33l-1.87,0.91l-1.65,-0.04ZM384.0,380.68l0.95,0.06l0.76,-0.23l-0.59,0.32l-1.11,-0.15Z",
            "name": "Gambia"
        },
        "GL": {
            "path": "M352.9,3.19l15.35,16.28l-4.35,6.99l-9.4,0.81l-13.48,1.81l-0.32,0.54l1.26,3.26l0.46,0.25l8.67,-1.96l7.39,6.05l0.55,-0.04l4.4,-4.95l1.83,5.61l-2.72,9.68l0.18,0.45l0.48,-0.06l6.34,-6.15l11.94,-6.62l7.14,3.24l1.33,6.85l-10.07,11.17l-1.42,3.42l-7.83,2.5l-0.28,0.42l0.35,0.36l5.33,0.65l-2.8,9.83l-2.03,8.69l0.08,13.63l2.84,7.11l-3.6,0.49l-4.12,3.47l-0.05,0.56l4.54,5.53l0.56,8.17l-2.39,0.81l-0.24,0.53l3.05,7.7l-5.05,0.6l-0.27,0.64l2.78,3.54l-0.72,2.75l-3.27,1.26l-3.42,0.02l-0.35,0.59l3.09,5.7l0.03,2.82l-4.32,-2.99l-0.57,0.13l-1.29,2.22l0.14,0.54l3.3,2.0l3.18,4.75l0.88,5.79l-3.85,1.25l-4.86,-7.12l-0.48,-0.14l-0.24,0.44l0.83,5.08l-2.81,3.81l0.3,0.64l9.17,0.61l-6.07,5.68l-6.74,5.42l-7.2,2.3l-2.98,0.14l-2.66,2.67l-3.44,6.75l-5.23,4.25l-1.73,0.27l-7.11,3.08l-2.15,3.69l-0.09,4.21l-1.22,3.58l-4.03,4.36l0.89,4.48l-2.31,8.95l-3.05,0.26l-3.56,-4.0l-5.12,-0.16l-2.26,-2.64l-1.69,-5.21l-4.31,-6.82l-1.24,-3.62l-0.4,-5.4l-3.39,-5.47l0.87,-4.47l-1.62,-2.41l2.37,-7.41l3.81,-2.67l1.01,-3.01l0.52,-5.6l-0.22,-0.39l-0.45,0.06l-4.16,3.58l-1.99,0.9l-2.73,-2.07l-0.16,-4.72l0.9,-3.66l1.94,-0.09l5.03,1.98l0.47,-0.14l-0.03,-0.49l-6.54,-7.53l-0.47,-0.11l-2.25,1.0l-1.7,-1.6l2.69,-7.67l-1.51,-3.12l-4.99,-15.74l-3.17,-3.76l-0.11,-4.29l-6.93,-6.07l-5.4,-0.76l-12.62,1.16l-2.75,-3.16l-4.1,-6.46l6.13,-3.31l4.96,-0.6l0.35,-0.37l-0.29,-0.42l-10.63,-2.99l-5.42,-4.66l0.32,-4.37l9.32,-6.03l9.34,-6.65l0.97,-5.04l-0.15,-0.39l-6.52,-4.97l2.06,-5.6l8.57,-10.89l3.56,-1.73l0.22,-0.41l-1.01,-7.43l5.7,-4.5l7.58,-2.82l7.37,-0.16l2.62,5.4l0.69,0.04l6.35,-9.67l5.63,6.55l3.58,1.5l5.14,5.66l0.54,0.05l0.1,-0.53l-5.89,-9.52l0.33,-7.89l8.21,-11.86l8.55,0.93l0.41,-0.25l3.12,-7.8l8.58,-2.09l19.79,2.78Z",
            "name": "Greenland"
        },
        "GH": {
            "path": "M420.53,387.35l-0.01,0.72l0.96,1.2l0.24,3.75l0.59,0.95l-0.51,2.1l0.19,1.41l1.02,2.22l-6.97,2.85l-1.8,-0.57l0.04,-0.89l-1.02,-2.04l0.61,-2.66l1.07,-2.33l-0.96,-6.5l5.01,0.07l0.94,-0.39l0.61,0.11Z",
            "name": "Ghana"
        },
        "OM": {
            "path": "M568.09,360.37l-0.91,1.71l-1.22,0.04l-0.59,0.78l-0.41,1.53l0.26,1.63l-1.16,0.05l-1.56,0.99l-0.76,1.78l-1.62,0.05l-0.98,0.66l-0.17,1.17l-0.89,0.53l-1.49,-0.18l-2.4,0.95l-2.48,-5.51l7.35,-2.77l1.67,-5.36l-1.12,-2.14l0.05,-0.87l0.67,-1.04l0.07,-1.08l0.91,-0.43l-0.05,-2.14l0.7,-0.01l1.01,1.68l1.51,1.12l3.3,0.87l1.73,2.37l0.81,0.38l-1.23,2.44l-0.99,0.81ZM561.83,347.23l-0.0,-0.01l0.01,-0.01l-0.0,0.02Z",
            "name": "Oman"
        },
        "TN": {
            "path": "M448.18,315.32l-1.08,1.46l-0.02,1.43l0.84,0.93l-0.29,2.3l-1.65,1.83l0.48,1.65l1.41,0.33l0.53,1.2l0.9,0.55l-0.11,1.83l-3.54,2.81l-0.09,2.52l-0.58,0.32l-0.96,-4.72l-1.54,-1.32l-0.15,-0.82l-1.93,-1.68l-0.19,-1.93l1.52,-1.74l0.59,-2.52l-0.38,-3.0l0.43,-1.35l2.45,-1.14l1.29,0.28l-0.06,1.25l0.59,0.37l1.54,-0.84Z",
            "name": "Tunisia"
        },
        "JO": {
            "path": "M518.65,329.54l-5.15,1.67l-0.19,0.64l2.19,2.56l-0.58,0.44l-0.33,0.78l-1.71,0.36l-1.71,1.89l-2.34,-0.38l1.21,-4.6l0.56,-4.33l2.81,0.99l4.45,-2.88l0.8,2.87Z",
            "name": "Jordan"
        },
        "HR": {
            "path": "M455.59,286.98l1.42,0.1l0.57,-0.46l0.74,0.44l0.98,0.07l0.43,-0.4l-0.01,-0.73l0.86,-0.57l0.21,-1.25l1.62,-0.78l2.55,1.93l2.07,0.69l0.88,-0.35l1.09,1.85l-0.56,0.77l-1.05,-0.63l-1.67,0.05l-2.1,-0.57l-1.3,0.07l-0.58,0.54l-0.57,-0.52l-0.65,0.16l-0.47,1.84l1.79,2.75l2.11,2.07l0.81,1.23l-1.27,-1.06l-2.2,-0.99l-1.73,-2.1l0.2,-0.63l-1.06,-1.38l-0.31,-1.43l-1.61,-0.56l-0.49,0.2l-0.45,0.89l-0.26,-1.24Z",
            "name": "Croatia"
        },
        "HT": {
            "path": "M238.65,368.15l-1.58,-0.17l-1.19,0.44l-0.91,-0.56l0.06,-0.21l3.62,0.5ZM239.22,368.07l0.82,-0.54l0.06,-0.62l-1.02,-1.03l0.02,-0.84l-0.3,-0.39l-0.93,-0.35l3.16,0.46l0.02,1.9l-0.48,0.35l-0.07,0.58l0.54,0.74l-1.81,-0.26Z",
            "name": "Haiti"
        },
        "HU": {
            "path": "M462.05,281.37l0.68,-1.93l-0.16,-0.54l0.71,-0.0l0.39,-0.35l0.1,-0.84l1.72,1.0l2.35,-0.43l0.43,-0.77l3.49,-0.92l0.69,-0.91l0.54,-0.15l2.55,1.09l0.69,-0.26l1.03,0.76l0.1,0.55l-1.45,0.83l-2.6,4.82l-1.79,0.61l-1.69,-0.11l-2.72,1.41l-1.83,-0.61l-2.55,-1.92l-0.7,-1.3Z",
            "name": "Hungary"
        },
        "HN": {
            "path": "M199.6,379.29l-1.71,-1.22l0.07,-0.96l3.04,-2.17l2.37,0.29l1.27,-0.09l1.1,-0.53l1.3,0.28l1.14,-0.26l1.37,0.37l2.25,1.39l-2.37,0.95l-1.23,-0.4l-0.88,1.31l-1.28,1.0l-0.43,-0.3l-0.55,0.08l-0.42,0.53l-0.96,0.05l-0.36,0.41l0.04,0.89l-0.52,0.6l-0.3,0.04l-0.3,-0.56l-0.66,-0.32l0.12,-0.68l-0.48,-0.66l-0.63,-0.25l-0.97,0.2Z",
            "name": "Honduras"
        },
        "PR": {
            "path": "M256.17,368.34l-0.27,0.28l-2.83,0.06l-0.07,-0.57l1.95,-0.1l1.23,0.34Z",
            "name": "Puerto Rico"
        },
        "PS": {
            "path": "M509.06,331.4l0.27,-0.17l-0.04,0.09l-0.23,0.08ZM509.37,331.14l-0.03,-0.63l-0.35,-0.18l0.32,-1.21l0.24,0.11l-0.19,1.91Z",
            "name": "Palestine"
        },
        "PT": {
            "path": "M401.85,314.47l-0.65,0.52l-1.11,-0.37l-0.93,0.18l0.29,-1.97l-0.24,-1.95l-1.24,-0.59l-0.47,-0.95l0.18,-1.87l1.01,-1.29l0.69,-3.25l-0.04,-1.52l-0.59,-2.16l1.29,-0.96l0.85,1.5l3.09,-0.33l0.49,1.17l-1.07,1.02l-0.03,2.43l-0.41,0.6l-0.08,1.25l-0.8,0.2l-0.26,0.57l0.93,1.79l-0.64,1.95l0.78,1.16l-1.12,1.72l0.08,1.13Z",
            "name": "Portugal"
        },
        "PY": {
            "path": "M274.9,466.41l0.74,1.55l-0.16,3.55l0.32,0.41l2.64,0.52l1.11,-0.48l1.4,0.6l0.36,0.62l0.53,3.53l1.27,0.41l0.98,-0.39l0.52,0.28l-0.0,1.23l-1.21,5.54l-2.09,1.99l-1.8,0.41l-4.72,-1.03l2.21,-3.81l-0.32,-1.54l-2.77,-1.32l-3.03,-2.01l-2.07,-0.45l-4.34,-4.19l0.91,-2.99l0.08,-1.45l1.07,-2.09l4.13,-0.73l2.18,0.04l2.06,1.2l0.03,0.61Z",
            "name": "Paraguay"
        },
        "PA": {
            "path": "M213.79,393.56l0.26,-1.53l-0.36,-0.26l-0.01,-0.5l0.44,-0.1l0.93,1.4l1.26,0.03l0.77,0.5l1.38,-0.24l2.51,-1.12l0.86,-0.72l3.45,0.85l1.4,1.19l0.41,1.75l-0.21,0.34l-0.53,-0.12l-0.47,0.29l-0.16,0.6l-0.68,-1.28l0.45,-0.49l-0.19,-0.66l-0.47,-0.13l-0.54,-0.84l-1.5,-0.75l-1.1,0.16l-0.75,0.99l-1.62,0.84l-0.18,0.96l0.85,0.97l-0.58,0.45l-0.69,0.08l-0.34,-1.18l-1.27,0.03l-0.71,-1.05l-2.59,-0.47Z",
            "name": "Panama"
        },
        "PG": {
            "path": "M808.58,428.76l2.54,2.57l-0.13,0.26l-0.33,0.12l-0.87,-0.78l-1.22,-2.17ZM801.41,422.94l0.51,0.29l0.26,0.27l-0.49,-0.36l-0.28,-0.21ZM803.17,424.48l0.59,0.5l0.08,1.06l-0.29,-0.91l-0.38,-0.65ZM796.68,428.31l0.52,0.75l1.43,-0.19l2.27,-1.82l-0.01,-1.43l1.12,0.16l-0.04,1.1l-0.7,1.28l-1.12,0.18l-0.62,0.79l-2.46,1.11l-1.17,-0.0l-3.08,-1.25l3.41,0.0l0.45,-0.68ZM789.15,433.47l2.31,1.81l1.59,2.62l1.34,0.14l-0.06,0.66l0.31,0.43l1.06,0.24l0.06,0.66l2.25,1.06l-1.21,0.13l-0.72,-0.64l-4.56,-0.65l-3.22,-2.89l-1.49,-2.35l-3.27,-1.11l-2.38,0.72l-1.59,0.86l-0.2,0.42l0.27,1.56l-1.55,0.69l-1.36,-0.4l-2.21,-0.09l-0.08,-15.44l8.39,2.93l2.95,2.4l0.6,1.64l4.02,1.5l0.31,0.69l-1.76,0.21l-0.33,0.52l0.55,1.68Z",
            "name": "Papua New Guinea"
        },
        "PE": {
            "path": "M244.97,425.11l-1.26,-0.07l-0.57,0.42l-1.93,0.45l-2.98,1.76l-0.36,1.36l-0.58,0.8l0.12,1.37l-1.24,0.6l-0.22,1.22l-0.62,0.84l1.04,2.28l1.28,1.44l-0.41,0.85l0.32,0.57l1.48,0.13l1.16,1.37l2.21,0.07l1.63,-1.08l-0.13,3.04l0.3,0.4l1.14,0.29l1.31,-0.35l1.9,3.62l-0.48,0.86l-0.17,3.89l-0.94,1.6l0.35,0.76l-0.48,1.08l0.98,2.0l-2.1,3.89l-0.97,0.51l-2.17,-1.31l-0.39,-1.18l-4.95,-2.62l-4.46,-2.82l-1.85,-1.53l-0.91,-1.87l0.3,-0.97l-2.11,-3.36l-4.82,-9.74l-1.04,-1.2l-0.87,-1.95l-3.4,-2.49l0.58,-1.18l-1.13,-2.23l0.66,-1.5l1.45,-1.15l-0.6,0.99l0.07,0.92l0.47,0.36l1.74,0.03l0.97,1.17l0.54,0.07l1.42,-1.03l0.6,-1.84l1.42,-2.02l3.04,-1.04l2.73,-2.62l0.86,-1.74l-0.1,-1.87l1.44,1.02l0.9,1.25l1.06,0.59l1.7,2.73l1.86,0.31l1.45,-0.61l0.96,0.39l1.36,-0.19l1.45,0.89l-1.4,2.21l0.31,0.61l0.59,0.05l0.47,0.5Z",
            "name": "Peru"
        },
        "PK": {
            "path": "M615.13,319.81l-1.88,2.0l-2.59,0.42l-3.73,-0.73l-1.6,1.43l-0.09,0.4l1.77,4.7l1.73,1.32l-1.73,1.38l-0.11,2.26l-2.34,2.8l-1.59,2.95l-2.46,2.8l-3.03,-0.07l-2.76,2.96l0.05,0.59l1.51,1.16l0.26,1.98l1.44,1.55l0.37,1.77l-5.02,-0.01l-1.78,1.76l-1.41,-0.53l-0.76,-1.94l-2.27,-2.23l-11.61,0.89l0.72,-2.47l3.43,-1.37l0.25,-0.43l-0.21,-1.29l-1.2,-0.67l-0.28,-2.57l-2.29,-1.2l-1.32,-2.09l2.85,1.0l2.62,-0.4l1.42,0.35l0.77,-0.59l1.71,0.2l3.25,-1.2l0.26,-0.36l0.08,-2.33l1.19,-1.41l1.68,0.0l0.58,-0.87l1.59,-0.32l1.2,0.17l0.98,-0.83l0.01,-1.99l0.94,-1.58l1.48,-0.71l0.19,-0.54l-0.69,-1.39l2.06,-0.12l0.69,-1.09l-0.03,-1.23l1.12,-1.15l-0.18,-1.88l-0.5,-1.14l1.17,-1.09l5.42,-0.99l2.59,-0.89l1.6,1.26l0.97,2.53l3.5,1.06Z",
            "name": "Pakistan"
        },
        "PH": {
            "path": "M737.01,393.71l0.39,2.98l-0.44,1.19l-0.55,-1.53l-0.67,-0.14l-1.17,1.28l0.65,2.1l-0.42,0.69l-2.48,-1.23l-0.58,-1.49l0.66,-1.03l-0.1,-0.53l-1.59,-1.19l-0.56,0.08l-0.65,0.87l-1.23,0.0l-1.58,0.97l0.83,-1.81l2.56,-1.42l0.65,0.84l0.45,0.13l1.9,-0.69l0.56,-1.12l1.5,-0.06l0.38,-0.43l-0.09,-1.2l1.21,0.72l0.36,2.03ZM733.59,386.41l0.05,0.76l0.08,0.27l-0.8,-0.42l-0.18,-0.72l0.85,0.12ZM734.08,385.93l-0.12,-1.13l-1.01,-1.29l1.36,0.03l0.53,0.73l0.51,2.06l-1.27,-0.4ZM733.76,387.52l0.39,0.99l-0.32,0.15l-0.07,-1.14ZM724.65,368.03l1.46,0.71l0.72,-0.31l-0.32,1.19l0.79,1.74l-0.57,1.88l-1.53,1.06l-0.39,2.27l0.56,2.06l1.63,0.57l1.16,-0.27l2.72,1.24l-0.19,1.1l0.77,0.85l-0.08,0.37l-1.4,-0.9l-0.88,-1.29l-0.66,0.0l-0.38,0.55l-1.6,-1.32l-2.15,0.36l-0.87,-0.4l0.07,-0.62l0.66,-0.56l-0.01,-0.62l-0.75,-0.6l-0.72,0.44l-0.73,-0.88l-0.39,-2.53l0.32,0.27l0.66,-0.28l0.26,-4.04l0.71,-2.06l1.14,0.0ZM731.03,388.72l-0.88,0.85l-1.19,1.95l-1.05,-1.2l0.93,-1.11l0.32,-1.48l0.52,-0.06l-0.27,1.16l0.22,0.45l0.49,-0.12l1.0,-1.32l-0.08,0.86ZM726.83,385.61l0.83,0.38l1.17,-0.0l-0.02,0.48l-2.0,1.41l0.02,-2.28ZM724.81,381.88l-0.39,1.29l-1.42,-1.98l1.2,0.05l0.6,0.64ZM716.54,391.7l1.12,-0.97l0.03,-0.03l-0.28,0.38l-0.87,0.63ZM719.21,388.91l0.04,-0.07l0.8,-1.54l0.16,0.76l-1.01,0.85Z",
            "name": "Philippines"
        },
        "PL": {
            "path": "M468.45,271.45l-1.1,-1.82l-1.87,-0.39l-0.48,-1.25l-1.72,-0.44l-0.47,0.25l-0.21,0.56l-0.72,-0.43l0.12,-0.82l-0.32,-0.45l-1.74,-0.32l-1.05,-1.13l-0.96,-2.4l0.17,-1.46l-0.62,-2.19l-0.82,-1.37l0.61,-1.22l-0.51,-1.88l1.46,-1.07l6.88,-3.37l2.12,0.62l0.15,0.81l0.38,0.33l5.51,0.54l4.53,-0.06l1.06,0.38l0.5,1.09l0.14,1.93l0.66,1.51l-0.01,1.34l-1.3,0.73l-0.17,0.5l0.74,1.83l0.07,1.86l1.22,3.37l-0.19,0.78l-1.23,0.53l-2.27,3.23l0.24,1.15l-1.99,-1.23l-2.01,0.46l-1.38,-0.32l-1.2,0.67l-1.05,-1.13l-1.17,0.27Z",
            "name": "Poland"
        },
        "ZM": {
            "path": "M481.47,443.27l0.39,0.31l2.52,0.15l0.99,1.18l2.01,0.36l1.4,-0.64l0.69,1.18l1.78,0.33l1.84,2.38l2.24,0.19l0.4,-0.43l-0.21,-2.77l-0.62,-0.3l-0.48,0.33l-1.98,-1.18l0.72,-5.32l-0.51,-1.19l0.58,-1.31l3.68,-0.62l0.26,0.64l1.21,0.63l0.9,-0.22l2.16,0.67l1.33,0.71l1.07,1.02l0.56,1.89l-0.88,2.72l0.43,2.1l-0.73,0.88l-0.76,2.39l0.6,0.68l-6.61,1.85l-0.29,0.44l0.19,1.47l-1.69,0.36l-1.43,1.04l-0.38,0.89l-0.87,0.26l-3.48,3.75l-4.15,-0.54l-1.52,-1.01l-1.77,-0.14l-1.82,0.53l-3.04,-3.46l0.11,-7.69l4.82,0.03l0.39,-0.49l-0.18,-0.76l0.33,-0.84l-0.4,-1.37l0.24,-1.06Z",
            "name": "Zambia"
        },
        "EH": {
            "path": "M384.42,359.7l0.26,-0.83l1.06,-1.32l0.8,-3.63l3.38,-2.88l0.69,-1.87l0.06,5.03l-1.98,0.21l-0.94,1.63l0.39,3.66l-3.71,-0.01ZM392.0,347.13l0.72,-1.91l1.77,-0.25l2.09,0.35l0.96,-0.65l1.27,-0.07l-0.0,2.65l-6.8,-0.12Z",
            "name": "W. Sahara"
        },
        "EE": {
            "path": "M485.7,228.2l2.62,0.79l2.44,-0.11l0.18,0.41l-1.67,2.62l0.66,4.56l-0.85,1.18l-1.72,-0.01l-3.21,-2.27l-1.85,0.58l0.22,-2.14l-0.62,-0.38l-0.64,0.42l-1.26,-1.35l-0.18,-2.36l2.87,-1.24l3.02,-0.69Z",
            "name": "Estonia"
        },
        "EG": {
            "path": "M492.06,333.38l1.47,0.44l2.95,-1.74l2.03,-0.22l1.52,0.32l0.6,1.27l0.7,0.04l0.41,-0.68l1.8,0.61l1.95,0.17l1.04,-0.54l1.43,4.34l-2.03,4.78l-1.66,-1.85l-1.76,-4.05l-0.65,-0.12l-0.35,0.67l1.04,3.03l3.44,7.26l1.77,3.16l2.04,2.76l-0.37,0.54l0.22,2.06l2.73,2.28l-28.43,0.0l0.0,-19.72l-0.73,-2.31l0.6,-1.66l-0.33,-1.32l0.69,-1.07l3.05,-0.04l4.82,1.62Z",
            "name": "Egypt"
        },
        "ZA": {
            "path": "M467.15,505.21l-0.13,-2.11l-0.69,-1.7l0.71,-0.7l-0.12,-2.46l-4.57,-8.67l0.78,-0.92l0.59,0.47l0.69,1.37l2.83,0.75l1.5,-0.27l2.24,-1.46l0.18,-9.94l1.35,2.39l-0.21,1.57l0.61,1.24l0.41,0.2l1.79,-0.29l2.61,-2.16l0.69,-1.37l0.95,-0.5l2.19,1.08l2.04,0.14l1.78,-0.67l0.85,-2.2l1.38,-0.34l1.59,-2.85l2.15,-1.95l3.41,-1.92l1.99,0.46l1.02,-0.28l0.99,0.2l1.75,5.47l-0.37,3.39l-0.82,-0.24l-1.0,0.47l-0.87,1.75l-0.04,1.2l1.98,1.91l1.47,-0.3l0.7,-1.24l1.09,0.01l-0.77,3.89l-0.58,1.15l-2.2,1.88l-3.17,5.02l-2.8,3.01l-3.57,3.07l-2.53,1.12l-1.22,0.15l-0.51,0.75l-1.17,-0.34l-1.4,0.54l-2.58,-0.55l-1.62,0.35l-1.19,-0.11l-2.54,1.18l-2.1,0.47l-1.6,1.15l-0.84,0.05l-0.93,-0.95l-0.93,-0.16l-0.97,-1.21l-0.25,0.05ZM491.46,495.56l0.62,-0.98l1.48,-0.62l1.18,-2.31l-0.07,-0.48l-1.99,-1.77l-1.68,0.59l-1.42,1.19l-1.34,1.82l0.02,0.49l1.88,2.23l1.32,-0.17Z",
            "name": "South Africa"
        },
        "EC": {
            "path": "M231.86,415.43l0.29,1.59l-0.69,1.45l-2.61,2.51l-3.13,1.11l-1.53,2.18l-0.49,1.68l-1.0,0.73l-1.02,-1.11l-1.78,-0.16l0.67,-1.15l-0.24,-0.86l1.25,-2.13l-0.54,-1.09l-0.67,-0.08l-0.72,0.87l-0.87,-0.64l0.35,-0.69l-0.36,-1.96l0.81,-0.51l0.45,-1.51l0.92,-1.57l-0.07,-0.97l2.65,-1.33l2.75,1.35l0.77,1.05l2.12,0.35l0.76,-0.32l1.96,1.21Z",
            "name": "Ecuador"
        },
        "IT": {
            "path": "M451.58,282.14l3.5,1.08l-0.22,1.43l0.34,1.0l-1.55,-0.28l-2.22,1.64l0.13,1.69l-0.27,1.22l0.82,1.78l2.39,1.84l1.3,2.87l2.79,2.73l2.05,0.1l0.25,0.31l-0.43,0.41l0.09,0.64l4.05,2.19l2.2,2.0l-0.17,0.42l-1.16,-1.17l-2.18,-0.54l-0.45,0.21l-1.05,2.12l0.14,0.51l1.59,1.06l-0.2,1.15l-1.06,0.36l-1.25,2.57l-0.36,0.08l0.0,-0.41l1.01,-2.65l-1.73,-3.5l-1.12,-0.56l-0.67,-1.29l-1.72,-0.75l-1.01,-1.25l-2.01,-0.35l-4.11,-3.59l-1.63,-1.87l-1.03,-3.6l-3.56,-1.55l-1.3,0.58l-1.68,1.6l0.17,-0.9l-0.27,-0.45l-1.14,-0.37l-0.55,-2.31l0.78,-1.37l-0.66,-1.44l0.81,0.44l1.41,-0.27l1.08,-0.94l0.53,0.39l1.19,-0.11l0.75,-1.38l1.51,0.37l1.39,-0.65l0.34,-1.31l1.06,0.36l0.5,-0.22l0.21,-0.51l1.95,-0.5l0.42,0.96ZM459.21,311.54l-0.67,1.87l0.33,1.12l-0.32,0.99l-1.48,-0.91l-4.52,-1.83l0.21,-0.97l2.67,0.25l3.8,-0.53ZM443.92,301.94l1.19,1.86l-0.3,3.74l-1.07,-0.01l-0.75,0.79l-0.53,-0.48l-0.1,-3.76l-0.41,-1.41l1.07,0.0l0.9,-0.74Z",
            "name": "Italy"
        },
        "VN": {
            "path": "M690.58,359.66l-2.72,1.89l-2.09,2.52l-0.63,1.98l4.31,6.55l2.32,1.68l1.44,1.97l1.11,4.65l-0.32,4.28l-1.93,1.55l-2.84,1.62l-2.11,2.17l-2.73,2.07l-0.59,-1.06l0.63,-1.54l-0.12,-0.47l-1.34,-1.05l1.51,-0.72l2.55,-0.18l0.3,-0.63l-0.82,-1.16l4.0,-2.09l0.31,-3.08l-0.57,-1.79l0.42,-2.69l-0.73,-1.99l-1.86,-1.79l-3.63,-5.38l-2.73,-1.5l0.37,-0.5l1.5,-0.65l0.21,-0.52l-0.97,-2.33l-0.37,-0.25l-2.83,-0.02l-2.25,-4.02l0.84,-0.42l4.39,-0.3l2.06,-1.35l1.15,0.91l1.88,0.41l-0.18,1.55l1.36,1.19l1.69,0.47Z",
            "name": "Vietnam"
        },
        "SB": {
            "path": "M826.68,441.55l-0.6,0.09l-0.2,-0.34l0.37,0.15l0.44,0.09ZM824.18,437.32l-0.26,-0.31l-0.31,-0.91l0.03,0.0l0.54,1.22ZM823.04,439.28l-1.66,-0.22l-0.2,-0.53l1.16,0.28l0.7,0.47ZM819.26,434.58l1.17,0.66l0.03,0.04l-0.82,-0.45l-0.38,-0.25Z",
            "name": "Solomon Is."
        },
        "ET": {
            "path": "M516.04,377.54l1.1,0.85l1.63,-0.46l0.68,0.48l1.63,0.03l2.01,0.96l1.73,1.68l1.64,2.1l-1.52,2.06l0.16,1.73l0.39,0.38l2.05,0.01l-0.36,1.03l2.86,3.6l8.32,3.09l1.32,0.02l-6.33,6.76l-3.1,0.11l-2.36,1.77l-1.47,0.04l-0.86,0.79l-1.38,-0.0l-1.32,-0.81l-2.29,1.05l-0.76,0.98l-3.29,-0.41l-3.07,-2.07l-1.8,-0.07l-0.62,-0.6l0.0,-1.24l-0.28,-0.38l-1.15,-0.37l-1.4,-2.6l-1.19,-0.69l-0.47,-1.01l-1.27,-1.23l-1.16,-0.22l0.43,-0.73l1.45,-0.28l0.41,-0.95l-0.03,-2.22l0.68,-2.45l1.05,-0.63l1.43,-3.08l1.57,-1.38l1.02,-2.53l0.35,-1.9l2.52,0.47l0.44,-0.24l0.58,-1.44Z",
            "name": "Ethiopia"
        },
        "SO": {
            "path": "M525.13,418.38l-1.13,-1.57l-0.03,-8.86l2.66,-3.38l1.67,-0.13l2.13,-1.69l3.41,-0.23l7.08,-7.57l2.91,-3.71l0.08,-4.85l2.98,-0.67l1.24,-0.87l0.45,-0.0l-0.2,3.03l-1.21,3.64l-2.73,6.0l-2.13,3.66l-5.03,6.17l-8.56,6.4l-2.78,3.08l-0.8,1.56Z",
            "name": "Somalia"
        },
        "ZW": {
            "path": "M498.91,471.53l-1.1,-0.22l-0.92,0.29l-2.09,-0.46l-1.49,-1.14l-1.89,-0.44l-0.62,-1.44l-0.01,-0.86l-0.3,-0.38l-0.97,-0.26l-2.72,-2.8l-1.93,-3.41l3.83,0.46l3.74,-3.89l1.08,-0.44l0.26,-0.78l1.25,-0.91l1.41,-0.26l0.5,0.9l1.99,-0.05l1.72,1.19l1.11,0.18l1.05,0.68l0.01,3.05l-0.59,3.84l0.38,0.87l-0.23,1.26l-0.39,0.36l-0.64,1.86l-2.43,2.82Z",
            "name": "Zimbabwe"
        },
        "ES": {
            "path": "M415.99,294.24l1.08,1.32l4.61,1.55l1.08,-0.64l2.58,1.41l2.72,-0.33l0.09,1.34l-2.15,2.02l-3.1,0.68l-0.31,0.31l-0.2,1.01l-1.54,1.87l-0.97,2.65l0.86,1.9l-1.34,1.4l-0.49,1.86l-1.88,0.7l-1.66,2.25l-5.35,-0.01l-1.81,1.17l-0.88,1.06l-0.86,-0.18l-0.79,-0.9l-0.68,-1.73l-2.37,-0.68l-0.12,-0.6l1.21,-2.0l-0.78,-1.19l0.62,-1.89l-0.8,-1.8l0.89,-0.51l0.09,-1.41l0.42,-0.63l0.03,-2.39l1.01,-0.78l0.12,-0.47l-1.04,-1.93l-1.46,-0.12l-0.63,0.42l-1.04,0.0l-0.53,-1.39l-0.55,-0.22l-1.31,0.73l0.07,-1.41l-0.87,-1.4l3.08,-2.16l2.98,0.6l3.32,-0.02l2.62,0.58l6.01,-0.06Z",
            "name": "Spain"
        },
        "ER": {
            "path": "M520.38,375.96l3.42,2.46l3.5,3.81l0.85,0.55l-0.95,-0.01l-3.51,-3.92l-2.33,-1.16l-1.73,-0.07l-0.91,-0.51l-1.25,0.52l-1.34,-1.03l-0.62,0.17l-0.66,1.63l-2.34,-0.43l-0.18,-0.68l1.29,-5.37l0.62,-0.63l1.95,-0.54l0.87,-1.03l1.17,2.45l0.68,2.36l1.49,1.45Z",
            "name": "Eritrea"
        },
        "ME": {
            "path": "M468.91,298.06l-1.24,-1.13l0.5,-2.11l0.88,-0.81l2.29,1.73l-0.52,0.71l-0.77,-0.3l-1.14,1.91Z",
            "name": "Montenegro"
        },
        "MD": {
            "path": "M491.9,285.98l-0.28,-1.04l0.25,-1.54l-0.15,-1.8l-3.32,-5.2l1.4,-0.31l1.71,1.08l1.07,0.18l0.88,0.78l0.03,1.44l0.78,0.52l0.33,1.38l0.81,0.94l0.0,0.67l-1.14,-0.08l-0.7,-0.47l-0.52,0.29l-0.06,0.94l-1.08,2.21Z",
            "name": "Moldova"
        },
        "MG": {
            "path": "M545.91,449.15l0.4,3.06l0.63,1.22l-0.21,1.04l-0.56,-0.81l-0.69,-0.01l-0.47,0.77l0.41,2.15l-0.18,0.89l-0.72,0.79l-0.15,2.18l-5.77,18.57l-3.92,1.7l-3.12,-1.54l-0.6,-1.26l-0.19,-2.48l-0.86,-2.12l-0.21,-1.83l0.39,-1.67l1.21,-0.76l0.01,-0.79l1.19,-2.08l0.23,-1.69l-1.06,-3.05l-0.19,-2.26l0.81,-1.36l0.32,-1.49l4.63,-1.23l3.44,-3.04l0.85,-1.42l-0.09,-0.71l0.78,-0.04l1.38,-1.79l0.13,-1.65l0.45,-0.62l1.16,1.7l0.59,1.62Z",
            "name": "Madagascar"
        },
        "MA": {
            "path": "M378.77,359.44l0.06,-0.63l0.93,-0.75l0.82,-1.41l-0.09,-1.07l0.79,-1.77l1.31,-1.64l0.95,-0.61l0.66,-1.61l0.09,-1.52l0.81,-1.54l1.72,-1.11l1.55,-2.81l1.16,-1.0l2.44,-0.41l1.94,-1.91l1.31,-0.82l2.09,-2.4l-0.51,-3.84l1.25,-3.95l1.5,-1.88l4.46,-2.74l2.37,-4.82l1.43,0.01l1.7,1.31l2.31,-0.21l3.46,0.7l0.81,1.67l0.16,1.84l0.86,3.17l0.57,0.63l-0.27,0.69l-3.05,0.46l-1.26,1.11l-1.33,0.24l-0.33,0.37l-0.09,1.91l-2.69,1.06l-1.07,1.5l-1.89,0.72l-2.58,0.47l-4.04,2.12l-0.53,4.86l-1.16,0.07l-0.92,0.64l-1.96,-0.36l-2.42,0.56l-0.74,1.99l-0.86,0.41l-1.14,3.39l-3.53,3.11l-0.81,3.66l-0.96,1.14l-0.29,0.84l-4.94,0.19Z",
            "name": "Morocco"
        },
        "UZ": {
            "path": "M598.64,298.24l-1.64,1.79l0.06,0.61l1.85,1.26l1.99,-0.71l2.27,1.34l-2.58,1.91l-2.57,-0.24l-0.2,-0.5l0.47,-1.39l-0.47,-0.52l-3.35,0.77l-2.1,3.89l-1.86,-0.14l-0.39,0.23l-0.65,1.43l0.21,0.53l1.65,0.69l0.47,2.05l-1.21,2.74l-1.54,-0.54l-1.11,-0.04l0.05,-1.53l-0.25,-0.38l-3.3,-1.35l-2.56,-1.53l-4.4,-3.69l-1.33,-3.48l-1.1,-0.68l-2.57,0.15l-0.7,-0.5l-0.46,-2.81l-3.37,-1.79l-0.46,0.06l-2.07,1.94l-2.09,1.14l-0.2,0.45l0.29,1.2l-1.92,0.03l-0.09,-11.97l5.98,-1.95l6.18,4.04l2.35,3.08l7.41,-0.61l2.72,2.28l-0.18,3.21l0.39,0.42l0.89,0.02l0.45,2.42l0.38,0.33l2.93,0.1l0.96,1.58l1.29,-0.25l1.05,-2.28l3.18,-2.25l1.24,-0.54Z",
            "name": "Uzbekistan"
        },
        "MM": {
            "path": "M673.9,359.64l-1.97,1.62l-0.57,0.98l-1.4,0.62l-1.36,1.08l-1.99,0.36l-1.08,2.72l-0.91,0.41l-0.19,0.55l1.21,2.31l2.52,3.49l-0.79,1.95l-0.74,0.41l-0.17,0.52l0.65,1.39l1.61,1.98l0.25,2.61l0.9,2.15l-1.92,3.6l0.68,-2.27l-0.81,-1.75l0.19,-2.68l-1.05,-1.54l-1.24,-6.25l-1.12,-2.29l-0.61,-0.13l-4.33,3.06l-2.39,-0.66l0.77,-2.89l-0.52,-2.65l-1.92,-3.02l0.25,-0.78l-0.29,-0.51l-1.33,-0.31l-1.61,-1.97l-0.1,-1.35l0.82,-0.23l0.04,-1.7l1.03,-0.53l0.21,-0.44l-0.23,-0.99l0.54,-0.98l0.08,-2.3l1.45,0.46l0.48,-0.2l1.12,-2.26l0.16,-1.4l1.34,-2.25l-0.01,-1.58l2.89,-1.73l1.62,0.46l0.51,-0.43l-0.17,-1.48l0.65,-0.39l0.07,-1.08l0.77,-0.11l0.71,1.41l1.06,0.72l-0.03,4.05l-2.38,2.46l-0.3,3.26l0.47,0.43l2.27,-0.39l0.51,2.15l1.47,0.69l-0.61,1.87l0.19,0.47l2.97,1.52l1.64,-0.56l0.02,0.35Z",
            "name": "Myanmar"
        },
        "ML": {
            "path": "M392.61,383.9l-0.19,-2.39l-0.99,-0.88l-0.44,-1.31l-0.09,-1.3l0.81,-0.59l0.35,-1.26l2.37,0.66l1.31,-0.48l0.86,0.15l0.66,-0.57l9.83,-0.04l0.38,-0.28l0.56,-1.82l-0.44,-0.66l-2.35,-22.51l3.26,-0.04l16.7,11.72l0.74,1.34l2.5,1.11l0.02,1.42l0.44,0.39l2.34,-0.22l0.01,5.49l-1.28,1.64l-0.26,1.51l-5.31,0.58l-1.08,0.93l-2.9,0.1l-0.87,-0.48l-1.38,0.37l-2.4,1.1l-0.6,0.88l-1.86,1.1l-0.43,0.71l-0.79,0.4l-1.44,-0.21l-0.81,0.84l-0.34,1.65l-1.91,2.04l-0.06,1.04l-0.67,1.23l0.13,1.17l-0.97,0.39l-0.23,-0.65l-0.52,-0.24l-1.35,0.4l-0.34,0.55l-2.69,-0.29l-0.37,-0.36l-0.02,-0.91l-0.65,-0.35l0.45,-0.65l-0.03,-0.52l-2.12,-2.46l-0.76,-0.01l-2.0,1.17l-0.78,-0.15l-0.8,-0.67l-1.21,0.23Z",
            "name": "Mali"
        },
        "MN": {
            "path": "M676.61,267.85l3.78,1.95l5.69,-1.19l2.35,0.48l2.34,1.79l1.81,2.09l2.28,-0.04l3.11,0.62l2.49,-0.96l3.42,-0.7l3.51,-2.62l1.21,0.34l1.56,1.35l2.31,-0.25l-2.72,6.05l0.64,1.85l0.5,0.22l1.31,-0.44l2.36,0.55l2.04,-1.29l1.73,1.03l2.1,2.39l-0.15,0.72l-1.72,-0.34l-3.79,0.54l-1.88,1.14l-1.76,2.29l-3.71,1.35l-2.44,1.82l-3.81,-0.99l-0.44,0.19l-1.31,2.27l1.07,2.53l-1.56,1.04l-1.74,1.78l-2.78,1.14l-3.78,0.14l-4.05,1.18l-2.75,1.69l-1.16,-0.94l-2.93,0.0l-3.61,-2.0l-2.59,-0.55l-3.41,0.46l-5.11,-0.75l-2.62,0.07l-1.31,-1.82l-1.4,-3.4l-1.47,-0.37l-3.14,-2.22l-6.15,-1.06l-0.73,-1.26l0.89,-4.37l-1.73,-2.97l-3.7,-1.54l-1.96,-1.86l-0.53,-2.16l2.39,-0.63l4.75,-3.33l3.59,-1.75l2.18,1.16l2.44,0.05l1.83,1.83l2.46,0.14l3.58,0.97l0.4,-0.12l2.43,-2.72l0.07,-0.43l-0.93,-2.14l2.28,-3.66l2.59,1.52l4.94,1.41l0.44,2.74Z",
            "name": "Mongolia"
        },
        "MK": {
            "path": "M472.81,299.6l0.49,-0.78l3.56,-0.8l1.01,0.87l0.14,1.71l-0.66,0.59l-1.14,-0.05l-1.14,0.75l-1.37,0.24l-0.79,-0.61l-0.3,-1.19l0.2,-0.73Z",
            "name": "Macedonia"
        },
        "MW": {
            "path": "M505.5,439.25l0.85,1.96l0.15,2.88l-0.69,1.66l0.72,1.81l0.06,1.29l0.49,0.64l0.07,1.07l0.4,0.55l0.8,-0.23l0.55,0.62l0.7,-0.21l0.34,0.6l0.19,2.98l-1.04,0.63l-0.53,1.27l-1.11,-1.1l-0.16,-1.59l0.51,-1.33l-0.32,-1.32l-0.99,-0.65l-0.82,0.12l-2.36,-1.66l0.63,-1.99l0.82,-1.18l-0.46,-2.03l0.9,-2.88l-0.95,-2.53l0.97,0.19l0.29,0.41Z",
            "name": "Malawi"
        },
        "MR": {
            "path": "M407.4,349.79l-2.62,0.03l-0.39,0.44l2.42,23.13l0.37,0.43l-0.39,1.27l-9.75,0.04l-0.56,0.54l-0.91,-0.11l-1.27,0.46l-1.61,-0.66l-0.98,0.03l-0.36,0.29l-0.38,1.37l-0.42,0.24l-2.93,-3.44l-2.96,-1.55l-1.62,-0.03l-1.27,0.55l-1.12,-0.2l-0.65,0.4l-0.08,-0.51l0.68,-1.31l0.31,-2.47l-0.57,-3.99l0.23,-1.25l-0.68,-1.53l-1.16,-1.05l0.25,-0.42l9.58,0.02l0.4,-0.45l-0.46,-3.79l0.47,-1.08l2.11,-0.22l0.36,-0.4l-0.08,-6.64l7.81,0.14l0.41,-0.4l0.01,-3.47l7.8,5.59Z",
            "name": "Mauritania"
        },
        "UG": {
            "path": "M498.55,406.22l0.7,-0.46l1.65,0.5l1.96,-0.57l1.7,0.01l1.45,-0.98l0.91,1.33l1.33,3.95l-2.57,4.03l-1.46,-0.4l-2.54,0.91l-1.37,1.61l-0.01,0.81l-2.42,-0.01l-2.26,1.01l-0.17,-1.59l0.58,-1.04l0.14,-1.94l1.37,-2.28l1.78,-1.58l-0.17,-0.65l-0.72,-0.24l0.13,-2.43Z",
            "name": "Uganda"
        },
        "MY": {
            "path": "M717.48,403.36l-1.39,0.65l-2.12,-0.41l-2.88,-0.0l-0.38,0.28l-0.84,2.75l-0.99,0.96l-1.21,3.29l-1.73,0.45l-2.45,-0.68l-1.39,0.31l-1.33,1.15l-1.59,-0.14l-1.41,0.44l-1.44,-1.19l-0.18,-0.73l1.34,0.53l1.93,-0.47l0.75,-2.23l4.02,-1.03l2.75,-3.21l0.82,0.94l0.64,-0.05l0.4,-0.65l0.96,0.06l0.42,-0.36l0.24,-2.69l1.81,-1.65l1.21,-1.87l0.63,-0.01l1.07,1.06l0.34,1.28l3.44,1.35l-0.06,0.35l-1.37,0.1l-0.35,0.54l0.32,0.88ZM673.68,399.48l0.17,1.1l0.47,0.33l1.65,-0.3l0.87,-0.94l1.61,1.52l0.98,1.57l-0.12,2.81l0.41,2.29l0.95,0.9l0.88,2.44l-1.27,0.12l-5.1,-3.68l-0.34,-1.29l-1.37,-1.59l-0.33,-1.97l-0.88,-1.4l0.25,-1.68l-0.46,-1.06l1.63,0.84Z",
            "name": "Malaysia"
        },
        "MX": {
            "path": "M133.1,328.46l0.22,0.49l9.64,3.54l6.96,-0.02l0.4,-0.4l0.0,-0.81l3.76,0.0l3.55,3.11l1.4,2.99l1.51,1.09l2.08,0.86l0.48,-0.14l1.46,-2.1l1.72,-0.05l1.59,1.03l2.06,3.53l1.47,1.63l1.26,3.28l2.18,1.06l2.27,0.6l-1.19,3.88l-0.42,5.19l1.79,5.01l1.62,1.94l0.61,1.55l1.2,1.45l2.55,0.67l1.38,1.13l7.54,-1.93l1.86,-1.32l1.14,-4.4l4.1,-1.24l3.56,-0.11l0.32,0.31l-0.06,0.97l-1.26,1.49l-0.67,1.74l0.38,0.71l-0.73,2.32l-0.49,-0.3l-1.0,0.08l-1.0,1.41l-0.47,-0.11l-0.53,0.47l-4.26,-0.02l-0.4,0.4l-0.0,1.08l-1.1,0.26l0.1,0.44l1.82,1.46l0.56,0.94l-3.19,0.21l-1.21,2.12l0.24,0.73l-0.2,0.45l-2.24,-2.21l-1.45,-0.94l-2.22,-0.7l-1.52,0.23l-3.06,1.18l-10.55,-3.9l-2.86,-2.0l-3.78,-0.94l-1.08,-1.21l-2.62,-1.46l-1.18,-1.57l-0.39,-0.85l0.66,-0.64l-0.19,-0.55l0.53,-0.77l0.01,-0.93l-2.0,-3.91l-2.21,-2.71l-2.53,-2.16l-1.19,-1.68l-2.2,-1.21l-0.31,-0.45l0.34,-1.56l-0.21,-0.44l-1.23,-0.63l-1.36,-1.26l-0.59,-1.87l-1.53,-0.48l-2.44,-2.68l-0.15,-0.94l-1.33,-2.14l-0.84,-2.11l-0.15,-1.39l-1.81,-1.16l-0.98,0.05l-1.31,-0.74l-0.58,0.22l-0.4,1.19l0.71,3.95l3.51,4.09l0.28,0.83l0.53,0.26l0.41,1.51l1.33,1.8l1.58,1.46l0.8,2.49l1.43,2.51l0.13,1.37l0.37,0.36l1.03,0.08l1.68,2.38l-0.84,0.79l-0.66,-1.55l-1.68,-1.59l-2.91,-1.94l0.06,-1.89l-0.53,-1.73l-2.91,-2.11l-0.56,0.08l-1.95,-1.14l-0.92,-1.02l0.72,-0.08l0.93,-1.06l0.08,-1.82l-1.93,-2.04l-1.46,-0.81l-3.76,-8.06l4.87,-0.45Z",
            "name": "Mexico"
        },
        "IL": {
            "path": "M507.77,331.27l0.39,-0.81l0.2,0.43l-0.34,1.09l0.52,0.43l0.68,-0.23l-0.86,3.84l-1.16,-3.52l0.6,-0.8l-0.03,-0.44ZM508.72,328.43l0.38,-1.13l0.64,0.0l0.52,-0.54l0.02,0.67l-0.52,1.01l-0.55,-0.25l-0.5,0.24Z",
            "name": "Israel"
        },
        "FR": {
            "path": "M444.48,298.15l-0.65,2.02l-0.56,-0.34l-0.51,-1.98l0.42,-1.04l0.99,-0.8l0.31,2.13ZM429.62,268.54l1.78,1.88l1.48,-0.14l2.08,1.68l1.36,0.33l1.23,0.98l3.1,0.6l-1.08,2.26l-0.3,2.52l-0.41,0.38l-0.92,-0.28l-0.51,0.42l0.07,0.77l-1.82,2.19l-0.04,1.65l0.57,0.37l0.85,-0.41l0.62,1.14l-0.04,1.13l0.61,1.11l-0.78,1.22l0.65,2.72l1.29,0.62l-0.19,1.03l-2.02,1.73l-4.75,-0.9l-3.84,1.13l-0.52,2.09l-2.47,0.37l-2.7,-1.47l-1.18,0.64l-4.28,-1.44l-0.76,-1.02l1.21,-2.03l0.41,-7.31l-2.58,-3.82l-1.89,-1.93l-3.74,-1.44l-0.2,-2.16l2.82,-0.72l4.11,0.96l0.48,-0.46l-0.62,-3.38l1.98,1.12l5.83,-3.02l0.91,-3.28l1.57,-0.58l0.25,0.97l1.34,0.35l1.05,1.43ZM289.01,408.29l-0.81,0.8l-0.78,0.12l-0.5,-0.66l-0.56,-0.1l-0.91,0.6l-0.46,-0.22l1.09,-2.96l-0.96,-1.77l-0.17,-1.49l1.07,-1.77l2.32,0.75l2.51,2.01l0.3,0.74l-2.14,3.96Z",
            "name": "France"
        },
        "XS": {
            "path": "M531.15,388.78l1.52,0.12l5.13,-0.96l5.3,-1.49l-0.01,4.43l-2.67,3.4l-1.85,0.01l-8.04,-2.95l-2.55,-3.19l1.12,-1.73l2.04,2.35Z",
            "name": "Somaliland"
        },
        "FI": {
            "path": "M492.16,172.43l-0.28,5.17l3.67,4.26l-2.21,4.98l2.86,6.98l-1.64,5.01l2.21,4.51l-0.98,3.55l3.63,4.02l-0.84,2.48l-7.53,9.52l-4.5,0.42l-4.38,1.84l-3.74,0.97l-1.3,-2.46l-2.36,-1.68l0.53,-4.89l-1.2,-4.86l1.14,-3.04l2.23,-3.46l5.68,-6.22l1.8,-1.58l-0.4,-2.8l-3.4,-2.81l-0.79,-2.25l-0.16,-10.13l-7.02,-7.77l0.96,-1.19l2.47,3.3l3.5,-0.17l2.57,1.6l0.53,-0.09l2.46,-3.23l1.19,-5.07l3.49,-2.23l2.82,2.55l-1.01,4.77Z",
            "name": "Finland"
        },
        "FJ": {
            "path": "M869.95,457.1l-1.21,0.42l-0.08,-0.24l2.98,-1.23l-0.15,0.44l-1.54,0.62ZM867.58,459.4l0.43,0.38l-0.27,0.91l-1.24,0.29l-1.04,-0.25l-0.14,-0.69l0.64,-0.59l0.92,0.26l0.7,-0.31Z",
            "name": "Fiji"
        },
        "FK": {
            "path": "M274.37,564.69l1.48,1.33l-0.53,1.0l-2.96,1.07l-0.95,-1.2l-0.57,-0.05l-1.79,1.54l-0.79,-1.16l2.52,-2.03l1.9,0.9l0.46,-0.09l1.23,-1.32Z",
            "name": "Falkland Is."
        },
        "NI": {
            "path": "M202.32,382.47l0.82,-0.18l1.03,-1.02l-0.04,-0.89l0.68,-0.0l0.63,-0.54l0.97,0.23l1.53,-1.28l0.58,-1.0l1.17,0.35l2.41,-0.95l0.13,1.34l-0.81,1.96l0.1,2.77l-0.36,0.38l-0.11,1.76l-0.47,0.81l0.18,1.15l-1.73,-0.86l-0.71,0.27l-1.47,-0.6l-0.52,0.16l-4.02,-3.85Z",
            "name": "Nicaragua"
        },
        "NL": {
            "path": "M430.16,264.22l0.76,-0.72l2.14,-5.88l3.19,-1.63l1.7,0.1l0.35,1.07l-0.6,3.64l-0.51,1.24l-1.24,0.0l-0.4,0.44l0.34,3.35l-2.18,-2.14l-0.43,-0.11l-2.22,0.8l-0.89,-0.15Z",
            "name": "Netherlands"
        },
        "NO": {
            "path": "M491.42,157.32l7.17,5.11l-2.71,1.67l-0.13,0.55l2.55,4.24l-3.9,2.61l-1.31,0.42l0.79,-4.7l-3.21,-2.91l-0.48,-0.04l-4.06,2.73l-1.21,5.15l-2.11,2.72l-2.64,-1.54l-3.04,0.32l-2.65,-3.53l-0.63,-0.01l-1.41,1.75l-1.41,0.26l-0.33,0.36l-0.33,4.08l-4.27,-0.99l-0.48,0.32l-0.6,3.44l-2.07,-0.02l-0.38,0.27l-4.15,11.7l-3.88,8.48l0.84,2.18l-0.71,1.86l-2.2,-0.09l-0.4,0.28l-1.64,5.41l0.15,7.19l1.58,2.74l-0.8,5.79l-2.04,3.34l-0.83,2.09l-1.27,-2.26l-0.65,-0.07l-4.87,5.52l-3.05,1.02l-3.16,-2.22l-0.86,-5.06l-0.78,-11.7l2.19,-3.29l6.55,-4.59l5.02,-5.96l4.64,-8.4l6.0,-12.26l11.0,-13.83l5.32,-3.11l3.99,0.38l0.38,-0.19l3.69,-6.04l4.48,0.3l4.3,-1.47ZM484.42,59.58l4.68,4.94l-3.51,7.19l-6.97,1.55l-7.03,-2.18l-0.42,-3.6l-0.37,-0.35l-3.35,-0.23l-2.51,-6.12l7.16,-3.9l3.42,3.43l0.63,-0.09l2.33,-4.19l5.93,3.56ZM482.22,93.35l-4.99,4.27l-3.84,-2.35l1.56,-3.06l-1.38,-3.53l4.4,-2.11l0.89,4.13l3.36,2.65ZM466.32,69.71l8.02,9.81l-6.13,5.05l-1.37,8.88l-2.22,2.36l-1.15,9.08l-2.49,0.35l-5.08,-6.44l2.14,-3.9l-0.08,-0.49l-3.69,-3.4l-4.82,-10.44l-1.89,-10.23l6.16,-4.58l1.22,4.4l0.41,0.29l3.57,-0.19l0.37,-0.32l0.9,-4.57l3.14,-0.43l3.02,4.76Z",
            "name": "Norway"
        },
        "NA": {
            "path": "M474.4,460.84l-1.11,0.05l-0.38,0.4l-0.07,9.11l-2.09,0.08l-0.38,0.4l-0.0,18.09l-1.98,1.29l-1.16,0.18l-2.43,-0.69l-0.48,-1.18l-0.99,-0.78l-0.55,0.05l-0.9,1.05l-1.52,-1.75l-0.94,-1.97l-1.99,-8.9l-0.06,-3.23l-0.33,-1.56l-2.3,-3.43l-1.91,-4.94l-1.96,-2.48l-0.12,-1.61l2.33,-0.8l1.43,0.07l1.82,1.15l10.23,-0.26l1.84,1.26l6.01,0.37ZM474.58,460.83l6.59,-1.65l1.91,0.41l-1.71,0.41l-1.31,0.85l-1.12,-0.95l-4.36,0.94Z",
            "name": "Namibia"
        },
        "VU": {
            "path": "M839.03,452.86l0.23,1.16l-0.44,0.03l-0.2,-1.47l0.42,0.28Z",
            "name": "Vanuatu"
        },
        "NC": {
            "path": "M838.79,471.67l-0.34,0.23l-2.9,-1.8l-3.27,-3.48l1.65,0.85l4.86,4.19Z",
            "name": "New Caledonia"
        },
        "NE": {
            "path": "M454.74,355.83l1.33,1.41l0.49,0.07l1.26,-0.72l0.53,3.62l0.94,0.85l0.17,0.94l0.82,0.72l-0.45,0.98l-0.96,5.37l-0.13,3.28l-3.05,2.34l-1.22,3.61l1.02,1.25l-0.0,1.48l0.39,0.4l1.13,0.04l-0.1,0.49l-0.45,0.09l-0.35,0.68l-1.47,-2.44l-0.86,-0.29l-2.09,1.38l-1.73,-0.67l-1.45,-0.17l-0.85,0.35l-1.36,-0.07l-1.64,1.1l-1.06,0.05l-2.94,-1.29l-1.44,0.59l-1.01,-0.03l-0.97,-0.95l-2.7,-0.99l-2.69,0.31l-0.87,0.65l-0.46,1.62l-0.74,1.17l-0.12,1.55l-1.57,-1.1l-1.31,0.24l0.03,-0.82l-0.32,-0.41l-2.59,-0.52l-0.15,-1.17l-1.36,-1.62l-0.29,-1.01l0.13,-0.85l1.29,-0.08l1.08,-0.93l3.31,-0.22l2.22,-0.41l0.32,-0.34l0.2,-1.5l1.39,-1.91l-0.01,-5.78l3.37,-1.15l7.24,-5.24l8.41,-5.07l3.69,1.09Z",
            "name": "Niger"
        },
        "NG": {
            "path": "M456.32,383.7l0.64,0.66l-0.28,1.06l-2.11,2.02l-2.03,5.2l-1.37,1.16l-1.15,3.19l-1.33,0.66l-1.46,-0.97l-1.21,0.16l-1.38,1.37l-0.91,0.24l-1.79,4.07l-2.33,0.81l-1.11,-0.07l-0.86,0.51l-1.71,-0.05l-1.19,-1.39l-0.89,-1.9l-1.77,-1.66l-3.95,-0.08l0.07,-5.23l0.42,-1.44l1.95,-2.32l-0.14,-0.91l0.43,-1.18l-0.53,-1.42l0.25,-2.95l0.72,-1.08l0.32,-1.35l0.46,-0.39l2.47,-0.28l2.34,0.89l1.15,1.03l1.28,0.04l1.22,-0.59l3.03,1.28l1.5,-0.14l1.36,-1.01l1.32,0.07l0.82,-0.35l3.45,0.81l1.82,-1.34l1.84,2.7l0.66,0.16Z",
            "name": "Nigeria"
        },
        "NZ": {
            "path": "M857.8,512.11l1.85,3.38l0.45,0.2l0.3,-0.38l0.03,-1.36l0.38,0.29l0.56,2.51l2.02,1.03l1.81,0.29l1.59,-1.16l0.7,0.2l-1.16,4.01l-1.98,0.12l-0.73,1.27l0.21,1.25l-2.44,4.45l-1.47,1.02l-0.42,-0.65l-0.66,-0.3l1.25,-2.35l-0.81,-2.16l-2.64,-1.38l0.04,-0.7l1.82,-1.29l0.42,-2.46l-0.15,-2.29l-0.96,-2.0l-0.05,-0.75l-3.11,-3.94l-0.82,-1.69l1.57,1.56l1.76,0.72l0.66,2.55ZM853.83,527.42l0.57,1.38l0.61,0.17l1.4,-1.06l0.46,0.9l0.0,1.2l-2.48,3.93l-1.26,1.36l-0.06,0.47l0.6,1.08l-1.47,0.09l-2.32,1.54l-2.04,5.78l-3.02,2.49l-2.03,-0.07l-1.72,-1.2l-2.46,-0.23l-0.29,-0.92l1.25,-2.46l3.05,-3.36l1.62,-0.67l4.01,-3.18l1.56,-1.87l1.08,-2.44l1.01,-1.01l0.35,-1.73l1.23,-1.07l0.35,0.88Z",
            "name": "New Zealand"
        },
        "NP": {
            "path": "M641.15,342.42l-0.0,3.36l-1.74,0.04l-4.8,-0.9l-1.59,-1.45l-3.36,-0.36l-7.66,-3.88l0.81,-2.23l2.33,-1.79l1.77,0.78l2.49,1.85l1.38,0.43l0.99,1.42l1.89,0.55l1.99,1.22l5.5,0.95Z",
            "name": "Nepal"
        },
        "XK": {
            "path": "M472.78,298.18l-1.1,-1.47l0.98,-0.9l0.29,-0.94l2.0,1.84l-0.4,0.85l-1.77,0.62Z",
            "name": "Kosovo"
        },
        "CI": {
            "path": "M407.4,389.11l0.86,0.42l0.56,0.9l1.13,0.54l1.19,-0.61l0.97,-0.08l1.42,0.54l0.6,3.25l-1.03,2.09l-0.65,2.85l1.06,2.33l-0.06,0.53l-2.54,-0.47l-1.66,0.03l-3.06,0.47l-4.11,1.61l0.32,-3.06l-1.18,-1.31l-1.32,-0.67l0.42,-0.86l-0.2,-1.4l0.5,-0.68l0.01,-1.59l0.84,-0.33l0.26,-0.5l-1.15,-3.02l0.12,-0.51l0.51,-0.25l0.66,0.31l1.93,0.02l0.67,-0.72l0.71,-0.14l0.25,0.7l0.57,0.22l1.4,-0.61Z",
            "name": "C\u00f4te d'Ivoire"
        },
        "CH": {
            "path": "M444.61,279.47l-0.29,1.12l0.16,0.5l1.13,0.67l1.03,0.12l-0.12,0.88l-0.79,0.44l-1.7,-0.42l-0.47,0.25l-0.46,1.23l-0.72,0.07l-0.3,-0.39l-0.58,-0.06l-1.31,1.14l-0.93,0.13l-0.87,-0.62l-0.82,-1.51l-0.52,-0.17l-0.61,0.29l0.02,-0.85l1.73,-1.95l0.07,-0.65l0.96,0.08l0.57,-0.53l1.97,0.02l0.67,-0.71l2.16,0.92Z",
            "name": "Switzerland"
        },
        "CO": {
            "path": "M242.07,384.75l-1.7,0.59l-0.59,1.19l-1.7,1.7l-0.37,1.94l-0.67,1.44l0.31,0.57l1.03,0.14l0.25,0.91l0.57,0.65l-0.04,2.35l1.64,1.42l3.16,-0.24l1.26,0.28l1.67,2.06l0.41,0.13l4.09,-0.39l0.45,0.22l-0.92,1.95l-0.2,1.8l0.52,1.83l0.75,1.05l-1.12,1.1l0.07,0.63l0.84,0.51l0.74,1.3l-0.39,-0.45l-0.59,-0.01l-0.71,0.74l-4.71,-0.05l-0.4,0.41l0.03,1.57l0.33,0.39l1.11,0.2l-1.68,0.4l-0.29,0.38l-0.01,1.82l1.16,1.14l0.34,1.25l-1.05,7.05l-1.04,-0.87l1.26,-1.99l-0.13,-0.56l-2.18,-1.23l-1.38,0.2l-1.14,-0.38l-1.27,0.61l-1.55,-0.26l-1.38,-2.46l-1.23,-0.75l-0.85,-1.2l-1.67,-1.19l-0.86,0.13l-2.11,-1.32l-1.01,0.31l-1.8,-0.29l-0.52,-0.91l-3.09,-1.68l0.77,-0.52l-0.1,-1.12l0.41,-0.64l1.34,-0.32l2.0,-2.88l-0.11,-0.57l-0.67,-0.43l0.39,-1.38l-0.52,-2.11l0.49,-0.83l-0.4,-2.13l-0.97,-1.36l0.17,-0.67l0.86,-0.08l0.47,-0.75l-0.46,-1.63l1.41,-0.07l1.8,-1.7l0.93,-0.24l0.3,-0.38l0.45,-2.78l1.22,-1.01l1.44,-0.04l0.45,-0.5l1.91,0.12l2.93,-1.85l1.15,-1.15l0.91,0.47l-0.26,0.45Z",
            "name": "Colombia"
        },
        "CN": {
            "path": "M740.22,270.81l4.55,1.5l2.81,2.58l0.98,3.43l0.38,0.29l3.8,0.0l2.34,-1.51l3.31,-0.89l-1.01,2.59l-1.01,1.46l-0.85,3.95l-1.53,3.16l-2.73,-0.57l-2.43,1.3l-0.19,0.43l0.65,2.95l-0.32,3.68l-0.94,0.07l-0.37,0.4l0.01,0.58l-0.89,-1.11l-0.67,0.07l-0.92,1.77l-3.72,1.4l-0.25,0.46l0.28,1.25l-1.5,-0.08l-1.08,-0.96l-0.59,0.06l-1.68,2.31l-2.7,1.74l-2.03,2.08l-3.39,0.92l-1.93,1.54l-1.22,0.4l0.42,-0.81l-0.43,-1.03l1.81,-2.01l0.02,-0.51l-1.32,-1.73l-0.51,-0.11l-2.25,1.21l-2.83,2.28l-1.5,2.02l-2.27,0.14l-1.56,1.64l-0.04,0.47l1.32,2.16l2.01,0.63l0.3,1.47l1.98,0.92l0.42,-0.05l2.6,-2.09l1.99,1.1l1.5,0.12l0.24,0.97l-3.39,0.94l-1.12,1.61l-2.5,1.64l-1.29,2.15l0.13,0.55l2.57,1.6l0.97,2.9l3.17,4.94l-0.03,1.8l-1.36,0.69l-0.19,0.5l0.6,1.55l1.41,0.95l-0.9,4.05l-1.43,0.4l-3.85,6.72l-2.28,3.23l-6.78,4.72l-2.73,0.3l-1.45,1.07l-0.61,-0.62l-0.56,-0.01l-1.36,1.29l-3.39,1.31l-2.61,0.41l-1.1,2.86l-0.81,0.09l-0.5,-1.47l0.5,-0.88l-0.25,-0.59l-3.36,-0.86l-1.3,0.41l-2.3,-0.64l-0.95,-0.87l0.34,-1.33l-0.3,-0.49l-2.19,-0.48l-1.13,-0.96l-0.48,-0.03l-2.06,1.4l-4.28,0.28l-2.76,1.08l-0.28,0.43l0.32,2.61l-0.59,-0.03l-0.19,-1.39l-0.56,-0.34l-1.67,0.72l-2.47,-1.26l0.63,-1.94l-0.25,-0.5l-1.37,-0.46l-0.55,-2.3l-0.46,-0.3l-2.13,0.37l0.24,-2.6l2.39,-2.48l0.03,-4.49l-1.19,-0.94l-0.79,-1.57l-0.41,-0.22l-1.4,0.2l-2.0,-0.32l0.48,-1.12l-1.17,-1.78l-0.56,-0.11l-1.62,1.1l-2.25,-0.6l-2.89,1.82l-2.25,2.08l-1.74,0.31l-1.17,-0.74l-3.32,-0.68l-1.48,0.83l-1.04,1.32l-0.12,-1.23l-0.54,-0.34l-1.44,0.56l-5.54,-0.9l-1.98,-1.22l-1.89,-0.56l-0.99,-1.42l-1.34,-0.39l-2.55,-1.88l-2.01,-0.89l-1.21,0.59l-5.57,-3.64l-0.54,-2.5l1.19,0.26l0.49,-0.37l0.08,-1.52l-0.98,-1.65l0.16,-2.6l-2.69,-3.58l-4.12,-1.33l-0.68,-2.18l-1.91,-1.6l-0.38,-0.78l-0.5,-3.27l-1.52,-0.73l-0.7,0.14l-0.49,-2.31l0.57,-0.59l-0.13,-0.89l2.06,-1.34l1.59,-0.59l2.55,0.42l0.43,-0.23l0.85,-1.9l2.99,-0.37l1.11,-1.41l4.04,-1.97l0.39,-0.97l-0.17,-1.67l1.48,-0.77l0.19,-0.49l-2.1,-5.65l4.54,-1.3l1.38,-0.84l1.88,-6.37l4.59,1.12l0.4,-0.13l1.49,-1.91l0.11,-3.42l2.01,-0.45l1.83,-2.43l0.45,-0.15l0.67,2.44l2.23,2.08l3.44,1.35l1.58,2.72l-0.93,4.08l0.95,1.84l6.54,1.28l2.95,2.14l1.48,0.4l1.07,3.0l1.52,2.13l3.06,0.09l5.13,0.76l3.38,-0.46l2.34,0.48l3.65,2.02l3.07,0.05l0.99,0.93l0.48,0.05l2.87,-1.78l3.94,-1.15l3.84,-0.16l3.06,-1.29l1.77,-1.81l1.72,-1.14l0.16,-0.47l-1.12,-2.36l1.05,-1.82l4.03,0.9l2.45,-1.85l3.76,-1.36l1.97,-2.46l1.63,-0.96l3.49,-0.47l1.91,0.4l0.47,-0.31l0.18,-1.65l-2.27,-2.59l-2.11,-1.27l-0.44,0.02l-1.78,1.27l-2.29,-0.54l-1.28,0.37l-0.43,-1.02l2.76,-6.16l3.03,1.25l3.53,-2.45l0.15,-1.96l2.18,-4.08l1.47,-1.55l-0.03,-2.26l-1.16,-1.03l1.66,-1.66l2.96,-0.72l3.21,-0.11l3.62,1.21l2.05,1.43l3.31,8.17l0.92,3.82ZM696.92,366.89l-1.87,1.1l-1.63,-0.65l-0.06,-1.84l1.03,-1.01l2.58,-0.7l1.15,0.05l0.31,0.56l-0.98,1.09l-0.53,1.4Z",
            "name": "China"
        },
        "CM": {
            "path": "M457.92,387.33l1.06,1.92l-1.4,0.16l-1.05,-0.23l-0.45,0.23l-0.54,1.2l0.08,0.45l1.48,1.48l1.05,0.45l1.01,2.47l-1.52,3.0l-0.68,0.68l-0.13,3.69l2.38,3.84l1.09,0.8l0.24,2.48l-3.67,-1.14l-11.27,-0.13l0.23,-1.79l-0.98,-1.66l-1.19,-0.54l-0.44,-0.97l-0.6,-0.42l1.71,-4.28l0.75,-0.13l1.38,-1.37l0.65,-0.03l1.71,0.99l1.93,-1.12l1.14,-3.2l1.38,-1.17l2.0,-5.16l2.17,-2.15l0.3,-1.65l-0.86,-0.89l0.18,-0.37l0.8,1.32l0.07,3.24Z",
            "name": "Cameroon"
        },
        "CL": {
            "path": "M246.67,568.71l-3.34,2.4l-0.55,3.89l-0.62,0.06l-2.66,-1.3l-2.82,-2.86l-3.06,-2.32l-0.71,-2.33l0.65,-2.52l-1.22,-2.56l-0.31,-6.43l1.02,-3.46l2.58,-2.79l-0.19,-0.66l-3.24,-0.91l2.11,-2.91l0.78,-5.35l2.3,1.02l0.56,-0.29l1.31,-7.14l-0.2,-0.42l-1.68,-0.9l-0.58,0.28l-0.7,3.81l-0.82,-0.25l1.58,-10.59l1.15,-2.43l-0.71,-3.1l-0.18,-3.15l1.02,-0.35l3.26,-9.88l1.07,-4.5l-0.56,-4.47l0.74,-2.47l-0.29,-3.45l1.46,-3.5l2.04,-17.19l-0.67,-7.94l1.04,-0.54l0.54,-0.92l0.79,1.16l0.32,1.82l1.25,1.19l-0.69,2.61l1.33,2.98l0.97,3.7l0.47,0.29l1.49,-0.31l0.11,0.25l-0.77,2.53l-2.57,1.28l-0.22,0.37l0.08,4.51l-0.47,0.8l0.58,1.25l-1.59,1.59l-1.68,2.74l-0.89,2.6l0.21,2.85l-1.49,2.9l1.12,5.38l0.64,0.64l-0.01,2.49l-1.39,2.89l0.02,2.59l-1.89,2.18l0.02,2.98l0.7,2.85l-1.44,1.23l-1.26,6.27l0.39,3.95l-0.98,0.94l0.58,3.94l1.04,1.3l-0.69,1.22l0.14,0.54l1.01,0.61l0.18,0.88l-1.04,0.92l0.26,2.03l-0.89,4.69l-1.31,3.11l0.25,2.01l-0.73,2.21l-1.97,1.93l0.28,4.31l0.88,1.43l1.6,0.0l-0.01,2.68l1.04,2.36l6.16,0.76ZM248.69,570.67l0.0,9.15l0.4,0.4l3.58,0.07l-0.53,1.14l-1.93,1.23l-2.45,-0.46l-1.9,-1.34l-2.54,-0.61l-5.59,-4.63l-2.57,-3.5l4.23,3.11l3.32,1.53l0.5,-0.14l1.29,-1.95l0.83,-2.85l2.04,-1.51l1.3,0.35Z",
            "name": "Chile"
        },
        "XC": {
            "path": "M504.86,320.38l0.39,0.01l0.27,-0.07l-0.3,0.35l-0.36,-0.28Z",
            "name": "N. Cyprus"
        },
        "CA": {
            "path": "M280.04,266.9l-1.66,3.44l0.11,0.49l0.5,-0.0l1.44,-1.15l1.05,0.52l-0.63,0.98l0.16,0.58l2.22,1.06l1.38,-0.83l1.97,0.93l-0.68,2.46l0.52,0.48l1.3,-0.48l0.99,3.78l-0.93,2.87l-0.77,0.09l-1.25,-0.52l0.49,-2.7l-0.87,-0.87l-0.52,0.06l-2.77,3.06l-0.43,-0.04l1.14,-1.12l-0.14,-0.66l-2.4,-0.9l-7.4,0.09l-0.2,-0.58l1.35,-1.14l0.02,-0.6l-0.8,-0.75l1.91,-2.12l2.57,-6.16l1.48,-2.16l1.98,-1.26l0.5,0.08l-1.6,3.09ZM68.32,168.48l4.07,1.51l3.89,3.35l2.78,0.73l0.42,-0.15l2.16,-2.88l2.84,-2.09l3.89,0.75l3.71,-3.14l3.71,-1.66l1.54,2.72l0.62,0.1l1.99,-1.93l0.48,-2.97l1.15,0.53l4.17,6.45l0.67,0.01l2.68,-3.95l0.27,4.33l0.54,0.35l3.08,-1.17l1.05,-2.04l2.63,0.36l3.83,3.0l5.86,2.58l3.48,1.19l2.44,-0.39l2.95,3.04l-3.23,3.06l0.16,0.67l4.53,1.42l6.92,-0.76l1.96,-1.04l2.47,3.65l0.64,0.03l2.72,-3.33l-0.01,-0.52l-2.34,-2.61l1.33,-1.93l2.87,-0.3l1.88,-0.64l1.8,1.47l2.48,3.63l0.41,0.17l2.63,-0.5l4.62,2.96l3.83,-1.03l3.59,0.16l0.42,-0.43l-0.27,-3.92l1.8,-0.96l3.49,2.08l-0.01,6.03l0.34,0.4l0.44,-0.28l1.5,-4.95l1.69,0.15l0.43,-0.33l1.13,-6.89l-2.74,-4.66l-2.86,-2.89l0.19,-8.09l2.75,-5.34l2.86,1.11l2.44,3.36l3.31,8.33l-2.12,3.42l0.22,0.59l4.38,1.37l-0.01,6.85l0.29,0.39l0.45,-0.18l3.02,-4.91l2.56,3.84l-0.68,5.11l2.42,4.42l0.7,0.0l2.61,-4.74l1.86,-5.93l0.15,-7.44l3.08,0.48l3.57,1.03l3.18,3.35l0.14,3.2l-1.81,3.53l1.71,3.82l-0.29,2.9l-4.72,4.27l-3.21,0.89l-2.43,-1.77l-0.62,0.23l-0.74,3.09l-2.4,5.08l-0.73,2.58l-2.76,3.73l-3.68,0.5l-2.07,2.63l-0.15,3.32l-2.86,0.78l-3.1,4.45l-2.74,5.98l-0.98,4.09l-0.14,5.74l0.31,0.4l3.44,0.75l2.25,7.78l0.48,0.26l3.37,-0.88l4.49,1.92l2.43,1.68l1.92,2.2l3.09,1.21l2.61,1.84l6.65,0.69l-0.36,3.49l0.8,4.33l1.81,4.63l3.81,3.97l0.51,0.05l2.08,-1.51l1.37,-4.39l-1.31,-6.63l-1.54,-2.05l3.69,-1.91l2.84,-3.1l1.49,-3.43l-0.24,-3.19l-1.7,-3.97l-2.92,-3.49l2.86,-5.19l-1.09,-4.55l-0.81,-7.95l1.39,-0.99l4.1,1.4l2.62,0.54l2.14,-1.31l5.09,4.62l1.07,2.2l4.09,0.36l-0.06,3.98l0.83,6.25l2.42,1.04l1.74,2.7l0.57,0.11l3.63,-2.66l2.51,-5.54l1.22,-1.73l7.63,15.44l-0.95,2.7l0.14,0.45l3.3,2.51l2.23,2.5l4.1,1.23l1.45,1.25l0.96,3.51l2.08,0.8l0.87,1.37l0.17,4.34l-3.4,2.77l-4.22,1.5l-3.06,3.15l-4.04,0.61l-5.35,-0.82l-6.4,0.25l-2.32,2.87l-3.25,1.78l-6.48,8.38l-0.03,0.47l0.45,0.17l2.33,-0.73l3.98,-4.83l5.12,-3.08l3.49,-0.36l1.77,1.49l-2.18,2.58l0.8,4.03l1.01,2.99l3.5,1.85l4.14,-0.52l2.14,-3.2l0.24,1.68l1.22,0.99l-2.64,2.0l-5.49,2.09l-2.54,1.45l-2.73,2.43l-1.38,-0.18l-0.08,-2.39l4.16,-2.8l0.16,-0.45l-0.39,-0.28l-4.01,0.12l-2.61,0.4l-1.4,-1.73l-0.12,-5.1l-1.11,-1.06l-1.83,0.44l-0.65,-0.76l-0.63,0.03l-1.91,2.77l-0.81,2.9l-0.81,1.48l-1.66,0.64l-0.47,0.87l-8.32,0.08l-1.21,0.71l-2.33,2.23l-0.72,-0.14l-1.36,1.08l-1.12,-0.54l-4.75,1.43l-0.9,1.32l0.21,0.59l1.7,0.22l0.05,0.22l-1.84,0.36l-1.85,0.9l-1.19,-0.29l-0.92,0.15l-2.95,2.0l-0.71,-0.11l0.32,-0.68l1.12,-1.78l1.72,-1.33l0.09,-2.6l1.16,-2.28l0.48,0.59l2.03,0.48l0.42,-0.16l0.82,-1.6l-2.66,-4.02l-2.29,-0.71l-5.63,-0.81l-0.4,-0.66l-0.86,0.2l0.27,-0.64l-0.21,-0.52l-0.72,-0.32l0.32,-1.06l-0.91,-1.28l0.34,-0.82l-0.29,-0.55l-2.6,-0.52l-0.76,-1.93l-0.95,-0.76l-1.67,-0.09l-2.67,-0.67l-1.13,1.4l-1.48,0.69l-0.85,1.24l-2.8,-0.89l-2.1,0.45l-2.38,-1.13l-4.23,-0.83l-0.58,-0.48l-0.42,-1.96l-0.4,-0.32l-0.85,0.02l-0.39,0.4l-0.01,1.07l-69.11,-0.01l-6.5,-5.37l-4.5,-1.66l-1.29,-3.28l0.34,-2.39l-0.2,-0.41l-3.03,-1.66l-0.52,-3.39l-2.92,-2.97l-0.05,-1.94l1.39,-2.23l-0.07,-2.8l-4.34,-3.13l-4.08,-8.55l-4.01,-4.22l-1.31,-2.51l-0.57,-0.15l-2.51,1.6l-2.18,2.42l-3.81,-5.1l-2.44,-1.39l-2.26,-0.18l0.03,-55.45ZM265.75,272.87l-0.72,0.04l-3.11,-1.15l-1.72,-1.35l3.19,0.89l2.36,1.57ZM249.33,12.09l6.65,1.61l5.26,2.56l4.43,5.22l-0.1,4.84l-5.98,7.79l-6.13,3.67l-2.26,3.84l0.35,0.6l4.74,-0.08l-5.52,9.28l-4.14,4.52l-4.23,11.87l-5.01,2.26l-1.69,2.82l-7.4,1.42l-0.32,0.34l0.22,0.41l3.02,1.48l-1.51,2.34l2.02,6.18l-2.26,4.04l-3.94,3.58l-1.16,4.49l-3.53,3.68l0.35,2.54l0.44,0.34l3.85,-0.39l0.04,2.09l-6.37,6.12l-6.3,-2.81l-7.5,1.6l-3.7,-1.27l-4.4,-0.52l-0.28,-4.64l4.41,-2.41l0.2,-0.41l-1.19,-8.1l1.06,-0.58l6.49,4.94l0.49,-0.0l0.12,-0.48l-3.41,-7.64l-3.92,-2.37l1.85,-4.46l4.51,-3.29l0.71,-4.65l-3.55,-5.6l-0.98,-6.84l6.22,0.58l1.88,1.51l0.57,-0.08l3.91,-5.41l-0.21,-0.62l-5.64,-1.76l-8.71,0.93l-4.24,-5.03l-2.06,-6.44l-2.92,-4.92l-0.52,-5.65l3.5,-3.22l2.94,-0.62l4.91,-2.99l3.67,-6.97l2.62,0.86l2.63,5.2l0.41,0.22l0.34,-0.32l1.88,-10.36l3.17,-3.13l4.37,-2.24l7.32,-0.83l1.2,2.03l0.52,0.16l7.1,-3.49l10.71,2.64ZM203.82,140.61l1.98,5.56l0.38,0.26l0.37,-0.27l2.27,-6.74l5.84,-3.34l4.06,8.5l-0.37,5.31l0.57,0.39l4.95,-2.38l2.28,-3.11l5.2,3.94l3.34,3.74l0.31,3.32l0.54,0.34l4.32,-1.65l2.44,4.64l6.13,3.12l2.09,2.87l2.25,6.4l-4.35,3.07l-0.01,0.65l5.9,4.44l3.95,1.47l3.53,5.87l3.81,0.57l-0.69,3.91l-4.11,6.58l-2.68,-2.22l-3.9,-5.85l-0.43,-0.17l-3.24,0.78l-0.3,0.35l-0.24,3.8l2.63,3.5l3.42,2.75l0.96,1.44l1.58,5.48l-0.73,3.38l-2.67,-1.26l-6.25,-4.45l-0.52,0.05l-0.04,0.52l6.1,8.03l0.24,1.1l-6.09,-1.92l-5.3,-3.12l-2.77,-2.46l0.72,-1.31l-0.1,-0.51l-7.38,-5.75l-0.64,0.33l0.03,1.33l-6.7,0.85l-1.79,-1.68l1.46,-3.85l4.49,-0.1l5.15,-0.77l0.31,-0.54l-0.79,-2.04l0.83,-2.91l3.22,-6.15l-0.67,-3.24l-1.07,-2.43l-3.84,-3.29l-4.67,-2.18l1.24,-1.37l0.05,-0.47l-2.65,-4.44l-2.33,-0.57l-1.88,-2.37l-0.65,0.04l-1.25,2.02l-4.3,0.88l-9.0,-1.6l-5.26,-2.14l-3.98,-1.1l-1.81,-2.3l2.43,-3.26l-0.32,-0.64l-3.2,-0.03l-0.75,-7.66l1.89,-7.38l2.46,-3.41l5.58,-2.04l-1.59,4.91ZM261.18,282.95l2.07,0.7l1.54,-0.05l-0.57,0.69l-0.66,0.17l-2.92,-1.41l-0.44,-0.86l0.38,-0.46l0.61,1.23ZM230.78,185.0l-2.28,0.26l-0.54,-2.72l0.98,-3.45l1.88,-0.76l1.65,1.57l0.03,2.61l-0.24,0.76l-1.47,1.73ZM229.41,141.37l0.16,1.75l-4.89,-0.38l-2.72,1.08l-0.48,-0.34l-2.65,-4.39l0.09,-2.82l0.87,-0.43l5.47,0.92l4.14,4.61ZM222.03,214.7l-0.78,2.22l-0.56,-0.23l-0.54,-1.3l0.87,-1.54l0.57,0.07l0.44,0.77ZM183.65,102.44l3.0,3.59l4.7,-0.02l1.97,3.24l-0.41,4.19l2.83,2.3l1.84,2.54l6.99,1.27l4.2,-2.19l4.96,-0.84l3.84,0.67l2.53,3.56l0.53,3.8l-1.43,2.32l-3.48,1.88l-3.25,-1.1l-7.15,1.44l-5.04,0.16l-3.95,-1.13l-6.43,-2.95l-0.83,-5.12l-0.3,-4.98l-2.56,-4.72l-5.31,-1.46l-2.69,-3.1l0.83,-3.99l4.63,0.64ZM207.36,195.03l0.42,2.4l0.63,0.26l0.99,-0.72l1.27,1.36l5.47,3.76l0.21,2.54l0.49,0.36l1.62,-0.39l1.33,1.4l-1.71,1.36l-3.54,-1.23l-1.33,-2.43l-0.66,-0.06l-2.46,2.99l-3.05,2.47l-0.7,-2.67l-0.45,-0.29l-2.39,0.38l1.64,-2.22l0.32,-4.55l0.78,-5.03l1.13,0.31ZM215.49,211.5l-2.69,2.74l-1.33,-0.09l-0.38,-1.01l1.61,-2.18l2.82,0.04l-0.02,0.5ZM202.66,70.17l2.91,4.33l-3.3,3.83l-4.54,9.4l-4.14,0.83l-4.93,-1.5l-2.57,-4.9l0.04,-4.53l1.93,-3.49l-0.36,-0.59l-4.35,0.1l-2.61,-4.34l-1.55,-6.33l1.71,-6.55l1.67,-4.57l2.41,-1.04l0.22,-0.48l-0.96,-3.26l5.05,-0.73l3.21,8.41l8.21,6.06l1.95,9.35ZM187.39,143.67l-2.74,6.11l-2.28,-0.24l-1.49,-6.99l0.04,-4.2l1.26,-3.63l2.29,-2.28l4.96,0.3l4.35,2.01l-3.51,7.33l-2.87,1.59ZM186.12,124.07l-1.2,3.26l-3.2,-0.62l-2.75,-2.26l1.22,-4.02l3.15,-2.36l1.93,3.09l0.86,2.91ZM185.64,96.93l-0.83,0.24l-4.33,-0.68l-0.51,-2.52l4.35,0.15l1.52,1.89l-0.2,0.91ZM180.62,90.66l-3.24,2.16l-1.76,-2.41l-1.05,-4.51l-0.18,-4.75l2.69,0.43l1.32,0.77l2.85,4.19l-0.63,4.11ZM180.98,172.19l-1.22,1.91l-3.04,-1.9l-2.16,0.64l-2.93,-2.72l1.98,-2.02l1.52,-2.75l3.72,3.03l2.13,3.8ZM169.77,135.22l2.97,1.73l4.08,-1.03l0.51,2.03l-2.26,4.02l0.07,0.48l3.66,3.51l-0.43,6.97l-3.8,2.82l-2.06,-0.56l-1.71,-2.96l-6.1,-6.18l0.04,-2.04l4.64,0.95l0.44,-0.57l-2.66,-5.4l2.61,-3.78ZM174.46,107.75l1.36,3.53l0.08,5.21l-1.09,7.07l-3.71,0.89l-2.35,-1.35l0.05,-5.54l-0.47,-0.4l-3.64,0.69l-0.14,-7.04l2.56,0.16l3.62,-3.51l3.32,0.59l0.42,-0.3ZM170.01,87.71l0.84,4.38l-3.36,-1.1l-4.3,-4.01l-4.91,-0.41l2.06,-3.18l-0.05,-0.5l-2.92,-2.99l-0.16,-4.33l4.31,1.6l6.62,4.67l1.87,5.86ZM134.6,141.21l-1.16,3.7l0.55,0.48l5.29,-2.43l3.29,4.01l0.64,-0.03l2.53,-3.85l1.89,2.29l2.03,7.94l0.37,0.3l0.4,-0.26l1.28,-3.56l-1.72,-8.28l1.76,-1.01l2.22,1.24l2.69,3.29l2.45,13.62l8.57,7.16l-0.23,2.66l-3.8,0.53l-0.29,0.6l1.51,2.57l-0.67,2.03l-4.14,-1.0l-4.49,-1.91l-3.03,0.47l-4.65,2.34l-10.43,1.63l-1.41,-3.17l-3.42,-1.92l-2.23,0.65l-2.72,-5.01l5.02,-1.82l3.63,0.3l3.27,-1.29l0.25,-0.38l-0.26,-0.37l-4.84,-1.75l-5.5,0.57l-3.28,-0.14l-1.06,-2.23l5.47,-2.91l0.2,-0.46l-0.4,-0.3l-3.77,0.11l-3.96,-1.88l1.97,-5.68l1.69,-3.21l6.41,-4.99l2.07,1.35ZM158.82,138.54l-1.83,4.71l-3.34,-5.15l0.6,-0.86l2.98,-0.32l1.59,1.62ZM149.59,111.85l0.99,3.73l0.63,0.21l2.09,-1.62l2.15,0.37l0.41,4.59l-1.42,4.36l-8.24,1.45l-6.38,4.09l-3.32,0.18l-0.26,-2.47l5.03,-4.13l0.12,-0.46l-0.41,-0.24l-11.2,1.15l-3.08,-1.54l3.28,-9.52l2.11,-2.66l6.67,3.38l4.39,5.99l4.63,0.92l0.44,-0.53l-3.52,-9.7l2.01,-3.46l2.07,1.01l0.81,4.89ZM145.71,84.15l-2.55,2.05l-3.61,-0.01l0.03,-1.26l2.32,-3.45l0.99,0.43l2.82,2.24ZM144.69,94.95l-4.27,3.06l-3.27,-3.31l1.81,-3.41l3.34,-1.13l3.11,1.67l-0.73,3.12ZM118.92,155.09l-5.99,3.39l-1.29,-3.14l-5.55,-4.03l2.72,-9.3l2.17,-5.73l-2.25,-5.4l7.82,-1.34l3.61,1.91l6.24,0.5l2.31,2.51l2.44,3.4l-2.87,2.01l-6.21,6.07l-3.1,5.73l-0.05,3.42ZM129.56,96.45l-0.31,7.96l-1.8,3.53l-2.35,0.59l-4.6,4.46l-3.74,1.48l-2.92,-1.93l4.07,-7.68l5.0,-7.12l3.62,0.15l3.02,-1.45ZM111.13,275.3l-0.71,0.3l-3.83,-1.6l-0.83,-1.38l-2.13,-1.28l-0.67,-1.21l-2.4,-0.65l-0.75,-2.19l3.73,1.32l2.25,0.41l2.0,3.05l2.52,1.64l0.8,1.62ZM87.8,253.38l0.9,0.35l1.87,-0.27l-0.67,4.25l1.83,2.97l-1.42,-1.69l-0.98,-1.97l-1.19,-1.23l-0.34,-2.41Z",
            "name": "Canada"
        },
        "CG": {
            "path": "M466.72,406.37l-0.1,1.03l-1.25,2.97l-0.19,3.62l-0.46,1.78l-0.23,0.63l-1.61,1.19l-1.21,1.39l-1.09,2.43l0.04,2.09l-3.25,3.25l-0.5,-0.24l-0.5,-0.83l-1.36,-0.02l-0.98,0.89l-1.68,-0.99l-1.54,1.24l-1.52,-1.96l1.57,-1.14l0.11,-0.52l-0.77,-1.35l2.1,-0.66l0.39,-0.73l1.05,0.82l2.21,0.11l1.12,-1.37l0.37,-1.81l-0.27,-2.09l-1.13,-1.5l1.0,-2.69l-0.13,-0.45l-0.92,-0.58l-1.6,0.17l-0.51,-0.94l0.1,-0.61l2.75,0.09l3.97,1.24l0.51,-0.33l0.17,-1.28l1.24,-2.21l1.28,-1.14l2.76,0.49Z",
            "name": "Congo"
        },
        "CF": {
            "path": "M461.16,408.1l-0.26,-1.19l-1.09,-0.77l-0.84,-1.18l-0.29,-1.0l-1.04,-1.15l0.08,-3.44l0.58,-0.49l1.16,-2.36l1.85,-0.17l0.61,-0.62l0.97,0.58l3.15,-0.97l2.48,-1.92l0.02,-0.96l2.82,0.02l2.36,-1.18l1.93,-2.86l1.16,-0.94l1.11,-0.31l0.27,0.87l1.34,1.48l-0.39,2.02l0.3,1.01l4.01,2.76l0.17,0.93l2.63,2.31l0.6,1.44l2.08,1.4l-3.84,-0.21l-1.94,0.88l-1.24,-0.49l-2.67,1.2l-1.29,-0.18l-0.51,0.37l-0.6,1.22l-3.35,-0.65l-1.57,-0.91l-2.42,-0.83l-1.45,0.91l-0.97,1.28l-0.26,1.56l-3.22,-0.43l-1.49,1.33l-0.94,1.62Z",
            "name": "Central African Rep."
        },
        "CD": {
            "path": "M487.01,402.27l2.34,-0.14l1.35,1.84l1.34,0.45l0.86,-0.39l1.21,0.12l1.07,-0.41l0.54,0.89l2.04,1.54l-0.14,2.72l0.7,0.54l-1.38,1.13l-1.53,2.54l-0.17,2.05l-0.59,1.08l-0.02,1.72l-0.72,0.84l-0.66,3.01l0.63,1.32l-0.44,4.26l0.64,1.47l-0.37,1.22l0.86,1.8l1.53,1.42l0.3,1.27l0.44,0.51l-4.08,0.75l-0.92,1.82l0.51,1.35l-0.74,5.46l0.17,0.38l2.45,1.47l0.54,-0.1l0.12,1.64l-1.28,-0.01l-1.85,-2.37l-1.94,-0.45l-0.48,-1.14l-0.56,-0.2l-1.41,0.74l-1.71,-0.3l-1.01,-1.19l-2.49,-0.2l-0.44,-0.77l-1.98,-0.21l-2.88,0.36l0.11,-2.42l-0.85,-1.13l-0.16,-1.36l0.32,-1.74l-0.47,-0.89l-0.04,-1.5l-0.4,-0.39l-2.53,0.02l0.1,-0.41l-0.39,-0.49l-1.28,0.01l-0.43,0.46l-1.62,0.32l-0.83,1.8l-1.09,-0.28l-2.4,0.52l-1.37,-1.91l-1.3,-3.31l-0.38,-0.27l-7.39,-0.03l-2.46,0.42l0.5,-0.45l0.37,-1.47l0.66,-0.38l0.92,0.08l0.73,-0.82l0.87,0.02l0.31,0.68l1.4,0.36l3.59,-3.63l0.01,-2.23l1.02,-2.29l2.69,-2.39l0.43,-0.99l0.49,-1.96l0.17,-3.51l1.25,-2.95l0.36,-3.15l0.86,-1.13l1.1,-0.67l3.57,1.73l3.65,0.73l0.46,-0.21l0.8,-1.46l1.24,0.19l2.61,-1.17l0.81,0.44l1.04,-0.03l0.59,-0.66l0.7,-0.16l1.81,0.25Z",
            "name": "Dem. Rep. Congo"
        },
        "CZ": {
            "path": "M458.44,265.89l1.23,1.2l1.49,0.27l0.09,1.1l1.36,0.81l0.58,-0.21l0.25,-0.67l1.12,0.29l0.53,1.3l1.67,0.21l0.69,1.14l-1.4,1.19l-0.12,0.65l-0.55,0.55l-1.59,0.21l-0.56,0.65l-1.03,-0.52l-1.03,0.17l-2.15,-1.12l-1.05,0.4l-1.18,1.3l-1.53,-1.0l-2.59,-2.49l-0.57,-2.36l1.48,-0.7l0.99,-1.01l1.72,-0.74l0.54,-0.59l0.73,0.29l0.87,-0.32Z",
            "name": "Czech Rep."
        },
        "CY": {
            "path": "M504.35,321.02l0.49,0.34l-1.34,0.65l-0.91,-0.29l-0.26,-0.55l2.02,-0.14Z",
            "name": "Cyprus"
        },
        "CR": {
            "path": "M211.34,387.89l0.48,1.0l1.61,1.62l-0.54,0.45l0.3,1.42l-0.25,1.2l-1.09,-0.6l-0.05,-1.25l-2.46,-1.43l-0.28,-0.77l-0.66,-0.45l-0.45,-0.0l-0.11,1.05l-1.32,-0.95l0.31,-1.31l-0.36,-0.6l0.31,-0.27l1.42,0.58l1.29,-0.14l0.56,0.56l0.74,0.17l0.55,-0.27Z",
            "name": "Costa Rica"
        },
        "CU": {
            "path": "M221.21,356.57l1.27,1.05l2.18,-0.29l4.43,3.42l2.09,0.45l-0.1,0.41l0.36,0.49l1.75,0.1l1.44,0.97l-3.07,0.42l-4.17,-0.03l0.79,-0.7l-0.04,-0.63l-1.2,-0.76l-1.49,-0.16l-0.7,-0.62l-0.56,-1.44l-0.4,-0.25l-1.34,0.1l-2.2,-0.68l-0.89,-0.6l-3.18,-0.41l-0.28,-0.17l0.6,-0.76l-0.36,-0.29l-2.73,-0.05l-1.7,1.33l-0.91,0.03l-0.61,0.71l-1.03,0.22l1.14,-1.35l1.01,-0.54l3.69,-1.04l3.98,0.22l2.21,0.87Z",
            "name": "Cuba"
        },
        "SZ": {
            "path": "M500.35,482.11l0.5,2.14l-0.39,0.94l-1.04,0.22l-1.23,-1.25l-0.02,-0.69l0.84,-1.65l1.34,0.28Z",
            "name": "Swaziland"
        },
        "SY": {
            "path": "M510.98,327.85l0.08,-1.44l0.55,-1.47l1.28,-1.07l0.12,-0.44l-0.41,-1.19l-1.14,-0.38l-0.19,-1.91l0.53,-1.11l1.29,-1.31l0.19,-1.27l0.6,0.24l2.61,-0.82l1.36,0.56l2.06,-0.01l2.95,-1.17l3.29,-0.29l-0.72,1.1l-1.49,1.11l0.23,2.19l-0.89,3.46l-10.14,6.13l-2.17,-0.92Z",
            "name": "Syria"
        },
        "KG": {
            "path": "M621.37,297.76l-3.91,1.98l-0.95,1.31l-3.03,0.37l-1.14,2.06l-2.35,-0.39l-2.01,0.7l-2.39,1.55l0.09,1.02l-0.42,0.44l-4.5,0.47l-3.01,-1.02l-2.38,0.19l0.12,-0.96l2.3,0.46l1.14,-0.97l1.99,0.21l3.21,-2.37l-0.03,-0.67l-2.97,-1.75l-1.95,0.72l-1.27,-0.86l1.77,-1.84l-0.12,-0.64l-0.4,-0.18l0.36,-0.95l1.35,-0.39l4.01,1.14l0.5,-0.31l0.35,-1.82l1.08,-0.54l3.4,1.37l1.14,-0.35l7.61,0.43l1.15,1.13l1.27,0.45Z",
            "name": "Kyrgyzstan"
        },
        "KE": {
            "path": "M506.26,414.59l1.87,-2.56l0.93,-2.15l-1.38,-4.08l-1.06,-1.6l2.82,-2.75l0.79,0.26l0.12,1.41l0.86,0.83l1.9,0.11l3.28,2.13l3.57,0.44l1.05,-1.12l1.96,-0.9l0.82,0.69l1.16,0.09l-1.78,2.45l0.03,9.12l1.3,1.94l-1.37,0.78l-0.67,1.03l-1.08,0.46l-0.34,1.67l-0.81,1.07l-0.45,1.55l-0.68,0.56l-3.2,-2.23l-0.35,-1.58l-8.86,-4.98l0.14,-1.6l-0.57,-1.04Z",
            "name": "Kenya"
        },
        "SS": {
            "path": "M481.71,393.21l1.07,-0.73l1.2,-3.2l1.36,-0.26l1.61,2.0l0.87,0.34l1.11,-0.41l1.5,0.07l0.57,0.53l2.49,0.0l0.44,-0.63l1.07,-0.4l0.45,-0.84l0.59,-0.33l1.9,1.34l1.6,-0.2l2.83,-3.35l-0.32,-2.23l1.6,-0.53l-0.24,1.62l0.3,1.84l1.34,1.18l0.2,1.88l0.35,0.41l0.02,1.54l-0.23,0.47l-1.42,0.25l-0.85,1.44l0.3,0.6l1.4,0.17l1.12,1.08l0.59,1.13l1.03,0.53l1.28,2.37l-4.42,3.99l-1.74,0.01l-1.89,0.55l-1.47,-0.52l-1.15,0.57l-2.96,-2.62l-1.3,0.49l-1.06,-0.15l-0.79,0.39l-0.82,-0.22l-1.8,-2.7l-1.91,-1.1l-0.66,-1.5l-2.62,-2.33l-0.18,-0.94l-2.37,-1.61Z",
            "name": "S. Sudan"
        },
        "SR": {
            "path": "M283.12,400.08l2.1,0.53l-1.08,1.95l0.2,1.72l0.93,1.49l-0.59,2.04l-0.43,0.71l-1.12,-0.42l-1.32,0.22l-0.93,-0.2l-0.46,0.26l-0.25,0.73l0.33,0.7l-0.89,-0.13l-1.39,-1.98l-0.31,-1.34l-0.97,-0.31l-0.89,-1.47l0.35,-1.61l1.45,-0.82l0.33,-1.87l2.61,0.44l0.58,-0.47l1.75,-0.16Z",
            "name": "Suriname"
        },
        "KH": {
            "path": "M689.52,379.15l0.5,1.47l-0.28,2.77l-4.0,1.87l-0.16,0.59l0.69,0.97l-2.06,0.17l-2.05,0.97l-1.82,-0.32l-0.9,-1.17l-1.23,-2.56l-0.55,-2.88l1.4,-1.87l3.01,-0.46l2.23,0.35l2.01,0.99l0.51,-0.14l0.95,-1.49l1.74,0.75Z",
            "name": "Cambodia"
        },
        "SV": {
            "path": "M195.8,379.9l1.41,-1.21l2.24,1.46l0.98,-0.27l0.44,0.21l-0.27,1.07l-1.14,-0.03l-3.65,-1.23Z",
            "name": "El Salvador"
        },
        "SK": {
            "path": "M476.87,273.43l-1.2,2.33l-2.74,-1.08l-1.05,0.4l-0.52,0.78l-3.44,0.85l-0.48,0.81l-1.74,0.38l-1.88,-1.17l-0.2,-1.03l0.4,-0.94l1.02,0.01l0.86,-0.39l1.74,-2.23l0.83,0.19l0.76,-0.39l1.06,1.14l0.49,0.08l1.33,-0.74l1.26,0.34l1.63,-0.49l1.87,1.16Z",
            "name": "Slovakia"
        },
        "KR": {
            "path": "M737.47,312.73l1.03,-0.11l0.87,-1.28l2.69,-0.35l0.32,-0.3l1.75,3.04l0.59,1.94l0.02,3.41l-0.81,1.45l-2.22,0.59l-1.92,1.21l-1.79,0.21l-0.2,-1.21l0.44,-2.44l-0.97,-2.83l1.45,-0.41l0.23,-0.6l-1.48,-2.32Z",
            "name": "Korea"
        },
        "SI": {
            "path": "M456.18,286.22l-0.51,-1.56l0.2,-1.29l1.68,0.23l1.44,-0.83l2.08,-0.09l0.62,-0.56l0.24,0.62l-1.66,0.8l-0.43,1.53l-0.67,0.28l-0.24,0.94l-1.2,-0.55l-0.54,0.09l-0.33,0.43l-0.67,-0.05Z",
            "name": "Slovenia"
        },
        "KP": {
            "path": "M736.77,312.06l-0.91,-0.45l-0.89,0.68l-1.23,-0.97l0.49,-1.01l0.5,-0.32l0.58,-2.78l-0.45,-0.8l-1.38,-0.34l-0.75,-0.55l1.69,-1.74l2.72,-1.75l1.57,-2.11l1.1,0.86l2.17,0.12l0.41,-0.49l-0.32,-1.43l3.54,-1.33l0.93,-1.56l1.03,1.28l-1.46,1.26l-0.79,1.2l0.02,2.38l-1.08,0.61l-1.41,1.55l-1.7,0.58l-1.23,1.17l-0.16,2.14l2.12,1.67l-0.16,0.33l-2.59,0.32l-1.14,1.41l-1.21,0.08Z",
            "name": "Dem. Rep. Korea"
        },
        "KW": {
            "path": "M540.8,336.41l0.38,0.92l-0.17,0.78l0.61,1.64l-0.95,0.04l-0.83,-1.35l-1.59,-0.2l1.34,-2.02l1.21,0.17Z",
            "name": "Kuwait"
        },
        "SN": {
            "path": "M390.09,377.95l0.12,1.57l0.49,1.48l0.96,0.82l0.05,1.3l-1.26,-0.19l-0.75,0.33l-1.84,-0.62l-5.84,-0.13l-2.54,0.51l-0.22,-1.04l1.78,0.04l2.01,-0.92l1.03,0.48l1.09,0.05l1.29,-0.62l0.14,-0.58l-0.51,-0.74l-1.81,0.25l-1.13,-0.64l-0.79,0.04l-0.72,0.61l-2.31,0.06l-0.92,-1.79l-0.82,-0.65l0.64,-0.36l1.81,-3.15l0.65,-0.64l1.04,0.19l1.39,-0.56l1.19,-0.02l2.72,1.39l3.03,3.53Z",
            "name": "Senegal"
        },
        "SL": {
            "path": "M394.46,393.98l-1.73,1.98l-0.58,1.34l-2.07,-1.06l-1.22,-1.26l-0.65,-2.4l1.16,-0.97l0.67,-1.18l1.21,-0.52l1.66,0.0l1.03,1.65l0.52,2.42Z",
            "name": "Sierra Leone"
        },
        "KZ": {
            "path": "M552.75,298.52l0.51,-1.47l-0.48,-1.19l-2.96,-1.32l-1.07,-2.94l-1.37,-0.98l-0.03,-0.45l1.95,0.27l0.45,-0.38l0.09,-2.29l1.75,-0.47l2.09,0.51l0.49,-0.34l0.45,-3.5l-0.45,-2.38l-0.42,-0.32l-2.41,0.17l-2.39,-0.84l-2.87,1.59l-2.15,0.7l-0.86,-0.4l0.15,-1.86l-1.6,-2.47l-2.02,-0.09l-1.83,-2.19l1.33,-2.64l-0.61,-1.04l1.66,-3.54l2.17,1.91l0.66,-0.26l0.29,-2.7l4.94,-4.15l3.67,-0.1l8.38,4.33l2.97,-1.63l3.74,-0.08l3.1,1.99l0.56,-0.13l0.6,-0.97l3.28,0.16l0.4,-0.27l0.63,-1.89l-0.15,-0.46l-3.62,-2.47l1.99,-1.65l-0.2,-1.23l2.05,-0.92l0.17,-0.58l-1.66,-2.63l0.88,-1.1l9.22,-1.46l1.35,-1.1l6.17,-1.58l2.26,-1.78l4.05,0.85l0.74,4.22l0.54,0.3l2.46,-0.98l2.8,1.27l-0.18,2.03l0.44,0.43l2.58,-0.3l4.83,-3.09l0.03,0.36l3.16,3.23l5.57,10.31l0.69,0.03l1.11,-1.75l3.11,2.07l3.78,-0.93l1.13,0.59l1.15,2.17l1.83,0.89l1.0,1.55l0.4,0.18l2.95,-0.47l1.06,1.89l-1.65,2.2l-1.92,0.33l-0.33,0.38l-0.12,3.61l-1.14,1.37l-4.73,-1.15l-0.48,0.28l-1.76,6.36l-1.1,0.68l-4.91,1.4l-0.26,0.52l2.13,5.72l-1.4,0.73l-0.08,1.73l-0.87,-0.28l-1.43,-1.27l-7.9,-0.45l-0.92,0.34l-3.74,-1.37l-1.63,0.99l-0.31,1.59l-3.7,-1.05l-1.87,0.48l-0.76,1.57l-1.35,0.6l-3.3,2.34l-1.12,2.31l-0.42,0.01l-0.93,-1.56l-2.86,-0.1l-0.45,-2.43l-0.39,-0.33l-0.81,-0.02l0.02,-3.32l-3.0,-2.52l-4.58,0.18l-2.74,0.47l-2.34,-3.04l-6.74,-4.23l-6.45,2.1l-0.28,0.38l0.1,12.31l-0.69,0.09l-1.62,-2.42l-1.83,-1.07l-3.13,0.66l-0.68,0.6Z",
            "name": "Kazakhstan"
        },
        "SA": {
            "path": "M537.53,338.97l2.0,0.25l0.91,1.39l1.49,-0.06l0.88,2.19l1.29,0.79l0.51,1.03l1.56,1.08l-0.1,1.98l0.32,0.93l1.57,2.56l0.76,0.55l0.71,-0.04l1.37,4.1l7.83,1.63l0.51,-0.29l0.77,1.29l-1.56,5.0l-7.29,2.58l-7.31,1.05l-2.34,1.19l-1.88,2.79l-0.76,0.28l-0.83,-0.79l-0.91,0.12l-2.88,-0.52l-3.5,0.25l-0.86,-0.57l-0.58,0.15l-0.66,1.29l0.16,1.12l-0.43,0.33l-0.93,-1.42l-0.33,-1.18l-1.23,-0.89l-1.27,-2.1l-0.78,-2.27l-1.73,-1.83l-1.14,-0.49l-1.54,-2.37l-0.2,-3.5l-1.44,-3.02l-1.27,-1.19l-1.33,-0.58l-1.31,-3.5l-0.77,-0.7l-0.97,-2.05l-2.8,-4.2l-1.07,-0.17l0.59,-2.85l2.75,0.31l1.08,-0.88l0.6,-0.99l1.74,-0.36l0.65,-1.08l0.72,-0.43l0.1,-0.6l-2.09,-2.45l4.42,-1.3l0.48,-0.39l2.75,0.73l3.66,2.01l7.03,5.8l4.88,0.32Z",
            "name": "Saudi Arabia"
        },
        "SE": {
            "path": "M480.3,192.35l-4.15,1.76l-2.43,4.19l0.32,3.66l-3.86,4.45l-4.93,4.95l-1.79,7.79l1.78,3.64l2.29,2.71l-2.14,5.19l-2.69,1.39l-0.95,7.87l-1.3,3.9l-2.71,-0.39l-0.43,0.25l-1.32,3.3l-2.29,0.16l-0.75,-3.94l-2.09,-5.18l-1.86,-6.56l1.04,-2.66l2.12,-3.53l0.83,-6.02l-1.6,-2.83l-0.15,-7.02l1.52,-4.93l2.18,0.09l0.39,-0.26l0.87,-2.28l-0.85,-2.14l3.83,-8.36l4.06,-11.45l2.12,0.02l0.4,-0.33l0.59,-3.35l4.31,1.0l0.49,-0.36l0.34,-4.24l1.04,-0.19l6.98,7.72l0.07,9.8l0.74,2.18Z",
            "name": "Sweden"
        },
        "SD": {
            "path": "M505.98,389.25l-0.34,-0.78l-1.17,-0.91l-0.27,-1.62l0.29,-1.82l-0.34,-0.46l-1.16,-0.18l-0.54,0.59l-1.23,0.11l-0.28,0.65l0.53,0.66l0.17,1.23l-2.44,3.01l-0.96,0.2l-2.39,-1.41l-0.95,0.52l-0.38,0.78l-1.11,0.41l-0.29,0.5l-1.94,0.0l-0.54,-0.52l-1.81,-0.09l-0.95,0.41l-2.45,-2.36l-2.07,0.54l-0.73,1.27l-0.6,2.11l-1.25,0.58l-0.75,-0.62l0.27,-2.67l-1.48,-1.78l-0.22,-1.49l-0.92,-0.97l-0.02,-1.3l-0.57,-1.17l-0.69,-0.16l0.7,-1.31l-0.18,-1.15l0.65,-0.63l0.03,-0.55l-0.36,-0.42l1.56,-3.02l1.91,0.16l0.43,-0.4l-0.1,-11.14l2.49,-0.01l0.4,-0.4l-0.0,-4.96l29.02,0.0l0.65,2.11l-0.49,0.67l0.36,2.75l0.93,3.22l2.12,1.59l-0.9,1.07l-1.72,0.4l-0.98,0.91l-1.42,5.73l0.24,1.16l-0.38,2.09l-0.97,2.4l-1.53,1.32l-1.32,2.93l-1.22,0.86l-0.37,1.34Z",
            "name": "Sudan"
        },
        "DO": {
            "path": "M241.8,368.82l0.05,-0.67l-0.47,-0.75l0.43,-0.45l0.19,-1.02l-0.09,-1.57l1.66,0.01l1.99,0.64l0.33,0.69l1.29,0.19l0.33,0.77l0.99,0.09l0.81,0.64l-0.46,0.53l-1.13,-0.48l-1.87,-0.01l-1.27,0.6l-0.75,-0.56l-1.01,0.55l-0.79,1.43l-0.23,-0.62Z",
            "name": "Dominican Rep."
        },
        "DJ": {
            "path": "M528.43,386.01l-0.45,0.67l-0.58,-0.25l-1.51,0.13l-0.18,-1.02l1.45,-1.97l0.83,0.17l0.77,-0.44l0.2,1.01l-1.21,0.52l-0.06,0.7l0.73,0.48Z",
            "name": "Djibouti"
        },
        "DK": {
            "path": "M452.3,246.5l-1.22,2.88l-2.11,-1.99l-0.26,-1.39l2.98,-1.2l0.61,1.7ZM447.78,242.9l-0.32,0.89l-0.89,-0.07l-1.8,3.21l0.54,2.1l-1.13,0.47l-1.58,-0.48l-0.91,-2.19l-0.07,-4.44l0.99,-2.3l2.0,-0.26l1.11,-1.38l1.3,-0.85l-0.05,1.54l-0.73,1.69l0.3,1.28l1.25,0.79Z",
            "name": "Denmark"
        },
        "DE": {
            "path": "M453.15,278.66l-0.56,-0.42l-1.2,-0.11l-1.89,0.66l-2.12,-0.15l-0.57,0.71l-0.83,-0.67l-0.98,0.09l-2.56,-1.08l-0.49,0.15l-0.39,0.62l-1.46,-0.02l0.26,-2.16l1.24,-2.54l-0.28,-0.57l-3.51,-0.68l-0.95,-0.81l0.12,-1.49l-0.49,-1.0l0.27,-2.61l-0.38,-3.76l1.43,-0.25l0.63,-1.53l0.65,-3.87l-0.43,-1.44l0.31,-0.56l1.61,-0.18l0.34,0.68l0.67,0.07l1.7,-2.09l-0.57,-3.77l1.35,0.41l1.33,-0.45l0.28,1.46l2.27,0.9l-0.02,1.24l0.52,0.39l2.55,-0.8l1.33,-1.07l2.53,1.51l1.08,1.24l0.51,1.88l-0.61,1.39l0.88,1.43l0.58,2.06l-0.16,1.52l0.87,2.18l-0.54,0.2l-0.49,-0.34l-0.54,0.07l-0.57,0.68l-1.71,0.73l-1.01,1.02l-1.75,0.82l-0.2,0.5l0.84,2.98l2.45,2.3l-0.71,1.4l-1.0,0.83l0.33,2.27Z",
            "name": "Germany"
        },
        "YE": {
            "path": "M528.26,376.46l0.26,-0.43l-0.22,-1.03l0.28,-0.61l-0.09,-0.91l0.92,-0.7l-0.08,-1.37l0.39,-0.76l1.01,0.48l3.33,-0.27l3.76,0.42l0.95,0.82l1.36,-0.59l1.74,-2.67l2.18,-1.11l6.86,-0.96l2.48,5.52l-1.64,0.77l-0.56,1.93l-6.23,2.19l-2.29,1.82l-1.93,0.05l-1.41,1.03l-4.24,0.75l-1.72,1.5l-3.28,0.19l-0.52,-1.19l0.02,-1.52l-1.34,-3.33Z",
            "name": "Yemen"
        },
        "DZ": {
            "path": "M441.47,315.57l-0.34,1.19l0.39,2.88l-0.55,2.35l-1.58,1.92l0.36,2.53l1.92,1.66l0.17,0.85l1.43,1.1l1.85,7.66l0.13,1.23l-0.57,5.23l0.2,1.59l-0.88,1.03l-0.02,0.5l1.41,1.93l0.14,1.24l0.89,1.54l0.5,0.17l0.97,-0.42l1.72,1.11l0.83,1.29l-8.23,4.95l-7.23,5.24l-3.43,1.15l-2.3,0.21l-0.28,-1.63l-2.56,-1.12l-0.67,-1.28l-26.12,-18.48l0.01,-3.67l3.77,-1.98l2.44,-0.43l2.12,-0.8l1.08,-1.5l2.81,-1.11l0.34,-2.2l1.34,-0.31l1.04,-1.0l3.46,-0.73l0.36,-1.59l-0.58,-0.56l-0.83,-3.02l-0.18,-1.95l-0.8,-1.65l2.06,-1.44l2.62,-0.52l1.71,-1.32l2.31,-0.91l8.23,-0.8l1.51,0.41l2.27,-1.19l2.45,-0.02l0.91,0.65l1.38,-0.05Z",
            "name": "Algeria"
        },
        "US": {
            "path": "M892.73,206.44l1.34,0.72l1.36,-0.5l1.85,1.36l2.21,0.69l-1.59,1.04l-2.57,-2.02l-2.38,0.18l-0.3,-0.25l0.09,-1.21ZM183.2,272.56l0.38,1.78l1.12,0.96l4.22,0.82l2.39,1.15l2.19,-0.43l2.01,0.64l-1.73,0.85l-3.49,3.04l-0.14,0.83l0.52,0.39l2.3,-0.7l1.8,1.17l5.17,-2.8l-0.37,0.89l0.24,0.53l1.35,0.45l1.71,1.35l4.7,-1.01l0.4,0.77l1.58,0.45l0.68,0.78l-1.42,0.21l-2.2,-0.37l-3.59,1.03l-2.72,3.73l0.35,0.91l0.62,-0.0l0.61,-0.75l-1.43,5.39l0.29,3.47l0.67,1.77l0.61,0.48l1.03,-0.07l0.75,-0.43l1.59,-2.19l0.13,-2.45l-0.82,-2.2l0.11,-1.33l1.2,-2.74l0.42,-0.36l0.48,0.84l0.4,-0.3l0.4,-1.6l0.59,-0.51l0.24,-0.94l1.66,0.56l1.67,1.25l-0.03,2.8l-1.28,1.3l0.02,1.21l0.87,0.37l1.67,-1.46l0.49,0.18l0.51,3.02l-2.51,4.23l0.17,0.59l1.54,0.69l1.51,0.19l1.93,-0.49l4.72,-2.41l2.16,-2.03l-0.08,-1.39l0.77,-0.26l3.91,0.4l2.14,-1.19l0.19,-0.39l-0.31,-1.71l2.31,-2.21l1.0,-0.57l8.31,-0.03l0.57,-0.94l1.9,-0.88l0.92,-1.72l0.75,-2.75l1.58,-2.29l0.94,0.69l1.44,-0.54l0.81,0.77l-0.0,4.78l1.98,3.01l-2.38,1.52l-5.36,2.37l-1.81,3.03l0.01,1.98l0.83,1.79l0.78,0.27l-6.43,1.12l-2.21,1.0l-0.21,0.48l0.45,0.28l3.52,-0.57l-2.73,0.77l-1.77,-0.26l-0.76,0.91l0.23,0.65l0.34,0.07l-0.43,1.87l-1.26,1.73l-1.46,-1.16l-0.49,-0.06l-0.18,0.46l0.52,1.74l0.61,0.64l0.03,0.92l-0.94,1.5l-1.22,-1.31l-0.28,-2.52l-0.35,-0.35l-0.42,0.27l-0.48,1.39l0.34,1.57l-0.97,-0.29l-0.48,0.22l0.16,0.5l1.54,0.91l0.1,2.78l0.78,0.52l0.53,3.76l-1.43,2.04l-2.47,0.86l-1.71,1.78l-1.31,0.27l-1.27,1.11l-0.43,1.05l-2.7,1.91l-2.64,3.21l-0.45,2.23l0.45,2.17l0.85,2.51l1.09,2.0l0.04,1.26l1.16,3.2l-0.18,2.82l-0.55,1.49l-0.47,0.22l-0.88,-0.24l-0.33,-1.01l-1.03,-0.79l-2.75,-5.4l0.46,-2.04l-0.76,-1.66l-1.95,-2.41l-1.47,-0.55l-2.38,1.23l-1.46,-1.42l-1.79,-0.75l-2.78,0.36l-2.27,-0.31l-2.03,0.23l-1.04,0.45l-0.18,0.57l0.39,0.67l0.19,1.47l-0.9,-0.23l-0.84,0.49l-1.57,-0.08l-2.08,-1.52l-2.08,0.34l-1.91,-0.65l-3.74,0.89l-2.39,2.17l-2.54,1.28l-1.45,1.47l-0.61,1.43l-0.02,1.98l0.38,1.9l-1.99,-0.55l-1.81,-0.8l-1.25,-3.25l-1.44,-1.57l-2.24,-3.73l-1.76,-1.15l-2.28,-0.01l-1.71,2.18l-1.74,-0.72l-1.16,-0.78l-1.52,-3.14l-3.94,-3.35l-4.34,-0.0l-0.4,0.4l-0.0,0.81l-6.5,0.02l-9.04,-3.34l-0.33,-0.75l-5.69,0.52l-0.43,-1.37l-1.62,-1.72l-1.14,-0.41l-0.55,-0.94l-1.27,-0.14l-1.02,-0.83l-2.22,-0.29l-0.43,-0.33l-0.36,-1.7l-2.4,-3.06l-2.02,-4.21l-0.05,-0.96l-2.93,-3.59l-0.33,-2.54l-1.3,-1.83l0.52,-2.65l-0.09,-2.87l-0.78,-2.59l0.96,-3.2l0.61,-6.46l-0.46,-4.91l-1.48,-4.8l0.09,-0.23l3.09,1.09l1.27,3.33l0.71,0.07l0.68,-1.24l-1.12,-5.71l68.79,-0.0l0.4,-0.4l0.13,-1.09ZM32.37,157.48l1.75,3.33l0.67,0.06l0.98,-1.29l3.62,0.39l-0.12,1.35l0.27,0.41l3.83,1.28l2.65,-0.7l5.14,2.3l4.86,0.72l1.87,0.93l3.47,-1.11l3.64,2.11l2.52,0.95l-0.03,56.12l0.38,0.4l2.37,0.14l2.29,1.31l3.91,5.31l0.63,0.04l2.4,-2.69l2.1,-1.34l1.18,2.24l3.95,4.14l4.1,8.6l4.22,2.91l0.06,2.46l-1.03,1.56l-1.12,-1.31l-2.06,-1.31l-0.68,-3.73l-3.26,-3.82l-1.32,-4.34l-0.33,-0.28l-6.34,-0.42l-2.8,-1.31l-5.26,-5.09l-6.77,-2.72l-3.55,0.39l-4.79,-2.25l-3.33,-2.21l-2.78,1.09l-0.25,0.43l0.46,3.15l-3.97,1.29l-2.26,1.69l-2.25,0.84l-0.29,-2.33l1.07,-4.71l2.51,-1.5l0.15,-0.53l-0.69,-1.3l-0.62,-0.11l-3.19,2.88l-1.77,3.43l-3.56,3.49l-0.04,0.53l1.65,2.14l-2.16,3.15l-5.1,3.33l-0.76,2.13l-3.78,2.28l-0.91,2.19l-2.68,1.74l-1.82,-0.27l-6.95,4.17l-3.92,1.13l2.36,-1.94l2.5,-1.4l2.58,-2.35l3.26,-0.66l1.2,-1.79l3.42,-2.69l2.56,-2.83l0.42,-3.52l1.25,-2.78l-0.09,-0.45l-0.46,-0.07l-2.63,1.33l-0.6,-0.62l-0.6,0.03l-1.02,1.31l-1.33,-1.98l-0.71,0.08l-0.3,0.77l-0.56,-1.45l-0.62,-0.17l-2.39,1.85l-1.03,-0.0l-0.18,-2.46l0.44,-1.74l-1.7,-2.14l-0.41,-0.11l-3.01,0.89l-1.94,-2.17l-1.61,-1.16l-0.11,-2.96l-1.78,-2.05l0.88,-2.78l2.01,-2.96l0.87,-2.7l1.66,-0.33l1.59,0.82l0.5,-0.12l1.86,-2.47l1.93,0.32l1.91,-1.75l-0.34,-2.97l-1.22,-1.04l1.59,-1.93l-0.33,-0.65l-1.69,0.11l-2.66,1.27l-0.72,1.08l-1.92,-1.11l-3.43,0.63l-3.41,-1.3l-1.05,-2.33l-2.87,-3.16l3.14,-2.29l5.47,-2.98l1.51,0.0l-0.29,2.67l0.42,0.44l5.29,-0.24l0.34,-0.59l-2.03,-3.88l-3.12,-2.51l-1.79,-3.25l-2.4,-2.83l-3.25,-2.04l1.19,-3.05l4.45,-0.33l3.16,-3.2l0.69,-3.62l2.43,-3.32l2.42,-0.86l4.6,-3.26l2.51,0.36l3.66,-3.91l3.4,1.47ZM37.56,239.39l-2.21,1.54l-0.94,-0.87l-0.32,-1.79l3.24,-2.14l1.37,0.26l0.77,1.05l-1.9,1.94ZM31.06,363.53l0.98,0.48l0.75,0.91l-1.77,1.1l-0.44,-1.57l0.48,-0.92ZM29.32,361.52l0.19,0.06l0.11,0.07l-0.18,0.04l-0.12,-0.16ZM25.2,359.55l0.2,0.24l-0.14,-0.02l-0.05,-0.23ZM5.91,226.07l-1.09,0.55l-2.4,-1.69l1.72,-0.6l1.6,0.37l0.17,1.37Z",
            "name": "United States"
        },
        "UY": {
            "path": "M286.86,504.69l-0.94,1.64l-2.58,1.54l-1.67,-0.55l-1.42,0.28l-2.4,-1.28l-1.51,0.09l-1.28,-1.4l0.16,-1.65l0.56,-0.83l-0.02,-2.91l1.22,-5.04l1.18,-0.23l2.36,2.12l1.08,0.03l4.36,3.37l1.24,1.73l-0.98,1.58l0.62,1.52Z",
            "name": "Uruguay"
        },
        "LB": {
            "path": "M510.37,325.96l-0.89,0.55l1.84,-3.86l0.6,0.08l0.24,0.7l-1.15,0.96l-0.64,1.57Z",
            "name": "Lebanon"
        },
        "LA": {
            "path": "M689.54,378.29l-1.76,-0.75l-0.5,0.15l-0.94,1.48l-1.33,-0.65l0.62,-0.99l0.11,-2.2l-2.04,-2.45l-0.25,-2.69l-1.9,-2.14l-2.15,-0.31l-0.79,0.93l-1.12,0.06l-1.06,-0.4l-2.05,1.22l-0.04,-1.63l0.61,-2.74l-0.36,-0.49l-1.35,-0.1l-0.11,-1.26l-0.97,-0.9l0.33,-0.61l1.63,-1.34l0.39,0.36l1.33,0.07l0.42,-0.45l-0.34,-2.75l0.7,-0.21l1.28,1.86l1.11,2.41l0.36,0.23l2.82,0.02l0.72,1.72l-1.4,0.67l-0.72,0.95l0.13,0.59l2.91,1.54l3.61,5.34l1.88,1.81l0.57,1.65l-0.35,1.99Z",
            "name": "Lao PDR"
        },
        "TW": {
            "path": "M724.01,356.0l-0.73,1.52l-0.9,-1.56l-0.26,-1.81l1.38,-2.53l1.73,-1.8l0.64,0.46l-1.86,5.73Z",
            "name": "Taiwan"
        },
        "TT": {
            "path": "M266.64,389.17l0.28,-1.17l1.13,-0.22l-0.06,1.21l-1.35,0.18Z",
            "name": "Trinidad and Tobago"
        },
        "TR": {
            "path": "M513.19,301.28l3.65,1.31l3.06,-0.48l2.09,0.29l3.13,-1.74l2.44,-0.15l2.19,1.49l0.35,0.95l-0.23,1.5l0.24,0.43l2.34,1.31l-1.23,0.67l-0.2,0.43l0.75,3.55l-0.42,1.23l1.16,2.15l-0.57,0.25l-0.9,-0.73l-2.91,-0.41l-1.25,0.5l-4.23,0.45l-2.81,1.15l-1.9,0.01l-1.54,-0.57l-2.56,0.81l-0.66,-0.49l-0.64,0.29l-0.12,1.59l-0.89,0.9l-0.49,-0.75l0.8,-1.4l-0.41,-0.19l-1.43,0.25l-2.0,-0.69l-2.04,1.79l-3.49,0.32l-2.14,-1.66l-2.7,-0.1l-0.87,1.34l-1.36,0.29l-2.28,-1.56l-2.71,-0.02l-1.37,-2.89l-1.7,-1.68l1.09,-2.23l-0.08,-0.46l-1.31,-1.28l2.41,-2.71l3.68,-0.13l0.36,-0.25l0.94,-2.24l4.48,0.41l3.23,-2.2l2.8,-0.91l3.98,-0.07l4.28,2.31ZM488.78,302.77l-1.7,1.44l-0.51,-0.99l1.37,-2.91l-0.78,-0.93l1.78,-0.74l1.78,0.37l0.45,1.31l1.81,0.89l-0.14,0.26l-2.76,0.17l-1.31,1.13Z",
            "name": "Turkey"
        },
        "LK": {
            "path": "M624.16,398.87l-1.82,0.48l-0.99,-1.67l-0.42,-3.47l0.95,-3.45l1.21,0.98l2.26,4.21l-0.34,2.34l-0.85,0.58Z",
            "name": "Sri Lanka"
        },
        "LV": {
            "path": "M489.13,238.44l0.98,0.86l0.21,2.15l0.72,2.39l-3.68,2.17l-2.21,-1.98l-1.3,-0.34l-0.27,-0.73l-0.45,-0.25l-2.41,0.44l-4.15,-0.29l-2.48,1.13l0.07,-2.68l1.15,-2.72l1.91,-1.29l2.14,3.3l2.01,-0.09l0.38,-0.35l0.45,-3.34l1.74,-0.68l3.03,2.19l2.16,0.1Z",
            "name": "Latvia"
        },
        "LT": {
            "path": "M486.92,246.68l0.19,1.58l-2.02,1.5l-0.54,2.27l-2.48,1.47l-2.05,-0.02l-0.5,-1.08l-1.3,-0.59l-0.07,-2.33l-1.21,-0.74l-2.38,-0.69l-0.45,-3.18l2.51,-1.21l4.09,0.28l2.23,-0.39l0.52,0.88l1.23,0.27l2.22,1.99Z",
            "name": "Lithuania"
        },
        "LU": {
            "path": "M436.07,271.5l-0.48,-0.1l0.29,-1.66l0.29,0.51l-0.1,1.25Z",
            "name": "Luxembourg"
        },
        "LR": {
            "path": "M399.36,395.85l0.18,1.54l-0.49,1.0l0.08,0.47l2.47,1.8l-0.33,2.81l-2.65,-1.13l-5.78,-4.62l0.58,-1.32l2.1,-2.34l0.86,-0.22l0.77,1.14l-0.14,0.86l0.59,0.87l1.0,0.14l0.76,-0.99Z",
            "name": "Liberia"
        },
        "LS": {
            "path": "M491.05,494.85l-0.48,0.15l-1.5,-1.78l1.12,-1.53l2.18,-1.51l1.52,1.34l-0.99,1.94l-1.23,0.4l-0.62,0.98Z",
            "name": "Lesotho"
        },
        "TH": {
            "path": "M670.27,385.68l-1.41,3.9l0.15,2.01l0.38,0.36l1.38,0.07l0.9,2.05l0.55,2.34l1.4,1.45l1.61,0.38l0.96,0.97l-0.5,0.64l-1.1,0.2l-0.34,-1.18l-2.04,-1.1l-0.63,0.23l-0.63,-0.62l-0.48,-1.3l-2.55,-2.64l-0.73,0.41l0.95,-3.91l2.16,-4.25ZM670.67,384.59l-0.92,-2.2l-0.26,-2.64l-2.14,-3.1l0.72,-0.5l0.89,-2.62l-2.62,-3.66l-0.99,-1.9l0.88,-0.52l1.05,-2.63l1.74,-0.19l2.59,-1.63l0.76,0.58l0.13,1.42l0.37,0.36l1.23,0.09l-0.52,2.34l0.05,2.46l0.6,0.33l2.43,-1.45l0.77,0.4l1.47,-0.08l0.71,-0.89l1.48,0.14l1.71,1.92l0.25,2.69l1.92,2.15l-0.1,1.92l-0.61,0.87l-2.22,-0.33l-3.5,0.65l-1.6,2.14l0.36,2.6l-1.51,-0.79l-1.85,-0.01l0.28,-1.54l-0.4,-0.47l-2.21,0.02l-0.4,0.37l-0.19,2.77l-0.34,0.94Z",
            "name": "Thailand"
        },
        "TF": {
            "path": "M596.66,558.28l-3.18,0.21l-0.05,-1.59l0.4,-1.7l1.28,0.9l2.08,0.42l-0.53,1.76Z",
            "name": "Fr. S. Antarctic Lands"
        },
        "TG": {
            "path": "M422.7,387.47l-0.1,1.24l1.53,1.53l0.08,1.1l0.5,0.65l-0.11,5.64l0.49,1.47l-1.31,0.35l-1.02,-2.13l-0.18,-1.13l0.53,-2.2l-0.63,-1.16l-0.22,-3.7l-1.01,-1.41l0.07,-0.29l1.37,0.03Z",
            "name": "Togo"
        },
        "TD": {
            "path": "M480.25,365.02l0.12,9.75l-2.1,0.05l-1.14,1.91l-0.69,1.65l0.34,0.73l-0.66,0.92l0.24,0.9l-0.86,1.97l0.45,0.5l0.59,-0.1l0.34,0.65l0.03,1.39l0.9,1.06l-1.45,0.43l-1.27,1.03l-1.83,2.78l-2.16,1.08l-2.31,-0.15l-0.86,0.25l-0.26,0.49l0.17,0.62l-2.11,1.69l-2.85,0.87l-1.09,-0.57l-0.73,0.67l-1.12,0.1l-1.1,-3.13l-1.25,-0.64l-1.22,-1.23l0.3,-0.65l3.01,0.04l0.35,-0.6l-1.3,-2.21l-0.08,-3.33l-0.97,-1.68l0.22,-1.06l-0.38,-0.48l-1.22,-0.04l0.0,-1.27l-0.98,-1.08l0.97,-3.05l3.25,-2.68l0.13,-3.38l0.95,-5.29l0.52,-1.1l-0.1,-0.47l-0.91,-0.8l-0.19,-0.98l-0.8,-0.6l-0.55,-3.77l2.11,-1.24l19.56,10.1Z",
            "name": "Chad"
        },
        "LY": {
            "path": "M483.49,331.4l-0.77,1.19l0.3,1.46l-0.6,1.92l0.73,2.26l0.0,25.02l-2.48,0.01l-0.41,0.87l-19.41,-10.02l-4.41,2.35l-1.37,-1.37l-3.82,-1.13l-1.14,-1.71l-1.98,-1.28l-1.22,0.33l-0.67,-1.15l-0.16,-1.3l-1.29,-1.77l0.88,-1.24l-0.07,-4.54l0.43,-2.38l-0.86,-3.65l1.13,-0.8l0.22,-1.23l-0.21,-1.1l3.49,-2.78l0.28,-2.06l2.44,0.85l1.18,-0.22l1.97,0.47l3.14,1.26l1.37,2.7l5.71,1.77l2.64,1.43l1.62,-0.76l1.29,-1.41l-0.45,-2.46l0.67,-1.22l1.67,-1.29l1.56,-0.37l3.13,0.56l1.09,1.36l3.98,0.83l0.38,0.6Z",
            "name": "Libya"
        },
        "AE": {
            "path": "M550.76,353.19l1.89,-0.42l3.84,0.02l4.77,-4.92l0.19,0.38l0.26,1.67l-0.82,0.01l-0.39,0.35l-0.08,2.12l-0.82,0.64l-0.01,1.0l-0.67,1.03l-0.39,1.45l-7.07,-1.29l-0.71,-2.04Z",
            "name": "United Arab Emirates"
        },
        "VE": {
            "path": "M240.68,386.52l0.53,0.75l-0.02,1.07l-1.07,1.78l0.95,2.01l0.42,0.23l1.4,-0.44l0.56,-1.84l-0.77,-1.17l-0.1,-1.49l2.83,-0.94l0.26,-0.49l-0.28,-0.97l0.3,-0.28l0.66,1.32l1.96,0.26l1.4,1.23l0.08,0.69l0.39,0.35l4.81,-0.23l1.49,1.12l1.92,0.31l1.67,-0.84l0.22,-0.61l3.44,-0.14l-0.18,0.56l0.86,1.2l2.19,0.35l1.68,1.1l0.37,1.87l0.41,0.32l1.56,0.17l-1.66,1.36l-0.22,0.92l0.66,0.98l-1.67,0.54l-0.3,0.4l0.04,0.99l-0.56,0.57l-0.01,0.55l1.85,2.27l-0.66,0.69l-4.47,1.29l-0.72,0.54l-3.69,-0.9l-0.71,0.27l-0.02,0.7l0.91,0.53l-0.08,1.55l0.35,1.58l0.35,0.31l1.66,0.17l-1.3,0.52l-0.48,1.13l-2.68,0.91l-0.6,0.77l-1.57,0.13l-1.17,-1.13l-0.8,-2.52l-1.25,-1.26l1.02,-1.23l-1.29,-2.95l0.18,-1.62l1.0,-2.21l-0.2,-0.49l-1.14,-0.47l-4.02,0.36l-1.82,-2.11l-1.57,-0.33l-2.99,0.23l-1.06,-0.98l0.25,-1.24l-0.2,-1.02l-0.59,-0.69l-0.29,-1.06l-1.08,-0.39l0.78,-2.81l1.9,-2.12Z",
            "name": "Venezuela"
        },
        "AF": {
            "path": "M600.86,316.06l-1.73,1.47l0.72,3.0l-1.1,1.13l-0.02,1.35l-0.49,0.78l-2.15,-0.09l-0.37,0.58l0.8,1.63l-1.4,0.74l-1.06,1.8l0.07,1.81l-0.66,0.56l-0.91,-0.22l-1.91,0.38l-0.48,0.81l-1.88,0.14l-1.49,1.9l-0.08,2.2l-2.91,1.07l-1.64,-0.24l-0.72,0.58l-1.41,-0.31l-2.4,0.41l-3.54,-1.24l1.98,-2.49l-0.21,-1.88l-0.3,-0.34l-1.63,-0.42l-0.19,-1.69l-0.76,-2.19l0.96,-1.48l-0.18,-0.59l-0.75,-0.31l1.48,-5.22l2.12,0.97l2.14,-0.38l0.74,-1.45l1.77,-0.42l1.54,-1.0l0.62,-2.51l1.88,-0.54l0.48,-0.87l0.93,0.61l2.13,0.12l2.55,1.01l1.96,-0.89l0.64,0.46l0.58,-0.13l0.69,-1.23l1.58,-0.09l0.47,-0.64l0.24,-1.17l0.79,-0.81l0.81,0.43l-0.19,0.66l0.71,0.58l-0.09,2.61l1.28,1.05ZM601.25,315.96l1.86,-0.88l1.42,-1.28l3.93,0.22l0.11,0.23l-2.26,0.81l-5.06,0.9Z",
            "name": "Afghanistan"
        },
        "IQ": {
            "path": "M530.81,314.51l0.79,0.72l1.26,-0.3l1.46,3.35l1.63,1.01l0.15,1.38l-1.23,1.13l-0.53,2.67l1.73,2.85l3.12,1.72l1.16,2.02l-0.38,1.98l0.39,0.48l0.41,-0.0l0.02,1.16l0.79,1.02l-2.51,-0.11l-1.71,2.58l-4.3,-0.21l-7.02,-5.78l-3.73,-2.06l-2.89,-0.78l-0.86,-3.1l5.46,-3.23l0.95,-3.7l-0.2,-2.14l1.28,-0.77l1.22,-1.86l0.86,-0.39l2.67,0.37Z",
            "name": "Iraq"
        },
        "IS": {
            "path": "M384.17,190.14l-0.45,3.88l2.67,3.88l-3.04,4.17l-9.15,4.83l-9.47,-2.42l1.99,-2.05l-0.1,-0.63l-4.53,-2.38l3.43,-0.89l0.3,-0.41l-0.11,-1.75l-0.3,-0.36l-4.81,-1.29l1.43,-3.39l3.37,-0.82l3.74,4.02l0.56,0.03l3.59,-3.17l2.9,1.61l0.45,-0.04l3.95,-3.21l3.58,0.38Z",
            "name": "Iceland"
        },
        "IR": {
            "path": "M533.43,314.24l-1.29,-2.38l0.43,-1.06l-0.72,-3.4l1.03,-0.56l0.32,0.9l1.26,1.49l2.06,0.57l1.12,-0.18l2.89,-2.33l0.6,-0.15l0.42,0.54l-0.74,1.37l0.06,0.46l1.56,1.68l0.66,0.05l0.67,1.99l2.55,0.89l1.88,1.61l3.7,0.53l3.91,-0.83l0.47,-0.8l2.17,-0.66l1.65,-1.68l1.49,0.08l1.19,-0.57l1.57,0.26l2.84,1.62l1.88,0.32l2.77,2.69l1.78,0.2l0.18,2.19l-1.69,5.93l0.23,0.49l0.64,0.26l-0.85,1.58l0.81,2.33l0.19,1.83l0.3,0.35l1.63,0.43l0.16,1.43l-2.16,2.5l-0.01,0.51l2.21,3.19l2.35,1.3l0.06,2.26l1.24,0.74l0.12,0.75l-3.31,1.33l-1.08,3.14l-9.68,-1.74l-0.99,-3.18l-1.43,-0.75l-2.18,0.48l-2.47,1.31l-2.82,-0.86l-2.46,-2.11l-2.41,-0.84l-3.42,-6.37l-0.49,-0.2l-1.17,0.41l-1.43,-0.86l-0.51,0.09l-0.64,0.77l-0.97,-1.07l-0.02,-1.4l-0.71,-0.39l0.27,-1.92l-1.29,-2.25l-3.13,-1.73l-1.59,-2.62l0.51,-2.08l1.3,-1.32l-0.19,-1.79l-1.73,-1.17l-1.57,-3.6Z",
            "name": "Iran"
        },
        "AM": {
            "path": "M537.0,308.96l-0.27,0.03l-1.24,-2.34l-0.92,0.01l-0.62,-0.73l-0.69,-0.08l-0.96,-0.89l-1.58,-0.69l0.2,-1.3l-0.28,-0.9l2.73,-0.41l1.13,1.15l-0.21,1.0l1.06,0.9l-0.5,0.74l0.08,0.53l2.05,1.37l0.04,1.62Z",
            "name": "Armenia"
        },
        "AL": {
            "path": "M470.32,297.19l0.73,0.03l0.93,0.99l0.13,0.95l-0.3,1.27l0.36,1.43l1.02,0.9l-1.82,3.2l-0.18,-0.65l-1.26,-1.0l-0.19,-1.36l0.53,-3.17l-0.55,-1.64l0.61,-0.94Z",
            "name": "Albania"
        },
        "AO": {
            "path": "M461.55,429.93l1.26,3.16l1.94,2.36l2.47,-0.54l1.25,0.32l0.44,-0.18l0.93,-1.92l1.31,-0.08l0.41,-0.44l0.47,-0.0l-0.1,0.41l0.39,0.49l2.65,-0.02l0.03,1.2l0.48,1.02l-0.34,1.52l0.18,1.56l0.83,1.04l-0.13,2.87l0.54,0.39l3.96,-0.41l-0.1,1.81l0.39,1.06l-0.24,1.45l-4.7,-0.03l-0.4,0.39l-0.12,8.23l2.93,3.55l-3.84,0.9l-5.89,-0.36l-1.88,-1.27l-10.47,0.23l-1.3,-1.03l-1.85,-0.16l-2.4,0.78l-0.15,-1.08l0.33,-2.2l1.0,-3.5l1.35,-3.24l2.24,-2.82l0.33,-2.07l-0.13,-1.54l-0.8,-1.08l-1.21,-2.88l0.87,-1.62l-1.27,-4.13l-1.17,-1.53l2.47,-0.63l7.03,0.03ZM451.71,428.77l-0.47,-1.26l1.25,-1.11l0.32,0.3l-0.99,1.03l-0.12,1.04Z",
            "name": "Angola"
        },
        "AR": {
            "path": "M258.05,471.85l1.38,1.83l0.68,-0.08l0.87,-1.93l2.39,0.09l4.94,4.92l2.17,0.51l2.99,1.99l2.47,1.04l0.26,0.88l-2.38,4.1l0.23,0.58l5.39,1.21l2.13,-0.46l2.46,-2.25l0.49,-2.47l0.76,-0.32l0.98,1.25l-0.04,1.9l-3.67,2.62l-2.85,2.79l-3.42,4.08l-1.3,5.37l0.01,2.9l-0.54,0.77l-0.36,3.52l3.15,2.82l-0.31,1.9l1.54,1.59l-0.1,1.23l-2.3,3.86l-3.55,1.64l-4.91,0.65l-2.7,-0.32l-0.43,0.5l0.5,1.83l-0.49,2.34l0.4,1.59l-1.21,0.94l-2.34,0.42l-2.29,-1.15l-1.41,0.93l0.41,3.97l1.69,1.02l1.41,-0.77l0.39,0.92l-2.08,0.99l-2.01,2.14l-0.47,3.69l-0.49,1.57l-2.34,0.12l-2.08,2.01l-0.63,3.07l2.46,2.67l2.21,0.74l-0.73,2.83l-2.84,2.04l-1.73,4.57l-2.18,1.47l-1.15,1.98l0.77,4.43l1.16,1.7l-2.44,-0.66l-5.82,-0.52l-0.91,-2.06l0.05,-2.9l-0.46,-0.4l-1.41,0.21l-0.69,-1.12l-0.2,-3.82l1.89,-1.73l0.79,-2.4l-0.26,-1.97l1.31,-3.13l0.91,-4.79l-0.23,-1.96l1.06,-0.95l-0.27,-1.32l-1.01,-0.76l0.63,-1.12l-0.05,-0.46l-1.05,-1.22l-0.53,-3.58l0.97,-0.92l-0.42,-4.02l1.21,-6.04l1.53,-1.49l-0.75,-3.06l-0.01,-2.68l1.79,-1.91l0.05,-2.76l1.43,-3.06l0.01,-2.77l-0.69,-0.77l-1.09,-4.84l1.48,-2.87l-0.19,-2.93l0.85,-2.48l1.59,-2.58l1.73,-1.72l0.05,-0.51l-0.61,-0.89l0.45,-0.89l-0.07,-4.37l2.71,-1.48l0.86,-2.84l-0.22,-0.73l1.77,-2.07l2.9,0.58ZM256.68,580.89l-1.95,0.18l-1.42,-1.53l-3.82,-0.12l-0.0,-7.37l1.57,3.7l3.26,2.57l3.18,1.01l-0.81,1.56Z",
            "name": "Argentina"
        },
        "AU": {
            "path": "M705.79,484.09l0.27,0.04l0.18,-0.47l-0.49,-1.51l0.92,1.16l0.45,0.15l0.28,-0.39l-0.09,-1.61l-1.99,-3.77l1.09,-3.43l-0.24,-1.62l0.34,-0.64l0.38,1.08l0.43,-0.19l0.99,-1.75l1.91,-0.85l1.29,-1.18l1.81,-0.93l0.95,-0.17l0.93,0.27l1.92,-0.97l1.46,-0.29l1.03,-0.82l1.44,0.04l2.78,-0.86l1.36,-1.18l0.71,-1.48l1.41,-1.28l0.3,-2.63l1.27,-1.61l0.78,1.67l0.54,0.19l1.07,-0.52l0.15,-0.59l-0.73,-1.02l0.45,-0.73l0.78,0.4l0.58,-0.3l0.28,-1.84l1.87,-2.17l1.12,-0.39l0.28,-0.58l0.62,0.17l0.5,-0.36l0.03,-0.38l1.87,-0.58l1.65,1.06l1.35,1.49l3.4,0.39l0.44,-0.54l-0.46,-1.24l1.05,-1.82l1.04,-0.62l0.14,-0.55l-0.25,-0.41l0.88,-1.19l1.31,-0.78l1.31,0.27l2.1,-0.48l0.31,-0.4l-0.05,-1.31l-0.92,-0.78l1.48,0.56l1.41,1.08l2.11,0.65l0.81,-0.21l1.4,0.71l1.69,-0.67l0.8,0.19l0.64,-0.33l0.71,0.78l-1.33,1.96l-0.71,0.07l-0.35,0.51l0.24,0.87l-1.52,2.38l0.12,1.06l2.15,1.66l1.97,0.86l3.04,2.4l1.97,0.66l0.54,0.89l2.72,0.87l1.84,-1.12l2.07,-6.05l-0.43,-3.63l0.3,-1.75l0.47,-0.87l-0.32,-0.69l1.09,-3.31l0.46,-0.47l0.4,0.71l0.17,1.52l0.65,0.53l0.15,1.04l0.85,1.22l0.12,2.41l0.9,2.03l0.57,0.18l1.3,-0.79l1.69,1.73l-0.2,1.09l0.53,2.23l0.39,1.32l0.68,0.49l0.6,1.99l-0.2,1.51l0.81,1.79l2.87,1.56l3.14,2.21l-0.12,0.78l1.38,1.62l0.95,2.84l0.58,0.22l0.71,-0.42l0.8,0.92l0.61,0.01l0.46,2.48l4.82,4.87l0.66,2.1l-0.07,3.44l1.15,2.31l-0.13,2.37l-1.1,3.88l0.04,1.73l-0.48,2.02l-1.05,2.56l-1.9,1.57l-1.73,3.77l-2.38,6.57l-0.24,3.08l-1.15,0.88l-2.86,0.16l-2.31,1.3l-2.5,2.46l-1.81,-1.24l-1.29,-0.49l0.31,-1.32l-0.55,-0.46l-1.5,0.69l-2.01,2.12l-7.1,-2.39l-1.49,-1.79l-1.13,-4.06l-1.45,-1.37l-1.84,-0.28l0.58,-1.28l-0.61,-2.26l-0.73,-0.1l-1.14,1.96l-0.94,0.24l0.6,-0.77l0.44,-1.84l0.99,-1.67l-0.2,-2.22l-0.28,-0.35l-0.43,0.13l-2.0,2.51l-1.51,1.0l-0.93,2.15l-1.35,-0.87l-0.01,-1.63l-1.57,-2.18l-1.11,-0.96l0.27,-0.39l-0.13,-0.58l-3.21,-1.8l-1.84,-0.13l-2.55,-1.44l-4.58,0.3l-6.02,2.02l-2.54,-0.14l-2.62,1.5l-2.13,0.67l-1.49,2.78l-3.48,0.33l-2.3,-0.54l-3.48,0.46l-1.6,1.58l-0.81,-0.03l-2.36,1.75l-3.24,-0.11l-3.72,-2.38l0.04,-1.18l1.19,-0.49l0.48,-0.93l0.21,-3.17l-0.28,-1.75l-1.34,-3.02l-0.39,-1.56l0.06,-1.8l-0.96,-1.79l-0.17,-1.0l-1.02,-1.04l-0.29,-2.09l-1.15,-1.85ZM784.91,527.24l2.67,1.14l3.23,-1.06l1.08,0.16l0.16,3.5l-0.85,1.25l-0.18,1.86l-0.27,-0.29l-0.62,0.04l-1.56,2.15l-1.66,-0.2l-1.41,-2.68l-0.37,-2.29l-1.4,-2.82l0.04,-0.96l1.14,0.2Z",
            "name": "Australia"
        },
        "AT": {
            "path": "M462.92,275.34l0.01,2.75l-1.06,0.01l-0.34,0.61l0.39,0.64l-1.07,2.55l-2.0,0.08l-1.34,0.81l-5.27,-1.14l-0.48,-1.1l-0.47,-0.23l-2.47,0.64l-0.42,0.58l-2.45,-0.51l-0.75,-0.44l0.44,-1.16l1.11,0.9l0.63,-0.17l0.25,-0.69l1.91,0.14l1.87,-0.66l0.97,0.09l0.68,0.66l0.65,-0.15l0.25,-0.83l-0.31,-2.16l0.82,-0.52l0.68,-1.35l1.49,0.98l0.52,-0.07l1.34,-1.47l0.61,-0.2l1.79,1.07l1.3,-0.12l0.74,0.46Z",
            "name": "Austria"
        },
        "IN": {
            "path": "M623.36,335.51l-1.27,1.12l-0.97,2.68l0.21,0.5l8.04,4.05l3.43,0.39l1.57,1.44l4.92,0.91l2.18,-0.04l0.38,-0.3l0.29,-1.28l-0.32,-1.72l0.15,-0.92l0.82,-0.32l0.44,2.59l2.28,1.07l1.78,-0.4l4.14,0.1l0.38,-0.36l0.18,-1.73l-0.53,-0.69l1.4,-0.31l2.25,-2.09l2.69,-1.7l1.92,0.64l1.8,-1.03l0.8,1.22l-0.69,0.98l0.26,0.63l2.42,0.38l0.09,0.52l-0.83,0.77l0.13,1.14l-1.53,-0.3l-3.24,1.94l-0.12,1.84l-1.32,2.23l-0.17,1.44l-0.93,1.89l-1.63,-0.52l-0.52,0.37l-0.09,2.72l-0.56,1.13l0.2,0.85l-0.53,0.28l-1.18,-3.85l-1.08,-0.27l-0.38,0.31l-0.24,1.03l-0.66,-0.68l0.55,-1.12l1.21,-0.35l1.15,-2.33l-0.23,-0.56l-1.58,-0.49l-4.33,-0.29l-0.19,-1.63l-0.35,-0.35l-1.11,-0.13l-1.91,-1.16l-0.57,0.17l-0.88,1.89l0.11,0.48l1.38,1.12l-1.11,0.73l-0.69,1.14l0.18,0.55l1.24,0.59l-0.32,1.59l0.85,2.01l0.36,2.08l-0.22,0.62l-4.58,0.54l-0.33,0.42l0.13,1.86l-1.18,1.39l-3.65,1.85l-2.79,3.1l-4.32,3.33l-0.18,1.29l-4.65,1.82l-0.77,2.19l0.64,5.37l-1.06,2.51l-0.01,3.97l-1.24,0.28l-1.14,1.94l0.39,0.85l-1.69,0.53l-1.04,1.84l-0.65,0.47l-2.06,-2.06l-2.1,-6.05l-2.2,-3.67l-1.05,-4.8l-2.29,-3.61l-1.76,-8.34l0.01,-3.18l-0.49,-2.59l-0.55,-0.29l-3.53,1.56l-1.52,-0.28l-2.87,-2.86l0.86,-0.7l0.08,-0.54l-0.74,-1.06l-2.68,-2.13l1.26,-1.38l5.33,0.01l0.39,-0.48l-0.5,-2.37l-1.42,-1.51l-0.27,-2.01l-1.44,-1.26l2.33,-2.5l3.05,0.07l2.62,-2.99l1.6,-2.96l2.4,-2.88l0.06,-2.16l1.98,-1.58l-0.01,-0.64l-1.93,-1.4l-0.82,-1.91l-0.81,-2.4l0.91,-0.97l3.58,0.7l2.93,-0.45l2.32,-2.35l2.31,3.07l-0.24,2.31l0.99,1.68l-0.05,0.92l-1.34,-0.3l-0.48,0.47l0.7,3.26l2.61,2.09l3.02,1.77Z",
            "name": "India"
        },
        "TZ": {
            "path": "M495.56,426.32l2.8,-3.13l-0.02,-0.82l-0.64,-1.3l0.68,-0.52l0.14,-1.47l-0.76,-1.25l0.31,-0.11l2.26,0.03l-0.51,2.76l0.76,1.3l0.5,0.12l1.05,-0.53l1.19,-0.12l0.61,0.24l1.43,-0.62l0.1,-0.67l-0.71,-0.62l1.57,-1.7l8.65,4.86l0.32,1.53l3.34,2.33l-1.05,2.81l0.13,1.61l1.63,1.12l-0.6,1.77l-0.01,2.33l1.89,4.05l0.57,0.44l-1.47,1.09l-2.61,0.95l-1.43,-0.04l-1.06,0.77l-2.29,0.36l-2.87,-0.69l-0.83,0.07l-0.64,-0.75l-0.31,-2.8l-1.32,-1.36l-3.25,-0.77l-3.96,-1.59l-1.18,-2.42l-0.32,-1.75l-1.76,-1.49l0.42,-1.05l-0.44,-0.89l0.08,-0.96l-0.46,-0.58l0.06,-0.56Z",
            "name": "Tanzania"
        },
        "AZ": {
            "path": "M539.27,301.57l1.33,0.36l0.44,-0.21l0.4,-0.78l1.11,-1.01l2.3,3.71l1.5,0.55l-1.32,0.17l-0.34,0.33l-0.81,3.49l-0.98,1.01l0.05,1.26l-1.28,-1.27l0.73,-1.34l-0.78,-1.39l-1.51,0.17l-2.32,1.87l-0.04,-1.43l-2.05,-1.48l0.5,-0.74l-0.07,-0.53l-1.07,-0.91l0.33,-0.54l-0.14,-0.55l-1.17,-1.02l1.91,0.73l1.71,0.07l0.37,-0.88l-1.01,-1.48l0.2,-0.14l0.4,0.06l1.63,1.92ZM533.76,306.94l0.63,0.52l0.69,-0.0l0.63,1.35l-0.71,-0.18l-1.25,-1.69Z",
            "name": "Azerbaijan"
        },
        "IE": {
            "path": "M405.07,254.34l0.37,2.67l-1.78,3.47l-4.21,2.28l-2.89,-0.5l1.83,-4.09l-1.24,-4.04l4.62,-4.68l0.33,1.5l-0.5,2.21l0.41,0.49l1.45,-0.06l1.61,0.75Z",
            "name": "Ireland"
        },
        "ID": {
            "path": "M756.47,417.79l0.69,4.01l2.79,1.78l0.51,-0.1l2.04,-2.59l2.71,-1.43l2.05,-0.0l3.9,1.73l2.46,0.45l0.08,15.16l-1.75,-1.55l-2.54,-0.51l-0.88,0.72l-2.32,0.06l0.69,-1.33l1.45,-0.64l0.23,-0.46l-0.65,-2.74l-1.24,-2.22l-5.04,-2.3l-2.09,-0.23l-3.68,-2.27l-0.55,0.13l-0.65,1.07l-0.52,0.12l-0.55,-1.89l-1.21,-0.78l1.84,-0.62l1.72,0.05l0.39,-0.52l-0.21,-0.66l-0.38,-0.28l-3.45,-0.0l-1.13,-1.48l-2.1,-0.43l-0.52,-0.61l2.69,-0.48l1.28,-0.78l3.66,0.94l0.3,0.71ZM757.91,430.25l-0.62,0.82l-0.1,-0.8l0.59,-1.12l0.13,1.1ZM747.38,422.88l0.34,0.72l-1.22,-0.57l-4.68,-0.1l0.27,-0.62l2.78,-0.09l2.52,0.67ZM741.05,415.14l-0.67,-2.88l0.64,-2.01l0.41,0.86l1.21,0.18l0.16,0.7l-0.1,1.68l-0.84,-0.16l-0.46,0.3l-0.34,1.34ZM739.05,423.4l-0.5,0.45l-1.34,-0.36l-0.17,-0.37l1.73,-0.08l0.27,0.36ZM721.45,414.41l-0.19,1.97l2.24,2.23l0.54,0.02l1.27,-1.07l2.75,-0.5l-0.9,1.21l-2.11,0.93l-0.16,0.6l2.22,3.01l-0.3,1.07l1.36,1.75l-2.26,0.85l-0.28,-0.31l0.12,-1.19l-1.64,-1.34l0.17,-2.24l-0.56,-0.39l-1.67,0.76l-0.23,0.39l0.3,6.18l-1.1,0.25l-0.69,-0.47l0.64,-2.21l-0.39,-2.42l-0.39,-0.34l-0.8,-0.01l-0.58,-1.29l0.98,-1.6l0.35,-1.96l1.32,-3.87ZM728.59,426.17l0.38,0.5l-0.02,1.28l-0.88,0.49l-0.53,-0.48l1.04,-1.79ZM729.04,416.88l0.27,-0.05l-0.02,0.13l-0.24,-0.08ZM721.68,413.95l0.16,-0.32l1.89,-1.65l1.83,0.68l3.16,0.35l2.94,-0.1l2.39,-1.66l-1.73,2.13l-1.66,0.43l-2.41,-0.48l-4.17,0.13l-2.39,0.51ZM730.55,440.42l1.11,-1.94l2.02,-0.82l0.08,0.62l-1.45,1.68l-1.77,0.46ZM728.12,435.8l-0.1,0.38l-3.46,0.66l-2.91,-0.27l-0.0,-0.25l1.54,-0.41l1.66,0.73l1.67,-0.19l1.61,-0.65ZM722.9,440.18l-0.64,0.03l-2.26,-1.21l1.12,-0.24l1.78,1.42ZM716.26,435.69l0.88,0.51l1.28,-0.17l0.2,0.35l-4.65,0.73l0.4,-0.67l1.15,-0.02l0.75,-0.74ZM711.66,423.74l-0.38,-0.16l-2.54,1.01l-1.12,-1.44l-1.69,-0.13l-1.16,-0.75l-3.04,0.77l-1.1,-1.15l-3.31,-0.11l-0.35,-3.05l-1.35,-0.95l-1.11,-1.98l-0.33,-2.06l0.27,-2.14l0.9,-1.01l0.37,1.15l2.09,1.49l1.53,-0.48l1.82,0.08l1.38,-1.19l1.0,-0.18l2.28,0.67l2.26,-0.53l1.52,-3.64l1.01,-0.99l0.78,-2.57l4.1,0.31l-1.11,1.77l0.02,0.46l1.7,2.2l-0.23,1.39l2.07,1.71l-2.33,0.42l-0.88,1.9l0.1,2.05l-2.4,1.9l-0.06,2.45l-0.7,2.79ZM692.58,431.94l0.35,0.26l4.8,0.25l0.78,-0.97l4.17,1.09l1.13,1.69l3.69,0.45l2.14,1.05l-1.8,0.61l-2.77,-1.0l-4.8,-0.12l-5.24,-1.42l-1.84,-0.25l-1.11,0.3l-4.26,-0.97l-0.7,-1.14l-1.59,-0.13l1.18,-1.66l2.74,0.13l2.87,1.13l0.26,0.69ZM685.53,429.08l-2.22,0.04l-2.06,-2.04l-3.15,-2.01l-2.93,-3.52l-3.11,-5.33l-2.2,-2.12l-1.64,-4.06l-2.32,-1.69l-1.27,-2.07l-1.96,-1.5l-2.51,-2.65l-0.11,-0.66l4.81,0.53l2.15,2.38l3.31,2.74l2.35,2.66l2.7,0.17l1.95,1.59l1.54,2.17l1.59,0.95l-0.84,1.71l0.15,0.52l1.44,0.87l0.79,0.1l0.4,1.58l0.87,1.4l1.96,0.39l1.0,1.31l-0.6,3.01l-0.09,3.51Z",
            "name": "Indonesia"
        },
        "UA": {
            "path": "M493.77,283.66l1.85,0.21l0.66,-0.27l0.1,-0.68l-0.25,-0.87l-0.8,-0.85l-0.34,-1.43l-0.87,-0.71l0.01,-1.37l-1.13,-1.01l-1.16,-0.23l-2.07,-1.18l-1.66,0.37l-0.67,0.55l-0.9,-0.0l-0.86,0.91l-1.69,0.33l-0.76,0.47l-1.18,-0.82l-3.05,-0.42l-0.9,0.48l-0.22,-0.62l-1.16,-0.85l0.86,-1.88l0.25,0.1l0.53,-0.51l-0.57,-1.53l2.08,-2.96l1.38,-0.69l0.26,-1.34l-1.09,-3.02l0.9,-0.18l1.27,-1.02l1.78,-0.08l2.45,0.31l2.87,0.98l1.87,0.08l0.85,0.53l1.06,-0.47l0.78,0.77l2.17,-0.18l0.91,0.35l0.54,-0.34l0.15,-1.9l0.58,-0.67l2.82,-0.06l0.87,-0.86l3.0,-0.22l1.29,1.86l-0.53,0.89l0.21,1.25l0.36,0.33l1.78,0.17l0.93,2.49l3.18,1.38l1.95,-0.52l1.69,1.77l1.39,-0.04l3.36,1.15l0.02,0.75l-0.97,1.91l0.49,2.26l-0.28,0.89l-2.37,0.33l-1.29,1.04l-0.21,1.6l-1.85,0.32l-1.58,1.12l-2.41,0.24l-2.16,1.36l-0.19,0.36l0.32,2.54l1.49,0.93l1.92,-0.16l-0.18,0.47l-2.65,0.61l-3.21,1.92l-0.89,-0.46l0.44,-1.33l-0.24,-0.5l-2.27,-0.86l2.41,-1.32l0.12,-0.62l-0.93,-0.95l-3.62,-0.85l-0.14,-1.08l-0.47,-0.34l-2.32,0.45l-2.91,4.52l-1.19,-0.45l-0.98,0.48l-0.36,-0.21l1.35,-2.93Z",
            "name": "Ukraine"
        },
        "QA": {
            "path": "M549.32,350.8l-0.76,-0.24l-0.14,-1.72l0.84,-1.35l0.47,0.54l0.04,1.41l-0.45,1.36Z",
            "name": "Qatar"
        },
        "MZ": {
            "path": "M508.58,448.77l-0.34,-2.6l0.51,-2.07l3.55,0.64l2.51,-0.38l1.02,-0.76l1.49,0.01l2.74,-0.99l1.66,-1.21l0.51,9.32l0.41,1.25l-0.68,1.69l-0.93,1.74l-1.5,1.52l-5.16,2.32l-2.78,2.78l-1.02,0.54l-1.71,1.84l-0.98,0.59l-0.35,2.45l1.16,1.99l0.49,2.24l0.43,0.31l-0.06,2.14l-0.39,1.21l0.5,0.73l-0.25,0.78l-0.92,0.86l-5.13,2.47l-1.22,1.39l0.21,1.17l0.59,0.4l-0.11,0.78l-1.22,-0.02l-0.73,-3.1l0.42,-3.19l-1.78,-5.56l2.49,-2.89l0.69,-1.93l0.44,-0.43l0.28,-1.57l-0.39,-0.94l0.59,-3.72l-0.01,-3.32l-1.48,-1.17l-1.2,-0.23l-1.74,-1.18l-1.92,0.0l-0.3,-2.12l7.06,-1.98l1.28,1.1l0.89,-0.1l0.67,0.45l0.1,0.75l-0.51,1.3l0.19,1.83l1.75,1.86l0.65,-0.13l0.71,-1.68l1.17,-0.86l-0.26,-3.51l-1.05,-1.87l-1.04,-0.95Z",
            "name": "Mozambique"
        }
    },
    "height": 583.0802520919394,
    "projection": {
        "type": "merc",
        "centralMeridian": 11.5
    },
    "width": 900.0
});

},{}],"dA3La":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('canada', {
    "width": 900,
    "height": 867,
    "paths": {
        "nt": {
            "path": "M340.29,126.02l5.05,-2.26l2.76,0.43l6.5,-3.85l1.23,0.01l1.54,2.19l-1.93,8.62l-1.55,0.59l-2.09,-1.15l-1.22,-2.29l-1.32,0.13l-1.22,2.29l-1.34,-0.24l-0.23,-1.68l-1.46,-1.53l-5.45,1.33l0.72,-2.6ZM104.26,307.63l1.14,-2.98l2.22,-1.67l0.46,-2.51l1.2,-1.51l0.23,-5.06l11.84,-21.11l2.68,2.63l1.46,3.15l0.02,1.76l1.66,1.45l0.66,-0.55l-0.71,-3.84l1.06,0.36l0.07,-0.5l-1.28,-1.24l0.06,-1.25l-1.9,-1.48l0.63,-1.34l1.23,1.78l2.06,-0.46l-1.27,-0.67l-0.73,-2.09l0.91,-2.19l0.82,3.04l1.3,1.4l0.43,-0.74l-0.92,-1.52l0.01,-3.23l0.65,0.02l-0.28,2.19l0.82,0.07l0.59,-1.89l1.87,2.93l1.38,-3.7l2.79,0.44l2.46,2.3l2.79,-4.02l0.7,0.3l-1.1,1.42l0.39,1.34l1.9,1.72l-5.05,2.62l-1.93,2.48l0.9,0.19l1.58,-1.41l2.1,0.22l0.77,-0.72l1.24,0.52l0.71,-0.84l2.64,1.36l1.41,-0.07l3.43,-3.67l2.02,1.7l1.31,0.19l0.94,-0.92l0.78,0.94l6.93,-1.77l0.6,-0.85l0.51,0.79l-0.7,1.79l0.73,0.45l3.57,-3.06l0.03,-0.74l1.1,-0.2l0.29,0.66l1.32,-0.75l0.33,0.91l1.18,-0.31l-0.37,1.09l0.63,0.83l2.24,0.79l2.99,-2.39l-0.43,1.39l0.64,0.69l-0.11,1.21l-1.7,1.0l-6.12,0.53l-2.08,0.64l-1.02,1.21l-1.62,-0.04l-1.6,1.4l-0.25,-1.61l-7.41,-1.01l-2.29,1.84l-0.29,1.06l-5.21,-0.23l-2.66,2.77l-2.4,-0.18l-1.66,2.32l-1.61,-0.49l-0.96,1.13l0.3,2.7l2.2,2.47l0.77,-0.45l-1.27,-1.27l0.38,-0.94l1.27,0.68l0.62,-0.79l0.4,1.43l1.02,-0.16l0.99,1.02l1.61,-0.85l-0.45,-2.08l-1.52,0.19l-0.35,-0.72l1.13,0.16l-0.6,-1.73l0.72,-1.38l2.28,-0.02l0.45,0.71l1.46,-0.81l0.65,0.9l1.17,-1.23l3.27,-0.61l2.33,-2.31l0.67,0.77l-1.51,2.02l0.81,0.22l-0.39,0.95l2.46,-0.58l-0.25,0.99l0.88,0.61l-1.83,2.69l0.65,1.0l1.64,-2.72l7.95,-6.03l5.85,-0.13l2.58,0.65l-1.07,2.79l1.9,1.33l0.27,-1.09l1.24,0.05l5.15,-2.51l1.22,-3.31l1.85,-0.43l4.45,1.02l0.03,-1.32l-2.64,-2.29l1.71,-1.52l-1.85,-0.45l2.47,-2.88l2.54,8.59l-0.04,6.34l-1.07,5.48l2.25,8.32l2.66,3.34l0.85,0.12l0.65,-1.18l1.59,0.69l1.22,-1.47l-0.6,-2.09l0.72,-1.04l-0.89,-1.36l0.56,-0.7l2.36,-0.05l-0.33,1.7l0.79,0.38l1.3,-1.37l-1.55,-1.87l2.51,-2.33l2.01,0.05l0.56,-0.74l0.16,1.45l-2.13,4.05l1.06,1.48l1.87,0.23l-5.37,4.32l0.04,1.48l0.86,0.84l2.07,1.0l0.85,-0.51l1.93,1.27l2.46,-0.33l0.26,-1.48l2.2,0.12l2.25,-5.23l1.23,-0.68l0.86,1.2l5.42,1.52l3.72,2.51l3.56,5.74l-10.78,31.17l22.92,34.62l25.67,33.56l14.94,3.76l6.82,13.72l4.14,3.52l30.8,11.84l26.18,8.96l-10.81,81.09l-51.46,-8.44l-52.41,-11.91l-51.58,-15.14l-28.53,-9.89l-18.38,-7.37l0.81,-1.02l-0.28,-4.88l0.73,-2.33l-1.59,-1.36l-0.37,-3.96l1.97,-1.43l0.22,-3.73l-2.24,-1.11l-1.52,1.67l-2.45,-0.87l-2.02,0.56l-3.8,-3.91l-1.79,1.13l-0.57,-1.54l-1.06,-0.17l-0.9,1.18l-1.62,-1.42l-1.87,0.55l-1.28,-0.91l1.63,-5.05l-1.3,-0.87l1.67,-1.65l0.93,-5.74l-1.07,-1.73l-2.01,-0.66l-1.39,-2.65l-0.78,-2.0l0.37,-3.13l-1.1,-0.69l0.04,-3.67l-0.79,-2.47l-1.51,-0.56l-1.12,0.7l-0.11,-1.18l-2.66,-2.01l0.84,-0.58l0.0,-2.28l1.23,-0.98l-0.39,-0.69l1.61,-0.78l-1.63,-3.36l-0.09,-5.67l3.01,-3.13l-1.57,-1.35l0.26,-2.13l-1.16,-2.28l2.31,-0.46l1.88,-1.83l-0.37,-5.19l-1.66,-0.64l1.9,-0.06l0.56,-1.03l-3.49,-5.55l0.5,-1.17l-0.74,-2.15l0.94,-0.65l0.04,-5.58l-1.89,-2.03l-1.63,0.89l-1.84,-0.85l2.06,-1.84l-1.29,-2.3l-0.01,-2.24l-3.17,-4.16l1.39,-0.32l0.62,-1.63l2.04,-0.76l0.1,-1.36l-1.06,-0.79l0.64,-1.59l-1.0,-0.97l4.88,-2.33l2.73,-2.47l0.15,-4.09l-0.81,-1.96l2.85,-1.34l-1.48,-2.56l-3.29,1.1l0.87,-1.33l-0.22,-1.05l-1.96,-0.69l-2.27,0.42l-1.07,-0.82l0.77,-1.25l-0.44,-0.84l1.7,-0.85l1.09,-2.06l-0.16,-1.35l-1.16,-0.51l1.43,-1.81l0.91,0.37l0.45,-1.72l1.25,-0.83l-0.23,-3.6l1.22,-1.26l-0.87,-3.87l1.56,0.55l0.52,-0.89l-16.25,-8.78ZM207.0,476.23l1.61,4.53l5.87,2.48l0.59,1.9l3.69,3.15l6.27,1.74l4.69,-0.33l1.76,0.73l3.76,-0.8l1.5,1.2l2.72,0.02l2.0,-1.62l0.22,-3.53l2.03,-1.3l2.31,-0.97l1.96,0.23l0.3,1.85l3.53,-0.52l4.71,-1.97l4.89,-4.5l1.91,-0.5l1.98,-1.93l0.04,-1.86l5.21,-3.43l2.82,0.57l0.14,1.03l3.68,0.38l0.65,-0.92l-0.61,-0.65l4.19,-1.04l2.39,-2.13l-0.22,-0.59l-6.06,-1.61l0.35,-0.51l4.93,1.66l0.78,-0.54l-0.9,-0.6l0.42,-0.41l3.57,2.25l-0.52,2.9l3.49,-1.45l1.55,-2.02l-1.55,-1.61l-3.5,-1.36l-3.53,-2.56l-7.39,-0.99l-4.47,1.2l-2.92,1.65l-3.83,5.35l-7.36,4.08l-3.92,-0.15l-0.72,-0.81l-3.17,0.75l-0.99,-1.17l-1.12,0.24l0.13,-0.86l-1.31,-0.93l0.09,-1.38l-3.31,-4.19l0.1,-1.79l-3.43,0.11l-1.7,-2.68l-1.93,-1.37l-0.76,-2.21l-3.15,-2.05l0.15,-0.71l-2.21,-2.46l-1.51,1.96l1.37,2.32l0.46,2.86l3.58,0.85l-1.8,4.28l2.21,1.78l-0.28,1.92l2.36,3.96l-1.1,1.6l-3.31,0.37l-0.87,-1.09l-3.3,-0.31l-3.32,3.82l-0.15,1.58l-1.73,-0.41l-1.46,0.69l1.28,2.16l-1.78,0.66l-0.95,-1.34l-4.58,-2.58l-0.94,0.43l0.03,1.56l-2.72,0.61l-3.89,-4.33l-1.36,-0.2l1.36,1.82ZM179.03,366.19l1.23,1.14l1.05,-2.95l3.02,0.66l0.35,1.43l1.65,0.94l4.89,0.48l0.48,2.95l2.68,-2.11l-0.16,-1.49l8.12,3.1l1.31,1.76l0.26,2.1l2.26,0.8l-1.7,1.71l-3.35,-0.74l-1.03,-1.5l-2.81,-1.71l-3.62,-0.27l-0.01,0.86l1.5,0.47l-0.05,1.18l2.05,1.97l-0.17,1.13l-2.37,1.85l-3.7,0.25l-0.91,1.12l-1.2,-0.13l0.87,2.2l-1.5,2.06l-1.16,0.39l-3.85,-0.85l-1.02,0.69l0.95,1.99l7.94,5.44l1.13,1.57l5.15,-1.44l-0.18,-1.05l2.6,-4.41l6.83,-2.0l2.81,1.33l-1.07,3.16l-3.75,2.86l-2.71,0.66l-0.53,1.61l-1.03,0.5l-2.31,-0.97l-1.56,0.81l-0.48,1.52l0.83,1.79l1.17,0.66l2.7,-1.8l3.15,-0.01l4.39,-2.13l2.0,-0.14l2.25,-2.17l3.37,0.94l-0.18,-3.3l-1.53,-1.0l-0.85,-2.14l3.94,-0.96l-0.42,-1.74l5.94,2.03l-0.23,1.08l2.52,3.2l0.26,-1.1l1.12,0.85l4.77,-0.1l0.43,-1.45l-1.1,-0.13l2.04,-1.38l-3.01,0.14l-0.54,-1.23l2.01,-2.42l2.7,0.59l0.02,-1.17l-1.34,-0.99l2.79,-0.42l1.32,-1.83l-0.37,-1.16l2.69,-2.18l-1.0,-1.29l-1.77,0.84l-0.45,-0.57l2.9,-2.14l0.15,-1.92l-4.08,0.56l-3.44,3.36l-4.18,0.24l-5.52,-2.26l-0.45,-0.98l-2.09,0.14l-1.46,-2.17l-2.34,-0.36l0.32,-0.78l1.63,0.33l-0.01,-1.57l1.13,0.06l1.62,-1.32l4.32,-0.21l2.51,-1.37l3.18,-0.19l-1.55,-2.45l-2.07,-0.71l0.86,-0.58l-2.34,-0.98l-0.08,-1.09l-1.01,-0.39l-9.34,0.7l-1.73,-0.78l-3.27,1.23l-0.23,0.77l-4.53,0.49l-3.99,-1.18l-0.98,1.01l-2.43,-1.06l-1.9,1.06l-0.03,-1.43l-1.47,0.89l-4.68,-0.02l-2.12,0.74l-1.61,-1.82l-2.33,1.46l-3.5,-2.31l-1.4,0.61l-1.36,2.74l0.84,5.19l0.77,-0.04l0.72,-1.84ZM212.83,287.18l-0.0,-0.02l-0.45,-0.39l0.6,0.28l-0.15,0.13ZM211.88,286.62l-0.11,0.01l-0.06,-0.14l0.17,0.13ZM179.99,279.15l0.22,-0.13l-0.03,0.22l-0.19,-0.09ZM142.22,285.94l-0.69,-0.85l0.05,-0.26l0.51,-0.01l0.13,1.12ZM142.77,264.94l0.0,-0.21l0.23,0.0l-0.16,0.1l-0.07,0.11ZM156.42,271.63l-0.26,-0.16l-0.02,-0.28l0.34,0.17l-0.07,0.26ZM155.56,270.82l-0.15,0.03l0.11,-0.14l0.03,0.11ZM159.83,281.2l0.4,-0.64l0.34,-0.13l0.07,0.65l-0.81,0.12ZM202.31,297.59l-0.11,-0.08l0.06,-0.02l0.05,0.1ZM201.72,297.39l-0.66,-0.04l0.07,-0.32l0.01,-0.01l0.59,0.37ZM211.0,288.37l-0.89,0.21l-0.21,-0.52l1.07,-0.1l0.02,0.4ZM207.97,287.77l-0.36,0.28l-0.26,0.01l0.62,-0.56l-0.0,0.27ZM335.03,145.95l1.0,-0.91l-0.03,-4.67l1.26,-2.2l0.69,0.77l4.27,-1.92l3.09,0.31l2.51,-0.9l1.93,0.93l1.22,-0.62l3.04,0.79l-0.79,3.54l-4.36,0.48l-0.82,0.7l0.81,2.8l2.92,0.26l-0.46,3.19l-1.57,2.84l-3.77,1.35l-1.94,-0.92l-4.87,1.52l-1.46,-1.4l-0.3,-2.44l-1.06,-0.05l-1.46,-2.11l0.16,-1.34ZM343.05,180.4l0.53,-2.45l1.48,-0.35l-0.86,3.83l-1.15,-1.03ZM297.62,196.66l-2.81,-3.08l3.43,-3.66l7.2,1.64l3.36,-1.6l1.84,0.21l0.67,-1.17l1.68,-0.67l-0.5,-1.1l-6.96,1.23l-5.82,-1.7l3.14,-3.59l12.45,1.14l-0.22,-1.42l-7.93,-1.17l-2.24,-1.68l1.93,-0.92l0.07,-1.43l-0.97,-0.43l0.79,-1.37l2.92,-1.11l7.07,3.4l1.21,-0.14l0.02,-0.84l-1.49,-0.63l-1.37,-1.85l-2.82,-0.86l-0.3,-0.94l0.54,-1.4l2.58,-1.59l2.72,0.22l1.32,-0.67l0.16,0.75l1.65,0.26l1.13,1.18l-0.79,2.25l0.19,4.4l6.19,-0.25l2.12,2.71l-0.7,1.1l0.22,1.97l3.12,3.75l-2.83,0.82l-0.56,1.29l3.73,0.5l0.64,2.56l-0.82,2.31l0.43,2.83l4.71,-0.03l0.43,0.9l2.08,0.36l-3.46,15.46l-1.6,-0.54l-0.96,1.16l-1.49,-0.26l-0.29,2.07l-7.3,3.12l-5.1,0.78l-4.59,-0.96l-2.46,-1.54l-2.22,-3.46l-0.83,-2.34l0.38,-0.84l4.45,-1.61l3.46,0.41l1.07,-1.88l1.85,-0.47l7.54,1.25l4.33,-3.19l1.09,-1.4l-0.22,-0.82l-1.89,-0.86l-2.08,1.97l-1.45,-0.93l-1.17,0.94l-2.49,-0.21l0.89,-2.14l-0.81,-0.78l-1.01,1.19l0.41,-1.64l-0.83,-0.71l-1.06,3.09l-0.92,0.5l-0.8,0.07l-0.46,-1.42l-0.9,1.31l-3.84,-0.33l0.32,-1.39l1.77,-0.52l-0.23,-1.02l-1.17,0.31l1.46,-2.76l3.52,-1.68l-0.97,-0.99l-2.7,0.74l-0.38,-2.37l-0.91,0.33l-1.8,4.91l-1.27,-2.51l-1.05,0.74l1.08,3.03l-1.36,2.08l-3.46,1.29l-0.74,-0.72l0.75,-4.37l-1.76,1.25l-1.37,-1.35l-0.18,2.89l-0.93,1.06l-2.19,-2.46l1.46,-1.09l-0.26,-0.63l-1.29,0.17l0.9,-2.21l-2.29,-0.11l-1.24,1.13l-1.56,-1.19ZM327.94,134.68l3.9,-1.93l-0.25,1.87l0.84,0.29l1.5,4.62l-3.72,1.43l-2.27,-6.26ZM321.01,163.06l1.64,-1.4l4.15,0.26l1.23,1.73l-0.05,1.17l-1.23,1.11l-5.74,-2.86ZM326.03,261.21l-0.4,-1.5l-1.62,-0.83l-0.63,-3.15l3.92,1.28l-1.26,4.19ZM325.43,263.42l0.07,-0.72l0.09,0.01l0.24,0.88l-0.39,-0.16ZM260.9,269.58l0.42,-3.04l1.57,-3.05l4.59,-3.99l3.77,-0.66l0.24,-2.37l-1.72,-0.97l-0.37,-1.62l3.89,-3.4l2.37,-0.69l4.6,-3.62l3.27,-0.17l2.61,-1.39l7.37,-1.23l6.65,-2.24l1.96,1.51l0.76,4.13l-2.16,5.66l0.16,1.56l-2.64,0.65l-0.45,1.8l-2.29,1.2l0.2,1.21l1.63,0.68l3.03,-1.33l1.9,1.35l2.3,-2.14l0.07,-0.89l-0.92,-0.59l2.08,-2.48l2.58,-1.51l5.25,4.03l4.41,4.94l-0.93,2.75l-1.69,1.01l0.02,0.76l-3.52,1.88l0.79,1.66l-0.7,2.49l4.24,-2.64l0.94,2.06l0.72,-0.16l0.21,-2.62l0.92,-1.22l1.44,-0.1l0.63,-1.52l0.55,0.59l-0.5,1.33l1.36,1.71l0.83,-0.66l-1.02,-1.51l0.87,-0.51l1.37,2.93l-11.48,51.42l-17.46,-4.16l-0.83,1.68l-1.14,0.12l0.0,0.67l1.45,0.6l-2.71,-0.2l0.39,-3.59l-29.83,-8.45l-1.36,2.79l1.84,5.58l-0.46,-0.2l-2.15,-3.26l0.13,-4.89l3.8,-1.52l18.25,1.15l5.68,2.72l1.35,-0.09l6.08,3.41l0.65,-0.81l0.71,0.47l2.24,-0.65l4.22,1.29l0.77,-0.31l0.09,-1.36l-0.57,-0.96l-2.71,-0.99l-0.85,-3.09l-4.83,-2.52l-1.74,-2.41l-1.7,-1.21l-0.85,0.44l-2.39,-2.06l-1.72,0.58l-1.18,-0.69l-1.38,0.56l-7.58,-0.75l-1.02,-0.84l-2.18,-0.06l-1.02,-1.65l-9.36,-2.1l-0.35,-2.73l-2.44,-4.16l0.06,-2.79l4.75,-1.74l6.54,0.4l1.06,-0.88l3.98,-0.43l3.24,0.9l0.7,-1.05l-1.86,-1.16l1.71,-0.55l2.51,1.65l2.88,-0.86l0.17,-0.64l-2.9,-0.09l0.25,-1.03l-2.57,-0.99l-11.15,0.14l0.4,-1.13l-1.05,-1.55l-1.28,0.93l0.71,1.01l-0.39,0.69l-0.78,-0.88l-0.84,0.41l-2.22,-0.81l-0.42,-1.04l0.66,-1.04l4.31,-0.03l0.25,-0.72l-1.15,-1.3l1.24,-0.2l0.19,-0.81l-2.72,-0.71l-1.94,1.08l-1.2,-2.15l-1.98,-0.51l-1.25,0.56ZM315.33,268.23l-0.79,0.05l-0.04,-0.21l1.17,-0.5l-0.34,0.67ZM272.66,162.85l4.64,-4.16l5.15,0.75l3.53,-4.51l5.56,-1.78l0.35,-1.57l1.23,-0.32l3.69,-3.82l3.01,-1.44l2.09,-2.67l6.23,0.54l3.18,3.53l1.58,0.17l0.36,-0.74l1.02,0.52l1.46,-1.56l-0.22,-0.81l-1.45,-0.48l-0.12,-0.94l2.0,-0.8l0.09,-0.67l1.38,0.07l3.52,6.32l-0.71,1.29l-4.29,0.72l-1.27,1.18l0.12,2.98l1.96,2.78l-0.93,0.62l-1.65,-1.71l-0.93,0.51l1.02,3.24l-0.08,2.78l-2.83,1.97l-4.16,-0.31l-0.74,0.87l-0.38,3.99l-1.34,0.94l-2.07,-0.19l-1.48,-3.82l2.69,-6.09l1.64,-1.76l-0.38,-1.79l-1.62,1.02l-1.49,-0.63l-0.68,1.29l-1.12,0.01l-0.08,3.74l-1.39,0.75l-1.27,-1.71l-1.12,0.81l-0.39,1.07l1.24,1.48l-0.17,2.29l-0.71,0.92l-1.58,0.04l-0.8,2.2l-1.34,1.07l0.23,-6.34l-2.15,0.29l-0.4,3.84l-1.82,1.22l0.98,2.96l-0.86,-0.21l-2.15,2.57l-0.71,0.02l-0.37,-1.45l-2.02,1.61l1.52,-3.13l0.0,-1.45l-1.3,-0.19l1.22,-3.06l-0.72,-1.92l-1.64,0.63l-1.1,3.43l-2.24,1.0l-1.95,-3.6l-1.81,-0.41l-0.67,1.27l-1.44,0.51l-0.88,-0.46l2.44,-4.16l-0.84,-1.36l-1.28,0.23ZM299.5,310.16l0.53,0.27l0.45,0.46l-0.39,-0.06l-0.6,-0.66ZM287.58,182.41l6.55,-5.43l2.92,-0.38l3.03,-2.49l0.92,0.33l-1.17,2.49l-6.46,7.49l-2.56,1.32l-1.02,-1.78l-2.21,-1.55ZM219.8,246.37l1.52,-3.11l1.68,-0.43l-0.15,-1.48l1.45,-0.33l2.92,-3.8l3.01,-1.09l-0.3,-1.38l1.39,-1.18l0.37,-3.63l0.67,0.55l3.73,-0.49l0.42,-1.4l-1.4,-2.89l1.96,-1.12l3.44,-4.93l3.16,-1.5l0.96,-2.46l1.55,-0.35l1.1,-1.28l0.25,-1.97l-1.74,-1.84l1.12,-10.83l12.68,2.22l6.68,0.2l2.16,1.86l0.24,2.19l3.74,4.86l2.46,1.93l-1.97,2.47l0.11,1.84l0.74,-0.05l0.38,-1.36l2.29,-2.06l1.47,0.76l-0.4,2.36l-1.46,1.97l0.34,0.56l1.8,-0.08l1.7,-1.79l0.09,-1.82l0.98,-0.4l4.16,-0.06l3.39,2.19l2.27,4.11l3.45,9.67l1.44,1.82l0.81,3.18l-0.08,1.01l-3.31,1.88l-4.92,0.78l-21.54,8.24l-3.03,5.52l-0.93,0.52l-2.88,1.16l-2.62,-1.86l-0.7,3.3l-3.38,3.51l-1.26,5.18l-2.89,3.36l-5.75,0.43l-0.32,-1.92l-1.09,-0.53l-4.35,3.08l-3.99,0.69l-1.69,1.33l-1.8,-0.62l-0.51,-1.09l-0.33,-12.47l-5.62,-8.84l1.12,0.8l0.5,-1.07l-5.29,-2.0ZM279.35,469.63l-0.81,0.33l-0.13,-0.34l0.26,0.05l0.67,-0.04ZM278.07,469.33l-0.38,-0.18l-0.06,-0.16l0.41,0.07l0.03,0.27ZM275.16,468.95l-0.59,0.05l-0.03,-0.13l0.49,0.0l0.13,0.08ZM281.78,464.95l-4.05,-0.88l-0.14,-0.35l4.03,1.11l0.15,0.12ZM276.6,463.76l-0.13,0.17l-0.35,-0.58l0.41,0.41l0.07,0.01ZM276.39,464.3l0.36,0.54l-0.9,1.06l-6.11,-0.67l6.65,-0.93ZM269.08,465.37l-0.54,0.79l-1.14,0.56l0.84,-1.17l0.84,-0.18ZM278.74,175.78l-0.49,-0.42l1.55,-0.55l-0.56,0.63l-0.51,0.34ZM280.74,173.18l-0.05,-0.53l0.37,-0.4l-0.17,0.44l-0.15,0.48ZM265.82,295.59l0.41,0.33l-0.56,-0.18l0.16,-0.15ZM262.97,472.57l0.3,-0.5l1.01,-0.75l0.1,0.75l-1.41,0.49ZM264.57,470.49l-0.08,-0.04l0.12,0.01l-0.04,0.03ZM261.08,475.09l1.41,-0.74l0.34,0.01l-1.59,0.92l-0.17,-0.19ZM260.71,477.06l0.01,-0.01l0.26,-0.29l-0.23,0.28l-0.05,0.03ZM252.27,478.12l1.89,-0.13l2.85,-0.98l-2.56,1.2l-2.18,-0.09ZM253.39,475.23l0.88,-0.91l2.58,0.13l-1.27,0.75l-2.19,0.02ZM253.56,482.0l0.82,-1.36l0.08,0.05l0.52,0.89l-1.41,0.42ZM255.87,479.98l0.06,-0.04l-0.0,0.02l-0.05,0.02ZM252.51,480.41l0.2,-0.7l0.82,-0.39l-0.5,1.23l-0.52,-0.13ZM248.01,474.32l0.05,0.02l-0.05,-0.01l-0.0,-0.0ZM248.08,474.34l0.75,0.13l-0.24,0.0l-0.51,-0.13ZM221.25,374.75l-0.01,0.26l-0.25,-0.1l0.2,-0.1l0.06,-0.06ZM220.4,374.64l-0.4,-0.18l0.34,0.07l0.06,0.11ZM225.82,389.55l2.08,-1.35l0.69,0.67l-1.45,0.55l-1.32,0.13ZM226.56,364.82l0.55,-0.0l0.3,0.2l-0.94,0.2l0.1,-0.39ZM212.26,480.34l1.69,-0.47l1.05,1.42l-1.79,-0.03l-0.96,-0.92ZM198.62,367.19l0.57,-0.1l0.15,0.16l-0.12,0.1l-0.6,-0.17ZM192.01,266.81l0.3,-0.37l0.16,0.54l-0.24,0.16l-0.23,-0.33ZM134.31,262.76l0.12,-0.19l0.63,-0.37l-0.53,0.46l-0.22,0.1ZM132.82,267.14l0.27,0.07l0.02,0.08l-0.15,0.11l-0.14,-0.25Z",
            "name": "Northwest Territories"
        },
        "nu": {
            "path": "M694.52,496.9l1.45,-0.41l1.5,1.75l-1.78,-0.16l-1.18,-1.18ZM682.85,477.29l0.06,-0.73l3.09,-1.55l2.28,-0.08l0.16,0.84l0.97,-0.11l0.46,2.5l-0.68,2.21l-0.48,-0.03l-0.07,-0.92l-1.47,0.05l-4.32,-2.18ZM458.76,294.96l0.81,-2.89l2.15,-0.98l0.63,-1.06l-0.43,-1.03l-1.73,-0.01l-0.34,-2.89l1.13,-2.2l0.18,-3.94l1.05,-0.04l0.7,-1.09l-0.42,-2.4l1.76,0.32l0.23,-0.85l-1.04,-1.03l1.57,-7.74l1.62,-0.71l-0.82,-1.1l0.61,-0.81l1.96,0.32l-0.1,-0.83l-1.25,-0.66l0.98,-1.74l5.77,-6.74l3.91,-2.04l3.49,-1.3l9.14,0.53l1.4,1.76l-4.2,4.64l-2.77,4.99l-3.85,10.54l-0.33,3.11l0.51,1.79l2.87,3.81l-0.94,7.56l0.38,2.71l2.15,4.67l4.81,6.14l3.81,1.67l0.83,2.53l-2.26,-0.26l-0.55,1.17l-1.27,0.17l-0.32,1.27l-1.2,-0.52l-1.85,0.77l-2.42,2.82l-3.81,1.88l1.46,0.7l2.86,-0.76l3.54,-3.28l1.99,-0.62l2.28,0.52l1.59,-0.81l-0.01,0.92l-1.91,0.79l1.09,0.43l0.39,3.17l1.59,0.09l0.64,-1.5l-0.58,-4.42l0.82,-0.76l-0.95,-1.67l0.13,-2.55l1.52,-1.47l-0.77,-4.04l-1.08,-0.95l-1.26,0.21l-0.19,0.88l-2.62,-0.82l-1.39,-1.8l0.57,-0.85l-1.02,-2.06l-2.93,-2.0l1.72,0.19l-0.23,-0.81l1.6,-0.72l0.77,-1.71l-0.74,-1.32l0.95,-0.96l2.07,0.23l3.15,2.51l2.6,3.96l0.62,-1.59l-2.0,-3.48l-1.33,-0.47l-0.71,-1.71l-1.53,-0.76l0.54,-1.17l1.87,-0.1l0.6,-1.22l-2.53,0.16l-0.02,-1.86l-2.05,1.96l-2.72,-1.64l-0.66,-1.5l0.9,-0.86l-1.62,-1.3l-0.08,-5.91l0.49,-1.27l2.32,0.46l8.46,3.95l0.2,-0.85l-7.54,-4.52l-1.19,-2.97l4.62,1.57l3.94,0.35l1.4,0.94l0.52,0.05l-0.06,-0.89l-1.15,-1.13l-5.25,-1.25l-3.8,-1.83l0.2,-2.03l1.57,-1.49l2.59,3.45l0.84,-0.07l-1.98,-3.94l2.49,-1.67l2.45,0.71l0.73,2.42l1.01,0.58l-0.44,-4.04l-2.15,-1.01l1.91,-1.63l2.87,-1.84l0.95,0.17l1.13,-1.93l8.12,-0.24l2.03,3.56l0.89,6.26l3.98,2.05l0.4,5.23l2.94,3.88l-6.36,11.46l0.38,0.63l1.13,-0.55l2.05,-4.19l1.74,-1.68l0.11,2.17l-1.34,1.85l-0.46,2.25l-0.79,0.26l2.08,1.84l-1.87,0.37l-0.52,1.02l0.41,0.94l1.41,-0.3l-0.92,3.15l0.58,0.45l1.15,-0.69l0.41,-1.77l2.28,-1.73l0.09,-1.6l-0.82,-1.04l1.41,-0.97l-0.47,-1.72l2.0,2.6l2.0,0.71l0.49,-0.54l-3.79,-3.93l1.65,-2.2l1.33,1.64l-0.92,2.03l0.5,1.05l1.2,-1.41l0.58,1.55l0.67,0.07l-0.54,-2.39l0.82,-2.03l2.22,2.2l-0.01,4.19l-0.91,2.69l3.67,0.78l1.42,1.23l0.72,-0.44l-0.94,-1.98l-2.18,-1.13l-0.11,-2.89l2.0,1.09l2.74,5.74l2.56,1.06l0.37,-0.6l-0.59,-0.47l0.48,0.2l0.58,1.0l0.46,0.13l0.31,-2.04l-1.44,-0.54l-1.99,-2.7l-1.25,0.05l-1.18,-2.89l-3.1,-1.8l0.23,-2.0l0.81,-0.64l1.53,3.78l0.7,-0.56l-0.84,-2.73l4.17,1.24l1.67,3.05l0.31,-1.89l1.65,-0.35l2.58,0.69l-1.25,-1.26l-2.89,-0.23l-4.95,-2.4l-2.16,-1.59l-0.28,-1.48l1.88,-3.33l3.54,-2.72l4.48,-0.37l1.9,2.09l3.11,0.45l1.17,2.53l0.66,-0.47l0.09,-2.19l4.86,1.25l2.44,4.69l-1.4,2.86l-2.51,-0.03l-2.91,2.14l-1.64,4.99l0.34,0.81l0.78,-0.31l1.65,-4.7l1.99,-1.69l2.53,0.44l-2.18,1.63l-0.21,3.99l-0.7,2.19l-1.44,0.77l0.37,0.84l2.18,-1.16l0.87,-5.95l2.2,-1.18l0.54,-2.42l4.77,0.15l0.92,0.9l0.31,4.15l-1.97,0.09l-0.85,2.3l-4.48,1.99l0.51,0.8l2.58,-0.61l-2.65,3.27l0.23,0.7l4.5,-4.29l-0.72,2.3l-1.41,0.53l-0.65,1.37l0.51,0.92l1.59,-1.43l-0.53,1.24l1.75,1.04l-1.73,5.16l0.85,-0.17l2.17,-4.96l-1.21,-2.74l0.93,-3.23l1.84,-1.94l-0.53,2.66l1.29,1.72l0.43,-0.58l-0.72,-1.5l0.93,-2.99l1.3,-0.61l0.43,0.98l-1.55,5.36l-1.77,1.59l0.33,0.71l1.37,-0.82l-0.44,2.48l0.69,0.43l-0.72,1.87l0.74,0.32l1.26,-3.14l0.14,-4.67l0.6,-1.12l0.55,0.31l0.3,4.12l0.97,0.29l-1.3,7.07l1.74,-1.05l-0.01,-3.42l1.24,-2.36l1.43,0.77l-1.0,1.14l0.37,2.74l-0.87,1.71l0.76,1.2l0.75,-0.22l-0.38,-1.22l0.66,-0.72l0.18,-3.34l1.11,-0.99l-0.55,-3.23l1.39,-0.8l-0.7,-1.6l1.11,-1.15l-0.11,-2.23l7.09,1.89l3.84,4.21l-1.34,4.44l-2.64,-0.48l-1.5,1.0l-1.3,4.83l-2.72,1.93l0.49,0.59l3.05,-1.76l0.6,0.28l-0.76,3.18l-1.54,1.42l0.84,1.0l1.6,-1.56l0.59,-2.29l3.77,-3.12l3.02,-0.31l-0.93,-1.5l0.25,-2.25l1.71,-2.07l1.16,0.31l1.43,3.02l-0.98,1.81l-0.07,2.43l-1.64,1.47l-0.41,2.01l-2.89,0.05l-0.55,3.73l-1.4,0.93l0.45,0.64l1.24,-0.56l-0.27,2.28l0.79,0.6l1.26,-6.02l1.72,-0.08l0.36,5.62l-0.83,5.48l0.79,0.18l0.98,-2.69l0.71,-8.86l-0.45,-2.09l6.26,-6.82l-0.21,2.66l-3.02,2.97l0.77,3.83l1.58,-1.31l-1.02,-1.74l2.5,-0.4l0.18,-1.3l1.9,-1.09l0.75,-2.36l1.58,-0.17l1.09,1.02l6.27,2.05l-0.34,3.45l-0.45,-1.6l-0.83,0.0l-0.14,3.21l-4.87,2.77l-2.19,2.43l-0.3,1.67l-1.71,2.25l0.92,0.23l0.52,-1.07l1.16,0.6l-2.02,0.92l-1.88,3.28l1.42,0.23l1.66,-2.94l2.17,-0.77l-0.68,-2.21l0.4,-1.35l6.26,-2.93l-0.07,3.04l-1.99,1.87l-1.36,3.53l-2.35,0.15l-0.71,1.11l-0.46,3.71l0.27,0.82l0.83,-0.16l0.69,-3.99l2.71,-0.23l1.41,-3.32l0.91,-0.9l2.28,-0.43l0.37,-2.31l1.97,-2.33l-1.27,-1.13l0.67,-2.95l2.01,0.73l3.74,3.23l1.93,2.18l1.76,3.93l-6.27,0.46l-1.77,3.58l-2.6,0.34l-3.44,3.23l-4.02,0.25l-1.72,0.89l0.07,0.9l1.28,0.36l1.62,-1.27l2.97,0.23l4.53,-2.87l4.88,1.63l5.57,-1.45l3.67,1.66l1.55,2.31l-0.24,1.15l-3.01,-0.29l-2.5,1.13l-5.72,-1.84l-6.46,0.58l-1.45,2.21l0.35,0.67l2.06,-1.92l4.11,0.37l1.46,-0.52l0.8,0.68l-6.03,1.08l-0.3,0.6l0.9,0.46l2.07,-0.62l-3.26,2.35l0.4,0.95l0.8,-0.48l0.07,2.84l1.08,-0.89l0.01,-2.02l2.87,-2.49l5.01,1.6l-1.57,1.24l-1.72,-0.31l-2.31,1.01l-0.02,0.97l1.91,-0.56l1.88,0.31l0.15,0.86l-2.9,0.05l-0.19,0.73l0.95,0.26l-1.58,0.41l0.24,1.08l-5.42,-0.71l-0.86,0.94l0.74,1.32l2.91,-0.38l0.31,1.19l0.89,-0.69l5.36,0.01l-1.22,1.14l-3.09,0.27l-0.95,1.34l0.31,0.64l3.61,0.04l0.45,-0.89l3.35,0.67l0.56,2.64l0.79,-0.88l-0.22,-2.22l1.72,-0.57l-0.53,0.96l0.8,2.28l-1.6,1.41l0.31,1.5l1.79,-1.47l-0.6,1.28l0.8,0.33l0.96,-0.69l0.55,-2.01l0.58,0.43l0.56,-0.92l0.88,0.18l-1.47,1.59l0.12,1.99l-1.73,0.21l0.58,0.87l1.94,-0.08l0.15,-2.53l1.34,-1.3l1.77,0.49l-0.39,4.49l0.95,0.37l0.82,-2.33l0.77,2.57l0.61,-0.83l-0.18,-2.76l1.41,-0.1l-0.96,1.14l1.84,-0.34l0.55,0.95l-0.76,3.14l-1.92,-0.02l-0.47,1.06l2.77,0.36l0.79,0.91l0.09,-3.94l1.35,-1.57l1.03,5.61l1.15,2.05l-0.29,-4.16l0.97,-2.03l-0.49,-1.05l1.69,-1.02l-0.18,4.17l3.55,3.47l0.41,-0.64l-0.92,-2.03l-1.79,-1.22l0.3,-2.6l1.38,-1.36l0.53,-2.01l2.04,0.51l-2.13,1.4l0.88,0.7l-0.9,1.04l0.09,1.47l0.94,-0.04l-0.8,1.83l0.42,1.53l0.85,0.05l0.02,-1.75l1.06,-1.77l0.29,1.67l1.08,0.0l0.39,-3.01l1.86,0.94l-1.5,1.87l0.5,0.54l2.2,-1.87l0.45,1.91l1.53,-0.23l0.25,1.77l-2.01,0.91l-0.13,0.76l1.32,0.31l1.95,-0.85l1.02,1.54l-0.3,0.73l-6.13,1.04l0.32,0.64l3.99,-0.1l-3.41,1.94l0.02,1.07l4.64,-2.24l-3.23,3.11l0.68,2.8l0.78,-0.41l0.29,-2.67l3.86,-2.21l0.36,-1.11l2.54,-0.87l0.14,2.09l-1.33,3.04l1.01,0.96l0.04,-1.63l1.77,-2.6l-0.25,-2.7l1.02,-0.27l0.09,-1.48l1.27,1.36l-1.64,2.84l1.15,2.57l-1.97,1.92l0.05,1.54l-1.63,0.7l0.46,0.73l2.68,-1.15l0.3,2.12l0.91,0.15l-0.3,-3.92l2.69,-2.39l1.91,6.56l0.57,-3.76l-0.93,-2.78l0.9,-0.23l2.94,3.38l0.85,-0.11l-2.02,-3.16l0.89,-1.25l-0.59,-1.65l0.99,-0.64l0.59,2.76l1.4,0.67l2.48,-1.02l-0.42,1.17l1.9,-0.0l2.62,2.39l-1.44,1.9l-1.63,-1.41l-2.47,-0.4l-1.53,2.28l1.11,0.54l0.85,-1.1l1.16,-0.0l2.51,1.93l-2.0,1.12l-0.45,1.57l3.33,-1.15l0.33,0.62l-1.74,0.77l-0.68,1.22l-2.06,0.07l-0.94,-1.55l-3.33,0.22l-0.67,1.52l1.19,0.3l0.67,-0.67l1.35,1.66l-1.47,1.5l-1.69,-1.64l-1.16,0.52l2.54,2.46l1.37,-0.8l3.11,0.43l1.48,1.82l-1.48,1.02l-1.88,-0.46l-2.09,0.56l-1.9,-1.83l-1.15,1.0l2.69,2.02l3.48,-0.01l-0.09,0.93l1.44,1.25l-1.99,0.71l-2.48,-1.31l0.46,1.66l2.55,1.16l-1.81,-0.21l-1.18,0.67l1.03,2.77l-1.94,-0.19l-3.62,-4.71l-1.02,0.17l2.44,4.42l-2.56,1.36l0.87,0.62l2.74,-0.07l-0.47,1.12l-1.48,-0.95l-0.06,1.62l0.97,0.67l-0.85,0.57l3.04,2.42l-0.33,2.51l0.71,1.05l0.88,-0.01l-0.39,3.16l-0.71,-0.48l-0.98,0.83l0.81,-0.75l-0.37,-0.81l-1.27,0.7l-0.49,-2.99l-0.88,0.34l-0.38,1.72l-0.85,-0.15l-0.05,1.31l-0.79,-0.78l0.87,-1.93l-0.86,-0.2l-1.53,1.14l-0.15,-4.85l-0.54,-0.34l-1.28,2.78l0.46,3.9l-1.3,-1.32l0.32,-0.69l-1.2,-0.53l-0.74,0.72l1.15,-1.55l-1.02,-0.51l2.37,-1.47l0.14,-1.53l-0.66,-0.44l-1.92,1.03l-2.38,2.45l-0.68,-0.57l-0.39,-0.92l1.43,-0.95l1.17,-3.45l-1.8,0.09l-0.53,2.51l-1.2,0.35l-0.18,-0.92l1.2,-1.96l1.26,-0.6l-0.05,-0.89l-2.03,0.6l-1.02,1.66l-1.71,0.12l0.07,-1.83l-0.9,-0.19l0.37,-2.25l2.59,-2.46l1.89,0.05l-1.12,-1.26l-0.07,-3.39l2.02,-3.11l-0.26,-1.14l-2.75,2.4l-0.76,4.42l-2.19,1.34l-0.68,1.46l-3.64,1.6l-0.61,-1.34l1.9,-3.13l0.51,-3.0l-0.49,-1.87l-0.82,0.26l-0.42,4.19l-1.85,1.91l-1.96,-1.27l0.08,-1.8l-0.91,1.0l-1.47,-0.11l-0.22,-1.13l-0.8,-0.16l0.48,-1.42l-1.86,1.32l-0.01,-1.41l-1.07,0.18l-0.29,-3.03l-3.02,-0.41l-0.33,0.65l1.3,1.39l-1.32,0.44l-3.38,-1.1l-1.64,1.75l0.65,0.65l3.31,-0.23l1.45,1.71l-1.41,-0.44l-0.63,0.73l2.54,1.48l-0.75,0.54l-3.37,-2.45l-1.21,0.06l-0.62,-1.05l-1.59,0.71l2.58,2.79l0.71,2.23l4.32,1.87l1.25,2.89l-1.14,-0.1l-0.36,0.99l-0.95,0.19l-1.16,-0.82l-0.63,0.35l0.43,1.06l-0.9,0.16l-1.24,-1.61l-0.02,-1.8l-2.32,-0.81l-0.78,-1.44l-1.08,0.43l-1.36,-1.55l-0.54,0.71l0.68,1.2l-2.73,1.06l1.68,0.75l1.7,-0.77l1.93,1.66l0.98,-0.34l-0.28,-0.56l0.87,0.64l-0.92,0.94l-1.22,-0.38l0.54,2.52l1.65,0.43l0.57,2.33l2.14,-0.51l-0.31,1.6l0.98,0.82l-0.66,0.16l-0.36,1.53l1.06,2.13l1.86,-3.65l2.1,-1.36l1.0,0.28l-0.84,3.01l1.43,0.98l1.74,-0.66l0.42,0.5l-2.45,2.15l1.09,0.59l0.61,-0.73l0.74,0.38l0.35,1.81l1.87,0.07l-0.75,2.75l2.93,0.13l0.51,0.75l-0.6,0.81l1.04,0.41l1.04,2.94l1.07,-0.96l-1.47,-4.21l3.15,2.35l1.08,-0.49l0.21,1.48l-1.08,0.93l1.08,0.23l0.57,1.18l0.9,-0.33l-0.13,-1.23l0.04,-0.29l0.53,1.04l0.72,-0.24l1.33,1.16l0.75,-0.38l-1.77,-2.91l0.08,-1.17l0.38,1.13l0.64,-0.23l0.45,2.13l0.78,-0.34l-0.19,-1.13l0.42,0.49l0.19,1.22l-1.03,1.45l0.96,2.23l1.61,-0.41l1.21,0.68l2.52,-1.24l-1.19,1.69l0.86,1.29l-2.62,0.09l-1.03,1.31l1.69,-0.21l-0.52,1.12l2.32,0.04l-0.54,1.3l1.7,-0.32l0.74,2.53l2.23,-0.34l0.5,0.75l0.9,-1.34l1.08,0.09l-1.53,1.95l-0.46,2.02l0.95,0.96l2.14,-0.06l1.74,1.04l-0.27,1.18l1.64,3.22l-0.97,0.64l1.28,0.68l-0.55,1.25l0.9,0.27l-0.51,0.23l-1.11,-0.91l-3.12,-5.31l-2.87,-2.59l-1.87,0.31l3.78,3.29l-0.64,0.99l0.77,1.77l-0.59,0.67l2.56,1.98l-1.19,-0.05l-0.53,1.14l1.27,1.72l2.63,0.42l-0.39,0.88l0.97,1.02l-0.06,1.3l1.26,0.59l-0.85,0.68l-2.59,-1.8l-0.65,0.89l-1.24,-0.34l4.6,6.01l-1.04,1.6l-1.8,-2.14l0.42,-1.04l-1.58,-2.97l-2.0,2.36l-1.49,-1.33l-0.57,-2.67l-2.36,1.98l-0.47,-1.12l-2.59,-1.17l-0.36,0.86l2.3,2.5l-2.22,-0.51l-3.65,-4.53l-0.14,-1.92l-0.72,0.04l-0.26,2.36l-0.83,0.26l0.7,1.87l-1.38,-1.03l0.36,-0.84l-0.93,-2.4l-0.93,0.26l0.37,2.04l-1.2,-0.16l-8.11,-7.18l-0.4,0.91l3.71,6.15l-4.19,-3.47l-0.79,0.11l-1.1,-1.62l-0.72,0.95l-1.29,-1.34l-2.46,-0.28l-0.19,0.97l-2.23,0.29l2.05,2.1l-0.06,0.88l6.19,4.57l1.06,1.94l2.68,0.57l0.26,1.45l0.99,-1.03l1.0,0.23l-0.45,0.99l0.92,1.52l1.18,0.53l1.56,-1.7l1.35,1.12l-0.52,0.84l1.63,-0.42l-0.25,1.11l1.32,-0.23l1.91,2.8l1.63,-0.84l2.41,1.54l0.95,2.34l1.55,0.16l-0.92,0.86l0.36,0.76l1.38,0.89l3.39,-0.2l-0.06,2.36l-0.75,-0.65l-0.63,1.02l1.25,1.91l1.95,1.23l-3.51,1.15l-3.64,-1.76l-3.28,0.37l-1.57,-0.92l-0.43,0.51l-0.56,-1.0l-11.24,0.57l-3.15,-1.87l-1.57,0.4l-1.67,-0.82l-0.9,-0.67l-0.77,-2.65l-0.67,1.08l-0.84,-0.79l-0.49,0.44l-0.5,-0.52l1.1,-0.91l-0.18,-1.79l-4.59,-0.09l0.32,1.1l-1.13,-0.32l-0.75,1.07l-1.42,0.12l-2.52,-1.63l-2.55,0.01l-0.22,-0.74l-1.26,-0.11l-0.63,-1.48l1.01,-1.89l-1.32,-0.83l-0.81,0.48l-0.15,1.58l-1.2,-0.09l-0.26,1.25l-1.15,-0.06l-0.18,-1.19l-2.62,-0.45l-0.01,-1.66l-1.15,-0.38l-0.4,-2.19l2.64,-1.94l1.06,-3.03l-2.33,0.05l-0.77,-0.38l0.15,-1.01l-2.36,-0.48l-1.64,-1.22l-1.53,2.05l-1.14,-0.8l1.0,-2.68l-1.09,0.32l-0.3,-0.9l-0.73,0.09l-0.88,2.78l-1.46,-0.6l-0.12,-2.77l-0.89,-1.25l-0.61,-0.22l-0.24,1.63l-0.64,-0.07l-1.06,-2.78l-1.29,-0.25l-0.78,-1.57l-2.81,-2.03l1.32,-3.66l-1.91,-1.59l-0.6,0.96l0.68,1.51l-0.77,-1.17l-0.98,0.41l-1.26,-1.16l-0.16,2.19l-1.68,-0.74l-0.59,0.55l-1.43,-3.04l-0.89,1.86l-1.92,0.44l-0.32,0.92l-1.6,-1.78l1.46,-2.42l-1.95,-1.23l-0.97,1.2l0.21,1.06l-2.14,0.85l5.01,3.85l-1.25,0.58l1.23,1.55l-1.02,1.15l-4.16,-1.4l-0.56,0.74l-5.24,-2.36l-0.66,0.66l0.31,1.11l1.25,1.18l-1.44,-0.25l-0.25,0.79l1.33,1.25l-1.42,-0.29l-3.18,1.42l-0.16,0.85l-2.85,0.86l0.25,1.83l-3.37,-1.4l-1.67,1.18l-1.64,-1.8l-1.4,-0.53l-0.65,1.01l-1.01,-0.4l0.18,-0.96l-1.38,0.16l0.23,-0.61l-1.94,-1.93l-0.47,-1.74l0.58,-3.71l-0.93,-2.07l3.67,-4.09l2.52,-1.32l-1.88,-2.8l1.66,-1.13l-1.25,-1.47l2.48,0.81l3.41,-0.38l7.68,2.38l0.82,1.41l2.51,1.24l0.41,1.5l-1.87,1.27l1.01,1.62l0.99,0.07l-0.18,1.52l1.75,0.96l0.9,-1.11l-1.68,-3.68l1.26,-0.56l0.06,-3.01l-0.99,-0.23l-0.4,1.88l-1.94,-2.57l-3.27,-1.88l1.79,-0.4l0.8,0.76l3.16,0.01l1.08,-0.93l-0.22,-2.0l2.56,-0.54l1.92,0.93l2.85,-4.62l1.06,0.43l1.52,-0.66l0.97,1.1l2.11,-0.37l-3.09,-6.4l-2.77,-1.27l-4.63,-4.88l6.7,-9.38l0.47,-2.31l2.72,-1.98l-0.57,-1.95l0.71,-4.69l2.8,-1.64l0.84,-1.87l0.01,-2.66l-1.36,-0.67l-2.24,-5.92l-1.49,-0.85l0.01,-2.17l-1.63,-1.76l-1.09,-0.18l-2.05,-6.75l-1.27,0.29l-1.56,-1.11l0.71,-1.45l-0.85,-0.81l-1.85,2.62l-2.05,-0.67l-0.84,-1.08l1.1,-2.31l-1.12,-3.85l-3.03,-0.48l-0.77,0.78l2.8,3.56l-3.02,-0.07l-1.14,-0.93l-1.95,-2.33l0.9,-2.17l-1.15,-0.58l-0.42,-1.6l-1.96,-0.45l2.21,-1.04l-1.72,-1.53l-2.01,1.99l-0.14,2.43l-3.08,-2.24l-0.47,3.0l-4.76,4.7l-1.75,0.63l-0.45,-1.23l0.68,-2.68l-0.97,-0.74l-0.22,-1.81l1.19,-0.86l3.37,0.52l1.44,-1.92l1.11,-0.14l-0.14,-3.68l-3.42,-2.68l-1.7,-0.62l-1.39,0.45l-2.08,-2.49l0.71,-1.96l1.85,0.5l-0.06,-1.84l-1.74,-0.47l-1.73,0.58l-0.26,0.56l0.86,0.42l-0.81,1.64l-0.82,-0.16l0.17,-1.07l-1.38,0.87l-1.26,-0.62l2.11,-0.67l0.62,-1.2l-0.94,-1.07l0.67,-1.5l-1.74,0.37l-0.4,-0.83l-1.71,0.78l1.88,-1.51l-0.3,-1.04l-4.26,3.03l-1.32,-7.62l-1.7,-1.3l-1.24,0.89l-1.16,-0.49l-0.97,1.04l-1.01,-1.45l0.52,-1.14l-1.65,-0.04l-1.43,-2.16l-1.85,0.18l0.94,-1.83l1.32,0.06l-2.58,-2.93l-1.55,1.42l0.97,0.71l-0.47,1.38l-0.86,-0.66l-1.19,1.92l-1.26,-1.9l-2.0,-0.79l-0.61,-1.5l-1.55,-0.0l-0.56,0.88l-1.0,-2.07l-1.84,0.25l-1.42,1.35l-2.01,-0.26l0.06,1.38l1.15,1.12l2.88,-0.22l0.96,1.23l1.36,-0.58l0.19,-0.9l1.32,0.13l3.63,2.75l-0.22,1.38l1.06,0.86l1.03,-0.19l1.43,1.13l1.2,-0.57l1.8,2.7l1.09,3.44l-0.59,2.38l-5.95,1.45l-1.74,-2.45l-0.89,0.39l-0.46,-0.81l-2.2,0.42l-1.6,-1.01l-9.18,-0.84l0.53,1.75l2.11,1.44l0.97,-0.67l0.69,0.48l3.45,4.13l-0.58,0.97l-4.99,-3.98l-0.07,-0.83l-1.35,0.04l-2.89,-2.78l-7.03,-3.72l-0.63,0.65l2.03,2.2l4.22,1.67l3.95,3.07l-0.83,1.43l-0.97,-0.26l-0.93,1.2l-2.06,-0.44l-5.56,-3.13l-3.56,1.76l-7.45,-0.82l-0.91,-0.57l0.02,-1.7l-1.29,1.08l-2.79,-0.72l-3.39,0.36l-0.71,1.52l-4.48,-4.09l-0.29,-2.53l1.96,-2.46l-0.76,-1.4l-2.55,3.48l-1.81,-2.18l-1.59,0.75l-0.84,1.74l1.76,0.28l0.14,1.23l-3.28,-0.82l-2.57,0.39l-3.84,-2.75l-2.22,-0.36l-1.4,-1.55l-3.86,-7.62l1.3,-0.38l0.48,-1.01l-2.06,-2.13l2.05,1.18l3.47,-0.53l1.43,0.48l0.66,1.5l3.26,0.51l3.83,-0.4l0.7,-1.35l1.65,0.38l0.42,-0.86l-5.34,-2.96l-0.88,-2.9l-1.91,1.23l-12.1,-2.48l-1.13,-5.32l1.61,-3.77l-2.16,-3.72ZM488.81,323.97l3.2,-1.19l3.79,-4.52l-1.07,0.06l-3.54,3.78l-2.78,0.91l0.39,0.97ZM474.79,330.37l0.28,0.24l0.75,0.17l-1.05,0.62l-0.53,-0.59l0.54,-0.44ZM473.0,330.18l-0.24,-0.03l-0.02,-0.02l0.21,-0.03l0.05,0.07ZM482.88,328.8l0.11,0.5l-0.87,0.03l-0.03,-0.17l0.79,-0.36ZM489.66,335.76l1.57,-0.65l1.38,0.68l-2.41,0.32l-0.54,-0.35ZM516.8,338.32l0.08,0.2l-0.05,0.1l-0.02,-0.01l0.0,-0.29ZM535.08,322.46l0.0,-0.02l0.01,0.02l-0.01,-0.0ZM550.44,335.16l0.41,-0.09l-0.17,0.82l-0.12,-0.36l-0.11,-0.37ZM574.5,352.3l0.32,0.6l-0.22,0.09l-0.34,-0.24l0.25,-0.45ZM587.32,361.34l-0.15,0.27l-0.05,0.15l0.03,-0.41l0.16,-0.01ZM582.58,432.13l-0.03,0.04l0.02,-0.03l0.02,-0.01ZM595.87,437.1l0.4,0.28l0.14,0.44l-0.7,-0.43l0.16,-0.3ZM596.59,438.06l0.17,0.24l-0.2,0.4l-0.6,0.52l-0.32,-0.49l0.95,-0.67ZM596.09,440.16l0.05,1.42l-0.31,0.11l-0.08,-0.87l0.34,-0.66ZM595.73,441.72l-0.02,-0.02l0.04,-0.0l-0.01,0.02ZM601.21,436.6l-0.0,0.19l-0.07,0.04l0.01,-0.01l0.06,-0.21ZM601.53,439.34l-0.21,0.44l-0.21,-0.16l0.05,-0.3l0.37,0.02ZM602.53,440.7l-0.02,0.19l-0.36,0.35l-0.06,-0.15l0.44,-0.39ZM602.26,441.69l0.22,0.2l0.05,0.16l-0.23,-0.16l-0.03,-0.2ZM611.9,449.73l0.04,0.02l-0.05,0.01l0.01,-0.03ZM613.57,450.64l0.12,0.99l-0.1,0.01l-0.22,-0.97l0.21,-0.02ZM615.69,450.49l0.09,-0.01l-0.03,0.11l-0.01,-0.03l-0.04,-0.08ZM616.43,450.22l0.17,-0.03l-0.0,0.12l-0.01,0.01l-0.15,-0.11ZM620.64,452.03l0.0,0.12l-0.28,0.07l-0.0,-0.12l0.28,-0.07ZM662.89,449.16l1.85,2.25l-0.68,0.81l-0.41,-1.74l-0.76,-1.33ZM672.43,451.68l0.27,0.56l-0.74,0.85l0.19,-0.89l0.28,-0.52ZM677.9,454.39l-0.21,0.16l-0.02,-0.11l0.23,-0.04ZM649.96,390.46l0.52,0.44l0.09,0.2l-0.45,-0.05l-0.16,-0.58ZM680.53,409.14l0.0,0.01l-0.0,0.01l-0.0,-0.01ZM680.49,409.43l0.0,0.21l0.09,0.26l-0.18,-0.29l0.09,-0.18ZM678.41,399.12l0.0,-0.0l0.02,0.01l-0.02,-0.01ZM682.12,392.93l1.68,0.43l-0.8,1.15l-0.46,-0.47l-0.42,-1.1ZM630.78,350.05l-0.21,-1.8l1.24,-0.25l0.07,1.13l-1.1,0.92ZM633.93,349.02l0.23,-1.09l0.75,0.21l-0.06,0.86l-0.92,0.02ZM635.3,347.75l0.31,-0.27l0.31,-0.07l-0.19,0.29l-0.43,0.04ZM624.0,340.87l0.04,0.01l-0.01,-0.0l-0.03,-0.01ZM522.82,287.99l0.09,0.04l0.16,0.16l-0.08,-0.03l-0.17,-0.18ZM490.73,269.27l-1.65,0.1l0.29,-1.42l0.24,0.46l1.12,0.86ZM527.85,279.51l-0.04,-0.23l0.12,0.06l-0.09,0.17ZM541.86,292.0l-1.03,-0.78l-1.11,-1.72l0.33,-0.2l1.8,2.7ZM574.47,296.36l-0.01,-0.14l0.08,0.1l-0.07,0.04ZM622.2,341.87l0.57,-0.05l0.37,0.23l-0.06,0.02l-0.88,-0.2ZM621.18,347.72l0.29,-0.42l0.66,0.04l-0.11,0.11l-0.85,0.26ZM652.5,357.13l0.08,-0.22l0.02,0.06l-0.1,0.16ZM662.71,366.06l0.84,-0.66l-0.06,0.71l-0.78,-0.04ZM681.52,367.13l0.1,-0.69l1.1,0.24l-0.11,0.28l-1.08,0.17ZM663.42,400.33l-0.06,0.03l-0.14,0.26l-0.05,-0.25l0.25,-0.03ZM653.13,413.38l0.02,-0.07l0.01,0.04l-0.03,0.03ZM663.69,417.31l0.03,-0.16l0.0,-0.05l0.04,0.06l-0.07,0.15ZM655.95,454.61l0.2,-0.08l0.01,0.01l-0.0,0.01l-0.21,0.05ZM656.38,456.41l0.17,-0.67l0.69,-0.27l0.05,0.1l-0.91,0.84ZM672.06,466.54l-0.48,-0.52l-0.04,-0.19l0.99,0.26l-0.47,0.44ZM626.86,462.8l-0.05,0.04l-0.35,0.13l0.03,-0.16l0.37,-0.02ZM618.54,456.26l-0.06,0.22l-0.83,-0.15l0.45,-0.09l0.44,0.02ZM539.2,319.9l-0.1,-0.03l0.05,-0.09l0.05,0.11l0.0,0.0ZM536.94,321.66l0.12,0.79l-0.07,0.39l-0.29,-0.51l0.24,-0.67ZM685.1,391.66l0.88,-0.12l1.42,0.57l-1.42,0.29l-0.89,-0.74ZM683.01,459.85l0.95,-0.38l-0.34,-1.43l3.06,-0.11l-0.67,2.54l-3.01,-0.62ZM683.38,471.15l0.86,-0.49l2.63,2.61l-2.13,-0.41l-1.36,-1.71ZM680.79,436.67l0.47,-0.31l1.46,3.68l-1.98,-3.03l0.04,-0.33ZM682.98,440.44l1.1,0.65l0.41,0.67l-0.53,-0.25l-0.98,-1.07ZM681.47,458.53l0.32,-0.72l0.69,-0.02l-0.6,0.62l-0.41,0.12ZM677.24,433.12l0.03,-0.86l1.16,1.1l0.02,1.05l-2.14,-0.09l-0.04,-0.8l0.98,0.49l-0.01,-0.9ZM678.58,434.5l0.26,0.02l0.12,0.08l-0.11,-0.06l-0.27,-0.04ZM679.77,434.88l0.31,-0.35l0.23,0.91l-0.36,-0.42l-0.19,-0.15ZM677.9,474.82l0.38,-0.71l0.86,0.37l-0.56,0.47l-0.68,-0.12ZM674.31,366.81l0.01,-0.0l0.0,0.01l-0.01,-0.0ZM674.45,366.24l0.79,-2.28l0.92,-0.55l-1.2,2.63l-0.51,0.19ZM665.85,422.28l0.83,-2.73l0.99,-0.49l0.41,0.37l-1.19,1.04l0.24,0.64l-1.29,1.17ZM665.47,364.06l0.62,-1.05l0.64,0.74l-1.26,0.31ZM666.81,363.73l0.66,-0.69l0.48,0.21l-0.28,0.27l-0.87,0.22ZM664.13,502.89l2.55,1.52l0.12,0.98l-0.75,1.66l-2.74,2.42l-0.16,-2.82l0.98,-3.76ZM662.22,358.47l1.11,0.82l0.23,0.27l-1.19,0.41l-0.15,-1.5ZM639.41,351.83l1.43,-0.74l0.22,0.76l-1.65,-0.02ZM626.82,465.8l0.25,0.01l-0.2,0.0l-0.05,-0.01ZM627.85,465.83l1.97,0.06l3.4,1.22l0.33,1.3l2.02,0.82l-1.39,1.1l-2.46,0.16l-1.59,-2.69l0.48,-1.3l-2.74,-0.68ZM625.81,343.56l0.73,0.13l-0.17,0.02l-0.56,-0.16ZM624.08,326.81l0.98,-1.23l0.85,0.24l-1.04,0.31l-0.8,0.68ZM619.86,326.49l0.75,-1.58l1.91,-0.31l-0.76,2.34l-1.9,-0.46ZM610.7,452.69l0.01,-0.01l0.0,0.02l-0.02,-0.01ZM597.03,474.35l0.51,-0.32l0.93,0.8l-0.8,-0.03l-0.64,-0.45ZM598.82,475.02l2.06,-0.45l1.34,0.64l-0.8,0.22l-2.61,-0.41ZM598.97,437.76l0.38,-0.55l0.19,-0.09l-0.03,0.69l-0.54,-0.05ZM599.8,438.49l0.12,0.08l0.02,0.12l-0.07,-0.1l-0.06,-0.1ZM599.75,439.54l0.16,1.13l-0.14,0.22l-0.37,-1.33l0.36,-0.02ZM585.53,305.08l0.88,-0.56l0.39,-2.98l3.58,0.52l-0.02,1.53l-3.57,2.95l-1.26,-1.45ZM580.11,367.21l0.33,-1.37l0.5,1.93l4.05,0.91l2.48,-0.49l1.1,3.69l-7.41,1.27l-1.1,-0.39l-2.06,-2.68l-0.25,-1.55l2.03,-0.52l0.32,-0.79ZM579.24,359.67l1.96,2.08l-0.27,1.41l0.09,-1.13l-1.78,-2.35ZM575.22,680.92l0.71,-0.09l2.49,-1.73l-0.66,2.13l-2.24,0.45l-0.3,-0.76ZM578.3,290.03l0.13,2.03l-1.22,-0.22l0.14,-1.53l0.96,-0.29ZM574.93,293.48l1.17,-0.64l-0.34,1.92l-0.69,-0.8l-0.14,-0.48ZM575.81,294.96l0.04,0.13l-0.04,-0.01l-0.01,-0.11ZM576.17,295.58l0.78,-0.24l0.48,-1.68l0.6,0.68l-1.02,0.89l0.3,1.54l-1.02,-0.28l-0.11,-0.92ZM577.62,297.27l0.03,0.05l-0.01,0.06l-0.02,-0.0l0.0,-0.11ZM570.07,460.89l0.38,-0.61l-1.05,-0.3l0.31,-0.59l5.52,1.64l0.68,1.7l0.75,0.13l-0.55,1.35l-2.27,-0.41l-3.77,-2.91ZM576.74,357.28l-1.38,0.21l-0.19,-1.49l0.51,0.07l1.05,1.21ZM560.18,382.36l-1.12,-3.84l0.23,-2.62l2.93,-9.21l2.5,-1.76l1.8,0.45l1.21,-1.15l5.94,1.24l1.19,1.62l-0.56,4.02l2.13,6.58l-0.39,2.68l-1.49,2.72l-3.6,2.73l-8.12,1.49l-2.64,-4.94ZM571.22,358.9l0.19,-3.03l1.7,0.28l2.32,3.53l-0.81,0.96l0.75,1.57l-4.15,-3.31ZM573.96,604.3l0.57,-3.93l0.69,-1.52l0.38,4.28l-1.64,1.18ZM570.68,628.55l0.13,-0.06l0.12,-0.02l-0.25,0.08ZM564.16,610.52l-0.85,-0.98l3.48,-5.9l-0.32,2.08l-2.31,4.8ZM567.38,604.86l1.4,-1.14l0.56,-6.2l0.95,0.09l0.62,1.43l1.16,0.56l-4.02,10.22l-1.02,-0.49l1.41,-3.88l-1.05,-0.59ZM572.63,599.58l-0.23,-0.07l0.17,-0.06l0.06,0.13ZM451.63,52.33l1.56,-3.16l1.89,0.11l-0.13,-1.92l1.49,-0.25l1.71,-1.54l1.13,0.37l0.59,-0.57l2.17,2.8l0.84,-3.22l0.82,-0.72l-0.15,-2.05l3.63,-2.72l2.38,0.61l0.73,1.43l-0.38,1.72l2.5,2.18l0.47,-1.14l-1.45,-1.29l1.06,-0.68l-0.66,-1.47l1.06,-0.2l2.4,0.99l2.7,4.64l0.71,-0.68l-1.58,-3.63l1.35,0.05l1.51,3.07l1.7,-0.06l-0.86,-3.52l-8.11,-3.87l-0.59,-1.76l4.47,-0.92l1.33,-1.24l-0.58,-3.99l-1.58,-0.96l4.05,-1.1l-0.83,1.66l1.63,0.69l0.67,1.21l2.81,0.12l0.96,1.15l2.25,4.98l-0.2,2.0l4.05,0.0l1.0,0.66l0.49,-0.55l-1.19,-1.97l-2.04,0.12l-1.94,-4.74l9.99,7.64l2.31,0.6l2.48,3.92l1.54,0.16l0.34,-0.63l-3.32,-4.51l0.05,-1.23l-4.63,-1.93l-0.24,-1.77l-1.54,0.07l-6.04,-5.8l0.48,-3.29l4.06,-0.38l-3.44,-2.58l-0.39,-1.53l0.72,-0.58l2.38,0.96l2.28,2.63l1.59,-0.26l0.08,-1.06l-4.38,-7.22l4.14,0.81l0.95,3.03l1.43,1.1l0.74,-0.57l-0.81,-1.5l2.82,1.01l2.43,-0.47l0.15,-1.16l-5.43,-1.65l-0.3,-1.04l1.01,-0.78l-3.03,-1.61l3.22,-2.36l1.36,2.63l0.78,-0.04l0.59,-2.17l0.65,2.75l2.04,0.49l0.61,-2.92l2.57,1.25l2.99,5.34l2.82,2.06l-0.8,3.78l0.92,0.76l2.45,-6.0l-3.57,-2.25l-0.47,-1.1l1.07,-1.12l-1.73,-0.32l-1.4,-2.41l-3.04,-2.84l4.22,-2.08l6.94,0.36l2.12,3.85l6.09,4.05l0.1,-1.56l-2.6,-1.39l-2.64,-3.56l2.43,-5.33l0.9,0.3l0.55,-0.94l1.89,-0.25l-0.21,2.37l1.45,2.23l3.16,1.29l0.2,-1.2l-2.9,-2.53l1.81,-3.13l3.37,-0.89l0.09,1.56l1.08,0.42l-0.26,1.14l0.82,0.44l1.53,-1.47l0.8,1.19l2.44,-1.16l0.54,1.8l2.03,-1.43l3.02,0.63l1.4,-0.92l-0.86,3.66l-5.49,6.35l0.73,1.25l4.23,-1.92l1.09,-2.02l1.64,-0.62l-0.23,-1.32l2.08,-3.05l0.9,-0.26l0.4,1.56l1.64,0.18l0.28,-0.66l-0.86,-0.58l0.4,-1.87l-0.54,-0.45l0.07,-0.42l0.32,-0.16l-0.04,0.76l2.83,2.83l0.62,-0.25l0.42,-2.32l2.18,-0.33l0.41,1.66l-1.26,1.57l2.95,1.54l0.15,1.36l1.46,0.06l0.29,3.25l-0.65,1.25l1.78,-0.54l0.71,-2.33l0.83,-0.34l0.87,1.08l0.38,-0.7l2.02,-0.25l2.75,2.8l0.71,4.57l-2.15,2.43l0.74,0.97l-0.64,2.61l-0.85,0.33l0.11,1.15l-3.8,6.69l-1.76,-0.44l1.06,2.04l-0.55,1.01l-4.04,0.04l-0.13,0.98l-2.31,1.76l0.2,0.86l1.88,-0.26l-0.64,0.83l-0.79,-0.44l-0.64,1.0l-7.69,3.8l-5.83,-3.2l0.44,1.16l4.34,2.87l-1.89,0.74l1.62,0.97l5.23,-2.85l2.62,0.55l-6.68,7.85l-1.32,1.21l-1.66,-0.02l-0.48,1.99l-2.52,1.31l0.8,1.26l1.09,-0.38l-0.52,1.89l15.77,-15.26l4.02,-2.71l0.76,1.57l-2.32,6.44l-2.19,1.91l-1.5,5.88l-1.61,3.14l-1.56,0.46l0.34,2.06l-4.21,8.21l-0.47,6.44l-0.92,1.26l-2.31,0.45l-0.87,-2.93l-2.64,-2.17l-0.76,0.28l2.83,3.95l0.14,2.03l2.67,1.65l-0.45,1.72l-2.6,0.08l-3.72,3.24l-1.47,-1.63l-2.54,-0.39l0.07,0.86l2.62,1.91l-2.03,1.1l0.77,1.03l4.03,-1.03l3.21,-2.6l0.66,0.72l-0.33,2.62l-2.68,1.86l-0.36,1.03l0.33,1.05l2.27,-0.58l-0.4,2.42l-4.23,4.11l-1.84,0.03l-1.35,-0.56l-0.5,-2.83l-4.08,0.49l-0.28,-0.99l-2.72,-0.24l-2.5,1.54l0.32,1.26l0.77,0.8l1.63,-0.58l4.43,0.49l2.07,4.38l-0.5,1.48l-1.61,0.49l-0.93,-1.22l-0.93,0.11l0.45,2.43l-1.01,0.71l-1.9,0.07l-2.03,-1.35l-0.44,1.08l0.94,2.58l-2.15,-0.19l-1.87,-1.27l-0.64,0.63l-1.33,-1.41l-5.02,-0.68l-0.29,1.22l0.64,0.86l-1.39,1.07l1.3,2.66l-3.18,-0.69l-0.99,0.91l3.65,1.7l-0.49,0.59l0.52,0.53l3.25,-1.28l2.94,-0.36l1.32,0.83l6.71,-0.97l-1.36,1.41l2.36,2.8l-2.7,0.6l-3.21,-0.78l-0.96,-1.92l-1.52,-0.97l-10.24,1.71l-0.61,0.97l0.81,0.74l0.7,-0.57l6.41,-0.12l2.91,0.69l-2.7,0.07l-3.72,2.2l-2.89,-1.13l-4.07,0.92l0.31,0.97l4.62,-0.44l0.75,0.49l-2.04,5.75l0.52,1.3l0.79,-0.47l1.62,-5.07l4.43,-2.33l4.73,0.72l-3.04,2.71l0.21,1.2l3.65,-1.75l3.91,0.39l1.2,3.12l-0.16,2.11l1.14,0.67l-3.09,2.42l-5.59,0.06l-1.11,0.86l0.08,0.94l2.77,-0.28l0.49,0.95l5.32,1.54l0.39,0.76l-1.37,0.5l-0.8,2.86l-5.32,-0.57l-1.6,1.33l0.25,1.1l1.78,0.65l5.04,-0.02l-0.83,3.39l-1.94,-0.74l-2.9,3.31l-1.48,-0.86l-3.65,0.65l-2.4,-1.05l-0.83,2.83l2.74,2.17l0.02,3.58l1.96,1.17l-1.13,1.17l0.25,1.4l-1.46,2.03l0.24,1.16l-2.0,1.75l0.12,-1.32l-0.64,-0.26l-1.79,2.52l-2.82,-0.37l-1.66,1.19l-2.98,-0.37l-4.19,-2.62l-3.75,-5.91l-0.93,0.02l0.24,2.06l1.48,2.19l-0.06,2.42l3.22,1.92l-3.2,1.07l-2.05,-0.28l-0.12,0.9l1.53,0.95l0.7,2.19l1.08,-0.09l3.07,-3.13l5.01,1.29l-1.18,2.84l0.85,0.62l1.7,-3.13l1.38,-1.38l1.27,-0.05l2.13,1.41l0.32,1.24l-1.49,3.21l0.08,1.68l2.71,-0.42l-0.27,1.92l1.75,0.6l1.69,-4.7l1.05,-0.55l2.45,4.33l0.24,3.88l-1.27,0.71l-0.37,2.68l-1.13,1.56l-0.61,-0.43l0.05,-1.71l-1.96,-0.2l-2.11,6.92l-1.45,-0.21l-2.66,2.31l-0.96,-0.18l-2.11,1.39l-0.3,0.82l-1.76,-0.81l1.08,-5.22l-2.54,-1.91l-0.2,-1.2l-0.72,-0.08l-1.38,2.18l-2.71,-0.68l0.08,-2.08l1.15,-2.18l-2.86,1.39l-2.8,-4.26l-0.73,0.8l1.63,3.45l2.4,1.97l-0.52,1.16l0.56,2.12l-3.0,0.93l-1.64,-1.42l-0.33,-2.96l-1.7,-2.06l-0.03,-2.0l-0.6,-0.34l-0.99,1.82l1.81,3.15l0.53,3.63l-2.22,-0.37l-3.6,-5.43l-0.91,0.48l0.76,1.13l0.21,3.65l-1.88,0.31l-1.58,-2.85l-1.33,-0.41l0.58,4.26l3.36,2.1l-4.06,0.78l-0.6,-0.7l-6.11,-1.47l-0.25,-1.66l1.11,-1.5l-2.76,-2.97l-0.46,0.74l1.83,2.29l-1.82,1.26l-0.29,2.61l-1.72,-0.52l-0.45,-1.58l-1.19,-0.11l-1.11,-3.97l-0.72,0.62l0.31,3.91l0.65,0.8l-0.75,1.5l-1.01,-1.89l-0.79,1.24l-2.32,-0.55l0.37,-2.67l-0.99,-2.63l-0.07,-5.11l-0.8,0.13l-0.92,2.26l0.57,2.6l-0.79,0.78l-0.85,4.21l-2.3,-1.8l-0.27,-2.03l-0.94,0.26l1.39,-4.03l-0.8,-2.86l5.95,-5.28l0.12,-1.01l3.66,-0.38l0.48,0.85l1.2,-0.21l0.63,-0.4l-0.3,-1.35l1.25,-0.33l1.53,1.4l1.48,-1.96l-2.98,-0.83l1.23,-1.3l-1.69,-0.5l1.99,-1.15l0.01,-0.73l-4.62,0.26l-0.15,-4.55l-2.79,-2.63l0.44,-3.88l4.54,-2.14l3.75,1.53l2.52,2.87l1.71,7.39l1.03,-0.76l0.8,1.14l2.38,0.43l1.45,1.48l1.65,0.4l0.48,-0.5l-0.84,-2.1l2.49,-0.07l3.23,1.12l0.52,-0.45l-0.4,-1.35l-1.77,-1.17l2.25,-1.39l1.88,-4.33l1.83,-6.33l-0.38,-2.63l1.24,-1.34l-0.41,-0.77l-0.98,0.14l-1.53,1.65l0.25,2.82l-0.9,1.02l-2.07,7.08l-1.97,2.55l-4.9,-0.47l1.84,-3.58l-0.42,-1.99l-2.31,3.72l-1.72,-1.12l0.44,-2.92l2.4,-2.71l1.84,0.19l0.09,-0.86l-1.56,-0.74l-3.62,0.67l-0.97,0.87l-0.93,-1.03l2.79,-2.91l1.78,0.54l2.49,-1.51l-0.36,-0.64l-2.77,0.8l-1.0,-0.8l0.37,-1.3l1.6,-0.84l2.34,0.89l1.11,-0.92l-2.53,-1.11l-2.44,0.46l0.57,-2.56l1.25,-0.99l-0.23,-0.79l-1.27,0.23l0.69,-6.07l-0.66,0.0l-0.89,2.18l-0.75,6.02l-1.81,4.32l-3.64,1.46l0.11,-1.87l1.51,-2.15l0.0,-4.26l-2.21,4.77l-1.49,-0.07l-1.1,2.26l-3.45,-0.05l2.24,-1.71l-1.13,-0.98l-1.15,0.28l-0.09,-5.02l1.57,-2.69l1.71,-0.45l-0.33,-1.08l-1.04,0.08l2.22,-5.38l4.35,-0.89l3.22,-2.37l1.72,1.18l4.75,0.51l3.08,2.66l1.99,0.73l2.71,3.07l0.94,-1.28l-1.92,-2.43l1.56,-0.41l-0.12,-1.19l-0.92,-0.38l-1.93,0.76l-2.3,-2.0l3.89,0.23l1.97,-1.17l1.55,0.41l0.13,-4.04l0.84,-1.58l-0.78,-1.1l-1.85,1.67l-0.92,2.69l-1.67,0.83l-2.17,-1.17l-6.62,0.01l-2.36,-1.93l0.97,-2.21l1.34,0.33l1.16,2.03l2.71,0.4l0.81,-1.0l-3.25,-2.16l-0.3,-2.48l-1.44,0.92l-1.21,-5.65l-2.04,-1.92l-0.94,-3.5l-1.66,-1.68l-5.45,-1.76l0.13,-5.04l3.58,0.7l1.1,0.9l0.84,-1.01l-1.65,-1.5l-4.58,-1.39l-0.61,-2.66l0.47,-4.47l2.35,-0.75l2.91,1.75l6.82,0.0l8.29,9.68l1.21,3.72l1.52,0.99l-0.35,1.77l0.89,0.78l1.35,-1.36l3.9,1.55l0.25,-1.04l3.1,-1.46l0.78,-1.84l-0.48,-0.53l-5.1,1.93l-2.93,-1.38l-1.1,-4.55l1.05,-1.31l-3.86,-1.89l-5.31,-7.57l12.41,-4.94l1.19,-1.65l9.01,-2.3l-0.18,-1.51l-8.12,0.6l6.89,-5.55l7.25,-2.54l-0.0,-1.15l-0.9,-0.71l-6.21,0.77l-3.59,1.59l-0.31,-3.3l1.55,-3.08l-0.13,-1.8l1.14,-0.81l1.79,-3.84l2.17,-1.99l1.05,-2.43l-1.11,-0.39l-5.09,5.04l-1.84,3.71l0.04,2.02l-3.46,-2.08l0.19,1.27l1.88,2.04l-0.89,2.04l0.81,1.51l-1.36,3.73l-5.1,5.15l-6.47,3.44l-2.88,0.56l0.06,-2.18l4.03,-2.58l1.53,-3.04l-1.59,-0.63l-2.52,2.89l-3.57,1.37l-0.11,-0.89l1.71,-2.36l-1.42,-0.71l-1.54,2.61l-0.89,-0.11l0.78,3.85l-0.34,2.24l-2.15,0.9l-2.45,-0.37l-0.92,0.72l-2.85,-0.66l1.04,-2.46l-1.46,0.68l-1.13,1.77l-2.57,-1.54l3.77,-9.32l2.48,-2.15l10.36,-3.87l1.42,-0.97l0.25,-1.18l-15.16,5.18l-2.55,3.23l-3.68,8.19l-1.52,-0.28l-5.52,-4.12l-2.24,-3.03l4.25,-1.92l3.52,0.41l4.2,-0.87l1.82,-1.89l1.94,-0.42l-0.13,-1.51l4.29,-3.96l0.25,-1.51l-2.63,0.01l-2.72,1.88l-2.58,3.29l-3.64,1.65l-2.07,-0.21l-8.46,1.96l-1.28,-1.35l-0.52,-3.13l1.09,-1.27l1.94,1.0l2.9,-1.73l-0.72,-0.69l-1.46,0.36l-2.15,-1.84l3.74,-3.35l0.85,0.04l-0.24,-1.23l3.26,-0.87l3.07,1.13l0.75,-0.39l-0.28,-0.99l-4.96,-2.2l-8.72,6.37l-1.32,-2.12l5.1,-4.06l0.23,-0.89l-1.89,-0.43l-1.67,-2.12l-0.45,1.26l-1.34,-0.39l-1.34,1.78l0.02,1.51l-1.09,0.35l-0.29,-1.24l-1.85,-0.94l0.27,-0.49ZM467.22,187.34l-0.02,0.7l0.08,0.54l-0.23,-0.5l0.17,-0.74ZM511.4,194.3l-0.08,0.24l-0.06,0.04l0.07,-0.21l0.07,-0.07ZM521.76,108.32l4.22,-0.05l0.38,1.75l1.07,0.74l-3.95,0.26l-1.72,-2.7ZM462.41,44.68l-0.48,-0.1l0.11,-0.41l0.37,0.52ZM479.98,42.56l-0.16,-0.42l0.09,0.02l0.07,0.4ZM553.75,2.1l0.09,-0.05l0.0,0.03l-0.09,0.01ZM485.99,154.18l-1.65,1.09l-0.22,-0.13l0.52,-1.19l1.35,0.23ZM569.79,661.05l-0.05,-0.21l0.07,-0.55l0.68,0.7l-0.69,0.06ZM569.0,481.37l0.25,0.11l-0.12,0.21l-0.05,-0.02l-0.08,-0.31ZM566.07,517.84l0.13,-0.53l1.96,-0.83l-0.06,0.3l-2.04,1.05ZM560.16,465.59l2.1,-1.05l3.51,-0.14l0.32,0.76l1.55,0.15l1.51,2.38l-0.35,1.42l-2.69,1.96l-5.95,-5.48ZM567.74,657.21l0.59,-0.24l0.46,0.97l-0.38,0.0l-0.67,-0.73ZM567.08,481.73l0.79,-0.2l0.12,0.15l-0.37,0.09l-0.54,-0.03ZM563.91,454.17l0.28,-0.52l2.0,-0.55l-0.62,1.38l-1.66,-0.3ZM561.74,604.49l0.36,-1.75l3.07,-1.32l-2.77,2.79l-0.66,0.28ZM562.62,591.14l0.29,-0.1l0.15,0.19l-0.33,-0.12l-0.11,0.03ZM561.9,579.26l0.03,-0.21l0.16,-0.38l0.23,0.82l-0.42,-0.23ZM562.22,593.87l-0.14,-1.09l0.27,-0.29l0.22,0.48l-0.34,0.9ZM546.79,664.8l1.55,-2.51l4.66,-1.23l3.06,0.13l4.08,4.11l1.48,3.29l-3.39,-0.09l-11.44,-3.71ZM555.47,342.98l2.64,-0.2l0.34,1.06l-1.68,2.76l0.27,1.38l-1.29,0.66l-1.48,-1.7l-0.39,-3.32l1.12,-1.0l0.47,0.38ZM548.37,497.83l-0.35,-4.63l1.73,-5.02l1.16,-0.82l1.47,0.44l0.98,-0.93l2.54,2.46l0.32,2.13l-3.07,11.1l-4.6,-3.84l-0.17,-0.89ZM554.12,536.8l0.54,-0.67l0.8,0.1l-0.82,1.01l-0.52,-0.44ZM553.2,539.49l0.02,-0.17l0.05,0.01l0.01,0.12l-0.07,0.05ZM518.38,254.51l0.02,-3.28l1.94,-0.65l2.28,1.5l0.72,-0.61l3.81,1.55l8.24,-1.79l4.72,1.82l1.83,1.34l1.29,2.82l2.0,0.59l1.36,3.33l2.32,1.15l0.14,2.91l1.58,0.57l0.16,1.42l-1.02,0.76l-12.46,-0.08l-6.24,4.05l-2.27,0.18l-2.95,-1.96l-1.55,-3.7l-0.47,-4.43l-4.24,-0.78l-0.48,-0.67l-0.23,-3.23l0.9,-0.63l-1.39,-2.18ZM542.4,343.23l1.71,-3.49l2.32,-0.76l0.1,-1.74l0.81,0.38l0.67,1.17l-0.8,1.23l-4.81,3.21ZM539.83,355.35l1.02,-3.29l1.77,-0.72l1.11,-3.34l0.91,-0.14l-0.76,-1.61l2.39,-1.22l0.67,1.28l-0.6,1.55l-0.94,0.07l-2.03,7.01l-2.55,1.82l-0.98,-1.41ZM544.39,363.79l1.03,-0.85l0.6,0.66l-0.77,0.79l-0.86,-0.6ZM546.23,361.86l-0.26,-0.62l-1.1,-0.62l2.08,0.52l-0.0,0.9l-0.72,-0.19ZM543.01,367.74l1.19,-0.44l0.95,0.97l-1.19,2.11l-0.95,-2.63ZM491.5,444.21l0.6,-0.54l-0.58,-3.61l1.19,-14.31l3.45,-4.37l0.11,2.65l0.82,0.13l0.58,-0.88l1.19,0.7l1.14,3.24l-1.81,0.99l-0.23,0.9l2.67,2.32l0.99,4.1l1.57,-0.26l1.49,-5.17l3.04,2.44l-0.42,1.38l1.36,1.37l5.93,1.02l2.1,3.77l2.76,1.13l1.6,1.85l1.51,0.59l1.71,-0.47l5.13,4.44l0.28,3.89l1.81,2.28l-0.08,0.86l-2.81,1.51l-0.02,1.94l4.49,-1.05l1.44,-1.05l3.48,1.36l0.51,-0.57l-0.38,-1.92l2.94,2.24l0.11,1.01l-1.42,-0.11l0.39,1.02l4.41,1.63l-2.32,0.89l-3.6,4.37l-0.37,1.42l-0.79,-0.13l-8.74,-3.71l-3.42,0.48l-0.61,-1.02l1.33,-1.33l-0.06,-2.1l-1.9,-1.28l-4.59,0.66l1.0,-3.43l-0.5,-0.96l-1.15,-0.14l-0.97,1.27l-3.03,0.75l-1.17,2.31l0.84,4.2l-1.24,0.31l-2.38,3.21l-1.83,-0.12l-2.37,6.34l-4.18,3.28l-3.23,0.73l-1.16,-2.5l0.12,-6.95l-1.51,-3.22l-1.1,1.42l-3.38,1.23l-3.76,-0.09l-1.91,2.06l-1.94,0.07l-0.65,-0.91l0.24,-1.85l2.24,-3.9l6.11,-3.91l-1.64,-4.15l-0.66,-5.63l1.24,-4.08ZM537.03,125.67l0.14,-0.6l1.77,1.03l-0.27,0.43l-1.64,-0.86ZM528.04,339.31l1.24,0.37l0.11,0.47l-1.79,0.18l0.44,-1.02ZM530.38,340.78l0.27,-1.09l-0.83,-1.63l1.44,-0.15l0.93,1.53l2.86,-1.09l0.44,-1.19l1.15,0.08l0.99,1.53l-1.6,1.72l-1.98,0.49l-1.54,-0.55l1.0,2.87l-1.35,-0.46l-0.17,-1.79l-1.59,-0.26ZM532.71,453.04l0.06,-0.06l0.37,-0.01l-0.25,0.1l-0.18,-0.03ZM516.53,485.9l0.87,-1.45l0.09,-2.41l1.48,-1.87l2.19,1.47l3.25,-2.28l2.59,0.08l1.19,-1.35l3.08,0.71l-0.28,4.19l-3.25,2.92l-0.63,1.91l-5.19,5.86l-1.93,-1.17l-3.35,2.23l-0.27,-2.41l-2.11,-2.98l2.26,-3.44ZM224.48,339.27l10.41,-29.68l3.07,4.97l8.62,5.59l0.69,2.27l2.5,3.21l4.41,3.07l1.14,1.6l2.02,0.19l2.98,2.06l0.89,-0.13l2.4,2.31l0.78,-0.7l-1.76,-3.42l2.36,1.93l2.42,-0.32l2.76,3.37l0.88,-0.03l1.2,2.81l1.35,1.18l0.3,2.22l1.65,2.99l-0.64,1.68l0.97,0.74l-1.14,2.31l-6.49,-2.8l-0.42,0.7l0.81,1.53l-0.59,0.64l-2.27,-1.38l-0.61,0.37l-0.84,2.67l0.38,0.97l-2.87,0.38l-0.51,0.95l1.74,1.32l1.04,1.98l3.02,0.67l2.45,2.45l1.4,0.13l2.17,1.57l10.93,3.14l1.2,-0.96l2.0,0.4l0.07,1.09l0.81,0.42l0.63,-1.44l3.09,1.24l1.94,-1.54l-0.11,1.43l1.58,0.24l5.48,-2.57l0.88,-0.15l1.11,1.15l0.63,-1.72l-0.24,3.09l0.7,0.76l0.69,-0.72l0.19,3.26l1.6,1.08l0.96,-1.0l2.37,0.99l0.28,3.64l-0.97,1.47l1.05,2.55l1.18,-0.34l1.72,-4.6l-0.29,5.31l0.94,0.54l0.67,-1.63l1.95,3.58l0.33,2.6l-0.29,1.31l-1.69,-0.59l-0.91,0.77l-2.38,-3.14l-0.55,0.44l0.28,2.54l2.58,2.29l-0.03,1.5l-0.9,0.74l1.74,0.69l0.16,3.36l0.73,0.24l0.29,-0.67l0.93,3.59l2.54,4.51l0.56,-1.13l-2.78,-7.77l0.7,-2.8l0.59,1.56l1.23,0.59l0.8,-2.68l1.13,2.62l1.02,0.02l-1.47,-5.0l0.9,-0.19l0.74,-1.4l-2.13,-2.14l-0.43,-3.54l1.13,-2.31l-2.38,-4.66l0.26,-1.42l0.68,-1.28l2.24,-0.89l0.39,-1.05l-0.68,-0.64l0.69,-0.93l2.24,0.49l1.65,-1.04l3.04,0.68l0.83,-1.69l0.83,0.37l0.32,-0.89l0.43,1.39l1.37,-0.19l-0.61,-1.7l0.59,-1.86l5.7,-0.59l0.67,-1.61l-0.38,-1.27l1.23,-1.54l-0.22,-0.61l-1.26,0.27l-1.13,-0.69l-4.95,1.61l-1.26,1.37l0.86,1.59l-0.65,0.65l-1.29,-1.72l-1.95,0.63l-1.81,1.67l-2.11,-2.13l-2.12,-0.27l-1.21,1.95l0.93,1.49l-4.02,0.08l-0.35,-3.71l-2.76,0.75l5.19,-6.15l7.85,-0.24l8.82,-3.41l2.59,1.66l1.74,3.52l-0.75,1.35l0.7,3.02l-1.58,1.89l1.51,0.48l0.03,1.25l2.72,3.18l2.26,0.0l-0.79,1.66l1.16,2.86l5.67,1.14l0.86,-0.74l1.24,0.18l1.04,-1.88l-0.19,3.16l2.89,2.32l1.11,2.33l2.43,1.12l1.52,2.07l1.06,-1.23l1.39,0.04l0.82,1.22l2.25,0.99l2.9,-1.25l2.29,0.29l1.89,-1.43l0.83,0.87l1.38,-0.92l6.44,1.64l2.19,2.05l2.76,0.65l0.45,-1.05l1.12,0.08l0.53,-0.78l2.72,-0.03l-0.65,-2.06l-1.84,-1.78l0.07,-1.92l0.73,-0.05l4.38,8.36l2.67,2.31l2.38,-1.08l0.96,0.6l1.32,-1.43l-0.93,-1.05l0.67,-1.15l-0.81,-2.97l-0.65,-0.18l-0.52,0.86l-2.33,-3.23l-2.98,1.2l-0.74,1.82l-1.81,-4.08l1.15,-2.2l-1.3,-1.23l-0.95,-2.33l0.41,0.49l1.06,-0.68l1.61,1.55l3.97,-1.42l-1.75,-3.21l1.71,0.28l1.22,2.35l0.82,-0.62l-0.63,-1.05l0.79,0.01l2.78,3.39l-0.51,1.81l1.23,0.6l1.74,-0.66l0.39,1.96l-1.87,2.21l0.45,1.19l1.07,0.06l0.37,-0.73l1.35,0.34l0.05,-2.01l3.31,-1.93l-2.26,10.07l-1.15,0.65l-1.37,4.54l2.71,1.5l-1.35,3.33l1.16,0.91l0.87,0.02l2.55,-2.56l1.14,0.23l-2.48,3.23l0.46,0.54l2.29,-0.85l1.07,3.83l-0.69,0.79l-0.87,0.03l-0.32,-0.82l-2.25,0.7l-0.22,-2.61l-1.42,1.67l-0.98,-0.04l0.01,-1.45l-0.95,-0.71l-1.25,0.87l2.59,5.12l1.83,1.52l0.07,3.2l0.62,0.46l1.74,-1.81l-0.09,-1.39l-0.49,-0.51l-0.53,0.64l-2.24,-4.1l5.81,1.19l1.21,-1.66l-0.77,-3.86l1.55,-2.61l-1.19,-1.53l-0.44,-2.43l0.64,-1.82l-2.68,-3.83l1.36,-1.41l-0.06,-2.11l1.27,-3.03l0.98,0.79l1.08,-0.91l2.7,1.03l4.92,-4.77l0.76,-3.04l5.89,-4.28l0.06,-0.55l-2.54,0.03l1.29,-4.2l-0.48,-2.74l-1.56,-0.33l0.09,-2.09l-1.38,0.93l-1.22,3.1l-0.02,1.06l0.75,0.43l-0.87,0.88l-2.12,0.51l-1.23,-0.72l0.37,-3.7l1.04,0.58l3.51,-4.41l-0.31,-0.69l-1.96,0.28l0.4,-3.15l3.29,-0.43l-1.04,1.69l0.19,2.02l0.66,0.2l3.72,-4.16l-0.12,-0.8l-1.22,0.19l0.95,-2.36l-1.2,-1.18l-2.52,0.89l-0.3,1.01l-2.63,-0.42l-2.48,-5.15l-1.12,0.57l-0.51,1.8l-3.7,-2.56l-1.82,-2.33l-2.36,-0.27l-0.5,-3.29l-1.16,-0.62l-1.65,-3.41l0.19,-4.23l1.56,-1.49l0.59,-2.41l0.75,0.08l0.47,-1.03l1.74,1.31l0.65,-0.46l-1.77,-1.69l1.82,-2.37l-1.22,-0.06l-2.0,1.53l-2.27,-3.41l2.08,-6.34l-1.21,-0.92l1.28,-0.4l-0.57,-2.81l1.13,-0.1l1.07,-2.14l0.99,-0.1l1.95,2.72l1.27,0.08l1.09,-2.03l-0.68,-1.12l1.26,-2.02l-3.16,-0.42l-0.45,-1.61l2.8,-2.14l1.55,0.02l0.61,-2.28l2.29,-0.15l1.05,0.27l0.34,1.88l1.37,-1.05l0.01,2.96l1.67,-2.31l1.75,0.58l1.19,-0.48l-0.76,2.42l5.56,6.86l0.65,6.62l-0.38,3.5l-0.67,-0.38l-0.34,0.96l2.43,2.04l0.21,2.15l2.47,0.98l0.33,3.3l1.82,2.28l-0.77,1.36l1.62,1.29l0.64,-1.77l0.6,0.07l-0.06,2.68l1.31,0.89l-3.08,0.37l-1.91,-2.81l-1.17,0.57l0.43,0.71l-1.34,0.59l0.57,0.61l-1.22,1.91l1.31,0.68l1.02,-0.88l1.26,0.14l0.86,0.98l-2.28,2.89l-2.9,1.73l-1.98,3.08l2.03,0.54l1.89,-0.62l2.12,2.78l2.21,1.48l3.01,-3.73l1.29,0.51l-2.65,1.88l0.02,0.7l2.97,-0.72l0.63,0.96l1.39,-0.16l0.36,0.69l1.02,0.01l0.53,-1.03l1.52,0.89l-0.6,0.64l-0.48,-0.53l-1.01,0.39l0.45,0.62l-1.08,0.99l-0.25,1.61l-0.66,-1.61l-1.72,1.43l-1.69,-1.37l-0.67,0.29l5.9,6.11l-0.39,1.34l0.76,0.7l-0.12,1.27l1.3,0.85l-1.1,1.36l0.62,0.65l0.15,5.16l-0.94,1.83l1.82,1.52l-0.76,1.04l1.18,-0.07l0.75,2.4l1.47,-0.7l-0.22,-1.21l2.53,-4.71l-0.88,-1.61l0.66,-1.17l0.25,1.24l0.85,-0.82l0.03,-7.76l3.52,-5.21l1.47,0.7l1.7,3.2l5.43,5.67l1.93,9.81l-0.74,1.96l-1.47,-0.53l-0.28,-2.77l-1.98,1.93l0.78,3.99l-0.65,2.99l1.99,6.42l5.48,6.44l0.69,2.03l-0.88,0.97l-0.09,1.63l0.8,0.3l0.68,-1.15l0.35,1.43l0.78,-0.01l0.44,-2.43l0.83,0.85l1.19,-1.63l-0.28,-1.39l0.74,-1.69l2.29,1.14l0.87,-0.85l0.25,-4.84l-0.63,-1.66l1.23,-3.16l3.31,-4.63l-0.01,-2.78l0.72,-0.74l-0.38,-2.13l1.03,-2.63l-0.67,-3.78l0.49,-2.13l1.4,-0.43l1.49,0.7l0.49,-0.72l3.33,-0.12l-0.45,-2.01l-1.59,0.03l-1.06,-0.4l1.21,-0.49l-0.1,-1.13l1.6,-0.05l-0.18,-1.05l-0.94,-0.34l2.55,0.15l0.54,-0.81l-1.73,-0.8l-0.34,-0.92l-1.18,0.19l-0.77,-2.04l-2.66,-0.4l-0.82,-1.5l0.81,-0.1l0.0,-0.83l-0.96,-1.22l0.99,-1.18l-0.72,-0.74l-0.71,0.27l0.02,-1.04l0.96,-0.72l-1.19,-2.09l1.29,-3.37l1.71,0.98l1.8,-1.51l3.23,-0.54l4.79,2.88l2.79,0.38l5.52,-0.71l-0.24,1.63l-0.91,0.6l1.79,1.11l-5.0,-0.84l-0.47,1.18l6.95,1.74l1.5,2.03l-0.72,1.48l0.5,0.56l3.8,-0.97l2.98,1.18l0.36,1.29l-1.6,2.39l-3.57,3.4l2.94,-0.68l1.34,1.48l0.97,-0.97l1.12,1.62l0.07,2.62l-2.43,2.77l-1.12,-0.34l-1.18,2.16l-0.64,-1.43l-1.23,-0.48l-0.93,0.34l0.73,1.2l-2.85,-1.27l-0.61,0.89l0.8,0.9l-0.78,0.72l2.38,1.64l-0.88,0.27l0.47,1.3l1.32,0.08l-0.48,2.02l1.95,1.1l-0.36,2.19l0.93,2.29l7.22,7.8l-0.46,8.01l-0.47,1.76l-3.69,1.09l-1.27,5.13l-1.52,0.1l-1.53,3.31l-3.21,0.57l-0.36,1.57l-2.63,2.63l-1.82,-3.11l-1.56,-0.52l-1.22,-1.47l0.84,-0.02l0.3,-0.94l-0.88,-1.37l0.07,-2.94l-0.75,0.13l-1.27,3.29l-0.76,-0.18l0.3,-1.92l-1.46,-1.06l-0.06,-2.04l-4.96,-1.37l0.52,1.66l-2.58,1.27l-0.05,1.65l0.92,0.71l1.52,-0.57l1.28,-1.95l0.9,2.46l2.33,0.87l-0.56,1.2l1.17,0.78l1.2,-0.25l-0.39,1.76l2.5,2.69l0.7,2.76l1.26,1.62l-1.31,0.22l-2.21,-2.28l-1.33,0.72l-1.52,-2.2l-1.24,1.82l2.26,2.97l-3.5,-1.81l-1.0,0.26l-1.06,-1.4l-0.94,1.28l-1.01,-4.35l-1.69,-2.05l-2.87,1.73l-2.16,0.21l-1.61,-1.0l-0.78,0.7l-1.44,-0.65l-0.35,0.93l-1.35,-0.12l0.47,1.42l-0.78,0.64l1.71,2.75l2.48,0.54l3.42,1.99l-0.82,1.21l0.29,1.35l-3.46,2.77l-0.86,4.49l-3.52,2.99l-1.11,1.7l0.29,1.02l-2.17,1.42l-5.44,-0.4l-3.38,-3.83l-1.96,-1.11l1.98,0.38l0.35,-0.84l-5.88,-1.93l-4.76,-4.34l-3.09,-0.04l2.03,2.44l-2.02,-1.36l-1.25,0.27l-0.41,-1.0l-1.47,0.42l-7.61,-1.47l-1.67,0.63l3.86,3.52l0.78,-0.69l-0.83,-1.67l8.95,2.69l3.98,3.69l0.64,2.11l1.78,1.27l1.28,2.27l8.42,1.2l2.68,-0.06l0.73,-0.68l4.93,1.04l0.9,1.55l-0.24,1.63l-1.03,1.03l-1.57,4.77l-1.71,0.78l-0.47,3.24l-1.97,1.14l-2.32,7.37l-0.94,-0.04l-4.12,3.41l-3.38,-1.51l-1.02,-2.09l-0.87,0.6l1.13,2.59l-2.84,-1.61l-0.7,0.6l-1.08,-0.5l-0.16,-3.36l-3.42,2.27l-0.05,0.72l1.38,0.47l0.48,1.07l-1.34,0.94l-0.86,-0.9l-1.17,0.51l2.71,3.88l-0.95,0.21l-0.8,2.81l-1.89,0.39l-0.23,-0.94l-1.65,-0.78l-0.8,1.51l1.26,0.44l-2.79,0.72l-5.08,-3.21l-1.21,0.14l-0.42,-1.14l-2.12,0.46l0.4,-1.11l-1.23,-0.2l-0.68,1.26l-2.38,-0.59l-9.09,-5.07l-1.31,-1.52l-0.1,-1.25l-1.79,-0.68l1.46,3.62l-1.67,0.73l1.11,2.5l2.55,1.43l1.53,-0.47l0.27,-0.5l-1.81,-2.08l6.31,3.9l1.37,-0.58l0.64,1.4l1.83,0.49l-0.34,1.0l-0.74,-0.38l-2.27,2.01l0.88,1.18l2.55,-0.4l0.29,-1.38l3.25,-1.78l3.36,4.54l3.46,0.45l0.25,1.24l2.0,0.84l0.42,5.65l-1.07,1.87l-2.1,-0.17l-3.58,3.08l-6.01,-1.84l-0.37,1.26l-2.6,-0.41l-0.4,1.17l1.52,2.4l3.47,0.94l-0.59,1.4l-1.08,-0.3l-0.33,-1.22l-2.38,1.27l-0.26,-1.03l-1.49,-0.62l-0.48,0.6l0.5,2.44l-1.28,0.07l-0.91,2.87l-4.1,-1.05l4.19,3.17l-2.98,0.84l-0.3,0.85l0.81,0.74l-1.17,1.03l-1.17,-0.68l-1.18,0.74l1.06,1.19l-0.7,0.63l-1.72,-0.71l-0.48,0.61l0.55,0.71l-0.52,1.16l1.48,0.65l0.23,1.97l-4.07,2.49l-1.42,2.04l0.19,1.66l0.98,1.0l-2.1,-0.35l-0.42,0.57l0.86,1.7l-0.83,1.09l0.32,1.46l-2.99,4.42l-1.82,5.77l-1.44,-0.29l-1.34,1.34l1.64,2.12l-2.04,7.01l-34.0,-2.48l-33.8,-3.8l10.71,-81.63l-31.59,-11.1l-25.71,-9.97l-3.84,-3.25l-7.01,-13.94l-14.83,-3.67l-25.6,-33.48l-22.77,-34.44ZM431.43,497.66l0.31,-0.12l0.17,0.01l-0.2,0.26l-0.28,-0.15ZM433.43,493.16l1.61,0.52l0.09,0.54l-0.15,0.11l-1.55,-1.16ZM459.86,461.22l0.41,0.12l0.06,0.53l-0.42,-0.04l-0.04,-0.61ZM466.21,460.65l0.17,0.26l-0.02,0.0l-0.16,-0.26ZM457.33,422.91l-0.21,0.13l-0.28,-0.01l0.5,-0.12ZM510.45,414.38l0.09,0.15l-0.04,0.09l-0.06,-0.23ZM452.6,352.21l0.03,0.15l-0.01,0.1l-0.08,-0.08l0.07,-0.17ZM409.93,384.6l0.12,0.01l-0.05,0.33l-0.07,-0.28l-0.01,-0.06ZM408.2,373.33l-0.03,-0.49l0.36,-0.47l-0.09,0.56l-0.23,0.39ZM318.49,387.42l0.17,-0.15l0.1,-0.19l-0.02,0.65l-0.25,-0.3ZM318.8,386.55l-0.03,-0.21l0.0,-0.15l0.04,0.09l-0.01,0.27ZM320.92,364.54l0.05,-0.18l0.03,-0.08l0.11,0.08l-0.19,0.18ZM329.82,363.21l-0.02,-0.07l0.05,-0.02l-0.02,0.09ZM343.75,364.08l-0.01,-0.29l0.6,-0.07l-0.05,0.14l-0.54,0.22ZM393.17,373.66l-0.08,-0.14l0.13,-0.03l-0.03,0.08l-0.02,0.08ZM393.23,373.44l0.07,-0.35l0.01,-0.02l-0.02,0.16l-0.07,0.21ZM431.06,350.19l0.25,-0.55l0.38,-0.32l-0.44,0.76l-0.19,0.11ZM427.63,295.62l-0.28,-0.5l-3.9,0.29l-0.05,-0.78l0.27,-0.75l4.16,-0.81l0.66,1.13l-0.85,1.43ZM524.08,151.98l-0.31,-0.7l1.09,-0.68l0.05,0.73l-0.83,0.65ZM520.21,200.3l0.21,-1.47l2.86,-4.4l0.44,0.9l-1.75,2.84l0.99,1.66l-1.45,0.22l-0.61,1.26l-0.7,-1.01ZM420.31,181.66l0.5,-1.13l0.61,1.02l2.18,0.2l0.2,-2.11l-2.58,-1.69l-0.08,-0.91l1.13,-0.95l0.69,0.51l1.21,-0.61l0.2,-1.3l2.62,-0.71l1.81,0.46l2.56,2.13l2.24,0.35l0.31,1.19l1.42,0.92l1.0,0.0l0.77,-1.08l1.13,0.45l2.52,4.68l-0.84,3.95l-2.07,2.49l0.7,1.81l1.09,-0.5l-0.59,-0.64l1.22,-0.89l1.6,-3.53l3.93,0.81l2.28,-1.58l2.88,-0.6l2.67,1.15l2.12,2.19l0.21,1.53l-1.81,-0.45l-0.43,-0.79l-0.97,0.82l-1.37,-0.9l-1.56,0.62l1.0,1.43l5.16,1.83l0.58,-0.43l6.3,2.56l0.54,1.01l-0.8,1.12l-6.37,0.59l-6.69,-2.54l1.9,1.9l-0.65,1.59l3.73,0.57l-0.82,0.92l0.39,0.6l-2.01,0.42l1.12,1.93l-1.13,0.97l0.03,1.86l0.86,0.06l1.6,-2.88l1.55,-0.39l-0.48,1.34l0.76,0.64l1.1,-1.51l0.94,0.71l0.6,-1.22l0.75,0.45l0.75,1.32l-0.37,2.78l0.86,0.09l1.07,-1.42l1.61,1.73l-0.48,2.76l-1.94,0.28l-0.93,1.73l0.79,0.81l2.49,-0.89l0.58,2.19l1.33,1.51l1.42,-0.6l-0.79,-3.93l0.76,-1.35l2.52,2.98l-0.56,0.98l0.98,0.87l2.69,-2.59l1.11,1.8l-0.58,0.81l1.4,0.22l0.46,-1.42l-0.54,-1.26l0.93,-1.27l2.81,3.26l2.28,0.92l-1.19,1.0l0.32,0.71l3.62,-1.4l2.85,0.31l0.14,-0.97l-3.53,-1.62l2.66,-1.59l2.21,0.32l1.6,-2.35l2.51,0.56l0.44,-0.95l-0.77,-0.68l1.79,-0.55l2.24,-2.61l4.55,1.5l4.51,-2.83l6.91,0.84l-0.53,2.99l5.66,-0.04l1.75,1.99l-1.7,1.15l0.27,0.97l3.83,-0.52l1.21,1.6l-0.53,1.79l0.92,0.75l-0.62,1.94l-1.14,0.29l-0.73,1.93l-2.6,2.21l1.13,1.01l-0.52,2.49l1.8,1.16l-0.62,1.36l0.74,1.02l-0.26,2.91l-5.19,0.58l-3.82,3.12l-3.42,-0.96l-0.78,-1.29l-0.97,1.46l-0.82,-0.18l-2.21,-2.91l-0.2,-3.81l-3.13,-1.87l-0.24,1.98l1.36,1.75l-0.71,4.18l-4.35,1.76l-3.71,0.19l-0.9,-4.45l-0.95,1.65l0.34,2.55l-0.53,0.71l-0.65,-0.02l-1.6,-4.47l-0.45,4.52l-2.58,0.37l0.09,-1.23l-1.15,-1.89l-1.13,3.17l-2.73,-3.02l-0.24,2.09l0.93,1.46l-1.06,0.13l-1.09,-0.96l-0.22,0.83l-0.85,0.11l-0.44,-1.8l-2.14,2.11l-0.75,-1.4l-0.82,0.91l-3.57,-0.34l-0.03,-2.5l1.42,-3.71l-1.17,-0.53l-0.8,-2.75l-1.07,1.47l-0.69,3.45l-0.18,-1.92l-1.67,-1.41l0.22,2.6l-1.36,-0.56l0.99,1.98l-0.25,1.63l-1.66,1.1l-2.62,0.5l-0.42,-1.29l-0.95,0.62l-1.0,-0.68l0.06,-0.86l-1.62,0.41l-1.17,-3.02l-1.41,0.98l1.62,-2.83l-0.59,-1.76l-4.4,5.7l-0.72,-1.79l-2.33,-1.7l0.36,-2.51l-1.15,-3.73l1.17,-0.44l-0.22,-1.71l-1.56,0.09l-0.97,-1.66l1.02,-3.31l-0.61,-0.69l0.38,-1.33l2.31,-3.37l-0.88,-3.82l0.34,-2.99l-2.37,-2.58l-0.62,-3.84l-2.17,-5.39l-1.27,-0.83l-1.98,1.44l-0.9,-0.3l-0.65,1.31l-4.34,-0.35l-1.27,-1.64l-3.24,-1.66l-2.26,-0.08l-0.71,-0.86l-0.49,-1.5l1.84,-0.12l1.17,-2.1l-0.46,-0.51l-1.97,1.2l-2.68,-3.53l-2.35,-0.75ZM451.53,232.53l0.2,0.49l-0.18,-0.03l-0.02,-0.47ZM519.43,222.72l2.08,-1.78l0.93,0.21l1.51,2.32l-2.89,1.86l-1.28,-0.76l-0.35,-1.86ZM455.33,199.74l0.6,-0.68l1.56,0.5l-0.2,0.22l-1.97,-0.04ZM431.08,193.14l-1.37,1.01l-1.29,-0.29l1.88,-1.41l0.78,0.69ZM519.33,369.36l0.08,-0.17l0.17,0.21l-0.24,-0.04ZM514.4,412.13l0.0,-0.0l0.0,0.01l-0.0,-0.0ZM514.58,412.33l1.89,1.01l-0.22,0.67l-1.74,-1.07l0.07,-0.61ZM505.06,417.57l-0.03,-0.82l3.18,1.26l2.57,2.18l0.11,1.35l-1.66,2.13l-1.01,-0.16l-0.76,-4.02l-2.41,-1.91ZM511.99,423.88l0.53,0.2l-0.02,0.3l-1.34,0.67l0.82,-1.17ZM512.86,424.78l0.64,-0.22l1.49,-0.08l-0.52,1.37l-1.6,-1.06ZM512.76,421.7l0.73,-0.05l-0.36,0.47l-0.37,-0.42ZM509.13,194.54l0.2,-0.25l0.21,-0.1l-0.34,0.37l-0.08,-0.02ZM505.31,340.84l-0.75,-0.58l0.04,-0.62l1.46,0.3l-0.75,0.9ZM499.75,419.3l1.02,0.26l1.78,3.19l1.39,3.85l-0.75,1.32l-1.05,-2.07l-2.03,-1.69l-0.36,-4.86ZM493.21,188.12l0.28,0.32l-0.08,0.36l-0.23,-0.13l0.04,-0.54ZM483.42,380.75l0.8,-1.64l-1.23,-1.79l1.89,-4.42l1.7,1.75l0.49,5.12l-1.32,4.42l-1.73,-1.43l-0.61,-2.01ZM484.15,162.05l1.7,-0.5l1.0,1.62l-1.04,0.74l-0.12,-1.25l-1.54,-0.62ZM479.08,334.77l1.48,-0.55l1.82,0.89l1.27,-0.58l0.97,2.02l-1.78,0.37l-1.64,-0.88l-0.74,0.52l-1.39,-1.79ZM427.65,95.01l0.27,-1.04l1.22,0.23l1.58,2.01l3.93,1.28l1.49,-0.22l1.8,1.72l0.72,-0.12l-1.6,-3.36l1.04,-1.26l2.04,-0.47l-0.04,-0.97l-2.53,-1.14l-1.83,2.17l-1.74,0.26l-0.95,-1.25l1.76,-0.53l0.22,-1.33l-2.25,-0.14l-1.26,1.09l-2.31,-2.07l0.39,-1.21l0.99,0.11l0.63,-1.26l2.63,1.42l0.57,-0.4l-0.16,-1.39l-2.47,-2.77l0.74,-1.3l-0.35,-0.92l4.17,-0.23l1.75,1.38l2.55,0.29l0.43,0.81l1.17,-0.55l-0.98,-1.99l-2.46,-0.81l-0.37,-0.98l0.08,-0.6l2.29,-0.25l0.11,-1.13l-3.86,-1.4l0.69,-0.71l-0.44,-0.87l-2.49,0.14l1.73,-1.45l-1.35,-0.79l1.22,-2.91l1.29,-1.01l1.81,2.76l2.64,-1.83l-0.15,-1.22l-1.04,-0.57l1.28,-0.11l1.29,0.95l1.89,-0.69l0.52,-2.62l-0.74,-1.47l-3.04,0.03l-1.69,-1.25l0.7,-2.47l1.83,0.73l0.57,1.15l0.83,-0.76l-0.19,-1.48l0.65,0.25l4.27,3.47l1.67,2.64l-0.43,2.4l1.58,2.67l1.88,6.54l2.15,2.67l-0.55,2.47l3.34,0.83l1.0,2.0l0.82,-0.11l-0.26,-1.63l1.61,-0.09l1.03,1.58l-0.85,1.74l0.69,0.56l-0.7,2.2l1.17,3.27l2.62,2.67l0.96,-0.69l1.24,0.34l0.84,1.37l2.79,-0.41l1.09,2.79l-2.16,3.13l1.2,0.27l1.22,-1.54l-0.58,6.24l-1.43,2.18l0.31,1.7l1.29,0.08l1.04,-2.22l1.07,1.33l0.72,-0.98l-0.31,-1.59l1.53,-0.13l1.13,1.76l-0.42,3.04l1.26,0.71l1.02,-4.81l1.45,4.01l2.55,4.05l-2.54,3.13l-4.99,2.97l-0.71,2.6l-0.81,-2.36l-0.82,-0.01l0.24,3.95l-2.97,6.75l-1.5,-4.29l-0.01,-3.36l0.86,-1.09l0.2,-2.51l-0.74,-0.07l-0.73,1.99l-1.25,0.49l0.24,8.2l-1.07,0.74l0.43,0.7l1.35,-0.23l0.55,2.31l-1.07,1.91l-1.67,-3.62l-1.84,0.17l1.38,5.18l-1.23,6.18l-5.86,-11.61l-0.9,0.8l0.12,2.33l2.56,7.01l-1.18,-0.05l-1.29,-2.64l-2.92,-0.26l-0.73,0.89l2.06,1.11l0.3,2.6l-2.68,0.25l-3.61,-1.19l-1.24,-1.3l-1.27,0.5l-0.49,-2.72l-1.98,-0.11l-1.78,-3.64l1.74,0.12l3.69,-1.35l0.86,0.49l0.59,-1.32l-6.11,-2.35l-2.41,1.06l-0.67,-1.1l0.4,-1.19l-0.98,-0.04l-1.04,-1.94l2.81,1.25l0.87,-0.29l0.08,-1.05l-2.64,-2.05l-1.57,0.04l-1.79,-3.63l3.32,-1.49l1.33,-2.87l2.16,0.72l5.01,-0.32l6.71,-1.41l1.09,-1.33l-0.62,-0.54l-3.02,0.21l-5.19,1.09l-2.43,-1.02l0.26,-0.96l3.07,0.28l3.79,-1.34l0.34,-1.72l-3.82,1.13l-3.09,-0.65l1.69,-1.39l-0.35,-0.85l-1.91,-0.0l-1.26,0.94l-1.09,-1.98l-1.44,1.08l-0.89,2.25l-0.85,0.01l0.02,1.27l-1.24,1.28l-0.58,-1.3l1.68,-1.96l-3.3,-1.25l-0.65,0.26l-0.15,2.01l-2.82,1.37l0.35,-1.57l-0.79,-1.75l-0.99,0.48l-1.03,-0.62l0.36,-2.95l4.91,-1.61l2.03,-2.07l0.3,-2.61l-0.88,-0.51l-2.15,2.69l-1.95,0.74l-2.78,-0.29l-2.35,-4.95l1.56,-1.92l-2.06,-1.42l-0.23,-1.34l1.39,-0.91l-1.55,-0.36l-0.27,-0.93ZM443.68,113.89l0.28,0.85l-0.7,0.52l0.38,-0.96l0.04,-0.42ZM461.38,146.39l0.13,0.3l0.04,0.32l-0.12,-0.23l-0.04,-0.39ZM467.83,95.12l-0.47,-2.39l-1.08,-0.44l-0.75,-1.59l0.77,-3.65l3.21,0.98l0.55,5.35l-2.23,1.74ZM428.54,100.87l-0.38,0.08l-0.0,-0.39l0.24,-0.06l0.14,0.37ZM467.85,144.53l0.1,-1.31l0.38,-0.61l-0.14,0.96l-0.34,0.97ZM468.67,140.92l0.03,-0.58l0.13,-0.04l0.0,0.05l-0.16,0.58ZM453.12,161.32l1.28,-0.9l2.87,0.68l2.74,3.46l0.67,3.57l-2.13,2.79l-1.23,0.17l-3.87,-3.88l-0.32,-5.87ZM459.03,188.82l-2.86,-6.15l1.29,-1.47l1.58,-0.38l1.49,2.86l-1.01,2.28l0.86,2.56l-1.13,-0.33l-0.23,0.65ZM457.48,356.25l0.14,0.07l-0.06,0.19l-0.08,-0.25l-0.0,-0.01ZM455.72,351.19l1.01,-1.44l0.89,0.73l-1.07,2.13l-0.83,-1.42ZM421.71,269.81l0.55,-2.41l0.89,-0.23l-0.57,-7.78l0.24,-2.03l0.85,-0.72l-0.96,-1.53l0.29,-1.54l2.13,-0.53l1.47,2.21l2.74,0.5l-0.05,-1.28l-1.14,-0.38l-1.36,-2.16l0.81,-1.29l-1.45,-0.16l-0.66,-1.39l0.47,-1.74l3.32,-1.81l4.85,-0.73l1.1,1.49l0.62,-2.05l2.47,-0.16l5.15,2.79l0.8,2.82l1.3,-0.14l1.9,-1.66l1.64,-0.14l3.56,0.65l4.75,2.14l-1.09,0.72l0.0,1.59l-2.62,5.22l-1.34,0.04l0.33,1.6l-2.19,4.92l-2.41,0.8l1.51,1.0l-4.78,9.89l-1.63,0.64l-6.15,-2.6l-7.1,1.07l-0.05,1.51l3.42,0.4l-0.14,1.38l1.23,1.05l0.93,2.98l-2.44,2.95l-2.07,5.39l-1.09,1.0l-5.9,0.08l0.81,-2.2l2.19,-0.87l-0.84,-0.59l-1.68,0.45l-0.24,-0.64l0.1,-5.21l0.64,-1.13l-1.31,-4.06l-1.38,-1.4l0.48,-0.89l-0.88,-1.38l-0.04,-4.42ZM430.89,292.66l0.04,-0.02l0.01,0.07l-0.05,-0.05ZM454.65,352.83l-0.33,-0.41l0.26,-1.19l0.58,2.35l-0.51,-0.75ZM453.0,471.13l0.19,0.06l0.17,0.16l-0.28,-0.02l-0.08,-0.2ZM446.91,341.46l0.79,-0.49l-0.07,1.35l-0.35,-0.26l-0.37,-0.61ZM446.55,468.94l0.04,0.02l-0.03,0.04l-0.0,-0.0l-0.01,-0.06ZM445.93,340.08l0.11,-0.11l0.26,-0.0l-0.36,0.11ZM425.38,160.25l0.48,-2.25l3.84,-2.17l0.53,1.65l2.42,-1.14l5.97,1.59l1.12,-0.98l1.66,1.12l0.51,1.38l-1.4,0.71l-0.94,4.39l-12.85,-1.49l-1.35,-2.81ZM419.31,222.88l1.54,-4.3l2.31,-0.56l0.69,-1.51l-0.75,-0.37l0.27,-0.52l2.01,-1.42l-0.54,-2.11l5.25,-2.91l2.61,0.99l3.95,5.88l-0.84,1.01l1.78,1.21l-0.53,1.41l0.6,1.82l-1.11,1.77l1.18,1.96l-0.24,4.58l-0.78,0.52l0.47,1.21l-0.56,0.6l-6.55,0.22l-0.53,-1.16l-1.47,-0.02l0.15,-1.12l-1.59,-1.93l-2.87,-1.1l-0.38,0.45l-1.38,-2.06l0.6,-0.63l-0.39,-2.11l-1.01,0.49l-0.55,2.09l0.12,-2.13l-1.46,-0.23ZM423.56,213.87l-0.12,-0.05l0.05,-0.1l0.03,0.01l0.04,0.13ZM433.47,79.05l2.22,0.14l0.49,1.15l-0.62,0.41l-3.69,-1.53l1.6,-0.17ZM416.22,136.4l2.05,-0.98l-1.3,-2.9l0.11,-2.87l0.9,-0.83l3.13,0.78l2.68,2.67l1.63,0.48l1.66,1.84l-0.48,2.22l1.8,1.36l1.39,-0.82l0.94,0.36l2.76,3.08l-0.08,1.03l-2.91,2.52l2.41,3.58l-0.97,3.13l-1.57,-0.19l-5.02,2.32l-0.97,-1.04l-1.33,0.69l-0.83,1.91l-0.66,-0.34l0.57,-2.92l-3.36,-2.86l0.27,-0.99l3.77,0.54l0.54,-1.86l-2.74,-2.31l-1.83,-0.37l-1.24,-2.23l0.23,-2.37l-1.49,-1.43l-0.07,-1.19ZM432.55,201.06l0.82,4.6l-1.67,0.27l-0.94,-4.09l1.79,-0.78ZM430.01,501.43l0.97,-0.01l0.44,0.57l-0.36,0.42l-1.04,-0.98ZM423.28,233.75l1.26,-1.17l1.43,2.47l-2.18,-0.68l-0.52,-0.62ZM417.48,212.26l-0.01,-0.76l2.38,-1.13l-0.06,1.93l-1.18,0.75l0.15,0.81l-0.97,-0.05l-0.31,-1.56ZM421.34,209.39l0.11,-1.06l1.96,1.73l-1.35,1.95l-0.81,-1.09l0.09,-1.54ZM421.62,297.89l0.27,-0.12l-0.0,0.05l-0.27,0.08ZM422.23,296.62l-0.31,-0.28l0.46,-0.16l-0.15,0.44ZM389.19,351.96l1.95,0.55l2.03,-0.68l1.12,-2.28l0.58,0.4l1.52,-0.72l0.14,-1.27l-1.28,-2.05l1.34,-0.17l-0.91,-2.29l0.88,0.34l1.71,3.05l1.24,-0.02l0.18,-0.77l-2.25,-3.41l0.79,-2.88l2.42,-2.54l3.0,2.8l0.46,1.11l-0.92,0.82l0.66,1.72l0.83,-0.03l0.58,-1.54l2.19,4.14l4.67,4.17l-0.47,5.36l0.77,0.85l0.76,-0.35l0.21,-3.25l1.03,6.77l1.07,0.08l0.67,1.22l2.22,-1.37l0.64,0.63l-1.91,2.36l-0.86,-0.78l-1.61,0.33l-0.77,2.34l-1.05,-0.01l-2.45,2.86l-1.47,0.43l-4.18,-3.29l-0.78,0.45l0.0,1.03l-2.13,-0.68l-2.02,-2.6l-3.15,-1.4l0.02,-2.1l-1.03,-1.12l-0.95,0.29l-0.32,1.89l-2.35,-1.9l0.57,-1.76l-1.34,-1.01l-1.67,0.69l0.3,1.29l-0.62,0.2l-1.39,-1.1l-0.88,-2.86l1.01,-1.65l1.16,-0.28ZM414.67,346.77l0.79,-2.2l1.01,-0.52l2.17,2.28l-0.36,2.41l-1.64,1.11l0.59,-3.49l-0.78,-1.58l-1.18,0.46l-0.29,3.04l-0.32,-1.5ZM414.95,348.36l-0.2,0.62l0.01,0.28l-0.08,-0.53l0.28,-0.37ZM411.32,98.34l1.01,-4.59l1.24,-1.13l1.28,1.16l1.53,-0.38l1.16,4.2l-0.81,6.55l-1.8,-1.46l0.27,-2.18l-1.22,-1.67l-2.43,0.15l-0.23,-0.65ZM374.65,271.26l1.97,-5.77l2.84,-1.37l1.55,1.82l0.05,1.86l1.25,1.11l0.57,3.29l2.19,1.66l1.59,0.06l0.69,-1.11l2.35,0.48l1.05,-1.22l0.12,-1.68l1.82,-0.35l0.42,-1.35l-0.92,-4.78l-0.97,-0.3l-0.87,0.71l-0.41,-0.77l1.36,-2.26l2.16,2.2l1.64,-0.07l0.25,-0.94l-1.66,-0.9l-2.81,-5.73l0.58,-2.35l-2.08,-1.04l0.29,-0.74l-1.18,-0.76l0.61,-2.28l3.23,-0.36l2.81,2.56l1.41,-2.63l1.47,0.9l1.99,3.57l0.77,-1.37l1.88,0.54l0.9,-0.84l3.78,-0.59l1.4,-1.38l0.62,0.59l1.21,-0.69l1.97,0.93l1.5,2.73l-0.26,1.98l-1.56,1.52l-1.16,-0.78l-0.5,1.25l-0.96,-0.32l-0.62,1.65l0.6,1.01l1.16,-0.71l1.4,0.5l-0.15,1.78l-3.64,1.11l-5.82,6.46l0.48,3.84l1.76,-2.63l1.76,-1.18l1.87,0.33l2.34,1.76l-0.22,1.33l-1.09,0.6l1.34,0.81l1.01,2.19l-1.14,1.5l0.2,1.66l1.04,-0.04l2.47,-2.03l1.12,1.43l0.68,4.68l-2.3,1.94l-1.3,-0.26l-0.36,0.62l1.76,1.4l0.5,2.45l-0.19,1.19l-2.27,0.61l-0.18,0.67l2.39,0.53l-0.21,0.9l-1.8,1.03l0.88,0.81l0.98,-0.56l-0.72,1.86l-0.73,-0.91l-1.9,1.1l-1.79,2.78l-3.0,0.77l-3.68,-1.31l-0.54,-1.24l1.3,-3.44l-1.08,-0.61l-2.02,4.09l2.62,4.72l-1.02,1.91l-2.48,2.43l-1.29,0.19l-1.19,-2.37l-1.76,0.57l-0.52,-5.08l-1.18,-0.97l-1.5,-5.44l-1.64,-0.98l-2.95,-7.01l-1.04,-0.68l-1.38,0.27l0.07,-1.82l-1.28,-1.58l-1.8,1.15l-1.95,-1.02l-0.38,-0.95l0.82,-0.69l-0.81,-0.81l-0.0,-1.42l-2.82,-2.69l-1.76,-3.24ZM390.43,268.86l-0.03,-0.05l0.05,-0.05l0.03,0.02l-0.05,0.08ZM391.13,258.22l-0.13,1.15l-2.76,1.04l-3.72,-4.97l2.35,-2.21l1.66,0.33l1.12,3.12l1.48,1.54ZM395.74,247.0l-1.15,1.05l-0.77,-0.64l1.11,-1.09l1.19,0.17l-0.38,0.51ZM383.64,205.28l0.98,-0.35l-0.1,-1.22l0.92,-0.88l2.25,1.05l0.89,-0.46l-1.01,-1.33l0.64,-1.21l-1.4,-0.09l0.59,-1.18l2.2,-0.44l1.73,3.41l1.11,0.73l2.79,-1.46l-0.32,-0.68l-2.14,0.59l-0.0,-1.51l-0.95,-0.56l-0.09,-1.13l1.71,-1.64l-0.08,-0.96l-2.37,0.42l-0.43,-0.71l0.15,-2.2l3.16,-2.97l-4.23,0.03l1.31,-2.84l-0.4,-0.94l1.17,-0.93l2.36,1.3l1.07,1.88l-0.53,2.31l2.46,2.81l-0.67,1.03l2.18,1.08l1.1,2.81l-0.34,0.81l1.3,1.29l3.61,-2.66l-2.55,0.12l-1.15,-3.95l2.31,0.7l2.05,-1.41l-1.88,0.14l-1.45,-1.62l-1.17,0.14l-1.42,-1.07l0.11,-0.5l3.22,0.42l0.05,-1.7l-1.42,-1.76l-2.77,-0.3l-1.23,-2.57l3.98,-2.87l2.12,1.16l0.39,0.02l0.59,-0.55l0.17,0.01l-0.21,0.83l0.76,0.32l2.26,4.87l0.32,-1.26l1.55,0.24l-0.83,-2.83l0.59,-1.37l1.04,0.97l1.35,-0.91l0.26,1.46l3.57,2.17l-0.94,3.69l1.31,3.45l-1.27,4.95l0.26,2.81l-2.32,2.5l3.09,2.5l-0.58,3.27l-1.38,-1.71l-2.28,2.1l-0.15,1.15l1.02,0.42l-1.01,0.13l-0.97,2.26l0.38,1.15l1.83,1.31l-0.22,1.08l0.95,1.02l-0.73,0.28l-1.64,-2.81l-0.86,1.75l0.95,3.04l-4.23,0.37l-0.99,-1.88l-0.85,1.34l-1.93,0.15l0.71,-3.06l-0.84,0.16l-1.41,3.01l-4.51,-1.58l0.29,-2.82l-0.76,-1.01l2.77,0.07l0.63,-0.78l-1.72,-0.92l-0.09,-1.25l-1.4,0.3l-0.46,-0.63l1.35,-0.75l-0.55,-1.38l3.07,-0.16l0.54,-0.85l-0.65,-0.91l1.3,-0.09l1.47,-1.72l-0.75,-0.88l4.91,-0.17l0.33,-1.35l-10.06,0.4l-4.14,0.95l-1.31,-0.58l-6.97,1.45l-0.47,-1.89ZM414.24,266.9l0.91,0.17l0.16,1.43l-0.9,1.89l-1.18,0.2l-0.74,-3.42l1.63,-1.82l0.11,1.55ZM413.9,275.02l-1.05,-0.59l1.41,-2.15l0.13,1.99l-0.49,0.75ZM411.31,235.08l-0.17,-0.77l2.09,-2.24l-0.31,1.96l-1.61,1.05ZM409.94,345.15l2.12,0.76l0.95,-0.39l-0.28,3.31l-2.79,-3.68ZM382.84,135.77l-0.59,-2.3l0.4,-2.05l1.47,-0.73l2.71,2.01l2.88,0.94l1.3,-3.47l-3.0,-0.68l2.42,-0.16l1.53,-2.23l-0.42,-1.23l-1.34,-0.04l-0.51,-0.94l-1.08,0.01l-0.37,0.97l-0.54,-0.55l2.34,-2.62l-0.92,-2.5l-0.98,-0.62l-1.67,0.95l-1.02,2.32l-1.68,1.23l2.44,-5.44l-1.31,-1.09l-2.99,0.31l0.45,-3.63l1.34,-3.45l1.11,0.94l6.93,-0.53l2.58,2.17l0.69,1.58l0.97,4.08l-1.29,3.2l0.94,0.56l0.02,1.87l1.57,-1.52l0.25,-1.95l2.39,-1.59l0.93,0.3l1.44,2.91l1.25,0.73l-1.25,3.71l1.42,1.16l2.81,-1.08l1.86,3.24l-0.91,1.75l2.41,1.23l-2.04,3.56l-0.03,3.7l1.35,0.72l2.39,5.97l-1.01,2.34l0.25,1.78l-0.75,0.82l-3.19,0.26l-0.72,0.75l-3.03,-2.19l-0.72,-3.75l0.56,-1.61l-1.23,-3.56l-1.38,0.11l-0.96,-1.37l-3.26,-1.74l-2.35,0.82l-0.76,-0.98l0.85,-1.48l-0.29,-1.0l-5.42,0.69l-1.75,1.62l-2.15,-1.03l-1.32,-2.23ZM402.18,245.84l5.3,-1.86l2.75,-0.09l-1.09,2.38l-2.21,2.01l-2.94,0.62l-4.58,-1.3l2.65,-0.81l0.12,-0.96ZM404.52,336.05l0.28,0.24l-0.19,0.5l-0.18,-0.17l0.08,-0.57ZM400.0,384.31l0.18,-0.59l0.82,-0.41l-0.03,0.27l-0.98,0.73ZM393.68,182.33l2.34,-0.92l1.47,-1.77l3.14,0.18l-5.02,2.71l-1.93,-0.2ZM392.97,153.4l0.22,-3.26l3.57,0.04l2.26,1.79l1.09,2.26l-2.85,-0.38l-1.53,1.08l-2.76,-1.53ZM390.42,142.83l-0.37,-1.01l1.77,-1.87l0.13,1.23l-1.53,1.65ZM380.94,200.83l0.6,-1.1l1.3,-0.07l0.14,-1.57l4.85,-1.31l0.73,0.88l-2.31,0.72l-1.53,2.53l-3.78,-0.08ZM378.12,196.44l4.81,-1.79l4.15,-0.08l-0.14,0.79l-7.87,1.78l-0.95,-0.71ZM375.95,190.46l3.49,-1.4l6.37,-0.48l0.58,1.84l-1.06,2.26l-3.24,1.1l-3.2,-0.16l-2.89,-1.45l-0.05,-1.71ZM382.95,318.72l1.44,0.77l0.22,2.48l-1.82,-1.42l0.16,-1.82ZM376.35,180.68l1.85,-1.9l1.59,0.1l-0.7,2.34l1.86,-0.68l0.7,2.11l2.71,2.61l-1.9,1.61l-5.37,-0.68l0.39,-3.22l-1.13,-2.29ZM382.75,351.96l0.5,1.7l-0.24,1.27l-0.95,-1.38l0.69,-1.6ZM378.63,357.96l0.57,-3.98l0.44,-0.58l2.04,2.62l-0.39,1.86l-1.43,1.5l-0.05,-1.51l-1.16,0.08ZM380.72,368.46l0.1,-0.05l-0.02,0.19l-0.08,-0.15ZM374.01,155.31l0.21,-2.42l-0.8,-2.01l0.8,-0.65l1.57,1.3l1.89,4.93l-0.54,3.16l1.37,0.18l1.17,2.66l0.14,1.85l-0.85,1.86l-1.4,0.46l-0.78,-1.62l-1.22,-0.12l-1.48,-7.58l0.58,-1.2l-0.67,-0.8ZM262.31,316.35l2.08,-0.14l-1.96,-6.32l0.67,-1.78l29.25,8.27l-0.45,3.6l3.86,0.06l0.08,-2.77l17.96,3.86l11.64,-52.14l1.02,0.72l0.45,-0.54l-0.33,-5.28l0.81,0.53l0.91,-1.42l-1.26,-1.18l0.84,-3.76l1.32,0.77l-0.68,0.91l1.98,3.52l1.31,0.03l0.66,1.95l-0.78,2.32l2.6,0.61l-1.19,4.72l-0.04,4.61l0.7,0.67l-0.61,2.61l0.7,0.59l-0.15,1.23l0.53,-0.06l-0.76,0.93l0.26,2.94l-0.58,0.75l1.35,0.47l0.24,1.97l1.62,0.74l0.65,-0.57l-0.39,-1.82l1.03,0.39l0.95,-1.25l2.37,-0.74l-0.93,-1.08l1.3,-1.05l-1.93,-2.91l0.34,-1.81l-0.81,-1.19l0.22,-2.55l0.8,-0.71l-0.48,-2.76l0.67,-0.65l-0.92,-1.26l0.86,-1.52l-0.24,-12.82l0.88,-1.09l1.54,0.68l0.58,-0.44l-1.25,-2.02l0.83,-1.15l1.76,0.8l3.3,4.11l0.86,-0.52l-0.07,-2.01l1.15,-0.22l2.82,5.57l2.41,1.22l1.77,5.26l-0.7,1.14l0.97,2.93l-0.1,2.98l-0.73,1.46l1.27,6.09l-0.78,2.36l0.62,5.17l0.86,1.04l1.18,5.51l-0.26,4.34l-1.28,0.3l-0.33,3.04l-1.64,2.12l2.84,4.68l0.53,3.8l1.04,0.58l1.58,3.35l1.99,0.55l0.87,1.98l3.24,1.02l4.5,5.28l1.19,0.26l0.88,-0.76l0.39,4.13l1.88,-0.71l0.81,0.64l1.28,-0.97l0.03,7.9l-0.86,2.57l-1.99,-0.34l-0.66,-3.2l0.48,-1.61l-0.57,-0.42l-2.18,4.42l-1.52,-1.35l-0.31,-2.12l-1.01,-0.13l-0.04,-1.44l-0.73,-0.32l-1.28,2.17l-1.57,1.08l-1.03,-0.29l1.04,2.25l-0.26,1.54l-0.39,0.73l-1.54,-0.01l-2.17,-1.88l-0.77,-1.75l-1.95,-0.38l-0.57,1.77l1.97,2.07l0.29,2.37l0.94,0.37l-0.8,3.26l-1.54,1.25l-0.03,1.94l0.83,0.08l3.22,-5.13l2.26,-0.4l0.69,-1.2l1.16,-0.27l1.41,0.47l0.57,1.19l-1.81,0.93l-0.19,0.91l0.88,0.86l-1.2,-0.23l-0.23,1.51l1.39,1.22l1.0,-1.4l0.8,1.26l-0.83,3.7l-1.57,-0.48l-0.9,0.9l-1.83,-0.25l-1.1,1.72l-1.84,-0.82l-0.04,1.26l-1.58,0.48l-1.41,-1.13l-1.54,0.16l-0.46,0.75l-0.83,-1.04l-3.94,-1.21l-1.27,-2.09l-1.5,-0.03l-1.12,1.34l-3.67,-1.26l-0.43,-0.87l2.54,-1.36l0.07,-1.33l-3.85,-1.12l-0.64,-1.26l-2.42,-0.91l-2.45,0.1l-1.13,-0.9l1.31,-1.45l0.18,-2.67l-1.8,-2.85l-1.81,1.09l-0.36,1.29l-1.64,0.17l-0.41,3.13l-3.6,3.28l-4.69,0.8l-4.32,-1.01l-0.77,1.48l-3.95,2.3l-4.82,0.78l-4.52,-0.72l-1.13,0.66l-1.45,-1.06l-1.8,0.4l-0.65,-0.82l-4.19,-0.24l0.07,1.07l-6.6,-1.54l-2.6,-0.28l-1.27,0.6l-1.79,-0.57l-0.18,-1.43l-1.54,-1.61l-1.07,-4.66l2.09,-4.8l-0.39,-2.55l1.28,0.35l-0.11,-0.95l-4.84,-3.41l-4.48,-0.59l-1.12,-0.97l-1.41,0.5l-5.16,-2.72l-3.26,-3.47l0.33,-3.36l-1.77,-0.93ZM296.42,348.86l0.63,0.22l-0.44,-0.1l-0.19,-0.12ZM366.3,318.81l-1.06,-1.02l0.04,-1.63l1.15,1.7l-0.13,0.94ZM282.72,346.82l-0.62,-0.06l-0.07,-0.11l0.28,-0.07l0.41,0.24ZM374.96,341.65l1.94,1.67l-1.05,1.12l0.26,-1.62l-1.15,-1.16ZM370.45,212.46l1.02,-2.68l1.74,-1.62l1.28,0.15l1.48,1.77l0.65,4.47l-1.81,1.97l-2.25,0.64l-3.24,-2.83l1.13,-1.86ZM372.18,349.51l-0.69,-0.62l0.14,-0.26l0.41,-0.04l0.14,0.92ZM365.6,358.91l2.37,-2.4l1.72,1.02l-0.26,2.28l-0.9,-0.23l-0.19,1.25l-2.74,-1.91ZM369.05,337.93l-0.03,-0.16l0.09,-0.51l-0.05,0.67ZM337.68,214.24l3.33,-14.87l5.76,2.77l1.51,-3.5l0.25,-2.2l-3.92,-3.56l-0.1,-1.81l-1.63,-0.12l5.0,-2.96l-0.8,-3.92l-1.48,-1.73l-0.79,0.02l1.18,-5.29l1.87,-0.82l0.02,-1.38l3.47,-4.44l2.99,-0.51l-0.22,1.64l1.01,0.5l-0.04,1.06l-1.91,1.27l0.66,2.21l-1.1,3.26l1.56,1.07l0.7,2.61l-0.87,0.53l0.36,1.05l-1.58,0.69l-1.35,3.04l0.43,0.57l3.42,0.05l0.8,1.47l-2.71,3.12l-0.33,1.81l1.16,0.02l1.48,-1.92l2.67,-0.13l0.44,6.08l0.92,0.31l0.57,-2.72l1.6,-0.89l-1.34,-0.99l0.58,-2.79l1.65,-1.78l1.33,0.24l2.88,2.18l0.61,1.29l0.03,6.89l-2.61,3.05l0.61,0.99l-0.66,2.23l-1.87,2.23l-0.39,2.47l-1.33,1.0l0.24,0.93l-4.44,0.4l-1.89,1.54l-1.09,-0.14l-2.22,-1.7l0.37,-2.12l-0.6,-1.0l-0.76,1.63l-1.43,0.28l-0.39,1.54l-2.11,0.01l-0.34,-2.82l-1.7,-1.22l-5.3,3.83l-2.16,-0.53ZM352.93,252.59l-2.03,-2.5l-1.37,-0.46l3.4,-4.11l8.91,0.49l3.37,4.72l-1.3,5.04l-1.65,3.11l-2.3,3.37l-1.39,1.24l-1.07,-0.21l-0.06,1.2l-2.02,-6.47l-0.9,-0.66l-0.05,-2.54l-1.54,-2.22ZM356.24,131.28l0.61,-2.73l1.07,-4.77l1.78,2.73l0.28,1.9l-1.49,3.66l-1.82,0.06l-0.43,-0.84ZM354.64,140.84l-0.56,0.09l0.72,-3.2l1.23,1.04l-1.38,2.06ZM344.37,358.41l2.93,0.73l0.43,2.38l-1.76,-0.48l-1.6,-2.64ZM343.31,246.11l1.2,-0.38l1.16,0.72l-2.22,0.24l-0.15,-0.58ZM319.51,383.52l0.58,1.05l0.1,0.1l-0.52,-0.1l-0.16,-1.05ZM317.62,367.22l0.19,-0.56l0.63,-0.35l-0.4,1.1l-0.43,-0.19ZM317.34,374.35l-0.13,-0.78l0.25,-1.06l0.35,1.97l-0.46,-0.13ZM316.98,377.97l0.04,-0.85l0.65,-0.18l-0.58,1.35l-0.12,-0.32ZM314.27,374.28l0.57,0.24l-0.52,0.82l-0.22,-0.84l0.16,-0.22ZM310.96,365.11l0.9,-0.17l0.05,1.27l-0.95,-1.11ZM308.75,362.36l0.31,0.23l0.02,0.64l-0.44,-0.71l0.11,-0.16ZM304.92,360.33l0.09,-0.06l-0.03,0.05l-0.06,0.01ZM298.85,350.54l1.55,-0.48l0.33,0.64l-1.15,0.07l-0.73,-0.23ZM292.43,354.37l-0.15,-0.28l0.45,-0.29l-0.16,0.44l-0.15,0.13Z",
            "name": "Nunavut"
        },
        "ns": {
            "path": "M806.11,740.27l1.94,-4.77l1.53,-10.21l1.51,-3.01l0.15,-1.97l1.87,-0.41l-0.36,1.59l1.07,0.72l1.38,-0.48l0.25,0.69l-0.15,2.84l0.78,0.69l-0.72,7.59l0.66,0.58l-1.72,2.11l-1.3,0.41l-2.17,3.71l0.96,0.16l0.28,1.37l0.95,-0.71l0.24,0.04l-1.43,1.75l0.15,1.53l1.35,0.03l1.9,-1.77l0.72,0.25l-0.26,0.87l-2.52,2.28l-1.15,-0.45l-1.0,1.26l-1.85,-1.48l-3.05,-5.19ZM816.59,744.31l1.05,-1.42l-0.51,-1.54l2.65,-4.97l-0.63,-0.39l-2.83,2.93l-0.6,-0.45l3.92,-6.11l-0.72,-0.78l-1.52,1.81l1.07,-2.31l1.42,0.6l-0.36,1.85l1.71,-0.36l-0.0,-1.84l2.48,0.8l0.8,-0.47l-0.4,2.67l1.97,0.46l-3.13,2.47l-0.17,0.84l0.9,0.39l-1.01,1.83l-4.32,3.9l-1.76,0.09ZM816.44,732.88l0.05,-0.34l0.15,-0.22l-0.19,0.56ZM816.77,732.01l0.24,-0.64l0.0,-0.0l-0.04,0.32l-0.2,0.32ZM812.97,739.62l0.88,-1.79l0.6,-0.25l0.0,1.23l-1.48,0.81ZM759.62,789.53l0.16,-4.68l2.2,-4.08l-1.01,-0.82l0.79,-1.21l0.55,1.16l1.15,-0.48l2.56,-4.02l-0.92,-0.09l-2.38,2.22l8.34,-9.82l4.16,-3.04l0.82,-1.68l0.15,2.95l0.79,0.75l0.65,-0.85l0.83,0.28l1.64,1.93l0.85,-0.63l-0.2,-1.37l-1.52,-0.96l0.48,-1.27l4.28,-3.21l3.19,-0.71l0.95,-1.59l-3.38,-0.07l-3.46,1.51l-2.84,-0.03l-3.3,1.74l-2.47,-0.07l-1.2,0.97l-0.22,1.24l-2.04,0.04l4.14,-6.74l0.02,-1.13l1.63,-0.72l0.41,-3.75l1.44,-1.22l1.43,0.16l2.21,1.66l1.47,-0.03l1.43,-1.45l-0.11,1.13l1.96,-0.28l0.15,0.77l1.33,0.29l2.45,-1.4l0.23,-0.87l4.41,-0.24l-1.15,1.72l1.38,0.56l1.1,-0.77l-0.0,-0.87l2.14,0.66l4.61,-6.3l1.62,2.8l3.57,0.38l1.19,-1.77l3.74,2.14l-2.2,2.48l0.51,0.93l5.15,-1.32l0.05,1.13l-0.76,-0.45l-1.84,0.96l-0.78,1.92l-3.7,1.02l0.54,1.19l-1.67,0.55l-2.19,3.02l-2.05,0.97l-1.89,2.18l-0.47,-0.39l-3.51,3.25l-0.15,1.04l-1.47,0.57l-0.41,-0.68l-1.66,0.09l-0.12,1.24l-1.32,0.34l-0.06,1.77l-1.34,-0.47l-0.81,0.54l0.56,0.97l-3.16,-1.14l-0.2,0.6l1.63,1.08l1.01,2.07l-1.9,0.73l-0.83,-0.89l-1.51,0.95l-0.65,-3.4l-2.22,1.84l0.95,1.84l-0.28,0.68l-1.28,-1.4l-2.02,0.98l-0.06,2.33l0.87,0.89l-0.1,1.05l-1.02,0.47l1.06,0.58l-1.02,2.27l-1.52,1.0l1.05,0.57l-1.54,0.73l0.61,1.07l-1.6,1.43l0.4,1.43l-0.91,-0.21l-0.93,0.87l0.68,1.29l-1.25,-0.81l0.52,1.66l-3.0,-0.19l0.49,2.0l-0.73,-1.36l-1.0,0.63l0.82,2.23l-1.31,0.88l0.18,1.22l-1.36,-0.74l-1.19,1.4l-1.25,-2.57l-2.08,-1.97l-2.19,-0.02l0.72,1.81l-1.29,-0.35l-2.43,-5.2ZM815.32,751.9l-0.03,0.02l0.03,-0.1l0.01,0.08ZM814.11,746.7l0.43,-0.47l0.76,-0.29l-0.16,0.85l-1.03,-0.09Z",
            "name": "Nova Scotia"
        },
        "mb": {
            "path": "M325.81,733.16l8.91,-123.96l2.81,-21.17l0.68,-1.04l-0.07,-3.63l1.91,-0.88l-1.53,-1.99l0.27,-2.01l2.58,-1.88l2.72,-3.66l0.59,-2.49l-1.67,0.2l-0.75,-0.71l0.21,-4.29l-1.41,0.85l-1.0,2.53l0.82,-2.47l-0.4,-0.68l4.56,-34.38l33.83,3.81l33.9,2.47l-0.48,6.3l0.68,6.11l-0.92,4.18l-1.34,-0.06l-0.7,0.81l1.81,0.42l1.05,1.4l-0.48,3.02l1.42,-0.82l1.5,3.03l1.8,-0.28l0.27,0.59l-1.11,2.12l-0.82,6.88l0.75,-0.03l1.44,-3.28l0.06,-3.8l1.1,-2.83l4.0,-0.25l1.82,0.42l0.99,1.31l1.01,-1.02l1.12,0.23l0.16,4.19l2.86,8.44l0.25,4.64l3.21,8.93l-1.85,5.4l-2.86,2.98l1.99,-0.17l2.43,-1.98l1.58,-0.33l-1.98,1.88l1.85,-0.02l1.33,-1.17l12.03,-4.28l4.28,0.66l6.26,4.2l9.56,3.02l-49.26,55.91l-17.57,16.11l-3.92,65.83l-1.43,0.88l0.3,2.14l-32.47,-2.21l-38.67,-4.14ZM358.05,659.25l-0.57,1.38l2.52,3.34l1.2,-0.32l1.1,0.68l0.62,-0.83l2.78,0.77l-4.58,1.29l-0.34,1.82l0.94,2.85l3.13,3.99l0.22,2.26l2.43,1.74l0.42,2.75l0.85,0.78l0.19,3.11l3.02,1.79l1.2,-4.49l1.9,-0.21l-1.49,1.95l0.62,1.94l2.46,-2.21l0.95,4.17l-1.21,3.82l0.46,3.17l2.17,-1.39l0.62,-2.57l2.26,-0.95l0.51,1.06l0.38,1.6l-2.51,3.7l-0.84,3.0l1.26,0.25l2.08,-2.67l0.81,0.32l-3.9,4.57l-0.97,8.83l0.63,2.85l3.31,0.71l1.33,-1.44l-0.09,-3.28l0.45,-0.38l1.4,1.29l1.52,-0.53l-0.8,-1.43l0.01,-6.93l0.84,0.05l-0.0,-1.41l1.12,-0.85l-2.33,-3.53l-0.47,-2.7l-2.13,-3.63l0.91,-0.39l-0.33,-1.21l-1.6,-1.06l0.58,-1.53l-2.3,-4.74l0.77,-0.8l-0.17,-2.6l-1.45,-5.26l-1.96,-3.44l-0.13,-1.34l1.12,-1.31l-0.84,-0.77l0.04,-2.34l-1.58,-2.21l-0.66,-3.65l-1.5,-2.46l0.32,-1.95l-1.36,-4.38l2.17,-0.28l0.64,-1.93l-2.8,0.55l-1.48,1.77l-1.1,-1.27l0.86,-0.78l0.17,-2.08l2.78,-0.81l1.18,-1.18l-1.97,-2.6l-1.06,0.24l-3.76,7.32l0.66,2.32l1.82,1.62l-2.82,-1.76l-3.25,-0.16l-1.68,-1.09l-1.33,0.35l-4.39,11.12ZM338.24,663.05l-0.65,0.97l0.87,0.92l-0.25,1.12l1.03,-0.05l0.55,1.29l2.0,-0.24l0.99,-1.7l0.09,-1.38l-1.05,-1.03l2.46,0.66l-0.57,3.78l1.64,2.97l1.19,-0.99l-0.32,-3.9l0.85,1.53l0.88,-0.01l-0.54,2.9l0.85,1.25l-0.42,1.66l-1.48,1.16l-0.83,1.91l-0.36,6.88l0.69,3.55l1.1,0.47l1.8,2.85l2.36,-0.58l0.56,2.28l1.19,-2.43l1.22,0.34l0.19,1.6l1.37,0.02l0.09,3.43l1.45,3.0l-0.79,0.41l-0.11,1.58l2.87,6.16l1.6,6.25l-0.78,1.22l0.13,1.98l1.68,1.36l3.19,-0.36l2.9,-1.85l0.24,-2.18l-4.5,-7.89l-3.89,-1.78l-0.07,-1.57l1.52,-1.23l1.34,-3.48l-2.0,-0.95l-0.47,-1.63l1.15,-2.77l-0.96,-2.78l-0.73,-0.49l-1.66,0.65l-1.94,-2.22l0.01,2.67l-0.52,0.11l-0.48,-2.45l-1.72,-0.95l-1.95,2.31l0.29,-2.62l-0.56,-1.05l-0.64,0.0l-0.97,2.03l1.25,-3.44l0.01,-1.74l-0.87,-0.31l0.05,-3.27l1.27,-1.06l1.73,-3.79l-0.43,-5.26l0.7,-1.86l-4.25,-3.36l-3.17,-1.0l-0.49,-1.05l-1.59,-0.72l-1.62,1.53l-2.05,-0.16l-0.63,-1.36l-1.79,0.41l-0.53,1.06l1.35,1.66l-0.08,1.04ZM343.01,656.44l1.13,1.51l0.98,-0.26l0.96,2.44l3.89,2.01l3.85,-0.8l0.49,1.98l2.25,-0.5l-0.1,-1.24l0.87,-0.61l-0.66,-1.0l0.38,-2.94l-2.0,0.71l-2.48,-0.31l-0.99,1.43l-0.7,-1.78l0.88,-1.47l-1.1,-2.72l-1.76,-1.5l3.0,-1.3l0.35,-1.72l0.74,1.18l0.79,-0.05l1.06,-2.81l1.32,-0.99l-0.07,-1.43l-0.89,-0.39l-2.15,2.28l-3.16,1.45l-0.24,-0.54l1.53,-1.35l-1.92,-1.62l4.72,-1.87l-0.02,-1.11l-1.87,-0.0l-1.52,-1.59l-1.47,0.99l-0.63,-0.73l-0.85,0.38l0.24,5.25l-1.56,-0.75l-1.07,0.89l0.89,1.62l-0.57,0.99l1.53,3.23l-1.1,-0.29l-0.96,0.88l-1.74,-0.65l-0.54,0.69l0.88,1.1l-2.03,-0.96l-1.8,1.37l3.2,2.86ZM341.7,570.74l0.11,0.46l-0.33,0.4l-0.3,-0.25l0.52,-0.61ZM372.43,651.83l0.78,0.33l0.07,0.14l-0.68,0.12l-0.17,-0.58ZM373.09,681.95l-0.22,-0.07l-0.17,-0.02l0.34,-0.17l0.05,0.27ZM385.47,699.16l0.7,-0.42l0.64,-0.04l-0.44,0.34l-0.9,0.12ZM383.3,699.6l-0.34,1.82l-1.34,0.72l0.88,-0.74l0.79,-1.81ZM377.76,678.72l0.37,-0.5l0.24,-0.1l-0.05,0.16l-0.56,0.45ZM370.13,675.8l0.54,-1.53l0.13,3.36l-0.46,-0.78l-0.22,-1.05ZM357.53,697.63l0.49,0.05l0.11,1.04l-0.27,-0.23l-0.34,-0.86ZM358.33,696.85l-0.03,-0.15l0.14,-0.13l-0.11,0.27ZM357.84,689.63l0.46,0.59l-0.04,2.55l-0.44,-2.49l0.02,-0.65ZM347.78,684.17l-0.0,-0.02l-0.02,-0.1l0.05,0.08l-0.04,0.04ZM347.6,681.67l-0.12,-0.23l0.03,-0.26l0.07,0.22l0.02,0.27ZM349.11,674.67l-0.15,-1.21l0.81,-1.07l-0.36,1.68l-0.3,0.6ZM348.35,656.43l0.0,0.0l-0.0,0.0l-0.0,-0.0Z",
            "name": "Manitoba"
        },
        "sk": {
            "path": "M225.52,715.72l39.97,-178.67l7.25,-1.44l1.31,1.41l12.87,0.18l1.43,-2.31l0.88,1.22l4.11,0.42l3.46,1.73l7.89,0.67l-0.84,-0.96l-5.15,-0.85l-2.45,-1.6l-3.4,-0.16l-2.27,-2.18l-3.22,-0.71l-2.58,-1.68l-4.02,-0.32l-2.77,0.98l1.34,-2.29l-0.87,-0.76l-1.81,0.51l-0.58,-2.19l-0.93,-0.65l-2.97,-0.33l-5.02,3.79l2.54,-11.36l37.12,7.44l37.41,5.82l-4.58,34.49l-1.83,1.67l-0.01,1.71l-2.81,1.32l-1.71,2.49l-1.74,0.06l-0.19,2.8l-2.61,1.35l-1.09,3.92l1.79,-0.4l1.19,1.26l-1.32,2.68l1.76,0.57l-0.31,4.59l-2.32,0.06l-3.29,4.78l1.51,-6.72l-0.95,-0.48l-1.63,5.24l-1.25,0.01l-0.61,0.92l-0.03,1.77l0.55,0.19l-0.9,2.9l0.77,0.84l1.75,-2.64l0.13,1.02l1.37,0.4l1.78,-2.5l4.61,-1.44l0.17,-1.79l1.5,-0.27l0.7,-0.98l-1.43,-0.62l0.7,-0.7l1.47,0.09l1.37,-2.0l-2.8,21.13l-8.91,123.93l-50.48,-7.59l-49.01,-9.75ZM321.15,570.65l0.95,0.2l1.78,-1.81l1.8,0.51l0.38,1.25l-1.49,2.36l1.92,-0.81l1.84,-2.74l-1.39,-0.73l1.05,-3.5l3.03,-0.66l0.82,-1.15l-0.99,-1.18l0.63,-0.7l0.9,0.38l1.19,-1.81l-0.29,-1.14l-1.17,-0.59l-0.12,-1.79l-1.98,0.19l-0.69,-0.9l-0.89,1.02l0.19,0.93l-1.46,0.5l-1.33,-0.79l-1.32,0.9l-1.19,2.67l0.36,1.78l-1.9,1.78l0.32,0.65l2.03,-0.32l-2.97,1.62l0.31,1.04l1.31,-0.05l-2.31,2.02l-0.17,1.08l0.83,-0.21ZM329.12,591.75l0.01,0.02l-0.02,0.0l0.01,-0.03ZM337.04,580.48l0.76,-1.11l0.21,-1.05l-0.31,2.31l-0.66,-0.14ZM334.83,587.78l-0.06,-0.5l0.75,-1.28l-0.11,1.5l-0.59,0.28ZM332.55,578.38l0.2,-0.02l0.16,0.03l-0.1,0.23l-0.25,-0.24ZM324.49,566.41l0.75,-0.68l0.15,-0.05l0.08,0.36l-0.98,0.37Z",
            "name": "Saskatchewan"
        },
        "qc": {
            "path": "M567.54,485.56l2.68,-1.98l1.59,-2.47l6.39,0.69l6.3,2.28l4.25,0.42l-2.04,2.18l0.37,0.65l4.59,-3.75l1.34,0.24l0.63,1.1l0.93,-0.89l2.52,1.84l2.15,0.56l0.33,-0.61l-1.98,-1.25l0.01,-0.69l2.64,-0.51l1.11,-1.65l2.27,-1.23l0.87,-2.05l1.31,-0.53l1.15,1.47l3.31,0.92l3.37,3.27l1.41,-0.03l0.32,-0.84l0.81,0.4l0.61,2.24l-1.14,2.9l0.44,0.56l2.15,-0.39l-0.63,-1.88l3.32,0.52l0.29,2.27l1.48,-0.07l0.73,0.84l-0.4,1.12l-1.78,0.48l0.08,1.33l3.16,-1.31l0.24,-1.94l2.68,0.89l-0.2,0.92l-1.78,0.57l0.84,1.44l-0.94,1.0l1.77,0.4l-0.94,0.39l0.28,0.79l1.22,0.1l-0.28,0.74l1.22,0.54l0.82,1.88l1.12,-0.73l1.12,0.98l0.99,-0.79l0.6,0.52l1.4,-0.43l1.24,0.89l1.95,-0.4l0.47,0.74l1.44,0.04l1.87,-2.0l1.12,-0.12l0.88,1.88l-0.23,1.61l2.73,1.17l0.99,-2.2l0.66,0.54l0.86,-0.68l-0.68,-2.21l0.39,-1.34l2.03,2.74l0.4,1.74l-2.54,2.76l0.92,2.18l-1.2,1.53l1.51,2.42l-0.12,1.26l1.77,1.39l0.42,2.48l-1.52,0.27l-0.12,1.39l-4.28,0.38l-2.16,1.18l-4.19,-0.67l-0.74,0.79l5.04,1.01l7.7,-1.58l-0.08,1.01l1.78,0.38l0.15,3.34l1.33,0.37l-1.61,2.91l1.54,2.47l-0.64,1.56l1.63,0.02l1.62,-1.44l0.55,0.66l0.9,-0.37l0.42,1.2l-1.79,0.29l-0.81,1.56l1.94,4.81l-0.53,1.75l-0.49,0.33l-0.49,-0.84l-0.43,-2.08l-2.54,-1.36l0.07,2.24l1.07,1.13l-0.9,1.22l-2.52,1.17l-0.21,0.87l3.16,-0.09l2.25,2.48l1.48,-3.64l2.54,-3.15l3.47,-0.41l0.89,-0.97l4.23,1.35l0.88,3.2l2.07,2.53l0.03,5.92l-1.06,1.95l-5.56,3.96l-1.58,3.45l3.83,-4.1l4.86,-3.19l0.7,-1.85l-0.2,-7.51l1.76,-0.2l1.11,3.2l-1.48,4.96l0.81,0.14l0.86,-1.54l1.17,-3.78l1.04,1.05l0.48,5.63l1.0,0.4l-0.27,-3.89l0.92,-3.12l3.42,-2.57l0.63,-2.68l1.04,1.17l0.55,-1.56l1.61,-0.49l-0.5,-3.33l0.91,-1.35l-0.08,-2.13l4.9,2.94l0.38,3.6l-0.65,1.08l1.18,0.8l0.82,-5.76l-2.39,-1.59l-0.76,-2.0l2.26,-0.94l-0.23,-0.75l-1.62,-0.02l0.76,-1.47l1.91,0.43l-0.97,-1.83l2.13,0.56l0.2,-0.65l-1.0,-0.55l1.84,-0.07l0.57,-0.69l-2.51,-0.75l-0.86,0.79l-0.95,-1.14l1.63,-2.34l-1.22,-1.3l1.63,1.03l0.65,-0.66l-1.2,-1.2l0.27,-1.02l-0.91,-0.42l1.58,-0.5l2.03,1.08l1.18,-0.2l-2.5,-1.88l-2.27,-0.15l-2.07,-3.34l1.18,-2.17l2.75,0.78l1.03,-0.65l-2.55,-0.99l0.83,-1.94l-0.92,-1.51l0.72,-3.18l2.37,-0.35l0.39,0.53l-1.02,0.44l0.27,0.84l-1.61,0.8l1.18,1.74l1.8,0.19l-0.93,1.95l1.24,5.32l2.0,1.75l2.73,-2.15l-1.08,1.6l0.96,4.42l1.29,1.97l1.91,0.72l-4.47,-0.11l-0.76,1.69l0.28,1.7l5.87,-0.6l0.77,1.65l1.34,0.35l3.31,-3.48l2.62,1.19l-4.93,3.05l0.59,2.54l0.98,0.39l1.01,-0.96l0.71,0.98l-2.51,3.1l0.08,2.13l-1.41,1.31l0.05,2.0l0.64,0.85l1.8,-0.09l3.0,4.39l1.14,-0.81l1.6,1.6l1.76,0.07l-0.75,1.73l1.5,3.17l-0.87,1.11l0.05,1.7l1.5,1.96l-0.57,1.26l0.73,3.23l-0.83,0.91l0.33,1.16l-0.83,1.87l3.76,4.08l-2.68,0.86l1.07,2.62l1.03,0.74l1.87,-0.08l-0.99,1.19l0.5,1.88l1.22,-0.66l1.2,0.69l2.14,-0.12l-0.88,1.63l0.62,1.68l2.96,2.0l1.05,1.64l2.06,0.9l1.25,-0.5l0.24,1.93l1.03,0.77l-3.29,3.75l0.16,2.77l1.69,1.08l-0.72,7.12l-7.14,-0.89l-2.03,1.25l-2.45,0.1l-3.14,1.95l-3.52,0.02l-2.1,1.19l-2.7,-2.92l-2.07,0.38l-2.35,-0.87l-4.27,-3.5l-2.9,-1.23l-0.87,1.07l1.96,1.57l-0.17,2.11l1.48,1.67l-0.4,1.11l1.8,2.02l-0.87,1.11l-6.47,-3.28l-0.16,-1.16l-1.37,-0.14l-0.77,0.94l0.2,1.29l2.53,2.68l-0.03,1.02l1.44,0.79l-0.02,0.93l1.91,0.16l-1.55,0.44l-0.36,1.99l-2.07,-0.88l-1.48,0.78l0.14,2.15l2.19,2.6l-1.79,5.54l2.42,1.66l0.46,1.12l1.76,0.66l0.23,3.29l0.89,0.64l3.05,-0.25l1.66,2.57l1.09,-0.28l0.81,0.77l-0.36,2.35l0.9,2.89l-0.65,2.01l1.25,4.36l3.53,0.01l1.16,-1.3l-0.51,-4.02l1.22,-0.52l0.08,-1.42l2.1,1.75l-0.84,0.91l0.94,1.83l-0.9,0.76l1.11,2.51l-0.4,0.73l1.33,1.83l-0.78,2.0l1.83,2.63l1.35,0.07l-0.43,-2.68l1.31,0.96l0.94,-0.23l0.96,2.03l3.17,0.35l0.08,-1.35l2.55,0.46l0.37,-3.06l3.66,-0.38l3.28,1.73l0.71,1.7l3.05,0.82l-0.99,1.63l2.72,3.16l2.93,-4.57l-1.46,-1.65l-0.38,-4.86l1.35,-1.05l-1.32,-4.92l1.22,-0.11l-0.3,1.18l2.44,0.0l2.61,3.99l-1.28,-0.17l-0.48,0.73l1.68,1.11l35.01,-11.1l35.07,-12.54l3.42,9.02l-1.77,-0.95l-2.75,2.28l-1.08,0.49l-0.72,-0.49l-2.68,4.19l-1.64,1.25l-1.0,-0.75l-0.11,1.13l-1.43,-0.17l-1.72,1.36l-0.6,1.16l1.14,1.19l-3.26,3.83l1.5,3.76l-0.63,-1.43l-0.81,-0.1l-0.43,2.86l-0.77,0.21l-1.21,2.32l-0.67,3.58l-2.17,1.52l-0.5,1.77l0.65,0.77l-1.2,1.54l-2.9,0.03l-0.31,0.93l-2.71,1.52l-0.41,-0.49l-0.86,0.79l-1.54,-0.22l-0.9,1.3l-6.38,3.28l-0.63,-0.58l-1.77,1.59l-1.49,-1.29l-3.94,1.02l-2.28,-0.28l-3.14,1.2l-0.63,-0.4l-2.2,1.18l-1.14,-0.17l-3.8,2.96l-4.91,-0.34l-3.53,1.93l-3.54,-0.01l-4.49,2.21l-4.62,0.41l-4.94,2.55l-2.65,0.05l-1.66,2.26l-2.24,0.48l-0.93,-0.98l-0.82,0.24l-2.35,4.9l-1.87,1.56l-0.22,2.67l-1.15,0.65l0.37,6.89l-0.9,2.3l-7.12,2.55l-2.85,2.86l1.47,0.84l-1.15,0.54l-0.93,-1.34l-1.01,0.1l0.64,1.28l-1.75,1.62l-0.67,2.63l-3.49,3.63l-0.27,3.11l-1.0,0.53l-1.29,5.65l-2.01,3.09l-1.29,0.07l-2.38,-1.59l-1.96,0.46l-3.06,-1.17l-3.75,0.48l-3.78,-0.53l-1.08,0.61l0.34,0.72l2.87,-0.0l-0.93,0.89l0.77,0.75l4.35,-1.54l4.13,1.14l2.46,-0.31l2.54,1.29l-0.84,6.13l-2.02,2.56l-0.47,3.04l-2.8,1.66l-1.43,6.21l-2.49,2.27l-2.57,4.76l-5.07,3.11l-2.2,0.19l-3.66,3.19l-0.16,1.61l-3.51,3.69l-4.41,2.47l-0.11,1.93l-1.55,0.98l-2.15,5.95l-3.75,2.23l-2.78,3.92l-3.31,-0.18l-4.81,-1.52l-7.53,2.73l-6.18,4.37l-2.82,-1.86l-2.34,0.27l-0.91,1.01l-3.85,-1.06l-3.2,-5.29l-1.74,0.28l-0.33,1.68l-2.91,-1.28l-1.98,-2.69l-4.14,-1.81l-13.22,-1.13l-3.35,-2.85l-6.82,-9.11l-0.54,-3.26l-1.96,-2.87l0.5,-2.68l-6.88,-58.58l1.67,2.7l0.76,-0.3l-2.63,-4.13l-1.45,-10.21l1.8,-2.07l0.51,0.3l-0.05,1.75l1.97,-0.07l1.17,0.94l1.17,4.32l2.02,0.89l-0.92,-1.44l0.7,-2.4l-0.66,-0.48l1.87,-2.2l-1.42,-0.35l-0.2,-1.85l-2.72,-2.34l1.92,-1.2l-0.7,-1.8l1.4,-0.7l1.48,-2.63l0.22,-2.55l1.53,-0.35l-1.62,-0.87l0.35,-0.97l-1.08,-3.34l-1.97,-0.38l0.3,-0.73l-1.54,-2.57l0.77,-0.58l-0.19,-2.18l-1.55,0.32l0.7,-1.5l-0.99,-0.9l-0.91,0.22l0.22,-3.89l-2.13,-4.19l0.97,-1.93l-1.87,-3.11l0.14,-1.17l1.02,0.29l0.34,-0.65l-1.75,-0.7l0.54,-0.95l-0.65,-1.0l0.79,-0.61l-1.92,-1.3l0.47,-1.99l-2.94,0.06l0.37,-1.03l-1.53,-0.25l-1.71,-5.56l-1.6,-1.27l12.54,-7.64l5.83,-5.38l5.76,-8.04l0.03,-1.54l3.67,-6.25l0.7,-7.28l-2.09,-12.99l-4.38,-10.16l-4.3,-5.9l-3.31,-2.21l-0.4,-0.99l-5.76,-2.52l-4.54,-4.12l-1.36,0.49l0.77,-1.64l-1.24,-3.71l2.05,-0.16l1.57,-5.91l2.29,-1.62l0.35,-1.83l0.75,-0.42l-0.01,-0.71l-1.88,-0.96l1.18,-1.28l-0.12,-1.72l-0.72,-0.58l1.56,-0.14l1.48,1.82l1.76,-0.42l-1.31,-0.66l-1.04,-2.07l1.87,-1.5l-1.03,-2.89l1.33,-2.14l-0.47,-0.56l-3.35,0.5l1.59,-1.31l-1.31,-0.85l0.39,-0.86l-0.77,-1.16l-2.18,-1.91l2.59,-3.27l-1.49,-0.49l-1.22,0.52l-1.2,-1.06l2.38,-4.21l-0.95,-0.23l-2.27,1.59l-0.86,-1.07l-2.14,0.94l2.89,-4.95l0.63,-2.61l-1.13,-4.32l1.75,-1.37l-1.13,-1.19l1.27,0.24l0.34,-0.62l-1.23,-1.21l-1.15,-0.05l-0.92,-1.42l-1.99,-0.29l-2.53,-8.09l-0.22,-2.36l0.82,-1.84ZM689.57,666.14l2.97,2.78l0.4,4.81l3.85,2.18l2.91,3.03l-0.08,2.64l1.13,1.65l0.1,-6.44l1.08,-1.92l1.66,-0.63l-0.19,-1.37l1.35,-2.13l-1.37,-1.44l-0.69,-3.39l-0.83,-0.4l0.98,-1.49l-0.24,-1.9l-1.02,-0.45l-0.51,3.11l-1.74,-0.59l0.3,-3.81l-2.42,-1.16l0.9,3.16l-0.05,1.06l-0.54,-0.56l-0.61,0.45l0.5,1.31l-1.72,0.69l-0.92,-1.3l-0.87,2.84l-2.4,-5.39l-0.46,1.1l1.2,4.24l-2.2,-2.96l-0.38,1.02l-0.98,0.1l0.87,1.15ZM641.29,697.73l-1.32,5.35l0.92,-0.27l1.5,-3.61l1.02,0.96l0.17,1.97l1.01,0.68l-1.41,0.75l-2.37,3.12l0.88,0.82l1.32,-0.43l0.12,-1.1l2.26,-2.64l-0.25,-2.25l0.82,-0.6l-1.24,-1.43l-0.37,-2.37l4.08,-9.43l0.55,-0.8l0.05,1.71l-1.74,2.01l-0.84,3.7l4.78,-6.08l0.82,-2.37l3.4,-2.58l-0.15,-0.73l-1.75,-0.25l-0.62,0.53l-0.45,0.12l0.95,-2.03l-4.09,0.13l-2.49,2.35l-3.6,5.35l-2.17,1.13l0.23,2.25l0.66,0.46l-0.68,5.6ZM578.58,653.33l-0.12,0.05l-0.03,-0.04l0.15,-0.0ZM653.17,787.27l4.41,1.1l0.65,0.96l-1.84,0.63l-1.91,2.07l-1.51,-1.14l0.21,-3.62ZM655.64,541.71l0.05,-0.09l0.04,0.01l-0.05,0.06l-0.03,0.02ZM627.38,494.93l0.16,-0.06l-0.08,0.05l-0.09,0.01ZM639.8,499.28l-0.07,-0.03l0.04,-0.08l0.03,0.12ZM657.49,533.45l0.42,-0.03l0.38,-0.21l-0.29,0.53l-0.52,-0.29ZM677.32,543.83l-0.22,-0.37l-0.25,-1.11l0.12,-0.83l0.35,2.31ZM692.9,522.01l-0.29,-0.07l-0.05,-0.23l0.17,0.12l0.17,0.19ZM695.33,499.9l-0.07,-0.73l1.02,0.21l-0.34,0.12l-0.61,0.4ZM696.44,499.35l0.14,-0.3l0.34,0.14l-0.21,0.11l-0.26,0.05ZM721.21,553.5l-0.0,-0.22l-0.06,-0.42l0.12,0.17l-0.05,0.47ZM742.68,638.01l-0.94,-0.91l-1.23,-4.78l2.19,-1.57l-0.57,-3.86l2.03,-0.83l1.87,2.26l0.26,3.08l2.85,1.31l-4.71,1.98l-1.74,3.3ZM572.29,551.83l-0.04,-0.14l0.05,-0.08l-0.01,0.22ZM809.54,639.84l0.11,-0.18l0.38,-0.14l-0.2,0.29l-0.28,0.03ZM794.07,718.76l-0.04,-0.31l0.4,-0.4l-0.02,0.55l-0.34,0.16ZM794.08,721.05l0.12,0.06l0.22,0.03l-0.4,0.14l0.05,-0.23ZM752.05,684.58l3.35,-1.98l12.06,-0.48l7.47,1.06l4.76,2.11l3.86,-0.07l3.15,2.43l-0.94,1.38l-4.79,1.57l-10.21,0.1l-5.99,-1.0l-1.45,-1.91l-4.1,-1.89l-7.17,-1.32ZM652.71,796.39l2.37,-2.89l3.83,-1.92l2.72,-3.56l2.68,-0.68l0.07,-5.26l2.17,-3.82l0.22,-2.72l4.72,-3.18l2.23,-3.77l2.48,-1.6l0.65,-2.03l1.89,-1.12l1.43,-2.03l1.92,0.23l4.53,-3.0l1.48,-2.1l4.17,-2.21l2.66,-2.41l8.34,-16.91l0.68,-3.09l5.71,-8.22l7.34,-7.76l14.54,-11.65l4.17,-2.69l7.07,-3.0l8.62,-0.99l3.41,0.69l4.64,2.34l0.25,0.85l-3.4,-0.34l-0.76,0.51l0.9,1.37l1.21,-0.43l0.13,0.76l3.16,1.24l-0.69,1.61l1.11,0.79l-0.89,1.66l-3.97,2.67l-0.08,2.5l-1.99,0.9l-0.01,1.14l-2.76,2.81l-1.46,0.58l-4.54,-0.82l-1.94,-1.54l-1.61,2.77l-4.74,0.93l-0.62,1.24l-3.97,2.56l-0.15,1.39l-1.26,-0.06l-3.13,2.04l-2.65,-0.67l-0.75,-1.02l-5.83,1.45l-0.09,1.3l-2.99,1.14l1.44,6.32l-1.36,2.4l-4.88,3.54l-0.62,-2.08l-2.76,0.16l-6.09,15.23l0.29,5.14l-1.15,1.5l-0.55,2.85l0.72,1.19l-0.26,2.96l0.87,0.77l-1.38,2.38l0.31,1.47l-2.74,3.32l-0.21,1.82l1.32,1.03l-1.96,-0.13l-0.29,2.78l-1.38,-1.09l-1.81,2.22l-2.46,-0.16l-1.2,1.39l0.52,0.71l-0.6,3.08l-37.0,7.26ZM695.11,673.17l-1.2,-1.89l1.28,-3.57l2.36,-1.72l2.65,0.97l1.12,3.06l-1.49,-2.14l-0.88,0.09l-0.35,1.07l1.59,2.2l1.6,0.33l-0.48,1.45l-1.08,-0.11l-0.18,0.98l-1.7,0.54l-1.79,-1.34l-1.43,0.06ZM699.83,676.44l0.05,-0.39l0.27,-0.52l-0.05,0.36l-0.26,0.55ZM688.63,755.76l1.98,-2.71l0.28,-0.13l-0.38,1.07l-1.88,1.77ZM659.46,787.18l2.28,-1.7l1.54,-2.74l-0.52,3.86l-3.3,0.58ZM659.81,785.25l1.03,-1.6l0.72,-0.51l-0.63,1.6l-1.12,0.51ZM659.11,532.42l0.63,-0.24l0.62,1.37l-0.55,1.27l-0.69,-2.4ZM656.94,791.1l0.16,-0.25l0.89,-0.1l-0.46,0.23l-0.58,0.13ZM652.03,682.85l-1.22,1.65l-0.39,-0.18l0.87,-0.97l0.73,-0.5ZM649.56,685.96l-0.16,0.02l-0.35,0.32l0.38,-0.81l0.12,0.47Z",
            "name": "Qu\u00e9bec"
        },
        "pe": {
            "path": "M769.24,739.85l-0.18,-1.73l2.38,-5.55l0.78,1.7l-0.66,2.7l1.46,0.36l2.27,2.05l-0.46,2.1l1.16,-0.5l0.61,0.64l1.57,-0.17l0.11,-2.32l2.73,1.04l1.06,-0.97l1.95,1.15l7.37,-2.66l0.67,-1.07l5.69,-1.66l-1.8,2.01l-1.67,0.27l-0.29,1.75l-1.05,0.36l0.88,0.75l-1.76,0.32l0.28,1.54l1.91,0.57l-1.06,1.49l1.06,0.39l-2.59,1.13l-1.77,-0.58l-0.25,-2.19l-1.63,-0.62l-1.22,0.39l1.06,-1.86l-0.51,-0.53l-1.64,1.82l-1.07,0.01l0.29,0.75l-0.86,1.0l0.82,0.47l-3.05,-0.53l-1.4,0.5l-2.44,-1.08l0.82,-0.41l-0.92,-1.1l-4.45,1.08l0.16,-2.7l-0.78,-1.42l-0.79,0.92l-2.8,0.36Z",
            "name": "Prince Edward Island"
        },
        "bc": {
            "path": "M13.68,416.26l38.29,21.56l40.78,20.26l41.78,18.1l42.4,15.79l-37.34,108.94l0.23,2.34l1.36,1.97l-2.01,-0.53l-0.39,1.88l1.81,4.12l2.62,0.69l0.45,3.38l2.09,1.93l1.26,-1.4l0.77,1.04l0.58,1.33l-0.59,0.93l0.97,0.98l-0.26,2.71l1.46,0.32l0.34,1.0l-0.42,9.09l2.27,0.12l0.91,-1.11l1.91,1.91l-1.43,1.59l0.3,1.88l1.42,1.86l3.03,0.67l-0.09,1.84l1.68,3.03l0.35,4.0l1.36,0.39l1.81,-1.22l0.08,2.89l2.0,4.22l-0.25,2.61l1.91,2.06l0.16,2.41l1.93,1.34l1.19,2.3l-0.77,2.06l2.77,3.21l0.39,3.35l2.44,0.37l1.38,4.09l-0.14,5.53l-0.98,2.53l0.11,2.26l-2.3,3.28l1.69,1.46l-0.74,2.47l1.46,4.06l2.11,1.46l0.58,2.44l-54.57,-16.38l-42.44,-14.97l-1.34,-2.34l-2.28,0.42l1.41,-1.4l-1.8,-0.63l1.1,-0.76l-0.62,-1.25l3.35,0.77l1.94,-2.65l-0.87,-0.46l-1.34,1.81l-0.73,-0.02l-2.26,-1.5l3.4,-5.58l-1.54,0.14l-0.64,1.13l-3.29,0.49l-0.74,1.8l-2.22,-2.35l1.18,-1.54l3.24,-0.79l-0.37,-0.66l-2.84,-0.01l-0.59,-2.27l1.35,-1.97l-0.25,-1.64l2.91,-1.08l-0.39,-1.65l-1.48,-1.88l-0.67,0.31l1.11,2.67l-2.3,0.5l-2.93,3.08l-2.88,-0.88l-1.94,-4.22l3.27,-3.87l-0.4,-1.99l0.66,-0.64l2.68,0.23l1.56,-1.1l-0.53,-0.58l-1.92,0.55l-2.02,-0.55l-2.16,1.19l-0.86,-0.52l0.19,-1.72l-0.86,-0.14l3.08,-1.59l1.61,-2.59l-0.54,-1.17l1.94,-1.18l-0.12,-1.14l-0.81,-0.31l-2.3,1.51l0.22,1.81l-0.79,1.69l-3.79,2.15l0.16,-1.29l-1.14,-0.17l-0.23,-1.39l-1.19,0.93l-1.01,-0.17l1.36,-2.4l1.52,-0.77l-0.21,-0.88l-2.03,0.51l-2.34,3.14l-0.55,-2.01l-2.3,0.15l-1.87,-1.12l0.32,-0.73l5.59,0.31l1.71,-1.03l0.34,-1.63l0.94,0.18l1.32,-1.41l-0.32,-3.45l-0.89,0.49l-0.07,2.73l-1.67,0.34l-0.41,1.52l-1.26,0.7l-1.91,-0.24l-0.41,-0.77l-2.03,-0.08l2.36,-1.07l-1.65,-0.62l0.58,-1.2l-0.82,-0.57l1.48,-0.85l-3.03,-1.52l0.13,-2.45l-1.55,2.18l-1.62,0.38l-1.26,-1.83l-1.03,0.28l-2.78,-1.56l-0.03,1.06l-1.91,-2.09l0.18,-0.81l-0.87,-0.64l1.2,-1.71l-2.02,-0.72l-0.34,-2.17l2.39,-0.07l3.73,1.75l1.27,-0.28l0.88,-1.35l-0.59,-0.45l-2.09,0.8l-1.52,-0.85l-0.02,-0.89l-3.06,-0.81l3.0,-0.69l1.92,-2.23l4.52,1.2l3.66,2.02l1.79,-1.19l-0.38,-2.15l-1.39,2.05l-6.12,-3.54l-0.79,0.4l2.07,-2.17l-0.61,-0.83l-2.47,2.04l-1.94,-0.38l0.85,1.33l-1.62,1.97l-1.06,-1.22l0.06,-2.5l1.21,-2.96l1.4,-0.83l1.32,0.33l1.96,-1.48l1.81,0.23l0.25,-1.47l3.62,-0.97l1.19,0.83l1.4,6.84l0.91,-1.43l-1.14,-3.48l0.26,-1.89l2.56,-0.31l-0.5,-0.96l-2.81,-0.06l-1.19,-1.21l0.44,-2.15l3.22,-0.88l1.43,-1.41l0.28,-2.14l-0.81,-1.58l-0.65,0.29l-0.22,3.03l-3.76,1.37l-0.84,1.41l-3.04,0.79l-2.28,0.14l0.03,-1.16l-1.92,1.47l-0.07,-1.06l1.33,-0.79l0.83,-4.09l-2.89,0.28l-1.92,1.56l4.7,-7.11l1.47,-0.62l-1.26,-0.96l-2.19,1.52l-1.33,-1.02l0.85,-4.21l1.01,-1.4l-0.84,-0.43l-0.19,-1.93l-0.88,0.13l-0.66,-1.45l0.74,-2.41l0.91,-0.63l-0.91,-1.26l1.28,0.17l-0.12,1.24l1.75,3.88l0.96,-1.37l3.2,1.11l-0.64,1.96l0.94,-0.15l0.03,2.25l1.24,0.61l0.19,-2.33l-1.0,-3.59l-2.27,-1.32l-1.99,0.31l-1.33,-3.84l1.65,-2.6l1.19,-0.39l1.97,1.07l0.05,-1.0l-1.41,-1.23l1.57,-2.17l-0.99,-0.09l-3.25,1.95l-0.57,-1.39l-0.8,0.06l-0.29,1.7l-0.47,-0.69l-0.66,1.18l-2.69,1.13l-2.16,3.62l-2.66,-9.4l0.18,-1.8l-0.78,-0.55l1.81,-3.54l1.68,4.79l-0.08,-4.94l2.67,1.58l2.23,-0.66l-0.37,-0.7l-1.5,0.3l-1.83,-1.67l-3.38,-0.01l-0.89,-1.25l1.17,-0.49l0.43,-2.86l-1.71,0.68l-0.64,-0.71l0.52,-0.88l0.82,0.14l0.4,-1.89l0.58,-0.0l0.81,5.21l1.31,0.88l-0.43,-2.01l1.95,-1.82l-1.29,-0.41l-0.83,0.73l-0.5,-4.19l1.16,-0.05l1.29,2.42l1.75,0.73l-1.81,-3.81l2.23,-1.4l0.1,-0.88l0.54,-0.4l0.09,1.05l2.0,-0.48l2.14,0.76l0.42,-0.72l-3.37,-1.69l6.34,-5.04l1.97,0.13l-0.21,-0.94l-2.03,-0.26l0.42,-3.12l-0.63,-0.43l-2.89,5.71l-4.38,3.54l0.19,-1.23l3.65,-2.47l1.85,-8.34l3.08,-2.48l0.24,-3.33l-2.86,-2.26l0.24,-1.84l-1.34,-1.53l-0.43,-1.97l-2.66,-2.59l-2.71,-5.17l-2.36,-1.11l1.2,-3.41l-1.5,-2.18l1.9,-2.25l-2.06,-2.5l1.76,-1.48l-0.9,-23.72l0.09,-1.46l0.99,-0.7l-1.5,-7.31l-2.39,-3.93l0.48,-5.51l-0.8,-0.66l-0.18,-2.6l-1.73,-1.64l0.25,-2.83l1.73,-2.27l-1.63,-6.02l-5.6,-0.15l-2.2,-0.69l-1.03,-0.17l-0.14,0.0l-0.63,0.11l0.16,1.76l-1.03,0.68l-1.72,-0.48l-1.53,2.9l-1.84,1.18l-2.14,-0.96l-7.6,0.93l2.24,-5.74l-3.41,-13.53l0.63,-3.0l-1.2,-1.82ZM73.27,652.68l0.29,0.56l-0.5,0.41l0.15,-0.35l0.07,-0.62ZM65.49,639.77l-0.05,0.24l-0.09,0.16l-0.03,0.01l0.17,-0.41ZM46.9,622.45l0.58,0.56l0.35,0.23l-0.42,0.17l-0.51,-0.97ZM45.51,609.91l-0.17,0.0l-0.36,-0.19l0.3,0.13l0.23,0.05ZM49.86,591.97l-0.53,1.61l-0.68,0.46l0.16,-1.83l1.05,-0.24ZM46.31,592.25l-0.74,0.75l-0.66,0.39l0.64,-1.17l0.75,0.02ZM51.41,599.9l0.12,-0.02l0.32,0.0l-0.13,0.19l-0.3,-0.17ZM55.89,626.23l-2.74,-0.27l-0.32,-0.43l0.61,-0.51l2.44,1.22ZM55.17,631.07l-0.22,-0.02l-0.62,-0.24l0.11,0.01l0.74,0.26ZM72.62,660.16l-1.15,-1.36l-0.28,-2.05l0.99,-1.2l0.44,4.6ZM76.93,661.93l0.48,-0.35l0.04,0.63l-0.15,-0.16l-0.38,-0.13ZM76.29,664.18l0.11,-0.16l0.39,-0.19l-0.22,0.27l-0.28,0.08ZM71.32,674.26l-0.21,-0.6l0.34,-1.42l0.54,1.27l-0.67,0.75ZM70.18,655.53l-0.06,-0.38l0.7,-0.3l-0.51,0.61l-0.13,0.07ZM32.64,621.08l0.68,-0.17l-0.74,-1.07l0.22,-1.3l5.36,0.74l3.39,3.27l-0.02,1.6l0.6,-0.15l4.55,5.7l6.73,4.07l1.93,2.25l4.68,3.02l0.26,7.98l1.84,4.7l-1.4,0.36l0.69,4.35l2.14,2.76l3.72,2.75l-0.42,0.9l2.04,1.19l-0.26,1.6l1.09,0.84l0.1,1.41l-1.08,0.55l1.57,3.71l-1.15,0.93l0.85,1.83l-0.98,2.32l0.85,0.38l1.35,-1.36l-0.07,3.71l-1.43,-1.03l-2.12,1.49l-0.76,-0.26l-6.76,-6.52l0.14,-0.88l-2.79,-1.25l-3.6,-4.45l-0.31,-1.19l5.54,-2.62l1.13,-1.58l-0.22,-2.1l-2.58,3.54l-2.64,-0.93l-1.1,0.36l-0.45,-0.34l0.86,-0.46l-0.95,-1.1l-2.44,1.38l-0.89,-1.16l-1.27,-2.46l2.18,-0.5l0.91,-0.99l-0.46,-0.57l-1.28,0.35l0.96,-2.94l-0.65,-0.54l-1.11,1.17l-1.57,-0.16l1.04,-0.37l1.32,-2.07l-0.7,-0.23l-1.4,1.27l0.29,-2.16l-1.77,0.02l-0.5,-1.02l-0.8,1.05l-0.81,-2.22l-1.16,0.39l-0.16,0.81l-0.28,-0.45l1.23,-2.55l5.26,1.02l0.36,-1.01l-3.85,-1.53l1.24,-1.08l-0.63,-1.0l-1.68,0.97l0.63,-3.12l-0.98,-0.43l-0.6,-2.02l-1.45,-0.4l-0.81,1.52l-1.65,-0.66l-0.32,-1.71l2.46,-1.59l0.4,-1.05l-1.6,0.13l-1.02,-1.33l-1.3,1.56l-0.46,-0.99l0.8,-0.46l-0.19,-1.5l-2.04,0.4l0.25,-1.15l-2.51,0.74l-0.68,-0.62l2.5,-1.18l-0.61,-0.93l0.54,-0.89l-1.5,-1.03l1.07,-1.19l3.27,0.93l0.71,2.43l0.68,-0.27l-0.22,-2.73l2.1,-0.71l-5.12,-3.14l0.17,1.47l1.91,1.19l-5.13,-1.05l-1.14,-3.24ZM42.73,638.87l0.18,0.66l-0.39,0.25l0.21,-0.91ZM48.16,658.18l-0.19,-0.14l-0.04,-0.06l0.11,0.01l0.12,0.19ZM65.5,652.35l2.27,2.11l0.58,2.49l-1.49,-2.95l-1.36,-1.66ZM68.05,643.88l-0.05,0.24l-0.39,0.41l0.11,-0.31l0.33,-0.33ZM67.01,658.01l0.26,0.09l0.46,0.37l-0.41,-0.15l-0.3,-0.32ZM65.56,642.66l0.9,0.14l-0.27,0.67l-0.55,-0.11l-0.08,-0.69ZM66.41,644.41l0.09,0.18l-0.5,0.24l-0.01,-0.2l0.41,-0.22ZM63.88,645.46l-0.21,-0.95l0.93,-0.53l-0.29,1.49l-0.43,-0.01ZM63.51,655.92l-0.0,-0.0l0.0,0.0l-0.0,0.0ZM61.36,639.62l0.04,-0.17l0.14,0.12l-0.07,0.05l-0.11,0.0ZM62.49,639.49l0.42,-0.95l0.59,0.96l0.17,3.08l-0.26,-2.27l-0.92,-0.82ZM61.23,643.16l0.03,-1.75l0.74,-0.6l0.33,1.46l-1.11,0.89ZM60.56,638.05l0.47,-0.38l1.13,-0.03l-0.83,0.65l-0.77,-0.24ZM59.53,637.03l0.18,-0.02l0.48,0.11l-0.61,-0.06l-0.05,-0.04ZM56.7,635.33l0.86,0.09l0.09,0.38l-0.33,-0.07l-0.61,-0.41ZM47.05,600.72l2.52,-3.17l6.61,-1.18l-0.51,1.31l-4.2,0.56l-2.9,2.62l-1.53,-0.13ZM51.25,628.36l2.59,-1.08l1.31,0.42l0.04,0.85l-1.28,0.95l-2.66,-1.14ZM51.19,630.96l1.85,0.01l0.22,0.32l-0.39,0.14l-1.68,-0.47ZM49.16,624.77l0.02,0.01l0.0,0.06l-0.02,-0.07ZM50.08,625.28l0.07,-0.07l0.64,0.3l-0.56,-0.01l-0.15,-0.22ZM48.4,587.0l0.14,-1.17l0.6,0.19l-0.53,0.82l-0.2,0.17ZM45.28,570.42l0.29,-0.57l0.16,-0.22l-0.2,0.65l-0.25,0.13ZM45.8,569.53l1.13,-1.95l2.4,0.2l-0.72,1.13l-2.81,0.62ZM45.97,597.4l0.63,-0.09l0.89,0.46l-0.56,0.43l-0.96,-0.8ZM46.73,596.18l1.01,-0.33l-0.49,-0.88l0.72,0.24l-0.14,1.53l-1.1,-0.57ZM44.4,591.29l1.02,-0.72l1.98,-5.16l-1.2,4.81l-1.8,1.07ZM41.13,582.84l0.04,-2.1l0.67,0.54l0.37,-0.87l3.25,-1.66l-0.98,-2.79l-0.6,0.02l1.1,-2.33l2.74,4.19l-0.64,3.91l-2.91,4.7l-0.83,-0.37l0.76,-1.87l2.26,-2.34l0.28,-1.43l-1.65,0.38l-2.15,3.48l-0.91,0.15l-0.83,-1.63ZM44.49,586.33l0.0,0.03l-0.02,-0.02l0.02,-0.0ZM43.58,576.61l0.66,1.48l-2.46,1.26l-0.04,-1.71l1.83,-1.04ZM42.97,587.05l1.52,0.5l-0.57,2.32l-0.91,-1.61l-0.04,-1.22ZM43.46,542.33l-0.02,-0.54l3.49,-1.73l-2.18,1.92l-1.29,0.35ZM46.87,655.68l-0.0,-0.0l0.0,0.0l-0.0,0.0ZM44.85,572.36l0.01,-0.26l1.86,-1.75l-0.47,2.63l-1.39,-0.62ZM45.33,652.85l0.48,-1.03l0.67,0.05l-0.21,1.74l-0.94,-0.76ZM42.7,600.88l1.89,-2.0l1.62,0.26l-2.46,4.01l0.03,-1.71l-1.08,-0.57ZM43.96,597.71l0.09,-1.03l1.12,-0.67l-0.62,1.32l-0.6,0.37ZM43.69,595.14l0.27,-0.49l0.51,0.28l-0.61,0.53l-0.16,-0.32ZM40.64,642.42l1.43,-0.61l-0.76,-0.86l1.66,-0.07l0.6,0.8l-1.0,3.81l-1.93,-3.08ZM41.58,608.24l0.22,-2.76l1.49,-0.67l-0.54,4.43l-1.17,-0.99ZM41.45,575.4l0.26,-1.41l1.63,-1.34l-0.96,3.17l-0.92,-0.42ZM41.25,591.58l0.36,-2.24l0.32,-0.39l0.56,0.41l-1.24,2.22ZM41.52,542.29l0.92,-0.2l0.04,0.0l-0.38,0.77l-0.57,-0.58ZM37.32,560.75l0.55,-1.25l-0.44,-0.75l0.81,-0.37l1.97,4.36l0.94,4.51l-0.92,0.17l0.21,0.68l1.4,1.38l-1.79,1.53l-0.23,1.15l-1.37,-5.61l1.36,-2.66l-2.01,-1.21l0.25,-1.11l-0.75,-0.82ZM38.12,563.82l-0.21,0.15l-0.18,-0.06l0.16,-0.11l0.23,0.02ZM40.09,551.37l0.12,-0.25l0.34,-0.21l-0.2,0.34l-0.26,0.12ZM38.87,583.4l0.33,-2.35l1.34,4.3l-0.73,1.53l-0.95,-3.48ZM39.97,554.02l0.01,-0.26l0.12,-0.15l0.17,0.38l-0.3,0.03ZM39.41,574.37l0.05,-0.86l0.56,2.86l-0.15,0.8l-0.46,-2.8ZM38.81,636.1l0.02,-0.04l0.01,0.01l0.01,0.02l-0.04,0.02ZM36.0,544.84l1.15,-1.7l0.93,0.78l-0.43,0.41l-1.65,0.51ZM33.38,556.4l0.03,-0.04l0.04,0.11l-0.07,-0.07ZM34.97,554.87l2.69,-0.5l0.49,1.68l-0.08,0.84l-1.9,1.13l-0.24,-0.64l1.94,-0.78l0.12,-0.89l-1.57,-0.45l-0.97,1.11l-0.49,-1.49ZM37.19,573.52l0.12,0.1l0.17,0.59l-0.22,-0.31l-0.08,-0.39ZM32.8,562.24l0.45,-0.7l0.45,0.35l2.97,4.84l0.26,5.13l-1.43,-0.5l-0.37,-3.33l-1.63,-2.24l-0.14,-1.69l0.87,-0.41l-1.44,-1.43ZM35.07,560.95l1.21,-0.39l0.7,1.39l-0.5,1.33l-1.42,-2.32ZM34.98,550.97l0.11,-0.11l0.25,0.66l0.06,0.42l-0.02,0.03l-0.41,-0.99ZM9.63,550.74l0.94,-3.63l-1.0,-0.91l0.61,-0.4l-0.14,-1.49l2.18,-1.79l0.84,-1.77l3.53,2.7l-2.1,1.55l-0.15,0.93l4.15,-1.1l0.82,0.23l0.38,2.12l-0.58,2.09l-1.81,0.84l-4.92,-0.51l-0.08,1.66l1.42,0.52l-0.46,1.19l4.46,-0.42l0.44,-1.5l2.06,-1.36l0.52,-2.22l1.91,0.69l2.51,-0.26l-6.35,6.43l-1.95,4.43l-1.3,1.07l-2.45,-0.68l-2.47,0.46l-1.08,-2.8l1.55,-0.1l0.49,1.19l0.99,-0.9l-0.51,-2.05l-1.03,-0.96l0.24,-0.95l-0.65,-1.04l-0.81,0.17l-0.18,-1.41ZM9.63,555.39l-0.19,-0.06l0.1,-0.07l0.09,0.13ZM9.22,560.26l4.7,1.56l3.09,-0.19l-0.5,0.93l0.84,2.28l-1.54,-1.24l-1.76,-0.62l-0.57,0.44l0.18,1.57l1.54,-0.22l1.49,1.66l-0.45,0.79l-1.67,-0.13l-0.97,-1.76l-1.41,0.96l1.13,0.77l-0.98,2.53l0.88,1.12l-0.53,3.05l1.34,1.42l0.26,0.91l-0.47,0.44l-2.35,-4.76l-0.66,-3.28l1.18,1.12l0.51,-1.36l-0.8,-2.18l-1.38,1.18l-0.48,-3.08l1.59,1.01l1.16,-1.6l-3.41,-2.39l0.01,-0.97ZM13.68,576.98l0.77,3.02l-0.35,0.26l-0.72,-0.39l-0.43,-2.31l0.73,-0.59ZM15.02,580.68l0.03,0.01l-0.01,0.03l-0.01,-0.04ZM15.12,581.11l0.09,0.21l-0.08,0.07l0.01,-0.07l-0.02,-0.2ZM16.04,581.92l0.28,0.15l0.16,-0.01l-0.23,0.19l-0.21,-0.33ZM15.54,580.45l0.02,-0.36l0.45,-0.11l0.17,0.59l-0.65,-0.13ZM13.0,576.92l-0.13,-0.08l0.01,-0.05l0.07,0.08l0.04,0.06ZM14.54,571.61l0.03,0.04l0.11,0.01l-0.16,0.04l0.02,-0.08ZM15.25,571.87l0.28,0.01l0.58,-0.26l-0.53,0.92l-0.33,-0.67ZM15.16,583.7l0.03,-0.12l0.17,-0.25l0.1,0.28l-0.3,0.09Z",
            "name": "British Columbia"
        },
        "yt": {
            "path": "M99.9,241.74l2.97,2.91l3.27,1.52l3.63,4.87l0.6,7.06l1.7,0.59l0.4,3.07l3.81,6.94l1.36,0.8l1.09,2.36l1.9,0.57l-11.85,21.13l-0.58,1.5l0.84,1.37l-0.55,2.17l-1.23,1.62l-0.36,2.35l-2.22,1.68l-1.26,3.47l14.63,8.28l-0.45,0.78l0.89,3.72l-1.18,1.06l0.09,3.77l-3.88,3.76l1.31,1.97l-0.91,1.75l-1.85,1.06l0.32,1.03l-0.74,1.47l1.78,1.57l2.31,-0.42l1.52,0.54l-1.27,1.1l0.35,1.2l1.31,0.21l2.22,-1.21l0.27,1.26l1.01,0.21l-2.9,1.53l0.78,2.27l-0.08,3.66l-5.53,3.93l-2.43,0.63l-0.27,1.37l1.59,0.51l-0.7,1.31l1.05,1.7l-1.75,0.48l-0.7,1.7l-1.68,0.84l0.08,1.28l1.82,1.02l1.34,2.27l-0.01,2.15l1.22,2.06l-1.67,1.12l-0.4,1.41l1.66,1.01l2.55,-0.73l1.23,1.28l-0.11,4.86l-0.84,0.83l-0.15,1.89l2.25,5.83l1.55,1.63l-1.75,0.01l-0.68,0.79l2.13,2.94l-0.05,2.63l-1.48,1.48l-2.07,0.18l-0.81,0.97l1.31,2.45l-0.28,2.33l1.55,1.11l-2.93,2.76l0.39,4.52l-1.1,1.81l1.21,0.35l1.19,2.39l-1.55,0.62l-0.97,4.11l-1.11,0.79l1.1,1.56l1.98,0.93l0.51,1.51l2.31,-0.36l0.59,5.79l1.09,0.63l-0.38,3.07l0.84,2.24l1.52,2.86l2.17,0.81l0.74,1.3l-0.91,5.2l-1.71,1.78l0.21,1.0l1.02,0.01l-1.32,3.55l0.04,2.37l0.9,-0.15l0.76,1.06l1.68,-0.65l1.88,1.47l1.27,-1.19l1.39,1.75l1.48,-1.19l3.85,3.92l2.18,-0.54l2.61,0.9l1.33,-1.65l1.56,0.69l-0.24,3.02l-2.02,1.63l0.34,4.36l1.61,0.99l-0.73,2.35l0.28,4.82l-0.91,1.18l-52.11,-22.5l-28.56,-14.1l-24.05,-12.91l-23.42,-13.53l-0.11,-1.79l3.21,-3.12l0.08,-1.24l-5.14,-2.7l-3.89,0.93l-2.41,-4.18l-1.66,0.64l-2.54,-3.47l99.42,-158.23ZM110.53,248.98l1.12,-0.26l0.66,1.18l-1.67,0.15l-0.12,-1.07Z",
            "name": "Yukon"
        },
        "nb": {
            "path": "M711.42,743.4l4.88,-3.44l1.67,-2.57l-1.15,-6.84l2.7,-0.66l0.09,-1.3l5.1,-1.27l0.53,0.94l3.2,0.99l0.62,-1.14l2.68,-1.28l1.53,0.15l0.32,-1.87l1.78,-0.33l3.5,-2.52l0.93,0.83l6.82,0.46l2.82,4.06l4.5,-4.8l1.26,-0.71l0.41,1.01l2.56,-1.38l-0.51,0.9l1.22,0.58l-0.67,2.74l0.48,4.67l-3.72,5.12l2.64,0.43l3.85,-1.89l0.54,1.22l-0.64,2.18l1.73,2.28l-0.1,1.13l1.88,-0.05l0.76,2.83l1.48,0.9l-0.59,1.93l1.96,-0.46l0.23,1.66l4.02,-0.96l1.4,0.81l2.16,-0.91l2.12,0.21l-2.95,1.52l0.3,1.48l-0.94,0.55l-0.72,2.11l-1.22,-0.13l-0.53,2.15l-1.32,-1.94l-3.9,-2.32l3.2,3.71l-1.03,4.22l-1.71,0.5l-8.21,9.21l-1.85,1.2l-2.25,-0.95l0.9,-1.59l-0.53,-1.41l-2.29,3.0l1.52,1.27l-0.32,0.86l-1.78,0.25l-0.87,2.28l-1.24,-0.74l-1.86,1.85l-1.9,0.31l0.01,-0.72l-1.71,-0.72l-1.2,1.53l-1.8,-1.85l-1.44,2.06l-1.91,-1.39l-1.05,-5.84l-4.88,-0.68l-0.29,-3.7l-5.75,-20.08l-6.62,-3.72l-7.05,4.81l-1.78,-0.76ZM746.71,774.61l-0.04,0.04l-0.08,0.14l-0.05,-0.07l0.17,-0.11ZM759.72,722.42l-0.02,-0.05l-0.0,-0.01l0.06,0.02l-0.04,0.04ZM768.58,746.15l0.01,-0.09l0.03,0.05l-0.05,0.04ZM759.92,720.39l0.52,-0.56l0.81,0.01l-0.55,1.43l-0.78,-0.88ZM760.91,718.13l0.09,-0.3l0.01,-0.4l0.08,0.22l-0.18,0.48ZM748.69,781.87l0.11,-1.21l0.29,-0.8l0.38,1.59l-0.77,0.42Z",
            "name": "New Brunswick"
        },
        "nl": {
            "path": "M818.49,689.15l0.02,-0.65l1.55,-2.42l1.38,1.36l-2.94,1.71ZM822.12,687.09l0.09,-0.28l0.2,0.08l-0.18,0.14l-0.11,0.06ZM824.04,685.87l-0.05,-9.48l0.64,0.38l1.82,-0.8l1.87,1.03l2.29,-0.74l-0.5,-0.76l-2.26,0.05l-0.8,-1.03l2.21,-0.76l0.36,-1.83l-1.2,0.28l-0.06,-1.05l-3.24,1.03l-0.72,-2.28l1.19,-3.08l1.98,1.73l-0.15,-1.35l2.27,-0.23l-3.27,-1.53l-0.87,-1.68l0.65,-17.4l2.04,-1.08l-2.31,-0.88l1.93,-2.2l0.89,-2.81l-0.87,-1.18l0.9,-3.28l-0.48,-3.01l6.52,-8.45l0.7,1.99l2.84,-0.55l0.35,-1.06l-1.21,-0.63l1.45,-1.04l0.84,0.68l-0.78,0.93l0.95,0.36l0.12,1.05l-0.92,1.43l-4.26,0.62l-0.95,0.99l0.23,0.79l1.02,0.19l0.13,1.52l1.83,0.78l1.53,-1.81l0.9,1.86l-0.65,0.47l0.31,2.92l-0.78,3.08l-0.82,-2.1l-0.61,-0.28l-0.62,0.97l1.97,3.56l-1.37,3.22l0.66,0.38l-0.55,1.91l-0.98,0.27l0.99,1.57l-0.14,2.05l-1.11,1.58l-0.03,3.77l0.85,1.9l-0.97,1.75l1.61,0.47l0.47,3.3l0.68,-0.49l1.16,-6.05l0.4,-0.71l1.07,0.13l-0.16,-3.28l0.95,-2.77l0.79,0.59l-0.18,3.42l0.93,-0.5l0.35,-1.41l1.06,0.05l-0.0,-1.09l2.77,0.99l2.22,-2.07l-1.66,3.19l-2.66,2.53l-0.74,3.71l0.9,0.17l0.71,-2.13l1.15,-0.64l-0.26,1.38l0.59,0.25l-1.6,3.0l0.53,0.67l2.71,-2.86l2.45,1.63l0.59,-1.21l0.32,0.99l0.71,-0.1l0.19,-1.95l0.79,0.49l-0.13,1.27l2.17,0.02l0.11,-0.88l0.52,1.06l-0.93,2.32l1.03,0.85l-0.22,1.48l2.24,-2.29l-0.65,-0.61l-0.51,0.55l-0.18,-1.15l1.53,-2.5l0.41,1.47l0.7,-1.52l1.67,-0.42l1.17,-5.2l2.42,3.97l0.26,-3.2l1.64,0.58l1.0,-2.39l1.68,-0.45l5.77,0.89l-0.64,2.87l0.81,0.8l-2.57,1.5l-0.11,1.54l0.91,0.29l-1.15,0.8l0.16,1.13l-1.86,1.47l0.58,1.24l1.42,-1.37l0.14,0.84l1.0,0.06l1.38,1.5l-0.02,1.59l1.84,-0.67l-2.93,2.73l-0.16,1.46l0.67,0.47l2.12,-2.82l0.83,1.31l0.65,-1.99l2.06,-0.03l0.87,-2.6l-0.28,-1.66l2.47,0.79l0.94,-3.37l0.86,0.76l0.31,2.82l-0.8,1.71l-2.03,0.34l0.22,1.79l-1.79,3.06l-3.22,0.02l-0.41,1.32l1.35,1.88l2.18,-0.61l-1.93,0.8l0.21,0.92l1.9,-0.22l1.18,-1.04l-0.06,1.61l-1.04,0.83l0.85,0.23l0.02,1.22l-1.26,-0.75l-0.84,0.55l2.04,2.42l3.09,1.38l0.28,0.85l1.71,-1.1l-0.83,-3.75l0.52,-5.24l1.91,-1.36l0.72,-2.61l0.43,0.3l-1.04,7.55l0.77,1.14l-0.42,1.63l0.51,0.96l0.88,-0.04l0.66,1.71l1.03,0.06l1.96,-4.0l-0.45,-3.72l1.84,1.57l0.18,1.36l1.14,0.61l-0.5,3.74l0.6,3.82l-0.59,0.45l1.18,0.95l0.77,4.09l-0.98,3.43l-1.51,-1.06l-1.64,0.27l-1.5,2.87l-1.09,-2.43l0.65,-2.17l-1.23,-1.29l-1.09,-0.0l0.54,-2.43l-1.62,-1.32l-2.29,7.81l-0.69,1.14l-1.16,0.24l-0.62,-6.94l0.67,-0.26l-0.92,-0.96l1.1,-3.35l-1.4,0.01l-0.71,-2.4l-3.07,-3.37l-1.38,-0.56l-0.33,0.87l-1.83,-0.48l-0.28,0.71l0.99,0.27l0.23,1.41l-0.7,1.6l0.37,1.7l-0.69,0.17l-0.99,4.53l-0.72,0.7l-0.95,-0.72l-0.75,0.59l-1.68,5.5l1.08,1.66l-1.06,0.18l0.45,2.57l-1.17,0.7l-0.02,0.81l-1.87,-0.71l-1.27,2.06l-1.9,0.6l-1.62,-0.42l0.46,-2.28l3.89,-2.8l1.31,-3.14l-0.02,-3.56l2.27,-1.82l1.78,-4.22l-1.59,0.08l-2.16,2.36l-0.07,-3.54l-0.96,3.25l-2.76,0.48l-0.96,-0.77l-0.73,0.71l0.13,1.83l1.21,0.81l0.24,1.37l-1.1,0.92l-0.26,-0.99l-1.08,-0.43l-0.8,1.48l-0.85,-1.66l1.28,-1.85l-0.83,-0.14l-1.53,1.71l-0.77,-0.1l0.26,-4.71l-1.06,-0.99l-0.16,3.43l-1.49,2.1l-0.11,-1.33l-0.54,0.35l-1.26,-0.92l0.77,2.76l-0.54,1.27l-1.32,-1.89l0.31,2.6l-4.86,1.56l0.52,1.58l-2.48,-0.05l-1.5,0.92l-0.74,-0.93l-1.47,1.43l-0.63,-0.85l-2.38,0.77l-0.77,1.11l-1.38,-0.43l-0.81,0.72l-1.26,-0.76l-3.66,2.09l-0.87,0.03l0.41,-1.32l-0.5,-0.16l-1.15,0.85l-0.09,1.71l-1.35,0.05l-1.6,1.8l-5.51,2.43l-3.59,-4.46l3.45,-5.51l1.99,-5.3l3.51,-4.35l-0.91,-0.21l-2.2,1.3l-1.98,-0.14ZM875.12,662.32l0.01,-0.05l0.03,0.05l-0.04,0.0ZM877.63,662.89l0.01,0.0l-0.0,0.01l-0.0,-0.01ZM877.65,663.11l0.18,0.25l-0.68,1.05l-0.32,0.16l0.81,-1.47ZM877.92,687.63l0.03,0.05l-0.01,0.02l-0.03,0.0l0.01,-0.07ZM861.05,691.78l-0.07,0.12l-0.12,0.06l0.18,-0.19ZM860.08,692.69l-0.48,0.59l-0.29,-0.1l0.05,-0.05l0.72,-0.44ZM879.4,666.53l0.09,-0.58l0.24,-0.6l0.19,0.13l-0.51,1.05ZM875.09,662.18l-0.1,-0.13l0.04,0.02l0.06,0.11ZM856.71,657.24l-0.75,-1.19l0.65,-0.66l0.34,0.61l-0.23,1.24ZM855.59,655.75l-0.04,-0.03l0.02,-0.02l0.02,0.05ZM854.12,657.33l0.0,-0.25l0.09,-0.07l-0.09,0.32ZM880.23,672.13l2.14,-0.42l1.19,-1.04l0.07,0.96l-3.4,0.5ZM880.31,686.28l0.4,-1.02l-0.02,0.87l-0.39,0.14ZM880.62,683.42l-0.08,-0.03l0.05,-0.13l0.03,0.16ZM865.38,648.2l1.06,0.13l0.06,-1.23l0.98,0.8l-1.68,2.0l-0.43,-1.69ZM859.69,653.01l0.19,-0.17l0.32,0.44l-0.25,-0.18l-0.25,-0.09ZM860.58,653.35l0.24,-0.05l0.02,0.23l-0.08,0.03l-0.18,-0.21ZM861.92,651.98l-0.05,-0.37l0.49,-0.4l0.03,0.24l-0.48,0.53ZM862.01,654.58l0.02,0.04l-0.01,0.11l-0.04,-0.08l0.03,-0.06ZM859.27,690.37l0.8,-0.58l0.4,0.51l-0.91,0.12l-0.29,-0.05ZM850.53,655.89l0.16,0.11l-0.16,0.24l-0.04,-0.3l0.04,-0.05ZM850.64,657.23l0.03,-0.01l-0.01,0.06l-0.01,-0.05ZM843.72,636.73l0.01,-0.34l0.77,-0.76l-0.18,0.87l-0.6,0.23ZM838.14,616.17l0.06,-0.8l0.21,-0.21l-0.04,0.83l-0.22,0.19ZM695.98,500.41l0.18,0.94l1.28,-1.03l0.89,0.17l-0.49,0.97l0.49,0.51l1.04,-0.8l-0.45,1.69l-1.25,-1.45l-1.19,0.27l-0.74,-0.45l0.23,-0.83ZM697.79,503.53l-0.02,0.02l-0.01,-0.01l0.03,-0.01ZM697.64,505.65l1.21,-1.47l1.28,-0.58l-1.17,1.01l1.54,0.5l-0.46,1.78l1.72,-1.6l0.96,0.23l-0.44,0.91l0.94,0.13l0.19,0.94l-0.54,1.1l1.68,1.31l1.18,-0.26l0.02,3.21l0.84,-2.29l0.23,1.88l0.69,0.1l0.53,-1.32l1.06,0.32l-0.12,1.5l-2.03,0.86l-0.08,1.13l3.15,-0.37l-0.39,1.97l0.59,0.39l1.72,-2.67l-0.32,2.47l1.1,0.04l0.63,-0.88l0.72,0.85l-2.24,2.64l-2.49,0.28l-0.46,1.71l1.19,-0.29l1.34,1.07l-0.23,-1.4l2.96,-0.87l1.44,-1.67l0.57,0.35l-0.78,0.64l1.02,0.38l0.03,1.4l1.0,-0.21l-0.78,1.74l2.04,0.19l0.51,-1.11l1.44,0.52l-0.71,1.87l2.06,0.47l-2.1,3.43l-2.7,0.75l-0.46,1.24l1.75,-0.45l-1.47,3.18l0.46,0.75l2.4,-3.97l1.0,-0.4l-0.29,1.33l0.62,0.69l0.61,-1.65l3.89,-2.46l-0.44,1.25l0.84,1.88l-2.01,1.41l0.22,1.67l-1.45,0.73l0.32,0.82l-1.25,1.46l0.46,0.55l-1.25,1.18l0.44,0.58l2.18,-1.12l1.11,-2.84l3.0,-1.1l1.22,1.28l0.4,-0.76l0.95,0.44l-1.65,0.65l-0.96,2.27l1.99,-1.2l1.31,1.64l1.0,-1.67l0.97,-0.03l0.02,-0.85l0.69,2.75l1.36,0.21l1.74,1.86l-1.38,1.23l-0.03,0.93l-1.56,0.45l-0.27,1.54l-2.01,-0.32l-0.06,0.88l2.15,0.88l2.0,-1.35l2.59,0.11l0.7,1.91l-0.99,0.53l0.14,0.95l2.83,0.91l3.06,-0.99l1.01,0.4l0.47,1.67l-1.35,0.99l-0.33,2.98l-2.27,1.06l0.26,2.44l-4.73,-0.44l3.45,-1.47l-0.57,-0.9l-4.31,1.04l-0.71,1.4l0.36,0.64l5.06,0.99l-0.89,0.22l0.17,0.9l5.89,-0.44l-3.97,1.63l0.0,1.56l3.06,-0.22l0.93,0.79l-2.47,0.9l-0.17,1.07l2.07,0.91l5.38,-1.88l0.35,1.69l-0.68,2.36l1.47,0.69l2.6,-1.03l0.58,0.38l-0.91,1.14l1.33,0.47l3.43,-1.17l-0.22,1.19l-1.47,0.65l0.77,0.93l1.92,-0.77l0.6,-1.24l0.98,4.06l0.76,-1.77l-0.15,-3.1l1.12,0.13l-0.84,3.45l1.26,-0.6l0.01,1.78l0.89,0.11l-0.27,2.61l1.02,-0.07l-1.18,3.59l0.63,0.48l0.6,-0.86l-1.21,2.98l0.49,1.28l3.47,-6.14l0.23,0.96l0.8,-0.89l-1.12,3.19l0.8,0.87l2.91,-6.78l0.73,1.37l-1.85,1.52l0.31,1.13l2.05,-0.32l2.32,-1.98l0.58,0.28l-2.41,5.52l0.29,3.02l1.46,-1.28l-0.4,-1.77l2.11,-3.94l1.35,0.79l2.26,-3.74l0.21,2.07l1.58,0.35l-0.61,1.5l1.66,0.68l5.65,0.03l0.38,-1.14l1.25,-0.48l0.78,0.67l1.95,-0.14l1.19,-0.94l2.32,1.16l2.02,-1.08l0.99,0.79l0.48,1.14l-2.84,1.38l0.43,0.75l1.46,-0.47l-0.65,1.12l-5.22,2.32l-0.63,1.34l0.44,0.77l-3.95,3.54l-8.17,4.8l0.02,0.77l1.19,0.5l4.37,-2.64l1.08,0.42l-4.24,4.4l-3.76,0.96l-0.33,1.08l-1.99,0.98l-0.44,0.59l1.0,0.76l0.75,2.72l-9.59,-2.25l0.24,2.79l3.26,-0.69l6.62,1.59l-2.62,2.85l0.38,0.99l1.55,-0.45l-1.56,1.55l3.83,-1.13l-0.17,-1.13l2.33,-3.51l-0.19,-0.73l2.55,-1.52l1.37,-2.76l2.28,-1.08l0.45,-1.73l-0.83,-0.68l1.23,-2.95l6.14,-5.14l3.25,-0.59l0.5,-0.7l-0.75,-0.57l-2.52,0.21l-1.58,0.38l-0.93,1.24l-0.95,-0.28l1.37,-1.89l8.21,-1.63l3.58,4.01l1.26,0.49l0.19,1.3l-3.07,4.15l2.41,-0.36l0.55,2.8l1.35,-0.49l1.29,-6.18l2.41,-1.22l0.54,0.16l-0.83,0.48l0.48,0.53l4.11,-0.47l3.9,1.29l0.98,1.79l1.33,-0.9l0.39,1.44l0.81,-0.21l0.24,1.44l1.23,0.68l-1.72,1.23l0.93,0.4l-0.08,0.69l-2.54,1.2l1.26,1.15l1.97,-1.07l1.65,1.48l-3.37,2.2l3.17,1.61l-1.49,0.4l-0.08,0.83l1.44,-0.22l-1.61,1.71l-3.51,0.6l1.1,0.54l6.54,-1.37l2.3,0.38l0.34,0.7l-1.48,0.14l-0.04,0.72l-3.99,-0.27l-0.53,0.74l5.51,1.03l1.88,2.39l-0.87,0.56l0.29,1.1l-1.42,0.52l0.83,1.52l-2.14,3.49l-3.89,4.33l-0.58,3.39l-1.14,0.3l0.15,1.24l-0.9,0.28l-4.06,-9.59l-35.42,12.67l-33.81,10.74l-2.68,-5.23l-2.2,0.09l-0.59,-1.58l-1.29,0.17l1.45,-2.72l4.48,-1.81l0.57,-0.88l-2.9,-1.63l-0.29,-2.93l-1.86,-2.41l-1.73,-0.29l-1.8,1.2l0.41,3.96l-1.42,0.33l-0.67,1.47l1.29,5.09l2.22,2.68l0.71,3.75l-1.29,0.7l0.01,3.15l0.4,2.47l1.35,1.35l-2.11,3.15l-1.95,-2.06l1.05,-1.0l-0.33,-1.03l-3.13,-0.86l-0.59,-1.61l-3.59,-1.9l-4.28,0.45l-0.57,3.04l-2.11,-0.54l-0.52,1.3l-0.89,0.16l-1.53,-0.59l-0.78,-1.85l-1.06,0.18l-1.91,-1.18l-0.45,2.74l-1.16,-2.28l0.83,-1.83l-2.01,-4.67l0.87,-0.55l-0.93,-1.92l0.88,-1.26l-2.81,-2.38l-0.91,0.2l-0.09,1.73l-1.26,0.55l0.76,3.73l-0.98,0.86l-1.09,-0.9l-0.21,1.03l-1.4,0.2l-0.91,-4.06l0.68,-1.6l-0.9,-2.96l0.26,-2.71l-1.26,-1.15l-0.86,0.17l-1.81,-2.41l-3.62,-0.16l-0.29,-3.34l-1.83,-0.72l-2.75,-2.7l2.24,-3.96l-2.6,-4.05l-0.09,-1.49l3.25,0.49l0.49,-2.11l1.82,-0.97l-3.52,-2.36l0.1,-1.01l-1.14,-0.61l-1.56,-2.75l0.86,-0.27l0.18,1.13l3.3,1.27l1.43,1.53l3.08,0.4l0.79,-1.96l-1.85,-2.05l0.48,-0.97l-1.58,-1.83l-0.08,-2.45l0.69,-0.18l4.58,3.66l2.6,0.96l1.8,-0.47l0.76,1.43l2.31,1.56l2.28,-1.23l3.59,-0.04l3.18,-1.96l2.33,-0.06l1.95,-1.24l4.14,1.0l3.13,-0.13l0.99,-1.46l0.28,-6.6l-1.76,-1.27l-0.09,-2.24l2.63,-2.42l0.69,-1.59l-1.15,-1.09l-0.49,-2.23l-1.64,0.4l-1.75,-0.81l-0.86,-1.5l-2.93,-1.97l-0.34,-1.36l1.88,-1.76l-0.06,-0.97l-3.85,0.65l-0.96,-1.24l-1.12,1.1l0.72,-2.63l-2.83,-0.66l-0.52,-1.79l2.29,-1.28l-3.87,-4.11l0.81,-1.49l-0.33,-1.27l1.11,-1.04l-0.99,-3.15l0.35,-3.55l-1.39,-1.2l0.94,-1.54l-1.51,-3.16l0.92,-1.94l-0.25,-1.73l-0.87,-0.13l-0.39,1.06l-1.7,-0.19l-0.95,-1.15l-1.25,0.53l-2.5,-3.96l-2.15,-0.07l-0.15,-1.73l1.45,-1.45l-0.1,-2.05l2.55,-3.36l-1.33,-1.84l-1.65,0.83l-0.35,-1.74l4.52,-2.28l0.35,-1.35l-1.4,-1.26l-1.94,-0.37l-3.33,3.5l-2.0,-2.0l-2.56,0.63l-1.66,-0.61l-0.97,0.85l0.19,-2.23l3.27,0.69l1.51,-1.43l-1.03,-1.09l-1.22,-0.08l-0.99,-1.57l-0.88,-4.18l1.03,-1.31l-0.19,-0.83l-1.49,-0.14l-1.77,2.04l-1.26,-1.1l-1.18,-5.04l0.86,-2.18l-1.56,-0.93ZM749.39,644.84l-0.21,0.06l-0.38,-0.16l0.32,0.07l0.27,0.03ZM827.51,605.61l1.17,-0.58l0.2,0.18l-0.76,0.65l-0.62,-0.26ZM813.84,589.92l0.16,-0.56l0.67,-0.26l0.12,0.19l-0.94,0.63ZM742.74,556.87l0.27,-0.15l1.16,0.42l-1.11,0.28l-0.32,-0.55ZM743.03,556.07l0.11,-0.16l0.77,-0.05l-0.64,0.05l-0.24,0.16ZM724.98,532.85l0.14,-0.75l1.74,-0.61l-0.23,0.87l-1.66,0.49ZM716.17,518.63l0.26,-0.13l0.06,0.04l-0.32,0.09ZM701.93,503.54l-0.06,0.03l-0.14,-0.01l0.19,-0.05l0.02,0.03ZM746.29,561.73l1.29,-0.12l1.03,-0.44l-0.04,0.65l-2.29,-0.08ZM765.01,574.66l-0.09,-0.09l0.07,-0.12l0.12,0.1l-0.09,0.11ZM766.08,573.43l-0.2,-0.4l-0.0,-0.06l0.04,0.0l0.17,0.46ZM777.41,577.24l0.21,-2.19l0.71,0.01l-0.44,0.65l-0.49,1.53ZM787.98,592.89l2.02,-1.46l1.55,-1.88l-1.08,2.63l-2.49,0.7ZM779.43,607.25l0.03,-0.02l0.01,0.02l-0.04,0.0ZM820.59,590.96l0.0,0.0l-0.0,0.0l-0.0,-0.01ZM701.83,596.32l-0.57,-0.35l-0.42,-0.33l0.73,0.21l0.27,0.47ZM790.47,576.88l1.36,-1.34l0.67,1.44l-1.32,0.73l-0.72,-0.82ZM757.36,567.04l0.54,-0.08l0.35,0.26l-0.22,0.16l-0.67,-0.34ZM753.28,565.8l0.47,-1.29l1.15,0.24l-0.22,1.07l-1.41,-0.01ZM748.69,558.87l-0.2,-0.17l0.27,-0.02l-0.08,0.19ZM747.92,558.58l-0.96,0.19l-0.02,-0.12l0.73,-0.16l0.26,0.09ZM750.02,555.78l0.08,-0.3l0.2,-0.06l0.02,0.17l-0.3,0.18ZM744.65,553.12l0.64,-1.81l0.75,0.24l0.31,1.02l-0.83,0.06l-0.53,1.29l-0.35,-0.8ZM745.49,555.18l1.39,-0.96l0.4,1.98l-1.15,-0.57l-0.64,-0.45ZM739.53,542.37l0.1,-0.7l0.05,-0.02l0.14,0.64l-0.29,0.08ZM737.08,536.88l0.54,-0.31l0.66,1.05l-0.18,0.15l-1.02,-0.9ZM736.98,542.04l0.94,-0.75l0.6,0.38l-0.67,1.26l-0.88,-0.88ZM734.56,536.7l0.49,-1.0l0.84,0.73l-0.23,0.65l-1.11,-0.37ZM704.5,508.32l0.25,-0.58l0.82,0.14l-0.81,0.77l-0.26,-0.33ZM704.47,507.42l-0.04,-0.66l0.08,0.11l-0.04,0.55Z",
            "name": "Newfoundland and Labrador"
        },
        "on": {
            "path": "M399.41,727.97l3.25,-56.87l17.49,-16.02l50.18,-56.7l5.89,5.74l3.34,1.59l4.16,6.66l0.07,1.64l0.93,-0.9l1.53,0.7l0.47,1.09l3.72,0.22l7.51,3.34l3.52,0.63l3.74,2.18l0.82,1.61l2.04,1.5l1.96,0.55l-2.57,4.18l-0.2,2.26l0.59,0.29l3.0,-5.44l5.1,0.47l3.97,-1.2l1.6,0.26l1.47,-0.99l2.08,1.72l1.21,-0.17l0.56,1.64l0.68,-0.28l-0.38,-1.87l3.93,0.68l1.97,-0.84l0.22,2.18l3.44,-1.25l3.66,1.53l1.13,3.89l-1.85,8.94l0.54,3.1l0.67,1.51l1.45,0.82l1.61,4.42l-0.68,3.75l1.63,5.71l-1.29,1.28l-0.03,5.11l2.94,1.95l1.54,2.72l4.34,3.83l0.32,1.88l-2.77,1.36l-0.69,1.37l0.67,0.57l1.21,-0.98l2.42,-0.18l1.79,2.17l4.34,1.42l0.88,1.66l3.87,3.05l2.5,5.84l-2.02,1.29l-3.65,4.63l-0.29,0.63l0.81,0.81l6.1,-6.51l4.45,1.01l5.72,4.84l7.01,59.69l-0.5,2.75l2.01,3.02l0.61,3.39l7.32,9.7l3.52,2.67l9.71,0.57l5.65,1.33l2.13,1.35l1.34,2.16l2.97,1.37l1.25,-0.14l0.13,-1.76l0.79,-0.05l2.75,4.99l4.05,1.38l2.76,-1.35l3.47,1.9l1.37,-0.21l1.06,-1.56l4.54,-2.65l7.43,-2.67l2.95,0.8l-0.25,4.37l1.74,1.53l-3.52,4.2l-2.35,0.3l-4.22,3.29l-7.43,9.8l-10.39,5.66l-1.99,-0.83l-2.14,1.15l-0.78,-0.34l-4.0,1.92l0.07,1.37l-17.36,5.52l-4.64,4.39l-1.39,0.28l-1.48,1.77l-1.77,4.33l0.19,1.1l2.64,1.18l3.48,0.07l3.08,-1.79l0.22,3.11l1.89,2.65l-1.64,0.78l-7.98,0.75l-5.89,1.98l-2.79,2.58l-0.45,1.65l-6.1,-1.03l-5.59,0.87l-2.51,1.82l-4.56,5.7l-1.8,0.33l-3.67,2.49l-1.52,2.88l-1.92,-1.04l-3.18,1.24l-2.5,-1.04l0.23,-3.72l1.37,-0.67l4.23,0.23l2.75,-0.95l0.02,-3.2l-2.7,-0.36l1.3,-1.87l0.73,-6.43l3.62,-1.93l4.0,-4.29l0.8,-2.06l-1.43,-11.81l1.34,-2.3l0.15,-2.05l2.09,-2.07l1.49,-3.89l-1.97,-6.43l-0.93,-0.06l-1.89,-2.92l-1.62,-0.74l4.39,-0.17l-0.43,1.17l1.19,2.97l1.72,0.67l0.31,0.93l1.26,-0.3l-1.24,2.92l2.85,-0.84l-0.2,3.37l0.73,0.14l2.66,-2.55l1.29,1.87l6.61,1.78l1.27,-1.38l-0.05,-2.95l-1.76,-1.81l1.5,-0.96l1.11,1.62l2.82,-0.09l0.25,-0.64l-0.74,-0.46l0.13,-1.8l-1.13,0.57l-3.99,-3.64l0.8,-1.08l-1.71,-1.33l0.92,-1.39l-0.63,-1.56l-1.34,-0.3l-1.54,0.95l-0.23,-1.09l-0.96,-0.31l-0.56,-2.76l-0.71,-0.28l-0.59,0.8l-3.52,-5.53l-1.01,-0.63l-4.1,0.66l-0.5,-1.26l-1.21,0.97l-2.42,-0.2l-1.04,-1.77l-1.21,-0.45l-0.72,0.76l-5.92,-0.16l-2.09,-1.06l-3.46,0.67l-0.44,-0.8l-4.14,1.13l-13.09,-1.81l-0.69,-0.77l0.39,-1.86l-1.1,-1.15l-4.5,1.29l-0.77,-0.76l1.82,-2.92l-0.71,-1.01l-0.82,0.15l-0.03,-0.85l1.61,-0.14l0.62,-1.12l-1.42,-1.43l-2.26,0.46l-1.63,-0.89l2.09,-5.6l-1.97,-2.61l-3.59,-2.57l1.63,-6.41l-1.36,-0.45l-7.14,1.19l-3.76,-0.81l-2.62,-2.95l-2.62,-7.54l-2.35,-3.41l-1.68,0.65l-1.66,-1.25l-1.76,1.04l-1.54,-0.93l-3.38,0.86l-3.47,-1.85l-4.37,-1.08l-1.54,-1.38l-2.91,1.14l0.18,1.94l1.8,1.59l-0.71,2.41l-1.35,-0.31l0.4,-1.68l-0.64,-1.58l-2.01,-0.19l-2.9,8.53l-1.08,0.6l1.44,-3.51l-0.47,-0.9l-5.21,2.26l-1.88,6.26l-2.82,2.11l-3.67,0.23l-2.51,-2.31l-7.44,0.52l-1.66,-2.7l-6.62,3.42l-2.89,-1.08l-0.63,-1.46l-2.68,-1.03l-1.32,-2.1l-2.73,0.25l-0.76,1.87l-1.31,-3.75l-2.46,-0.29l1.07,-0.69l-0.3,-0.8l-4.08,-1.73l-5.02,-0.14l-1.38,1.25l-3.01,0.33l-1.09,-2.11l-4.32,-0.55l-0.74,-1.12l-3.39,-0.37l-1.14,-1.77l1.38,-1.44l1.69,-0.49l1.73,-2.47l1.71,0.52l1.37,-1.02l0.67,-0.78l-0.75,-0.53l0.85,-2.93l-1.34,-1.05l0.67,-0.77l-3.37,-2.07l0.99,0.2l0.42,-0.61l-0.89,-0.66l0.73,-0.77l-0.67,-1.05l-1.42,-0.26l-0.97,-2.13l0.36,-1.57l-1.02,-1.13l-1.24,0.08l-0.58,0.92l1.46,2.37l0.06,1.75l-2.78,0.05l-1.13,1.44l-2.32,-0.86ZM469.67,728.45l1.67,1.42l0.23,1.55l-0.99,-0.96l-0.76,0.55l1.51,2.45l1.84,-1.22l-0.46,0.66l0.7,1.13l1.89,0.59l0.94,-0.84l1.18,1.62l1.63,-1.99l2.16,0.98l-0.37,-3.25l0.77,-1.47l-0.58,-2.28l0.44,-2.16l1.11,-0.99l-2.32,-1.72l0.65,-1.03l-0.82,-2.07l-2.54,-1.64l-1.61,1.18l-1.01,-0.84l-0.98,0.31l-1.54,1.57l-0.43,2.25l-1.04,0.41l0.93,2.15l-1.34,0.8l0.2,1.59l-0.37,-1.2l-0.84,-0.03l-0.43,1.8l0.54,0.71ZM540.56,627.39l-0.07,-0.12l0.08,-0.1l0.01,0.04l-0.02,0.17ZM625.48,816.5l-0.88,0.97l-0.47,0.08l0.55,-0.74l0.8,-0.31ZM617.32,819.18l1.96,-1.47l1.51,0.73l0.49,-0.98l1.66,-0.66l-0.41,1.69l0.39,0.57l1.51,-0.3l-0.58,1.21l0.49,0.7l-1.15,0.87l-0.53,-0.19l0.23,-1.4l-4.11,0.62l-1.47,-1.38ZM624.91,820.35l0.01,-0.01l0.01,0.0l-0.02,0.01ZM478.49,748.07l0.15,0.64l-0.97,0.3l0.81,-0.95ZM477.13,749.61l-0.41,0.47l-0.16,0.72l0.06,-0.73l0.51,-0.46ZM472.6,753.18l-0.12,0.04l-0.06,0.0l0.02,-0.03l0.16,-0.01ZM409.98,736.99l-1.24,-1.83l-2.23,0.71l-0.95,-1.1l0.31,-0.87l-2.37,-0.23l0.19,-0.55l5.22,-0.85l-0.85,1.31l0.47,0.65l0.86,-0.42l-0.01,1.28l1.48,0.84l-0.87,1.06ZM401.76,728.88l0.69,0.17l-0.45,0.55l-0.32,-0.09l0.08,-0.64ZM631.42,815.59l-0.13,-0.74l0.55,-0.02l-0.02,0.39l-0.4,0.37ZM627.23,816.23l0.77,-0.4l0.07,-0.04l-0.2,0.32l-0.64,0.12ZM581.85,801.71l0.01,-0.5l0.57,0.08l-0.37,0.17l-0.21,0.24ZM582.47,809.41l0.08,-0.02l-0.03,0.08l-0.05,-0.05ZM575.9,692.07l1.12,-1.08l0.85,7.34l-1.99,-2.2l0.02,-4.05ZM543.99,793.29l0.64,0.68l2.98,-1.21l0.99,2.07l2.33,0.02l0.5,0.81l-7.92,-1.58l0.49,-0.78ZM551.7,795.68l0.77,-1.33l-0.92,-0.74l1.53,-1.12l1.04,-0.37l2.14,2.32l2.38,-2.74l0.44,1.27l1.05,0.28l-0.19,1.49l1.03,1.14l-2.87,2.6l-6.4,-2.79ZM561.3,795.7l0.14,-1.12l0.31,-0.89l0.37,-0.6l-0.5,1.08l1.39,0.74l-2.12,3.83l-0.59,0.22l1.7,-2.36l-0.71,-0.91ZM561.37,800.05l0.39,-0.41l0.14,-0.07l-0.3,0.46l-0.22,0.02ZM559.04,790.43l0.46,-0.13l0.58,0.12l-0.77,0.13l-0.27,-0.12ZM549.74,793.07l0.11,-0.31l0.76,-0.12l-0.14,0.32l-0.72,0.11ZM540.29,794.07l1.01,-1.22l0.82,0.55l-0.61,1.12l-1.21,-0.46ZM532.17,788.03l1.6,-0.01l1.59,1.01l-1.21,2.0l-1.98,-3.01ZM508.33,763.17l0.76,-0.68l2.4,0.26l-0.97,0.41l-2.18,0.01ZM486.08,744.61l0.14,-0.01l0.53,0.92l-0.33,0.04l-0.33,-0.95ZM482.03,744.94l1.2,-0.66l1.87,0.08l-0.46,1.02l-2.38,0.75l-0.23,-1.19ZM477.93,719.83l0.17,-0.01l0.17,0.44l-0.2,-0.06l-0.14,-0.37ZM478.55,720.5l0.14,0.03l0.06,0.19l-0.05,-0.01l-0.14,-0.21ZM475.07,730.34l0.17,-0.01l0.06,0.15l-0.14,-0.1l-0.09,-0.04ZM475.4,723.45l-0.02,-0.28l0.1,0.01l-0.07,0.24l-0.01,0.03ZM474.42,725.62l0.1,0.02l0.16,0.3l-0.46,-0.02l0.2,-0.3ZM469.69,755.38l0.19,-0.22l0.17,-0.01l-0.36,0.22ZM403.6,737.46l0.64,-0.37l0.83,0.44l-1.23,0.69l-0.24,-0.77ZM406.38,737.1l0.0,-0.01l0.02,-0.07l0.01,0.08l-0.04,-0.0ZM405.0,739.21l0.5,-0.36l0.12,0.28l-0.18,0.39l-0.43,-0.3ZM399.11,732.44l1.97,-0.65l0.88,-0.67l-0.87,1.65l-1.81,0.48l-0.16,-0.81ZM402.77,730.48l1.11,-1.11l0.95,-0.18l-0.74,1.0l-1.33,0.3Z",
            "name": "Ontario"
        },
        "ab": {
            "path": "M139.57,606.56l0.37,-1.05l1.18,0.57l0.81,-0.56l-1.58,-4.38l37.33,-108.91l45.27,14.12l45.98,11.63l-2.72,12.15l-4.26,2.55l-1.83,0.1l-4.59,4.95l-1.83,0.73l-0.86,-1.64l-1.67,0.79l1.38,3.5l-0.16,1.93l0.92,0.24l1.46,-1.94l-0.31,2.62l0.56,0.52l1.32,-1.15l0.14,-1.43l3.55,0.95l0.97,-1.38l-0.73,-1.28l4.31,-2.81l-39.85,178.15l-45.48,-11.24l-0.72,-2.98l-2.23,-1.66l0.23,-0.86l-1.58,-2.96l0.8,-2.77l-1.71,-1.0l2.24,-2.87l-0.07,-2.44l1.05,-2.7l0.11,-5.55l-1.47,-4.33l-1.24,-1.02l-1.26,0.24l-0.4,-3.13l-2.69,-3.15l0.84,-0.16l-0.02,-1.71l-1.31,-2.54l-1.92,-1.32l-0.11,-2.34l-1.88,-1.98l0.3,-2.47l-2.03,-4.3l-0.2,-3.14l-1.26,-0.33l-1.4,1.25l-0.62,-0.25l-0.14,-3.71l-1.62,-3.01l0.14,-2.56l-3.37,-0.27l-1.21,-1.61l-0.28,-1.09l1.58,-1.91l-2.46,-2.86l-1.36,1.2l-1.4,-0.1l0.7,-1.26l-0.7,-2.97l0.77,-0.81l-0.3,-3.43l-0.53,-1.4l-1.3,-0.18l0.31,-2.51l-1.07,-3.42l-1.29,-1.58l-1.31,1.23l-1.63,-1.38l-0.34,-3.23l-2.89,-1.04l-1.44,-3.37Z",
            "name": "Alberta"
        }
    }
});

},{}],"2IqDx":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('russia', {
    "insets": [
        {
            "width": 900,
            "top": 0,
            "height": 557.3183105409283,
            "bbox": [
                {
                    "y": -16864313.4312261,
                    "x": 903208.6719108557
                },
                {
                    "y": -5043360.381389352,
                    "x": 19992582.811667882
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "RU-PNZ": {
            "path": "M118.47,460.67l0.28,-1.82l0.85,0.08l0.71,0.74l0.68,-0.45l0.71,0.15l0.21,-0.4l1.83,-0.18l0.37,-0.38l-0.22,-1.09l0.47,-0.12l2.28,0.39l0.54,0.35l0.02,0.95l0.66,0.53l0.68,0.23l0.49,-0.21l1.94,0.85l1.3,-0.53l0.07,-0.45l-0.63,-1.2l1.12,-0.56l1.4,0.01l1.02,0.72l1.82,-0.29l0.47,-0.51l0.92,-0.23l0.84,0.56l0.35,1.36l1.03,1.04l0.23,1.29l2.06,1.44l-0.03,3.85l0.33,0.69l-0.78,0.99l-0.8,-0.83l-1.7,0.53l-1.77,1.62l-0.1,0.51l-1.03,-0.86l-1.16,0.42l-0.38,0.54l-0.85,0.17l-0.65,-0.24l-0.63,0.53l-0.6,-0.69l-2.09,-0.88l-0.37,0.43l0.12,0.56l-0.88,0.84l-1.15,-0.17l-1.5,-0.71l-2.04,0.28l-1.17,-0.54l-0.06,-0.32l0.82,-0.92l-0.8,-1.67l-1.02,-1.35l-1.84,-1.45l0.05,-0.51l-1.32,-1.64l-0.01,-0.5l-1.07,-0.94Z",
            "name": "Penzenskaya oblast"
        },
        "RU-VLA": {
            "path": "M98.58,433.56l0.2,-0.95l0.6,1.19l1.37,-0.56l0.98,0.57l0.79,-0.34l0.94,0.34l0.5,-0.84l0.08,-1.31l1.23,-0.51l0.65,0.32l-0.13,1.41l0.67,1.35l1.39,0.64l2.08,-1.42l0.88,-0.13l0.77,0.82l1.13,0.36l4.1,-0.45l0.29,1.15l0.82,0.3l1.24,-0.9l1.39,0.45l0.64,0.79l0.12,1.01l-0.52,0.46l0.02,1.1l-0.51,0.13l-0.97,1.75l-0.66,0.21l-1.28,1.66l0.4,1.68l-0.91,0.77l-0.42,1.18l0.16,0.31l-0.78,0.26l-1.17,-0.21l-1.13,-0.72l-0.72,0.15l-0.64,-0.52l-1.68,0.45l-0.49,-1.05l-0.66,0.18l-0.33,-0.3l-0.69,0.02l0.11,-0.77l-0.63,-0.98l0.06,-0.64l-1.36,-2.12l-2.5,0.53l-0.32,-0.56l-1.26,-0.14l-0.42,-0.79l-1.02,0.1l-0.96,-0.5l-0.38,-2.03l-0.52,-0.4l-0.08,-1.86l-0.45,-0.62Z",
            "name": "Vladimirskaya oblast"
        },
        "RU-LEN": {
            "path": "M43.24,408.71l0.65,-1.66l0.31,0.04l-0.15,0.77l0.48,0.23l0.52,-0.34l0.2,-0.9l1.73,-0.57l-0.25,-0.68l-0.6,-0.26l-0.63,0.16l-0.88,-1.31l0.22,-0.86l-0.41,-1.39l0.14,-0.5l0.52,1.01l1.24,0.16l0.44,-1.82l0.86,0.64l1.0,0.01l0.9,-0.6l0.7,-1.61l2.32,0.47l0.21,0.98l3.14,2.64l1.36,-0.17l0.55,-0.75l0.56,-0.04l0.54,-0.61l-0.15,-0.92l-1.09,-0.72l0.04,-1.14l-0.85,-0.78l-0.06,-1.0l-4.19,-1.55l-0.85,0.32l-0.53,0.67l-1.35,-0.06l-1.33,-1.91l-0.49,0.15l-0.44,-0.26l0.57,-0.71l-0.25,-1.45l0.39,-0.98l-0.32,-0.67l-0.5,-0.08l-0.59,0.53l-0.93,0.25l-0.95,1.17l-1.27,0.25l3.1,-3.66l0.77,-0.39l0.89,-1.37l2.42,-2.07l1.21,1.3l1.66,-0.01l14.97,5.73l0.91,-0.32l0.42,-0.57l0.97,-0.25l0.66,-0.78l0.12,-0.87l0.88,-0.38l0.19,-0.43l1.24,0.37l0.49,-0.23l0.56,-1.91l-0.89,-0.59l-0.89,0.41l-0.4,-0.33l0.29,-0.36l3.32,-0.21l1.12,1.02l0.5,-0.34l0.33,-1.02l0.79,-0.33l2.79,0.52l-0.0,0.54l0.48,0.42l1.35,-0.04l-0.95,1.51l-0.12,1.07l-1.14,0.35l-0.63,0.92l0.5,1.35l0.06,2.19l-0.55,1.91l0.15,1.84l-0.48,0.77l0.25,0.39l1.63,0.51l-0.3,1.49l0.15,1.03l0.46,0.37l-0.03,0.93l-0.9,0.38l-0.19,0.39l0.78,0.88l-1.15,1.14l-1.49,0.27l-0.68,1.32l-0.8,-0.06l-1.51,-0.85l-1.41,0.47l-2.42,-2.26l-1.12,-0.11l-0.38,0.45l-1.34,-0.98l-0.59,0.14l-1.23,1.66l0.01,0.97l-1.49,-0.48l-1.24,-1.89l-1.29,-0.03l-0.65,0.82l-1.25,-0.54l-0.45,0.39l0.03,1.4l-0.41,1.23l-0.66,0.7l-0.55,-0.73l-0.9,0.01l-0.35,0.34l-0.13,0.9l-1.21,1.47l-0.1,0.69l-1.23,0.28l-0.67,-0.42l-0.88,0.0l-0.45,0.53l0.04,2.36l-1.24,0.29l-0.95,-0.22l0.03,-0.51l-0.59,-0.65l-0.71,-0.27l-0.38,-0.82l-0.88,-0.42l-0.66,-0.8l-2.41,-0.59l-1.29,0.07l-0.74,-1.29l-1.7,-0.26Z",
            "name": "Leningradskaya oblast"
        },
        "RU-SAK": {
            "path": "M717.51,484.9l0.25,-0.09l0.62,-0.56l-0.37,1.14l-0.51,-0.21l0.0,-0.27ZM712.56,489.0l0.83,-0.63l1.46,-0.38l1.07,-2.39l0.52,-0.46l0.12,1.44l-0.44,0.28l-0.84,1.77l-0.49,0.48l-1.14,0.23l-0.69,0.87l-0.37,-0.11l-0.01,-1.11ZM713.73,483.77l0.26,0.07l0.08,0.12l-0.21,-0.01l-0.12,-0.18ZM709.29,496.52l-0.03,-0.28l0.26,-0.49l0.12,0.49l-0.35,0.27ZM682.55,524.97l0.68,-1.08l0.77,-0.3l1.01,-1.36l0.53,-0.11l-0.49,0.89l-1.02,0.54l-0.09,0.16l-0.38,0.26l-0.74,0.84l-0.29,0.18ZM686.16,521.58l-0.02,-0.21l0.49,-0.18l-0.27,0.29l-0.21,0.1ZM670.38,531.95l0.24,-0.74l1.18,-0.94l-0.26,0.71l-1.15,0.97ZM671.94,529.85l0.01,-0.04l0.02,0.01l-0.03,0.04ZM672.7,529.54l1.32,-1.28l0.78,0.17l-1.24,1.37l-0.86,-0.26ZM676.92,527.28l0.8,-0.74l0.41,-0.15l-0.02,0.79l-1.2,0.1ZM667.28,539.01l0.0,-0.02l0.03,-0.01l-0.03,0.03ZM661.06,538.63l0.0,-0.0l-0.0,0.02l-0.0,-0.01ZM663.36,535.84l0.09,-0.16l0.26,-0.13l-0.13,0.09l-0.22,0.19ZM663.94,535.22l0.57,-1.26l0.86,0.59l-0.29,0.32l-1.14,0.35ZM641.22,471.57l1.01,-2.18l0.46,-3.77l-0.66,-3.06l1.53,-0.91l0.39,1.14l1.41,-0.13l0.66,-1.07l0.61,-0.31l-0.31,-0.82l0.45,-0.12l0.54,-0.87l0.36,0.94l-0.19,0.36l0.55,0.6l0.01,1.05l0.65,0.35l0.73,4.09l-0.15,1.96l-0.33,0.2l-0.77,2.34l0.27,0.67l-0.37,1.28l0.35,1.14l-0.21,0.29l0.96,1.79l-0.47,1.86l0.25,0.44l0.98,-0.08l-0.31,1.34l0.8,1.1l1.28,7.38l1.73,4.49l0.9,4.25l-0.66,-0.59l-1.86,-0.7l-1.14,-0.11l-0.57,-0.42l-1.03,0.14l-0.19,0.37l0.29,0.58l-1.12,0.76l-0.54,0.96l-0.01,1.41l-2.36,7.19l0.32,3.09l0.71,1.7l0.89,0.4l0.62,0.91l0.06,1.28l0.52,1.47l-0.21,0.66l0.68,1.0l1.1,0.2l0.45,-0.26l0.31,2.57l-0.16,0.22l-0.26,-0.84l0.25,-0.83l-0.19,-0.52l-1.25,-0.45l-1.89,-0.01l-0.19,-0.85l-0.61,-0.27l-1.54,1.08l-0.95,2.39l-0.42,2.12l-0.39,0.33l-0.84,-4.24l1.26,-3.64l-0.49,-4.24l1.2,-2.93l-0.31,-2.94l-1.44,-3.27l0.58,-0.8l0.83,-4.83l0.26,-5.13l-0.15,-2.31l-0.53,-1.43l0.28,-2.2l0.9,-2.54l-1.03,-3.14l-1.42,-1.78l-0.08,-1.19l-0.64,-0.47l-0.11,-1.58l0.28,-0.63l-0.27,-1.44ZM645.98,460.29l-0.28,-0.04l-0.01,-0.03l0.22,-0.02l0.07,0.08ZM646.82,457.97l-0.02,0.0l0.0,-0.02l0.01,0.01ZM646.84,457.69l-1.48,-2.62l1.01,-0.41l0.14,-0.68l1.07,1.87l-0.75,1.83Z",
            "name": "Sakhalinskaya oblast"
        },
        "RU-KYA": {
            "path": "M309.35,234.65l0.21,-0.5l2.31,0.45l1.91,-0.15l0.51,0.32l2.62,2.67l3.52,1.63l-0.29,1.17l3.22,3.07l0.33,1.42l2.32,1.34l2.65,-0.06l3.42,-1.28l0.67,0.84l1.15,0.01l0.16,0.82l-1.43,1.75l-0.06,2.08l-3.9,2.36l0.4,3.06l-0.74,1.13l-0.02,0.68l1.09,3.33l-0.91,1.13l-0.84,2.2l0.38,0.84l0.48,3.85l0.6,1.23l0.46,0.17l0.26,-0.77l-0.56,-4.32l-0.38,-1.0l1.1,-0.22l0.48,-0.44l-0.14,-1.11l0.61,-1.3l-0.38,-0.66l0.93,-2.19l0.58,0.72l0.48,-0.19l0.62,0.47l-0.62,6.98l-1.81,2.6l-0.07,1.58l1.56,1.67l1.66,0.06l0.34,-0.45l0.0,-0.89l-0.93,-2.45l1.36,0.19l1.13,-0.31l1.5,-2.46l-0.04,-1.68l-0.82,-2.16l-0.01,-1.06l-1.13,-3.28l-0.06,-1.04l-0.82,-0.82l0.19,-0.46l-0.53,-1.89l1.15,-2.05l0.03,-1.47l0.72,-0.43l0.51,-1.14l0.02,-1.44l-1.09,-2.14l-0.33,-1.53l-1.37,-0.92l-1.92,-0.35l-0.45,0.17l-0.93,-1.94l-1.2,-1.15l0.37,-0.55l0.02,-1.27l-0.68,-1.57l-1.41,-0.27l-1.93,-1.01l-2.01,-0.1l-1.75,-1.89l-0.58,-1.07l0.56,-1.52l-0.78,-0.53l-0.21,-1.15l0.9,-2.04l0.06,-2.37l-0.43,-1.36l-1.11,-0.74l0.37,-0.49l-0.24,-0.66l-0.77,-0.45l0.85,-0.69l-0.2,-1.22l-1.39,-0.72l1.66,-1.8l0.47,-1.27l-0.1,-0.54l-0.71,-0.13l0.0,-0.6l1.49,0.15l2.07,-0.56l1.48,-0.8l2.16,-0.27l8.0,0.13l1.4,-0.76l3.26,-0.27l1.21,-0.82l0.89,-0.17l1.18,0.99l2.24,-0.02l0.64,-0.42l0.04,-0.89l0.44,-0.77l1.24,-0.04l0.96,-0.83l3.79,-0.64l1.3,0.49l-0.33,1.1l-0.83,0.35l-0.68,1.05l-1.13,0.7l-0.61,0.83l-1.51,0.74l-1.72,1.97l-0.1,0.7l0.33,2.52l2.08,1.44l0.5,1.28l1.16,0.47l0.64,0.66l0.44,1.89l0.62,0.42l0.27,-0.38l-0.26,-2.05l-2.0,-2.65l-2.45,-1.64l-0.05,-2.48l1.49,-0.97l5.04,-1.01l1.15,-1.94l-0.15,-0.8l1.53,-1.35l0.31,-1.65l-0.4,-0.6l-0.66,-0.1l-0.36,0.32l-0.21,1.33l-0.39,-0.16l-1.66,-3.24l2.06,0.68l0.33,-0.56l-0.43,-0.84l-0.59,-0.37l-1.88,-0.13l-0.07,-0.6l-0.58,-0.39l0.31,-1.0l-0.92,-1.18l-0.97,-0.41l-2.39,-0.13l-0.16,-0.26l-0.14,-0.94l0.63,0.11l0.9,0.9l0.4,-0.24l0.09,-0.68l-0.41,-1.27l0.87,-0.6l0.49,1.19l1.4,0.17l-0.98,0.6l-0.02,0.8l0.4,0.24l0.97,-0.17l0.15,0.61l0.61,0.09l0.38,-0.59l-0.07,-1.0l0.83,0.02l0.3,-0.66l-0.91,-0.62l-0.01,-1.02l-0.61,-0.22l-0.97,0.29l-0.36,-0.33l-0.6,-0.95l0.87,-0.48l-0.2,-0.84l-1.37,-0.11l-1.53,-1.03l-1.81,-0.25l0.26,-1.03l0.71,0.1l0.56,-0.78l0.54,0.97l0.45,0.06l0.35,-0.4l0.59,0.35l-0.07,0.68l0.74,1.07l0.74,-0.2l0.69,0.44l0.41,-0.24l-0.24,-1.07l0.22,-0.4l-0.7,-0.91l0.19,-0.27l0.41,0.58l0.56,-0.06l0.28,-2.86l1.46,-1.57l0.58,0.38l0.42,-0.12l0.12,-0.73l1.02,-1.24l-0.36,-0.81l-1.99,-0.2l-0.58,-0.57l-1.55,-0.37l0.35,-0.73l0.68,-0.08l4.21,1.34l1.96,-1.66l0.32,-1.6l1.42,-0.58l-0.2,-1.17l1.05,-0.4l0.04,-0.63l0.43,-0.36l0.95,0.12l-0.05,-0.95l0.72,-0.67l0.69,0.75l1.75,0.1l0.3,-0.78l-0.48,-0.53l1.95,-0.26l0.36,-0.49l-0.45,-0.84l2.96,-0.61l1.21,-1.0l0.51,0.76l0.57,-0.06l0.43,-0.5l0.79,0.43l0.93,-0.4l0.84,0.17l0.49,-0.53l0.06,-1.39l0.71,0.22l1.96,-0.68l1.01,0.14l0.69,-0.62l5.35,-1.7l2.71,-1.37l0.61,-0.64l0.06,-0.73l-0.62,-0.15l-0.45,0.5l-1.47,0.59l-0.84,-1.12l-0.52,0.19l-0.38,0.67l-0.35,-1.39l-0.67,0.02l-1.39,0.9l-0.11,-0.27l0.45,-0.68l0.0,-0.9l0.55,0.71l0.99,-0.85l0.41,1.0l0.53,0.01l0.54,-0.71l1.06,0.18l1.16,-0.23l0.34,-0.64l-1.05,-1.04l1.52,0.43l0.81,-0.2l0.43,1.23l0.47,0.2l0.96,-0.51l0.01,-0.7l0.76,-0.7l0.64,0.6l2.03,-0.43l0.47,-0.68l2.24,0.5l0.82,0.63l-0.34,0.48l0.23,0.33l-0.34,0.58l0.12,0.4l-0.76,0.59l-0.71,1.4l-0.7,0.38l0.03,0.52l1.01,0.8l0.52,-0.23l0.88,-1.76l1.84,-0.21l0.52,-0.89l0.64,0.4l-0.81,1.55l-0.02,0.66l0.54,0.12l0.94,-0.66l0.79,0.34l1.56,-2.24l-0.05,0.85l0.47,0.53l0.9,-0.28l0.21,-0.95l1.01,-0.1l0.48,0.26l0.94,-0.32l0.08,-1.1l-1.02,-1.0l0.36,-0.12l0.88,0.77l1.41,-0.73l0.5,-0.64l-1.39,-0.62l0.58,0.04l0.38,-0.64l1.17,-0.17l1.24,-1.25l-0.05,0.72l0.42,0.25l0.73,-0.07l0.42,-0.48l0.97,0.22l-0.61,0.93l0.43,0.58l0.76,0.34l1.1,-0.4l-0.37,0.58l0.17,0.41l0.49,0.72l0.7,-0.07l0.15,0.25l-0.39,1.59l-0.03,1.97l-1.18,1.52l0.11,0.68l1.18,0.21l1.84,-3.32l0.01,-1.25l-0.38,-1.02l0.25,-1.63l-0.48,-1.46l-0.76,-0.8l-0.27,-1.65l-1.13,-0.43l-0.69,-1.5l-1.14,-0.12l-0.04,-0.79l-1.02,-1.69l0.05,-0.41l3.03,1.07l3.65,-0.49l0.37,0.54l0.47,0.09l2.6,-1.57l0.69,0.61l-0.13,0.58l0.48,0.48l1.51,-0.42l1.98,0.59l0.63,1.08l2.2,0.45l0.43,-0.57l-0.56,-0.89l-2.21,-1.22l-0.99,-0.11l-0.09,-0.4l-0.92,-0.49l-1.77,-0.17l-0.34,-0.41l0.86,-1.22l0.2,-2.53l0.51,-1.0l-0.51,-0.62l-0.91,-0.19l-0.5,-0.93l0.29,-3.04l1.14,0.05l0.33,-0.28l0.19,-1.5l-0.36,-0.63l0.13,-0.41l3.06,-4.05l1.45,-2.83l0.78,0.4l0.32,-0.26l1.51,-2.81l1.69,-1.13l0.17,-0.93l1.25,-1.58l0.8,0.86l1.24,-0.3l2.36,-2.52l0.85,0.12l-0.16,0.89l0.5,0.56l2.12,-0.93l0.66,2.24l0.75,0.67l1.21,0.43l0.46,0.6l0.41,0.15l2.16,-0.51l0.84,3.21l1.41,0.94l-2.46,-0.24l-0.88,1.71l-0.97,0.7l0.22,0.68l-0.77,0.29l-0.54,0.67l-3.06,0.93l-0.62,0.66l-0.85,-0.04l-1.28,1.02l0.11,0.65l1.26,0.15l2.08,-0.65l0.8,0.62l1.02,0.04l0.63,-0.48l0.98,0.45l1.34,-0.57l0.76,0.04l-0.39,0.29l-0.09,0.78l-1.0,-0.03l-0.39,0.27l-0.28,1.01l0.51,0.7l2.46,-0.3l1.57,-1.52l1.4,1.01l1.35,0.41l0.42,-0.23l0.06,-0.91l0.34,0.21l0.16,0.71l1.21,-0.08l0.72,1.4l0.55,0.38l-0.9,0.31l-0.12,0.74l-0.51,0.58l0.31,0.5l-0.9,0.33l-0.13,1.1l-0.51,0.82l-1.02,-0.09l-0.21,0.53l0.35,0.86l-0.61,1.65l-0.95,-0.55l-0.54,0.39l-0.04,1.92l0.31,0.65l1.6,0.3l0.57,0.64l0.54,-0.14l0.32,-0.71l1.69,-0.55l1.52,0.6l1.66,-0.69l0.95,-2.32l-0.31,-2.28l1.1,0.03l0.55,0.71l0.99,-0.44l1.05,0.2l1.8,-0.51l0.68,0.18l0.87,-0.53l3.74,1.45l1.77,-1.49l0.82,-0.15l0.69,0.82l1.67,-0.39l0.25,1.15l0.67,0.16l0.31,-0.43l0.98,0.31l-0.22,1.21l0.23,0.45l0.46,0.21l0.75,-0.2l0.64,0.42l1.77,2.48l-1.61,2.32l-0.08,0.96l0.53,-0.09l0.9,-0.81l1.1,-1.43l1.78,1.75l-0.07,0.89l0.35,0.87l-0.3,0.43l-0.71,-0.09l-0.14,0.68l0.68,1.01l0.76,0.02l0.32,0.82l-0.4,1.24l-1.01,0.63l0.08,0.55l0.52,0.21l2.09,-0.65l0.44,-0.66l-0.06,-1.35l0.75,0.84l0.5,0.17l0.23,-0.47l0.01,1.78l0.44,0.49l-0.18,0.55l0.27,0.36l-0.47,0.36l-0.04,0.55l0.52,0.81l-0.39,0.85l0.36,0.4l0.89,-0.2l0.37,-0.41l-0.08,-0.85l0.34,-0.01l0.25,1.15l-0.87,3.81l-2.27,-0.78l-0.19,-0.51l-2.96,-2.79l-1.25,-0.22l-0.5,0.32l0.93,2.08l1.61,0.8l-0.38,0.84l0.58,0.91l-0.46,1.07l0.3,1.08l0.6,0.3l1.01,-0.22l-0.05,-1.41l0.79,-0.53l-0.19,1.3l0.24,0.6l1.41,1.03l0.58,0.0l0.11,0.53l0.04,0.51l-0.58,0.22l-0.35,0.75l0.69,0.59l-0.28,1.47l-3.05,4.39l-0.71,1.52l-1.75,1.32l-2.13,1.05l-0.51,1.83l-0.41,0.2l-0.24,1.14l-0.74,0.86l-1.18,-0.55l-0.64,0.11l-1.6,1.69l-0.75,0.34l-0.03,0.8l-0.66,0.16l-1.42,1.15l-0.71,-0.3l-0.64,0.14l-0.27,0.35l0.46,0.86l-0.67,1.05l-0.95,-0.02l-0.61,0.87l-1.77,0.3l-0.23,0.66l0.43,0.48l0.7,0.18l0.92,-0.29l-0.8,2.02l-1.6,1.55l-1.45,0.35l-1.13,0.88l-1.31,1.65l-1.05,2.1l-0.57,-0.05l0.06,1.01l-1.52,1.8l-0.91,-0.07l-1.04,1.0l-1.88,-0.36l-1.44,0.37l-0.44,1.07l0.3,0.49l-1.42,1.82l-0.47,1.83l-0.54,0.46l-0.52,-0.32l-1.82,0.16l-0.89,0.91l-0.37,2.23l-0.83,1.17l-0.07,1.58l-0.97,1.66l-1.78,1.8l-1.01,0.22l-0.31,0.43l0.03,0.36l0.64,0.28l2.16,-0.06l1.63,-1.83l0.79,-0.37l0.32,-0.87l0.24,0.56l2.28,0.83l0.61,0.64l1.06,0.09l1.49,-0.56l0.17,-0.61l-0.48,-0.5l-2.19,-0.33l-1.9,-1.28l-0.19,-2.11l0.66,-1.13l2.23,0.84l0.77,-0.14l0.55,-0.52l1.31,0.37l2.34,-0.2l1.8,-1.36l0.84,0.44l0.54,-0.08l0.59,-0.9l-0.43,-0.74l1.02,0.01l0.69,-0.48l1.29,-0.23l1.49,-0.64l0.45,-0.67l0.59,0.14l0.38,-0.73l1.06,0.06l0.9,-0.39l1.45,-0.94l0.34,-0.67l-0.1,-0.51l1.29,-0.4l0.18,-0.73l2.22,-0.7l0.72,0.67l-0.13,0.51l-1.37,0.49l-1.33,2.71l-1.8,0.1l-0.44,0.42l0.29,0.63l1.72,1.09l0.29,0.57l-0.97,1.09l0.01,0.65l0.43,0.32l1.52,0.14l0.63,2.0l-0.77,0.66l0.27,1.11l-0.96,0.9l0.35,1.2l-0.45,0.71l0.29,1.98l0.34,0.75l0.83,0.35l0.16,0.94l1.68,0.58l0.3,0.45l-1.2,1.47l0.06,0.91l1.66,1.13l1.03,0.05l0.3,0.55l-0.15,0.95l0.55,0.39l0.22,0.85l0.47,0.41l0.74,0.04l0.03,11.83l1.9,1.43l0.87,1.11l0.69,-0.09l0.24,0.28l-0.97,1.15l0.26,0.89l-1.35,1.15l-0.35,-0.59l-0.63,-0.12l-0.45,0.43l-0.2,0.82l-2.36,0.78l-0.93,1.27l-1.37,0.14l-1.03,0.71l-0.59,-0.2l-1.23,0.28l-0.46,0.63l0.01,0.78l-0.79,0.17l-1.13,1.17l0.0,1.11l-0.3,0.47l0.32,1.29l0.5,0.33l-3.04,0.72l-0.42,0.58l0.21,0.69l-0.21,0.56l-1.42,0.94l0.34,2.38l0.79,0.76l-0.59,1.24l-0.1,1.31l-0.55,0.84l-1.03,-0.19l-0.44,-0.8l-3.39,-0.29l-0.94,0.63l-1.04,2.05l-0.71,-0.05l-3.47,1.46l-1.48,1.01l-0.94,0.01l-0.56,-0.72l-0.61,-0.01l-0.98,1.77l-0.82,0.77l3.93,8.4l0.02,10.66l-0.48,10.5l-0.43,0.83l-0.93,-0.27l-1.41,1.34l-1.08,0.38l-0.42,1.35l-2.02,0.43l-0.34,0.45l0.9,1.37l1.89,0.6l-0.41,1.05l0.78,0.45l0.07,0.58l0.47,0.42l0.38,2.72l-0.66,0.41l-0.45,0.84l0.07,2.49l0.41,0.73l0.86,0.2l0.59,1.54l-0.26,4.33l1.12,0.71l0.53,1.05l1.07,0.46l-0.47,1.02l-0.79,-0.2l-0.69,0.39l-0.68,1.02l-0.0,0.91l-2.32,2.4l-0.09,0.63l0.56,0.75l-0.59,0.24l-0.07,0.81l-0.55,0.54l-0.06,1.38l-0.69,0.28l0.06,1.22l0.52,1.4l0.55,0.13l0.93,-0.34l-0.18,0.71l0.56,0.51l2.86,-0.61l0.34,0.46l0.83,0.08l1.55,0.95l0.82,1.05l1.37,-0.58l1.13,1.24l0.79,0.26l1.0,-0.81l0.56,1.97l-0.71,0.27l-1.68,-0.25l-0.65,0.22l-0.52,0.51l-0.16,0.96l-0.57,-0.01l-0.63,-0.99l-0.75,-0.04l-0.42,0.64l-1.52,-1.13l-0.78,0.32l-0.18,0.95l0.56,0.92l-0.82,1.64l0.29,0.9l-0.94,1.56l1.06,1.59l-0.09,0.34l-0.6,-0.28l-0.59,0.12l-0.53,0.92l0.16,1.7l-1.18,0.27l-0.25,0.46l0.54,2.05l1.19,0.69l0.37,0.9l-0.04,0.97l1.08,0.67l-0.31,0.69l0.24,0.55l-0.64,0.81l-0.81,0.29l0.01,0.56l-0.56,0.86l0.57,0.67l-0.24,1.72l-0.77,0.28l-1.74,1.98l0.15,1.52l-2.84,1.71l-0.66,1.18l-1.36,0.21l-1.18,0.87l0.19,0.5l0.59,0.16l0.29,0.89l-0.66,0.08l-1.27,1.23l-0.3,1.53l0.25,0.52l-0.79,0.57l0.63,1.19l-0.31,1.13l0.82,2.69l1.38,1.22l1.49,0.28l0.76,-0.16l0.6,0.4l-0.31,0.99l0.34,1.2l-0.17,1.55l-0.96,-0.37l-1.01,0.26l-0.28,0.72l-0.59,0.25l-0.62,0.85l0.5,1.99l0.66,0.78l1.06,0.08l-0.15,1.21l0.56,0.68l0.23,1.38l-0.81,0.22l-1.98,1.98l-0.27,0.77l0.54,0.87l-1.65,0.58l-0.25,-0.76l-1.15,-0.62l-0.94,-0.05l-0.48,-1.28l-1.43,-0.29l-1.13,-0.92l-0.65,-1.4l0.38,-0.17l0.07,-0.56l-0.7,-0.6l-0.87,0.17l-0.3,-0.51l-0.38,-0.03l-1.11,1.15l-1.47,0.21l-0.52,0.5l-0.3,0.97l0.17,1.41l0.5,0.59l0.15,0.83l-0.21,0.57l-1.01,0.73l-0.6,1.16l-2.62,1.07l-0.92,1.91l-1.15,0.09l-1.04,1.12l0.09,1.35l-0.61,0.88l-0.69,-0.14l-0.43,0.48l0.3,1.12l-0.32,1.07l0.75,1.1l-0.04,0.4l-0.62,0.38l-1.43,-1.04l-0.19,-1.63l-1.27,-1.46l-0.27,-1.83l-0.47,-0.48l-2.18,0.07l-1.09,1.57l-0.38,1.14l-1.59,0.27l-0.65,0.47l-0.95,-0.68l-4.01,-0.29l-0.69,0.35l-3.09,7.49l0.88,1.25l-0.12,1.36l0.6,0.34l0.82,-0.08l-0.09,1.91l0.68,0.42l0.01,0.78l-1.61,0.33l0.06,1.64l-0.66,0.48l-0.23,0.66l-0.79,-0.39l-0.68,0.21l-0.77,0.86l-0.1,1.34l-1.01,0.91l-0.12,1.23l0.44,0.66l0.04,1.47l0.35,0.85l-1.05,0.57l-0.23,1.79l-0.38,0.32l0.57,1.65l-0.74,1.48l-0.07,1.28l-0.68,-0.43l-0.72,0.22l-0.96,-0.23l-0.76,1.5l-0.98,0.1l-0.55,0.84l0.12,1.19l1.97,1.46l0.01,0.67l3.17,3.42l-0.7,0.07l-0.26,-0.52l-0.84,-0.21l-1.11,1.4l-1.58,-0.54l-1.91,1.29l-0.19,-0.53l-0.49,-0.21l-1.06,0.66l-1.9,0.11l-0.9,0.81l0.03,0.42l0.44,0.28l-0.33,0.37l-0.5,2.21l-0.9,0.02l-0.99,0.68l-0.43,1.52l-1.64,2.05l-0.5,1.83l-1.16,0.41l-2.95,2.57l-1.69,0.49l-2.09,0.05l-0.58,-0.1l-0.37,-0.46l-1.84,-0.41l-1.77,0.13l-0.74,-0.49l-1.04,0.18l-0.49,-1.12l-0.98,-0.5l-0.22,-0.35l1.02,-2.0l3.67,-3.57l-0.11,-1.88l1.39,-0.54l1.12,-1.45l-0.01,-0.75l-0.58,-0.91l-1.38,-0.57l-0.71,-2.05l0.68,-1.61l-0.03,-1.12l-1.11,-1.96l-0.46,-1.86l-1.53,-1.28l0.26,-1.26l-0.49,-0.78l-1.2,-0.72l-0.6,0.13l-0.38,-1.08l-0.9,-0.38l-0.25,-0.73l-0.54,-0.17l-0.49,0.48l-0.94,0.09l-1.12,0.59l-0.71,-0.23l-1.51,0.48l-1.09,-1.52l-0.1,-0.87l-1.64,-1.44l1.15,-1.26l2.63,-1.49l0.49,-1.08l-0.72,-0.62l-0.24,-1.46l-1.06,-1.43l-0.07,-0.76l-1.93,-0.93l-0.37,-0.42l-0.05,-0.89l-0.52,-0.32l0.77,-0.21l0.47,-0.91l-0.59,-1.31l0.49,-2.4l-0.24,-0.32l-0.67,-0.0l0.95,-0.84l0.66,-1.94l1.02,-0.68l0.4,-0.81l1.22,-0.43l0.1,-3.11l-0.51,-0.63l-2.46,-0.1l-0.86,-0.74l-2.82,-0.71l-1.0,-3.58l2.35,-3.87l2.41,-1.36l-1.16,-2.13l-0.08,-1.01l-3.77,0.19l-1.89,-3.94l-1.8,-0.37l-0.37,-1.65l-0.36,-0.4l-2.51,-0.72l-3.45,-0.06l-2.53,0.67l-4.01,-0.13l-0.52,-0.48l0.42,-2.12l0.82,-1.93l-2.63,-5.09l1.53,-1.26l5.62,-3.24l0.23,-0.69l-0.28,-0.48l1.73,-1.12l-0.05,-0.95l-0.67,-0.7l-0.91,0.1l-1.13,-0.52l-0.54,-0.8l-0.7,0.13l-1.34,-1.1l-1.47,-0.19l-0.79,-1.16l0.17,-0.71l-0.59,-1.95l2.22,-2.99l0.16,-1.01l1.01,-1.09l1.13,-2.49l0.98,-0.62l0.05,-0.97l0.43,-0.72l-0.04,-0.63l-0.54,-0.59l0.99,-2.1l-0.04,-0.65l-0.45,-0.29l-0.99,0.04l-0.45,-1.49l-0.88,-0.38l1.04,-1.42l0.24,-1.34l0.72,-1.35l2.37,-1.72l-0.1,-0.88l0.48,-1.81l-1.0,-2.32l0.39,-1.4l-0.54,-0.85l0.24,-1.36l-0.43,-0.63l-1.5,-0.6l-1.99,0.92l-0.17,-0.52l-0.8,-0.16l0.18,-0.87l-0.59,-0.59l-3.02,0.41l0.6,-0.8l-0.41,-1.2l0.43,-1.01l0.62,-0.32l0.39,-1.13l-0.47,-2.9l-0.45,-0.74l-0.66,-0.32l0.04,-1.4l-0.77,-0.22l-0.78,-1.19l-2.52,-0.17l0.01,-1.08l-1.17,-1.91l0.34,-0.65l0.82,-0.56l0.07,-0.59l-1.44,-2.6l-0.74,-0.47l-0.16,-0.65l-0.0,-1.34l1.01,-0.68l0.03,-0.82l-1.32,-2.73l-4.54,-4.44l0.95,-1.03l-0.46,-1.41l0.46,-0.54l0.24,-1.1l-0.41,-0.68l-0.56,0.01l-0.55,-0.52l-0.08,-1.64l-1.08,-0.92l-0.76,-1.45l1.03,-0.22l1.81,0.18l0.43,-0.25l0.16,-2.97l0.71,-0.14l0.07,-0.92l0.88,-1.07l-0.13,-2.88l-0.83,-1.17l1.82,-0.44l0.9,-0.93l-1.24,-1.21l-0.2,-0.86l-1.13,-0.31l-0.31,-2.32l-0.81,-0.73l0.48,-0.18l0.34,-0.62l-0.28,-1.15l-0.49,-0.31l-0.87,0.21l-1.87,-0.44l-0.32,-0.49l0.74,-0.89l0.12,-0.75l-0.82,-1.28l-0.7,-0.41l-0.48,0.08l-0.33,0.56l-0.18,1.99l-0.29,0.15l-0.77,-0.41l-1.76,1.05l-1.13,-1.33l-2.78,-0.78l-1.42,0.18l-1.18,-1.54l-1.12,-3.02l-2.01,-0.48l0.26,-0.6l-0.93,-1.77l1.15,-1.4l0.1,-1.14l0.78,-0.03l-0.01,-0.91l0.77,-0.07l0.79,-1.82l1.23,-0.76l2.28,-2.69l0.82,-0.01l0.77,1.02l0.72,-0.17l0.29,-0.96l-0.7,-0.42l-0.17,-0.46l0.67,-2.53l-0.86,-1.07l0.49,-1.2l-0.64,-1.02l-0.24,-3.4l-0.89,-0.64l-2.25,-0.66l-2.03,-2.31l-1.75,-0.71l-0.3,-1.25l1.06,-1.04l0.13,-1.66l2.39,-0.0l1.39,-1.19l0.16,-2.1l-0.38,-0.84l0.85,-0.09l0.62,-0.57l0.03,-0.53l-0.71,-1.03l-1.72,-0.89l-0.18,-0.48l-0.94,-0.65l-1.44,0.15l-1.57,-0.54l-1.68,-1.73l-0.55,-0.09l-0.28,-1.64l-0.84,-0.87ZM385.24,166.06l0.01,0.01l-0.01,-0.0l0.0,-0.0ZM349.66,189.57l-0.0,-0.03l-0.01,-0.04l0.03,0.05l-0.02,0.02ZM355.87,185.54l-0.47,-0.04l-0.14,-0.17l0.61,0.01l-0.01,0.2ZM479.89,147.88l-0.12,-0.44l0.19,-0.08l0.11,0.04l-0.18,0.47ZM492.37,161.46l-0.2,-0.62l-0.04,-0.66l0.29,0.76l-0.05,0.52ZM492.05,159.99l-0.13,-0.06l0.09,-0.05l0.04,0.11ZM491.23,159.35l-0.47,-0.19l-0.2,-0.28l0.75,-0.01l-0.08,0.48ZM485.62,150.4l0.71,0.36l1.09,-0.34l0.06,1.94l0.42,0.38l0.07,1.06l-0.93,-1.81l-1.06,-0.43l-0.36,-1.15ZM473.11,210.32l-0.52,-2.09l1.47,-1.01l0.37,-1.63l0.48,-0.75l1.25,-0.08l1.32,0.47l2.03,1.58l0.72,-0.17l0.5,-0.68l0.29,1.17l-1.94,1.53l-1.19,-0.24l-1.87,1.45l-2.42,0.01l-0.48,0.42ZM480.74,204.66l0.12,-0.23l0.21,-0.05l-0.11,0.05l-0.22,0.23ZM481.44,204.33l1.09,-0.15l0.01,0.03l-0.75,0.29l-0.35,-0.18ZM461.61,135.13l-0.27,-0.67l-0.52,-0.09l0.28,-0.72l1.27,0.52l-0.15,0.7l-0.6,0.26ZM458.39,113.17l1.79,0.36l0.6,-0.66l0.9,0.06l0.5,1.17l-0.68,1.27l-0.25,-0.9l-0.5,-0.11l-0.84,0.43l-3.64,-1.06l2.11,-0.57ZM456.98,131.43l0.29,-0.09l-0.26,0.84l-0.22,-0.1l0.18,-0.65ZM457.35,131.26l0.33,-0.47l0.33,0.05l-0.18,0.25l-0.48,0.17ZM454.05,111.59l0.11,-0.74l0.85,0.19l0.64,-0.24l0.11,0.23l-1.18,0.91l-0.53,-0.35ZM456.03,110.13l0.17,-1.05l0.47,-0.12l0.5,0.8l-0.5,-0.08l-0.64,0.45ZM418.76,116.25l0.73,-0.7l0.6,-2.59l1.07,-2.12l1.57,-2.09l-0.16,-2.1l1.41,-4.25l-0.09,-2.28l0.64,-2.22l0.8,-0.96l0.58,0.54l1.2,0.27l0.06,0.31l0.63,0.2l0.81,-0.59l-0.28,-0.96l-1.46,-0.6l-0.21,-2.22l0.6,-2.33l0.53,-1.06l2.5,1.45l0.71,-0.4l-0.34,-0.62l-1.03,-0.49l-0.74,-0.92l-1.1,-0.52l0.18,-1.51l0.59,-0.23l0.22,-1.77l0.53,-0.87l1.01,-0.09l0.31,-0.4l0.03,-2.61l0.81,-0.48l0.74,3.01l1.53,0.54l0.58,-0.26l-0.48,-2.22l0.13,-2.24l0.4,-0.65l1.26,0.43l1.4,0.96l0.19,0.98l1.05,0.71l-0.22,0.41l-0.8,0.26l-0.66,1.52l-0.45,1.97l0.26,0.7l-0.61,1.54l0.09,1.23l-1.52,4.94l0.07,1.28l1.18,-0.57l0.88,-1.49l1.29,-4.46l1.15,0.01l0.7,-0.7l0.27,-0.78l0.74,-0.11l0.37,-0.59l0.93,-0.19l0.85,0.38l-0.15,1.43l0.48,1.81l1.77,0.73l0.26,0.41l0.29,2.26l-0.58,0.23l0.1,0.73l1.21,0.34l-0.2,1.84l0.62,0.06l0.73,-0.67l0.06,-1.48l1.06,0.22l0.52,0.79l0.79,5.27l0.42,0.64l-0.28,1.86l-2.79,4.12l-0.52,-0.45l-1.63,0.38l-3.42,2.21l-2.94,0.29l-0.83,-0.23l-0.91,1.08l-0.23,0.85l-0.14,-0.82l-0.69,-0.38l-1.94,0.15l-0.88,0.57l-0.59,-0.35l-1.83,0.54l-2.34,0.02l-1.07,1.64l-2.19,1.7l-0.53,0.77l-2.28,1.71l-0.67,0.18l-1.01,-0.31l-0.72,0.39l-0.31,-0.21l-0.03,-0.72l-0.64,-1.0ZM422.26,71.55l0.57,0.44l-0.62,0.6l-0.02,-0.73l0.07,-0.3ZM386.77,75.84l0.38,-0.21l1.69,-1.75l-0.23,0.99l-0.59,0.31l-0.68,1.28l-0.56,-0.63ZM387.37,77.09l0.1,0.16l-0.23,0.06l0.13,-0.22ZM386.96,77.59l-0.09,0.31l-0.31,0.27l-0.08,-0.46l0.48,-0.12ZM389.05,73.63l0.79,-1.15l0.32,-1.48l1.59,-1.82l2.65,-1.18l0.04,-0.94l-1.56,-1.15l-0.58,-1.08l0.71,-0.77l-0.13,-0.63l2.04,-1.39l0.99,-2.2l0.83,1.78l0.56,0.2l0.72,-0.46l0.14,-1.55l0.51,-0.69l2.6,0.01l0.42,0.63l0.37,-0.03l0.52,-0.49l0.55,0.25l0.74,-0.24l0.47,-0.69l0.71,0.33l2.27,-1.11l2.03,-0.56l1.13,1.28l0.46,1.35l0.72,0.61l-0.34,0.97l-0.9,0.69l-0.38,1.41l0.2,1.01l-1.17,2.07l0.24,0.39l-0.6,0.68l0.47,0.94l-2.09,1.72l-0.06,0.73l0.54,0.39l2.87,-2.16l0.1,-1.22l1.01,-1.57l-0.1,-1.08l0.45,-0.05l1.02,0.95l1.0,-0.35l0.59,-2.33l0.54,-0.86l-0.73,-1.15l0.28,-0.8l1.04,0.51l2.06,-0.33l-0.35,0.4l0.1,0.53l0.96,0.07l0.06,0.87l0.85,0.43l-0.03,0.83l1.12,0.52l1.39,2.75l0.26,1.27l-0.18,0.39l-1.08,0.5l0.3,1.6l-0.59,1.28l-0.34,2.45l0.4,1.27l-0.51,1.33l0.29,3.22l-0.35,1.27l-0.43,0.97l-0.41,0.13l-1.59,-1.27l-0.56,0.2l-0.35,0.74l0.23,0.6l2.68,2.96l-0.53,0.69l0.2,0.6l1.71,0.96l0.38,3.67l-2.45,3.1l-1.3,-0.12l-1.19,0.53l-1.58,-0.21l-0.63,0.53l0.06,0.36l-0.71,-0.04l-1.19,-0.93l-1.68,0.27l-1.39,-1.24l-1.33,0.04l-1.94,-2.35l0.01,-0.57l-0.69,-0.8l-1.94,-0.1l0.06,-0.32l-0.52,-0.45l-2.13,0.74l-1.09,-0.13l0.02,-1.76l-1.02,-1.28l-0.83,0.13l-1.68,1.76l-0.27,-0.68l-0.72,0.0l-0.89,-1.48l-0.07,-2.03l-1.49,-1.34l0.16,-5.26l-0.27,-1.27l-0.69,-0.49l-1.03,0.29l-0.17,-0.66l-0.83,-0.42l-0.22,-0.57l0.64,-1.5l-0.36,-0.57l-0.95,0.15ZM390.54,77.94l0.02,0.6l-0.95,-0.43l0.6,0.03l0.33,-0.19ZM377.57,52.24l0.14,-0.67l0.74,-0.25l0.4,-0.81l1.07,-0.32l0.72,0.33l0.4,-0.33l1.91,0.62l0.76,-0.49l-0.18,-0.65l-2.65,-0.82l-0.89,-0.95l1.71,-1.18l2.32,-0.11l0.52,-0.4l0.31,-4.34l2.15,-3.79l0.19,-1.07l-0.6,-0.34l-1.75,1.03l-0.55,-0.33l-0.5,0.07l-0.31,0.56l-0.34,0.03l-0.01,-0.28l1.22,-2.57l-0.16,-0.84l2.29,-1.53l0.12,-0.87l-0.47,-1.37l1.77,-1.31l1.18,0.22l0.25,-0.69l1.69,-0.46l1.66,-1.47l1.1,0.21l1.75,-1.37l1.56,-2.44l1.67,-0.1l0.34,-0.57l-0.45,-0.55l-2.12,-0.34l0.15,-0.32l3.08,-0.53l0.99,1.42l-0.14,1.25l0.99,0.29l0.13,0.82l0.46,0.35l0.14,0.81l1.27,1.94l-0.02,1.58l0.77,0.78l-0.22,0.72l0.65,1.28l0.77,0.59l0.44,1.03l2.18,1.66l0.44,0.69l0.59,-0.12l0.88,0.4l-0.17,0.59l0.67,0.99l-0.61,0.66l0.07,0.52l1.04,0.4l-0.1,0.44l-0.63,0.1l-0.38,0.67l-0.91,-0.04l-0.74,0.54l-0.47,-0.5l-0.86,0.16l-0.32,0.49l0.29,0.62l-0.72,1.81l-0.16,1.98l0.67,1.27l0.33,4.24l0.25,0.47l0.87,0.44l-1.11,2.41l-11.0,2.86l-1.2,-0.28l-0.62,0.85l-1.19,-0.15l-0.41,1.15l-1.37,1.47l-1.6,0.61l-0.55,0.63l-3.44,-2.78l-0.31,-0.59l-2.01,-1.19l0.99,0.4l0.48,-0.14l0.32,-0.74l-0.16,-0.48l-1.15,-0.75l-1.21,-0.18l-0.78,-0.59l-0.5,-1.16l2.38,-0.23l3.03,0.98l0.47,-0.18l0.2,-0.57l-0.54,-1.27l-0.56,-0.3l-7.79,0.74l-0.47,-0.72l-0.5,0.22ZM382.73,56.95l-0.46,0.12l-1.04,-0.36l0.18,-0.3l1.33,0.54ZM408.67,150.44l0.01,0.01l-0.01,-0.01l0.01,-0.01ZM405.22,164.02l0.09,-0.29l1.6,-0.93l-0.54,0.81l-1.15,0.4ZM405.82,157.55l0.27,-0.56l0.09,0.03l0.05,0.44l-0.41,0.09ZM397.78,159.31l0.14,-1.12l0.69,0.99l0.49,0.03l0.93,-1.25l0.51,0.4l0.57,-0.12l0.21,1.04l0.58,0.07l0.7,-1.59l0.28,0.13l-0.24,1.05l-0.58,0.5l0.76,0.87l-0.21,0.46l-0.53,-0.46l-1.43,0.02l-1.24,-0.98l-1.63,-0.06ZM397.68,141.29l1.34,-1.13l0.77,0.0l3.14,-2.01l0.68,-0.95l0.18,1.01l-0.64,1.46l-0.89,0.82l-0.02,0.88l-0.65,-0.31l-0.37,0.22l-0.53,-0.82l-3.01,0.82ZM400.98,149.93l0.15,-0.48l0.7,0.08l0.7,-0.77l0.37,-0.02l-0.36,1.22l-1.55,-0.02ZM398.59,149.07l0.02,0.05l-0.02,-0.03l0.0,-0.02ZM395.46,149.44l0.44,-0.13l0.12,0.02l-0.55,0.11ZM396.43,149.25l0.17,-0.18l0.31,0.31l-0.26,-0.11l-0.22,-0.02ZM396.42,160.23l-0.01,-0.01l0.02,-0.02l-0.0,0.03ZM393.31,159.36l0.01,-0.02l0.02,0.01l-0.04,0.01ZM390.71,62.63l0.12,-0.61l0.3,-0.04l-0.01,0.38l-0.41,0.27ZM389.29,112.52l0.5,0.64l-0.06,0.06l-0.77,-0.23l-0.05,-0.28l0.38,-0.19ZM375.97,60.79l1.92,0.57l1.12,-0.69l1.28,0.72l1.85,0.18l1.27,1.42l5.53,1.66l0.29,0.55l-0.3,1.08l-3.55,4.03l-2.07,1.15l-2.97,-0.14l-0.14,-0.45l0.72,-0.36l0.37,0.46l0.8,-0.13l0.27,-0.66l-0.19,-0.97l-1.44,-1.78l-5.15,-1.17l0.06,-0.42l0.98,-0.66l0.19,-0.48l-0.36,-1.01l-0.81,-0.44l0.59,-0.98l-0.26,-1.48ZM383.72,79.49l0.64,-0.45l0.47,0.25l-0.77,0.49l-0.34,-0.29ZM380.84,79.57l0.55,-0.93l0.37,0.09l-0.59,0.97l-0.32,-0.14ZM379.84,126.65l0.45,0.25l-0.17,0.22l-0.15,-0.13l-0.13,-0.34ZM369.59,25.65l-0.06,-1.15l0.72,-1.08l6.73,0.7l0.51,1.51l-1.02,0.95l-0.74,1.34l-5.87,-1.54l-0.26,-0.73ZM367.97,137.43l-1.06,0.45l-0.69,-0.11l-0.72,-1.36l0.67,-1.7l1.29,-0.03l0.77,2.01l-0.25,0.75ZM363.96,141.6l-0.27,0.01l-0.67,-1.82l0.47,-0.75l1.04,-0.31l-0.7,1.78l0.12,1.09ZM350.52,187.54l0.41,0.08l-0.38,0.1l-0.03,-0.18ZM351.33,187.67l0.54,-0.27l0.22,0.38l-0.45,0.09l-0.31,-0.21ZM351.98,186.67l-0.23,-0.41l0.65,0.13l-0.24,0.08l-0.19,0.2ZM352.49,186.37l1.32,-0.71l0.35,0.61l-0.4,0.75l-0.61,-0.58l-0.66,-0.07ZM351.59,211.88l0.21,-0.26l0.57,-0.15l0.04,0.33l-0.82,0.07ZM347.36,195.46l0.51,-1.52l0.47,-0.06l0.94,0.68l-0.88,-0.18l-0.35,0.5l0.14,0.48l-0.5,0.39l-0.34,-0.3ZM345.58,189.75l0.37,-0.39l0.45,0.12l0.04,0.55l-0.32,0.13l-0.53,-0.42ZM345.84,194.69l-0.26,0.66l-0.46,-0.01l-0.5,-0.64l0.03,-0.61l1.4,-0.1l0.26,0.55l-0.47,0.15ZM340.68,195.92l0.03,0.28l-0.14,-0.2l0.11,-0.08ZM338.17,204.51l0.02,-0.01l0.06,0.02l-0.07,-0.01ZM339.26,204.71l0.22,-0.05l0.2,0.41l-0.11,-0.04l-0.31,-0.32ZM332.43,202.75l1.41,-0.55l1.46,0.54l-0.75,0.62l-1.06,-0.64l-1.07,0.03ZM333.95,266.16l-0.07,-0.65l0.02,-0.29l0.19,0.38l-0.13,0.55ZM333.97,263.82l0.06,-0.85l0.14,-0.26l-0.1,0.21l-0.1,0.9ZM334.22,262.61l0.13,-0.29l0.15,-1.41l0.4,0.63l-0.69,1.08ZM330.6,164.65l0.31,-0.13l0.68,0.26l-0.27,0.1l-0.72,-0.23ZM332.33,164.93l1.65,0.35l0.01,0.02l-1.5,0.1l-0.16,-0.48ZM329.71,202.81l0.03,-0.51l0.66,-0.28l0.62,0.81l-0.18,0.27l-1.14,-0.29ZM325.41,177.58l0.46,-0.76l0.44,0.82l1.1,-0.27l0.38,-0.54l0.59,0.04l0.18,0.86l-1.0,0.12l-0.15,1.29l-0.34,-0.95l-1.05,0.06l-0.23,0.31l0.02,-0.55l-0.4,-0.42ZM327.71,175.61l-0.08,-0.69l0.35,-0.07l-0.09,0.75l-0.19,0.01ZM313.14,32.18l2.52,-0.8l3.31,1.18l-0.27,1.77l-0.15,0.26l-5.92,1.67l-0.37,-0.35l-0.09,-0.91l0.96,-2.82ZM313.73,193.65l0.17,-0.59l0.66,0.14l-0.37,0.93l-0.47,-0.48ZM310.16,225.65l2.63,-3.73l1.39,2.61l0.27,3.21l-0.55,0.32l-2.4,-0.64l-0.99,-0.86l-0.35,-0.91ZM297.14,74.16l1.29,-0.33l0.26,-0.63l5.46,3.0l0.02,0.44l-4.22,0.47l0.22,-0.85l-0.45,-0.97l-0.46,-0.19l-0.37,0.25l-1.56,-0.75l-0.19,-0.43Z",
            "name": "Krasnoyarskiy kray"
        },
        "RU-UD": {
            "path": "M165.86,426.33l0.24,-1.35l0.82,-0.17l1.04,0.35l0.35,-0.24l0.07,-0.66l0.63,-0.21l0.7,-1.09l0.38,-1.28l-0.03,-0.76l-0.39,-0.38l0.22,-1.12l-0.47,-0.58l-0.1,-1.06l-0.5,-0.28l0.57,-0.99l0.0,-0.62l0.78,-0.92l0.84,-0.17l0.72,0.36l2.88,0.4l0.44,-0.34l0.13,-0.86l0.49,-0.01l0.25,0.63l1.0,0.78l1.12,-0.57l1.03,0.1l0.47,0.77l-0.27,1.16l1.43,2.3l0.2,1.47l0.08,0.92l-0.84,1.57l1.17,1.35l-0.49,1.12l0.49,0.46l0.56,0.05l0.03,0.52l-0.26,0.98l0.26,0.56l-0.68,0.19l-0.55,0.68l-0.0,1.62l-0.86,-0.56l-0.56,0.47l0.13,1.67l0.4,0.46l0.63,-0.07l0.81,0.88l0.29,0.78l0.46,0.15l0.11,1.09l-1.21,0.93l-0.48,1.09l-0.78,-0.11l-1.27,1.22l-1.22,0.4l1.47,-2.12l-0.04,-1.25l-0.94,-0.5l-1.04,0.2l-0.28,0.49l0.38,0.87l-0.11,-0.03l-0.97,-0.95l-0.06,-1.1l0.65,-1.57l-1.21,-0.43l-0.92,0.51l0.53,0.78l-0.86,0.17l-1.07,1.49l0.18,0.71l0.93,0.19l-0.34,0.37l0.03,0.65l-0.77,-0.42l-0.58,0.25l-1.04,-0.33l-0.38,0.44l0.08,1.15l-0.93,-0.61l-0.72,0.54l-0.5,-0.36l-1.23,0.21l0.34,-0.64l0.75,-0.38l0.17,-0.56l-0.26,-0.38l-0.81,0.02l-0.85,-2.55l-0.7,-0.33l0.17,-1.32l1.01,-0.34l0.84,-1.98l-0.22,-0.49l-0.9,-0.41l-1.07,-3.06Z",
            "name": "Udmurtskaya Respublika"
        },
        "RU-IVA": {
            "path": "M104.25,430.68l0.11,-0.05l0.1,-0.06l-0.21,0.24l-0.0,-0.13ZM104.52,430.51l0.73,-1.11l-0.18,-0.45l1.24,-0.59l0.33,-0.66l0.73,-0.37l0.9,0.01l0.34,-0.68l1.11,0.09l0.55,-0.43l2.51,-0.24l0.7,-0.82l1.97,-0.38l0.43,-0.91l-0.16,-1.81l1.02,0.54l0.7,0.92l1.04,0.38l1.03,-0.23l0.43,-0.46l1.25,-0.11l0.35,-0.53l-0.08,2.31l0.53,0.64l2.38,-0.34l0.41,-0.99l0.58,-0.5l0.84,0.71l0.27,0.87l-0.47,0.66l-0.67,0.2l-0.31,0.86l0.08,1.01l0.66,0.23l-0.03,0.49l-1.2,1.16l-0.91,-0.12l-1.9,0.65l-0.44,1.74l0.6,0.64l-0.34,0.78l-0.86,0.01l-0.27,0.55l-1.51,-0.5l-1.24,0.8l-0.11,-1.1l-0.39,-0.38l-1.78,0.47l-2.58,0.11l-1.18,-0.94l-0.78,-0.22l-1.37,0.08l-0.32,0.56l-1.23,0.83l-0.79,-0.27l-0.48,-0.93l0.18,-0.98l-0.44,-1.02l-1.0,-0.42l-0.9,0.15Z",
            "name": "Ivanovskaya oblast"
        },
        "RU-LIP": {
            "path": "M95.81,469.14l0.05,-0.86l0.45,-0.63l-0.32,-0.67l0.31,-1.43l0.68,0.04l1.33,0.86l1.77,-1.0l0.23,-0.85l-0.51,-1.44l1.09,-0.54l-0.13,-1.27l1.05,-0.1l0.55,1.24l0.42,0.24l1.75,-0.44l0.37,-0.37l0.04,-0.62l0.64,-0.3l0.62,0.48l0.14,0.86l1.07,0.43l-0.24,4.24l-0.73,0.88l0.04,1.01l2.16,2.37l1.73,1.01l-1.01,2.03l-1.77,-0.27l-0.45,0.29l-0.65,-0.18l-0.71,0.46l-0.88,-0.26l-0.17,-0.69l-0.53,-0.41l-1.54,-0.11l-0.71,0.78l-0.62,-0.73l-1.13,-0.09l-3.9,1.86l-0.48,-0.36l-0.03,-1.47l1.08,-0.6l0.29,-1.25l-1.34,-2.12Z",
            "name": "Lipetskaya oblast"
        },
        "RU-AST": {
            "path": "M133.72,504.63l0.83,-0.85l0.8,0.16l0.34,-0.52l-0.15,-0.42l1.19,-0.31l0.79,-0.57l1.25,-1.57l1.14,0.19l0.79,0.59l0.67,0.54l-0.61,2.13l3.15,1.18l0.25,1.41l-0.46,0.69l0.51,0.74l0.09,0.92l1.53,0.95l0.36,-0.29l0.1,-0.76l0.97,0.42l1.98,-0.03l1.69,2.36l0.62,0.36l0.87,2.29l1.47,2.31l-0.64,0.26l-0.48,-0.53l-0.83,-0.04l-0.78,0.93l0.61,1.31l0.84,0.13l1.99,1.25l-0.16,0.73l-0.67,0.4l-1.27,0.15l-0.5,0.51l0.4,0.56l-1.18,0.42l-1.38,1.38l-1.89,0.38l-0.92,-0.62l-0.64,0.28l-0.59,-0.15l-0.57,0.78l-1.46,0.43l1.36,-3.6l-0.44,-0.38l-1.19,0.18l-0.16,-1.06l-1.57,-0.25l0.6,-0.52l1.32,0.02l0.31,-0.36l-0.09,-0.96l1.09,-0.73l0.34,-0.82l-0.51,-0.93l-0.75,-0.2l-0.42,-0.86l-0.56,-0.18l-1.4,-2.8l1.38,-1.0l-0.02,-0.69l-0.95,-0.45l-1.78,1.51l-0.87,-0.46l-1.89,-2.52l-0.14,-1.56l-0.44,-0.17l-0.65,0.25l-1.9,-1.73l-0.69,-0.25Z",
            "name": "Astrakhanskaya oblast"
        },
        "RU-CE": {
            "path": "M133.03,540.15l1.03,-1.05l0.09,-0.71l1.55,0.17l0.35,-0.27l0.04,-0.62l2.19,0.36l0.17,0.73l0.46,0.23l0.96,-0.29l0.72,-0.93l0.12,0.68l0.66,0.2l-1.49,2.74l0.54,1.03l-0.15,1.26l0.54,1.15l-1.45,0.03l-0.54,0.66l0.16,0.63l-1.57,1.67l-1.21,-0.44l-0.93,0.13l-0.89,-1.12l0.27,-0.49l-0.06,-2.38l-0.55,-2.48l-1.02,-0.93Z",
            "name": "Chechenskaya Respublika"
        },
        "RU-KHA": {
            "path": "M582.43,457.41l0.24,-1.39l1.17,-1.29l0.67,-0.31l0.76,0.31l0.54,-0.47l0.66,-2.05l-0.1,-0.66l0.49,-0.48l2.18,-0.99l0.36,-0.52l0.93,-0.45l0.38,-1.32l1.7,-0.19l0.29,-0.51l-0.2,-0.66l1.07,-0.1l0.59,-1.28l1.35,-0.46l-0.12,-0.58l-1.5,-0.95l0.11,-0.63l-0.89,-1.24l-1.68,-0.25l-0.8,0.56l-0.73,-0.12l-0.66,0.37l-0.98,-0.33l-0.54,0.27l-0.49,-0.21l-1.74,0.24l-0.49,-0.33l-0.37,-1.69l0.52,-2.21l0.68,-0.75l-0.01,-1.43l0.33,-0.79l0.25,-0.23l0.16,0.56l0.65,0.12l0.36,-0.41l-0.03,-0.64l0.44,0.75l0.85,-0.08l0.18,-2.13l0.54,-0.63l-0.26,-1.39l-1.39,-1.62l-0.06,-0.69l-1.68,-1.04l0.21,-0.27l1.39,0.25l0.58,-0.49l0.09,-1.54l1.05,-1.31l0.89,-0.08l0.47,-0.9l-0.27,-0.92l-1.07,-1.26l0.02,-0.64l-0.84,-0.63l-0.04,-0.76l-0.56,-0.52l1.12,0.42l1.18,1.08l0.84,-0.52l0.08,-0.45l-0.59,-0.5l0.03,-0.51l0.87,-0.5l-0.11,-2.24l1.18,-0.02l0.08,-0.9l0.8,-0.89l0.09,-2.25l1.07,0.02l0.44,-1.19l-0.16,-0.52l0.9,-1.19l2.32,-1.15l0.47,0.55l2.25,-0.23l2.41,1.09l0.91,-0.46l0.78,0.65l0.65,-0.2l1.39,0.32l0.71,-0.94l0.71,-1.97l1.63,-1.36l1.42,1.08l3.77,0.74l1.1,-0.76l1.35,-0.28l0.77,-0.98l0.65,-0.13l0.04,-1.03l0.67,-0.83l1.61,-0.1l0.13,0.56l0.96,0.18l0.72,-0.42l0.25,-0.59l-0.49,-1.05l0.5,-1.18l-0.38,-2.99l0.6,-0.82l-0.25,-1.8l0.89,-2.17l-1.04,-1.52l-0.19,-1.19l0.7,-0.5l-0.07,-0.86l1.97,-1.29l-0.24,-1.03l1.39,-0.21l0.75,-1.24l0.74,0.12l1.78,-0.73l0.66,-1.85l1.48,-2.06l0.14,-1.4l0.7,-0.03l0.89,-1.06l0.34,-3.72l1.44,-0.32l0.28,-1.39l1.24,0.88l0.43,0.77l0.96,-0.23l0.51,1.28l0.58,0.46l0.16,0.94l1.72,1.76l1.05,0.11l0.58,-0.47l1.48,2.21l1.58,-1.0l1.12,0.67l0.52,-0.1l0.87,-1.9l0.89,0.61l0.91,-0.02l-0.19,0.67l0.67,1.04l0.63,-0.07l0.72,-0.87l-0.09,1.85l0.7,0.72l1.46,-0.13l0.93,-1.05l0.75,-0.32l0.35,-1.44l1.12,-0.86l1.56,1.15l0.7,-0.28l1.01,0.38l1.19,-0.87l0.48,0.28l0.38,-0.14l0.51,0.7l0.98,0.53l1.76,2.79l0.25,2.27l0.62,0.5l-0.31,0.72l0.36,1.03l-0.03,1.01l-0.41,0.52l0.23,0.94l-0.7,-0.06l-0.45,0.48l-0.3,2.7l-0.9,-0.78l-0.79,-0.04l-1.19,1.4l-0.5,0.02l-0.85,0.72l-0.6,0.96l0.06,0.73l0.35,0.44l0.07,0.92l1.1,1.22l0.46,0.13l2.61,-0.68l0.53,1.34l0.95,0.12l-0.19,1.03l0.8,1.14l0.45,0.16l0.82,-0.43l0.44,0.49l0.12,1.07l-0.3,0.8l0.31,0.43l-0.28,2.01l-0.96,0.39l-1.05,-0.81l-1.27,-0.08l-0.79,0.93l0.13,1.72l-0.51,-0.05l-0.65,0.42l-0.74,-0.65l0.61,-0.89l0.01,-0.89l-0.51,-0.18l-0.8,0.24l-0.4,-0.45l-3.71,0.66l-5.93,-0.48l-2.0,1.0l-1.51,-0.66l-5.1,2.72l-1.42,1.42l-2.22,3.78l-1.71,1.38l-1.35,0.57l-1.4,1.56l-1.35,4.25l-2.28,1.21l-1.26,2.12l-0.98,0.35l-0.9,1.41l-1.71,0.8l-0.92,0.94l-0.25,1.05l-0.45,-0.02l-1.03,0.77l-1.2,2.18l-1.31,1.26l-0.08,1.38l-1.17,0.99l-1.03,2.0l-0.72,0.21l-0.89,1.27l-2.48,1.87l-0.72,0.99l-1.82,0.95l-1.21,2.09l-1.66,1.46l-2.18,1.15l-1.64,2.06l0.36,1.69l2.26,0.48l0.58,0.87l5.55,-0.47l-0.58,1.44l0.37,2.43l-0.76,1.77l0.09,1.35l0.76,0.66l1.09,-0.71l1.08,0.36l0.97,-2.04l1.49,0.76l-0.78,1.5l-1.11,0.48l-0.68,0.69l0.08,0.57l0.75,0.52l3.33,-0.48l1.85,-1.25l-0.78,1.67l0.43,0.43l1.35,-0.25l0.72,-0.79l0.81,-2.15l0.41,-1.86l-0.03,-0.82l-0.3,-0.15l0.18,-1.02l2.58,0.83l2.14,-0.89l1.19,1.36l1.11,0.54l0.37,0.76l-0.15,0.94l1.38,1.25l0.35,0.82l1.79,1.07l0.16,0.81l2.17,1.15l0.18,0.84l-1.22,1.03l-1.24,-0.97l-0.77,-0.08l-0.41,0.28l0.11,0.62l1.05,0.68l0.27,0.78l1.15,0.77l0.45,1.38l-0.97,1.88l0.34,0.88l1.38,1.31l-0.75,1.28l0.46,0.73l-0.88,0.76l-0.5,1.18l-1.1,0.64l-0.07,0.96l-0.54,0.47l0.15,0.71l-0.72,0.45l-0.17,1.07l0.23,1.3l-0.89,1.4l-0.38,1.4l0.18,0.65l-0.31,0.88l0.51,1.53l-0.08,1.66l0.4,0.74l-0.59,0.51l-0.37,1.06l0.62,0.94l0.13,1.36l-0.62,1.88l-0.54,0.54l0.14,1.17l-0.54,0.6l-0.03,0.7l0.44,0.38l-0.71,1.37l-0.11,2.13l-4.08,4.33l-1.86,3.61l-0.6,-0.35l-0.87,0.17l0.12,-0.85l-0.41,-0.56l1.06,-0.35l0.28,-0.4l-0.04,-0.91l-1.12,-1.17l0.54,-0.5l-0.03,-0.92l-0.81,-0.12l-0.47,-1.71l-1.31,-0.34l-0.79,0.56l-0.11,0.47l-0.74,0.13l-0.62,0.62l-2.29,0.14l-0.89,1.12l0.1,0.64l1.22,0.92l-0.66,0.61l0.12,0.66l1.01,0.11l1.04,0.64l0.69,-0.17l-0.04,0.75l0.46,0.28l-3.02,2.22l-0.77,-0.65l-1.34,-0.01l-0.7,1.2l-0.02,1.23l-1.55,1.38l-0.7,-0.17l-0.9,0.35l-1.2,-0.65l-0.52,0.43l-0.36,-0.11l-0.46,-0.98l-1.54,-0.12l-0.87,-1.46l-1.38,-0.4l-0.56,0.4l-1.79,0.37l-1.34,1.44l-0.01,1.79l-1.4,0.15l0.21,-1.97l0.83,-1.08l-0.27,-1.5l0.54,-0.61l1.08,-0.23l1.46,-2.16l-0.05,-0.73l-0.99,-1.84l0.6,-0.81l0.18,-1.37l-0.82,-0.5l0.81,0.21l1.03,-0.7l0.4,-0.72l-0.04,-1.02l-0.92,-0.36l-0.67,0.41l-1.99,-1.32l-1.16,0.71l-1.04,0.08l-0.86,-0.94l-2.15,-0.42l-0.71,-2.7l-1.9,-0.76l-0.2,-0.59l-1.95,0.28l-0.09,-0.78l-1.39,-0.8l-0.95,0.26l-0.55,1.31l-0.63,-0.33l-1.46,0.7l0.38,-1.1l0.0,-1.57l-0.43,-0.55l0.34,-0.39l0.08,-1.43l-0.23,-0.61l-0.74,-0.39l0.72,-0.69l0.05,-0.44l-0.97,-1.9l-0.68,0.0l-0.43,-0.65l-0.87,0.16l0.6,-0.92l-0.51,-1.05l-1.18,-0.3l0.79,-1.14l-0.27,-0.82l0.7,-0.32l0.66,-1.69l0.62,-0.09l0.57,-0.92l0.56,0.31l0.56,-0.31l-0.34,-2.55l1.31,-0.03l2.42,-1.09l0.56,0.1l0.9,-0.71l0.02,-0.6l0.47,-0.19l0.24,-0.91l1.24,-0.72l1.81,-0.02l1.47,-0.91l0.07,-0.72l-0.58,-0.5l-0.27,-0.77l0.03,-1.53l2.63,1.38l0.69,-0.08l2.99,0.97l0.79,-0.22l0.09,-1.23l0.76,-0.93l-0.81,-1.52l0.33,-0.41l-0.17,-0.45l1.03,-1.12l-0.02,-0.95l0.49,-0.52l-0.34,-1.07l0.19,-0.84l-2.18,-2.02l-2.98,1.62l-2.29,-0.98l-1.97,1.01l-0.58,1.13l-0.95,0.18l-0.31,0.4l-1.1,-0.17l-2.86,0.3l-0.86,0.69l-0.31,-0.78l-1.46,0.16l-0.1,-2.79l-0.51,-1.82l-1.86,-0.66l-1.07,0.22l-0.28,-0.41l-1.77,-0.57ZM617.55,456.07l-0.25,-0.42l0.97,-0.9l0.55,-0.32l0.52,0.17l-0.45,0.6l-0.98,0.19l-0.35,0.67ZM623.63,459.13l0.25,-1.11l0.4,-0.32l0.05,0.58l-0.7,0.85ZM618.26,448.87l0.95,-1.11l0.41,-1.32l0.42,0.41l1.1,0.1l-0.45,0.71l0.12,0.45l0.98,-0.31l-0.45,0.57l-0.04,1.02l-1.17,1.2l-0.8,-1.87l-0.51,-0.17l-0.55,0.3ZM615.98,447.81l0.54,-0.44l0.18,-0.05l-0.29,0.83l-0.43,-0.35Z",
            "name": "Khabarovskiy kray"
        },
        "RU-ORE": {
            "path": "M164.28,476.22l3.05,-2.52l0.28,-1.28l-0.2,-0.85l0.77,-1.01l-0.39,-0.76l0.3,-0.32l-0.11,-0.48l0.98,-0.14l0.18,-1.69l1.52,-1.16l0.14,-0.69l0.47,-0.34l0.02,-1.79l0.65,-0.36l0.1,-0.6l-0.34,-0.34l-0.47,0.05l-0.31,-0.67l0.41,-0.21l0.46,-0.97l0.83,-2.41l-0.1,-0.61l0.51,-0.74l-0.73,-0.98l-0.22,-1.0l1.9,-0.22l0.68,0.64l0.78,1.76l0.98,0.04l0.62,0.89l0.71,-0.28l0.73,2.18l1.13,0.76l1.28,2.21l0.76,0.43l0.62,-0.21l0.85,0.33l0.07,0.66l0.71,0.46l0.88,-0.19l0.35,0.21l1.17,3.32l0.38,0.27l0.67,-0.17l-0.43,0.47l-0.1,1.05l0.39,0.32l0.61,-0.04l0.27,0.36l0.27,1.64l1.75,0.47l0.59,-0.39l0.32,-1.05l0.72,-0.77l0.84,0.43l0.48,1.52l-1.22,0.91l-0.13,0.56l0.65,0.75l0.86,-0.35l0.63,0.12l-0.07,0.38l0.43,0.35l-0.32,1.73l0.63,0.49l0.06,1.15l0.38,0.53l0.92,-0.09l0.28,-0.59l0.8,0.81l0.61,0.06l1.07,-0.66l0.22,-0.52l1.05,-0.48l0.19,-0.53l0.92,-0.04l0.26,0.4l0.65,0.04l0.5,0.42l2.09,-0.26l0.46,-0.42l0.63,-2.21l-0.4,-1.23l0.22,-0.37l0.95,-0.04l0.55,-0.71l0.65,0.6l0.42,-0.03l0.49,-1.76l0.92,0.47l0.57,-0.18l0.45,0.25l0.71,-0.55l0.45,0.5l0.91,-0.01l-0.02,0.81l-0.92,0.79l-0.33,0.86l0.78,2.25l2.02,0.58l-0.48,0.82l1.07,0.83l1.97,0.08l0.73,1.06l2.24,0.46l0.44,1.03l-0.93,3.66l-3.22,1.02l-2.07,-0.25l-0.84,-1.31l-0.89,-0.08l-0.52,0.38l-0.28,1.36l-0.64,0.94l-0.43,0.01l-0.84,-0.8l-2.91,-0.49l-1.52,-1.5l0.22,-0.63l-0.29,-0.77l-1.87,-0.94l-0.66,0.55l-2.04,-0.35l-0.5,0.73l0.01,1.05l-0.76,-0.06l-0.38,0.43l-1.29,-1.93l-1.81,0.33l-0.69,-0.21l-0.6,0.56l-0.39,-0.45l-0.55,0.01l-0.83,1.47l-0.62,-0.18l-0.33,0.23l-0.37,1.43l-1.86,1.38l-0.8,-0.87l-0.84,-0.06l-1.09,-1.03l-0.14,-0.64l-2.15,-1.38l-1.11,0.21l-0.23,1.12l-0.65,-0.25l-0.55,-0.56l-0.35,-1.06l-1.05,-0.81l-1.25,-0.25l-0.27,-1.34l-1.44,-1.02l-1.28,-0.16l-1.11,0.43l-0.94,-0.37l-1.03,0.35l-1.12,-2.56l-1.25,0.48l-0.32,0.48l-1.23,-0.05l-0.57,0.69l-0.05,0.95l-0.61,-0.6l-0.63,0.45l-0.43,0.12l0.4,-0.6l-0.26,-0.72l-0.71,-0.46l-1.69,-0.0l-0.31,-0.44ZM183.51,483.93l0.07,0.04l-0.04,0.1l-0.01,-0.07l-0.02,-0.07ZM183.49,484.4l0.24,1.56l-0.5,0.34l-0.24,-0.37l0.51,-1.53Z",
            "name": "Orenburgskaya oblast"
        },
        "RU-KIR": {
            "path": "M140.79,396.5l1.72,0.06l0.36,-0.26l0.7,-2.67l0.9,-0.76l-0.34,-1.14l0.52,-1.46l0.09,-1.44l0.54,-0.82l1.56,-0.04l1.03,0.35l0.64,0.27l0.35,1.1l2.1,0.44l0.66,4.56l0.96,0.38l-1.49,1.75l0.32,5.23l0.52,0.34l2.39,0.37l-0.16,1.51l2.59,1.19l-0.09,1.43l1.16,0.58l1.02,-0.45l0.25,-4.28l0.99,-0.29l-0.05,-0.76l0.84,0.11l0.88,-0.89l2.33,-0.31l1.34,-2.0l0.86,0.33l0.53,0.84l1.01,-0.03l1.58,-1.9l1.02,-1.88l2.03,1.18l4.75,0.36l0.54,-0.31l0.44,0.34l0.47,1.31l-0.41,2.47l-1.04,0.69l-0.37,1.92l-0.8,1.6l1.03,2.34l1.88,0.74l0.48,-0.24l-0.66,1.45l0.19,0.86l0.64,0.76l-0.55,0.46l-0.39,1.17l0.35,1.44l-1.17,-0.11l-0.65,0.49l-0.61,-0.44l-0.33,-0.9l-0.59,-0.1l-1.06,0.24l-0.28,1.03l-3.3,-0.75l-1.03,0.2l-1.37,1.4l-0.65,2.04l0.73,0.71l-0.06,0.72l0.45,0.54l-0.26,1.11l0.45,0.85l-0.32,1.15l-0.56,0.7l-0.49,0.07l-0.31,0.6l-2.02,0.28l-0.53,1.67l1.21,3.8l0.89,0.54l-0.54,0.68l-0.06,0.69l-1.02,0.3l-0.35,1.73l1.35,2.25l0.19,0.91l-0.38,0.31l-1.74,-1.07l0.14,-0.54l-0.56,-1.14l-0.51,-0.17l-0.44,0.35l-0.44,-0.33l-0.4,-1.02l0.08,-0.82l-1.03,-0.72l-1.03,0.22l0.16,-0.83l-0.29,-0.77l-1.63,-0.73l-0.25,-1.57l-1.26,-0.16l-1.1,0.34l-0.47,-0.92l0.29,-1.29l-0.7,-0.58l-1.04,0.62l-0.15,1.51l-0.27,-0.47l-0.56,-0.17l-1.2,0.03l-0.55,0.38l-0.84,-0.32l-0.72,0.57l-0.15,1.01l-1.12,-0.0l-0.42,-0.53l-0.49,-0.02l-1.43,1.72l-1.08,0.42l-0.16,-0.57l-0.56,-0.35l-1.48,-0.01l0.02,-1.8l0.48,-0.6l-0.79,-1.15l0.54,-1.29l0.91,0.17l1.19,-0.68l0.98,0.35l0.45,-0.33l0.49,-2.64l0.77,-0.47l0.31,-0.65l-0.6,-0.92l-1.77,-0.65l-4.92,-0.04l-0.29,-0.56l0.45,-0.85l-0.01,-0.82l0.91,-1.32l0.03,-1.08l1.94,-0.55l0.62,-1.4l0.68,0.04l0.46,-0.51l0.03,-1.01l1.15,0.1l0.46,-0.62l-0.28,-1.7l-0.57,-0.83l-1.09,-0.73l0.09,-1.16l-0.31,-0.43l-0.68,-0.16l0.36,-3.31l-0.28,-0.58l-0.83,-0.38l0.58,-3.2l-1.03,-0.4l-0.63,0.54l-0.95,0.01l-0.86,-0.42l-0.15,-0.79Z",
            "name": "Kirovskaya oblast"
        },
        "RU-BA": {
            "path": "M176.64,446.75l0.61,-0.1l0.35,-0.45l1.05,0.02l0.72,-1.17l0.96,-0.49l0.63,-1.59l0.94,-0.79l0.2,-1.01l-1.31,-1.51l-1.29,-0.44l0.44,-0.56l1.0,-0.12l0.56,-1.19l1.27,-1.0l0.9,-2.23l1.51,1.07l0.36,0.73l2.58,-0.13l1.67,-0.95l0.6,0.04l0.94,1.33l1.27,-0.1l0.72,-0.66l0.45,0.86l1.98,1.7l1.73,-0.66l0.6,-1.06l0.32,1.28l0.75,0.45l1.44,-0.47l0.51,0.33l1.03,-0.15l1.32,0.69l0.92,-0.96l0.92,0.86l0.68,0.15l0.84,-0.2l0.47,-0.71l0.71,0.2l-0.64,0.81l0.26,0.84l-0.33,1.22l0.73,0.38l-0.3,1.57l0.52,0.41l0.81,-0.4l0.47,0.33l-1.88,0.51l-0.57,1.42l-0.94,-0.35l-1.01,0.71l-0.91,1.37l1.21,0.87l-0.6,0.4l-0.85,-0.95l-0.17,-0.76l-0.61,-0.28l-0.47,0.19l-0.88,-1.11l-2.73,-0.56l-0.68,0.09l-1.04,0.72l-0.34,0.61l0.13,0.48l-0.54,0.71l0.51,1.34l-0.41,0.71l0.13,0.71l2.97,2.16l0.09,0.77l1.33,1.09l2.2,-1.36l1.39,0.67l1.18,-0.94l1.23,-0.47l0.95,0.09l2.19,-2.49l1.08,0.55l-0.47,1.42l-0.72,0.49l-0.3,0.66l0.33,0.6l-0.39,0.82l0.68,0.8l-0.35,0.45l-0.66,-0.31l-1.42,0.27l-0.85,1.72l-1.04,0.13l-0.27,0.55l-0.11,2.47l-0.44,0.68l0.29,0.6l-0.27,2.78l0.4,0.47l0.03,0.88l-0.79,1.52l0.16,1.28l-0.32,0.68l0.43,0.76l-0.2,0.42l0.25,1.34l0.34,0.41l-0.92,0.16l-0.52,0.87l0.38,1.09l-0.51,2.11l-1.53,0.24l-1.31,-0.79l-1.66,-0.29l-0.55,1.02l-0.89,0.26l-0.26,0.71l-0.69,0.38l-0.89,-1.19l-1.75,-0.62l0.64,-0.49l-0.42,-0.58l0.05,-0.92l-1.31,-1.34l-0.59,0.07l0.77,-0.68l-0.05,-1.06l-0.44,-0.62l0.39,-0.74l-0.25,-0.42l-0.97,0.3l-0.66,-0.71l-0.62,-0.03l-0.21,0.72l-0.69,0.63l-0.22,1.0l-1.16,-0.06l0.16,-1.44l-0.78,-0.79l-0.0,-1.46l-0.61,-0.44l-0.81,0.13l-1.21,-3.2l-0.75,-0.57l-0.83,0.29l-0.68,-1.03l-2.06,-0.44l-1.16,-2.08l-1.09,-0.72l-1.04,-2.75l-0.14,-1.78l-0.42,-0.96l0.36,-1.41l0.96,-1.46l0.18,-1.66l-2.43,-2.17ZM179.37,439.25l-0.15,0.06l-0.07,-0.04l0.22,-0.03Z",
            "name": "Bashkortostan, Respublika"
        },
        "RU-NGR": {
            "path": "M53.33,417.96l-0.18,-0.94l2.29,-2.3l0.4,-0.77l-0.41,-1.03l0.1,-0.86l1.12,0.51l1.92,-0.53l0.2,-0.92l1.21,-1.47l0.13,-0.82l0.74,0.83l0.87,-0.02l1.39,-2.46l-0.05,-1.19l1.12,0.42l0.56,-0.7l0.75,0.01l0.34,0.32l0.59,1.47l1.59,0.25l0.62,0.56l0.74,-0.87l-0.05,-0.87l0.99,-1.06l1.54,0.82l1.05,-0.56l2.5,2.28l0.78,0.07l0.83,-0.42l1.28,0.74l0.74,0.02l0.68,1.21l1.43,0.78l-0.06,0.66l0.98,0.86l0.34,0.03l0.65,-0.81l1.39,0.28l0.35,0.64l0.81,0.0l0.76,0.47l0.32,0.9l-1.3,1.19l-1.54,-0.28l-1.26,0.28l-0.8,0.7l0.07,1.0l-0.76,0.4l-1.72,-0.24l-0.55,0.53l0.01,0.78l-3.17,-1.16l-0.88,0.75l-1.16,-0.0l-0.85,1.43l0.78,0.57l0.05,0.62l-0.61,0.48l-0.18,1.28l-1.16,0.74l-0.45,1.64l-2.12,0.07l-0.75,0.69l-0.22,0.67l-1.07,0.61l-0.78,-0.22l-0.13,0.83l-1.53,0.81l-1.19,0.02l-0.93,1.53l-0.97,-0.25l-0.98,0.28l-2.18,-0.18l0.08,-1.65l0.59,-0.8l-0.24,-0.43l-1.35,-0.61l0.09,-1.1l0.61,-1.28l-0.62,-0.84l0.27,-2.03l-0.37,-0.33l-2.64,-0.55l0.1,-0.82l-1.52,-0.67Z",
            "name": "Novgorodskaya oblast"
        },
        "RU-KLU": {
            "path": "M73.56,455.97l0.73,-1.88l-0.29,-0.59l0.35,-1.23l1.73,0.1l1.01,1.01l0.75,0.0l0.74,-2.16l0.62,0.05l1.42,-0.98l0.21,-0.43l-0.34,-0.6l0.52,-0.0l0.83,-0.79l1.17,-2.33l0.46,0.05l1.14,-0.61l2.27,0.97l1.08,-0.42l0.43,-0.78l1.36,0.46l0.27,0.65l0.73,-0.05l0.61,0.78l0.8,2.28l-0.51,1.88l-1.21,-0.41l-0.52,0.36l0.25,1.51l0.54,0.49l-0.08,0.59l-0.9,-0.24l-1.26,0.25l-0.5,0.59l-0.71,-0.1l-0.35,0.45l-0.98,0.08l-0.14,0.44l0.62,1.01l-1.21,1.83l0.43,1.47l-0.95,1.01l-0.67,-0.12l-1.12,1.0l-0.4,0.99l-0.73,0.18l-0.49,-0.15l-0.2,-0.66l-1.87,-0.03l-0.45,-0.3l-0.25,-1.86l-1.54,-2.08l-1.92,-0.2l-0.39,-0.71l-1.13,-0.51l0.04,-0.24Z",
            "name": "Kaluzhskaya oblast"
        },
        "RU-OMS": {
            "path": "M267.27,425.29l1.37,-1.43l-0.09,-0.68l-0.51,-0.28l-0.07,-0.81l-0.67,-0.82l-0.2,-1.06l2.34,-5.91l1.47,1.14l-0.29,2.37l0.17,0.86l0.37,0.25l3.77,-0.46l0.8,0.92l3.88,0.19l1.29,-1.35l6.05,0.02l2.19,-1.65l2.26,-2.58l0.64,0.58l-1.18,1.08l0.71,1.42l-0.64,0.78l0.03,0.47l2.45,1.8l0.17,2.71l0.73,0.57l0.67,1.89l0.75,0.24l0.54,1.18l0.9,4.83l-1.17,0.93l-1.1,1.76l0.46,0.51l0.77,-0.14l0.22,1.11l0.87,0.77l-2.62,0.41l-2.46,2.45l-0.16,0.55l0.27,0.55l-0.83,-0.15l-0.51,0.41l0.54,1.05l-0.27,0.67l0.83,0.56l-1.06,1.3l0.9,1.31l-0.06,1.04l0.72,0.89l-0.28,1.13l0.8,0.38l0.33,0.7l0.63,0.18l0.18,0.84l0.63,0.61l-0.76,0.69l0.03,3.52l-0.82,-0.03l-0.75,0.45l0.1,0.87l-1.71,1.28l-1.37,-0.16l-0.97,1.3l-0.9,0.13l-0.2,1.64l-0.53,-0.96l-1.59,-0.42l-1.73,0.29l-0.88,1.2l-0.67,-0.69l-0.08,-0.42l0.89,-1.68l0.89,0.14l0.55,-0.42l0.32,-1.7l-0.66,-0.61l-0.69,0.09l-0.57,0.84l-0.68,0.22l-1.09,-0.25l-0.65,-1.25l-2.41,-0.06l-0.69,-0.35l-0.03,-0.62l-0.8,-1.04l-0.98,-0.32l-0.56,0.49l0.26,0.83l-1.51,-0.07l-0.38,1.14l-1.6,-0.79l-0.78,0.72l-0.29,-0.39l-0.01,-0.53l0.73,-0.43l-0.26,-2.23l0.54,-0.39l0.09,-0.64l-0.44,-0.73l-0.93,-0.36l-0.28,-0.9l0.14,-1.82l-0.98,-1.47l-0.04,-0.74l-0.76,-0.22l-0.73,0.3l-0.15,-0.77l0.26,-0.42l0.82,-0.28l0.36,-0.91l-0.25,-0.67l-0.8,-0.52l0.23,-0.53l0.85,-0.45l-0.05,-0.57l0.61,-0.91l0.28,-1.55l-0.49,-0.51l0.17,-0.51l-0.26,-0.47l0.7,-0.49l-0.27,-1.03l0.82,-0.62l0.36,-1.1l0.97,0.05l1.26,-0.68l0.73,-1.58l-0.38,-1.11l-1.28,-1.05l-1.13,-1.51l-0.43,-1.26l-0.68,-0.16l-1.2,0.33l-0.47,0.61l-0.68,-0.29l-0.25,-0.61ZM277.68,456.79l0.04,0.02l-0.04,0.04l0.0,-0.02l-0.01,-0.04Z",
            "name": "Omskaya oblast"
        },
        "RU-SAR": {
            "path": "M120.51,477.13l0.85,-1.05l0.24,-1.36l0.59,-0.58l-0.28,-1.19l0.92,-1.36l1.11,-0.77l0.63,0.54l2.2,-0.32l1.35,0.66l1.66,0.32l0.78,-0.93l0.61,-0.11l0.11,-0.47l1.03,0.33l0.21,0.51l1.04,0.65l0.55,-0.28l0.11,-0.47l1.59,0.01l0.9,-0.82l1.65,0.81l0.52,-0.4l0.13,-0.63l1.42,-1.27l1.0,-0.19l0.76,0.59l1.24,-0.04l0.73,0.56l1.96,0.0l0.75,-0.4l0.78,0.29l0.69,-0.96l1.08,0.06l0.49,-0.5l-0.05,-0.44l0.63,-0.13l0.34,0.03l-0.22,1.02l1.85,0.39l0.17,0.54l0.53,0.21l0.22,0.93l0.65,0.23l0.35,-0.57l1.28,-0.09l0.14,0.87l1.01,0.58l0.48,-0.09l0.19,0.53l1.1,0.74l1.55,0.34l0.06,0.99l2.67,0.66l0.37,2.14l-0.57,-0.18l-0.42,0.35l-0.27,1.24l-0.8,0.42l-0.18,0.89l-1.65,0.56l-1.07,1.03l-1.95,0.06l-0.55,1.39l0.29,0.9l-1.24,0.42l-1.55,1.46l-0.95,-0.45l-0.49,0.14l-0.14,0.57l0.54,0.42l0.56,3.69l0.53,0.64l-0.39,0.48l-1.69,0.82l-0.63,-0.36l-1.3,-2.48l-2.1,-2.25l-0.65,-0.03l-1.09,0.61l-0.43,-1.08l-1.32,0.17l-0.54,-1.22l-1.37,-0.54l-0.53,0.13l-0.64,1.01l-1.31,0.25l-0.23,-1.14l-1.47,-0.9l-1.01,0.45l-0.14,1.09l-0.75,-0.22l-0.74,0.22l0.38,-1.93l-0.72,-1.76l-0.99,-0.78l-2.52,-0.31l-0.58,-0.4l-1.23,0.15l-0.77,0.68l-0.61,-0.53l-3.19,1.31l-2.0,-1.52l-0.31,-1.38l-1.78,-1.68l-0.13,-0.52Z",
            "name": "Saratovskaya oblast"
        },
        "RU-ORL": {
            "path": "M80.35,470.82l0.74,-0.64l0.53,-1.62l-0.38,-0.95l-0.94,-0.58l0.66,-0.59l0.94,-0.11l0.97,-1.15l-0.34,-0.62l-0.69,-0.28l-0.04,-0.55l0.96,-0.12l1.2,-1.91l1.16,-0.24l0.66,-0.83l0.75,0.58l0.62,-0.08l0.74,1.1l0.89,0.43l0.53,-0.11l0.83,0.91l2.28,0.44l0.84,-0.51l0.6,0.28l0.35,1.26l0.76,0.09l0.35,0.62l-0.24,1.39l0.39,0.53l-0.41,0.35l-0.33,1.33l0.42,0.97l1.18,1.18l-1.2,1.27l-0.31,1.46l-0.99,-0.3l-0.48,0.56l-1.18,-1.13l-1.52,-0.31l-1.47,-0.84l-1.21,-1.36l-2.43,0.78l-0.94,-0.01l-0.38,-1.01l-0.43,-0.31l-1.04,0.19l-0.24,0.33l-0.59,-0.1l-0.62,0.46l-0.92,-0.28Z",
            "name": "Orlovskaya oblast"
        },
        "RU-STA": {
            "path": "M111.91,525.75l0.04,-0.62l1.34,0.03l0.85,-0.73l-0.11,-1.21l0.75,-0.34l3.45,0.48l0.5,-0.38l0.14,-0.76l0.15,0.73l1.33,-0.04l2.06,-1.63l1.57,0.71l0.74,0.69l2.5,0.51l0.96,1.04l0.77,1.48l1.25,0.68l1.55,0.19l4.36,2.47l0.54,0.89l-0.46,0.63l0.03,0.85l-0.8,0.93l-1.11,0.58l-0.11,1.21l1.02,0.27l-0.09,0.25l-1.16,0.27l-0.49,0.66l0.35,0.6l1.77,0.08l-0.32,1.5l-0.49,-0.01l-0.35,-0.5l-0.9,0.02l-0.64,2.03l-0.51,-0.97l-0.73,-0.23l-1.63,0.17l0.63,-0.59l-0.02,-0.54l-0.37,-0.26l-1.03,0.54l-1.83,-0.47l-0.7,0.51l-0.23,0.59l-1.25,-0.21l-0.58,0.25l-0.78,-0.86l-2.42,0.95l-0.49,-1.46l-0.6,-0.13l-0.62,0.35l-0.18,-0.31l1.24,-0.89l0.09,-0.62l-0.3,-0.33l-0.87,0.07l-1.78,-0.61l-0.6,-0.89l-0.91,0.07l-1.29,-0.96l0.97,-1.63l0.0,-0.88l-1.09,-0.32l-0.9,-1.81l-1.25,0.06l-0.17,-1.04l-0.79,-1.1Z",
            "name": "Stavropolskiy kray"
        },
        "RU-SE": {
            "path": "M126.0,545.31l1.33,-2.28l0.68,0.35l0.51,-0.13l0.35,-0.91l0.83,-0.41l0.63,-0.07l0.39,0.3l0.13,1.0l0.7,0.11l0.99,1.0l0.07,0.64l-0.3,0.38l-0.88,-0.3l-0.46,0.38l-0.05,0.55l-1.43,0.36l-0.6,0.57l-1.16,0.41l-0.57,-0.16l0.31,-0.63l-0.26,-0.46l-1.21,-0.68ZM130.75,539.86l-0.8,-0.71l2.05,-0.09l0.03,0.6l-1.28,0.2Z",
            "name": "Severnaya Osetiya-Alaniya, Respublika"
        },
        "RU-SAM": {
            "path": "M149.3,462.48l0.29,-0.58l0.72,0.44l0.96,-0.43l0.44,-1.61l0.71,-0.09l0.12,-0.6l1.17,0.19l0.92,-1.23l1.35,0.13l0.52,-0.25l1.12,0.48l0.9,-0.36l1.06,0.3l0.49,-0.16l0.22,-0.66l-0.43,-0.55l1.28,-1.12l0.2,-2.15l-0.28,-0.94l0.42,-0.13l0.66,1.14l0.45,-0.07l0.66,-0.73l1.33,0.73l0.61,-1.03l0.05,-0.84l0.77,-0.87l0.52,0.0l0.49,0.44l0.73,-0.16l1.65,0.71l0.17,0.84l1.95,1.62l-0.44,0.55l0.11,0.54l0.93,0.32l-0.41,0.54l0.13,0.63l-0.78,2.26l-0.94,1.36l0.56,1.41l-0.68,1.89l0.02,1.07l-1.67,1.09l0.02,1.68l-0.62,-0.24l-0.45,0.34l-0.39,1.17l0.3,0.84l-0.59,0.91l0.04,2.0l-2.87,2.31l-0.06,-0.87l-1.9,-0.75l-0.23,-0.45l-0.46,-0.05l-0.22,-0.62l-1.09,-0.6l-0.96,0.06l-1.27,-1.74l-0.73,0.06l-1.16,-1.02l-1.75,0.21l-0.93,-1.3l-1.42,-0.48l0.9,-0.97l0.06,-0.85l-0.43,-0.59l-0.83,-0.08l-0.09,-0.74l-0.73,-0.01l0.07,-0.47l-1.23,-1.85ZM171.07,453.76l0.39,-0.5l0.93,0.26l-0.94,0.03l-0.39,0.21Z",
            "name": "Samarskaya oblast"
        },
        "RU-SA": {
            "path": "M451.82,316.03l1.87,-0.52l0.53,-1.43l0.86,-0.23l1.25,-1.26l0.57,0.51l0.5,-0.09l0.84,-1.67l0.48,-10.57l-0.02,-10.79l-3.94,-8.07l0.7,-0.52l0.64,-1.4l0.5,0.68l1.44,0.03l1.7,-1.09l3.36,-1.41l0.9,-0.04l0.6,-0.61l0.16,-0.98l0.96,-0.98l2.77,0.26l0.26,0.6l0.71,0.38l1.36,-0.06l0.86,-1.23l0.28,-0.82l-0.16,-0.55l0.66,-1.66l-0.23,-0.52l-0.62,-0.29l-0.36,-1.84l1.29,-0.73l0.38,-0.92l-0.11,-0.76l3.5,-0.78l0.1,-0.85l-0.77,-0.51l-0.05,-2.03l0.88,-0.88l1.0,-0.36l0.17,-1.19l1.54,0.01l1.2,-0.75l1.5,-0.18l0.95,-1.31l2.31,-0.74l0.5,-0.99l0.37,0.67l0.58,0.03l1.95,-1.94l-0.28,-0.89l0.87,-0.82l0.02,-0.97l-0.4,-0.65l-0.84,0.05l-0.76,-0.89l-1.63,-1.07l-0.0,-11.97l-0.41,-0.4l-0.9,-0.04l-0.2,-0.97l-0.41,-0.26l0.05,-0.86l-0.55,-0.9l-1.21,-0.16l-1.32,-0.83l1.18,-1.43l0.04,-0.8l-0.62,-0.85l-1.5,-0.54l-0.09,-0.93l-0.95,-0.3l-0.38,-2.11l0.45,-0.77l-0.35,-1.0l1.09,-1.01l-0.4,-0.91l0.67,-0.45l0.07,-0.68l-0.82,-2.41l-1.67,-0.29l0.78,-0.81l0.07,-0.72l-0.55,-0.97l-1.26,-0.73l1.42,-0.18l1.54,-2.87l0.85,-0.05l0.56,-0.55l0.18,-1.25l-1.0,-1.02l-0.23,-0.68l0.03,-0.51l0.52,-0.58l1.19,-0.77l0.56,0.76l2.01,1.33l1.8,0.68l1.3,0.07l2.47,-0.79l0.73,-0.73l0.3,-0.81l-0.18,-1.62l1.79,4.49l0.03,1.06l-0.65,0.33l-0.87,2.27l0.84,1.79l1.05,0.52l0.13,4.11l-0.22,2.47l-0.76,1.03l-1.04,0.62l-0.17,1.0l0.46,1.85l0.53,0.78l1.37,0.84l3.11,0.78l0.43,-0.16l-0.01,-0.46l-0.46,-0.5l-3.31,-1.02l-0.69,-0.83l-0.36,-1.39l2.0,-2.6l-0.05,-1.3l0.37,-1.1l-0.37,-1.48l0.12,-1.01l0.69,-1.0l0.74,-0.01l1.03,-0.67l-0.27,-0.77l-1.11,0.09l-0.75,-0.75l-0.66,-1.5l1.92,-0.4l1.11,-1.17l2.78,0.12l1.02,-0.31l1.51,-1.29l1.41,-0.59l3.88,0.63l2.23,0.02l2.32,1.07l2.15,0.53l5.24,-0.0l1.66,0.57l0.72,1.04l-1.05,0.14l-0.34,-0.56l-0.73,-0.05l-1.06,1.46l0.2,3.56l0.52,0.75l2.39,1.63l1.76,0.83l1.39,0.26l0.27,0.84l0.91,1.0l4.26,1.51l0.65,-0.38l-0.17,-0.72l-3.92,-1.35l4.07,0.61l2.14,0.82l1.94,-0.77l1.89,0.27l0.28,-0.24l0.88,1.35l2.08,0.39l1.24,0.87l0.96,-0.23l-0.83,-1.08l1.04,0.51l0.83,-0.43l-0.05,-0.66l-2.38,-1.34l0.15,-0.32l1.19,0.44l0.31,0.72l1.3,0.73l0.57,-0.03l1.09,-1.4l0.1,-1.39l0.52,-0.23l0.05,-0.68l-0.44,-0.94l0.42,0.35l0.79,-0.19l0.24,-1.15l-0.8,-0.5l-0.05,-0.71l-0.6,-0.45l-0.26,-0.77l0.38,-0.68l-0.58,-0.61l0.59,-0.32l-0.73,-1.96l0.81,-0.81l-0.21,-1.29l0.29,-0.18l0.42,1.39l2.04,-0.34l0.46,-0.49l-0.13,-0.61l0.4,-0.07l1.54,-1.82l1.38,1.36l0.89,0.35l0.83,1.25l0.55,-0.43l0.14,1.69l0.64,0.36l0.68,-0.32l0.92,0.29l-0.61,1.24l0.68,1.22l0.56,-0.35l0.25,-0.7l1.35,0.61l0.48,-0.71l0.02,-0.84l0.91,-0.68l0.32,0.46l-0.07,0.61l-1.09,0.19l-0.1,0.43l0.46,0.59l-0.39,0.69l0.4,0.21l1.02,-0.31l0.51,0.47l0.28,1.03l-0.15,1.05l0.41,0.46l0.4,-0.28l0.5,-1.3l-0.34,-1.18l0.29,-0.3l0.69,0.22l0.34,-0.83l0.32,-0.02l-0.05,-2.01l0.95,0.05l1.36,0.86l2.36,0.31l0.05,0.72l0.64,0.29l-0.53,0.83l0.46,0.54l1.37,-0.04l-0.35,0.94l0.37,0.62l0.4,-0.02l0.45,0.5l1.06,-0.49l0.95,0.77l0.17,0.58l-0.57,1.53l0.11,0.56l0.57,0.11l1.16,-1.03l1.23,1.02l0.57,1.17l-0.19,0.32l-2.38,-0.67l-3.39,1.29l-0.53,0.62l-0.04,1.16l-0.46,0.52l-0.05,0.45l0.4,0.21l1.11,-0.13l4.35,1.18l-0.24,0.38l-3.17,-1.03l-0.6,0.08l-0.29,0.74l-2.27,0.11l-0.43,0.14l-0.02,0.46l1.57,1.85l2.24,1.5l1.33,0.37l1.52,-0.26l0.45,0.18l0.15,0.93l1.01,0.84l-0.56,0.27l-0.26,0.72l0.29,0.76l0.49,0.22l-1.23,1.49l0.33,0.58l-0.55,-0.23l-0.89,0.45l-0.48,-0.95l-1.55,-1.06l0.29,-0.75l-0.21,-0.27l-2.04,-1.06l-1.98,-2.16l-0.91,0.12l-0.23,0.63l0.77,1.26l-0.38,0.49l2.49,1.89l1.18,2.02l0.0,1.14l0.46,0.91l0.48,0.28l0.24,1.7l1.36,2.05l-0.61,1.09l0.31,1.23l0.52,0.32l1.05,-0.32l1.31,4.5l1.48,1.68l0.22,1.08l-0.62,0.76l0.03,0.45l1.48,-0.19l0.48,0.66l0.54,-0.27l0.53,1.09l-0.27,0.28l0.17,0.41l1.53,0.69l0.13,0.57l0.8,0.43l0.92,-0.54l0.25,1.93l1.18,0.68l1.26,-0.3l1.73,-2.25l1.17,-4.0l0.56,-0.36l-0.12,-0.82l1.34,0.05l0.44,-0.58l-1.21,-1.0l1.63,-6.37l1.42,-3.33l0.62,-0.78l-0.45,2.42l1.48,1.19l0.93,2.35l2.66,2.4l1.47,0.67l1.51,0.49l1.69,-0.1l0.51,-0.39l0.39,0.33l-0.45,0.83l0.08,0.75l0.41,0.33l0.9,-1.95l-0.23,-0.73l0.39,-1.04l0.86,-0.63l0.74,0.08l0.25,-0.37l1.04,0.26l0.39,-0.49l-0.24,-0.55l1.05,-0.5l1.67,-0.17l2.32,0.95l0.31,1.2l0.44,0.46l0.93,-0.83l0.72,1.11l1.64,0.86l0.11,0.62l0.94,0.26l-0.17,1.02l0.63,0.5l-0.04,0.52l1.2,0.86l0.12,0.57l0.53,0.37l1.47,-0.25l0.3,-0.46l-0.41,-1.01l0.91,-0.48l0.29,-0.94l0.74,-0.52l-0.52,-0.69l-1.59,-0.05l-0.3,-0.67l0.62,-1.18l0.25,-1.43l0.95,-0.31l0.21,0.86l0.48,0.23l0.73,-0.22l0.6,-1.54l1.37,1.04l0.61,2.49l0.54,0.29l1.12,-0.27l0.38,-1.05l0.46,0.0l0.57,0.56l0.92,-0.47l1.06,0.28l0.31,-0.56l-0.27,-0.95l-0.83,-1.03l-0.48,-1.22l-0.19,-1.96l0.47,-1.43l-0.58,-0.28l-0.39,-0.71l0.56,-0.93l0.02,-1.42l0.68,-1.24l0.55,0.36l0.81,-0.16l0.6,-0.73l-0.1,-0.72l-0.64,-0.49l-3.07,-0.12l-1.01,1.14l-0.77,-0.1l-0.29,-0.82l0.35,-1.3l1.76,-2.74l1.39,-0.08l1.3,0.41l2.63,-0.3l3.0,-1.66l0.15,-0.44l-0.76,-0.28l0.13,-1.88l-1.73,-1.84l-0.4,-0.93l3.09,0.51l1.49,1.63l3.56,1.28l1.76,-0.27l2.9,0.5l2.0,-0.18l1.14,0.58l3.1,0.43l1.42,0.58l4.32,0.91l1.63,1.05l2.15,0.48l2.56,1.51l-4.75,-0.46l-1.56,0.23l-0.87,-1.12l-1.57,-0.39l-1.43,1.24l-0.82,1.91l-0.95,-0.69l-1.42,0.49l0.57,1.44l1.61,1.02l0.97,-0.15l0.71,-0.93l1.65,-0.53l2.45,-0.22l-0.01,0.46l0.56,0.49l-0.64,2.06l0.31,0.95l0.62,0.23l0.01,1.3l-1.95,0.55l-1.73,-1.64l-0.67,0.21l0.04,1.37l1.21,1.11l-0.7,0.66l-0.87,0.17l-0.09,1.84l0.27,0.45l0.52,-0.27l0.23,0.29l0.41,-0.22l1.36,0.45l1.3,-1.29l0.9,0.09l1.71,-1.03l1.72,-2.01l1.4,-2.94l2.82,-4.21l2.81,-0.12l3.27,0.46l2.89,1.01l3.31,1.72l2.15,3.36l-0.06,1.14l-1.44,1.12l-1.48,-2.13l-0.94,0.47l-0.67,1.69l-1.33,-0.68l-0.47,0.51l0.36,0.72l0.61,0.3l-0.94,0.97l0.29,0.6l1.11,0.11l0.51,-0.46l3.31,0.8l0.81,-0.19l-0.15,1.58l-0.47,0.8l0.22,0.86l1.62,-0.86l0.59,-0.06l0.47,0.35l1.25,-0.31l-0.66,2.13l-2.54,2.03l0.08,0.76l0.8,0.06l0.84,-1.0l1.29,-0.76l-0.05,0.59l0.52,0.09l1.3,-1.51l0.77,-0.3l2.24,0.93l0.5,0.36l2.68,4.48l-2.09,-0.02l-0.25,0.82l1.67,0.67l1.34,1.05l1.42,0.48l0.35,0.96l0.66,-0.68l1.88,-0.01l1.68,-0.37l0.31,-0.38l1.6,0.31l1.46,-0.56l1.63,-1.12l4.03,-1.07l2.05,-0.4l0.2,1.22l0.67,-0.21l0.33,-1.27l1.45,-0.39l8.53,0.39l2.09,0.43l2.78,1.26l3.65,2.18l2.3,2.45l0.77,1.35l1.29,4.16l-0.0,0.86l-0.67,1.47l-1.04,-0.18l-0.41,0.61l0.95,0.74l-0.02,1.15l-0.92,1.41l0.57,2.61l0.76,-0.28l1.51,1.24l0.47,-0.14l-0.01,0.47l0.67,0.31l0.72,-0.39l1.94,0.75l0.26,0.49l-0.42,1.85l0.6,3.9l-0.29,1.56l0.67,0.63l1.12,0.35l0.46,0.61l-1.02,2.66l-0.05,1.42l-0.51,1.17l-0.28,0.45l-1.13,-0.09l-0.44,0.52l0.46,0.72l1.72,-0.14l1.63,-2.47l-0.11,-1.37l1.36,-2.01l-0.09,-1.68l-0.78,-2.83l0.38,-1.66l-0.16,-0.58l1.71,-1.9l0.57,0.04l0.6,-0.43l0.87,-1.38l0.25,0.64l-0.26,0.79l0.52,1.04l-0.23,0.66l0.73,0.62l0.21,1.16l1.18,1.47l-1.4,1.27l0.17,1.73l1.24,1.16l0.31,0.75l-0.33,0.6l-0.42,-0.17l-0.47,0.33l0.06,1.59l0.59,1.32l-0.72,1.34l-0.27,2.13l-0.39,0.35l-0.93,-0.55l-4.28,-0.84l-1.04,0.43l-1.21,1.15l-5.87,0.33l-0.6,0.6l-1.07,-0.04l-2.29,0.68l-0.98,0.66l-1.58,0.05l-2.21,1.26l-0.33,1.57l-0.68,0.54l-0.08,0.92l0.39,0.65l0.78,0.05l0.22,0.71l-1.66,-0.06l-0.85,0.5l-0.54,1.03l-0.24,1.57l0.44,1.19l0.58,0.34l-0.53,1.19l0.48,1.21l2.64,2.17l0.69,0.08l1.12,0.74l0.95,3.1l-0.95,0.78l-0.45,1.57l-1.45,2.23l0.79,1.32l-0.63,1.35l0.31,1.37l-1.29,-0.51l-2.34,0.61l-1.92,1.59l-0.05,0.81l-0.93,0.1l-0.66,-0.41l0.14,-0.97l-1.09,-0.92l-0.85,-1.39l-0.69,0.2l-1.0,1.45l-1.74,-0.27l-1.08,-1.05l-2.27,0.29l-0.59,-0.61l-0.56,-0.1l-1.23,0.9l-0.32,-0.5l-1.38,-0.72l-0.7,0.05l-0.67,0.48l-0.98,1.9l0.28,0.59l0.48,0.14l0.07,1.12l-0.52,1.0l-0.32,0.16l-0.28,-0.63l-0.89,-0.32l-1.37,0.07l-1.22,0.81l-0.25,0.79l0.39,1.09l-0.11,1.04l-0.56,1.52l0.64,1.06l-0.21,0.37l-1.71,1.01l-2.39,0.68l-0.49,1.23l0.25,1.39l-0.82,1.33l0.3,1.63l0.64,0.49l0.35,0.89l-2.03,1.81l0.18,1.51l-0.69,0.35l-0.08,-1.26l-0.88,-0.52l-3.0,0.91l-0.4,0.91l-1.01,-0.28l-1.14,0.54l-1.78,0.03l-0.27,0.31l-0.08,1.57l-1.53,-0.48l-0.3,-0.39l-0.48,-1.03l0.28,-1.71l-1.63,-1.15l-0.95,0.14l-1.41,1.38l-0.69,-0.09l-0.38,0.39l-0.51,-0.3l-2.43,0.22l-0.73,-1.1l-1.0,-0.51l-1.87,1.86l0.02,1.19l1.22,1.17l-1.22,2.97l-1.39,-0.68l0.28,-0.87l-0.48,-0.92l-2.02,0.49l-0.26,0.64l-1.03,-0.88l-2.66,-0.76l-0.85,0.08l-0.52,1.73l-0.53,0.42l-0.46,1.05l-3.04,1.6l0.44,1.82l-0.98,1.68l-1.07,4.05l0.12,2.09l0.48,1.21l-0.2,1.78l0.36,0.6l0.01,1.18l0.35,0.44l-0.8,-0.03l-0.88,0.57l0.01,2.59l-0.56,0.06l-0.22,0.94l-1.19,0.65l-0.43,1.19l-0.52,0.5l-0.28,1.28l-1.47,1.05l-0.91,0.07l-0.08,-2.65l-0.6,-0.11l-0.96,0.59l-0.17,-0.95l-1.08,-0.32l-0.45,0.18l-0.69,-0.96l-0.93,0.33l-0.75,1.82l-1.3,-0.49l-1.03,0.59l-1.57,-1.96l-0.56,0.01l-0.6,0.63l-0.16,-0.53l-0.82,-0.13l-0.83,-0.79l-0.12,-0.89l-0.6,-0.49l-0.63,-1.58l-1.16,-0.08l-0.16,-0.52l-0.96,-0.33l-0.35,-0.47l-0.62,-0.32l-0.49,0.17l-0.36,0.58l0.01,0.98l-1.01,0.0l-0.56,0.61l-0.42,3.82l-0.54,0.56l-0.89,0.22l-0.23,1.64l-1.44,1.95l-0.57,1.71l-0.65,-0.09l-0.68,0.58l-1.0,-0.08l-0.74,1.23l-1.2,-0.06l-0.57,0.88l0.04,0.98l-1.12,0.68l-0.58,-0.04l-0.23,0.39l0.29,1.04l-0.64,0.34l-0.21,1.08l0.57,1.54l0.76,0.59l-0.99,1.89l0.43,1.22l-0.67,1.61l0.33,3.02l-0.47,1.28l0.31,1.14l-0.83,-1.18l-0.5,0.49l-1.74,0.19l-0.94,1.1l-0.05,0.76l-1.19,1.09l-1.17,0.24l-1.03,0.72l-1.75,-0.41l-0.4,-0.4l-1.12,0.06l-1.15,-1.0l-0.84,-0.03l-0.76,0.34l-1.2,1.28l-1.1,2.62l-1.01,-0.37l-0.53,0.17l-0.51,-0.75l-1.45,0.5l-2.18,-0.99l-2.03,0.27l-0.11,-0.41l-0.53,-0.26l-2.54,0.99l-0.87,1.0l-0.63,0.06l-0.26,2.13l-1.1,0.21l-0.4,1.03l0.09,1.53l-0.9,1.18l-1.21,0.2l0.3,2.24l-0.88,0.76l-0.1,0.83l-1.12,-0.81l-1.08,-0.04l-0.64,0.37l0.02,0.5l0.8,0.91l-0.04,0.61l0.87,0.84l-0.09,0.66l0.72,0.41l0.72,1.07l-1.71,0.81l-0.06,0.79l-0.7,0.96l0.04,0.83l-0.66,0.33l-0.71,-0.52l-1.1,0.93l0.47,1.36l1.29,0.44l1.84,3.04l-0.59,0.71l-0.06,0.94l-0.57,-0.16l-0.69,0.59l-0.78,0.01l-0.79,0.97l-0.18,1.95l-0.66,0.69l-0.56,2.28l0.36,1.64l-0.87,-0.34l-3.47,0.33l-0.64,-0.41l-2.31,0.06l-2.58,0.86l-0.12,0.51l0.31,0.51l-0.29,0.55l-2.24,-0.45l-1.44,-1.35l-2.11,0.31l-0.81,-0.54l-0.66,0.27l-0.5,0.81l-0.69,-0.85l-0.93,-0.28l-1.43,0.09l-0.39,0.7l-0.66,-0.44l-0.61,0.02l-0.85,0.84l-1.19,-0.26l-0.54,-1.14l-1.36,-0.77l-1.48,0.41l-0.48,-0.82l-1.0,-0.36l-1.69,0.47l-1.39,-0.72l-0.78,0.3l-0.54,-1.48l-0.6,-0.32l-1.93,-2.9l-3.4,-0.49l-1.07,-0.53l-1.04,-1.1l-0.74,0.19l-0.25,0.7l-0.38,0.13l-0.6,-0.94l-1.04,-0.56l-0.69,-0.86l-2.66,-0.16l-0.65,-1.57l-0.71,-0.58l-1.73,-0.17l-0.54,-0.42l-1.74,0.03l-2.07,0.29l-1.44,1.02l-0.5,0.03l-0.44,-0.78l-0.67,-0.21l0.33,-1.44l-0.75,-1.68l-0.66,-0.71l0.36,-1.75l-0.69,-0.43l-1.02,0.3l-0.03,-0.88l-0.5,-0.37l0.57,-2.8l-0.47,-3.16l0.33,-1.2l-0.21,-0.45l-1.42,-0.87l0.38,-2.15l-0.56,-0.84l0.3,-0.38l0.0,-0.88l-0.73,-0.52l-0.1,-1.11l0.83,-1.19l-0.48,-0.53l-0.07,-0.85l-1.92,-1.17l-0.25,-0.72l-0.5,-0.32l-1.53,0.32l-0.72,1.34l-0.42,-0.89l-0.46,-0.01l-0.73,0.61l-1.5,-0.51l-0.37,-0.46l0.28,-0.38l0.16,-1.91l-0.82,-0.96l0.52,0.02l0.55,-0.44l0.07,-0.82l-1.28,-0.35l-0.44,-1.13l-2.09,-2.21l-2.75,-0.59l-0.36,-0.48l-0.94,-0.18l-0.7,-0.6l-2.8,0.85l-0.88,0.77l-0.42,1.18l-0.74,0.64l-0.59,-0.25l-0.37,0.23l-0.84,1.24l0.05,1.19l-1.24,1.14l-0.64,1.21l-0.65,0.16l-0.18,0.45l-0.87,0.14l-0.38,0.74l-1.1,0.67l0.01,0.76l-0.89,1.14l0.17,1.18l-0.82,0.88l-1.6,0.01l-1.48,1.03l-0.58,-0.1l0.22,-0.91l0.73,-0.73l-0.02,-0.58l-0.4,-0.38l-1.34,-0.0l0.13,-0.87l-0.5,-1.0l-0.44,-0.05l-1.72,2.31l-0.82,0.06l-0.59,0.6l-0.82,-0.56l-0.97,0.13l-0.57,0.5l-0.45,-0.32l-0.5,0.17l-1.66,-0.36l-0.9,0.91l-0.3,1.37l-0.68,0.04l-0.8,0.52l-1.7,-0.18l-0.25,-0.57l-0.48,-0.22l-0.76,-2.08l-1.22,-0.37l0.44,-0.41l-0.07,-1.04l1.03,-1.42l-0.13,-1.24l0.72,-0.96l0.65,-1.81l-0.34,-1.09l0.16,-0.91l1.13,-1.92l-0.08,-0.72l0.98,-1.27l-0.0,-0.7l0.78,-0.43l-0.13,-1.46l1.09,-1.59l0.41,-1.35l-0.33,-1.11l-0.72,-0.32l-0.84,0.32l-0.55,-1.22l-1.28,-0.39l0.33,-2.23l-1.3,-2.12l-0.12,-1.55l2.06,-3.1l-0.24,-0.98l0.27,-0.66l-0.62,-1.66l-2.35,-0.26l-0.86,-0.79l0.56,-0.46l0.49,-1.84l0.94,-1.04l-0.24,-0.81l-0.7,-0.57l-0.28,-2.78l0.19,-0.5l-0.48,-1.66l-0.54,-0.29l-1.3,-2.22l-1.13,0.08l-1.56,-0.7l-1.83,0.34l0.59,-0.7l0.09,-1.37l1.72,0.26l0.84,-1.21l-0.36,-0.72l0.14,-0.95l-1.13,-1.57l0.14,-1.26l-0.44,-0.84l-1.01,-0.33l-0.36,0.59l-0.86,-0.08l-1.1,0.91l-1.39,-1.37l-0.58,-0.01l-0.88,0.53l-0.51,-0.93l-0.63,-0.13l-1.05,-0.84l-0.75,-0.07l-0.76,-1.17l-0.66,0.14l-0.11,0.66l-1.5,0.32l-0.04,-0.49l-0.54,-0.53l-0.5,-0.16l-0.67,0.3l-0.41,-0.79l0.77,-0.8l-0.16,-1.59l0.68,-0.11l0.17,-0.5l0.69,0.16l0.4,-0.32l-0.06,-0.52l-1.17,-1.63l1.5,-1.24l0.46,-0.81l0.71,-0.08l-0.28,-1.31l0.73,-0.82l0.84,0.24l0.41,-0.2l0.78,-1.83l-0.23,-0.45l-1.09,-0.46l-0.54,-1.11l-0.99,-0.37l0.25,-0.58l0.03,-3.62l-0.75,-2.02l-1.1,-0.39l-0.09,-2.21l1.16,-1.37l-0.4,-3.15l-0.53,-0.43l0.2,-0.87l-0.68,-0.35l-0.17,-1.16l-1.36,-0.7l-0.61,0.09l-0.35,-0.43ZM487.9,409.57l0.02,0.03l-0.02,0.03l-0.0,-0.06ZM651.5,377.78l0.01,0.24l-0.03,0.02l-0.07,-0.15l0.1,-0.12ZM574.62,245.11l0.72,-0.42l0.35,-0.52l0.14,0.2l-0.36,0.32l-0.85,0.42ZM662.71,236.21l5.31,-0.43l-2.06,3.54l-1.9,2.25l0.03,-1.14l1.27,-0.99l0.5,-1.11l-0.95,-1.02l-1.51,0.28l0.15,-0.57l-0.84,-0.82ZM746.37,278.86l0.34,-0.14l0.02,0.68l-0.06,0.01l-0.3,-0.56ZM745.05,281.32l-0.09,-1.91l0.27,-0.31l0.08,1.67l-0.27,0.56ZM743.57,286.43l0.15,-3.34l-0.53,-1.32l0.1,-0.5l0.79,-0.8l-0.5,1.34l0.35,0.83l-0.2,1.88l0.42,2.18l-0.59,-0.27ZM739.78,258.69l0.03,-0.0l0.0,0.0l-0.02,0.01l-0.0,-0.01ZM740.35,258.91l0.06,0.02l0.03,0.13l-0.1,-0.15ZM740.48,259.23l0.16,0.81l-0.3,0.1l-0.08,-0.09l0.23,-0.82ZM719.21,139.17l0.01,-0.04l0.03,0.04l-0.04,-0.0ZM699.26,161.81l-0.74,-0.81l0.82,-0.72l0.12,0.87l-0.2,0.65ZM665.01,177.47l0.52,-0.51l0.01,-0.95l0.57,-0.38l-0.25,-1.33l0.21,-1.11l1.16,1.53l-0.38,0.41l-0.2,1.31l1.08,1.5l1.88,0.62l1.07,-0.26l0.34,-0.22l0.01,-0.63l0.57,-0.45l-0.2,-0.59l1.02,-0.02l0.91,0.48l2.82,-0.04l0.62,0.62l-0.63,1.91l1.06,1.68l1.76,-0.11l1.23,-0.92l4.97,0.84l0.25,0.48l-0.11,0.88l0.62,-0.12l0.94,0.66l0.03,0.57l0.48,0.24l0.99,-0.65l0.22,-0.81l0.42,0.05l-1.29,2.75l0.01,1.89l-4.25,1.86l-0.49,0.75l-1.97,-0.11l-0.55,0.26l-5.17,-0.86l-2.69,-3.01l-2.92,-0.99l-2.31,-2.5l-2.29,-1.02l-0.58,-0.86l0.5,-1.13l0.03,-1.68ZM676.91,149.87l2.02,-1.76l2.04,-0.6l-0.55,0.69l-0.02,1.57l-3.49,0.1ZM616.14,177.78l0.24,-0.22l0.57,0.93l0.8,0.09l0.93,-0.42l0.35,-0.63l-0.18,-1.23l-0.57,-0.34l-0.7,0.07l0.81,-0.76l-0.62,-1.53l0.05,-0.49l0.51,-0.48l-1.13,-2.72l0.48,-1.02l1.64,0.35l0.76,0.62l0.58,-0.29l-0.13,-1.16l-1.45,-2.1l-0.05,-1.1l1.29,-1.14l1.7,-0.45l0.62,-1.11l0.08,-0.86l0.38,-0.26l0.36,1.35l0.75,0.15l0.55,-2.67l1.5,-0.65l0.26,1.38l0.73,1.22l2.62,2.33l1.06,0.35l0.19,0.34l-0.39,1.32l0.89,1.23l1.11,0.85l0.89,-0.46l0.88,0.55l0.14,0.5l-0.58,2.14l0.5,0.75l2.45,0.53l0.95,-0.55l0.14,-0.78l-0.95,-1.78l0.24,-5.4l0.33,-0.85l0.83,-0.1l1.75,1.01l0.61,-0.12l0.09,-0.81l-1.13,-2.16l1.01,0.62l2.26,2.3l2.14,3.25l3.02,1.3l1.52,-0.02l0.52,-0.47l-0.1,-0.44l0.8,-0.38l0.76,0.65l0.88,0.03l1.32,1.46l2.68,1.51l0.61,1.12l1.84,0.73l0.8,1.12l-1.26,0.43l-2.02,1.67l-0.29,2.38l1.21,0.94l-0.9,0.43l-0.22,1.84l-0.96,0.91l-0.6,1.15l-1.69,0.41l-1.28,-1.09l-1.23,-0.11l-0.65,0.37l-2.34,-1.37l-0.21,-1.5l-0.67,-0.47l-0.38,-1.56l-0.74,-1.02l0.13,-1.83l0.94,-1.49l1.63,-1.29l-0.05,-2.44l-0.68,-0.62l-1.02,0.13l-0.51,-0.38l-1.99,0.3l-0.25,0.3l0.61,0.9l-1.91,-0.0l-0.19,1.48l0.57,0.49l-0.27,1.15l0.55,1.37l-0.1,1.97l1.31,2.38l0.14,1.28l0.74,0.9l0.58,1.63l1.93,0.55l2.27,1.19l0.75,-0.15l0.35,0.95l-0.99,0.58l-2.21,0.33l-1.79,-0.19l-0.53,0.65l0.02,0.7l-0.39,0.15l-0.59,-0.1l-1.77,-1.94l1.18,0.73l0.73,-0.29l-0.01,-0.65l-0.84,-1.34l-2.21,-0.05l-2.57,1.61l-1.36,0.07l-3.08,0.84l-0.96,0.7l-1.09,0.18l-1.12,-2.61l-1.43,-0.41l-1.24,1.19l0.06,1.49l0.4,0.51l-0.29,1.34l-0.75,1.49l-0.85,0.53l-1.47,-1.19l-3.33,-1.21l-1.3,-1.28l-0.56,-2.63l-0.75,-0.96l-1.21,-0.64l-1.44,-1.69l-1.13,-2.68l-0.22,-1.58ZM638.2,207.47l1.11,0.24l1.38,-0.81l2.1,-0.18l2.66,1.59l4.27,5.2l0.58,1.6l-0.45,0.76l0.54,3.31l-1.5,0.44l-2.09,-0.77l-1.24,0.1l-5.28,-1.52l-3.98,-2.06l-1.62,0.11l-1.12,0.41l-0.76,0.69l-1.26,0.17l-0.17,-1.02l0.48,-0.63l1.73,0.26l1.55,-0.79l0.89,-1.8l1.24,-4.1l0.94,-1.2ZM634.85,205.96l-0.63,-0.29l-0.63,-1.54l0.1,-3.41l0.5,-0.49l2.58,-0.39l0.58,0.57l0.25,1.13l-0.32,2.87l-2.44,1.56ZM617.07,248.73l0.68,-0.54l1.83,-0.01l0.55,-0.29l0.57,0.16l0.37,0.83l-0.97,1.1l-0.91,-0.96l-1.15,-0.32l-0.49,0.45l-0.47,-0.41ZM608.4,200.5l0.37,0.07l2.16,2.45l1.04,1.65l0.05,1.64l-1.92,-2.6l-0.39,-1.33l-0.56,-0.78l-0.6,-0.25l-0.15,-0.86ZM608.68,176.93l0.04,-1.27l0.69,-2.22l-0.26,-2.31l0.57,-2.42l0.35,1.88l1.63,1.77l-1.14,2.24l0.2,1.64l-0.59,0.58l-1.49,0.1ZM571.35,226.28l0.26,-0.37l1.46,-0.21l1.4,-0.85l0.91,0.08l0.75,0.86l0.07,0.69l-0.72,0.59l-4.12,-0.79ZM570.42,229.86l2.14,-0.45l1.18,0.66l-1.15,1.09l-1.3,-0.42l-0.86,-0.89ZM550.09,206.91l0.37,-0.36l0.73,0.2l-0.32,0.41l-0.78,-0.25ZM550.39,206.37l-0.07,-0.1l0.02,-0.02l0.05,0.12ZM525.79,221.07l0.43,-0.39l0.92,-0.08l1.03,0.84l-0.3,0.68l-1.64,0.0l-0.45,-1.04ZM505.96,198.65l0.04,-0.41l0.18,-0.38l0.2,0.84l-0.41,-0.06ZM491.12,199.92l-1.19,0.83l-0.77,1.79l-0.87,-0.17l-2.07,-0.65l-1.09,-1.42l-1.92,-0.89l-0.45,-1.17l0.62,-0.41l1.15,0.53l0.68,-0.5l0.36,-3.27l0.22,-0.11l3.16,1.04l1.67,0.03l1.39,0.41l0.26,0.99l-0.89,1.76l-0.24,1.22Z",
            "name": "Sakha, Respublika"
        },
        "RU-SVE": {
            "path": "M197.97,430.53l0.25,-0.33l1.32,0.24l1.39,-0.79l0.29,-0.82l0.5,0.19l0.63,-0.32l0.2,-0.93l-0.85,-2.1l0.19,-1.73l0.57,-0.0l0.44,-1.04l0.45,-0.1l0.32,0.78l0.83,0.24l1.72,-1.54l0.29,-1.4l-1.32,-1.53l0.3,-0.87l0.73,-0.83l0.75,-0.01l1.2,-1.08l0.55,-1.18l0.9,-0.87l-0.33,-1.2l0.09,-1.08l-1.73,-0.93l-0.05,-0.68l0.59,-0.8l-0.43,-0.81l0.37,-1.69l-1.12,-0.83l-1.61,-0.58l-0.73,-1.4l-0.89,-0.27l0.56,-1.94l0.66,-0.22l0.45,-1.34l0.61,-0.08l0.32,-0.66l0.72,-0.07l-0.05,-0.88l0.43,-0.42l-0.01,-0.77l0.75,-1.7l-0.11,-1.06l1.15,-2.18l0.46,-3.9l-0.51,-0.7l-0.1,-1.77l-0.52,-0.9l0.23,-1.29l0.58,-0.66l0.08,-1.03l-0.44,-1.7l0.24,-1.12l-0.3,-0.66l0.54,-1.15l0.81,0.3l0.51,-0.18l0.73,0.37l0.02,1.53l0.54,0.58l2.2,-0.2l3.68,0.66l3.99,3.04l2.56,1.1l0.96,0.94l1.13,2.04l-0.47,1.58l0.67,2.46l1.76,3.56l-0.05,0.87l1.21,0.81l1.02,0.19l0.83,3.44l0.21,3.41l1.26,1.01l1.71,-0.13l3.44,0.73l0.3,0.88l0.53,0.28l0.93,2.92l1.51,2.59l1.4,0.58l0.26,2.8l0.93,2.53l-2.49,1.33l-0.54,0.96l-0.67,-0.45l-3.28,2.21l0.6,0.69l-0.58,1.16l0.22,0.89l-0.29,0.65l0.85,0.72l0.01,1.8l0.49,1.51l0.62,0.24l-0.15,0.41l-0.63,-0.01l-0.17,-0.41l-0.63,-0.27l-2.81,0.92l-0.27,0.35l0.13,0.75l-0.77,0.86l0.15,0.64l-1.72,-0.25l-1.67,-1.12l-2.03,0.46l-0.89,-0.25l-1.41,0.64l-0.29,-0.37l-0.7,-0.02l-1.17,1.12l-0.44,1.01l-0.93,0.73l-0.12,1.11l-1.56,-1.53l-0.78,0.01l-0.85,-0.56l-1.48,0.06l-0.44,0.66l0.36,0.84l-0.9,0.11l-0.81,-0.42l-2.28,-0.01l-0.57,0.28l-1.47,-0.53l-0.75,0.29l-0.43,-0.69l-2.58,-0.45l-0.83,0.54l0.15,0.8l-0.79,0.2l-0.18,1.23l-0.59,-0.01l-1.26,-0.96l-0.7,0.21l-0.27,0.43l-2.94,-0.52l-1.29,0.48l-0.33,-1.76l-0.42,-0.65l0.44,-2.61l-0.99,-1.67Z",
            "name": "Sverdlovskaya oblast"
        },
        "RU-KK": {
            "path": "M358.94,475.79l0.88,-1.71l0.81,0.06l0.7,-0.87l1.7,-0.87l0.32,-1.26l1.99,-1.78l-0.22,-0.9l0.88,-1.02l-0.97,-1.59l-0.73,-0.16l0.71,-1.03l0.02,-1.2l-0.53,-1.06l-0.64,-0.49l0.2,-1.22l0.68,-0.7l0.08,-0.64l0.57,-0.15l0.79,-0.88l-0.35,-1.16l-0.83,-0.34l-0.32,-0.57l0.93,-0.41l0.29,-1.36l-0.46,-1.02l-0.9,0.03l-0.85,-0.74l-0.59,0.1l-0.71,0.73l-0.3,-0.16l0.58,-1.2l0.17,-1.83l0.64,-0.91l-0.1,-0.88l-0.98,-1.13l-0.39,-1.57l-0.44,-0.54l0.88,-1.02l1.29,1.08l0.44,1.48l1.28,1.39l1.17,0.09l0.69,-0.62l0.73,0.33l1.23,-0.71l1.15,-0.18l0.29,0.44l0.82,0.24l0.07,1.18l0.52,0.29l0.84,-0.23l0.42,0.61l0.58,0.09l-0.14,1.69l1.5,1.17l0.46,1.85l1.09,1.91l0.01,0.65l-0.73,1.42l0.75,2.7l0.59,0.59l0.97,0.27l0.39,0.97l-1.21,1.23l-1.21,0.42l0.08,2.02l-3.57,3.42l-1.16,2.25l-0.52,-0.08l-1.37,0.67l-0.07,0.78l-0.51,0.67l0.24,1.55l-0.54,0.15l-1.1,1.4l-0.5,0.17l-0.69,-0.42l-0.79,0.11l-0.12,-0.4l-0.5,-0.18l-2.97,1.09l-0.18,1.12l-0.54,0.67l-0.53,-0.02l-2.23,-1.41l1.16,-1.87l-0.21,-0.49l-0.93,-0.14Z",
            "name": "Khakasiya, Respublika"
        },
        "RU-SPE": {
            "path": "M54.38,397.27l1.68,0.54l0.1,0.85l0.75,0.59l0.07,1.37l1.13,0.8l-0.87,0.42l-0.38,0.64l-0.78,0.09l-1.93,-2.03l-0.85,-0.41l0.07,-0.24l2.01,0.77l0.69,-0.64l0.11,-1.18l-0.47,-0.37l-1.06,-0.14l-0.27,-1.06Z",
            "name": "Sankt-Peterburg"
        },
        "RU-MOS": {
            "path": "M82.31,439.08l-0.02,-0.53l0.64,-0.4l0.31,-1.46l0.68,-0.37l0.19,-1.22l-0.27,-0.56l0.3,-0.03l0.57,0.72l1.87,0.48l1.28,-0.89l1.09,-0.01l0.31,-0.55l1.31,-0.76l1.15,0.56l0.74,-0.83l-0.06,-1.45l1.73,-0.32l0.79,-1.5l1.15,0.71l0.35,0.88l1.4,0.14l-0.1,1.94l0.51,0.76l0.06,1.75l0.47,0.7l0.61,2.29l1.14,0.57l1.1,0.09l0.65,0.73l0.83,-0.01l0.47,0.67l1.89,-0.2l0.67,-0.43l0.07,0.68l0.89,1.02l-0.17,1.03l0.68,0.32l-0.19,0.33l0.28,1.03l-2.28,1.38l-0.18,0.3l0.36,0.59l-0.7,0.17l-0.8,0.74l-1.4,2.63l-2.12,0.49l-0.27,0.69l0.33,1.26l-0.67,0.91l-0.92,-1.59l0.68,-0.91l-0.39,-0.8l-2.14,-0.67l-0.87,-1.18l-1.26,0.17l-0.1,0.85l-0.34,-0.06l-0.69,-0.86l-1.15,-0.16l-0.26,-0.63l0.44,-1.25l0.48,-0.04l0.52,-0.75l0.01,-1.39l0.72,-0.19l0.46,-1.79l1.18,-1.54l-0.54,-1.55l-1.07,-0.67l-0.74,0.1l-0.74,-0.38l0.03,-0.61l-0.68,-0.57l-0.59,0.27l0.03,1.05l0.41,0.29l0.61,-0.16l-0.27,1.8l0.22,0.64l-0.95,0.68l-0.14,1.08l-0.47,-0.66l-0.57,0.02l-0.38,0.4l0.46,1.92l-0.45,0.46l-1.23,-0.91l-0.97,-0.04l-1.36,1.21l-2.32,-0.98l-0.84,0.04l-0.53,0.58l-0.31,-0.17l-0.11,-1.62l0.49,-1.4l-0.37,-0.91l0.12,-0.72l-0.75,-1.44ZM92.05,441.86l0.47,-0.4l-0.25,-0.79l-0.62,-0.1l-0.7,0.35l-0.11,0.56l0.3,0.43l0.92,-0.07Z",
            "name": "Moskovskaya oblast"
        },
        "RU-BEL": {
            "path": "M83.02,483.54l0.57,0.4l1.65,-0.31l1.19,-1.15l-0.07,-0.47l3.07,0.47l1.24,-0.87l1.39,-0.4l0.29,-0.79l1.05,-0.44l1.49,0.11l1.41,-0.39l0.26,0.43l1.98,0.78l-0.46,0.66l0.35,0.92l1.29,0.68l0.71,-0.55l0.22,0.13l0.02,0.35l-0.67,0.46l-0.04,0.99l0.59,0.87l1.23,0.69l0.05,0.53l-0.47,0.84l0.6,1.52l-0.03,0.75l0.79,1.05l-0.35,0.91l-0.74,0.49l-1.47,-1.29l-1.47,-0.08l-0.61,-0.73l-0.73,0.03l-0.32,1.06l-0.29,0.04l-1.34,-1.15l-0.61,-0.88l-0.07,-0.85l-1.07,-1.24l-2.96,0.74l-1.49,0.88l-0.95,-0.61l-0.59,0.2l-1.05,-1.16l-1.58,0.01l-0.82,0.63l-0.24,-0.66l-0.59,-0.38l-0.19,-0.78l0.33,-1.08l-0.54,-1.36Z",
            "name": "Belgorodskaya oblast"
        },
        "RU-KHM": {
            "path": "M208.42,364.98l0.38,-0.66l-0.17,-0.76l0.36,-0.98l-0.04,-1.37l0.88,-2.45l0.4,-3.69l1.01,-0.81l0.49,-1.71l-0.13,-0.55l-0.66,-0.09l-0.66,-0.82l0.28,-1.02l-0.14,-1.47l-0.61,-0.59l1.08,-1.87l-0.32,-0.91l0.15,-0.72l2.28,-3.05l0.95,0.04l1.08,1.97l0.75,0.01l0.84,-1.81l0.9,-0.12l0.74,-1.45l0.62,-0.32l0.57,-1.27l-0.26,-0.64l0.62,-0.67l0.91,-1.96l1.47,-1.83l0.38,-0.1l1.1,0.97l1.09,3.45l1.69,0.71l-0.06,2.77l-0.65,2.04l0.19,0.54l0.53,0.27l-0.05,1.07l-1.04,0.97l-0.36,1.4l0.95,0.96l1.18,0.25l1.78,-0.55l1.0,0.76l0.14,0.56l-0.41,0.49l0.07,0.48l1.06,0.76l1.84,-0.14l0.69,-0.87l2.4,-0.05l0.72,-0.89l0.71,0.09l1.24,-0.46l1.08,0.19l1.13,-1.49l2.42,0.04l0.71,-0.31l2.23,0.99l1.15,-0.54l0.96,0.47l-0.18,1.14l-0.51,0.78l0.25,1.53l1.67,0.75l1.02,1.1l2.01,0.04l0.75,0.54l3.4,-3.16l1.84,0.9l0.63,-0.09l0.74,-1.52l-0.55,-1.22l0.35,-0.2l0.93,0.05l0.83,0.92l1.73,-0.09l0.58,0.68l0.92,0.3l1.5,-0.36l0.83,1.05l1.47,0.61l0.02,0.6l-1.16,1.55l0.49,1.37l0.92,0.96l0.55,1.56l2.64,0.33l0.65,0.79l0.27,4.6l0.54,0.36l0.93,-0.35l0.96,0.2l0.99,-1.15l2.63,0.18l2.1,-1.7l1.32,2.55l0.83,0.29l3.77,0.14l1.39,1.47l2.27,0.16l2.42,-0.87l1.17,0.2l1.31,-0.25l1.79,0.98l0.55,0.89l1.95,-1.05l0.77,0.56l0.82,0.11l0.74,2.1l0.95,0.98l2.89,1.71l0.37,0.86l0.53,0.32l2.05,-1.21l2.11,-0.53l5.53,0.08l0.35,-0.37l0.4,-2.01l0.66,-0.22l2.51,-2.02l0.29,-0.98l2.05,-0.26l0.37,1.62l0.69,0.82l0.19,0.8l1.35,0.63l1.05,1.0l0.7,-0.02l1.42,-1.31l0.88,0.47l1.92,0.1l0.1,0.89l1.33,0.9l0.13,0.73l1.5,0.91l1.29,-0.59l0.6,0.06l0.78,-0.56l1.02,1.7l1.16,0.29l1.52,3.95l-0.06,1.05l0.86,1.26l1.75,0.38l0.85,0.87l1.18,0.22l0.44,0.61l1.35,0.63l0.78,-0.12l0.3,0.63l-0.87,0.24l-0.72,0.66l0.07,1.11l-5.41,3.09l-1.83,1.5l-1.13,0.26l-2.47,-2.32l-2.33,0.25l-3.87,3.29l-0.25,1.32l-0.75,0.63l-1.65,-1.19l-1.96,0.28l-1.67,-0.2l-0.52,-1.23l-1.67,-0.48l-1.79,0.35l-1.25,1.06l-1.65,-0.3l-2.38,0.26l-0.07,-1.17l-0.89,-0.63l-1.33,0.11l-0.72,0.47l-0.62,-0.5l-1.25,0.53l-1.85,-0.25l-0.99,0.53l-1.03,-0.76l-1.67,0.1l-1.79,-0.39l-0.42,1.36l-0.51,0.46l0.36,1.72l-1.36,1.05l-0.17,1.19l0.52,0.78l-0.8,1.64l0.33,0.6l-0.08,3.14l-0.44,0.63l-0.05,0.97l-2.36,0.36l-0.84,1.13l-0.63,0.09l-0.45,1.41l-1.07,0.76l0.12,2.47l-2.37,2.89l-1.92,-0.7l-3.26,0.1l-0.68,-0.66l-1.24,-0.08l-0.61,-0.42l-0.91,0.35l-1.82,-0.36l0.19,-0.66l-0.76,-0.73l0.14,-0.78l-0.34,-0.65l-0.66,-0.29l-1.07,0.47l-0.39,-0.32l-0.42,-1.46l-2.26,-2.71l-0.75,-0.21l-0.59,-0.78l-2.4,-1.5l-0.74,-1.25l-0.74,0.13l-0.54,0.75l-1.01,-0.43l-2.01,0.46l-1.27,-0.85l-2.72,-0.05l-0.39,-0.81l-1.36,-0.08l-1.1,0.51l-0.51,0.67l0.09,0.46l0.99,0.76l-2.1,1.49l-1.54,0.58l-1.11,2.98l-3.16,0.68l-0.99,1.24l-1.48,0.69l-0.87,0.81l-0.61,-0.37l-1.15,0.52l-0.15,2.62l-1.72,0.74l-2.19,-0.23l-1.23,-0.43l-1.42,-2.41l-0.96,-3.02l-0.61,-0.36l-0.38,-0.97l-3.89,-0.93l-1.54,0.17l-0.76,-0.54l-0.17,-3.23l-0.86,-3.58l-0.43,-0.54l-0.91,-0.08l-0.88,-0.55l0.02,-0.71l-1.77,-3.59l-0.63,-2.32l0.53,-1.52l-1.37,-2.48l-1.05,-1.03l-2.59,-1.13l-4.14,-3.12l-3.9,-0.73l-1.93,0.25l-0.18,-1.83l-1.34,-0.72l-1.14,-0.08l-0.51,-1.49l1.04,-2.68l0.23,-1.7l-0.77,-0.64l-0.52,-1.76l0.4,-2.21l-0.46,-0.65l-0.62,-0.17l-0.23,-0.99Z",
            "name": "Khanty-Mansiyskiy avtonomnyy okrug"
        },
        "RU-VLG": {
            "path": "M80.15,408.27l0.34,-0.96l2.66,-0.95l0.3,-1.73l0.37,-0.44l0.0,-0.98l0.48,-0.15l0.26,-0.53l-0.3,-0.97l-0.98,0.11l-0.08,-1.42l0.47,-0.68l-0.34,-0.58l-1.43,-0.55l0.65,-5.75l-0.57,-1.97l0.44,-0.51l1.17,-0.44l0.19,-1.13l1.02,-1.68l-0.17,-0.7l4.04,-2.13l0.8,-1.58l1.17,0.12l0.64,-0.51l1.51,0.98l2.35,-0.21l-0.07,0.82l0.93,3.03l0.95,0.27l-0.66,0.58l0.14,0.6l0.62,0.24l0.45,0.95l0.83,0.11l0.11,0.95l0.91,0.29l0.39,0.85l1.14,0.05l0.64,-0.64l1.32,1.32l0.39,-0.52l0.61,0.17l1.32,-0.59l0.5,0.03l0.71,0.81l0.53,0.12l2.13,-0.63l0.42,-0.49l0.56,0.38l0.75,-0.34l1.66,1.04l1.87,0.04l0.48,-2.42l0.37,-0.25l0.81,0.64l0.76,-0.57l0.41,0.59l2.52,0.73l1.01,-0.2l0.36,-0.8l0.69,0.06l0.96,1.29l0.55,-0.06l0.49,-0.57l1.89,0.3l0.32,-0.32l0.02,-0.7l1.08,-0.48l0.21,-1.31l1.29,-0.47l0.11,0.73l0.44,0.34l5.41,0.74l0.44,-0.33l0.51,-2.92l1.63,0.27l0.01,1.24l0.66,0.47l2.24,0.57l1.14,-0.74l1.01,0.52l0.22,0.87l1.49,0.62l-0.62,1.55l0.35,0.77l-0.76,0.62l-0.54,2.53l-1.59,-0.06l-0.72,0.25l-0.21,0.43l0.37,1.41l0.38,0.38l1.78,0.53l0.84,-0.18l0.45,-0.48l-0.56,2.85l0.25,0.59l0.81,0.3l0.0,0.75l-3.32,-0.15l-0.44,0.27l-0.26,2.73l-0.67,-0.01l-0.89,0.47l-0.57,1.17l-4.19,0.0l-0.6,0.62l-2.09,-0.2l-0.63,-0.72l-0.58,0.68l-1.04,-0.85l-0.96,0.24l-1.26,-0.53l-0.66,0.44l-0.2,-0.68l-0.36,-0.16l-1.18,0.63l-0.9,-0.54l-0.6,0.87l-0.75,0.3l-0.9,-1.36l-0.67,-0.12l-1.33,0.39l-0.23,-1.08l-1.15,-0.41l-0.72,1.77l0.67,0.83l-0.2,0.55l-0.65,0.29l-0.6,-0.32l-2.05,1.5l-1.09,0.17l-0.41,1.97l0.35,0.67l-1.27,1.16l-1.35,-0.24l-0.75,0.49l-1.08,0.12l-0.55,-0.33l-0.75,-1.66l-0.7,-0.2l-1.32,-1.36l-0.68,0.08l-2.19,-0.67l-1.2,0.32l-0.17,0.7l0.27,0.47l-0.35,0.54l-1.38,-0.26l-0.63,0.71l-2.38,-0.14l-0.57,0.95l-1.19,0.21l-0.18,0.92l-1.92,-2.38l-0.56,-1.14l-1.65,0.24l-0.57,0.46l0.0,0.65l-0.44,0.15l-0.53,1.2l-0.95,0.87l-1.03,-1.83l-1.41,-0.61l-0.77,-0.8l-1.86,-0.12l-0.57,0.39l-0.39,-0.25l0.14,-0.79l-1.61,-0.64l0.06,-0.59l-0.37,-0.26Z",
            "name": "Vologodskaya oblast"
        },
        "RU-CHE": {
            "path": "M197.45,447.05l0.48,-0.43l0.11,-0.76l1.03,-0.69l2.4,0.47l-0.46,0.59l0.33,0.94l-0.35,1.2l0.52,0.61l0.97,-0.52l0.0,-0.64l0.72,-1.13l0.08,1.34l0.71,0.17l0.32,0.42l0.76,0.0l1.03,-0.69l0.19,-0.47l-0.41,-0.9l0.28,-0.73l0.85,0.11l1.0,-0.94l0.13,-0.93l1.4,-0.2l1.04,-1.1l-0.06,-0.49l-1.57,-0.65l-0.23,-0.29l0.14,-0.78l-0.6,-0.36l0.17,-0.82l-0.25,-0.75l0.49,-0.44l0.12,-0.81l-0.18,-0.39l-0.77,-0.16l0.19,-1.19l1.86,0.39l0.28,0.56l0.72,0.17l0.83,-0.27l1.35,0.51l2.75,-0.27l1.06,0.46l1.39,-0.3l0.3,-0.53l-0.22,-0.7l0.47,0.17l0.38,-0.26l0.83,0.57l0.53,-0.19l1.0,1.19l1.18,0.54l0.58,0.8l0.3,1.85l0.88,0.29l0.4,0.53l0.07,0.8l-0.39,0.74l0.25,0.37l-0.69,0.58l-0.76,-0.15l-0.3,0.45l0.11,0.54l-0.83,0.57l0.04,0.55l0.71,0.35l0.34,0.97l-1.05,0.23l-0.39,0.46l0.1,1.04l0.58,0.82l-0.36,1.13l0.87,0.87l0.94,-0.05l0.84,-0.47l0.57,0.73l0.93,-0.05l1.01,-0.59l1.1,0.05l0.35,0.9l-0.76,0.43l-0.26,1.61l0.9,0.86l-0.68,0.27l-0.08,0.54l-2.05,0.12l-0.85,0.61l-2.57,-0.08l-0.38,0.74l-0.5,-0.53l-1.27,0.16l-1.27,-0.76l-0.85,0.4l-0.34,0.57l-0.99,0.28l-0.15,0.9l1.05,0.57l-0.73,0.98l-0.68,0.1l-0.09,0.68l1.75,0.79l-0.5,1.21l0.17,0.86l1.9,0.94l0.92,-0.14l0.54,0.52l1.52,0.4l-0.0,0.63l-0.37,0.23l-0.75,-0.36l-1.09,0.17l-0.92,-0.54l-0.52,0.32l-0.79,-0.25l-1.28,0.42l0.07,0.76l-1.53,1.29l-0.31,0.8l0.36,0.74l0.38,0.14l0.14,0.8l0.58,0.28l0.32,0.96l-1.54,1.31l-0.88,-0.03l-1.61,1.32l-0.46,0.0l-0.45,-0.45l1.18,-1.47l-0.18,-1.71l-1.18,-0.11l-0.75,-0.58l-1.62,0.42l-0.48,-0.39l-0.89,0.0l-0.42,0.41l-0.16,1.11l-0.48,-0.32l-0.1,-0.53l-0.8,-0.32l0.15,-0.51l-0.52,-0.74l0.32,-2.46l0.2,-0.34l0.64,-0.04l0.35,-0.55l-0.64,-0.59l-0.06,-0.88l-0.34,-0.32l0.42,-5.42l0.2,-0.56l0.99,-0.35l0.73,-1.66l0.9,-0.12l0.76,0.58l0.71,-0.31l0.41,-1.19l-0.52,-0.87l0.23,-0.88l-0.3,-0.49l0.85,-0.69l0.63,-1.78l-0.39,-1.11l-0.75,0.04l-0.85,-0.51l-0.95,0.68l-1.47,1.98l-1.04,-0.05l-1.27,0.53l-0.74,0.74l-1.55,-0.59l-0.9,0.36l-1.04,0.95l-0.73,-0.81l-0.1,-0.72l-2.99,-2.09l0.47,-1.05l-0.56,-1.18ZM219.29,461.17l0.19,-0.24l0.28,-0.0l-0.32,0.48l-0.15,-0.24ZM225.12,457.16l-0.02,0.03l-0.0,0.0l-0.01,-0.01l0.03,-0.03Z",
            "name": "Chelyabinskaya oblast"
        },
        "RU-YAR": {
            "path": "M94.01,420.71l0.32,-0.33l-0.19,-0.59l0.39,-0.75l0.53,-0.15l0.19,-0.41l-0.75,-1.18l-0.88,-0.28l0.18,-1.29l1.29,-0.64l0.37,-1.75l0.79,0.08l0.74,-1.09l2.05,0.27l0.7,-0.63l1.77,0.25l0.7,-1.33l-0.23,-0.63l0.4,-0.11l2.54,0.6l0.83,0.58l0.26,0.57l0.65,0.12l1.19,2.08l1.98,-0.03l0.5,-0.38l1.39,0.16l0.9,1.92l-1.28,1.39l-0.07,0.64l-1.39,2.06l0.15,3.17l-0.6,0.06l-0.69,0.88l0.17,1.85l-0.98,0.1l-0.19,0.67l-1.53,0.34l-0.4,0.7l-1.58,0.92l0.04,0.69l-0.73,1.06l-0.48,1.66l0.06,0.94l-0.7,-0.37l-0.65,0.46l-1.23,-0.62l-0.73,0.29l-1.19,-1.12l-0.76,-1.15l0.48,-2.22l-0.53,-1.03l0.76,-0.7l-0.12,-1.09l-0.51,-0.31l-0.82,0.29l-1.02,-0.65l-0.05,-1.69l-2.04,-2.29Z",
            "name": "Yaroslavskaya oblast"
        },
        "RU-TUL": {
            "path": "M86.25,458.33l1.31,-1.9l-0.16,-0.71l0.28,-0.42l0.67,0.07l0.49,-0.69l1.92,0.07l0.51,-0.29l0.26,-1.25l-0.7,-1.2l1.18,0.3l0.77,-1.5l0.1,-1.02l0.56,0.06l0.59,0.72l0.93,0.27l0.6,-0.29l0.25,-0.82l0.83,1.12l2.12,0.65l-0.59,0.63l0.06,0.63l0.64,0.89l0.04,0.7l0.8,0.61l0.21,2.01l0.51,0.69l-0.03,1.32l0.57,0.44l-0.13,1.09l-0.73,0.21l-0.26,0.44l0.22,1.08l-1.15,0.38l-0.15,0.65l0.5,0.53l0.16,0.93l-1.08,0.65l-1.14,-0.57l-1.39,-0.02l-0.6,-0.59l-0.54,0.03l-0.17,-1.41l-1.41,-0.2l-0.76,0.49l-1.05,-0.48l-0.88,0.1l-0.63,-0.99l-0.57,-0.13l-0.35,0.26l-0.49,-0.28l-0.73,-1.05l-1.14,-0.26l0.24,-0.86l-0.57,-0.47l0.06,-0.6Z",
            "name": "Tulskaya oblast"
        },
        "RU-IRK": {
            "path": "M399.76,454.02l0.33,-0.42l0.87,0.01l0.7,-1.34l1.21,-0.02l0.85,0.44l0.7,-0.19l0.1,-1.84l0.71,-1.53l0.02,-0.73l-0.46,-0.72l0.32,-0.53l0.09,-1.46l0.87,-0.35l0.28,-0.52l-0.81,-3.93l1.02,-0.91l0.12,-1.28l0.61,-0.73l1.2,0.41l0.57,-1.01l0.59,-0.32l0.07,-1.76l1.21,-0.07l0.44,-0.39l0.02,-1.48l-0.6,-0.79l0.02,-1.59l-0.65,-0.44l-0.91,0.06l0.72,-0.81l0.03,-0.46l-0.86,-0.31l-0.45,-0.56l2.91,-6.99l3.8,0.35l0.64,0.56l0.67,0.04l0.74,-0.47l1.85,-0.32l1.41,-2.71l1.45,-0.03l0.28,1.81l1.13,1.34l0.38,1.9l1.37,0.86l0.43,0.65l0.6,0.0l0.94,-0.53l0.27,-0.51l-0.02,-0.91l-0.73,-1.0l0.37,-0.81l-0.19,-0.69l0.8,-0.35l0.68,-1.01l-0.02,-1.3l0.71,-0.84l1.29,-0.13l0.91,-1.98l2.55,-1.01l0.73,-1.25l1.08,-0.88l0.31,-1.08l-0.81,-2.71l0.45,-0.8l1.35,-0.15l0.82,-0.9l0.95,0.34l0.82,2.22l0.91,0.58l0.34,0.7l0.61,-0.03l1.04,0.53l-0.43,0.99l0.17,0.31l0.63,0.13l1.2,-0.35l0.77,0.51l0.41,0.96l0.46,0.14l1.93,-0.79l0.5,-0.82l-0.44,-1.19l1.72,-1.7l1.14,-0.6l-0.03,-1.44l-0.64,-1.07l0.06,-1.39l-0.45,-0.63l-0.92,0.12l-0.49,-0.59l-0.29,-1.34l0.94,-0.58l0.48,-0.8l1.24,0.35l0.86,-0.4l-0.21,-0.86l0.28,-1.18l-0.34,-1.01l0.27,-1.56l-1.13,-0.77l-2.1,-0.01l-1.02,-1.02l-0.73,-2.33l0.35,-1.19l-0.67,-0.73l0.8,-0.51l0.03,-1.87l0.92,-1.0l1.03,-0.26l-0.45,-2.18l1.6,-0.28l0.72,-1.27l0.89,-0.37l0.6,-0.75l0.8,0.09l0.83,-0.97l-0.31,-1.42l1.54,-1.76l1.16,-0.56l0.23,-2.4l-0.42,-0.45l1.73,-2.08l-0.14,-0.91l0.68,-0.67l-1.52,-1.21l0.08,-0.62l-0.45,-1.14l-1.15,-0.72l-0.42,-1.34l0.67,-0.08l0.65,-0.58l0.02,-2.14l1.29,0.1l0.49,-1.11l-1.13,-1.6l0.86,-1.25l-0.26,-0.99l0.85,-1.69l-0.54,-1.39l1.48,1.12l0.65,-0.21l0.32,-0.57l0.48,0.96l1.36,0.16l0.43,-0.44l0.26,-1.14l2.2,0.1l1.02,-0.34l0.35,-0.78l-0.53,-2.06l0.59,-0.51l0.26,1.1l-0.18,0.72l1.25,1.62l-0.24,0.76l0.37,0.53l-0.17,0.41l-0.87,0.04l-0.7,-0.37l-0.62,0.33l-0.22,1.73l-0.76,0.57l0.01,0.78l0.51,0.49l2.08,-0.41l1.6,0.72l0.84,-0.14l1.05,2.13l0.47,0.26l0.33,1.03l0.18,3.47l0.89,1.08l-0.82,0.71l-0.57,1.81l-0.68,0.41l0.11,0.7l1.31,1.48l2.03,-0.02l0.42,1.14l-0.26,0.54l0.34,0.67l-2.12,3.38l0.17,1.92l1.27,1.94l-0.39,2.35l0.53,0.5l1.08,0.24l0.63,1.29l1.48,-0.08l-0.23,1.43l-1.18,1.79l0.15,1.26l-1.1,0.33l0.33,0.89l-0.97,1.28l0.05,0.73l-1.1,1.91l-0.21,1.27l0.3,0.99l-1.31,2.62l0.1,1.3l-1.33,1.84l0.22,0.57l-0.31,0.45l0.11,0.7l1.2,0.49l0.18,0.82l0.51,0.37l0.21,1.08l0.51,0.07l0.63,0.82l0.57,-0.26l2.01,0.2l0.41,-0.49l0.6,-0.01l0.49,-0.4l0.68,-1.88l2.28,0.71l1.4,-0.81l1.27,0.59l0.75,-0.68l1.02,-0.11l1.17,-1.9l0.05,1.6l1.51,0.0l-0.69,1.08l-0.09,2.45l0.33,0.87l0.54,0.12l0.79,-1.11l-0.1,-0.54l0.56,-0.56l0.89,-0.49l1.8,-0.2l1.18,-1.16l0.2,-1.07l-0.25,-0.48l0.89,-1.0l-0.01,-0.67l0.71,-0.27l0.56,-0.76l0.78,-0.01l0.3,-0.63l0.62,-0.25l0.69,-1.29l1.4,-1.32l-0.11,-1.16l0.6,-0.79l0.33,0.2l0.54,-0.2l0.91,-0.84l0.47,-1.24l0.65,-0.56l2.15,-0.77l0.59,0.55l0.86,0.15l0.39,0.51l2.69,0.52l1.9,2.03l0.3,1.1l0.49,0.39l-0.39,0.94l0.86,0.99l-0.17,1.48l-0.54,0.95l0.92,0.79l2.06,0.67l0.74,-0.5l0.31,0.68l0.58,0.13l0.52,-0.26l0.58,-1.25l0.88,-0.21l0.41,0.87l1.74,1.02l0.24,1.01l-0.61,0.95l0.1,1.4l0.33,0.65l0.42,0.13l-0.33,0.96l0.55,0.84l-0.08,1.05l-0.53,1.04l0.33,0.53l1.53,0.9l-0.33,1.02l0.28,0.83l-2.03,0.55l-1.08,-0.76l-0.39,-0.84l-0.86,-0.41l-3.0,-0.14l-1.29,1.17l0.57,1.36l-0.59,-0.05l-0.28,0.38l-0.2,2.33l-1.23,0.41l-0.29,0.48l0.42,0.88l-0.13,0.95l0.79,0.44l-0.19,0.87l0.96,2.58l0.58,0.37l0.83,-0.67l0.37,0.04l-0.91,0.96l0.4,1.44l-0.56,1.01l-0.35,0.14l-0.21,-0.73l-0.45,-0.1l-1.11,1.21l-1.48,0.77l-1.09,-0.18l-1.24,-0.9l-1.12,0.36l-1.76,-1.28l2.27,-1.2l0.28,-0.56l-0.73,-1.05l-1.62,-0.1l-1.07,1.06l-0.77,0.24l-2.32,-0.08l-0.59,1.01l0.09,0.47l-1.01,1.46l-0.22,1.04l-1.31,0.02l-0.26,0.32l-1.74,-0.09l-1.01,1.41l-0.3,-0.57l-1.67,-0.83l-1.03,0.42l-2.04,-0.48l-0.75,-0.6l-0.19,-0.78l0.24,-0.66l-0.35,-0.47l-0.81,-0.06l-0.95,0.81l-0.83,-0.11l-0.81,-0.66l-1.42,0.14l-0.72,-0.66l-0.13,-0.84l-1.01,-0.22l-0.67,0.59l-0.39,1.6l-0.74,0.58l-1.86,-0.49l-0.89,0.38l-1.33,-1.01l-2.05,-0.32l-0.72,0.76l-0.59,1.83l-1.76,-0.33l-0.66,0.66l-0.81,-0.07l-1.17,0.79l-1.32,0.23l-0.15,0.61l0.23,0.22l-0.89,1.6l0.12,0.76l1.44,0.62l0.42,1.32l1.06,0.8l-0.7,-0.0l-0.74,0.89l-0.43,2.14l-0.46,0.34l-0.37,1.49l0.2,1.64l0.61,1.01l-0.45,0.94l0.04,3.46l-0.66,1.08l0.34,0.65l1.97,0.5l-3.05,5.73l-1.9,5.07l-9.7,6.56l-2.38,3.54l-1.47,1.38l-1.72,1.09l-2.41,0.89l-0.35,0.58l0.09,2.29l-0.59,-0.24l-1.51,0.27l-1.51,1.0l-0.13,-1.97l-1.44,-0.72l-1.19,0.3l-0.52,-1.1l0.05,-1.8l-2.36,-1.63l-1.13,-1.9l-0.88,-0.5l-0.65,0.19l-0.77,-0.36l-0.87,0.52l-0.16,-0.65l-2.24,-2.18l-0.25,-0.58l-3.08,-1.54l-0.24,-0.5l-1.08,-0.69l-1.11,-1.38l0.11,-0.99l-0.86,-1.45l-0.65,-0.1l-0.69,0.64l-1.12,0.06l-0.35,0.95l-1.34,0.7l-0.98,0.02l-0.66,1.16l-0.58,-0.3l0.08,-0.71l-0.84,-0.54l-1.49,-0.05l-0.49,0.41l-1.11,0.07l-0.14,-0.99l-1.42,-0.34l-0.43,-0.9l-1.69,-0.18l-1.57,-1.9l-1.15,-0.27l-1.34,-0.95l-1.65,0.58l-2.32,-2.79l-0.1,-0.83l-2.01,-1.39l0.03,-0.45Z",
            "name": "Irkutskaya oblast"
        },
        "RU-NIZ": {
            "path": "M116.92,446.86l0.43,-0.44l0.39,-1.37l0.9,-1.11l-0.36,-1.37l0.26,-0.63l0.65,-0.82l0.71,-0.21l0.82,-1.56l0.59,-0.12l0.31,-0.69l-0.08,-0.92l1.03,-0.16l0.38,-0.52l-0.28,-0.52l-0.76,-0.12l0.04,-0.74l-0.68,-0.96l0.99,-0.06l0.34,-0.36l0.14,-1.65l-0.6,-0.55l0.12,-0.76l2.46,-0.45l0.98,-0.51l1.09,-1.79l-0.94,-1.23l1.75,-1.41l0.08,-0.6l2.22,-0.87l1.4,-1.75l0.98,-0.19l0.73,-1.86l-0.37,-0.92l0.21,-0.73l1.2,-0.03l1.5,0.44l0.76,1.0l0.91,-0.41l0.59,-0.72l2.43,-0.24l0.53,0.52l4.86,-0.05l1.7,0.67l-0.91,0.98l-0.45,2.33l-0.78,-0.28l-1.29,0.74l-1.29,-0.34l-0.43,0.21l0.06,0.8l-0.39,0.36l-0.11,0.86l0.64,0.97l-0.36,0.33l0.13,1.48l-0.49,0.84l-1.29,-0.25l-0.8,0.58l-1.42,0.23l-0.46,1.13l-0.03,1.17l-0.66,0.06l-0.66,0.56l0.09,1.56l0.88,0.52l0.45,-0.06l-0.27,1.31l1.05,1.03l0.12,0.98l0.44,0.22l-0.43,0.75l0.0,1.0l-0.74,0.75l-0.14,0.78l1.19,1.6l1.09,0.46l-0.52,0.31l-0.21,1.19l-0.64,0.53l-0.27,1.54l-0.69,0.06l0.01,-0.84l-0.6,-0.72l-0.94,0.2l-0.65,0.7l-0.49,1.8l-0.62,0.14l-0.28,0.63l-0.55,0.13l-0.42,0.55l-0.18,1.81l0.24,0.31l-1.31,-0.27l-0.54,-0.57l-0.85,0.43l-0.36,-0.46l-1.29,-0.44l-0.02,-0.73l-0.7,-0.15l-0.16,-0.61l-1.3,-0.19l-0.55,-0.71l-1.1,-0.45l-1.65,0.43l-0.42,0.94l-1.89,-0.21l-0.41,0.25l-0.5,-1.91l-0.93,-0.0l-0.86,0.45l-0.46,-0.24l-0.3,-0.95l-0.78,0.17Z",
            "name": "Nizhegorodskaya oblast"
        },
        "RU-YAN": {
            "path": "M223.51,333.02l2.05,-1.4l1.74,-0.46l0.2,-0.44l-0.22,-0.61l0.34,-0.52l-0.14,-1.15l0.51,-0.52l0.67,-1.65l0.67,0.29l0.42,-0.28l-0.23,-1.26l0.81,-1.56l0.59,-0.07l1.39,-0.99l0.9,-1.33l1.62,-0.18l0.6,-0.76l0.79,-0.23l0.19,-0.85l2.74,-1.29l0.03,-2.14l0.64,-0.4l0.01,-0.89l2.31,-2.26l0.3,-0.84l1.23,-0.31l0.85,-1.29l-0.39,-1.63l-0.93,-0.07l-0.08,-0.5l1.18,0.16l0.76,-0.88l-0.05,-0.93l-0.87,-0.82l0.27,-1.88l-1.12,-0.59l-0.96,0.49l-1.51,-0.02l-0.54,-0.96l0.2,-0.95l-0.29,-1.97l0.99,-2.59l0.75,-1.04l0.21,-1.21l-0.75,-0.51l-0.54,-1.0l0.04,-0.84l-0.69,-1.38l-0.78,-0.3l-0.48,0.17l-1.58,-1.2l-0.68,0.43l-0.41,-0.19l0.28,-0.66l-0.32,-0.93l2.35,-2.56l0.26,-0.64l1.48,1.08l1.06,0.29l0.4,1.1l2.19,0.68l1.17,1.1l1.84,0.99l1.89,0.43l-0.18,0.79l0.98,1.5l0.68,0.16l1.28,1.28l1.16,1.84l1.74,0.78l0.52,0.91l-0.36,1.27l0.49,0.43l0.14,0.67l0.72,-0.06l1.87,-1.91l-0.45,-0.85l1.86,-3.68l1.0,-3.58l-0.26,-0.32l0.81,-1.14l-1.66,-0.26l-1.37,0.67l-0.99,-0.77l-2.23,-4.83l0.41,-1.17l-0.17,-2.52l-0.61,-0.1l-0.48,0.81l-0.38,-0.15l-1.12,-1.24l-1.62,-0.61l-1.59,-1.09l-0.65,0.32l0.06,0.54l-0.33,0.07l-0.11,-1.43l0.46,-2.9l0.47,0.2l1.14,-0.56l0.85,-1.94l-0.4,-1.65l-0.62,0.07l-0.18,-0.32l0.89,-3.07l-0.26,-1.65l0.62,-3.69l-0.65,-1.44l-1.01,-0.25l-1.8,0.85l-0.33,-1.11l0.81,-1.12l0.59,-1.87l-0.08,-0.59l-0.58,-0.37l0.74,-2.43l0.59,-0.09l2.81,-1.86l2.01,-1.94l1.53,-2.52l0.49,0.13l0.02,-1.07l0.8,-1.69l0.93,-3.56l1.09,-7.38l0.32,-0.62l-0.22,-0.65l0.87,-2.58l-0.32,-0.27l1.32,-1.85l0.57,-2.52l1.4,-0.24l-1.03,0.62l0.11,0.75l0.47,0.34l3.08,-0.38l5.66,0.07l1.46,-0.36l1.56,0.91l-0.37,0.27l0.3,0.7l0.54,0.2l1.06,-0.51l0.88,0.59l0.91,0.1l1.12,0.97l-0.07,0.63l0.3,0.4l-0.33,0.98l0.57,1.45l-0.22,1.79l0.41,2.16l-0.69,1.3l-0.17,1.52l-0.7,1.21l-0.28,2.05l-0.91,1.03l0.01,2.44l-0.62,0.55l-0.23,1.23l-1.04,0.35l-0.71,0.77l-0.3,1.2l0.24,0.96l1.4,2.31l2.79,2.6l-0.08,1.8l1.07,2.39l-0.32,2.53l-0.49,1.3l0.48,1.33l-0.03,1.6l-0.76,0.55l-0.99,1.74l0.2,0.88l0.77,1.07l-0.67,1.86l1.04,3.11l-0.2,1.24l-0.71,1.4l0.61,2.53l0.01,0.68l-0.59,0.16l-0.11,0.59l0.61,0.75l0.15,0.78l-0.7,0.98l-0.21,1.15l0.52,3.03l1.56,2.42l1.22,0.78l2.77,3.03l-0.84,0.77l-0.32,1.22l-1.63,2.11l0.19,0.89l-0.33,1.06l0.69,1.86l-0.01,1.31l-0.68,0.72l0.2,0.76l-1.02,0.71l-0.19,0.64l-1.51,0.33l-0.25,1.37l-0.77,0.78l0.29,1.09l-0.18,0.7l-1.01,-0.14l-0.86,0.51l-0.06,0.77l0.54,0.54l-0.17,0.61l-0.82,0.26l-0.13,0.69l0.32,0.48l-1.17,1.5l-0.91,0.04l-0.76,-0.62l-0.75,0.42l0.11,0.62l0.78,0.86l0.51,1.93l-0.13,0.62l-0.24,-0.47l-0.52,-0.05l-0.4,0.53l-0.77,-0.15l-1.26,1.06l0.06,0.55l-1.01,0.18l-1.66,-0.99l1.9,-1.02l0.38,-0.68l-0.28,-0.5l-1.08,-0.02l-0.69,0.91l-0.59,0.13l-1.01,-0.94l-0.98,-1.55l-0.54,0.14l-0.14,0.57l-0.32,0.06l-0.7,-0.36l-0.48,0.38l-0.74,-0.29l-2.31,0.3l-0.24,0.55l0.75,0.6l-0.01,1.83l0.64,0.9l1.06,0.8l1.79,0.41l0.92,0.88l2.31,1.01l5.73,-0.21l1.24,0.4l0.7,1.07l1.76,0.06l1.61,-1.14l0.21,-3.02l0.42,-0.85l2.21,-0.48l0.56,-1.16l2.52,-1.16l0.82,-1.52l0.83,-0.42l0.7,-1.63l0.19,-2.18l-0.24,-0.87l0.93,-1.65l3.29,-3.46l0.35,-1.18l0.25,-2.7l-0.54,-3.03l-2.03,-3.22l0.64,-1.64l-0.03,-2.65l0.74,-0.93l2.89,-1.43l2.32,-0.4l2.7,-1.15l1.93,0.07l0.39,1.29l-0.37,0.7l0.26,0.95l1.85,1.67l0.56,1.22l0.63,-0.02l0.36,0.46l-0.37,0.79l0.25,1.07l-0.71,1.3l0.2,0.61l0.78,0.43l-0.67,1.54l-0.14,1.71l0.57,1.14l-0.18,0.54l-0.45,-0.07l-0.43,0.35l-0.12,0.89l0.37,0.59l2.85,2.04l0.05,0.91l0.54,0.18l0.57,-0.33l0.98,0.37l1.1,-0.49l1.4,0.33l1.27,-0.47l1.26,0.45l0.73,-0.75l-1.33,-1.37l-0.99,0.15l-1.4,-0.81l-0.31,0.39l-1.17,0.15l-2.0,-1.6l-0.4,0.55l-0.64,-0.11l-0.0,-1.77l0.54,-0.51l-0.55,-0.75l0.29,-1.78l0.76,-1.14l2.02,-0.35l0.56,-0.57l-0.41,-1.43l-0.71,-0.62l-0.17,-1.76l-0.78,-0.35l-0.25,-0.73l0.07,-1.95l-0.29,-2.17l-0.38,-0.66l-1.33,-0.27l-0.85,-0.89l-1.6,-0.31l-0.99,-1.74l-0.83,-0.42l-0.83,0.18l-2.23,-1.44l-2.96,-0.29l-2.09,1.61l-0.2,0.66l-1.44,0.33l-1.13,-0.68l-1.17,-0.26l-1.91,0.89l-0.69,-0.95l0.74,-3.71l-2.0,-4.8l0.72,-1.59l0.57,-3.41l-0.31,-1.24l1.54,-2.16l1.65,-3.42l0.04,-2.52l-0.35,-0.92l-1.71,-2.14l-0.16,-1.86l-1.03,-1.65l-0.78,-2.99l-1.23,-1.51l-1.53,-1.15l2.46,-3.81l0.07,-2.51l2.08,-1.48l2.1,-0.74l3.13,-2.42l0.48,-0.87l0.44,-1.31l0.19,-2.39l-0.28,-4.41l-0.33,-1.47l-1.28,-2.31l1.08,-0.82l2.19,1.93l-0.59,0.28l-0.38,0.77l1.88,2.1l-0.5,0.24l-0.25,1.02l0.98,3.97l-0.71,0.72l-0.45,1.15l-0.03,1.38l-0.52,0.7l0.12,0.79l-0.96,0.72l-0.18,1.76l0.29,2.03l1.14,1.19l-0.55,0.69l0.7,1.14l-0.52,1.06l-0.85,0.13l-0.19,1.04l0.68,1.49l2.17,1.24l1.46,0.46l0.69,0.59l0.35,-0.39l3.36,0.52l0.13,1.65l0.69,0.23l0.33,-0.66l-0.02,-0.99l1.77,0.37l0.97,-0.21l1.28,0.78l0.16,1.55l0.41,0.77l1.74,0.58l0.9,0.79l1.05,-0.5l0.93,0.19l1.48,-0.39l0.64,-1.33l-0.31,-0.76l-0.47,-0.03l-0.46,0.41l-0.86,-0.15l-0.31,0.37l0.08,0.69l-1.0,-0.35l0.42,-1.08l-0.19,-0.8l-0.51,-0.61l-0.97,0.29l0.38,-1.82l-0.39,-0.77l-1.69,-0.27l0.49,-1.02l-0.22,-0.52l-0.67,0.02l-1.26,1.15l-0.77,-0.53l-0.54,0.1l-1.51,-1.62l-2.03,-0.64l-0.65,-1.05l-1.52,-0.65l0.0,-1.17l-1.24,-4.19l1.52,-1.21l2.56,-0.81l3.66,3.69l0.95,0.04l2.01,-0.9l0.66,-0.91l0.19,-1.2l-1.13,-2.18l-0.8,-0.52l-1.18,0.05l-1.06,0.87l-0.27,-0.34l0.57,-1.16l0.65,0.1l0.63,-0.62l0.98,-1.79l0.84,-0.67l0.62,0.07l0.54,-0.37l0.07,0.65l1.01,1.33l-0.14,1.04l1.44,1.01l0.15,0.56l0.8,0.13l0.28,0.66l0.73,0.01l1.24,0.63l1.31,-0.25l0.9,1.07l0.65,0.12l0.99,0.76l0.35,0.47l-1.14,0.42l-0.33,0.56l0.38,0.78l0.06,1.68l-0.99,0.96l-2.76,-0.1l-0.32,0.43l0.1,1.72l-0.91,0.75l-0.24,0.75l0.6,1.82l1.74,0.68l2.2,2.42l2.84,1.05l0.09,3.07l0.61,0.94l-0.46,1.26l0.84,1.19l-0.71,2.45l-1.02,0.01l-0.97,0.41l-0.73,0.84l0.02,0.6l-1.04,1.09l-0.49,-0.16l-0.45,0.26l-0.9,2.08l-0.4,-0.29l-0.57,0.1l-0.18,1.34l-0.65,0.27l-0.38,0.72l0.14,0.65l-1.49,1.54l0.98,1.6l-0.24,1.21l2.61,1.0l0.76,2.32l0.83,1.02l0.42,1.12l2.13,-0.07l2.49,0.71l1.0,1.34l0.55,0.12l1.76,-1.06l0.59,0.39l0.94,-0.35l0.46,-0.67l0.04,-1.7l0.71,1.04l-0.84,1.14l0.08,0.72l0.89,0.91l1.91,0.38l0.76,-0.22l0.11,0.54l-0.65,0.37l-0.16,0.55l0.3,0.66l0.59,0.35l0.33,2.37l1.25,0.74l0.08,0.5l1.0,0.8l-1.98,0.46l-0.81,0.8l1.09,1.46l0.1,2.55l-0.56,0.43l-0.35,0.88l-0.69,0.41l-0.1,2.96l-1.64,-0.25l-0.56,0.4l-0.63,-0.23l-0.58,0.67l0.91,2.16l1.05,0.87l-0.28,0.83l0.4,0.86l1.31,0.93l-0.65,1.37l0.29,1.16l-1.0,1.3l5.52,5.88l0.12,0.91l0.54,0.81l-1.07,0.79l0.0,2.12l0.3,0.72l1.08,0.98l0.93,1.8l-0.73,0.41l-0.52,1.14l0.36,1.09l0.85,1.12l0.03,1.15l0.57,0.77l2.17,-0.29l0.72,1.12l0.63,0.28l-0.51,0.53l0.07,0.61l1.23,0.58l0.25,0.46l0.22,0.7l-0.21,0.58l0.4,1.16l-1.42,2.38l0.39,1.21l-0.56,0.72l0.06,0.72l1.29,0.43l2.24,-0.47l-0.1,1.08l0.88,0.41l0.55,0.7l2.17,-0.96l1.16,0.5l-0.21,1.45l0.52,0.68l-0.37,1.57l0.99,2.23l-0.5,1.72l0.16,0.62l-2.18,1.43l-0.9,1.62l-0.52,1.81l-1.26,0.79l0.4,1.09l1.35,0.66l0.35,1.52l1.06,-0.18l-0.49,0.65l-0.4,1.5l0.59,1.12l-0.44,0.69l0.08,0.71l-0.94,0.58l-1.33,2.68l-0.95,1.11l-0.11,0.93l-1.87,2.41l-0.45,-0.33l-0.34,-1.17l-1.22,-0.31l-0.31,-0.88l-0.89,-1.01l-0.6,-0.05l-0.69,0.55l-0.52,-0.11l-1.04,0.66l-1.04,-0.62l-0.26,-0.82l-1.21,-0.77l0.07,-0.74l-0.37,-0.38l-2.25,-0.17l-1.08,-0.47l-1.71,1.38l-0.9,-0.92l-1.17,-0.49l-0.13,-0.66l-0.71,-0.89l-0.31,-1.67l-0.34,-0.27l-3.05,0.44l-0.21,0.96l-3.36,2.44l-0.41,2.04l-5.31,-0.11l-2.26,0.58l-1.68,1.06l-0.41,-0.86l-2.98,-1.79l-0.86,-0.89l-0.7,-2.12l-2.0,-0.87l-1.9,0.8l-0.35,-0.53l-2.43,-1.14l-0.64,0.26l-1.82,-0.18l-2.32,0.86l-1.97,-0.12l-1.47,-1.5l-4.32,-0.31l-0.9,-2.09l-0.96,-0.65l-1.03,0.5l-1.21,1.28l-2.65,-0.2l-0.97,1.11l-0.71,-0.19l-0.74,0.22l-0.34,-4.4l-1.1,-1.17l-2.26,-0.14l-0.49,-1.4l-0.9,-0.94l-0.36,-1.01l0.93,-0.98l0.24,-0.79l-0.53,-1.21l-1.33,-0.42l-0.96,-1.13l-1.65,0.32l-1.54,-1.0l-1.56,0.1l-0.99,-0.99l-1.18,-0.01l-1.08,0.58l-0.05,0.48l0.62,1.07l-0.53,0.82l-2.02,-0.82l-1.62,1.59l-1.32,0.76l-0.39,0.63l-0.42,-0.34l-1.97,-0.16l-0.74,-0.86l-1.62,-0.6l-0.04,-0.9l0.73,-1.5l-0.06,-0.72l-0.42,-0.5l-1.32,-0.57l-1.26,0.45l-2.11,-0.91l-0.84,0.32l-2.5,-0.04l-1.28,1.48l-0.79,-0.19l-1.35,0.48l-0.8,-0.13l-0.8,0.98l-2.32,0.01l-0.9,0.92l-1.08,0.13l-0.58,-0.3l0.38,-0.62l-0.29,-1.16l-1.27,-0.91l-2.06,0.34l-0.9,-0.05l-0.52,-0.48l0.21,-0.74l1.14,-1.29l0.01,-1.41l-0.68,-0.62l0.64,-1.88l0.08,-3.05l-0.38,-0.54l-1.48,-0.48l-0.47,-1.01l0.19,-0.86l-0.51,-0.5l-0.32,-1.12l-0.81,-0.71ZM301.0,235.0l1.9,-2.0l0.46,-1.49l1.29,-1.37l2.93,1.06l0.67,1.0l-2.0,1.55l-1.02,1.37l-3.24,0.4l-0.84,-0.2l-0.13,-0.31ZM297.52,219.84l1.91,0.26l0.13,0.23l-1.61,-0.15l-0.43,-0.34ZM293.94,213.85l0.37,-0.36l1.45,-0.32l-0.63,0.51l-0.18,0.89l-0.89,0.04l-0.12,-0.76ZM287.75,224.28l-1.25,-1.51l0.41,-1.24l1.16,-0.31l0.9,0.34l-0.29,3.13l-0.93,-0.41ZM264.45,221.59l0.89,-2.63l-0.54,-2.86l2.19,-1.44l0.6,0.21l1.91,-0.65l0.8,0.53l-0.26,0.3l-0.11,2.44l-0.57,0.85l0.44,0.48l1.06,-0.15l0.29,0.34l0.61,-0.39l-0.0,-0.55l0.5,-0.38l0.72,1.54l0.2,1.73l-0.48,-0.76l-0.98,-0.6l-0.65,0.68l-3.09,0.69l-1.15,0.95l-0.87,0.16l-0.6,-1.04l-0.47,0.04l-0.45,0.5ZM271.02,217.17l-0.01,-0.18l0.18,-0.36l0.09,0.33l-0.26,0.21ZM262.63,320.51l0.52,-0.64l1.49,0.44l-0.29,0.83l0.29,1.13l-0.76,0.14l-1.17,-1.04l-0.09,-0.86ZM263.03,319.69l-0.01,-0.02l-0.07,-0.06l0.05,-0.01l0.03,0.09ZM249.3,282.05l0.13,0.04l-0.02,0.03l-0.11,-0.06ZM249.41,280.97l0.56,-1.04l0.26,-0.14l-0.29,1.35l-0.54,-0.17Z",
            "name": "Yamalo-Nenetskiy avtonomnyy okrug"
        },
        "RU-KGD": {
            "path": "M2.24,449.99l-0.14,-1.32l2.48,-0.16l2.6,0.63l1.52,-0.4l0.28,-0.64l-0.28,-1.74l0.48,-0.69l0.52,0.68l0.78,0.15l2.35,1.44l1.07,-0.36l1.37,0.0l0.26,0.82l0.57,0.25l0.51,0.88l-0.77,1.21l-0.14,1.73l0.26,0.9l-14.0,-0.75l2.63,-1.89l-0.38,-0.47l-1.56,0.06l-0.41,-0.34Z",
            "name": "Kaliningradskaya oblast"
        },
        "RU-MOW": {
            "path": "M91.43,445.95l0.33,-1.05l-0.4,-0.87l0.88,0.08l0.4,-0.35l0.16,-1.22l0.88,-0.45l0.13,-2.03l1.11,0.03l0.54,0.94l-1.06,1.47l-0.36,1.51l-0.63,0.15l-0.27,0.54l0.06,1.26l-0.71,0.29l-0.33,0.56l-0.7,-0.87Z",
            "name": "Moskva"
        },
        "RU-KAM": {
            "path": "M715.03,437.96l1.53,-5.87l1.13,-1.44l1.2,-0.83l0.48,-1.06l0.76,0.0l1.69,-3.71l-0.33,-2.44l-0.64,-0.98l0.42,-0.36l1.32,0.63l1.11,-0.13l0.83,-0.72l0.65,-1.55l1.29,0.32l1.3,-0.39l0.65,0.69l0.45,-0.29l-0.29,-1.01l0.61,-0.76l3.62,-3.24l0.74,-0.03l-0.19,-0.78l0.97,-1.22l0.57,-0.24l1.25,-2.01l0.05,-1.42l0.33,-0.71l2.05,-2.28l0.69,-0.36l0.83,-1.95l1.84,-0.7l2.27,-2.61l1.03,-1.77l2.27,-1.83l0.32,-0.84l-0.11,-1.35l2.85,-2.1l0.57,0.13l0.81,-0.46l0.81,-1.16l1.0,0.0l0.49,-0.4l0.04,0.71l0.46,0.12l0.72,-1.21l1.59,-0.45l0.26,-1.11l-1.21,-0.76l0.49,-0.38l0.18,-0.78l1.35,-0.94l0.58,-1.31l-0.3,-1.25l-0.95,-0.52l0.41,-1.51l0.63,-0.11l0.35,-0.47l0.41,-6.31l2.42,-2.07l2.22,0.67l1.2,0.9l0.41,-0.54l-0.65,-1.03l1.76,0.21l0.59,-0.34l-0.32,-0.64l-2.74,-0.3l-1.69,-0.79l-0.74,-1.14l-1.13,-0.4l-2.35,0.49l-0.56,0.55l-3.0,0.58l-0.65,0.49l-0.06,0.7l-0.43,0.27l-0.02,0.51l0.59,0.68l-1.05,1.31l0.3,2.12l-0.91,2.7l0.24,0.49l1.57,0.86l-0.83,0.31l-0.41,0.56l-0.17,-1.12l-0.64,-0.43l-1.5,0.63l-0.17,-1.68l-0.62,-1.02l0.82,-0.31l0.17,-1.59l-0.32,-0.41l-1.31,-0.35l0.76,-0.61l1.36,-0.1l0.51,-0.5l0.26,-2.52l-0.4,-0.93l0.65,-1.49l-0.32,-0.47l-0.62,0.07l-0.54,-1.36l-1.4,-0.85l0.17,-1.45l1.32,-0.46l0.19,-0.57l0.81,-0.18l0.31,-1.05l-0.49,-1.31l0.8,-0.52l0.5,-0.85l0.06,-1.84l-0.6,-0.47l-0.71,-1.45l0.01,-0.27l0.75,-0.34l0.33,-1.04l-0.74,-2.3l0.46,-0.41l1.29,0.12l0.58,-1.62l1.16,-0.98l-0.6,-1.57l-0.89,-0.71l-0.02,-0.81l0.49,-1.14l-0.56,-0.78l0.92,-0.2l0.79,-1.27l0.37,0.42l1.27,0.41l0.93,-0.14l0.86,-0.58l2.78,1.79l0.23,0.79l0.51,0.35l0.95,-0.16l0.17,-1.89l0.74,0.0l0.46,1.06l0.71,0.29l0.96,-0.2l0.7,1.37l-0.08,0.65l0.57,0.49l1.08,-0.1l0.7,-0.53l0.78,0.02l2.39,0.87l1.19,-0.25l0.83,-0.82l0.63,1.42l0.67,0.29l1.18,1.63l1.93,0.74l0.77,-0.09l0.36,-0.57l1.07,0.23l0.5,1.08l0.75,0.37l0.58,2.0l1.44,0.97l0.97,0.03l0.27,0.83l0.8,0.5l0.16,1.65l-0.4,0.85l-1.4,0.65l-2.21,2.55l-1.82,2.93l0.43,0.56l2.23,1.3l0.99,-0.34l1.99,1.76l0.83,1.26l1.06,0.65l0.75,-0.02l-0.27,0.89l0.47,0.65l-0.17,0.58l1.41,2.11l0.42,0.08l0.5,-0.38l2.42,0.71l0.39,-0.37l0.91,-0.13l0.37,-0.57l1.71,0.35l1.93,-0.78l0.89,-0.93l1.23,0.71l0.95,-0.39l1.01,0.36l0.99,0.85l0.56,-0.55l1.39,-0.26l0.26,-0.5l1.31,-0.88l1.08,-0.03l0.52,0.9l0.99,0.02l-0.42,1.49l0.51,1.13l-0.0,1.1l0.39,0.48l0.88,0.02l0.57,0.71l0.1,1.02l-0.78,0.38l-0.51,-0.35l-0.61,0.06l-0.43,0.35l-0.12,1.08l-0.45,0.3l-1.23,-0.78l-0.57,0.1l-0.58,1.51l0.11,0.56l-0.77,0.26l-0.26,0.92l-0.67,0.6l-1.08,-0.85l-1.15,0.53l-0.05,0.61l1.05,0.89l-0.89,-0.5l-0.48,0.18l0.38,0.76l-0.44,0.64l-0.91,-0.39l-0.65,0.22l0.08,0.84l-0.57,-0.11l-0.16,0.47l0.92,0.83l-1.57,-0.86l-0.5,0.09l-0.02,0.5l0.91,1.07l-0.34,0.18l-0.45,-0.28l-0.47,0.37l-0.07,0.89l-0.87,-0.13l-1.04,0.47l-0.09,0.49l-0.7,-0.21l-0.3,1.72l-0.82,0.62l-2.38,0.47l0.04,0.93l-0.95,-0.25l-0.38,0.52l0.71,1.08l-0.78,0.55l-0.53,3.18l-0.38,0.22l-0.54,-0.95l-0.78,-0.39l-0.39,-0.92l0.47,-0.89l-1.06,-0.37l-0.4,-1.56l-1.74,-1.2l-0.25,-0.83l-0.57,-0.27l-0.97,0.54l-2.16,0.19l-0.85,-0.48l-1.18,0.01l-2.21,0.83l-0.69,-0.3l-0.25,0.68l-0.56,0.41l-1.11,-0.26l-0.86,1.19l-0.53,-0.69l-0.43,-0.06l-0.35,0.37l0.11,0.82l-0.67,0.3l0.01,0.57l-3.3,4.26l-0.2,-0.4l0.37,-2.16l0.59,-0.9l-0.09,-1.72l0.66,-1.33l-0.25,-0.48l-2.17,0.47l-1.97,2.12l-0.59,0.25l-0.38,-0.37l-0.4,0.27l-0.11,0.76l-0.53,0.32l-0.5,-0.4l-1.22,0.78l0.2,0.86l0.56,0.09l0.19,0.46l-0.77,1.29l-0.51,0.23l-0.5,-1.55l-1.38,-1.55l-1.05,0.24l-0.31,0.38l0.06,0.78l-2.01,-0.8l-1.45,0.11l-0.24,0.72l0.47,0.78l-0.74,-0.02l-0.95,0.84l-0.02,2.25l-1.08,0.72l-0.07,0.8l0.73,0.86l0.03,0.8l-1.07,0.32l-0.2,1.08l-1.01,0.67l0.73,1.29l-0.48,-0.07l-0.42,0.88l-0.66,0.24l-0.25,0.38l0.16,0.43l-1.56,1.57l-1.25,2.54l-0.94,3.21l0.22,1.88l0.74,0.92l1.2,0.63l-0.25,0.33l0.15,0.61l0.52,-0.02l0.83,-0.66l0.16,-1.89l0.44,-0.05l1.54,1.18l0.97,0.23l0.35,0.55l-1.11,2.22l-1.34,0.9l-0.34,1.38l0.41,2.06l-0.34,1.18l0.04,1.76l0.52,0.55l0.66,0.17l1.22,-0.26l-0.02,1.52l-0.9,-0.45l-0.65,0.89l-0.97,-0.38l-1.69,0.99l-0.09,0.8l0.64,0.54l-1.88,1.03l-0.67,0.74l-1.52,4.46l-0.16,2.2l0.35,1.9l1.67,2.87l-0.03,0.77l-1.84,1.99l-1.96,0.17l-0.93,-0.96l-2.3,0.59l-3.76,3.34l-0.87,1.86l-0.33,1.73l0.07,1.64l0.54,0.53l-0.53,-0.13l-0.28,0.28l-0.01,0.71l0.74,1.29l-1.59,0.16l-1.09,0.73l-0.57,0.01l-1.5,0.84l-1.15,1.21l-0.81,-1.18l-1.09,0.48l-0.12,1.28l0.49,0.43l0.55,-0.17l-0.73,1.01l0.52,0.59l-0.65,-0.04l-0.26,0.45l0.54,1.2l-0.45,0.59l0.48,1.1l-1.05,1.35l-0.24,1.5l-1.91,2.61l-1.89,1.3l-0.43,1.03l-2.97,2.84l-0.36,-1.45l-0.9,-0.75l-0.19,-5.43l-0.62,-3.92l0.41,-0.69l-0.14,-0.43l-0.83,-0.57l-0.79,-2.83l-0.92,-8.16l-1.71,-9.3l-0.29,-4.24l0.79,-6.54ZM753.92,433.93l0.47,2.7l-1.15,0.69l-0.47,0.71l-1.28,-1.56l0.5,-0.86l0.84,-0.3l1.08,-1.37ZM752.85,409.28l0.11,0.04l-0.08,0.1l-0.03,-0.13ZM736.43,463.67l0.03,0.06l0.04,0.06l-0.13,-0.07l0.05,-0.05ZM768.55,444.94l1.01,0.34l0.09,1.34l1.04,1.76l0.76,0.68l-0.64,-0.09l-0.75,-0.87l-0.6,-1.56l-1.06,-1.38l0.15,-0.21ZM771.55,449.18l0.13,0.17l-0.02,0.1l-0.11,-0.27ZM756.74,412.61l1.32,-3.29l1.81,-0.9l0.98,-1.02l0.73,1.58l-0.3,1.24l-2.39,0.45l-2.16,1.95ZM759.49,410.74l-0.0,0.0l-0.0,-0.0l0.0,0.0Z",
            "name": "Kamchatskiy kray"
        },
        "RU-BU": {
            "path": "M415.54,471.44l-0.05,-0.59l0.85,-0.98l-0.14,-0.54l0.74,-0.68l-0.24,-1.79l1.48,0.46l1.01,-2.22l1.53,-0.21l1.11,-0.76l-0.07,-0.68l0.97,-0.02l0.55,-0.34l0.57,0.72l-0.14,0.92l1.32,1.74l1.12,0.74l0.35,0.59l2.98,1.46l1.25,1.91l0.96,0.59l0.49,0.97l0.79,0.18l0.53,-0.52l1.71,0.36l1.23,2.0l2.21,1.47l-0.19,1.54l0.89,1.65l0.47,0.14l1.12,-0.38l0.84,0.4l-0.03,2.1l0.46,0.4l2.15,-1.26l2.31,-0.07l0.37,-0.82l-0.17,-2.06l2.32,-0.87l1.82,-1.15l1.63,-1.52l2.3,-3.45l9.8,-6.67l1.98,-5.21l3.05,-5.72l0.22,-0.76l-0.22,-0.35l-1.9,-0.53l0.67,-3.08l-0.38,-1.15l0.48,-1.11l-0.02,-0.65l-0.64,-0.81l-0.12,-1.2l0.27,-1.03l0.45,-0.42l0.37,-2.1l0.45,-0.52l1.18,0.18l0.54,-0.96l-0.27,-0.55l-1.18,-0.31l-1.02,-2.0l-1.15,-0.36l0.83,-2.1l1.48,-0.35l0.35,-0.44l0.97,-0.03l0.49,-0.6l1.25,0.38l0.71,-0.13l0.77,-0.93l0.09,-1.17l0.53,-0.45l0.77,0.46l0.74,-0.02l1.14,0.91l1.01,-0.31l2.22,0.47l1.34,-1.02l0.12,-1.17l0.44,-0.61l0.14,0.76l1.13,1.13l1.57,-0.32l0.62,0.61l1.3,0.17l0.99,-0.81l0.19,1.53l0.97,0.88l2.58,0.67l0.93,-0.43l2.01,1.38l0.77,-0.26l0.66,-1.25l1.44,0.28l1.97,-0.54l0.47,-1.42l1.02,-1.46l0.11,-0.98l1.22,0.21l1.77,-0.41l0.95,-1.03l1.25,0.24l-1.96,1.08l-1.09,1.09l-0.11,1.67l-0.79,0.57l-0.08,0.72l0.46,0.52l0.84,0.15l0.27,0.9l-0.23,1.49l0.56,1.34l-0.14,1.14l0.67,1.07l-0.28,2.2l0.29,0.42l0.27,2.46l1.09,0.5l1.35,-0.19l0.38,1.22l1.71,1.24l0.56,2.27l-1.02,2.32l-0.95,0.27l-1.56,-0.19l-3.03,0.91l-0.68,0.46l-0.14,0.61l-1.62,1.07l-1.52,1.96l-1.36,0.39l-0.62,0.86l-0.72,0.09l-0.19,0.4l-1.74,0.39l-0.31,0.55l-0.74,0.4l-0.17,0.59l0.47,0.68l-0.3,0.61l0.07,0.84l0.58,0.47l0.24,0.97l0.96,0.43l-0.2,0.96l0.75,0.12l-0.01,0.25l-0.31,0.4l-0.01,1.06l-0.57,0.91l-2.49,1.79l-1.73,0.06l-1.71,1.15l-1.98,-0.07l-0.79,1.1l-1.12,-0.69l-0.77,0.23l-2.14,2.7l-0.99,0.69l-2.23,0.79l-1.15,1.13l-0.02,0.59l-0.63,0.63l-0.97,-0.09l-0.72,-0.6l-1.68,-0.21l-2.21,1.4l-1.74,0.61l-0.84,-1.06l-0.52,0.05l-0.4,0.45l-1.63,-0.58l-0.42,0.12l-1.39,2.28l1.13,1.21l-1.09,0.38l-0.56,1.75l-0.98,0.91l0.53,0.99l1.73,0.76l0.26,0.38l-1.55,0.41l-0.41,0.56l-0.95,0.27l-0.3,0.77l-0.85,0.75l0.02,1.2l-2.49,-0.23l-1.16,-1.56l-1.72,-1.1l-2.3,0.27l-1.27,-0.88l-3.43,-0.63l-1.42,0.72l-0.99,-0.02l-2.65,0.74l-1.49,1.25l-1.64,-0.32l-0.88,0.44l-0.86,-0.48l-0.71,-0.0l-0.52,-0.85l-1.41,-0.04l-1.57,-0.78l-0.7,-0.98l-0.8,-0.23l0.16,-1.23l-0.59,-0.69l0.11,-1.33l-0.44,-1.04l0.23,-1.82l-0.79,-0.78l-3.0,-0.9l-0.9,0.2l-4.31,-2.28l-3.11,-0.2l-1.14,-1.13l-2.03,-0.46l-1.58,-0.96l-0.34,-1.14l-1.27,-0.97Z",
            "name": "Buryatiya, Respublika"
        },
        "RU-KEM": {
            "path": "M341.19,439.54l0.31,-0.74l-0.2,-0.74l1.62,-0.71l0.98,0.2l0.74,-0.87l0.77,0.27l1.62,-0.25l0.33,-0.47l-0.3,-0.49l0.73,-0.29l0.17,-0.61l1.47,-0.63l0.59,-1.16l0.73,0.73l1.5,-0.76l1.79,0.87l0.86,-0.2l0.3,-0.96l0.79,0.41l0.66,-0.37l1.48,1.01l3.16,-2.6l0.83,0.31l0.17,0.68l-0.68,0.12l-0.24,0.43l0.14,0.82l0.49,0.29l-0.16,0.63l0.82,0.84l1.61,0.77l0.01,0.62l1.09,1.35l0.24,1.41l0.43,0.47l-0.08,0.42l-1.5,0.77l-2.03,1.68l-1.65,2.53l0.87,2.58l0.58,0.61l0.04,0.65l0.42,0.24l-0.62,0.6l-0.38,2.62l-0.86,0.46l-0.07,0.53l1.26,1.11l1.54,-1.09l0.58,0.97l0.42,0.09l0.35,-0.35l0.15,0.41l-0.13,0.56l-0.79,0.39l-0.26,0.59l0.49,1.2l0.57,0.19l0.17,0.72l-0.86,0.41l-0.21,0.82l-0.87,0.73l0.09,1.06l-0.54,1.14l0.43,0.49l0.61,-0.24l0.45,0.78l-0.05,0.91l-0.66,0.8l-0.04,0.71l1.09,0.51l0.11,0.63l0.47,0.2l-0.93,0.82l0.31,0.81l-0.28,0.42l-1.95,1.75l0.13,0.7l-0.96,0.51l0.32,-1.83l-0.34,-0.48l-1.17,0.29l-1.59,-1.11l-1.36,0.72l-1.11,-0.35l-0.32,-0.75l-0.63,0.0l-0.12,-0.84l-1.09,-1.02l0.34,-0.49l0.21,-1.71l-0.92,-0.23l-0.86,-0.82l0.66,-0.39l0.65,-1.03l0.11,-1.31l-0.33,-0.19l-1.05,0.31l-0.96,-0.45l-0.78,-1.18l-0.12,-0.92l-1.35,-1.88l-1.1,-0.53l-1.78,-1.73l-0.88,0.14l-1.32,-2.29l-0.6,-0.16l-0.35,-0.62l0.36,-0.46l-0.24,-0.81l0.41,-1.36l-0.94,-1.02l0.12,-1.62l-0.43,-0.65l0.22,-1.32l-0.61,-0.55l-0.17,-1.81l-0.73,-0.75l0.11,-1.15l-0.52,-0.48Z",
            "name": "Kemerovskaya oblast"
        },
        "RU-CHU": {
            "path": "M725.49,308.63l0.52,-1.97l0.4,-0.27l1.1,0.22l1.23,-0.6l-0.37,-1.57l-1.02,-0.31l-0.0,-0.27l0.7,-0.78l0.31,-1.52l0.7,-0.46l1.01,-0.39l1.64,-0.05l0.94,-0.66l2.24,-0.66l1.13,0.43l0.43,-0.27l0.1,-0.7l5.89,-0.33l2.12,-1.57l1.56,0.54l2.36,0.26l1.34,0.66l0.93,-0.75l0.38,-2.38l0.74,-1.49l-0.67,-2.34l0.72,-0.24l0.6,-1.25l-0.52,-1.17l-1.13,-0.93l-0.14,-1.29l0.69,-0.34l0.76,-1.11l-1.31,-1.83l-0.23,-1.19l-0.51,-0.41l0.12,-0.6l-0.52,-1.03l0.68,-1.74l1.46,0.35l2.03,-0.98l1.52,0.5l1.65,-0.1l1.32,-1.16l0.75,1.2l1.08,0.95l2.24,0.91l2.46,-0.44l1.97,0.03l2.07,1.06l2.93,-0.12l0.39,0.56l1.13,0.0l3.51,-3.12l0.81,-1.1l0.34,-0.0l0.69,0.8l-0.26,0.87l1.65,1.51l-0.31,2.52l0.61,2.2l0.68,0.42l2.33,0.44l1.58,1.21l1.02,0.32l0.42,3.32l1.02,1.14l3.95,-0.63l1.32,1.06l0.5,-0.05l-0.23,-1.24l-0.53,-0.59l0.3,-0.2l0.4,0.91l0.47,0.14l0.27,-0.4l-0.13,-1.51l1.17,-1.16l0.92,-0.06l0.31,-0.49l-0.74,-0.41l-0.22,-1.18l-0.44,-0.5l0.08,-1.88l-0.87,-1.35l-0.76,-2.97l-0.82,-0.41l-1.46,0.25l0.31,-0.94l1.82,-1.09l-0.24,-2.95l0.18,-2.27l3.48,0.62l3.62,1.24l3.75,0.23l0.53,1.01l1.71,0.94l-0.08,0.68l0.44,0.34l1.32,-0.25l0.5,-0.68l-0.2,-0.84l-0.72,-0.69l0.37,-0.04l1.59,1.46l0.34,-0.25l0.9,0.24l0.49,-0.52l5.3,0.62l2.07,-0.38l2.26,1.44l0.87,0.12l0.59,-0.29l1.45,0.46l1.18,1.16l1.42,0.69l2.02,0.28l1.05,0.5l0.17,0.55l3.24,1.54l0.47,-0.03l0.44,-0.56l1.57,0.79l-0.41,0.51l0.2,1.39l0.52,0.28l1.83,-0.16l0.78,0.29l1.58,1.87l-0.11,0.58l1.17,1.67l1.35,0.2l1.53,0.92l1.19,0.03l0.8,1.49l2.38,0.81l0.52,0.63l0.3,2.43l3.38,1.62l0.25,1.04l-0.51,0.79l0.16,0.6l0.82,0.03l0.25,-0.56l1.09,-0.47l-0.49,0.23l-0.18,0.6l0.67,0.92l0.59,0.18l1.14,-0.7l0.43,1.25l0.61,0.29l0.59,-0.19l1.43,1.15l-0.35,1.12l1.51,1.29l2.33,0.12l-0.35,1.41l-0.89,0.24l-0.25,0.47l0.8,1.13l0.76,0.36l0.67,-0.09l0.3,0.62l1.44,0.03l0.31,-0.87l-1.03,-0.83l-0.2,-0.8l0.3,-0.32l2.1,1.51l0.57,2.77l-0.83,0.84l0.09,0.78l1.46,0.3l0.94,-0.77l0.51,0.63l-0.45,0.63l-0.27,2.6l1.12,4.11l-1.18,0.88l-0.25,0.62l1.02,1.25l0.72,0.01l1.1,0.73l-0.15,2.93l0.22,0.49l1.05,-0.09l1.24,-2.35l0.25,1.04l-0.44,0.62l-0.07,1.0l0.42,0.59l0.54,-0.2l1.46,-1.91l0.16,-1.13l-0.8,-1.1l-1.92,-0.63l1.13,-0.76l0.36,-0.75l-0.55,-3.81l-0.83,-0.53l-0.22,-0.59l2.06,0.1l0.8,-0.36l0.44,0.8l0.43,0.13l0.49,-0.56l-0.26,2.83l0.59,0.52l1.0,-0.11l0.36,-0.38l-0.36,-1.05l2.16,0.71l1.67,-0.51l0.26,-0.67l2.98,0.3l0.0,1.07l1.6,1.25l0.12,1.26l2.66,2.21l1.5,1.99l0.47,0.22l-0.33,0.59l-0.62,0.06l0.15,0.67l0.93,0.27l1.09,-0.87l0.49,0.68l-1.03,0.12l0.1,0.5l1.22,0.68l0.54,-0.29l0.52,0.23l0.57,-0.19l0.64,0.76l-0.38,0.44l-0.55,-0.48l-0.64,0.1l-3.39,2.39l0.09,0.76l0.25,0.04l-0.07,2.34l-1.09,-0.19l-1.42,-0.92l-1.36,-1.58l-0.41,-0.19l-0.57,0.39l1.09,2.42l1.12,0.45l0.35,0.49l-0.13,0.81l-0.92,-0.63l-2.32,0.38l-1.17,-0.32l-0.72,-0.58l-0.48,0.16l-0.39,-1.22l-0.63,-0.35l-1.73,-0.38l-1.27,0.15l0.1,0.84l0.72,0.3l0.27,0.5l1.29,0.41l-0.24,1.22l0.39,0.77l0.93,0.21l-0.04,1.22l-0.57,-0.19l-1.03,0.27l-0.66,-0.25l-0.39,0.34l-0.04,0.61l0.99,0.66l1.75,-0.05l-0.4,0.71l0.33,0.73l0.44,0.06l-0.97,1.05l-1.32,0.36l-0.9,0.85l-1.36,-0.04l-0.8,1.08l-0.19,0.54l0.46,0.27l1.19,-0.73l0.47,0.37l-1.42,0.93l-0.09,0.47l0.8,0.26l-0.42,0.74l0.44,0.4l0.91,-0.53l1.36,0.49l0.66,1.13l-0.88,0.39l-0.96,-1.41l-1.12,0.13l-0.45,0.29l-0.12,0.56l0.66,0.43l0.39,-0.13l-0.09,0.66l-0.3,-0.09l-0.4,0.39l0.06,0.56l-0.45,0.18l-1.02,-0.52l0.56,-1.4l-0.12,-1.18l-0.71,-1.21l-0.44,-0.2l-0.31,0.37l0.25,2.36l-0.85,0.74l-1.72,-0.91l-0.23,-1.3l-1.46,-1.18l0.08,-0.5l-1.78,-0.74l0.33,-0.98l-0.63,-1.32l-0.63,0.24l-0.09,0.9l-0.34,0.03l-0.44,-0.7l-0.51,0.18l-0.21,1.04l-1.26,-0.22l0.02,-0.58l-2.12,-1.33l-0.29,-0.46l0.34,-0.48l0.09,-1.72l-0.68,-1.06l-0.17,-1.86l-0.89,-0.86l-4.94,-2.0l-1.41,0.57l-1.23,1.51l-4.3,-0.04l-0.77,-0.3l-0.2,-0.27l0.61,-2.12l-0.11,-0.52l-0.56,-0.75l-0.6,0.09l-1.23,-1.75l0.04,-0.61l0.95,-0.38l0.05,-1.06l0.61,-0.11l0.37,-0.53l-0.14,-1.82l0.34,-1.5l-0.52,-0.44l-0.99,0.67l-0.58,1.79l-0.58,0.55l-0.78,-0.98l0.23,-0.69l-0.29,-1.24l-0.2,-0.33l-0.64,-0.06l-0.17,1.28l-0.72,-0.45l-0.56,0.47l0.95,2.25l-1.01,0.23l-0.65,-0.85l-0.58,0.05l-0.84,3.32l0.47,2.16l2.3,2.1l0.15,1.11l-1.13,1.48l-0.2,2.1l-0.55,0.91l-1.22,0.92l-0.97,0.18l-0.78,0.55l-1.54,2.36l-1.22,0.19l-2.12,1.55l-0.66,-0.25l-1.82,0.42l-0.46,-0.29l-1.16,0.1l-1.72,-0.47l-0.81,-1.13l-0.19,-1.25l-1.12,-0.36l-0.47,-1.07l-1.37,-0.7l-1.73,0.62l-1.09,-0.72l-0.82,1.08l0.15,0.22l1.35,0.62l1.99,-0.57l1.31,1.51l0.22,0.76l-0.76,0.24l-0.92,-0.83l-1.27,-0.26l-0.76,0.59l-1.36,-1.25l-1.2,-0.47l-1.65,2.0l-0.79,-0.17l-1.27,0.42l-1.5,0.0l-1.58,1.11l-1.8,0.15l0.25,0.64l0.55,0.2l1.52,-0.19l1.55,-0.95l0.99,0.15l1.41,-0.41l0.59,0.2l1.15,-0.65l0.83,-1.21l1.43,2.24l-1.28,0.72l-0.31,1.13l0.16,0.43l0.69,-0.17l0.34,-0.69l0.81,-0.19l0.44,-0.61l0.73,0.59l0.3,0.71l0.53,0.09l1.31,-1.73l1.94,-0.71l-0.63,2.34l0.53,1.78l1.32,1.6l1.71,1.11l1.13,0.1l0.42,-0.4l-0.4,-0.57l0.5,-0.37l0.84,2.28l-0.59,0.64l-0.1,0.83l0.34,0.42l1.27,0.28l0.31,2.56l-0.54,-0.08l-0.54,0.6l-0.9,0.02l-0.53,0.63l0.06,0.62l0.74,0.66l0.95,-0.61l0.61,0.12l0.04,0.4l-0.66,0.86l0.14,0.49l0.95,0.31l0.98,1.13l1.52,0.66l0.61,0.75l0.09,0.44l-0.7,0.46l-0.22,0.71l0.52,1.39l1.06,0.5l0.34,1.48l-0.25,0.58l-0.65,0.37l-0.26,1.0l-1.18,0.26l-0.25,0.73l0.14,1.0l-5.17,-2.41l-3.62,-0.46l0.04,-1.38l0.57,-0.43l0.06,-0.73l-0.87,-0.14l-0.64,0.59l-1.25,-1.23l-0.47,0.52l0.29,1.09l-0.53,1.02l0.58,1.11l-0.98,0.38l-0.3,-0.36l-0.42,0.09l-2.1,2.51l-3.32,1.39l-1.13,0.8l-0.32,-0.34l-0.74,0.02l-0.28,1.45l-1.65,0.73l-1.08,-0.37l-0.36,0.42l-0.89,-1.56l-0.49,-0.11l-0.42,0.31l-0.11,-1.13l-0.49,-0.88l0.42,-0.6l-0.09,-1.38l-0.4,-0.31l-0.81,0.05l-0.37,-0.7l-0.86,-0.32l-1.19,0.07l-1.78,1.47l-1.22,0.08l-0.44,0.39l-1.55,-0.9l-1.07,0.34l-0.39,-0.45l-1.03,-0.21l-1.37,1.03l-1.66,0.69l-0.45,-0.47l-0.85,-0.15l-1.1,0.34l-0.26,0.62l-0.65,0.25l-2.13,-0.59l-0.66,0.26l-1.22,-2.59l0.45,-1.19l-0.15,-0.34l-0.52,-0.26l-0.91,0.18l-0.81,-0.5l-0.66,-1.1l-2.2,-1.95l-1.19,0.24l-1.97,-1.16l0.55,-0.79l0.65,-0.21l0.44,-1.29l2.07,-2.47l1.58,-0.71l0.08,-0.66l0.51,-0.49l-0.33,-2.22l-0.88,-0.66l-0.24,-0.99l-1.37,-0.12l-1.09,-0.73l-0.45,-1.92l-0.88,-0.44l-0.65,-1.23l-1.65,-0.45l-1.03,0.72l-0.95,-0.71l-0.64,0.03l-0.95,-1.56l-0.62,-0.13l-0.8,-1.66l-0.72,-0.02l-0.89,0.84l-0.91,0.13l-2.31,-0.81l-1.14,-0.03l-1.02,0.56l0.07,-0.34l-0.79,-0.88l-0.38,-1.01l-1.7,-0.23l-0.63,-1.06l-1.67,0.14l-0.19,0.35l0.05,1.24l-0.14,0.26l-0.39,-0.94l-1.89,-1.38l-1.66,-0.75l-1.58,0.82l-1.37,-0.77l-0.75,0.05l-0.88,1.36l-0.68,-0.08l-0.66,0.46l-0.25,1.65l-1.28,-0.13l-0.89,-1.01l-1.42,0.02l-2.45,-0.98l-0.52,-1.96l-1.52,-1.03l-0.75,-0.92l-1.54,-0.42l-2.38,0.12l-1.73,-2.47l-0.06,-1.01l-0.86,-0.93l-1.09,-0.22l-2.34,-1.6l-2.29,-1.04l0.12,-1.59l1.39,-3.27l0.01,-1.02l-0.4,-0.55l-1.97,-0.61l-1.84,-1.81l1.23,-2.02l0.37,-1.39l1.06,-1.01l-0.59,-1.98l0.08,-0.76l-0.69,-1.25l-1.31,-0.85l-0.55,-0.04l-2.46,-1.97l-0.32,-0.73l0.51,-1.37l-0.98,-1.36ZM813.52,377.63l0.56,0.79l-0.29,0.15l-0.36,-0.62l0.08,-0.31ZM881.47,345.18l0.68,-0.88l1.06,0.41l-1.05,0.48l-0.69,-0.01ZM836.22,259.72l-0.84,-3.28l1.28,-2.61l1.57,-1.27l1.88,-2.31l1.07,-0.32l0.73,-0.91l1.04,-0.19l0.66,-0.69l2.26,0.39l1.22,-0.7l3.34,0.92l0.9,0.99l0.81,0.23l0.18,0.98l2.91,2.51l-0.89,1.56l-1.39,1.15l-1.34,0.05l-0.69,0.42l-2.88,0.51l-2.06,1.03l-0.96,-0.01l-0.97,-0.77l-1.91,-0.43l-1.83,1.88l-2.69,-0.07l-1.4,0.93ZM790.11,277.0l0.08,-0.06l0.28,-0.1l-0.2,0.28l-0.16,-0.12ZM780.71,273.06l5.63,2.12l-0.11,0.93l-0.69,0.4l0.14,1.57l-0.43,0.98l-1.39,0.06l-3.49,-1.82l-0.51,-0.92l-1.48,-0.81l1.06,-1.65l1.27,-0.86Z",
            "name": "Chukotskiy avtonomnyy okrug"
        },
        "RU-ULY": {
            "path": "M138.43,456.43l0.47,-0.88l1.8,-0.36l2.1,-1.19l-0.15,-0.91l-0.78,-0.25l0.22,-0.45l-0.42,-1.52l1.37,0.73l1.14,-0.52l0.92,0.23l0.35,1.15l0.38,0.29l1.37,-0.42l0.65,-1.06l0.86,0.11l0.78,-0.82l2.06,1.04l2.15,-0.24l0.9,-1.26l1.27,-0.56l0.63,0.57l0.7,2.04l1.03,-0.03l1.54,0.53l0.78,1.6l-0.22,2.01l-1.2,0.76l-0.15,0.55l-0.71,0.02l-0.48,0.4l-1.2,-0.33l-0.74,0.24l-1.29,-0.14l-1.09,1.23l-2.16,-0.33l-0.02,0.87l-0.53,-0.06l-0.34,0.42l0.28,1.37l-1.4,-0.11l-0.86,1.33l1.25,2.16l-0.01,0.95l0.51,0.52l1.51,0.2l0.11,0.39l-0.44,0.44l-1.89,-0.02l-0.77,0.61l-0.71,0.1l-0.43,0.97l-0.78,-0.16l-0.73,0.39l-0.94,0.02l-0.48,-0.34l-0.45,0.21l-0.88,-0.45l0.78,-0.53l0.07,-0.38l-0.33,-0.88l0.28,-2.58l-0.37,-1.51l-1.33,-1.41l-0.75,-0.12l-0.05,-1.01l-1.55,-1.9l-0.05,-0.82l-1.54,-0.91Z",
            "name": "Ulyanovskaya oblast"
        },
        "RU-KGN": {
            "path": "M222.83,447.92l0.56,0.33l0.52,-0.1l0.49,-1.48l-0.27,-0.97l-0.64,-0.49l0.63,-0.25l0.51,-0.69l0.68,-0.04l0.75,-1.02l-0.4,-0.76l0.21,-0.54l-0.21,-1.07l-1.03,-1.1l0.04,-0.94l-1.08,-1.13l-0.27,-0.98l1.31,-2.25l0.69,-0.7l0.4,0.49l0.6,-0.04l1.46,-0.87l1.3,0.21l0.65,0.57l0.77,-0.97l0.26,0.5l1.39,0.67l1.99,0.22l0.52,-0.41l-0.09,-0.84l0.79,-0.75l-0.08,-0.73l0.58,-0.09l0.38,-0.45l1.18,-0.14l0.45,0.45l0.17,1.04l-0.2,1.42l0.62,0.54l0.53,1.6l2.55,0.2l1.04,1.86l1.07,0.84l0.58,-0.12l0.52,-0.58l1.08,1.06l1.52,-0.75l0.45,0.66l0.98,-0.2l1.23,0.26l1.01,2.03l2.03,0.19l0.57,0.51l1.06,-0.33l0.09,0.97l0.65,0.31l0.94,1.4l0.96,0.23l-0.39,0.96l-2.09,0.29l-0.11,0.64l0.34,0.66l-0.36,0.65l-1.34,-0.15l-1.04,0.96l-1.99,0.06l-0.57,0.58l-3.88,0.75l-2.12,0.77l-0.17,-0.53l-0.5,-0.14l-1.03,0.9l-1.34,-0.27l-0.44,0.62l-1.21,0.57l-0.04,1.66l-1.0,-0.76l-1.22,0.58l-0.9,-0.38l-3.05,0.62l-0.4,0.95l-0.86,-0.42l-1.57,0.53l-1.13,-1.04l0.92,-1.63l-0.83,-1.78l-1.68,-0.1l-0.87,0.53l-0.94,-0.83l-0.82,0.07l-0.57,0.58l-0.68,-0.18l-0.3,-0.25l0.49,-0.75l-0.78,-1.46Z",
            "name": "Kurganskaya oblast"
        },
        "RU-KRS": {
            "path": "M76.64,477.36l1.41,-0.53l-0.08,-1.07l0.28,-0.51l-0.3,-0.7l1.47,-0.52l0.27,-0.88l0.61,-0.28l0.4,-0.98l0.82,-0.01l0.6,-0.41l0.72,0.14l0.35,-0.33l0.59,0.37l-0.08,0.65l0.41,0.29l0.81,-0.33l0.74,0.1l2.08,-0.81l1.0,1.25l1.58,0.9l1.63,0.37l1.24,1.23l0.54,-0.09l0.38,-0.58l0.94,0.27l0.81,0.78l2.09,-0.4l0.44,0.5l-0.05,0.77l-0.91,-0.05l-0.53,0.93l0.68,1.09l0.08,1.19l-0.84,-0.89l-1.3,0.03l-0.73,0.44l-1.67,-0.15l-0.66,0.47l-0.58,-0.08l-0.9,1.25l-1.82,0.83l-0.44,-0.27l-1.21,0.16l-1.71,-0.43l-0.42,0.52l0.07,0.61l-0.5,0.5l-1.15,0.27l-0.76,-0.27l-0.31,-0.63l-0.84,-0.03l-0.53,-1.37l-0.88,-0.08l-1.22,0.4l-0.45,-0.56l-1.31,-0.19l0.03,-0.61l-0.47,-0.22l0.05,-1.06l-0.49,-0.97Z",
            "name": "Kurskaya oblast"
        },
        "RU-KR": {
            "path": "M51.35,384.71l2.35,-2.73l4.55,-6.67l1.45,-1.23l1.68,-2.29l1.76,-4.69l-0.35,-1.11l-1.26,-1.51l-0.37,-1.39l-2.1,-1.98l-1.76,-1.04l-2.36,-2.78l1.33,-0.97l1.52,-2.31l0.23,-1.06l-0.32,-1.93l-2.57,-1.81l0.18,-0.79l-0.53,-1.12l0.89,-0.54l0.25,-0.66l-0.47,-1.63l-1.84,-0.42l-0.83,-2.1l0.13,-0.62l1.0,-0.39l0.23,-0.53l-0.32,-1.47l-0.99,-0.17l0.63,-0.97l0.03,-2.0l0.57,-0.87l-0.49,-0.87l1.81,-0.21l0.16,-0.65l-1.16,-5.53l-1.32,-2.36l-0.64,-2.59l-0.67,-1.36l8.34,-0.7l2.4,0.35l0.22,1.13l0.91,0.8l0.23,1.58l0.67,0.44l2.51,-0.14l0.28,-1.46l0.9,-0.37l0.18,-1.01l1.14,-0.03l0.6,0.95l1.27,-0.26l0.54,0.63l0.91,0.26l-0.08,0.71l-1.18,0.61l0.32,0.63l1.46,-0.14l1.15,0.68l0.17,0.45l1.19,-0.11l0.17,0.67l1.79,0.94l0.87,1.16l0.18,1.51l0.72,0.12l-0.02,0.82l-0.53,-0.33l-0.32,0.36l0.06,1.76l0.38,0.88l-0.57,1.53l-0.46,-0.02l-1.39,1.06l0.24,0.62l0.65,0.15l0.04,0.93l0.94,0.85l-0.16,0.54l0.79,1.53l-0.41,0.52l1.14,1.82l-0.74,0.57l-0.03,0.59l0.93,1.66l-0.94,0.42l-0.15,0.45l1.28,0.77l-0.09,0.63l0.31,0.35l1.47,0.69l0.45,0.97l0.7,0.05l1.19,-0.86l0.44,0.21l0.73,1.55l0.36,0.27l0.46,-0.12l0.46,0.6l0.3,1.45l1.18,0.65l0.26,2.1l-0.38,0.91l-3.02,0.7l-0.25,0.6l0.95,1.57l0.97,0.63l0.18,1.88l0.47,0.58l-0.46,2.04l1.37,2.46l1.47,1.31l1.8,0.76l1.41,-0.34l0.52,0.29l0.28,2.93l-0.75,1.74l0.43,0.5l1.22,-0.04l0.34,2.03l0.62,0.51l-0.23,2.41l-0.61,0.7l0.0,1.21l-1.83,0.17l-1.87,-1.0l-0.8,0.59l-1.22,-0.1l-1.0,1.68l-5.18,2.58l0.03,-0.91l-0.32,-0.41l-0.71,0.29l-2.04,-0.23l-0.47,-0.46l-1.38,0.65l-0.57,0.71l-0.89,-0.51l-3.58,0.23l-0.74,0.72l-0.06,0.71l0.94,0.96l0.62,-0.09l0.3,-0.45l0.32,0.13l-0.37,0.97l-1.77,-0.51l-0.25,0.85l-1.28,1.01l-0.2,0.94l-1.05,0.27l-0.72,0.71l-14.81,-5.7l-1.51,0.03l-1.15,-1.24ZM83.89,340.38l0.85,-0.22l-0.2,0.91l-0.46,-0.13l-0.19,-0.57Z",
            "name": "Kareliya, Respublika"
        },
        "RU-ME": {
            "path": "M137.11,433.79l-0.0,-0.55l1.44,-0.73l0.1,-1.82l1.82,-0.43l0.15,-0.32l3.62,0.21l-0.1,0.64l0.53,0.44l1.88,-0.38l1.02,-1.48l1.48,0.27l0.98,-0.27l0.45,-0.36l0.28,-0.98l0.68,0.19l1.58,-0.43l0.27,0.67l0.77,0.18l0.7,-0.91l0.9,1.3l0.98,0.16l1.04,-0.44l0.32,1.59l1.56,0.45l0.21,0.47l-0.17,1.51l0.48,0.49l-1.08,0.31l-0.41,-0.42l-0.95,0.04l-0.66,0.59l-0.63,-0.08l-0.33,1.1l-0.48,-0.34l-0.9,0.09l-1.02,1.47l0.17,0.84l-0.6,0.66l-0.75,0.14l-0.09,1.11l-1.22,0.37l-0.33,0.56l-1.41,-0.89l-0.81,-1.85l-2.05,-0.31l-0.28,-1.28l-0.37,-0.3l-1.96,0.5l-1.73,1.49l-0.87,-0.15l-1.76,0.86l-0.19,-0.9l-1.03,-0.83l0.38,-0.4l-0.03,-1.32l-1.54,-0.47ZM154.88,426.69l-0.11,-0.12l0.15,-0.08l-0.02,0.08l-0.02,0.11Z",
            "name": "Mariy El, Respublika"
        },
        "RU-IN": {
            "path": "M131.12,541.33l0.05,-0.4l0.9,-0.24l1.22,0.6l0.52,2.32l-0.02,2.29l-0.34,0.36l-0.58,-0.36l0.54,-0.84l-0.13,-1.15l-0.74,-0.96l-1.02,-0.63l-0.08,-0.8l-0.32,-0.2ZM132.21,546.08l-0.15,0.27l-0.34,-0.31l0.02,-0.09l0.47,0.13Z",
            "name": "Ingushetiya, Respublika"
        },
        "RU-MAG": {
            "path": "M657.88,376.05l1.82,-1.79l-0.02,-2.31l0.21,-0.23l0.7,0.12l0.75,-0.77l-0.81,-2.52l0.21,-1.74l-0.6,-3.17l1.02,-3.82l1.01,-1.71l-0.24,-1.81l2.6,-1.26l1.16,-1.69l0.31,-1.43l2.71,0.75l1.49,1.17l0.81,-0.5l-0.02,-0.57l0.96,-0.28l-0.11,1.41l1.11,1.17l0.94,0.07l0.48,-0.24l0.76,-1.25l0.11,-0.89l0.55,-0.81l0.07,-1.14l-1.11,-1.19l0.07,-0.57l0.45,-0.2l0.63,-1.02l1.38,1.54l2.53,-0.22l0.87,0.39l0.48,-0.46l0.68,0.08l1.1,-1.28l0.69,-0.28l1.12,0.69l-0.32,1.58l0.97,1.78l2.38,0.81l0.61,-0.36l0.05,-1.65l1.3,0.03l1.02,-0.52l1.37,0.93l0.55,-1.71l2.64,-0.77l0.16,1.61l0.82,0.16l1.11,-0.51l0.33,-0.62l-0.35,-1.09l2.11,-2.08l-0.45,-1.51l-0.56,-0.37l-0.28,-1.34l0.8,-1.11l-0.21,-1.59l0.38,-0.63l2.03,-0.46l1.99,-1.32l0.39,-0.85l-0.65,-1.06l0.69,-2.6l-0.38,-0.79l0.1,-0.63l0.86,-0.49l1.25,-0.04l0.39,1.02l0.56,0.14l0.88,-0.57l0.81,-1.67l-0.13,-1.35l-0.51,-0.49l1.0,-1.6l1.25,0.59l0.48,0.69l1.07,-0.27l0.61,-0.68l0.56,0.82l1.19,-0.28l0.67,0.26l0.59,-0.35l0.92,0.96l2.06,0.46l0.92,-0.53l0.68,-1.03l0.48,0.93l0.93,0.79l-0.14,0.9l1.43,0.85l1.56,-0.24l0.26,-0.44l-0.16,-0.54l1.53,-1.33l2.05,-0.53l0.76,0.44l1.32,-0.03l0.16,-0.43l-0.48,-1.58l0.65,-1.05l0.81,0.93l2.01,0.76l-1.42,3.78l-0.21,1.59l0.23,0.7l2.57,1.24l2.34,1.6l0.95,0.13l0.67,0.71l0.2,1.29l1.81,2.46l1.12,0.24l1.61,-0.25l1.28,0.33l0.6,0.81l1.4,0.89l0.7,2.14l2.75,1.12l1.25,-0.08l1.06,1.08l1.87,0.03l0.13,1.17l1.1,1.22l0.08,0.44l-0.79,0.75l-0.37,1.31l-1.23,-0.02l-0.86,0.88l0.24,1.72l0.48,0.68l-1.0,1.18l-0.08,0.71l0.23,0.87l1.09,1.28l-0.05,1.27l-1.5,1.35l0.52,2.01l-0.72,0.1l-0.31,0.56l-0.82,0.12l-0.67,0.82l-0.08,2.04l1.51,0.99l0.6,1.45l0.61,0.24l-0.57,1.03l0.4,1.0l-0.02,1.12l-0.16,1.0l-1.46,0.21l-1.52,0.97l0.25,0.75l0.57,0.47l1.13,0.25l0.01,0.45l-0.1,0.34l-0.83,0.14l-0.26,0.49l0.8,1.46l-0.22,0.47l0.24,0.71l-2.15,3.02l-0.3,-0.34l-0.58,0.23l-0.5,1.23l-0.75,0.42l-0.3,0.61l-0.52,0.12l-0.34,0.9l-2.72,2.58l-0.43,1.29l-1.97,0.06l-0.3,0.28l-0.02,-1.21l0.36,-0.14l0.62,-1.5l-0.34,-0.62l-1.46,0.03l-0.91,0.63l0.43,-1.11l-0.34,-1.1l0.33,-0.67l-0.24,-0.48l0.77,-1.01l-0.0,-0.62l0.86,-0.64l0.24,-1.8l0.46,-0.56l-0.06,-1.75l-0.76,-0.88l-1.66,1.13l-0.87,1.55l-1.19,0.29l-0.05,-1.54l-0.64,0.17l-0.29,-0.92l-1.58,-0.39l-1.26,0.23l-0.55,0.8l-1.19,-0.07l-0.32,0.27l-1.19,-0.22l-1.19,1.03l-1.1,-0.51l-1.6,-0.13l-0.57,0.22l-0.62,0.83l-1.51,0.52l-0.71,1.19l-1.33,0.39l-0.27,3.21l-1.22,0.76l-2.32,2.5l-0.27,1.96l-5.65,4.74l-1.18,1.98l-0.96,0.48l0.19,1.57l-1.19,0.47l0.08,2.14l-0.91,1.73l0.34,0.85l2.29,0.71l0.56,-0.59l-0.35,-0.51l0.46,-0.14l0.75,0.6l0.87,-0.02l0.94,0.92l-0.12,1.19l-1.42,-0.03l-0.59,0.51l-0.59,-0.55l-0.91,-0.19l-0.61,0.25l-0.3,1.02l-0.59,-0.02l-0.55,0.39l-1.12,-1.17l0.08,-0.37l-0.64,-0.34l-0.49,0.35l-1.28,-0.36l-0.49,0.31l-0.44,1.23l-1.44,0.54l-0.51,1.14l-1.23,-0.21l-1.41,-1.14l-1.03,0.77l-0.73,1.09l-3.14,0.2l-0.95,-1.64l1.22,-0.74l1.5,0.32l2.03,-0.22l1.07,-0.52l0.28,-0.7l-1.1,-0.95l-0.9,0.24l-0.93,-0.32l-0.64,-1.7l-0.72,-0.42l-0.72,-1.0l-0.74,0.4l-1.3,-0.16l-1.09,0.49l-0.38,-0.33l-0.81,0.19l-0.63,-0.69l-2.41,-0.92l-3.58,-0.74l-0.41,0.75l-1.58,0.89l0.47,1.35l-0.72,0.16l-0.26,-0.88l-0.42,0.12l-0.61,0.95l-0.05,1.34l1.01,0.48l-1.81,0.18l-0.22,-0.97l-1.23,-0.63l-2.19,0.35l-0.45,0.44l0.13,0.69l-0.76,-0.43l-0.68,0.54l-0.91,-0.75l-0.73,0.05l-0.24,-0.22l0.57,-2.69l-0.29,-0.53l0.23,-0.67l-0.26,-1.56l-0.82,-0.83l-1.05,0.26l-0.4,-0.44l-0.03,-1.31l-1.03,-0.44l-0.79,-1.49l-3.09,0.64l-0.73,-0.82l0.26,-0.69l-0.65,-0.79l0.97,-1.09l0.85,-0.27l0.93,-1.1l0.93,0.76l0.88,-0.17l0.49,-0.86l0.03,-2.12l0.74,0.04l0.41,-0.38l0.27,-2.91l-0.35,-0.97l0.43,-1.2l-0.76,-0.33l-0.22,-2.28l-0.69,-0.7l-0.61,-1.56l-2.48,-2.23l-1.21,-0.44l-1.2,1.08l-0.94,-0.33l-0.56,0.27l-0.94,-0.94l-0.58,-0.18ZM689.04,403.86l0.11,0.16l-0.03,0.2l-0.19,-0.18l0.12,-0.18ZM738.77,391.38l-0.04,0.22l-0.03,0.01l-0.04,-0.11l0.11,-0.12Z",
            "name": "Magadanskaya oblast"
        },
        "RU-MO": {
            "path": "M120.34,454.39l0.92,-0.74l-0.2,-0.81l0.58,-1.19l-0.56,-1.51l2.25,0.03l0.59,-1.15l0.89,-0.34l0.96,0.36l0.49,0.68l1.07,0.29l1.03,1.33l2.45,1.15l0.28,0.51l1.02,-0.39l0.76,0.38l1.22,-0.2l0.38,-0.47l-0.46,-0.8l0.19,-0.68l-0.23,-0.52l0.6,0.11l0.43,-1.1l0.8,-0.11l0.22,-1.58l0.65,-0.4l0.16,-0.59l0.04,0.69l-0.34,0.52l0.27,0.54l2.07,-0.39l1.5,0.96l-0.1,0.65l0.54,1.5l-0.32,0.58l0.35,0.39l-0.09,0.46l0.41,0.96l0.77,0.13l-2.06,1.0l-1.51,0.29l-0.72,1.37l-0.87,0.78l-1.52,0.34l-0.72,-0.67l-1.81,-0.01l-1.58,0.73l-0.23,0.91l0.34,0.83l-0.27,0.19l-1.84,-0.83l-0.87,0.15l-0.56,-1.4l-2.05,-0.99l-2.13,0.18l-0.54,1.23l-0.67,0.51l-2.59,-0.15l0.63,-0.74l-0.17,-0.83l0.62,-0.3l0.3,-0.9l-0.77,-0.96Z",
            "name": "Mordoviya, Respublika"
        },
        "RU-TA": {
            "path": "M145.71,450.78l0.47,-0.61l0.05,-0.68l1.61,0.35l-1.05,1.76l-0.71,-0.04l-0.37,-0.79ZM148.36,449.91l0.32,-0.54l-0.27,-0.64l1.16,-0.24l0.48,-0.56l-0.11,-0.46l-0.5,-0.13l0.36,-0.23l0.12,-0.64l-0.4,-1.35l-0.84,-0.58l0.54,-1.01l0.73,-0.52l-0.2,-0.88l1.66,-1.35l0.16,-1.0l1.33,-0.44l0.2,-0.9l0.52,-0.16l1.23,-1.36l0.12,-0.4l-0.33,-0.46l0.22,-0.58l1.42,0.09l0.55,-0.64l0.64,-0.19l0.33,-0.79l0.13,0.43l0.69,0.37l1.01,0.03l1.13,-1.09l0.2,-0.81l0.36,-0.04l1.05,2.65l0.89,0.36l0.53,-0.2l-0.16,0.86l1.37,1.18l0.54,-0.1l0.82,0.67l0.67,-0.61l-0.55,1.0l0.3,0.84l1.27,-0.06l0.94,0.57l0.94,-0.66l0.31,0.57l0.66,0.02l0.81,-0.77l-0.17,-0.74l2.2,0.28l1.14,-1.09l-0.2,-1.08l-0.97,-0.56l0.49,-0.74l0.41,-0.04l0.08,1.11l0.62,1.29l1.75,0.56l-1.15,1.05l0.6,0.95l0.54,0.12l1.17,-0.45l0.97,0.38l0.48,-0.13l0.3,0.6l1.22,0.9l-0.99,0.96l-0.49,1.47l-0.92,0.44l-0.77,1.07l-0.75,-0.08l-1.6,0.99l0.06,0.74l0.72,0.85l0.7,0.16l0.83,1.06l0.08,1.15l-0.92,1.23l-0.42,1.7l0.4,1.23l0.06,1.88l-0.26,-0.48l-1.29,-0.71l0.62,-0.51l-0.44,-1.19l-0.76,0.2l-1.65,-0.39l-0.95,-1.15l-1.86,0.71l-0.45,-0.33l-0.24,-0.81l-1.32,-0.27l-0.97,-0.74l-0.35,0.17l-0.28,-0.49l-1.5,0.34l-1.02,1.05l-0.22,1.3l-1.13,-0.47l-0.7,0.53l-0.85,-1.07l-0.44,0.2l-0.37,-0.36l-3.06,-0.58l-0.58,-1.72l-1.21,-1.15l-1.85,0.95l-0.82,1.17l-1.65,0.06l-0.87,-0.83l-0.79,0.04l-0.33,-0.31l-1.09,0.49l-0.19,-0.17ZM177.52,437.23l-0.03,-0.24l-0.25,-0.6l0.55,0.11l0.08,0.45l-0.35,0.27Z",
            "name": "Tatarstan, Respublika"
        },
        "RU-ZAB": {
            "path": "M463.34,489.98l0.71,-0.45l0.37,-0.83l0.5,0.11l0.56,-0.75l2.14,-0.43l0.45,-0.56l-0.18,-0.7l-0.74,-0.09l-2.21,-1.41l0.81,-0.54l0.43,-1.62l0.75,-0.07l0.53,-0.58l-0.08,-0.8l-0.83,-0.75l0.8,-1.51l0.72,0.42l1.09,0.06l0.56,-0.29l0.64,0.79l0.97,0.25l0.57,-0.6l0.99,-0.27l1.99,-1.3l1.3,0.16l1.14,0.78l0.99,-0.06l1.08,-0.82l0.14,-0.74l0.86,-0.93l2.9,-1.18l2.47,-2.92l1.41,0.61l0.81,-0.48l0.25,-0.73l1.84,0.11l1.75,-1.18l1.9,0.05l0.82,-0.98l1.93,-1.18l0.76,-1.12l-0.07,-0.64l0.49,-0.7l0.05,-0.8l-0.68,-0.82l-0.04,-0.69l-1.2,-0.65l-0.1,-0.72l-0.51,-0.28l0.28,-1.11l-0.31,-0.71l0.77,-0.44l0.03,-0.38l1.54,-0.35l1.06,-0.58l0.51,-0.78l1.85,-0.74l1.28,-1.77l1.56,-1.04l0.63,-0.94l2.78,-0.82l1.67,0.36l1.38,-0.72l1.17,-2.79l-0.58,-2.51l-0.34,-0.6l-1.48,-0.94l-0.56,-1.44l-1.51,0.08l-0.57,-0.26l-0.4,-0.87l0.12,-1.29l-0.31,-0.38l0.23,-2.13l-0.65,-1.13l0.34,-1.04l-0.78,-1.35l-0.01,-0.59l0.5,-0.22l0.1,-0.48l-0.66,-0.71l-0.07,-0.82l-1.19,-0.42l0.78,-0.6l0.04,-1.55l0.27,-0.22l2.02,1.4l1.19,-0.24l1.07,0.74l1.4,0.36l2.0,-0.86l0.49,-0.84l0.72,0.76l0.96,-0.29l0.89,-1.94l-0.36,-1.17l0.62,-0.41l0.28,-1.28l-1.32,-0.51l-0.49,0.26l-0.51,-0.41l-0.47,-1.41l0.15,-0.99l-0.69,-0.53l-0.16,-1.21l0.87,-0.16l0.62,-0.75l-0.12,-1.59l0.15,-0.44l0.79,-0.26l0.13,-0.53l-0.56,-1.19l0.89,-0.59l1.17,-0.02l0.53,0.58l0.71,-0.37l0.46,0.2l0.38,0.83l1.43,1.0l2.29,-0.53l0.13,1.47l-0.57,3.12l0.61,0.52l-0.1,1.41l0.4,0.58l0.52,-0.02l0.53,-0.97l0.35,0.01l-0.42,1.4l1.4,2.52l-0.27,1.48l0.97,0.68l0.31,0.6l-0.8,0.53l-0.19,0.73l0.85,0.85l-0.09,0.82l0.83,1.02l1.56,0.49l0.04,0.46l1.07,1.0l-1.23,0.29l-0.95,0.7l-0.06,0.82l0.57,0.91l-0.11,0.79l0.68,0.51l0.46,-0.33l0.69,0.42l2.6,-1.37l1.36,0.02l0.49,1.59l-0.19,0.69l0.4,2.25l0.99,0.3l1.74,-1.09l0.46,1.42l-0.19,3.71l-1.4,1.46l-0.16,1.03l0.51,0.55l0.84,-0.44l0.12,1.56l1.04,0.99l-0.58,0.19l-0.85,-0.51l-0.55,0.19l-0.48,0.74l0.42,1.01l-0.03,0.78l-0.5,0.51l0.04,1.16l0.93,0.65l0.5,0.92l0.13,1.97l0.38,1.04l-3.98,1.36l-1.94,0.05l-3.16,3.7l-1.26,0.89l-0.11,1.38l0.41,0.68l0.74,0.13l1.38,-0.41l1.02,0.55l-0.41,1.63l0.66,0.92l0.09,0.86l-0.51,1.47l-0.86,0.41l-2.1,1.89l-1.07,2.81l-0.75,1.08l-0.09,1.11l-1.11,1.29l-0.17,1.48l-1.06,1.14l-0.26,1.25l-0.56,0.46l0.1,0.59l0.91,0.38l-0.09,1.51l-0.88,0.63l-2.43,0.29l-2.5,2.29l-1.92,1.24l-1.38,-0.75l-2.2,-0.48l-1.7,-1.01l-0.74,-0.95l-2.0,-0.83l-1.12,0.12l-1.72,0.97l-1.58,-0.11l-1.85,-1.95l-1.36,-0.82l-2.8,-0.36l-2.34,1.61l-1.48,0.56l-2.12,1.81l-0.69,1.62l-1.3,0.72l-1.52,-0.29l-2.35,0.99l-1.87,0.12l-0.98,0.43l-0.76,-0.17l-3.35,1.84l-1.57,-0.85l-1.05,0.62l-2.26,-0.8l-1.15,0.04l-1.29,-0.65l-3.83,0.1l-1.43,-1.54l-1.1,-0.49l-0.32,-0.65l-0.01,-1.98l-0.86,-0.37l-0.05,-1.09Z",
            "name": "Zabaykalskiy kray"
        },
        "RU-RYA": {
            "path": "M100.56,454.83l0.19,-0.75l1.04,-0.79l-0.67,-0.72l0.05,-0.78l0.6,0.14l1.61,-0.54l0.12,-0.58l0.58,-0.36l0.13,-1.15l0.49,-0.64l0.65,-0.56l1.11,-0.05l0.44,-0.89l-0.19,-0.63l0.72,-0.26l1.01,-0.96l0.57,0.3l0.56,-0.17l0.65,0.9l0.84,0.01l0.95,-0.47l0.79,1.01l0.78,-0.63l0.81,0.76l0.68,-0.16l0.49,0.34l0.53,-0.07l0.91,0.57l0.22,0.5l1.09,0.48l1.19,-0.45l0.14,0.66l-0.43,0.93l1.46,1.79l-0.52,0.65l0.08,0.97l-0.45,0.6l-0.78,0.52l-0.46,-0.21l-0.4,0.42l0.53,1.11l-0.02,0.64l0.92,0.76l-0.64,0.85l-4.74,0.57l-0.41,0.54l0.02,1.66l-0.78,0.81l-0.36,-0.43l-1.06,-0.17l-0.85,-0.55l-1.05,0.79l-0.58,-0.12l-0.27,1.04l-0.73,0.22l-0.24,-0.43l-0.9,-0.08l-0.21,-0.88l-1.18,-0.78l-1.35,0.69l-0.1,0.78l-1.21,0.29l-0.53,-1.19l-0.63,-0.25l0.03,-1.26l-0.56,-0.55l0.16,-1.12l-0.76,-1.17l0.33,-0.75l-0.41,-0.75ZM119.6,455.46l0.32,-0.32l0.19,0.14l-0.14,0.25l-0.37,-0.06Z",
            "name": "Ryazanskaya oblast"
        },
        "RU-TAM": {
            "path": "M107.33,467.99l0.63,-0.9l-0.11,-0.8l0.39,-1.35l-0.15,-1.78l1.23,-0.14l0.35,-0.9l1.13,-0.83l0.62,0.56l0.58,-0.15l0.57,0.5l0.83,0.07l1.14,-1.25l0.07,-1.83l3.0,-0.32l0.09,2.22l0.97,0.71l-0.08,0.9l0.73,0.23l0.69,1.01l0.07,0.87l2.05,1.5l1.48,2.25l-0.93,0.83l-0.22,0.73l0.26,0.6l-0.55,0.12l-0.13,0.72l-0.88,1.11l0.07,1.34l-0.36,0.39l-0.23,1.34l-1.29,1.48l-0.67,-0.96l-1.34,0.57l-2.38,-1.21l-0.5,0.28l-0.73,-0.19l-0.37,0.49l-1.1,-0.06l0.16,-0.76l-0.23,-0.46l-2.01,-0.55l0.57,-0.43l-0.06,-0.61l0.46,-0.9l-0.14,-0.77l-1.9,-1.06l-1.39,-1.38l-0.47,-0.58l0.07,-0.66Z",
            "name": "Tambovskaya oblast"
        },
        "RU-ARK": {
            "path": "M179.05,209.2l1.12,0.01l1.12,-1.04l0.07,-0.62l1.11,-1.16l2.61,-0.8l0.03,-0.82l-0.86,-0.52l1.93,-2.49l0.45,-0.19l0.51,0.57l1.22,0.18l1.57,0.85l0.72,-0.16l-0.04,-1.05l-1.06,-0.55l-0.25,-0.67l-1.75,-0.92l1.47,-0.27l0.3,0.35l0.55,-0.11l0.16,-1.08l-0.62,-0.72l-1.91,-0.48l0.54,-0.96l4.45,-0.69l0.48,-0.77l-0.55,-0.52l-0.66,0.18l0.03,-0.36l-0.73,-0.61l-1.19,0.05l-0.28,-0.47l-0.54,-0.11l-0.08,-1.02l0.9,-0.51l0.84,0.55l2.31,-1.08l1.01,0.66l2.26,-0.14l0.38,-0.41l-0.75,-0.8l-1.4,0.32l-0.78,-2.02l-2.92,0.3l-0.3,-0.25l4.44,-2.46l-0.25,-1.03l-1.35,0.24l0.58,-0.77l-0.32,-0.75l1.01,-0.92l1.55,-2.66l-0.02,-1.22l-0.74,-0.49l0.37,-0.72l0.83,-0.67l1.57,0.37l1.02,0.88l0.97,0.13l0.42,-0.56l-0.51,-2.27l-0.49,-0.37l-0.17,-0.71l3.39,-1.54l0.11,-1.15l-0.6,-0.51l-0.66,0.07l0.22,-0.41l2.94,-1.06l0.33,-0.51l-0.25,-0.49l0.89,-0.63l0.07,-0.66l0.75,-0.59l0.93,0.04l1.25,-0.62l0.31,-0.92l1.85,0.09l1.51,-1.31l1.63,-0.26l0.22,-0.55l0.88,0.67l0.96,-0.19l0.53,-1.23l1.32,-0.5l0.47,-0.88l-0.21,-1.17l-0.98,0.02l0.55,-1.11l0.05,-1.09l2.58,-0.13l0.42,-0.48l1.07,0.32l0.38,0.64l0.61,0.22l1.35,-0.28l-0.06,1.2l0.75,0.68l0.65,-0.29l0.06,-0.36l0.47,0.0l0.56,-1.15l0.34,0.89l0.79,0.28l1.42,-1.24l1.28,-0.57l1.13,-1.25l1.02,-0.04l0.39,0.74l0.7,0.03l1.04,-1.03l0.76,-0.08l0.28,-0.56l0.22,0.23l0.78,-0.13l0.12,-1.0l0.7,-1.27l0.63,-0.29l0.55,0.69l0.6,-0.21l1.02,-1.02l0.58,-1.17l0.42,-0.08l1.88,1.0l0.58,-0.16l0.2,-0.65l-1.42,-3.03l0.74,-1.04l0.98,-0.18l0.68,-0.96l0.58,-0.23l0.37,-1.06l0.81,-0.32l0.44,-0.81l1.05,-0.46l0.36,-0.58l1.24,-0.07l2.0,-1.41l2.1,0.31l0.56,0.61l0.9,0.31l0.75,-0.11l0.0,0.64l0.59,0.25l0.47,0.95l0.45,0.18l-0.1,0.9l0.84,0.84l-0.11,1.24l0.38,0.57l-0.6,0.94l-0.37,1.59l0.68,0.65l-1.83,2.76l-0.73,0.32l-0.35,1.45l-0.88,0.65l-0.1,0.39l0.37,0.52l-1.62,0.45l-2.86,2.0l-1.13,1.33l-2.51,1.08l-2.58,2.05l-4.99,2.3l-0.79,1.03l-0.97,-0.03l-2.95,1.79l-1.2,0.15l-1.39,1.16l-0.39,-1.01l-0.37,-0.24l-0.68,0.21l0.13,0.77l-0.44,1.0l-0.98,0.78l-1.4,0.04l-4.02,3.09l-1.24,-0.17l-1.11,1.57l-0.71,-0.02l-1.01,2.92l-0.07,-1.59l-0.48,-0.5l-0.54,0.13l-0.3,0.46l0.0,1.09l-0.78,1.22l-1.49,0.99l-0.46,1.26l-0.26,-0.57l-0.75,-0.05l-0.61,1.15l-0.02,1.01l-0.99,-0.14l-0.47,0.42l-0.76,-0.23l-0.48,0.56l0.77,0.75l2.95,0.21l0.18,0.48l-0.43,0.84l-1.43,0.03l-0.6,0.31l0.15,0.88l0.66,0.61l-0.29,0.51l-1.53,0.41l-1.01,-0.32l-0.98,-1.02l-0.53,-0.03l-0.09,0.53l0.6,1.31l1.21,0.86l0.05,0.84l-0.5,0.65l-2.79,-3.1l-0.73,0.18l-0.09,0.42l0.53,0.91l-0.54,0.53l0.14,0.53l0.5,0.34l-0.56,2.85l-0.73,-0.13l-0.72,-0.88l-2.8,-1.53l-0.58,0.27l0.03,0.76l1.22,0.92l1.05,1.58l-0.23,0.81l0.73,1.99l-0.95,0.64l-0.06,0.51l-0.93,-0.53l-0.26,0.24l-0.11,1.21l-0.56,0.15l-0.17,0.48l0.17,0.61l-0.34,0.64l0.51,0.67l-0.13,0.4l-1.62,-0.96l-1.05,-2.65l-0.51,-0.21l-0.62,0.21l-0.19,0.54l0.58,1.45l-0.49,-0.23l-0.74,0.27l0.14,0.72l1.31,0.27l1.63,2.27l-0.27,0.85l0.41,0.28l0.17,1.07l-0.77,1.12l-0.85,-1.52l-0.76,-0.67l-4.41,-0.81l-0.42,0.19l0.05,0.46l0.67,0.61l3.52,0.7l1.25,2.64l-0.08,0.75l-1.25,0.78l-1.12,-0.37l-1.44,-1.84l-0.68,0.24l-0.08,0.5l0.41,0.7l-0.25,0.13l0.07,0.46l0.94,0.26l1.6,1.63l-0.39,1.11l-1.02,1.34l-0.53,-0.51l-0.56,0.12l-0.3,1.91l-2.54,-0.66l-0.4,-2.05l-0.67,-0.84l-0.72,0.28l0.41,1.9l-0.72,-0.38l-1.58,0.26l-2.03,-1.91l-0.85,-0.19l-2.02,0.79l-1.42,1.33l-0.66,-0.53l1.08,-0.29l0.79,-1.63l-1.06,-0.18l1.58,-1.75l1.23,-0.88l0.94,-0.23l0.62,-0.63l1.29,-0.21l0.21,-0.69l-0.44,-0.26l-2.07,0.22l-0.33,-0.34l-1.95,0.57l-0.78,1.27l-0.69,0.43l-1.02,-0.25l-0.0,-0.36l-1.61,-1.87ZM186.94,199.63l-0.04,0.01l0.03,-0.04l0.01,0.03ZM193.54,184.0l-1.55,0.25l-1.1,0.55l0.18,-1.54l-0.86,-0.37l0.77,-1.59l0.22,-0.14l0.32,0.41l0.25,0.77l0.52,0.01l0.54,-0.42l0.22,1.66l0.49,0.42ZM215.67,183.06l0.21,0.36l-0.37,0.68l-0.03,-0.26l0.19,-0.78ZM214.22,163.48l-0.5,-0.4l-0.94,-0.14l0.89,-0.85l1.83,-0.17l-1.29,1.57ZM225.66,36.46l0.04,-0.75l1.85,-1.79l1.26,-2.3l4.52,-0.5l0.95,-0.91l0.34,-1.92l-0.45,-1.46l0.7,-2.06l0.65,-0.71l1.13,-0.3l0.86,0.39l1.69,1.73l1.04,3.25l-0.6,1.05l0.73,2.5l-2.0,2.75l-0.31,0.9l-1.67,1.02l-0.44,0.63l-0.85,0.51l-3.08,0.8l-0.76,-0.36l-2.61,1.29l-2.5,-3.48l-0.49,-0.29ZM223.67,6.5l1.26,-0.8l0.78,0.2l0.57,-0.46l0.31,0.55l4.57,0.4l0.51,0.95l-0.38,1.3l-1.04,0.75l-0.69,-0.27l-0.63,0.16l-2.45,-0.69l-0.73,-0.77l-0.34,-0.94l-1.73,-0.38ZM208.57,45.59l0.63,-1.16l-0.48,-0.61l-0.3,-2.08l0.44,-1.0l-0.1,-0.53l0.55,-1.4l0.73,-0.6l0.05,-1.3l0.56,-0.74l0.52,0.11l0.4,-0.38l1.35,-0.31l-0.69,0.17l-0.61,0.6l0.32,0.65l1.61,-0.03l0.13,0.53l0.4,0.14l1.19,-1.11l5.04,-1.36l0.29,-0.97l2.06,0.44l0.98,2.89l-0.07,1.22l-1.14,2.38l0.42,1.37l-2.16,0.85l-0.63,1.36l0.05,0.71l-1.26,0.48l-0.38,0.47l0.42,0.96l-1.38,1.8l-2.21,-1.13l-1.28,-1.5l-0.43,-0.12l-0.67,0.23l-0.39,0.85l-0.86,0.63l-1.17,0.41l-0.74,-1.59l-1.18,-1.31ZM221.55,9.58l0.88,0.13l0.77,0.96l-0.29,0.2l-0.93,-0.45l-0.43,-0.84ZM218.58,30.8l-1.44,1.64l-2.99,-0.78l-0.38,-0.65l-1.12,-0.58l2.88,-2.9l4.81,-0.62l-0.21,2.11l-1.55,1.77ZM211.83,20.32l0.47,-0.23l2.23,0.66l0.15,0.37l-0.31,0.41l-2.53,-1.2ZM211.97,56.87l0.39,-0.03l0.37,0.58l-0.44,-0.12l-0.32,-0.43ZM208.19,63.92l-0.23,-0.78l-1.88,-1.59l-0.02,-0.44l3.47,-2.14l1.21,0.66l0.42,2.51l-1.44,1.32l-0.61,-0.17l-0.42,0.8l-0.5,-0.17ZM208.62,23.76l1.8,0.43l0.0,0.03l-1.53,-0.39l-0.28,-0.07ZM201.5,4.72l0.19,-0.79l0.87,-0.57l0.07,-0.61l-0.94,-0.71l0.91,-0.61l5.19,-0.98l0.81,0.67l-0.42,1.3l0.17,1.15l-5.34,1.37l-1.4,0.75l-0.13,-0.96ZM204.44,18.83l0.93,-1.31l1.56,-0.65l0.9,0.78l0.61,1.34l-0.15,0.6l-1.23,0.46l-1.78,-0.57l-0.85,-0.65ZM198.77,57.79l-0.53,-0.97l0.08,-1.12l-0.39,-0.94l0.17,-2.69l-0.32,-1.11l0.39,-1.01l-0.38,-1.11l-0.89,-1.19l6.9,0.37l1.56,1.13l0.78,0.17l1.4,1.38l0.28,0.84l-3.09,-0.2l-0.43,0.6l-0.77,-0.04l-1.59,1.41l-0.32,0.86l0.18,0.61l0.46,0.32l1.4,0.01l0.01,0.52l-0.19,0.71l-0.68,-0.3l-0.46,0.15l-0.23,-0.65l-1.04,0.3l-0.35,1.08l0.49,1.78l-0.92,0.0l-0.8,-0.88l-0.7,-0.06ZM206.17,37.29l-1.04,-0.06l-1.26,0.93l-1.52,-1.11l-1.19,-0.12l-0.13,-0.34l1.62,-1.69l2.78,-0.94l0.71,0.51l0.19,0.58l0.2,0.97l-0.37,1.25ZM204.01,63.74l0.54,-0.34l0.21,0.52l-0.38,-0.18l-0.36,-0.0ZM205.26,64.79l0.47,0.24l-0.11,0.18l-0.29,-0.15l-0.07,-0.26ZM203.45,9.55l0.54,-0.65l0.81,-0.17l-0.03,0.58l-0.71,0.48l-0.61,-0.24ZM201.96,27.02l2.73,2.04l-0.45,2.35l-0.69,0.25l-0.36,-0.19l-1.86,-2.4l-0.16,-0.68l0.69,-0.64l0.1,-0.72ZM195.44,14.49l1.14,-1.01l0.03,-1.36l2.24,0.11l0.38,-0.22l0.15,-0.77l0.81,-0.1l0.48,2.62l2.74,0.54l0.73,1.7l-1.14,0.96l-2.31,-0.06l-0.96,-0.66l-0.19,-0.74l-0.65,-0.58l-1.19,0.27l-2.28,-0.69ZM192.38,27.03l2.21,-0.16l1.3,1.33l1.21,0.53l0.58,-0.16l1.71,1.14l0.7,1.9l2.36,1.24l-1.25,0.81l-0.61,1.06l-1.2,-0.23l-1.52,-1.37l-0.2,-1.6l-1.25,-0.45l-0.25,-1.5l-3.78,-2.54ZM199.81,25.29l-1.35,0.38l-1.66,-1.16l1.11,-0.38l0.73,-0.83l2.55,-0.95l0.34,0.5l-1.1,0.87l-0.62,1.57ZM188.95,20.48l0.04,-0.68l1.19,-0.05l0.36,0.54l0.76,0.1l0.75,0.81l2.14,0.73l0.46,-0.81l-0.72,-0.9l-0.57,-2.84l1.36,-0.28l0.14,0.71l0.42,0.25l0.6,-0.29l2.31,1.14l0.53,1.02l0.53,-0.03l0.55,-0.53l0.79,0.82l-0.23,0.37l-4.04,0.81l-2.25,2.49l-0.55,0.08l-0.26,-1.26l-0.7,-0.5l-2.32,1.25l-0.91,-0.35l0.08,-2.04l-0.45,-0.56ZM184.19,26.71l0.76,1.1l2.32,1.11l1.25,1.48l0.54,0.0l2.11,-1.12l2.82,1.85l0.28,1.36l5.32,4.14l0.08,0.72l-0.69,1.0l-2.27,1.59l-0.82,-1.92l-0.72,-0.68l-0.19,-0.84l-4.67,-1.69l-0.22,-1.1l-1.15,-0.37l-0.69,-0.92l0.11,-0.77l-0.3,-0.64l-0.88,-0.14l-0.46,0.58l-0.72,0.06l-0.53,-1.44l-0.42,-0.23l-1.83,0.16l0.13,-1.16l0.48,-0.47l0.36,-1.65ZM167.44,244.98l-0.1,-2.07l1.02,-3.52l0.93,-0.8l1.24,1.23l0.42,-0.34l0.74,0.39l0.58,-0.15l0.32,-1.31l0.45,-0.41l-0.03,-1.43l1.05,-1.4l0.59,-0.02l0.3,-0.65l-0.78,-0.35l-0.18,-0.73l0.54,-0.1l0.18,-0.61l-0.29,-0.39l0.46,-0.25l0.39,-1.0l0.87,-0.47l0.09,-0.45l-0.39,-0.24l-1.1,0.11l-0.1,-0.32l0.61,-0.29l1.21,0.45l0.33,-0.64l-1.44,-0.77l-2.13,0.22l-0.73,-0.71l1.11,-1.99l1.85,-0.95l1.51,0.79l0.66,-0.32l0.06,-1.29l-1.22,-0.43l-0.01,-0.46l1.23,-0.11l-0.67,-1.39l-0.57,-0.29l0.14,-1.07l0.69,-0.9l0.38,-0.27l0.69,0.13l1.11,-1.22l1.54,0.49l0.86,-0.09l1.13,-0.85l0.67,-1.06l1.74,-0.79l1.9,1.55l1.14,0.36l1.22,-0.12l0.34,0.65l3.13,1.06l0.6,1.27l-3.76,0.97l-0.17,0.68l0.48,0.27l2.71,-0.2l-0.21,0.4l-0.61,-0.13l-3.4,0.93l0.23,0.67l0.45,0.24l1.71,0.1l0.82,-0.51l-0.15,2.03l-0.32,0.63l-0.97,-0.37l-0.91,0.28l-1.32,-0.4l-0.54,0.54l0.32,0.63l0.74,0.0l1.06,0.52l0.29,0.66l-0.69,-0.45l-0.67,0.12l-0.09,0.54l0.45,0.66l-0.48,0.54l0.2,0.86l-0.64,-0.67l-1.0,-0.08l-0.42,0.3l1.48,1.38l-0.06,0.36l-1.65,0.13l-0.48,0.35l0.26,0.66l1.48,0.23l-0.43,2.11l0.99,1.61l-1.16,2.09l0.32,0.57l-0.27,1.14l-0.69,0.65l0.32,0.55l1.16,0.36l0.09,1.75l0.76,2.92l1.81,3.76l0.5,2.15l2.92,4.1l2.06,2.31l1.45,0.97l0.73,0.02l0.14,0.31l-0.35,0.59l0.49,0.59l-0.33,0.71l-0.53,0.01l-1.16,-0.77l-0.64,0.17l-0.67,-0.66l-0.47,-0.01l-0.33,0.62l-0.46,0.09l0.38,-0.89l-0.6,-0.58l-0.85,0.53l-0.91,-0.33l-0.3,0.28l-0.04,0.96l-0.64,0.15l-1.7,-1.14l-0.57,-0.11l-0.27,0.3l-0.66,-0.58l-1.29,1.56l0.21,0.95l-0.26,0.35l-0.67,-0.95l-1.08,-0.64l-0.25,-1.22l-1.02,-1.04l-0.52,-0.18l-0.35,1.24l-0.48,-0.46l-1.31,0.43l-1.08,-1.19l-0.54,0.29l-0.09,-0.95l0.33,-1.04l-0.96,-1.63l0.74,-0.11l0.87,0.47l0.27,-0.77l1.44,-0.28l0.3,-0.52l-0.29,-0.49l-0.91,-0.03l0.8,-0.76l-0.72,-0.83l-0.5,0.05l-0.41,0.66l-0.6,-0.31l-0.28,0.36l-1.14,-0.73l0.57,-0.48l0.52,-1.64l1.22,-0.58l0.07,-1.0l-0.8,-0.11l-0.38,0.57l-1.23,0.68l-0.42,1.31l-0.62,-1.86l0.83,-1.39l-0.02,-0.56l-0.89,-0.46l-1.09,1.34l-0.78,-0.1l-0.22,0.91l-1.13,-0.77l-0.47,-2.22l-0.66,-0.21l-0.38,1.26l-0.43,0.18l-0.0,-0.37l-0.62,-0.32l-0.84,1.14l0.16,0.55l-1.19,0.34l-1.36,-1.46l0.07,-0.7l-0.68,-2.17ZM193.06,263.26l0.1,-0.03l0.04,0.08l-0.1,-0.02l-0.04,-0.03ZM190.21,58.75l1.51,-2.64l-0.48,-2.0l0.12,-2.07l0.46,-0.28l2.52,0.78l0.49,-0.22l0.29,-1.11l1.11,0.09l0.39,1.44l-0.25,1.5l0.36,1.79l-0.55,1.36l0.45,1.29l-0.21,0.67l-0.45,0.36l-5.01,-0.35l-0.76,-0.6ZM188.59,39.72l0.44,-0.44l0.94,0.07l0.26,-0.8l3.45,-0.75l0.02,0.64l1.49,1.09l0.42,1.57l-2.32,0.91l-0.68,-0.74l-2.21,0.67l-0.96,-0.6l0.48,-1.01l-0.38,-0.53l-0.95,-0.07ZM180.92,36.69l-0.02,-0.56l0.46,-0.58l0.83,-0.3l0.69,0.34l1.36,-0.55l0.06,0.72l0.82,0.31l1.2,-2.12l0.59,0.29l0.66,0.98l2.81,1.66l-5.17,2.16l-0.73,-0.44l0.05,-1.18l-0.5,-0.52l-0.75,0.23l-2.37,-0.45ZM185.98,54.51l1.06,-0.78l-0.35,-0.72l0.86,-0.71l0.63,0.39l-0.11,0.79l-1.24,1.33l-0.48,0.15l-0.37,-0.45ZM186.19,49.57l0.4,-0.1l0.27,-0.25l-0.12,0.85l-0.55,-0.49ZM184.27,46.34l0.84,-0.33l0.7,0.76l-0.18,0.94l-1.35,-1.36ZM183.24,50.09l0.41,-1.58l0.41,-0.74l0.58,1.35l-0.28,0.57l-1.13,0.4ZM180.15,46.59l0.65,-1.08l-0.58,-0.8l-0.02,-1.13l1.07,0.38l-0.36,0.75l0.19,0.59l1.15,0.3l0.36,1.6l-0.68,1.53l-1.82,-1.31l0.03,-0.83ZM181.78,55.6l-0.26,-1.82l0.3,-0.72l0.61,0.76l-0.11,1.48l-0.54,0.3ZM171.52,53.78l1.87,-0.29l0.2,-0.7l0.64,-0.35l-0.12,-1.44l0.8,-1.13l0.58,0.34l0.74,-0.39l0.47,0.12l0.07,1.18l1.01,1.71l1.69,1.07l-0.23,0.75l-0.64,-0.5l-0.52,0.37l-0.44,1.97l-3.89,-0.01l-0.43,-0.83l-1.12,-0.25l-0.69,-1.61ZM172.36,251.55l0.94,-0.13l2.1,2.26l0.63,0.13l-0.28,1.61l-0.52,0.47l-0.52,-0.35l-0.22,-1.22l-0.91,-1.2l-0.52,-0.32l-0.68,0.17l-0.64,-0.43l-0.12,-0.62l0.74,-0.38ZM144.27,51.2l0.13,1.2l0.76,0.61l0.84,-0.34l0.49,0.43l0.83,-0.28l1.81,0.2l0.29,-0.46l0.67,-0.21l0.25,-0.9l-1.69,-1.09l-1.01,-0.11l-0.1,-0.28l2.96,-0.51l0.13,-0.77l-0.61,-0.41l0.11,-0.89l-0.67,-0.39l-0.55,0.22l-0.96,-0.2l-1.27,0.65l2.51,-2.05l1.05,0.25l0.84,-1.03l0.51,0.65l0.14,1.18l0.92,-0.04l0.7,0.46l0.84,-0.97l0.68,0.32l0.63,-0.15l0.4,-0.68l-0.21,-0.68l1.08,-1.36l0.09,-0.65l-0.57,-0.71l1.18,0.31l0.53,-0.2l0.28,-2.69l-0.37,-0.71l-0.49,-0.09l-1.44,0.78l0.46,-0.74l-0.62,-0.58l-1.31,0.77l0.74,-0.94l-0.09,-0.51l2.93,-2.12l0.69,-1.34l1.95,-1.14l0.38,0.24l-0.99,0.33l-0.79,0.76l0.01,0.87l0.47,0.17l3.68,-1.23l0.41,-0.45l0.72,1.57l-1.17,0.34l-0.45,0.49l-1.0,0.1l-0.36,0.4l0.31,0.78l-1.06,0.46l-0.39,0.9l0.68,1.29l0.65,-0.01l1.16,-1.34l0.3,0.42l0.55,0.09l0.56,-1.04l0.3,-0.05l0.29,0.79l0.6,0.06l0.5,-1.02l0.98,1.35l1.25,0.41l-0.16,1.01l-2.77,1.96l-1.05,2.42l-4.16,0.3l-0.64,0.93l-1.73,0.29l-0.31,0.8l0.61,0.87l0.17,1.2l-1.47,1.06l-3.25,-0.73l-0.47,0.26l-0.18,1.21l-0.72,0.88l-0.23,0.85l0.4,0.64l1.32,0.37l0.41,0.82l-0.17,1.11l0.49,0.68l-0.56,0.45l-0.69,-0.12l-0.82,-1.32l-0.89,0.01l-0.17,0.75l0.26,0.92l-0.49,1.53l-0.6,-1.12l-0.83,-0.13l-0.53,0.43l-0.19,1.09l-1.52,0.47l0.64,-2.17l1.4,-0.64l0.46,-0.81l-0.45,-0.53l-0.4,0.07l0.21,-0.74l-0.55,-0.58l-2.48,0.23l-0.95,0.98l0.02,0.59l-1.01,0.46l-0.63,-0.38l-0.04,-1.27l-1.39,-1.71l2.03,-1.85ZM160.8,62.73l1.99,0.01l0.58,-1.77l1.31,-1.17l0.25,0.61l0.66,0.29l0.03,1.78l1.41,1.66l-6.23,-1.42ZM162.39,28.45l-0.01,-0.8l-0.49,-0.52l0.1,-0.68l0.71,-0.41l-0.05,-1.06l0.92,-0.06l0.73,1.89l-1.07,0.38l0.08,1.26l-0.91,0.0ZM85.83,358.99l2.26,-0.31l0.74,-0.49l0.55,-1.32l-0.22,-1.91l0.43,0.37l2.5,0.38l0.44,0.79l1.15,0.43l0.98,-0.3l0.29,-0.99l0.96,-0.1l0.88,-0.58l0.6,-1.18l-0.23,-1.65l-0.68,-0.88l0.58,-0.57l-0.36,-1.15l-0.8,-0.2l-0.44,-0.92l-2.45,1.08l-0.77,-0.46l-1.96,-3.45l-0.97,-0.61l-0.03,-1.3l-0.35,-0.25l0.47,0.06l1.29,-1.01l0.26,-2.09l0.46,-0.22l3.19,1.63l0.57,1.34l1.79,1.02l-0.6,0.77l0.38,0.73l-0.36,0.57l0.29,0.42l0.97,-0.36l0.19,-0.61l0.64,-0.38l0.57,0.17l0.41,-0.43l1.74,0.51l2.01,1.11l1.33,1.16l1.34,-0.12l1.06,-0.96l0.98,0.97l1.7,0.24l0.52,-0.27l0.07,-0.71l-0.59,-1.75l0.3,0.09l0.24,-0.65l-0.47,-0.61l-0.84,-2.57l-0.87,-0.73l-1.93,-3.47l0.04,-2.15l0.35,-0.6l2.3,-1.51l1.07,-1.11l1.23,-2.02l3.18,-1.1l1.73,-1.51l2.67,-4.57l1.89,0.85l-0.41,0.44l0.39,0.61l3.62,-0.64l0.36,1.02l1.05,0.37l0.52,0.7l-2.0,1.67l0.24,1.04l0.67,0.34l0.6,0.84l0.37,-0.36l0.04,-0.88l-0.59,-0.61l1.72,-0.84l0.86,1.09l-0.04,1.04l0.73,1.67l0.41,0.3l0.43,-0.88l-0.58,-3.93l0.36,-1.86l0.39,-0.44l1.25,1.31l1.48,0.93l4.66,2.21l0.68,-0.2l2.51,0.72l4.29,2.75l3.33,-0.08l0.38,-0.64l-0.09,-1.06l1.9,-2.25l3.93,0.13l-0.02,10.92l0.6,0.32l2.77,-0.65l2.29,4.85l0.68,0.66l1.31,0.5l-0.57,2.82l-3.58,-0.94l-0.45,0.34l-0.47,1.2l-2.75,-0.18l-0.61,1.6l-1.71,0.09l-0.41,1.4l-0.7,-0.11l-0.23,-1.01l-0.45,-0.37l-7.9,0.26l-1.57,0.74l-2.74,-0.17l-2.27,1.55l0.82,1.58l1.67,1.34l2.98,0.98l1.94,1.61l0.97,2.17l-0.38,1.0l-0.0,1.49l0.86,1.25l2.28,1.22l-0.54,1.44l-1.91,1.69l0.81,2.47l-0.02,3.21l0.86,0.58l0.02,1.05l0.35,0.49l1.29,0.08l0.68,-1.52l2.65,0.04l0.46,-0.31l0.09,-1.05l-0.36,-0.67l0.5,-2.6l1.36,0.2l0.37,-0.3l0.23,-1.0l0.5,-0.09l3.39,0.59l-1.15,6.43l-0.52,0.16l-0.31,0.61l-0.88,4.57l0.53,0.82l1.6,0.5l-0.7,4.0l-2.07,0.43l-2.09,1.09l-0.54,1.92l-1.57,-0.29l-0.34,-1.27l-2.14,-0.59l-2.22,0.17l-0.9,2.03l-0.83,-0.4l-0.2,-0.9l-0.84,-0.18l-0.55,-0.76l-1.5,0.96l-1.75,-0.43l-0.31,-0.19l0.1,-1.04l-0.27,-0.4l-2.23,-0.45l-0.67,0.4l-0.51,2.82l-4.83,-0.66l-0.2,-1.14l-0.88,-0.05l-1.64,0.72l-0.39,1.44l-0.91,0.41l-0.18,0.75l-1.73,-0.33l-0.46,0.55l-0.9,-1.09l-1.03,-0.12l-1.39,0.98l-1.9,-0.69l-0.1,-0.57l-0.41,-0.31l-1.14,0.56l-1.1,-0.36l-0.82,0.51l-0.44,2.01l-0.36,0.1l-0.61,0.04l-1.19,-0.6l-0.63,-0.78l-0.8,0.59l-1.04,-0.63l-0.42,0.86l-1.84,0.55l-0.79,-0.85l-0.8,-0.17l-1.57,0.57l-1.17,-0.12l-0.59,-0.94l-0.59,-0.06l-1.1,0.92l-0.25,-0.74l-0.81,-0.24l-0.38,-1.5l-0.62,-0.02l-0.18,0.31l-0.15,-2.11l-1.01,-0.44l-0.61,-1.22l-0.5,-3.8l0.62,-0.73l0.25,-2.89l-0.65,-0.52l-0.45,-2.28l-1.42,-0.35l0.63,-1.07l0.12,-1.19l-0.48,-2.38l-1.19,-0.68l-1.17,0.39l-1.69,-0.71l-1.27,-1.16l-1.19,-2.14l0.78,-2.12l-0.75,-0.42l-0.32,-2.16l-0.92,-0.59l-0.78,-1.15ZM159.25,55.4l1.27,0.18l0.42,1.0l-1.08,1.1l-0.27,2.26l-2.06,-2.63l1.72,-1.91ZM136.16,45.36l-0.5,-1.28l-0.63,-0.62l-1.99,-0.63l1.01,-0.65l7.37,-2.3l0.28,-0.38l-0.24,-0.41l2.19,-0.16l1.52,-1.84l0.11,-0.38l-0.47,-0.82l1.74,-0.4l1.58,1.34l1.1,0.25l1.26,-0.66l1.48,1.81l-0.63,0.23l-0.23,0.72l1.58,2.45l-0.03,0.65l-1.22,-0.96l-1.78,-0.28l-0.17,-1.19l-0.51,-0.33l-0.74,-1.69l-0.62,-0.31l-1.68,1.59l0.32,1.2l-0.44,-0.13l-0.49,0.29l-0.29,1.15l0.37,0.95l-0.83,-0.24l-0.81,1.1l-0.22,1.03l-1.37,-0.34l-0.45,0.19l-0.03,1.19l-0.56,0.11l-0.34,0.61l0.03,1.35l-1.62,0.49l0.2,-3.29l-0.44,-0.85l-0.7,-0.03l-0.62,0.62l-0.5,-0.22l-0.99,1.09ZM120.25,319.42l0.31,0.13l0.11,0.31l-0.27,-0.2l-0.15,-0.24ZM107.71,345.92l0.35,0.01l0.4,0.78l-0.27,-0.04l-0.48,-0.75ZM108.32,344.97l0.29,0.07l0.15,0.38l-0.09,-0.12l-0.35,-0.33Z",
            "name": "Arkhangelskaya oblast"
        },
        "RU-KC": {
            "path": "M111.19,539.54l0.38,-1.35l0.79,-0.47l-0.05,-0.85l1.12,0.22l0.15,0.5l0.62,0.22l0.6,-0.08l1.07,-0.96l0.59,-1.17l-0.3,-1.06l0.66,-0.39l0.38,0.67l1.72,0.46l0.49,0.46l-0.59,0.41l-0.03,0.74l0.51,0.95l1.12,0.06l0.31,0.91l-0.04,0.61l-1.09,0.56l0.08,0.89l-0.43,1.61l-1.49,0.38l-2.3,-0.24l-1.01,-0.84l-1.9,-0.29l-1.44,-0.88l0.07,-1.04Z",
            "name": "Karachayevo-Cherkesskaya Respublika"
        },
        "RU-TY": {
            "path": "M363.84,478.29l1.25,-0.45l0.12,0.45l0.49,0.27l0.9,-0.48l0.78,0.44l0.99,-0.29l1.11,-1.36l1.0,-0.22l-0.31,-2.06l0.5,-1.02l0.86,-0.44l1.64,0.87l0.82,1.5l1.24,-0.25l0.81,0.47l1.63,-0.15l2.95,1.0l2.15,0.02l1.07,-0.52l0.96,0.03l2.73,-2.57l1.71,-0.86l0.5,-1.9l1.59,-1.96l0.46,-1.49l1.89,-0.67l0.55,-2.31l0.46,-0.58l-0.23,-0.78l0.24,-0.25l1.48,0.07l0.87,-0.5l0.36,0.41l0.67,0.11l1.66,-1.19l1.99,0.51l0.92,-1.14l0.65,0.6l1.46,-0.39l0.7,-1.48l1.34,0.92l1.06,0.26l1.54,1.91l1.66,0.21l0.54,0.84l1.11,0.27l0.34,1.04l3.43,-0.31l0.01,0.77l1.18,0.67l-1.0,-0.36l-0.5,0.28l-0.46,0.85l0.45,1.3l-0.6,0.46l-0.13,0.77l-0.89,1.1l0.11,1.53l0.22,0.24l0.64,-0.15l0.34,0.8l-0.84,2.33l-1.99,1.08l-0.59,1.77l-0.86,0.31l-0.78,1.54l0.07,0.72l-0.64,2.16l0.85,1.13l-0.11,0.62l0.51,1.3l1.32,0.83l-0.16,1.65l-1.0,1.96l-0.91,0.57l-0.45,-0.14l-1.02,0.37l-0.3,0.86l-1.04,0.68l-1.63,-1.3l-1.4,-0.22l-0.58,0.27l-0.53,-0.35l-0.69,0.27l-1.56,-0.89l-0.61,0.23l-0.79,-0.4l-1.62,0.95l-0.62,-0.36l-1.47,-0.0l-0.82,-0.81l-1.53,0.19l-1.17,-1.39l-0.17,-1.64l-0.51,-1.33l-6.21,-0.4l-0.6,-1.43l-1.14,-0.13l-0.63,0.9l-1.51,-1.57l-0.64,0.27l-0.61,1.22l-2.17,0.06l-1.88,1.84l-2.22,0.41l-1.34,1.02l-0.25,0.63l-0.92,-0.05l-2.56,1.24l-0.32,0.87l-1.23,0.18l-0.11,-1.06l-0.49,-0.99l-0.61,-0.21l0.06,-0.29l2.21,-0.78l0.27,-1.07l-0.39,-0.58l-0.7,-0.3l-1.51,-2.18l-1.67,-1.61l-0.06,-0.9l-0.48,-0.48l0.1,-1.64l-0.74,-0.77Z",
            "name": "Tyva, Respublika [Tuva]"
        },
        "RU-MUR": {
            "path": "M47.07,289.48l3.46,-2.27l1.04,-3.38l1.09,-0.15l0.73,-0.59l1.2,-0.26l0.98,-1.24l0.59,-2.15l1.01,0.97l1.28,0.22l0.87,-0.21l0.52,-1.29l-0.39,-2.54l1.69,0.46l0.4,0.43l-0.51,1.17l0.0,0.45l0.42,0.16l1.0,-1.21l1.54,0.08l0.45,-0.5l-0.55,-0.74l0.2,-1.27l1.14,1.1l-0.02,1.03l-0.39,0.1l-0.21,0.68l0.36,0.25l-0.23,0.82l0.27,0.38l0.89,-0.43l0.86,0.26l0.23,0.46l-0.98,0.88l-0.19,0.71l0.23,0.18l0.69,-0.08l0.95,-0.84l1.29,-0.06l-0.27,0.68l0.19,0.46l0.6,-0.2l-0.6,1.34l0.45,0.58l0.7,-0.32l0.42,-1.11l2.1,-0.68l-0.43,0.43l0.19,0.34l-0.38,0.6l-0.78,0.64l0.77,1.16l0.48,0.21l-0.76,0.74l-1.22,0.45l-0.41,0.68l0.0,1.64l0.38,0.33l0.4,-0.3l0.19,-1.41l1.69,-0.52l0.84,-1.22l0.21,-2.08l0.5,0.35l0.77,-0.08l0.18,-0.34l2.19,0.3l1.45,0.91l1.37,0.27l0.27,0.58l0.68,-0.38l0.38,0.56l0.7,-0.34l0.26,-1.01l2.76,1.17l0.74,0.79l1.07,0.36l0.32,0.73l1.19,0.51l3.52,2.62l0.26,0.59l1.13,0.94l1.16,0.45l1.3,1.5l0.69,1.37l1.31,0.92l0.5,1.53l1.85,0.76l0.82,-0.41l0.14,0.62l3.14,2.81l1.76,0.48l0.44,-0.14l1.0,1.25l1.11,0.78l-0.3,0.67l1.06,1.44l0.56,0.0l0.34,-0.47l0.82,0.85l0.68,-0.04l0.34,0.73l-0.28,2.46l0.78,0.77l-0.14,2.42l0.84,0.68l0.37,-0.04l0.18,0.93l-1.06,4.01l-2.24,2.76l-0.23,0.93l-0.71,0.9l-2.46,2.14l-3.1,1.36l-0.69,0.6l-4.01,0.99l-4.56,-0.86l-2.0,-1.39l-2.03,-0.71l-2.59,-0.16l-4.44,-1.2l-3.89,-2.95l-1.76,0.97l-0.19,-0.53l0.52,-0.14l0.19,-0.58l-0.25,-0.33l-1.6,-0.22l-0.25,-1.22l-0.65,0.09l-0.56,0.89l-1.28,-1.41l-1.12,-0.45l-0.39,1.0l-2.86,-2.92l-0.06,-0.55l0.71,-0.3l-0.04,-0.66l-1.12,-0.07l-2.17,-0.91l-1.63,0.24l-0.95,-0.34l-0.51,0.33l0.6,1.04l1.57,-0.11l0.22,0.77l1.05,0.49l0.15,0.37l-0.83,0.29l0.38,0.55l-0.24,0.45l2.12,1.65l-0.24,0.1l0.15,0.52l1.7,0.73l-0.16,0.49l-2.57,0.29l-0.28,1.16l-0.96,0.44l-0.14,1.21l-1.88,0.03l-0.22,-1.58l-0.84,-0.68l-0.3,-1.27l-0.46,-0.4l-2.61,-0.38l-8.66,0.72l-1.34,-2.51l0.06,-1.77l2.18,-4.09l2.11,-2.93l0.39,-2.87l-1.81,-1.83l-1.78,-3.6l-3.37,-1.67l-1.11,-4.43l1.84,-4.39l-0.47,-0.8l-1.11,-0.2ZM65.87,276.37l0.06,-0.68l-0.89,-1.83l1.18,1.32l1.11,0.35l0.28,0.8l2.46,0.62l0.5,0.39l-0.03,0.77l-0.93,0.77l-2.0,-0.89l-1.23,-0.12l-0.07,-1.06l-0.43,-0.43ZM76.22,282.4l0.35,-0.04l0.11,0.09l-0.45,-0.05Z",
            "name": "Murmanskaya oblast"
        },
        "RU-VOR": {
            "path": "M97.94,477.7l0.17,-0.37l0.75,0.03l0.57,-0.42l0.14,-0.51l-0.44,-0.33l-0.2,-1.46l2.05,-0.74l0.59,0.77l0.56,0.12l1.03,-0.96l0.85,0.22l0.25,0.88l1.38,0.44l1.98,-0.43l3.93,0.54l-0.17,1.23l1.1,0.44l2.46,-0.55l2.25,1.03l0.96,0.14l0.39,-0.27l0.38,0.62l0.89,-0.2l1.64,1.47l0.2,1.0l-2.67,0.87l-1.53,-0.59l-0.99,0.3l-0.61,1.34l-3.04,2.15l0.14,0.52l0.81,0.44l0.56,0.9l-0.21,0.76l0.42,0.72l-1.1,1.62l0.27,0.8l-1.16,0.8l-0.44,1.47l-0.58,0.66l-1.98,0.77l-1.52,-0.26l-1.13,0.17l-0.79,0.51l-0.73,-0.45l-0.34,-0.87l-1.64,-0.28l-0.24,-0.94l0.46,-1.22l-0.79,-1.01l-0.19,-1.48l-0.46,-0.73l0.43,-0.24l0.12,-1.39l-1.6,-0.9l-0.28,-0.66l0.66,-0.51l-0.28,-1.53l-0.76,-0.39l-0.79,0.51l-0.5,-0.48l0.34,-0.75l-0.89,-0.99l0.14,-0.41l-0.37,-0.35l-0.05,-1.04l-0.46,-0.53Z",
            "name": "Voronezhskaya oblast"
        },
        "RU-PSK": {
            "path": "M41.05,423.52l0.15,-0.84l0.57,-0.32l0.15,-0.86l1.05,-0.26l0.4,-0.5l0.5,0.37l0.87,-0.04l0.6,-0.9l-0.11,-1.16l-1.12,-1.69l-1.12,-0.32l-0.63,0.2l-0.31,-0.58l0.53,-0.22l0.32,-1.13l0.36,0.03l0.33,-0.72l-0.37,-2.06l0.16,-1.94l-0.37,-0.86l1.51,0.02l0.97,1.38l1.39,-0.13l1.84,0.43l1.59,1.13l0.05,0.81l1.04,0.32l0.49,1.12l1.79,0.46l-1.3,1.48l0.12,1.9l0.41,0.33l0.49,-0.16l0.6,1.32l3.02,0.62l-0.69,0.7l0.46,0.52l-0.07,0.67l0.54,0.54l-0.77,2.43l0.51,0.65l0.97,0.44l-0.42,0.41l0.0,2.25l1.31,0.66l0.04,0.45l-0.52,0.29l-0.13,0.49l0.61,1.34l0.95,-0.03l-0.31,1.57l1.06,0.54l0.19,0.91l1.23,0.48l0.03,1.96l-0.69,0.56l-0.09,0.46l0.45,1.6l-1.5,-0.31l-0.54,0.3l-0.54,1.18l-0.46,0.06l-1.34,-1.65l-1.61,-0.73l-0.64,0.28l-1.1,-0.15l-2.11,1.35l-0.36,-0.44l0.51,-1.21l-0.53,-0.69l-2.02,-0.72l-1.36,0.77l-0.7,-1.35l-1.36,-0.03l-0.4,0.26l-0.35,-0.4l0.28,-1.23l-0.59,-2.11l0.1,-0.58l-0.65,-0.49l-0.12,-0.85l-0.53,-0.47l0.04,-0.99l-1.06,-0.55l0.34,-1.18l-0.15,-0.63l0.59,-0.71l0.01,-1.33l-1.66,-1.35l0.06,-0.77l-0.4,-0.43l-0.53,0.0ZM42.91,419.94l-0.21,-0.08l0.03,-0.12l0.2,0.17l-0.02,0.04Z",
            "name": "Pskovskaya oblast"
        },
        "RU-TVE": {
            "path": "M59.25,431.29l0.83,-1.32l1.31,-0.21l1.47,0.22l0.85,-0.81l0.07,-0.69l1.01,0.15l1.2,-0.98l1.41,-0.57l1.35,-0.94l0.73,-1.13l2.46,0.24l0.32,-0.48l-0.28,-0.78l0.46,-1.09l1.01,-0.6l0.28,-1.33l0.67,-0.73l-0.08,-1.1l-0.42,-0.52l0.23,-0.48l0.9,0.09l1.32,-0.59l2.97,1.23l0.4,-0.44l-0.06,-1.11l1.32,0.37l0.73,-0.26l0.86,-0.62l0.41,-1.34l0.87,-0.27l1.92,0.25l0.9,-0.84l1.27,0.09l0.93,-0.39l1.82,-2.27l-0.06,-0.76l1.16,-0.24l0.21,0.76l2.34,2.92l-0.83,0.14l-0.56,0.71l-0.01,1.87l1.31,0.86l-0.55,0.75l-0.83,0.35l0.08,1.65l2.23,2.23l-0.07,1.63l0.28,0.32l1.51,0.89l0.88,-0.17l-0.79,0.86l0.0,0.57l0.56,0.81l-0.53,0.84l0.24,0.75l-0.42,0.59l-1.54,-1.23l-0.63,0.09l-0.79,0.58l-0.2,0.92l-1.86,0.47l-0.26,0.62l0.12,1.29l-1.39,-0.43l-1.78,1.38l-0.81,-0.02l-1.25,0.69l-1.42,-0.33l-0.61,-0.65l-1.27,0.1l-0.29,0.39l0.25,1.64l-0.69,0.31l-0.34,1.54l-0.6,0.78l-1.94,-0.03l-0.53,0.46l-2.04,-1.41l-1.88,-0.04l-0.78,1.19l-0.82,0.18l0.0,0.86l-0.75,0.82l-1.41,0.52l-0.28,0.39l-1.08,0.06l-1.04,-0.43l-0.8,0.14l-1.1,-0.32l-0.78,0.3l-1.51,-0.87l-1.03,0.44l-1.1,-0.13l-0.39,-1.6l0.68,-0.79l-0.08,-2.62l-0.99,-0.36l-0.67,-1.22l-0.83,-0.31l0.34,-1.07l-0.13,-0.68l-0.28,-0.28l-0.94,0.03l-0.03,-0.45ZM96.83,430.39l0.12,0.19l0.07,0.25l-0.04,-0.0l-0.14,-0.43Z",
            "name": "Tverskaya oblast"
        },
        "RU-VGG": {
            "path": "M114.09,484.67l0.48,-0.23l0.33,-0.66l1.57,-0.94l0.59,-1.3l2.01,0.52l1.55,-0.3l0.81,-0.6l0.57,0.05l2.6,1.83l1.87,-0.49l0.27,-0.36l0.97,-0.12l0.37,0.4l0.94,-0.08l0.48,-0.74l0.99,-0.12l0.56,0.51l0.61,-0.24l1.66,0.35l0.72,0.48l0.04,0.73l0.49,0.53l-0.15,0.74l-0.58,0.52l0.31,1.2l0.36,0.25l1.14,-0.22l0.47,0.48l0.97,-0.38l0.17,-1.25l0.36,-0.16l0.94,0.69l0.02,1.0l0.44,0.35l2.26,-0.24l0.22,-0.61l0.71,-0.48l1.06,1.54l0.69,0.16l0.59,-0.26l0.17,0.73l0.45,0.4l-0.31,1.22l0.28,0.88l-2.06,1.57l-0.79,4.35l1.34,1.28l-0.04,0.54l-1.35,1.37l-0.56,1.52l-1.3,-1.03l-1.76,-0.27l-2.26,2.21l-1.93,0.33l-0.5,0.94l-0.76,0.57l-0.52,1.94l-0.46,0.39l-0.82,-0.2l-0.25,-0.89l-1.64,-0.37l-0.09,1.79l0.77,0.53l-0.38,0.56l-1.53,-0.14l-0.52,1.09l-0.65,0.05l-0.78,0.59l-0.45,1.47l-1.74,0.28l-0.34,-0.92l-1.03,0.22l-0.97,-2.25l-1.33,-1.35l-1.03,-0.34l-1.24,0.13l0.34,-0.55l-0.11,-0.64l0.34,-0.3l-0.31,-1.01l2.76,-0.93l0.45,-0.61l-0.2,-0.88l0.46,-0.91l-0.46,-1.38l-1.46,-0.87l-0.29,-0.73l-1.29,-0.03l-0.03,-2.33l0.54,-1.82l-1.66,-1.85l-1.41,-0.58l-0.01,-0.54l-1.11,-1.28l0.67,-1.22l-0.44,-1.05l0.56,-0.84l-1.39,-1.4Z",
            "name": "Volgogradskaya oblast"
        },
        "RU-KOS": {
            "path": "M109.75,424.57l0.83,-0.48l0.37,-0.64l-0.32,-3.29l1.47,-2.01l-0.04,-0.52l0.45,-0.75l1.06,-1.06l-1.1,-2.32l1.36,-1.32l-0.29,-0.86l0.46,-0.67l-0.07,-0.66l0.48,-0.04l1.91,-1.38l0.76,0.15l0.96,-0.49l0.42,-1.32l-0.61,-0.61l0.15,-0.92l0.24,0.87l0.55,0.58l1.85,-0.46l0.14,0.73l0.87,0.76l0.71,-0.01l1.16,-0.91l1.02,0.51l0.55,-0.33l0.24,0.66l0.5,0.04l0.82,-0.77l1.18,0.46l0.84,-0.24l0.22,0.47l0.8,0.44l3.67,0.19l0.6,-0.63l4.41,-0.07l0.65,-1.24l1.56,-0.39l0.3,-0.36l0.18,-2.54l2.95,0.1l-0.25,2.03l0.31,0.44l0.69,0.16l-0.03,1.14l1.7,1.74l0.02,0.91l-1.33,0.19l-0.1,1.41l-0.86,0.0l-0.59,0.85l-0.04,0.67l-2.09,0.59l-0.18,1.42l-0.86,0.8l0.0,1.34l-0.53,1.2l-2.35,0.26l-1.02,1.0l-0.69,-0.91l-2.31,-0.53l-1.16,0.27l-0.47,1.37l0.36,0.85l-0.56,1.32l-0.78,0.12l-1.23,1.64l-1.67,0.83l-0.96,-0.12l-0.82,-0.9l0.11,-0.7l-0.44,-0.39l-0.78,0.4l-0.81,1.01l-0.21,-1.17l-0.49,0.17l-0.31,1.97l-0.98,0.19l0.24,-0.47l-0.06,-1.85l-0.66,-0.7l-0.59,0.04l-0.42,0.64l-1.18,-0.0l-0.39,0.54l-0.52,0.12l-0.67,-0.19l-1.55,-1.48l-0.76,-0.16l-0.78,0.72l0.09,2.07l-1.73,0.3l-1.07,0.95l-2.49,0.38l0.04,-1.2ZM125.1,406.89l-0.01,-0.08l-0.03,-0.1l0.07,0.11l-0.02,0.07Z",
            "name": "Kostromskaya oblast"
        },
        "RU-KL": {
            "path": "M116.23,521.49l0.73,0.15l0.8,-1.11l1.15,-0.19l-0.02,-0.89l-0.67,-0.78l0.25,-0.21l1.01,0.34l1.15,0.93l1.07,0.17l0.7,-0.32l1.73,1.62l-1.78,-0.98l-2.2,1.91l-0.47,0.07l0.06,-0.74l-0.37,-0.36l-1.05,0.24l-0.35,1.02l-1.49,-0.23l-0.26,-0.63ZM124.67,521.53l1.18,0.03l0.67,-0.49l0.43,-0.9l0.39,0.46l0.84,-0.47l-0.08,-1.78l-0.36,-0.47l0.29,-0.7l1.74,-1.36l0.43,-1.8l0.04,-2.96l-0.58,-0.95l-1.16,0.15l-0.19,0.96l-0.55,0.16l-0.32,0.58l-0.85,-1.6l0.3,-0.68l1.27,-0.49l0.49,-1.03l1.4,0.28l0.48,-0.4l0.41,-1.09l1.5,-0.05l0.94,-0.82l0.53,0.43l1.35,0.14l0.83,0.77l0.6,-0.11l0.12,1.06l1.25,1.91l1.9,1.49l0.91,-0.1l1.55,3.26l0.72,0.38l0.42,0.89l0.66,0.11l0.25,0.42l-1.25,1.04l-0.04,0.96l-1.61,0.29l-0.57,0.67l-0.17,0.78l1.9,0.47l0.03,1.25l1.4,-0.21l-0.49,0.54l-0.73,2.57l-0.09,0.44l0.38,0.48l2.52,-0.69l0.41,0.75l-0.66,0.55l-0.09,1.48l-0.41,0.29l-0.43,1.39l-0.64,0.49l-0.38,-0.07l-0.14,0.97l-0.46,-0.08l-2.04,-1.1l-3.52,-0.39l-0.81,-1.21l-4.48,-2.54l-1.69,-0.24l-1.02,-0.57l-0.56,-1.27l-1.18,-1.26l-2.64,-0.59l-0.35,-0.41ZM130.55,506.26l-0.43,-0.04l-0.06,-0.62l0.46,0.15l0.04,0.52Z",
            "name": "Kalmykiya, Respublika"
        },
        "RU-TOM": {
            "path": "M291.71,415.91l1.14,-1.15l-0.14,-0.65l-0.77,-0.7l0.15,-0.78l1.05,-1.01l1.62,-2.45l-0.22,-2.16l0.89,-0.53l0.39,-1.17l0.56,-0.16l0.79,-1.11l1.36,-0.04l1.27,-0.55l0.11,-1.17l0.47,-0.82l0.08,-3.29l-0.22,-0.49l0.7,-1.59l-0.5,-1.13l0.13,-0.71l1.33,-0.96l0.1,-0.83l-0.4,-0.9l0.5,-0.32l0.08,-1.0l1.24,0.4l1.53,-0.15l1.27,0.84l1.09,-0.59l1.89,0.25l0.95,-0.48l0.73,0.46l1.85,-0.58l0.26,1.01l0.75,0.83l2.56,-0.31l1.82,0.29l1.39,-1.1l1.38,-0.31l1.29,0.36l0.21,0.82l0.55,0.5l1.98,0.25l1.76,-0.3l1.94,1.24l1.31,-1.04l0.13,-1.17l3.74,-3.18l1.58,-0.17l2.45,2.28l1.46,-0.17l2.19,3.96l0.35,0.81l-0.78,1.62l-0.13,1.67l-0.41,0.74l0.98,1.13l4.48,0.24l2.54,-0.67l3.34,0.06l2.19,0.64l0.49,1.87l1.82,0.36l2.03,4.09l3.54,-0.17l0.09,0.75l0.95,1.49l-2.08,1.0l-2.47,4.02l0.44,3.16l0.92,1.57l2.82,0.71l0.91,0.77l2.43,0.11l0.06,2.48l-1.2,0.24l-0.34,0.91l-1.12,0.77l-0.67,1.98l-1.12,1.09l0.08,0.77l0.83,0.25l-0.56,1.97l-0.84,-0.29l-3.04,2.52l-1.11,-0.86l-0.93,0.25l-1.13,-0.48l-0.59,0.32l0.1,0.97l-1.95,-0.89l-1.41,0.68l-0.46,-0.55l-0.94,-0.02l-0.71,1.27l-1.2,0.49l-0.59,0.84l-0.9,0.4l-0.16,0.77l-1.44,-0.18l-0.77,0.28l-0.31,0.62l-0.8,-0.2l-2.81,1.42l-0.77,-0.35l-1.43,0.47l-0.42,0.97l-0.69,0.41l-0.68,1.53l-1.24,-0.28l0.71,-1.37l-0.85,-1.25l0.18,-0.75l-0.7,-0.26l0.38,-0.42l-0.4,-0.69l0.57,-1.85l-1.07,-1.18l-0.69,0.32l-1.11,-0.05l-0.21,0.92l-3.13,0.82l-1.13,-0.03l-1.87,0.7l-1.59,-2.16l-0.66,-0.36l-4.45,0.8l-3.4,-4.45l-5.93,-1.92l-0.39,-0.48l-7.97,-0.26l-4.06,-0.58l-0.58,-1.22l-0.71,-0.29l-0.65,-1.77l-0.68,-0.58l-0.21,-2.7l-2.28,-1.68l0.59,-0.84l-0.7,-1.27Z",
            "name": "Tomskaya oblast"
        },
        "RU-KO": {
            "path": "M136.01,352.05l1.76,-1.02l2.44,0.24l1.67,-0.75l7.49,-0.25l0.42,1.16l1.4,0.32l0.52,-0.36l0.33,-1.21l1.67,-0.1l0.58,-1.52l2.7,0.18l0.66,-1.42l3.26,0.92l0.64,-0.12l0.76,-4.0l-2.05,-1.11l-2.44,-5.02l-0.6,-0.17l-2.54,0.6l0.08,-10.55l12.97,-8.61l0.33,-0.74l-0.27,-0.27l0.08,-0.95l0.65,0.09l0.83,-0.43l0.23,-0.59l1.49,-1.1l8.33,1.19l31.64,-0.04l0.64,0.64l0.97,-0.49l8.1,-0.31l0.51,-0.3l0.86,-1.36l5.13,-3.61l0.31,-2.74l1.15,-1.15l1.53,-1.19l1.43,0.06l0.25,-0.78l0.76,-0.28l0.54,-1.13l-0.58,-1.67l2.31,-1.32l0.53,-0.94l0.63,-0.03l-0.01,-1.97l0.57,-0.59l3.51,-0.52l-0.79,2.29l0.3,2.02l-0.15,1.3l0.9,1.42l2.03,0.0l0.68,-0.38l0.51,0.25l-0.34,1.58l0.77,0.64l0.21,0.62l-0.14,0.26l-0.57,-0.35l-1.07,0.46l-0.39,1.42l0.38,0.56l1.04,-0.18l0.21,0.71l-0.65,0.95l-1.36,0.15l-0.21,1.05l-2.45,2.24l-0.05,1.05l-0.68,0.56l0.19,1.83l-2.67,1.2l-0.36,0.89l-0.56,0.16l-0.47,0.69l-1.73,0.2l-0.96,1.41l-1.27,0.91l-0.8,-0.02l-0.73,1.29l-0.21,1.46l-0.92,0.52l-0.61,1.62l-0.54,0.55l-0.23,1.03l0.22,0.36l-0.32,0.68l0.19,0.38l-1.41,0.35l-2.15,1.46l-1.48,0.5l-3.23,4.79l0.26,0.76l-0.38,0.84l-0.61,0.34l-0.58,1.29l-0.95,0.13l-0.6,1.3l-1.13,-1.54l-1.69,-0.04l-2.63,3.43l-0.23,1.02l0.31,0.79l-1.12,2.21l0.67,0.6l-0.11,2.59l1.37,1.33l-0.36,1.13l-1.08,0.98l-0.43,3.81l-1.09,3.24l0.23,0.67l-0.57,2.47l0.38,1.44l0.98,0.63l-0.44,2.07l0.6,2.02l0.64,0.43l-0.17,1.31l-1.04,2.68l0.41,1.73l-0.75,1.53l0.11,1.63l-2.59,1.8l-8.34,-0.03l-0.63,0.24l-2.28,-0.35l-0.84,0.97l-0.9,0.39l-0.43,2.05l-2.19,-0.43l-0.38,0.33l-0.4,1.41l-2.07,-0.35l-0.65,1.22l-0.79,0.15l-0.37,1.36l-5.58,-1.19l-0.48,0.37l-0.15,0.99l-1.72,-0.37l0.2,-1.0l-0.21,-0.45l-2.74,-0.77l-0.47,0.26l-0.36,1.24l-1.93,-0.09l-0.38,1.26l-2.34,-0.3l-0.79,3.42l1.91,0.79l0.01,0.62l0.98,0.49l-0.05,1.15l-0.8,-0.49l-0.79,0.29l-2.35,3.61l-0.8,-0.83l-1.42,-0.38l-1.56,2.12l-2.12,0.21l-0.94,0.85l-1.31,-0.08l-0.31,0.49l0.19,0.51l-0.64,0.25l-0.19,0.4l-0.18,4.04l-0.73,-0.09l0.17,-1.13l-0.25,-0.59l-0.89,-0.22l-0.34,-0.5l-1.07,-0.46l0.02,-1.44l-2.9,-0.56l-0.25,-4.65l1.16,-1.08l0.4,-0.87l-1.31,-1.44l0.17,-1.11l-0.62,-2.71l0.31,-1.75l1.74,-0.89l0.58,0.09l0.7,-0.54l1.0,-0.0l0.36,-0.42l0.72,-4.69l-0.48,-0.53l-1.58,-0.5l0.79,-4.14l0.85,-0.79l1.26,-7.08l-0.32,-0.46l-3.85,-0.68l-0.99,0.16l-0.49,1.22l-1.19,-0.23l-0.55,0.37l-0.61,3.0l0.36,1.31l-2.69,-0.01l-0.74,0.61l-0.06,0.91l-0.46,-0.04l-0.08,-1.22l-0.81,-0.53l0.05,-2.97l-0.77,-2.23l1.73,-1.38l0.49,-0.87l0.21,-1.48l-2.61,-1.41l-0.6,-0.94l0.42,-2.44l-1.15,-2.42l-2.17,-1.79l-2.82,-0.88l-2.18,-2.1Z",
            "name": "Komi, Respublika"
        },
        "RU-TYU": {
            "path": "M238.09,425.82l-0.09,-1.01l0.76,-1.46l-0.36,-0.65l1.99,-1.19l0.38,0.37l0.6,-0.07l0.83,-1.14l0.52,0.01l0.32,-0.6l0.88,-0.26l1.11,-0.85l-1.09,-2.97l-0.18,-2.44l1.99,0.18l1.89,-0.81l0.46,-0.65l-0.09,-2.05l0.54,-0.28l0.4,0.37l0.53,-0.06l0.97,-0.93l1.52,-0.71l0.89,-1.18l2.33,-0.32l1.0,-0.48l1.12,-2.93l1.44,-0.57l2.51,-1.86l-0.14,-0.73l-0.91,-0.71l0.79,-0.46l0.86,-0.0l0.46,0.84l2.88,0.09l0.52,0.6l0.87,0.26l2.13,-0.44l1.14,0.43l0.79,-0.82l0.53,0.97l2.46,1.54l0.61,0.81l0.64,0.11l2.14,2.57l0.02,0.72l0.53,0.87l0.95,0.58l1.13,-0.5l0.0,1.06l0.7,0.75l-0.28,0.65l0.34,0.51l2.25,0.47l0.99,-0.34l0.53,0.4l1.12,0.01l0.77,0.71l3.37,-0.09l0.77,0.51l0.57,-0.18l0.48,0.44l-2.79,3.06l-1.97,1.52l-5.71,-0.12l-0.86,0.54l-0.44,0.81l-3.51,-0.15l-0.98,-0.96l-3.5,0.39l0.21,-2.88l-0.92,-0.71l-0.4,-0.76l-0.99,-0.29l-0.54,0.21l-2.68,6.46l0.27,1.49l0.74,0.97l0.11,1.09l0.5,0.2l-1.27,1.04l-0.08,0.57l1.29,2.08l0.99,-0.03l0.34,-0.45l-0.03,-0.74l0.89,-0.22l0.07,1.06l0.72,0.32l0.78,1.27l1.26,1.03l0.2,0.74l-0.52,0.87l-0.69,-0.03l-0.25,0.44l-1.61,-0.15l-0.11,1.59l-1.43,0.69l0.03,0.66l0.75,0.37l-0.9,0.87l0.65,1.97l-0.62,0.3l-0.35,1.07l-0.9,0.08l-0.31,0.41l0.58,0.79l-0.13,1.42l0.95,0.58l-0.14,0.4l-0.85,0.33l-0.44,0.8l0.05,0.96l-1.12,1.21l-1.17,-0.5l-1.49,-1.24l-1.94,-0.46l-0.5,0.33l-0.38,-0.44l-1.11,-0.36l-0.52,0.32l-0.01,0.52l-1.07,-0.72l-0.59,0.08l-0.82,-1.28l-0.57,-0.2l-0.09,-1.14l-0.62,-0.15l-0.94,0.42l-0.45,-0.5l-1.85,-0.07l-0.94,-2.17l-1.89,-0.28l-0.52,0.24l-0.21,-0.62l-0.46,-0.21l-1.39,0.86l-0.73,-0.91l-0.74,-0.14l-0.78,0.69l-0.96,-0.92l-0.95,-1.7l-2.09,-0.24l0.01,-0.35l-1.15,-1.29l-0.01,-2.03l0.79,-0.15l0.53,-1.71l-0.36,-0.45l-0.54,0.1l-0.16,-0.25l-0.26,-2.59l-0.58,-0.8Z",
            "name": "Tyumenskaya oblast"
        },
        "RU-DA": {
            "path": "M135.33,535.44l0.49,-0.31l0.25,-0.78l-0.37,-0.62l-0.65,-0.16l0.1,-0.27l0.71,-0.24l1.02,-1.19l0.39,-1.42l3.47,0.32l1.55,0.8l-0.52,1.71l0.19,1.01l0.48,0.44l1.29,0.24l0.36,0.85l0.75,0.34l1.2,2.55l-0.69,1.33l0.2,0.79l0.44,0.39l-0.05,3.4l1.2,1.09l0.17,1.44l1.94,2.24l1.57,2.96l0.79,0.41l-0.86,1.51l-1.76,0.96l-0.9,1.63l-2.61,-0.65l-0.62,-1.7l-0.65,-0.24l-1.75,-2.01l-0.63,0.25l-1.98,-1.24l-1.39,-0.28l-1.43,-1.03l0.52,-1.36l1.28,-0.85l0.28,-0.78l0.67,-0.33l-0.03,-0.88l1.12,-0.01l0.9,-0.74l0.01,-1.17l-0.52,-0.4l-0.07,-1.3l-0.41,-0.74l0.67,-1.57l1.06,-1.22l-0.54,-0.69l-0.58,-0.16l-0.44,-0.89l-0.77,0.04l-0.94,0.96l-0.33,-0.54l-2.52,-0.45l-0.0,-1.19l-1.07,-0.31Z",
            "name": "Dagestan, Respublika"
        },
        "RU-NVS": {
            "path": "M292.24,441.33l0.9,-0.53l0.06,-0.59l-0.36,-0.42l1.18,-1.37l0.8,-0.24l0.22,-0.56l0.93,0.09l0.38,-0.38l0.74,0.17l1.05,-0.57l-0.17,-0.87l-0.93,-0.78l0.18,-1.03l-0.77,-0.63l1.54,-1.93l-0.89,-4.63l3.81,0.56l7.64,0.25l0.28,0.38l5.88,1.83l3.53,4.55l0.56,0.19l4.18,-0.87l2.1,2.56l2.34,-0.75l2.09,-0.15l0.57,-0.42l1.68,-0.12l0.56,-0.5l-0.07,-0.62l0.57,0.23l0.5,-0.24l0.44,0.48l-0.44,0.34l0.05,0.64l-0.54,1.08l0.35,0.43l-0.1,0.47l1.38,2.05l-0.41,0.32l-0.42,1.2l0.74,1.0l2.09,-0.24l0.77,-1.65l0.76,-0.49l0.18,-0.78l1.01,-0.3l0.6,0.63l0.6,-0.26l-0.02,1.0l0.49,0.82l-0.25,0.61l0.9,0.79l0.22,0.79l-0.17,0.67l-0.5,0.41l0.08,0.42l1.14,0.23l-0.25,1.09l0.47,0.71l-0.17,1.61l0.97,1.24l-0.66,0.98l0.47,0.66l-0.39,0.77l0.49,0.88l-1.82,1.12l-0.77,1.41l-1.29,-0.47l-1.51,0.72l-2.12,0.06l-0.64,0.55l-0.01,0.87l-0.62,-1.04l-0.86,0.25l-2.44,2.52l-1.1,2.36l-0.99,-0.75l-0.14,-0.87l-0.68,0.19l-1.57,-0.81l0.52,-0.78l-0.1,-1.0l-1.34,-0.21l-0.73,-0.75l-1.69,-0.54l-1.03,-2.22l-0.59,-0.11l-0.64,0.54l-0.11,0.57l-1.47,1.23l-1.25,0.68l-0.41,-0.22l-0.59,0.31l-1.21,1.23l-0.06,0.6l-0.81,0.12l-0.52,0.85l-4.79,0.71l-0.45,0.51l0.05,0.53l-0.91,0.34l-0.34,-0.04l-0.43,-1.04l-1.5,0.33l-0.46,0.48l0.03,1.17l-0.43,0.25l-6.33,-5.36l-0.37,-0.92l0.87,0.2l0.85,-0.77l0.47,-1.04l-0.14,-0.77l0.48,-0.43l-0.14,-0.62l-1.56,0.13l-0.45,0.71l-0.71,0.35l-1.21,-0.23l-0.56,1.01l-1.73,0.83l-0.03,-2.91l0.52,-0.24l0.25,-0.79l-0.23,-0.91l-0.55,-0.27l-0.22,-0.75l-0.72,-0.22l0.04,-0.7l-0.83,-0.18l0.2,-0.91l-0.68,-0.94l0.0,-1.06l-0.68,-1.04l1.0,-1.27l-0.18,-0.66l-0.55,-0.18l0.26,-0.36l-0.23,-0.51ZM340.46,438.73l0.06,-0.14l0.01,0.07l-0.07,0.06Z",
            "name": "Novosibirskaya oblast"
        },
        "RU-AD": {
            "path": "M101.04,530.21l1.27,0.37l1.34,-0.29l0.32,-0.35l0.64,0.98l-2.34,0.02l-1.23,-0.73ZM104.9,529.32l0.15,-0.39l1.09,0.64l-0.42,0.25l-0.27,-0.44l-0.55,-0.06ZM106.89,529.77l1.29,-0.17l1.34,1.2l0.25,0.61l-0.9,0.23l-0.5,1.16l0.43,0.94l0.14,1.38l-0.35,0.76l0.11,1.31l0.35,0.42l-0.5,1.09l-1.73,-1.04l-0.69,-0.0l0.04,-0.82l0.35,0.37l0.64,-0.08l0.7,-1.46l-0.15,-0.47l-0.66,-0.16l-0.55,-0.61l0.52,-1.9l0.58,-0.56l-0.72,-2.17Z",
            "name": "Adygeya, Respublika"
        },
        "RU-PER": {
            "path": "M169.35,392.25l0.51,-2.32l2.09,0.37l0.38,-0.27l0.28,-1.15l1.55,0.28l0.42,-0.2l0.38,-1.28l1.95,0.48l-0.18,1.12l0.39,0.48l2.51,0.48l0.37,-0.36l0.19,-0.97l5.48,1.16l0.44,-0.22l0.4,-1.35l0.78,-0.24l0.32,-0.96l2.07,0.34l0.8,-1.7l2.28,0.35l0.7,-2.37l0.77,-0.17l0.64,-0.86l1.98,0.37l0.6,-0.25l7.82,0.09l1.8,-0.53l0.8,-0.97l0.5,-0.22l0.18,0.26l0.06,1.8l-0.52,0.58l-0.3,1.52l0.53,1.15l0.08,1.88l0.51,0.49l-0.42,3.56l-0.83,1.15l-0.37,1.25l0.13,0.92l-0.73,1.64l0.02,0.7l-1.17,1.65l-0.77,0.25l-0.42,1.31l-0.67,0.18l-0.86,2.8l0.29,0.44l0.88,0.16l0.94,1.51l1.69,0.63l0.68,0.59l-0.38,1.07l0.4,0.91l-0.53,0.45l0.07,1.39l0.75,0.89l1.02,0.2l-0.17,0.66l0.31,0.94l-0.79,0.58l-0.39,1.06l-1.01,0.91l-0.91,0.14l-0.96,1.14l-0.35,1.27l0.87,1.59l0.48,0.23l-0.09,0.47l-1.28,1.26l-0.26,-0.86l-1.8,-0.1l-0.23,0.81l-0.48,0.06l-0.4,0.63l-0.31,2.28l0.47,0.83l-0.21,0.54l0.21,0.67l-0.61,0.25l-0.41,0.84l-0.78,0.6l-1.51,-0.14l-0.84,0.82l0.79,2.22l-0.28,2.86l-0.75,1.4l-1.06,0.5l-0.6,-0.98l-1.05,-0.66l0.2,-0.45l-0.31,-0.48l-1.14,-0.1l-0.65,0.73l-0.66,0.09l-0.73,-1.47l-2.32,0.51l-0.69,0.61l-0.95,-0.28l-1.01,0.31l-2.27,-1.93l-0.62,0.27l-0.35,1.05l-1.29,-1.33l-0.01,-0.9l-0.42,-0.42l0.45,-0.51l-0.0,-1.65l1.25,-0.39l0.38,-0.69l-0.44,-0.61l-0.0,-1.82l-0.93,-0.46l0.72,-0.87l-1.01,-2.13l0.39,-0.5l-0.31,-2.67l-1.47,-2.56l0.33,-0.96l-0.5,-0.79l-0.42,-1.89l0.28,-0.94l0.84,-0.78l-1.02,-1.58l0.75,-1.87l-0.72,-0.6l-0.79,0.17l-1.13,-0.33l-0.83,-1.82l0.75,-1.33l0.33,-1.71l0.92,-0.44l0.58,-3.43l-0.54,-1.47l-0.91,-0.77l-0.85,0.33l-5.0,-0.6l0.21,-1.26l-0.24,-0.84l-0.85,-0.44l-0.13,-0.76l-1.73,-0.56Z",
            "name": "Permskiy kray"
        },
        "RU-ROS": {
            "path": "M98.15,512.18l0.39,-1.67l2.25,-0.79l0.39,-1.17l4.4,0.35l0.51,-0.28l0.49,-2.29l0.85,-1.42l-0.48,-0.58l-0.33,-1.93l-0.95,-0.43l0.46,-0.97l1.06,0.09l0.56,-0.93l-0.45,-0.54l-1.22,-0.0l-0.22,-0.35l1.01,-0.22l0.27,-0.69l1.03,-1.04l0.1,-1.06l-0.58,-1.1l0.46,-0.69l1.51,0.25l2.32,-0.87l0.86,-0.97l0.39,-1.39l1.31,-0.99l0.46,0.33l0.25,0.74l1.43,0.6l1.43,1.48l-0.64,2.14l0.15,2.33l0.46,0.26l1.06,-0.16l0.28,0.79l1.26,0.57l0.4,1.06l-0.45,0.68l0.22,0.78l-0.23,0.25l-1.75,0.39l-1.22,0.85l0.18,0.92l-0.38,0.42l0.23,0.69l-0.33,1.31l0.41,0.28l2.21,0.07l1.11,1.13l1.25,2.73l0.5,0.08l0.41,-0.34l0.67,0.82l1.9,-0.26l0.71,0.26l0.11,1.04l0.34,0.27l1.01,0.04l0.25,-1.03l0.74,-0.19l0.12,-0.72l0.33,0.19l-0.04,2.59l-0.31,1.48l-0.9,0.45l-1.42,1.93l0.03,0.56l0.49,0.27l-0.04,0.48l-0.66,-0.0l-1.02,1.73l-0.76,-0.06l-2.17,-1.96l-1.7,0.18l-1.09,-0.89l-1.51,-0.41l-0.98,0.56l0.57,1.49l-0.74,0.18l-0.45,0.9l-0.73,-0.36l-0.63,0.51l0.26,1.26l-1.1,-0.13l-0.99,0.33l-0.3,-0.77l-0.65,-0.5l0.1,-0.91l-0.52,-0.4l-0.6,0.44l-0.71,-0.35l-1.81,0.01l-0.6,-1.77l-0.77,-0.21l0.41,-0.8l-0.11,-0.53l-0.57,-0.33l-3.25,-0.41l-1.41,0.44l-0.46,1.13l-0.88,-0.22l0.3,-0.88l-0.43,-0.72l0.93,-0.58l1.18,0.03l0.66,-0.83l0.01,-0.67l-0.43,-0.18l-0.35,-1.0l-1.19,-0.17l-0.83,0.39l-0.38,-0.43l-1.58,0.47l-0.68,0.73l-0.62,0.08l0.51,-0.61l-0.38,-0.69Z",
            "name": "Rostovskaya oblast"
        },
        "RU-PRI": {
            "path": "M582.41,546.47l1.5,-0.54l0.96,0.08l0.8,-0.51l0.03,-1.02l0.56,-0.73l-0.06,-0.59l0.58,-1.35l-0.11,-0.77l-0.46,-0.43l-0.0,-1.79l0.48,-2.01l-1.04,-4.61l-0.53,-0.84l0.37,-0.37l2.03,-0.55l0.94,-0.98l0.05,-0.68l0.45,-0.13l0.32,-0.57l0.49,0.45l0.08,1.17l0.52,0.41l-0.4,1.21l0.24,0.87l0.71,0.5l0.35,0.81l1.14,0.19l1.41,-1.37l0.12,-1.1l0.83,-1.16l0.66,0.03l0.96,-0.87l0.33,-2.75l1.21,-0.55l0.43,-0.8l0.06,-1.33l0.77,-0.58l0.34,-1.62l1.04,-1.11l0.13,-1.16l-0.37,-0.48l0.21,-0.58l2.65,-0.73l0.35,-1.04l-0.27,-0.58l1.2,-1.58l1.6,-0.04l0.41,-0.53l1.16,0.96l-0.25,0.63l0.3,0.45l1.63,-0.13l0.79,0.88l0.78,0.27l0.69,-0.31l0.98,0.5l1.93,-0.17l2.16,-1.92l-0.13,-0.74l0.44,-1.19l1.33,0.7l0.67,-0.04l0.93,-0.84l1.35,-0.61l1.29,-1.26l-0.41,-1.73l-0.89,-0.4l-0.62,0.15l-0.79,-0.57l0.12,-0.8l-1.42,-1.2l0.15,-0.29l0.87,-0.45l1.47,0.11l0.78,-0.66l1.04,-0.33l0.41,-0.79l0.65,0.21l0.21,1.41l0.48,0.43l-0.22,1.0l1.2,1.3l-1.54,1.15l0.03,0.53l0.45,0.3l-0.32,0.85l0.62,0.52l1.32,-0.05l0.35,0.36l-2.18,2.39l-1.12,2.8l-0.06,0.91l-0.7,0.67l-0.57,1.78l-2.2,3.17l-1.44,1.3l-1.29,1.8l-1.77,1.39l-1.45,2.28l-1.03,0.86l-0.9,2.0l-1.49,0.76l-1.28,1.82l-0.16,0.84l-0.85,0.77l0.12,0.83l-0.54,0.61l-0.52,-0.13l-0.55,0.61l0.16,0.32l-0.4,0.81l-4.78,3.03l-1.29,1.29l-2.19,0.51l-1.79,0.85l-0.65,-0.85l-0.94,0.15l-0.05,-0.51l-0.41,-0.27l-0.93,0.4l-0.28,-0.49l-0.8,-0.11l0.42,-1.55l-0.49,-1.09l-0.58,-0.01l-0.41,0.64l-0.46,0.23l0.12,-0.81l-1.55,-0.29l-0.6,0.5l-1.06,1.93l-0.94,0.68l0.11,0.6l-0.72,0.55l-0.19,0.73l-0.97,0.02l-0.88,-0.42l-0.73,0.07l-0.4,0.4l-0.39,-0.28ZM583.13,547.53l0.55,0.41l-0.35,0.58l-0.4,-0.51l0.2,-0.48ZM590.17,543.21l-0.09,0.15l-0.08,0.07l0.03,-0.1l0.14,-0.12Z",
            "name": "Primorskiy kray"
        },
        "RU-KB": {
            "path": "M120.08,542.59l0.39,-2.28l0.86,-0.42l0.19,-0.88l0.65,-0.01l0.56,-0.51l1.13,-0.33l0.55,0.94l0.85,-0.44l1.51,0.19l0.88,-1.1l1.56,0.48l0.0,1.25l0.68,0.64l-0.22,0.94l-1.37,0.15l-0.38,0.97l-0.96,-0.14l-1.39,2.48l-0.54,-0.05l-0.38,0.39l-0.66,-0.19l-1.03,-1.24l-0.82,-0.46l-1.4,0.11l-0.67,-0.5Z",
            "name": "Kabardino-Balkarskaya Respublika"
        },
        "RU-AL": {
            "path": "M339.02,482.14l0.79,-1.33l1.01,-0.09l1.23,-0.93l1.14,-0.25l0.39,-0.5l1.17,0.16l0.6,-0.76l0.72,-0.13l0.41,-1.09l0.7,-0.2l0.46,-0.53l0.88,-2.39l2.08,0.54l0.61,-0.23l0.33,-0.69l1.41,-0.07l0.37,-0.64l-0.06,-1.21l-0.97,-0.81l0.86,-1.77l1.12,-0.16l0.23,0.52l0.88,0.06l0.33,0.69l1.42,0.52l1.49,-0.8l1.42,1.08l0.82,-0.24l-0.26,1.98l-1.29,0.43l-1.44,2.53l0.18,0.72l0.9,0.23l-0.92,1.56l0.35,0.64l0.88,0.32l0.5,0.7l1.24,0.48l1.27,-0.23l0.67,-0.82l0.06,-0.84l0.8,0.77l-0.13,1.48l0.54,0.63l0.11,1.01l1.77,1.75l1.53,2.32l0.9,0.45l-0.61,0.33l-0.64,-0.54l-0.47,0.06l-0.21,0.97l-0.51,0.34l-0.35,1.08l0.25,0.45l0.69,0.17l0.84,3.32l-1.33,0.77l-0.9,-0.29l-0.37,0.53l0.14,0.48l-0.65,0.31l-0.73,-0.62l-0.47,0.81l-0.8,-0.42l-2.46,0.37l-0.59,0.96l0.12,0.68l-0.75,0.61l-1.22,0.08l-1.54,0.68l-0.45,-1.0l-1.19,-0.34l-0.5,-0.55l-0.62,-1.53l-1.01,-0.45l0.77,-0.48l-0.22,-1.33l-1.28,0.02l-2.0,2.2l-1.11,-0.46l-1.32,-0.09l-0.48,-0.39l-1.78,0.24l-0.77,-2.06l-0.52,-0.36l0.4,-0.64l-0.37,-0.75l-2.87,-1.44l-0.9,-0.09l-0.57,-2.64l2.02,-0.34l0.49,-1.56l-0.73,-1.32l-1.95,-0.62Z",
            "name": "Altay, Respublika"
        },
        "RU-NEN": {
            "path": "M124.78,293.2l1.21,0.38l1.94,1.29l6.93,0.09l1.37,0.42l1.68,0.87l0.57,1.79l2.38,2.36l-0.26,0.4l0.43,0.33l0.88,3.45l-1.47,-0.14l-1.96,0.71l-3.62,0.64l-0.34,0.71l0.15,1.15l-0.72,0.11l-0.82,0.83l-0.6,1.31l-0.06,1.06l0.23,0.85l0.65,0.67l2.76,1.64l1.41,3.69l1.32,0.87l2.19,-0.52l-0.85,1.28l0.47,0.37l1.21,-0.96l2.27,-0.58l1.92,-0.89l0.66,0.84l0.46,-0.16l0.22,-1.16l0.73,-1.21l-0.26,-2.26l0.5,-0.74l-0.07,-1.2l0.91,-1.41l-0.62,-1.96l0.5,-0.41l0.58,0.65l1.03,-1.31l1.04,0.32l0.92,-0.62l1.14,0.29l0.54,0.7l0.63,0.01l0.2,-0.73l-1.5,-1.37l-0.02,-1.0l1.46,-0.03l3.4,-2.25l0.5,0.03l4.74,-4.78l0.93,0.26l2.48,-1.23l0.56,0.02l0.54,-0.5l-0.16,-0.42l1.83,-0.52l0.21,0.52l1.09,-0.16l0.03,0.54l-0.83,0.65l0.1,0.47l0.84,0.99l1.08,-0.39l1.52,-1.3l0.32,-0.68l-0.16,-0.88l-0.74,-0.53l-0.23,-0.62l0.68,-0.5l-0.32,-0.77l4.62,-3.15l0.22,0.63l0.53,0.34l0.58,-0.42l0.77,0.21l-0.73,0.6l-0.24,1.55l-0.54,0.69l0.98,2.21l0.16,1.23l-0.37,0.25l-0.83,-0.62l-0.6,0.3l0.05,0.39l-0.61,-0.1l-0.73,0.4l-0.7,1.33l0.2,0.55l0.67,0.32l2.52,-0.11l0.34,0.36l0.75,0.06l0.65,-0.32l0.7,0.46l1.29,-1.29l0.72,1.65l1.25,0.13l0.65,-1.22l0.07,-2.16l2.2,-2.17l1.64,-0.2l1.38,-1.13l0.94,0.54l1.3,-0.07l0.21,0.56l0.5,-0.18l0.33,-0.6l1.08,0.99l1.28,0.34l1.42,-0.23l0.56,-0.39l1.05,-2.18l1.83,-0.35l0.27,-0.62l-0.14,-0.7l0.57,-0.3l0.32,1.18l0.74,0.9l0.7,-0.18l0.23,-0.51l-0.79,-0.81l-0.07,-1.1l2.73,-1.23l-0.22,0.34l0.29,0.6l0.91,0.37l1.53,1.86l-0.01,0.3l-1.05,0.13l-0.8,1.3l0.17,3.34l0.32,0.33l3.32,0.93l1.08,-0.76l0.62,-1.43l-0.22,-1.19l-0.82,-1.29l0.14,-0.43l0.3,-0.27l0.93,0.4l2.14,-0.57l1.33,-1.43l0.54,-1.07l0.93,-0.39l-0.39,-3.48l-0.75,-0.91l-0.6,-0.05l-0.25,0.36l-0.25,-2.18l-2.05,-3.92l0.21,-0.79l2.35,-0.25l0.44,-1.2l-0.1,-1.17l0.78,-0.42l1.82,0.59l0.64,0.53l1.9,0.44l4.55,0.31l4.02,1.06l3.7,1.8l2.15,1.44l1.79,1.62l-0.65,0.97l-0.12,1.57l-1.32,1.91l0.32,1.07l-0.28,0.5l0.17,0.77l1.2,0.45l0.57,-0.31l1.22,0.97l1.12,0.06l-0.07,0.84l0.46,1.08l0.63,1.14l0.55,0.28l-0.62,1.28l-2.48,0.49l-1.26,-0.12l-1.25,0.79l-0.42,0.77l0.16,1.3l-0.83,0.51l-0.15,0.58l-2.57,1.54l-0.08,0.55l0.59,1.6l-0.3,0.52l-0.69,0.21l-0.31,0.63l-1.26,0.02l-1.7,1.31l-1.36,1.48l-0.2,2.5l-5.02,3.5l-0.96,1.45l-8.11,0.31l-0.58,0.29l-0.28,-0.45l-32.24,0.04l-8.56,-1.17l-1.91,1.3l-0.57,0.8l-1.11,0.17l-0.16,1.96l-12.86,8.54l-4.69,-0.01l-2.13,2.55l-0.13,1.45l-1.22,-0.33l-1.49,0.21l-4.07,-2.68l-2.71,-0.78l-0.61,0.19l-4.43,-2.09l-3.01,-2.34l0.59,-0.75l0.18,-1.47l0.88,-0.89l-0.55,-0.39l-0.44,-1.01l0.61,-0.68l0.01,-1.53l-0.89,-1.55l0.21,-0.82l-0.66,0.0l-1.26,-0.95l-1.06,-0.1l-0.12,-0.99l1.36,-4.97l0.62,-0.5l-0.31,-2.6l0.87,-0.66l-0.04,-0.56l-0.38,-0.19l0.09,-0.59l0.86,-0.45l0.15,-0.71l-1.08,-0.01l0.35,-2.7l-0.5,-1.04l-4.48,-4.14ZM181.07,288.41l0.12,-0.04l0.11,0.0l-0.23,0.04ZM204.56,269.47l1.19,0.55l0.56,-0.46l-0.27,-0.75l-0.9,-0.88l0.67,-0.53l0.11,-0.75l0.86,-0.41l1.41,1.26l1.1,1.63l0.14,1.02l1.09,0.52l0.22,0.65l1.26,0.55l1.43,1.84l0.64,0.32l0.44,1.81l-0.47,0.92l-0.78,0.61l-0.86,-0.51l-0.83,0.41l-1.29,-0.2l0.21,-1.26l-1.18,-1.46l-0.86,-0.01l-0.64,-0.49l-1.42,-0.26l-0.81,-0.86l-0.55,-0.97l0.06,-1.46l-0.52,-0.8ZM150.62,287.81l0.56,-4.07l1.17,-1.71l1.59,-1.19l1.65,-0.01l4.54,3.58l0.51,0.9l-1.66,1.37l-0.56,1.02l0.24,0.28l-0.95,1.41l-1.27,0.93l-0.71,0.06l-0.34,0.46l-2.04,0.63l-0.35,-0.31l-0.67,0.32l-0.99,-1.16l-0.31,-0.93l-0.4,-0.27l0.19,-0.74l-0.22,-0.56Z",
            "name": "Nenetskiy avtonomnyy okrug"
        },
        "RU-ALT": {
            "path": "M305.96,462.77l0.5,-0.1l0.79,-0.84l-0.27,-0.85l0.4,-0.06l0.39,0.78l0.93,0.1l1.49,-0.47l0.03,-0.89l1.04,-0.32l1.97,-0.0l0.4,-0.33l0.73,0.18l0.91,-0.53l0.35,-0.7l0.99,-0.27l0.18,-0.77l1.03,-0.96l0.49,0.12l1.04,-0.66l0.56,0.0l0.43,-0.74l1.59,-0.87l0.59,0.58l0.25,0.79l1.8,0.59l0.42,1.18l0.36,0.1l0.69,-0.46l0.36,0.17l-0.62,0.85l0.65,1.28l1.01,0.13l2.71,2.18l0.81,-0.39l0.19,-0.42l-0.22,-0.37l1.02,-1.99l1.95,-2.01l0.33,0.02l0.36,0.8l0.45,0.18l0.61,-0.32l0.35,-1.37l1.22,-0.04l0.51,0.33l1.3,-0.87l1.58,0.46l0.71,-0.5l0.71,-1.35l1.99,-1.15l1.43,2.35l0.97,-0.13l1.63,1.6l0.99,0.43l1.23,1.71l0.34,1.45l0.68,0.82l1.78,0.69l0.17,0.3l-0.38,0.61l-0.92,0.27l-0.23,0.46l0.32,0.7l1.67,1.12l-0.54,1.56l0.73,1.41l-1.21,0.17l-1.21,2.37l0.16,0.62l0.76,0.5l0.09,0.97l-1.39,-0.04l-0.57,0.9l-0.59,-0.06l-0.41,-0.43l-1.42,-0.03l-0.69,0.95l0.04,0.62l-0.51,0.38l-0.04,0.76l-1.06,0.66l-0.33,0.96l-0.79,0.02l-0.22,0.65l-1.34,0.03l-2.92,1.74l-0.8,-0.07l-0.72,1.22l-0.86,0.14l0.08,1.16l2.57,0.87l0.02,0.55l0.37,0.26l-0.25,0.65l-2.06,0.46l-1.23,-1.8l-2.76,-1.17l-1.31,0.1l-0.62,0.9l-1.36,-0.14l-0.45,0.99l-0.73,0.43l-0.98,-0.17l-0.76,0.38l-0.96,-0.54l-1.17,-0.15l-0.54,0.41l-0.74,0.03l0.14,-0.67l-0.66,-1.23l-1.39,0.18l0.48,-1.4l-0.2,-0.62l-1.05,-0.11l-0.42,-0.76l-0.5,0.15l-0.77,-0.3l-0.7,0.81l-0.95,0.34l0.09,1.91l-1.41,0.8l-0.55,-0.02l-4.68,-9.48l-6.47,-11.43ZM321.85,454.16l-0.08,-0.18l0.03,-0.02l0.05,0.18l0.0,0.02Z",
            "name": "Altayskiy kray"
        },
        "RU-KDA": {
            "path": "M90.18,528.68l1.11,-0.49l0.37,0.35l0.89,-0.1l0.66,-0.6l0.75,-0.1l0.26,0.37l1.21,-0.14l0.28,-1.04l-0.36,-1.9l0.91,-1.1l0.34,0.28l0.53,-0.13l0.7,-2.23l0.97,0.72l1.08,-0.21l-0.09,-1.06l-1.35,-0.8l-1.17,-1.38l-0.92,-0.1l-0.49,-0.94l0.74,0.05l1.27,-0.63l1.02,0.41l0.97,-0.12l0.15,-0.81l-0.9,-0.68l1.7,0.32l-0.24,1.11l0.19,0.48l2.07,-0.1l0.66,-1.13l0.75,-0.25l2.82,0.29l-0.14,1.37l0.92,0.38l0.24,0.53l-0.16,0.64l0.63,0.66l3.14,0.47l0.26,0.63l0.68,0.5l0.53,1.75l-0.32,0.48l-1.48,0.0l-0.27,1.66l0.84,1.1l0.42,1.49l1.43,-0.07l-0.01,0.63l0.66,1.02l0.94,0.2l-0.53,1.15l-0.52,0.12l-0.24,0.5l1.39,1.7l-0.39,0.76l0.56,0.8l-1.19,1.4l-0.6,-0.54l-2.32,-0.41l-0.42,0.44l0.42,0.8l-0.78,0.56l-0.42,2.53l-0.58,0.22l-1.94,-0.49l-0.6,0.23l-0.39,0.75l-6.08,-6.03l-2.92,-0.88l-1.62,-2.08l-0.64,-0.41l-0.53,0.56l-0.99,-0.16l-1.46,-2.26l-2.42,-1.02ZM100.54,529.42l-0.76,0.17l0.02,0.97l2.29,1.17l2.71,0.03l1.45,-1.32l0.45,1.31l-0.4,0.18l-0.72,2.85l1.35,1.22l-0.17,0.19l-0.74,-0.68l-0.62,0.15l-0.24,0.61l0.1,1.74l3.06,1.46l0.75,-0.17l0.78,-1.71l-0.39,-0.69l-0.08,-1.06l0.37,-0.61l-0.17,-1.66l-0.44,-0.57l0.36,-0.81l0.71,1.28l-0.27,0.31l0.19,0.49l0.96,0.0l0.3,-0.56l-0.16,-1.04l-1.12,-2.37l-1.64,-1.42l-1.78,0.09l-1.51,-0.86l-0.67,0.17l-1.31,1.32l-1.05,0.2l-0.83,-0.62l-0.81,0.27ZM96.39,523.19l0.05,-0.26l0.1,0.09l-0.15,0.17Z",
            "name": "Krasnodarskiy kray"
        },
        "RU-YEV": {
            "path": "M582.87,502.05l0.64,-2.07l0.62,-0.35l0.92,0.02l1.0,-2.17l1.28,0.37l1.7,-0.85l1.16,0.59l0.73,-1.5l-0.06,-0.47l1.0,0.55l-0.16,0.52l0.35,0.43l1.97,-0.1l0.34,0.59l1.73,0.49l0.56,2.48l0.32,0.35l2.19,0.45l1.02,0.98l1.05,0.08l1.0,-0.32l0.38,-0.48l0.84,1.05l1.11,0.26l0.82,-0.37l0.03,0.29l-0.81,0.82l-1.31,-0.31l-4.19,1.34l-1.07,1.19l-1.45,-0.26l-0.86,0.2l-1.44,1.23l-0.88,0.1l-0.6,1.75l-0.95,-0.22l-0.89,0.36l-2.82,0.15l-0.98,-0.56l-1.8,0.52l-0.36,-0.15l-0.25,-1.32l-1.15,-1.27l0.78,-2.07l-0.43,-0.69l0.0,-0.72l-0.64,-0.22l-0.44,-0.67Z",
            "name": "Yevreyskaya avtonomnaya oblast"
        },
        "RU-AMU": {
            "path": "M525.87,431.22l2.97,-1.83l2.93,-0.34l0.88,0.54l1.77,0.07l0.93,2.19l2.88,0.06l0.6,0.74l0.92,0.46l0.76,1.14l1.36,-0.02l0.33,-0.61l2.07,1.3l3.18,0.38l0.7,1.32l0.74,0.6l0.25,0.86l0.63,0.28l0.36,1.24l0.5,0.49l1.0,-0.23l1.49,0.72l1.5,-0.49l0.68,0.24l0.87,1.09l1.43,-0.56l0.99,0.59l-0.09,0.86l0.41,0.52l2.02,0.28l0.9,-0.84l0.68,0.45l0.97,-0.22l0.43,-0.54l1.0,-0.07l1.15,1.09l0.52,0.11l0.65,-0.39l0.35,-0.8l0.33,0.48l0.75,0.07l1.67,-0.36l1.31,1.34l2.59,0.49l0.88,-0.49l0.02,-1.37l2.74,-0.72l1.92,0.51l3.5,-0.34l2.15,1.01l1.79,-0.2l0.71,0.23l0.41,-0.32l0.87,0.3l0.8,-0.37l0.9,0.08l0.65,-0.5l1.09,0.19l0.48,0.71l-0.05,0.71l0.63,0.7l-0.45,0.41l-0.09,1.1l-1.37,0.16l-0.25,0.8l0.22,0.47l-1.49,0.07l-0.67,0.64l0.11,0.82l-1.13,0.83l-0.69,0.13l-0.34,0.47l-0.76,0.08l-1.16,1.07l0.05,0.89l-0.53,1.77l-0.76,-0.21l-1.44,0.86l-1.01,1.25l-0.55,2.18l0.46,0.43l1.2,0.04l1.32,0.99l1.0,-0.38l1.39,0.41l0.56,3.59l-0.37,1.09l1.99,0.07l0.57,0.87l0.95,-0.12l0.41,-0.68l3.91,-0.09l0.56,-0.45l1.05,-0.11l0.47,-1.29l1.76,-0.84l0.44,0.57l1.71,0.34l1.53,-0.8l0.8,-0.0l0.56,-0.75l1.16,1.28l-0.25,0.83l0.67,0.7l-1.5,2.58l-0.01,2.02l0.6,0.55l-0.64,0.64l-0.08,0.95l-2.25,-0.53l-0.42,-0.37l-0.74,0.04l-2.67,-1.34l-0.56,-0.01l-0.63,0.58l-0.08,0.81l0.25,0.43l-0.18,0.71l0.92,1.34l-0.3,0.3l-1.56,0.33l-1.03,-0.16l-1.41,0.93l-0.39,0.83l-0.51,0.12l-0.1,1.01l-0.37,0.25l-1.19,0.04l-1.77,1.04l-1.76,0.04l-0.29,1.17l0.55,1.44l-0.88,0.06l-0.57,0.86l-0.8,0.3l-0.64,1.69l-0.83,0.42l-0.12,0.58l0.28,0.4l-0.92,1.89l0.55,0.87l1.2,-0.36l0.13,0.27l-0.73,0.94l0.45,0.89l0.62,0.16l0.42,-0.31l0.26,0.61l0.63,-0.04l0.54,1.11l-0.6,0.75l-0.02,0.95l1.0,0.44l-0.1,1.05l-0.48,0.14l-0.17,0.4l0.21,0.62l0.56,0.32l-0.03,1.37l-0.38,1.0l-0.62,-0.09l-0.67,0.33l-0.88,2.0l-0.68,-0.09l-1.37,1.01l-0.54,-0.34l-0.93,0.23l-1.42,-1.17l-1.11,-1.85l-0.9,-0.26l-0.1,-0.73l-0.44,-0.41l-0.67,-0.08l-0.42,0.44l-0.98,0.1l-2.05,-1.93l-2.77,0.49l-1.07,-0.5l-0.57,0.15l-0.59,-0.46l-0.34,-0.89l-0.6,-0.26l-0.13,-1.54l0.54,-1.54l-1.35,-1.06l0.13,-0.66l-0.28,-0.46l0.31,-0.95l-0.43,-1.46l-1.87,-2.64l-0.12,-1.02l0.38,-1.03l-0.54,-0.95l-0.41,-0.17l0.13,-0.62l-0.64,-0.55l0.13,-1.05l-1.46,-2.33l0.36,-0.4l0.15,-0.98l-1.0,-0.56l0.35,-0.72l-0.43,-0.27l0.02,-0.57l-0.88,-1.45l-0.77,-0.56l0.29,-1.36l-0.85,-0.26l-0.51,-0.98l-0.51,-0.1l-0.6,-1.2l-0.72,-0.11l-2.14,-1.33l-0.74,-0.03l-1.22,0.5l-0.41,-0.45l-1.3,-0.26l-0.74,-1.17l-0.88,-0.03l-0.65,-0.71l-1.43,-0.5l-0.39,-0.42l-1.18,0.14l-0.89,-0.28l-2.23,0.84l-2.2,0.15l-0.66,-0.34l-1.06,0.4l-0.54,-3.06l-1.5,-2.15l0.62,-0.53l-0.3,-2.2l0.8,0.54l1.21,-0.39l0.3,-0.49l-0.1,-0.62l-0.97,-0.91l-0.25,-2.12l-0.38,-0.17l-0.74,0.32l1.44,-1.59l-0.03,-1.15l0.45,-0.68l-0.39,-0.45l0.14,-2.45l-0.55,-1.23l-0.75,-0.25l-0.81,0.2l-0.36,0.61l-0.86,0.3l-0.18,-1.82l0.25,-0.73l-1.0,-2.27l-1.92,0.02l-2.37,1.32l-0.96,-0.44l-0.6,-1.35l0.63,-0.5l1.76,-0.45l0.16,-0.82l-1.37,-1.16l-0.19,-0.75l-1.6,-0.35l-0.66,-0.78l0.3,-0.41l-0.08,-0.56l-0.9,-0.61Z",
            "name": "Amurskaya oblast"
        },
        "RU-BRY": {
            "path": "M61.66,465.51l0.45,-0.51l0.04,-0.65l1.32,0.06l0.37,0.68l0.75,0.22l1.06,0.08l1.09,-0.5l1.18,-1.38l1.14,-0.43l0.11,-0.74l0.71,-0.27l0.34,-1.33l1.4,-1.2l0.55,-0.9l-0.07,-1.02l1.58,-0.64l0.94,1.32l1.66,0.07l0.53,0.47l0.95,1.2l0.04,1.75l0.37,0.56l2.26,0.42l0.05,0.56l0.45,0.22l0.06,1.03l0.55,0.57l-0.45,0.48l-0.75,0.03l-1.0,1.09l0.48,1.11l0.77,0.46l-0.21,1.33l-0.85,0.92l0.37,1.0l-0.26,0.51l-0.88,0.3l0.1,1.01l-0.87,0.05l-0.72,0.61l-0.34,0.78l-0.66,-0.88l-0.2,-1.43l-1.69,-1.67l-1.16,0.32l-2.06,-0.37l-1.4,1.0l-2.96,-0.61l-0.31,0.29l-0.33,1.72l-1.35,0.35l-1.06,-1.08l-0.1,-0.63l-0.4,-0.16l-0.05,-1.62l0.27,-0.33l-0.6,-1.13l0.29,-0.98l-1.53,-2.11ZM81.67,465.17l0.2,-0.07l0.09,0.05l-0.19,0.05l-0.11,-0.04Z",
            "name": "Bryanskaya oblast"
        },
        "RU-SMO": {
            "path": "M58.98,449.53l1.26,-1.89l-0.18,-1.2l-0.91,-1.33l0.57,-0.63l0.03,-1.95l0.65,-1.23l0.53,0.3l1.97,-0.25l0.81,0.28l0.89,-0.5l0.63,0.98l1.7,-0.36l1.04,0.39l0.78,-0.28l1.05,0.48l1.44,-0.08l0.54,-0.55l0.69,-0.02l0.8,-0.58l1.02,-1.58l0.72,-0.11l0.31,-1.02l1.32,-0.13l0.35,0.63l1.91,0.83l2.06,-0.6l0.59,0.29l0.67,1.27l-0.14,0.65l0.4,0.85l-0.57,0.51l0.05,2.24l0.35,0.76l-0.56,1.34l-1.2,1.41l-0.81,0.35l-0.11,1.36l-0.7,0.34l-1.5,-0.0l-0.06,0.47l0.36,0.27l-0.51,1.13l-0.93,-0.78l-1.06,-0.23l-1.4,0.24l-0.56,0.91l-0.12,1.04l0.28,0.55l-0.43,0.43l0.15,0.51l-0.92,1.15l-0.05,0.47l-0.92,0.46l0.08,1.18l-1.9,2.22l-0.1,0.94l-1.7,-0.89l0.38,-0.87l-0.43,-0.59l-1.9,-0.88l-1.41,0.2l0.23,-2.09l-2.7,-1.76l-0.55,-1.88l-0.63,-0.43l0.42,-0.81l-0.11,-0.47l-1.97,-1.45Z",
            "name": "Smolenskaya oblast"
        },
        "RU-CU": {
            "path": "M138.61,441.48l0.83,-0.97l0.1,-1.29l0.5,-0.89l1.31,-0.66l1.17,0.08l1.73,-1.51l1.12,-0.43l0.54,1.37l0.66,0.34l1.58,0.11l0.62,1.69l1.78,1.12l-0.58,0.61l-0.74,0.21l-0.46,0.86l0.31,0.57l-0.47,0.32l-0.71,1.36l-0.82,0.43l0.23,1.35l0.68,0.08l0.82,-0.36l0.18,0.23l0.07,0.43l-0.82,0.74l0.33,0.63l-0.74,0.09l-0.48,0.81l-0.39,0.09l-1.1,-0.41l-0.46,1.42l-0.63,0.6l-0.75,-0.24l-0.88,0.42l-2.01,-1.11l0.0,-0.88l-0.68,-0.68l-0.06,-0.75l-0.58,-0.48l-0.51,0.08l0.12,-0.71l0.67,-0.56l-0.01,-0.9l0.64,-0.38l0.26,-0.7l-0.66,-0.8l-0.78,-0.18l-0.95,-1.17Z",
            "name": "Chuvashskaya Respublika"
        }
    },
    "height": 557.3183105409283,
    "projection": {
        "type": "merc",
        "centralMeridian": 11.5
    },
    "width": 900.0
});

},{}],"eCK3t":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('spain', {
    "insets": [
        {
            "width": 900,
            "top": 0,
            "height": 800.996283508868,
            "bbox": [
                {
                    "y": -5436288.366794207,
                    "x": -2023392.062741889
                },
                {
                    "y": -3205567.734918374,
                    "x": 483047.242935642
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "ES-NA": {
            "path": "M644.31,75.59l0.31,-1.11l-1.07,-0.87l-4.56,-0.02l-3.42,-2.52l-2.69,0.33l-2.1,-0.69l0.42,-3.3l-0.34,-1.68l-1.12,-0.6l-1.21,1.2l-1.2,-0.6l-0.11,-0.58l3.06,-2.56l0.62,0.14l0.78,0.99l0.97,0.08l1.0,-0.33l1.52,-1.18l-0.06,-1.19l-0.65,-0.37l-0.31,-2.15l1.15,-0.61l0.48,-0.64l0.2,-2.17l1.29,-2.65l0.12,-1.21l-0.52,-2.14l0.77,-1.76l0.85,-0.69l1.16,0.39l2.14,-0.33l1.26,-1.49l1.85,-0.75l0.47,-1.04l-0.04,-1.28l0.95,-1.97l3.01,-2.08l1.12,-1.75l-0.23,-2.89l0.26,-1.28l0.79,0.18l0.53,-0.8l0.93,0.16l0.79,-0.44l2.32,-3.23l3.68,-0.76l0.86,0.46l0.27,1.93l1.01,0.75l1.63,-0.3l1.05,-1.73l1.78,0.37l1.63,0.86l1.38,-0.19l0.93,0.97l0.14,1.81l-1.0,3.75l-2.12,2.42l-0.37,0.85l0.57,1.3l1.71,1.42l2.24,0.41l0.84,-0.24l0.58,-0.95l0.37,-2.51l1.24,-0.89l-0.67,1.36l0.27,0.9l0.68,0.78l0.98,0.59l2.25,0.4l2.56,1.76l1.7,-0.04l1.32,0.8l1.87,0.32l1.87,1.59l1.65,0.56l3.28,0.28l3.08,-0.54l0.8,0.28l0.31,0.81l-0.67,0.06l-1.54,0.9l-0.53,1.55l-1.11,1.52l-0.78,4.21l-3.77,3.15l-2.51,0.86l-0.36,0.48l-0.43,2.0l-4.02,0.49l-0.49,1.24l-0.43,0.17l-0.15,0.67l0.49,0.32l-1.03,0.69l-0.88,1.48l-0.52,0.27l-1.45,-0.1l-0.93,1.27l-0.29,1.09l0.46,1.43l-2.75,3.92l-0.3,2.08l0.7,1.09l-2.07,2.98l-1.32,4.44l0.07,1.03l0.73,1.39l0.22,3.21l1.69,2.61l1.24,0.45l0.2,0.34l-0.33,1.18l-3.58,6.16l-2.77,-0.69l-1.28,0.51l-1.26,0.09l-3.26,-2.44l-0.99,-0.27l-1.66,0.39l-1.0,-0.46l-1.46,-1.42l-3.46,-0.64l-1.34,-1.14l-0.36,-0.91l0.16,-1.36l2.14,-2.44l0.63,-1.15l1.46,0.37l1.43,-0.39l1.33,0.56l1.27,-0.5l0.09,-2.27l-0.36,-0.89l0.02,-1.03l-1.36,-1.18l-2.75,-1.35l-1.35,-1.14l-1.07,-0.01l-0.29,-1.46l-1.47,-1.08l-2.98,-3.62l-2.47,-0.14l-0.74,-0.26l-0.29,-0.45ZM682.31,72.23l0.07,0.69l1.05,1.22l-1.83,-0.53l0.71,-1.39ZM679.32,75.74l-0.17,-0.55l0.68,-0.46l-0.24,0.73l-0.27,0.28Z",
            "name": "Navarra"
        },
        "ES-B": {
            "path": "M793.33,97.6l-0.01,-0.45l1.15,-1.38l0.06,-2.27l0.9,-0.65l-0.18,-2.28l1.18,-1.68l-0.28,-1.4l-1.6,-1.14l-0.28,-2.16l1.11,-1.44l7.72,-1.59l0.8,0.18l1.54,1.07l2.2,-0.21l0.37,0.95l-0.69,1.15l-0.2,1.46l1.09,1.68l0.18,2.33l0.47,1.0l1.43,0.12l1.57,0.96l1.12,-0.41l1.94,-0.07l0.98,-0.71l1.69,-0.06l0.99,1.52l1.05,0.14l1.4,-0.4l1.5,2.03l0.81,0.5l1.46,-0.01l1.16,1.21l0.29,0.98l-0.12,0.97l-2.39,3.08l0.04,0.57l0.87,1.11l-0.61,1.25l-0.75,0.02l-1.4,0.85l-2.05,-0.87l-1.06,1.48l0.1,1.33l1.16,2.13l0.97,0.67l2.8,-0.23l4.69,4.49l3.58,-0.75l1.83,-0.87l2.31,0.69l0.65,0.63l0.2,0.89l-0.56,1.01l0.61,1.75l-12.79,5.74l-3.15,2.47l-3.03,1.31l-1.26,0.97l-1.08,1.48l-3.06,5.0l-1.24,1.16l-2.73,1.5l-4.31,0.73l-3.84,1.3l-1.44,-0.04l-7.24,2.21l0.03,-1.0l-0.31,-0.44l-1.79,-0.44l1.16,-0.85l0.49,-1.02l-0.12,-0.66l-1.14,-1.08l-0.73,-1.6l-0.27,-1.75l-1.09,-1.22l-1.96,-1.13l-0.41,-0.78l0.34,-1.39l-0.08,-1.54l-1.05,-0.81l-2.0,-0.79l-0.15,-0.41l1.12,-1.55l0.34,-1.13l-0.48,-0.58l-0.83,-0.11l0.01,-0.7l-1.25,-0.66l0.49,-0.68l2.11,-0.74l0.05,-0.58l-1.24,-3.17l0.1,-4.07l0.31,-0.53l0.64,-0.17l1.38,1.3l1.49,-0.15l0.88,0.8l0.65,0.1l3.39,-3.65l0.22,-1.33l-0.71,-2.38l1.05,-1.71l0.14,-1.76l2.14,-0.48l0.66,-1.0l-0.12,-0.8l-0.7,-0.64l-1.41,0.35Z",
            "name": "Barcelona"
        },
        "ES-CS": {
            "path": "M733.51,165.96l1.64,0.05l0.87,1.29l1.6,0.85l-0.43,1.41l0.78,1.47l5.09,2.24l0.55,0.5l0.57,1.38l2.81,1.34l-0.75,1.85l-1.93,2.62l-0.29,1.36l-1.02,1.07l-2.77,5.38l-2.03,1.95l-1.37,1.94l-2.44,2.1l-2.4,4.8l-1.02,1.1l-2.11,1.36l-2.78,5.25l-3.53,4.37l-3.92,6.55l-2.69,-1.61l-1.62,-1.96l-1.45,-0.52l-1.69,0.78l-1.32,2.05l-1.56,1.0l-0.62,-0.19l-2.12,-3.41l-0.54,-0.14l-1.47,0.83l-1.26,1.53l-0.92,0.11l-0.3,-0.3l0.08,-1.65l-0.64,-2.57l-1.4,-0.86l-0.57,0.17l-0.73,1.56l-0.49,-0.1l-1.38,-2.4l-2.02,-1.94l-0.53,-1.88l0.12,-0.96l0.33,-0.53l2.01,-1.09l0.81,-1.93l2.59,-0.18l2.9,-1.47l0.27,-0.59l-0.2,-1.49l1.33,-1.36l0.55,-1.03l0.74,-2.53l0.07,-1.72l1.88,0.45l2.16,-0.39l1.53,-0.73l0.8,-0.99l-0.02,-1.47l1.28,-1.11l1.0,-1.44l1.87,-1.45l-0.1,-1.36l-1.66,-1.78l-0.29,-0.72l0.45,-0.5l1.92,-0.84l0.33,-0.51l-0.35,-1.36l-0.67,-0.64l0.14,-4.82l-0.66,-0.58l-1.0,0.24l-1.61,-0.58l-0.06,-1.78l0.89,-0.49l1.83,0.51l2.82,-1.67l0.4,-0.66l0.21,-2.21l1.29,-1.54l0.97,0.19l3.24,2.38l3.55,0.21l0.29,1.13l0.63,0.47l0.6,-0.04l1.81,-1.18l1.98,-0.15l1.15,-0.42Z",
            "name": "Castell\u00f3n"
        },
        "ES-ZA": {
            "path": "M447.68,99.67l-0.14,-1.08l0.8,-2.59l-0.63,-1.0l-1.44,-0.27l-0.3,-0.68l1.47,-2.03l1.25,-0.97l0.65,-1.86l1.6,-1.77l1.15,-0.83l2.41,-0.04l0.86,-1.74l3.5,1.98l1.57,-0.15l1.53,0.6l2.28,-0.08l1.24,0.32l1.27,0.85l2.8,-0.89l3.45,0.1l1.01,-0.41l1.12,1.5l3.21,1.69l6.37,-0.48l3.7,1.71l1.7,-0.65l0.56,-0.69l1.08,1.54l1.42,0.17l2.97,-0.88l0.35,0.91l0.43,0.25l2.65,-0.37l0.29,-0.91l0.72,0.36l0.66,0.86l0.21,1.65l2.85,1.11l0.53,-0.28l0.39,-1.56l0.21,0.01l0.49,1.93l1.35,2.58l-0.44,1.01l0.19,0.52l1.85,0.92l0.57,-0.28l0.63,-3.18l1.37,-0.43l3.38,2.97l-0.79,1.19l0.28,2.43l-0.44,2.08l1.03,2.98l-4.17,2.62l-0.16,0.49l0.88,2.23l1.67,2.59l0.15,2.04l0.39,1.01l1.35,0.77l-0.57,1.16l0.18,0.8l2.23,1.77l-0.96,0.9l-1.62,0.27l-0.78,0.46l-0.53,0.72l-0.41,1.77l0.1,1.07l0.68,1.11l-0.25,3.54l1.05,2.15l0.29,2.64l-0.09,0.91l-1.62,1.93l-0.05,0.51l0.59,0.86l1.36,0.02l-0.23,2.41l-0.78,0.16l-1.28,-1.34l-1.42,-0.17l-0.2,-1.75l-0.45,-0.35l-3.41,0.42l-1.97,-1.47l-2.62,-0.18l-0.62,-0.32l-1.15,-1.42l-0.77,-0.22l-1.73,0.91l-3.81,0.61l-3.03,-0.97l-0.94,0.11l-0.72,0.93l-0.05,3.55l-0.91,0.27l-0.36,-0.83l-0.52,-0.26l-0.99,0.77l-0.77,-0.61l0.19,-1.27l-0.58,-0.8l-1.11,-0.43l-2.12,-0.23l-0.89,0.72l-7.45,-4.27l-5.66,-1.08l1.44,-1.48l1.16,-1.88l0.96,-0.25l0.15,-1.09l1.82,-0.42l0.37,-0.4l1.47,-2.71l0.13,-1.66l2.94,-3.92l-0.02,-0.47l-2.75,-3.19l-1.79,-1.17l-2.03,-0.76l-3.92,-0.72l-1.85,1.28l-1.13,-0.26l-0.44,-0.68l-0.84,-3.28l0.65,-1.37l1.42,-5.36l-0.24,-0.55l-1.77,-0.57l0.3,-2.27l-0.25,-1.07l-0.69,-0.76l-0.97,-0.41l-0.52,0.2l-0.46,0.99l-1.14,0.36l-2.73,0.11l-0.99,-0.3l-1.38,-2.14l-1.49,-0.4l-0.47,0.33l-0.22,1.42l-0.71,0.44l-2.33,0.19l-0.97,-0.2l-1.29,-0.92Z",
            "name": "Zamora"
        },
        "ES-O": {
            "path": "M444.9,17.76l0.56,-0.3l0.54,-2.43l0.58,-0.54l0.3,-1.06l2.03,-0.45l6.83,-0.14l2.68,0.6l2.33,-1.17l1.87,0.19l3.4,1.49l2.07,-0.36l0.39,-0.51l-0.1,-0.46l1.44,0.61l4.28,-0.41l2.61,-0.86l0.88,-0.62l1.85,1.11l4.56,0.28l1.75,-1.0l4.56,0.0l0.58,-0.75l-0.35,-0.92l0.34,-0.39l-0.01,-0.61l1.39,-0.3l0.49,-1.12l0.3,0.02l1.98,1.28l2.89,3.71l0.61,0.18l0.38,-0.3l0.53,0.7l2.16,0.35l7.99,-0.34l0.91,0.24l-0.35,1.08l-0.65,0.63l0.23,0.9l0.53,0.11l1.63,-0.74l0.67,-1.01l1.96,0.08l3.38,2.11l1.45,0.54l3.52,0.19l0.76,0.21l0.34,0.57l0.88,-0.08l2.61,0.8l1.47,-0.69l1.27,0.59l2.8,0.59l4.16,1.82l8.46,0.75l0.04,0.58l-0.94,1.93l0.72,2.46l-0.52,1.21l-0.63,-0.89l-1.47,-0.29l-1.13,0.51l-0.93,0.92l-1.92,0.01l-1.06,0.44l-0.43,0.59l-0.16,2.35l-0.44,0.99l-1.06,-0.15l-2.12,0.36l-1.0,-1.73l-0.88,-0.75l-1.5,-0.2l-4.08,2.46l-2.3,0.86l-0.86,1.24l-0.53,1.64l-0.73,0.88l-1.53,-0.27l-2.16,1.06l-3.69,0.45l-2.74,-0.22l-0.67,0.54l-0.48,1.34l-2.76,0.23l-0.91,1.26l-2.18,0.39l-4.52,-1.48l-2.36,0.19l-0.63,0.42l-1.6,3.21l-0.52,0.34l-2.06,0.03l-2.79,-1.41l-1.4,-1.0l-0.6,-1.76l-0.81,-0.74l-1.39,0.22l-2.62,-0.39l-0.58,0.39l-0.46,1.32l-0.62,0.3l-3.09,-0.72l-0.74,0.25l-0.55,1.19l-5.4,-1.98l-1.29,0.66l-0.98,2.19l-2.01,0.38l-0.47,0.36l0.13,1.08l1.2,0.72l-2.0,1.24l-2.31,0.7l-2.94,-0.58l-2.68,0.16l-1.3,0.56l-1.16,1.12l-1.06,-0.9l-1.13,-0.2l-0.32,-2.36l-1.38,-1.61l-1.86,-0.39l-1.44,-1.69l-0.63,0.13l-0.24,1.47l-0.49,-0.95l0.19,-0.57l0.75,-0.48l0.68,-1.78l2.62,-0.76l1.89,-1.6l0.1,-1.44l-0.67,-1.19l-0.82,-0.97l-0.62,-0.07l-1.14,1.44l-1.62,0.83l-0.33,-0.2l-0.45,-0.87l0.34,-1.6l-0.18,-0.65l-3.33,-2.24l-0.84,-3.35l-1.02,-0.68l-0.9,-1.31l-0.36,-2.35l-1.58,-0.63l0.22,-1.62l1.91,-0.03l2.58,-2.68Z",
            "name": "Asturias"
        },
        "ES-OR": {
            "path": "M393.45,71.75l1.34,-0.05l2.09,-2.16l1.46,-0.54l1.31,-1.41l1.12,1.07l3.11,-0.18l1.87,0.52l0.59,-0.25l0.82,-1.32l1.05,0.14l1.09,-0.45l1.14,1.37l-0.11,2.06l0.37,0.44l1.33,0.09l3.07,1.66l1.11,1.1l1.64,0.11l3.83,2.59l1.81,-0.22l2.45,0.63l4.46,-2.45l1.6,1.15l1.77,-0.27l1.86,0.51l2.5,4.64l0.73,-0.03l2.06,-5.46l1.9,-1.66l1.17,-2.25l3.32,0.45l2.39,-0.98l1.08,0.7l2.68,0.75l0.37,0.85l-0.15,1.24l-0.82,1.27l-0.09,0.67l3.86,3.15l0.04,2.18l-1.18,2.14l-1.17,1.27l-0.27,0.98l-1.23,-0.18l-0.97,0.22l-1.42,0.99l-1.77,1.97l-0.62,1.81l-1.17,0.88l-1.61,2.23l0.02,1.18l0.75,0.61l1.08,0.07l0.47,0.67l-0.82,2.2l0.14,0.95l-2.33,1.21l-3.55,-2.35l-0.98,0.08l-1.7,1.26l-0.01,3.47l-0.72,1.05l-1.2,0.76l-2.76,0.96l-2.75,0.18l-1.7,1.57l-1.0,-1.98l-1.87,-0.83l-0.87,0.36l-0.38,1.1l-0.49,0.35l-2.06,0.32l-0.38,-0.21l0.58,-1.82l-0.36,-0.54l-2.07,-0.09l-2.44,-1.3l-3.74,1.17l-1.17,-0.04l-0.63,0.3l-0.45,0.77l-0.75,-0.0l-0.32,-2.63l-0.54,-0.34l-1.03,0.56l-0.62,1.94l-1.08,-0.09l-0.8,0.3l-2.24,2.55l-1.63,0.47l-2.95,-0.18l-0.02,-1.96l-0.48,-0.56l-1.28,-0.5l-0.34,-0.72l0.05,-0.84l1.84,-3.1l2.99,-2.49l0.49,-0.85l0.06,-1.13l-0.42,-0.94l-1.5,-1.0l-2.22,0.51l-0.22,-0.18l0.02,-2.96l-0.56,-1.25l1.4,-1.13l0.15,-1.94l0.58,-1.9l-0.49,-0.5l-2.67,0.72l-1.03,-1.13l-0.22,-0.92l0.52,-1.92l-0.27,-0.49l-0.8,-0.37l-1.17,-1.85l-0.02,-1.49l-0.93,-2.31l0.13,-2.75Z",
            "name": "Orense"
        },
        "ES-M": {
            "path": "M545.47,186.6l1.11,1.12l1.35,-0.18l0.69,-0.49l0.71,-1.29l0.38,-2.1l0.4,-0.53l0.45,-0.25l1.25,0.23l1.97,-0.47l0.6,-3.23l-0.15,-3.89l1.2,-1.52l0.2,-1.08l-0.25,-1.31l0.56,0.79l1.04,0.32l2.91,-1.14l0.62,-3.54l2.78,-4.22l1.0,-0.65l1.63,0.24l1.2,-0.29l0.48,-0.46l1.38,-4.49l0.06,-1.81l1.75,-2.54l4.56,-2.0l1.81,-2.95l2.32,-1.75l2.4,-2.86l1.17,-0.72l1.38,-0.3l0.2,0.73l2.3,2.61l1.85,0.95l1.01,3.24l-0.08,1.02l-1.59,4.44l0.17,1.34l-0.86,0.88l-0.42,2.14l-0.75,1.54l0.28,0.71l1.42,0.55l0.39,0.69l0.26,1.82l-0.73,1.75l1.17,1.22l1.31,-0.06l0.55,-0.36l1.16,1.69l1.27,0.4l-0.17,2.22l0.44,0.86l0.9,0.75l-0.01,1.68l0.52,0.36l1.5,-0.46l1.54,1.34l0.29,3.58l1.63,1.06l0.64,1.36l-0.54,2.9l-1.02,1.33l-0.41,2.06l0.08,1.38l0.37,0.57l0.63,0.14l2.0,-1.72l0.37,0.15l0.74,2.0l0.32,3.16l-0.42,0.41l0.0,0.71l0.91,2.32l-1.03,1.09l-0.66,0.2l-1.6,0.08l-0.37,-0.67l-1.04,-0.45l-4.04,1.83l-2.04,0.42l-1.33,-0.62l-1.29,0.58l-3.74,-0.16l-0.81,0.57l-0.47,0.84l-1.84,0.52l-2.42,1.18l-0.26,1.21l-3.74,1.45l-2.52,2.25l-0.75,0.0l-1.58,-1.15l3.58,-1.2l0.87,-0.94l1.59,-0.92l1.85,-1.98l1.59,-0.97l0.97,-2.46l-0.05,-0.95l-0.65,-0.71l-2.18,-1.07l-3.31,-0.28l-1.43,-1.43l-1.32,0.04l-1.08,-0.97l-5.69,-1.99l-1.1,-1.32l-1.3,-0.64l-0.76,0.01l-1.05,0.62l-1.14,-0.27l-1.87,-1.72l-2.64,0.85l-2.09,2.42l-1.61,-1.28l-0.35,-0.9l0.01,-1.63l-0.87,-0.78l-0.66,0.24l-2.68,3.53l-2.21,1.18l-0.87,0.84l-0.87,-0.08l-0.52,-0.34l1.46,-3.86l-0.24,-2.25ZM555.65,168.84l-1.5,0.12l0.07,-0.67l0.51,-0.49l0.51,0.1l0.41,0.93Z",
            "name": "Madrid"
        },
        "ES-L": {
            "path": "M741.11,137.56l-0.06,-1.0l0.96,-2.16l-0.1,-1.15l-0.47,-0.95l-1.43,-0.99l-0.07,-0.63l0.94,-2.29l0.02,-2.12l1.96,-1.09l1.73,-3.05l-0.72,-2.57l-2.89,-0.76l-0.88,-3.45l2.97,-3.87l2.3,-0.75l1.52,-2.46l1.61,-0.74l2.18,-2.35l0.01,-2.73l-1.06,-1.19l0.55,-0.71l1.0,-0.49l1.85,-2.15l0.15,-1.38l1.92,-5.01l0.1,-3.17l0.55,-2.58l0.97,-2.4l0.32,-3.21l-0.2,-3.38l-0.56,-2.06l-0.73,-0.94l-0.49,-2.04l1.14,-0.86l0.13,-1.39l1.1,-2.27l0.31,-2.12l-0.34,-0.54l-1.58,-0.56l-0.54,-0.6l-1.68,-3.31l-0.25,-1.84l-0.88,-0.92l0.4,-0.47l0.08,-0.55l-0.32,-0.44l0.49,-1.33l0.07,-1.79l1.67,-0.34l2.7,0.76l1.41,0.04l2.86,1.46l1.46,1.1l1.31,-0.59l1.29,0.83l4.07,0.45l0.59,0.53l1.08,2.32l0.99,0.71l1.89,-0.37l5.33,0.16l0.01,0.76l0.91,0.44l2.55,4.71l-0.37,1.31l0.28,0.44l-0.74,1.71l0.44,0.48l0.72,-0.1l0.53,0.89l-1.43,0.76l-0.17,0.58l1.09,1.71l0.16,0.88l0.64,0.42l2.86,0.28l1.26,-1.15l2.37,-0.31l1.39,-0.57l0.6,-1.49l1.13,0.21l0.65,-0.28l0.75,2.53l0.71,0.67l2.42,0.9l0.08,1.73l0.99,1.71l0.12,2.01l-4.64,0.9l-1.59,1.98l0.31,2.69l0.48,0.7l1.27,0.67l0.08,0.75l-1.16,1.58l0.28,1.92l-1.01,1.05l-0.03,2.19l-1.02,1.12l-0.24,0.72l0.51,0.99l1.5,-0.34l0.29,0.52l-0.55,0.59l-1.67,0.13l-0.55,0.62l-0.14,1.74l-1.1,1.89l-0.01,0.79l0.72,1.84l-0.08,0.78l-2.86,3.3l-1.13,-0.86l-1.51,0.14l-1.42,-1.3l-1.41,0.38l-0.54,1.03l-0.11,4.2l1.25,3.29l-1.64,0.38l-0.91,0.81l-0.17,0.88l0.32,0.47l1.0,0.37l-0.3,0.43l-0.66,0.4l-6.43,-0.36l-0.55,0.19l-1.05,1.59l-0.39,2.97l-1.61,0.57l-1.7,-0.52l-0.56,0.1l-1.0,3.05l-0.77,0.96l-1.44,0.51l-1.19,2.23l-2.93,0.62l-1.21,-0.74l-0.8,-0.08l-1.12,1.4l-1.69,0.0l-1.06,0.71l-4.45,1.01l-2.48,-1.31l-0.54,0.25l-1.08,1.6l-0.73,-0.39l-0.84,-1.62l-1.13,-0.39l-0.9,0.86l-0.16,2.19l-1.5,-0.12l-0.4,0.25l-0.5,1.2Z",
            "name": "L\u00e9rida"
        },
        "ES-J": {
            "path": "M614.54,281.68l1.84,-1.48l3.03,1.54l2.12,-0.51l1.79,0.35l0.06,3.72l0.79,0.83l2.51,0.74l0.43,4.49l0.4,0.66l1.16,0.74l0.28,0.9l-0.74,1.92l0.19,1.54l-3.99,5.31l-2.1,0.9l-0.24,0.39l0.15,2.65l-2.48,1.92l-0.68,-0.45l-0.75,0.09l-3.54,3.15l-4.17,7.08l-0.44,1.43l-0.07,3.95l-2.76,1.55l-0.41,1.41l-2.41,-0.46l-1.61,0.78l-3.64,-1.9l-1.74,-0.2l-1.3,0.4l-2.43,2.71l-3.2,0.66l-0.79,-0.18l-1.79,-1.9l-0.93,-0.51l-0.91,0.12l-4.9,4.26l-2.25,0.59l-4.35,2.61l-2.03,3.99l-4.03,0.37l-1.8,-1.07l-1.41,-2.63l-2.0,-1.6l-0.96,-2.59l-1.81,-1.97l-1.03,-1.73l-1.14,-0.61l1.59,-2.38l0.02,-1.1l-0.73,-0.74l-1.28,-0.51l-0.44,-2.9l-1.57,-1.29l-0.45,-0.81l0.9,-7.16l-0.85,-1.99l0.87,-1.02l0.37,-1.81l2.2,-3.25l1.12,-0.78l0.01,-2.23l-1.7,-2.88l-0.2,-2.8l-1.16,-2.59l-1.24,-0.64l0.24,-1.96l1.66,0.04l1.6,0.55l11.43,0.45l2.25,-0.59l0.79,-1.23l1.51,-0.51l6.95,1.29l0.99,-0.51l0.45,-1.75l0.58,-0.2l1.17,1.81l2.76,0.49l2.6,-1.16l0.9,-1.07l0.5,-1.34l1.33,-0.39l2.43,0.79l3.56,0.3l1.45,0.42l1.09,-0.28l1.83,-1.24l2.28,2.62l0.66,-0.21l0.4,-1.22l1.29,-0.79l1.28,-0.01l1.65,0.69l2.95,-2.08Z",
            "name": "Ja\u00e9n"
        },
        "ES-H": {
            "path": "M425.83,329.06l0.68,-1.88l1.62,-1.85l1.08,-4.64l0.65,-0.95l3.63,-3.07l1.19,-2.08l1.57,-5.09l-0.14,-1.36l1.68,-0.59l1.36,0.25l1.29,-0.47l0.82,-0.85l0.59,-1.26l2.84,0.98l1.35,-0.41l3.3,-9.14l5.07,1.73l-0.73,2.37l0.63,0.91l2.33,0.83l2.88,-0.12l2.18,0.41l1.17,1.36l0.25,1.37l0.59,0.52l3.55,0.38l1.67,-1.91l0.96,-0.03l1.51,1.06l0.84,1.69l6.12,2.39l0.57,0.55l0.62,1.45l1.49,0.16l-0.7,2.65l0.78,2.16l-0.46,0.28l-1.58,-0.44l-0.94,0.39l-0.56,1.02l-0.06,2.34l-0.53,-0.13l-0.23,-0.99l-0.81,-0.66l-1.91,-0.02l-5.51,1.54l-1.04,0.68l-1.34,2.33l-1.06,1.2l-0.15,1.33l0.22,0.4l1.21,0.55l2.4,-0.09l1.6,0.79l-0.16,1.46l1.01,1.42l0.78,2.54l1.6,2.85l-0.04,0.52l-1.71,0.78l-0.21,0.67l0.19,1.66l-0.85,1.25l0.19,0.82l1.45,1.7l-0.63,2.6l0.44,2.99l-0.39,1.57l0.04,1.53l-0.88,1.42l-0.27,1.23l1.07,3.85l-0.91,2.43l0.1,0.43l1.27,1.18l-0.36,1.24l0.13,3.16l-0.96,0.01l-0.97,-1.27l-1.3,-3.32l-0.9,-1.57l-1.25,-1.33l-9.81,-7.1l-2.7,-1.14l-1.61,-1.34l-1.57,-0.78l-0.62,-0.97l-0.23,-1.11l2.08,-3.0l0.46,-0.89l-0.13,-0.51l-0.53,0.07l-2.97,2.95l-1.13,0.0l-0.4,0.4l1.32,2.74l-3.41,-1.67l-2.92,-0.96l-1.34,0.49l-0.22,0.43l-7.64,0.19l-2.08,1.08l-1.03,-0.5l-0.72,-3.04l0.24,-0.89l-0.69,-5.58l-0.68,-1.59l-0.29,-2.97l-0.34,-1.06l-1.54,-1.7l-0.52,-1.42Z",
            "name": "Huelva"
        },
        "ES-CU": {
            "path": "M603.52,196.05l0.67,-0.46l1.68,0.58l0.53,-0.42l-0.2,-1.78l0.44,-0.43l1.88,1.86l1.37,0.64l0.7,-0.06l0.62,-0.45l0.9,-1.59l1.59,-0.3l0.51,-0.42l0.72,-3.17l-0.56,-3.19l0.29,-4.0l1.1,-0.55l1.69,1.13l0.52,-0.06l1.69,-1.83l1.96,-0.97l1.81,0.24l2.45,1.45l0.52,-0.01l0.46,-0.5l0.05,-1.12l-1.32,-1.47l0.25,-1.36l-0.67,-1.14l-0.02,-0.74l1.22,1.28l0.65,0.22l2.33,-1.16l1.5,0.3l0.63,-0.98l-1.14,-2.21l0.37,-1.09l0.95,0.47l1.41,1.39l0.9,0.12l1.26,-1.36l0.19,-2.44l2.56,1.13l0.83,0.0l1.26,-0.62l0.63,-1.27l2.23,0.91l2.13,2.14l1.63,0.71l0.78,-0.01l1.0,-0.57l0.6,0.2l1.47,3.02l1.4,5.44l3.85,2.81l1.6,2.18l0.25,2.57l1.41,-0.16l0.89,0.48l4.82,4.5l3.88,0.13l-0.48,3.25l1.54,1.29l1.49,4.45l0.89,0.5l4.12,0.85l3.6,-0.64l0.49,1.46l-1.86,0.98l-0.5,0.76l0.37,1.26l-0.24,2.73l-0.88,3.38l-1.68,2.82l-0.07,2.84l-0.97,0.63l-2.01,-0.65l-1.38,0.25l-1.68,1.58l-1.69,3.2l-1.43,1.46l-0.27,0.86l0.15,2.68l-0.7,2.37l0.06,0.72l0.49,0.67l-9.19,5.03l-1.25,2.02l-2.66,-0.25l-1.85,-0.96l-3.87,0.53l-1.3,-1.9l0.24,-0.52l-0.31,-0.56l-2.79,-0.39l-0.43,0.53l1.45,4.16l-4.38,-0.58l-4.43,2.57l-1.11,-2.53l-0.45,-0.23l-1.41,0.49l-0.76,1.81l-5.07,-5.2l-0.57,-0.0l-0.61,0.63l-1.31,0.03l-2.31,-0.62l-1.64,0.9l-2.83,0.17l-1.77,-3.87l-0.68,-0.07l-1.56,2.06l-1.66,0.17l-0.25,-0.37l0.87,-0.99l0.02,-0.5l-1.47,-2.03l-0.9,-2.01l0.23,-6.61l0.59,-2.44l-3.59,-4.07l-0.61,-2.13l-1.04,-1.28l-0.82,-2.68l-1.47,-1.65l-0.93,-0.42l1.01,-2.66l0.01,-2.79l-0.42,-0.4l-1.54,0.07l-0.96,-2.89l0.15,-0.54l2.6,-0.34l1.23,-1.12l0.28,-1.12l-0.93,-2.21Z",
            "name": "Cuenca"
        },
        "ES-T": {
            "path": "M733.71,165.01l2.23,-1.35l1.83,-2.73l-0.83,-3.74l0.41,-1.62l1.02,-2.04l0.17,-1.23l-0.77,-2.3l-1.75,-1.2l-0.85,-2.68l0.12,-1.0l3.31,-1.96l0.83,-2.61l1.85,-1.34l0.97,-2.28l1.61,0.12l0.43,-0.37l0.33,-2.66l0.53,0.12l1.09,1.94l1.17,0.3l0.71,-0.36l0.87,-1.47l1.3,1.05l1.18,0.25l4.63,-1.05l0.93,-0.68l1.72,-0.0l1.22,-1.43l1.67,0.86l3.3,-0.67l0.67,-0.66l0.75,-1.72l1.45,-0.52l0.87,-1.09l0.75,-1.53l0.04,-1.29l2.32,0.49l1.71,-0.8l0.54,-3.25l0.75,-1.18l6.6,0.32l0.98,-0.52l1.15,0.01l-1.41,2.23l0.24,1.15l3.08,1.65l-0.38,2.67l0.69,1.18l2.01,1.16l0.82,0.91l0.24,1.67l0.8,1.76l0.96,0.78l0.17,0.54l-1.53,1.23l-0.12,0.81l0.58,0.64l1.53,0.27l-0.06,0.98l-3.18,0.25l-10.02,3.77l-2.78,0.61l-0.57,0.45l-1.11,1.93l-1.13,-0.61l-1.97,0.03l-1.77,0.35l-2.73,1.42l-4.52,4.5l-2.21,2.94l-4.32,4.44l-0.85,1.64l0.16,0.53l2.26,1.1l0.96,-0.16l0.24,-0.56l2.36,2.42l1.12,0.19l-0.03,0.71l-0.82,1.44l-2.59,0.8l-1.57,1.68l-0.16,-0.35l-2.11,-0.03l-3.49,1.15l-1.56,1.36l-1.45,3.0l-2.56,-1.18l-0.41,-1.18l-0.86,-0.81l-4.96,-2.15l-0.52,-0.91l0.35,-1.76l-0.95,-0.8l-0.89,-0.29l-0.87,-1.34l-1.93,-0.32ZM752.95,174.11l-1.57,0.36l-0.47,-0.76l1.16,-0.15l0.88,0.55Z",
            "name": "Tarragona"
        },
        "ES-C": {
            "path": "M355.87,48.72l-0.53,-1.06l1.62,-4.78l-0.87,-1.15l-0.21,-0.92l0.77,-0.27l0.51,-1.48l0.97,-0.93l0.8,0.33l0.76,-0.18l1.51,-1.65l1.17,-0.28l0.35,-0.4l0.0,-0.4l-0.57,-0.36l-1.43,0.49l-0.76,-0.49l-1.37,0.57l-0.19,-0.49l1.67,-1.61l1.07,-0.58l1.49,0.61l1.48,-0.16l1.66,-1.03l0.69,-1.39l0.76,0.53l1.21,-0.06l1.15,-0.48l0.82,-0.99l-1.38,-0.4l-0.55,-1.13l-0.5,-0.25l3.32,-1.87l1.19,-0.32l0.91,-0.74l1.67,1.52l4.0,1.05l3.85,-1.64l1.56,0.54l2.21,-1.09l0.79,-1.24l1.25,-0.54l0.37,-0.54l1.7,-0.45l0.55,1.06l0.89,0.79l0.58,-0.04l0.73,-1.27l0.1,-1.68l2.04,0.97l0.58,1.54l1.98,2.53l0.38,-0.27l0.33,-1.02l-0.29,-3.29l1.2,-1.16l-0.06,-0.69l-0.91,-0.42l-2.61,-0.17l-1.06,-1.08l4.41,-0.73l0.69,-0.82l-0.03,-0.65l-0.51,-0.37l-2.65,0.68l-0.58,-0.59l-1.56,1.0l-1.09,0.05l0.35,-1.85l0.51,-0.13l0.52,-0.75l-0.77,-1.67l1.87,0.05l1.15,-0.61l5.39,-4.13l0.69,0.64l1.12,-0.21l0.08,-1.43l-0.72,-0.88l0.44,-1.39l3.06,-0.47l1.2,-0.73l1.68,-1.87l0.68,0.1l0.83,1.81l-0.68,0.6l-0.23,1.28l-0.93,0.34l-0.26,0.75l0.38,0.4l2.33,-0.02l0.41,-0.88l-0.54,-0.89l1.7,0.16l-0.11,-0.97l0.38,-0.42l1.4,-0.99l1.54,-0.4l0.98,-0.65l1.0,-1.49l0.13,0.44l-1.07,1.52l-0.55,3.91l0.64,1.16l-1.18,1.44l-0.14,2.2l-1.25,1.72l0.03,0.85l0.48,0.89l-1.33,3.96l-1.13,0.79l-0.6,1.52l-1.95,-0.15l-0.47,0.36l-0.28,3.56l-1.9,2.72l0.34,2.04l-1.31,3.77l1.44,5.27l-0.39,2.21l1.14,3.56l-0.01,1.31l-0.19,1.28l-0.89,1.7l-1.53,1.06l-1.01,1.87l-1.67,0.67l-5.17,-0.97l-0.89,0.44l-0.57,0.78l-1.62,-0.32l-1.45,0.84l-0.78,-1.24l-0.94,-0.07l-0.6,0.83l0.25,1.89l-0.23,0.67l-1.59,-0.37l-0.46,0.16l-1.14,1.72l-0.83,0.59l-0.78,0.04l-1.4,-0.7l-3.03,0.56l-0.91,0.58l-0.37,0.89l-1.49,-0.35l-2.84,1.04l-1.08,1.24l-0.63,1.62l-0.9,0.68l-0.5,-0.2l-1.42,-1.96l-0.61,0.12l-0.65,1.27l-0.1,0.68l0.29,0.55l-0.65,0.94l-0.28,0.02l0.01,-0.73l-0.45,-0.06l-1.94,1.36l-0.06,0.57l0.31,0.38l-1.71,0.7l-0.4,1.37l-0.9,0.8l-0.47,-2.04l-1.46,-1.04l0.17,-1.06l1.03,-2.12l0.38,-2.58l0.82,-1.25l1.68,-0.94l1.63,-1.99l1.09,-0.36l0.59,-1.36l-0.1,-1.04l-1.03,-0.76l-0.59,0.3l-0.15,1.14l-0.49,0.6l-0.78,0.34l-3.88,0.02l-0.32,0.45l0.1,0.72l-0.75,0.81l-0.83,0.07l-0.37,-0.33l-0.62,-1.92l0.89,-0.72l0.27,-0.96l-0.46,-0.78l-1.17,-0.64l-0.26,-1.15l0.53,-0.97l-0.14,-1.2l-1.29,-0.48l-0.57,-0.93l-0.67,-0.38l-0.56,0.37l0.02,0.44l-0.69,-0.34l-0.8,0.4l-1.04,1.78ZM358.48,47.08l0.09,0.23l-0.03,0.03l-0.06,-0.25Z",
            "name": "La Coru\u00f1a"
        },
        "ES-AV": {
            "path": "M506.35,173.77l2.38,-0.22l1.6,-0.79l1.22,-1.24l0.86,-2.75l4.66,-3.38l1.12,-1.76l1.57,-1.17l0.77,-1.48l-0.02,-2.55l1.94,-2.35l-0.5,-2.24l1.15,-1.72l-0.32,-2.45l-0.67,-0.71l-1.01,-0.4l0.05,-2.42l0.75,-1.56l0.56,-0.38l1.95,0.1l2.21,-1.11l0.8,0.24l3.52,2.58l1.24,0.5l1.23,-0.44l1.63,-1.62l3.01,-0.82l-0.37,3.05l0.67,1.32l2.23,2.03l1.62,3.24l1.45,1.0l0.71,3.65l-0.56,2.4l0.7,0.65l1.69,-0.39l0.56,0.27l0.45,2.06l1.22,1.69l0.99,6.16l0.49,0.33l3.03,-0.71l0.92,-0.58l2.44,-0.19l0.34,-0.56l-0.57,-1.3l0.23,-0.12l3.38,0.45l-0.33,2.75l-0.33,0.42l-2.09,0.65l-0.65,-0.29l-0.54,-0.88l-0.91,0.1l-0.24,0.49l0.09,2.43l-1.23,1.64l0.15,3.93l-0.52,1.83l0.17,0.86l-1.61,0.31l-1.17,-0.24l-0.87,0.45l-0.61,0.81l-0.37,2.09l-0.97,1.37l-0.87,0.13l-1.21,-1.16l-0.75,0.38l0.15,2.47l-1.51,3.89l-1.93,0.68l-1.58,-0.42l-0.42,-0.66l-0.38,-2.5l-0.53,-0.5l-4.03,0.52l-0.61,0.53l-0.74,2.11l-3.04,2.26l-0.81,1.82l-1.04,0.81l-1.61,0.3l-0.45,-1.73l-1.09,-0.28l-1.56,0.62l-2.88,2.56l-0.85,0.25l-0.77,-0.03l-1.68,-0.89l-3.71,-0.47l-1.19,-2.28l-0.09,-2.59l0.55,-1.53l-0.28,-0.79l-1.06,-0.09l-2.11,0.61l-2.3,2.09l-2.17,0.28l-2.35,-1.05l-2.2,-2.43l-2.43,-1.36l1.87,-3.08l0.03,-0.89l-0.72,-1.77l0.13,-0.67l2.7,-2.16l0.9,-0.26l0.36,1.19l0.96,1.13l0.66,0.49l0.83,0.03l0.71,-0.62l-0.08,-1.36l1.07,-0.17l0.74,-0.65l1.26,-4.26l-0.38,-0.5l-2.66,-0.02l-0.12,-1.0Z",
            "name": "\u00c1vila"
        },
        "ES-A": {
            "path": "M688.27,306.64l-2.17,-3.48l-0.46,-2.23l0.36,-1.34l1.5,-2.56l0.67,-4.07l-1.14,-2.95l-0.83,-0.58l-2.4,-0.69l-0.23,-3.04l0.3,-1.17l2.02,-2.05l0.38,-0.91l0.46,-4.81l-0.6,-3.02l1.39,0.02l1.58,-0.41l1.7,-1.45l-1.6,-2.55l-0.33,-1.86l0.4,-0.2l0.92,0.63l1.55,-0.2l1.97,1.68l3.5,-0.58l3.03,1.72l0.74,0.83l1.14,0.42l4.33,-2.51l0.12,-0.58l-0.67,-0.85l-0.74,-0.32l-1.09,0.26l-0.72,-1.23l6.58,-1.14l4.21,-3.13l3.23,1.38l7.8,-1.48l0.86,0.63l4.77,1.0l1.62,0.92l0.89,1.01l-0.13,0.83l2.2,1.44l0.02,0.96l-2.1,0.64l-1.19,1.83l-1.04,0.21l-1.5,1.17l-0.51,1.27l-3.27,0.53l-1.25,0.72l-0.62,1.15l0.04,1.4l-0.7,1.1l-3.98,0.62l-6.18,2.97l-2.74,3.0l-0.48,0.89l-0.16,1.42l-1.72,0.25l-0.78,1.15l-1.07,-0.06l-0.42,0.33l-0.36,2.14l0.57,4.49l-0.77,0.48l-2.41,0.14l-1.55,1.59l-0.89,2.46l-0.38,6.37l-1.32,0.75l-0.81,0.88l-2.1,5.46l-0.53,0.04l-1.96,-1.14l-1.97,-2.0l-1.08,-1.25l-1.94,-3.33Z",
            "name": "Alicante"
        },
        "ES-CR": {
            "path": "M525.9,269.77l0.99,-0.13l0.77,-0.81l1.41,-4.71l0.75,-1.48l1.02,-0.75l2.04,-0.08l0.64,-2.28l-0.49,-1.26l-2.96,-0.94l-1.24,-3.76l0.5,-0.09l2.22,0.98l2.02,-1.01l0.07,-1.04l-1.24,-1.07l-0.1,-1.02l0.74,-2.85l1.44,-1.58l2.89,0.11l2.0,1.05l0.87,0.13l0.37,-0.59l-2.27,-2.97l-1.61,-4.08l1.74,-1.3l1.22,-2.96l0.16,-1.22l-0.42,-1.18l2.46,-0.19l0.36,-0.31l0.61,-1.29l1.41,-0.98l0.5,-1.99l0.42,-0.31l0.59,-0.01l0.54,2.23l1.16,1.0l1.23,-0.2l0.81,-0.96l7.29,1.58l2.44,-1.31l1.21,-3.64l1.21,0.51l2.92,-0.53l-0.03,1.21l-1.4,1.02l-0.09,0.86l0.69,1.63l-0.54,0.79l-1.31,-0.23l-0.46,0.33l-1.07,4.84l0.34,0.61l1.51,0.93l0.73,-0.27l0.83,-0.88l3.53,0.59l0.18,2.47l0.26,0.35l2.51,0.91l1.23,0.99l1.71,-0.01l1.05,-1.24l0.99,-0.39l1.65,1.18l0.79,0.06l1.88,-1.32l3.49,-0.62l1.49,0.36l3.17,-2.27l0.39,-1.58l2.61,-1.54l2.13,0.02l0.8,-0.32l1.3,-3.1l4.21,-0.17l0.4,-0.79l1.16,-0.28l3.12,2.31l1.77,-0.34l2.05,0.55l1.47,-1.09l0.8,1.75l1.31,1.8l-0.86,0.99l-0.03,0.49l0.56,0.82l2.44,-0.04l1.54,-1.82l1.59,3.48l0.73,2.34l-4.71,6.76l1.26,2.93l0.08,1.34l-2.86,5.5l-0.13,0.87l0.72,1.41l1.08,0.36l1.76,-0.11l1.25,1.18l0.57,3.59l0.91,1.25l1.87,0.63l1.13,1.63l0.18,1.53l-1.23,3.41l-1.96,0.59l-1.02,1.15l-0.58,1.63l0.67,1.51l-0.24,0.46l-1.29,1.24l-2.18,1.22l-1.2,1.05l-1.21,-0.67l-1.65,0.01l-1.68,1.01l-0.41,1.04l-1.63,-2.15l-0.6,-0.33l-0.58,0.06l-1.77,1.29l-0.68,0.17l-1.36,-0.41l-2.75,-0.14l-3.41,-0.95l-1.69,0.51l-1.43,2.43l-2.24,1.01l-2.26,-0.4l-0.62,-1.44l-0.96,-0.47l-1.11,0.41l-0.48,1.73l-0.56,0.34l-4.31,-1.04l-0.98,0.18l-1.54,-0.45l-1.97,0.68l-0.73,1.18l-1.9,0.47l-11.25,-0.45l-1.54,-0.54l-1.75,-0.08l-0.93,0.67l-0.17,2.04l-0.55,-0.01l-6.17,-2.51l-1.12,-1.55l-2.2,-2.12l-1.24,-0.79l-1.43,-0.43l-0.93,-1.39l-2.77,-1.79l-1.05,-1.1l-1.76,-0.8l-1.8,-0.28l-1.26,-0.69l-0.54,-0.82l-0.15,-1.95l-0.34,-0.64l-0.6,-0.29l-2.43,0.08l-1.21,-0.5l-1.72,-1.31ZM532.32,235.83l-0.96,0.53l-2.08,-1.05l1.73,-6.12l1.07,-1.72l3.26,1.76l0.76,0.81l0.38,0.99l-0.91,2.13l0.4,0.97l-0.33,0.41l-3.33,1.29Z",
            "name": "Ciudad Real"
        },
        "ES-CO": {
            "path": "M508.87,281.66l1.27,-0.86l0.78,-1.71l1.37,-1.63l2.17,-0.07l0.91,-1.49l1.24,-1.07l1.76,-1.21l1.32,-0.49l0.6,-1.53l-0.18,-0.87l3.3,-0.17l1.61,-0.44l2.16,1.64l1.42,0.6l2.73,0.06l0.25,2.22l0.81,1.21l1.49,0.81l1.37,0.15l2.01,0.85l0.95,1.04l2.77,1.77l0.95,1.4l2.71,1.24l3.33,3.68l2.25,1.13l6.38,2.01l0.99,2.3l0.22,2.85l1.64,2.72l-0.01,1.86l-0.92,0.5l-2.29,3.38l-0.42,1.9l-0.89,0.95l-0.09,0.46l0.89,1.93l-0.88,7.3l0.68,1.23l1.44,1.13l0.09,1.96l0.36,0.99l1.89,1.02l-0.19,1.01l-1.28,1.55l-0.06,1.09l1.25,0.74l1.03,1.71l1.77,1.94l0.94,2.57l2.0,1.6l1.1,2.05l-2.53,-0.01l-3.09,2.72l-1.96,-0.18l-0.69,0.22l-0.79,1.25l-0.1,1.61l-1.0,1.73l0.23,1.6l-1.95,1.61l-0.32,-0.49l-1.61,-0.56l-0.42,-2.88l-0.4,-0.34l-2.78,0.16l-1.38,1.88l-2.14,1.26l-1.92,-0.44l-0.98,-1.74l-1.25,-0.03l-0.64,-1.89l-0.26,-2.04l-0.81,-1.01l-1.16,-0.31l-1.99,1.55l-0.52,-0.05l-1.37,-1.25l-1.08,-2.56l-1.38,-1.41l-0.14,-1.23l-0.83,-1.62l-1.32,-1.22l0.57,-3.03l-0.17,-1.08l-0.95,-0.93l0.03,-1.33l-0.5,-1.34l-1.63,-1.84l-1.15,-0.35l-1.14,0.14l-2.1,0.88l-0.99,1.28l-0.77,0.15l-1.74,-0.32l-3.37,2.24l-2.58,0.7l-1.19,-0.08l-0.66,-0.77l-0.45,-1.88l0.72,-0.89l2.97,-0.02l0.4,-0.39l0.05,-3.82l-1.3,-1.16l-0.3,-1.78l-0.5,-0.77l-1.75,-1.25l-0.67,-3.67l-2.28,-2.12l-0.77,-3.19l-3.32,-3.57l0.02,-0.65l1.84,-1.62l0.72,-3.04l-0.24,-2.56l-0.99,-2.38l-0.76,-0.94l0.28,-1.72l-0.64,-1.26l0.24,-1.29l0.66,-0.64l2.46,-1.23l1.55,-1.84Z",
            "name": "C\u00f3rdoba"
        },
        "ES-VA": {
            "path": "M523.69,83.37l1.09,0.5l0.54,-0.34l0.1,-1.11l0.62,0.18l-0.6,2.82l0.17,2.5l-0.47,1.58l0.36,0.51l3.63,0.19l0.19,2.75l-0.2,0.92l-0.73,1.04l0.09,1.8l-0.8,0.68l-1.64,3.67l0.73,1.7l0.59,0.13l1.18,-0.88l1.08,0.85l2.06,-0.78l1.04,1.49l1.95,4.3l0.5,0.21l1.4,-0.54l1.99,-2.85l1.51,-0.87l0.55,0.39l0.39,1.34l2.42,2.54l2.41,-0.27l0.67,-0.43l0.15,2.69l2.11,0.95l1.89,-0.93l3.63,0.46l2.74,-1.72l3.48,0.31l0.99,-0.37l1.07,1.65l1.83,0.26l-0.39,1.31l0.95,2.08l0.03,3.64l1.56,1.43l0.42,1.15l-0.4,2.14l-0.79,1.19l-9.34,3.24l-2.8,0.06l-1.68,0.64l-1.84,-0.11l-3.06,1.7l-1.03,-0.03l-0.39,0.52l0.74,2.38l0.04,1.3l0.95,1.8l-1.92,-1.13l-0.48,0.06l-0.71,0.68l-1.31,-0.81l-0.59,0.21l-0.4,1.21l0.92,1.17l-2.59,2.75l-0.1,1.28l-1.86,2.18l-3.58,0.98l-2.4,2.0l-0.95,-0.37l-3.53,-2.59l-1.07,-0.35l-1.13,0.17l-1.51,0.97l-1.38,-0.25l-1.11,0.51l-1.9,-1.65l-1.84,-0.24l-1.21,-1.39l-0.8,0.06l-0.99,0.68l-1.13,0.17l-0.26,-0.38l1.56,-1.95l0.15,-1.25l-0.33,-2.88l-1.01,-1.99l0.27,-3.5l-0.73,-1.3l0.03,-1.56l0.63,-1.19l2.52,-0.75l1.14,-1.21l-0.05,-0.59l-2.35,-1.78l0.47,-1.73l-0.38,-0.62l-1.09,-0.45l-0.46,-2.86l-1.7,-2.66l-0.74,-1.87l4.18,-2.63l0.15,-0.5l-1.09,-2.97l0.44,-2.01l-0.29,-2.35l0.87,-1.17l-0.06,-0.54l-3.73,-3.27l-0.4,-2.04l0.41,-2.8l-0.4,-3.22l0.18,-0.84l0.51,-0.35l1.52,1.08l2.55,-0.88l1.3,-2.66l1.35,0.4l0.98,-0.31l2.36,-2.08l0.39,-0.09l1.04,1.68ZM514.07,84.09l-0.72,0.16l-0.29,-0.51l0.0,-0.64l0.88,-0.52l0.14,1.51ZM509.29,96.41l-0.53,2.68l-1.04,-0.52l0.36,-1.18l-1.62,-3.53l2.83,2.55Z",
            "name": "Valladolid"
        },
        "ES-TF": {
            "path": "M81.49,759.03l-0.25,0.85l-4.02,2.41l-0.79,1.35l-1.87,1.92l-2.46,1.78l-0.45,1.02l0.29,2.17l-0.85,1.11l-1.53,3.4l-0.39,2.87l-3.64,4.02l-0.87,1.36l-1.32,-0.21l-4.14,1.39l-0.29,-1.18l-0.73,-0.71l-0.31,-1.57l-2.09,-2.22l-0.61,-1.72l-1.6,-1.88l-0.45,-2.5l-1.02,-1.89l-1.57,-1.94l2.65,-1.36l1.61,0.94l1.09,0.15l4.26,-1.55l3.19,-0.04l0.93,-0.66l2.38,-0.47l3.49,-3.04l0.51,-1.33l1.64,-0.97l1.64,-0.49l0.36,-0.69l4.27,0.24l2.43,-0.85l0.5,0.28ZM38.3,783.22l-0.94,0.32l-0.83,-0.2l-1.96,-1.23l-1.21,-1.83l0.16,-3.06l1.02,-1.43l1.77,-0.42l1.7,0.51l3.71,2.58l0.6,1.72l-0.47,0.69l-2.73,2.16l-0.81,0.21ZM11.98,746.98l0.95,0.23l1.7,-0.59l0.58,0.24l0.83,0.86l-0.06,0.89l0.68,1.93l0.75,0.48l0.02,0.45l-1.71,2.37l0.71,2.71l-0.52,1.9l-0.93,1.29l-1.7,3.74l-0.87,-0.52l-0.52,-2.89l-3.35,-5.91l-0.52,-2.55l-1.01,-0.98l0.17,-1.13l0.97,-1.4l1.32,-1.19l0.77,-0.53l1.73,0.6ZM10.92,793.79l-1.62,2.44l-0.13,1.04l-1.47,1.58l-0.42,1.74l-0.97,-0.41l-1.49,-1.7l-3.09,-0.49l-1.08,-0.79l-0.2,-1.18l0.7,-0.33l3.5,0.48l2.2,-1.96l0.51,-1.09l2.07,-1.19l0.57,0.08l0.98,0.81l-0.05,0.97Z",
            "name": "Santa Cruz de Tenerife"
        },
        "ES-Z": {
            "path": "M653.04,98.35l2.64,0.43l1.34,1.34l1.27,0.6l0.9,0.07l1.06,-0.42l0.57,0.2l0.9,0.5l1.02,1.19l1.43,0.78l1.72,-0.08l1.05,-0.49l2.69,0.71l0.64,-0.22l1.28,-1.79l0.91,-2.21l1.85,-2.99l-0.04,-1.57l-1.48,-0.71l-1.56,-2.44l-0.15,-2.98l-0.79,-2.19l1.26,-4.2l2.14,-3.18l-0.71,-1.37l0.27,-1.67l2.76,-3.93l-0.43,-1.73l0.21,-0.69l0.61,-0.92l1.1,0.2l1.09,-0.56l0.45,-1.0l1.64,-1.44l-0.15,-0.83l0.42,-1.18l3.38,-0.19l0.64,-0.3l0.82,-2.51l2.36,-0.77l1.69,-1.43l-0.05,1.33l1.15,1.42l-0.34,0.44l-1.01,0.36l-0.43,0.73l0.8,2.18l0.32,6.38l0.32,1.26l-0.5,1.86l0.32,0.55l2.1,1.28l0.25,1.15l-3.45,5.73l-0.02,0.93l0.42,0.58l1.12,0.28l0.61,-0.43l0.35,-1.05l0.4,-0.3l1.32,0.46l0.95,-0.36l1.55,-3.72l-0.36,-2.28l0.61,0.03l0.28,0.54l0.35,3.58l-1.04,2.69l0.39,9.15l-0.98,1.29l-0.65,-0.92l-0.69,-0.39l-0.88,0.04l-0.71,0.57l-0.81,2.64l0.53,1.91l3.14,2.26l4.49,0.18l0.47,0.38l1.76,3.03l2.24,1.23l1.01,1.31l0.86,4.49l0.64,1.2l4.38,2.79l1.42,2.81l1.3,0.54l2.15,2.31l0.89,0.26l1.5,-1.02l0.56,0.13l0.61,0.99l0.58,2.15l1.97,2.85l1.32,5.43l0.52,0.28l1.95,-0.53l1.42,1.22l3.48,0.5l0.42,-0.23l0.88,-1.86l1.05,-0.76l0.9,0.51l1.45,-0.48l0.91,-1.24l3.1,0.96l-0.33,0.66l0.12,1.07l1.58,1.13l0.41,1.37l-0.98,2.33l0.28,2.3l-1.75,1.26l-0.79,2.56l-1.39,0.63l-0.55,0.68l-1.3,0.49l-0.4,1.35l0.37,1.45l-1.5,0.22l-1.9,-0.6l-1.87,-0.03l-0.83,0.4l-0.59,1.03l-0.34,-0.14l-1.45,-3.43l-0.88,-0.8l-9.3,-4.32l-1.73,-2.08l-0.55,-0.06l-0.74,0.58l-2.44,-1.46l-1.4,-2.25l-1.14,-0.36l-0.75,-1.69l-2.77,-0.1l-0.7,0.42l-0.22,0.99l1.72,3.23l0.44,1.79l-0.2,0.13l-2.82,-4.69l-0.92,-0.42l-0.68,0.38l-0.23,0.89l0.21,3.07l-0.63,0.9l1.18,2.25l-2.88,3.61l-1.61,-2.0l-0.44,-0.33l-0.75,-0.01l-0.73,0.78l-1.0,2.86l-0.46,0.02l-2.33,-1.93l-0.56,0.05l-2.44,2.58l-1.38,-0.76l-0.33,-1.06l-3.59,-2.42l-1.03,0.05l-0.77,1.27l-1.25,0.65l-1.96,-0.76l-1.16,0.01l-0.9,0.54l-0.56,1.2l0.45,2.09l-0.36,0.52l-2.1,-0.02l-1.75,-0.99l-1.6,0.58l-0.82,1.71l-1.03,0.45l-0.44,0.62l0.35,1.96l-0.46,1.19l-1.01,-0.26l-2.5,0.6l-2.4,-0.14l-4.31,-4.09l-1.41,-2.09l-2.05,-1.74l-3.97,-2.45l-1.24,-1.17l-1.31,-0.29l-2.99,0.96l-1.2,-1.04l-2.13,-0.49l-0.67,-4.42l-0.55,-1.33l0.25,-2.5l1.5,-1.6l0.62,-3.16l2.03,0.34l0.12,1.82l0.77,0.74l3.65,-1.71l-0.16,-2.66l-0.89,-1.78l-0.02,-2.71l-0.53,-2.57l0.64,-0.5l1.7,0.29l2.91,-2.72l1.47,-0.45l1.29,-2.57l0.04,-1.12l-0.86,-0.9l-1.45,-2.69l1.18,-2.87l-1.44,-3.4l-0.23,-2.49l0.45,-1.28l-0.07,-0.76ZM684.09,74.66l0.18,-0.82l-1.1,-1.17l-0.17,-0.93l-0.62,-0.32l-0.62,0.17l-0.91,1.52l0.09,0.98l2.06,0.8l1.1,-0.24ZM679.54,76.52l0.69,-0.57l0.38,-0.89l0.03,-0.73l-0.35,-0.51l-0.52,-0.03l-1.38,1.16l0.21,1.41l0.95,0.16Z",
            "name": "Zaragoza"
        },
        "ES-MA": {
            "path": "M516.44,391.37l-0.6,-1.23l-0.49,-0.2l-1.24,0.44l-0.52,-3.03l-0.84,-2.0l-1.48,-1.67l-1.56,-2.74l-0.8,-0.31l-1.54,0.11l-2.9,1.4l-0.65,-0.01l-0.93,-0.58l-0.05,-0.74l3.59,-1.24l1.11,-0.73l1.46,-2.16l2.44,-0.83l1.12,-0.71l0.76,-0.97l0.78,-3.18l0.76,-1.01l0.21,-1.21l-1.73,-2.79l1.29,-1.67l1.3,-0.34l2.89,2.23l1.47,-0.1l1.32,-0.77l1.03,-1.12l0.8,-1.6l0.12,-1.75l-0.56,-1.64l-1.54,-2.04l8.79,-5.4l0.58,-1.06l-0.15,-0.53l-1.92,-1.31l0.88,-0.22l2.15,0.64l0.98,-1.27l1.65,1.58l1.25,-0.13l2.31,-1.75l0.23,-1.17l-0.61,-1.51l0.34,-0.4l3.8,0.21l0.88,1.69l2.28,0.52l2.64,-1.42l1.43,-1.89l1.91,0.0l0.4,2.77l1.91,0.9l1.5,3.95l0.27,3.19l0.91,1.83l4.6,3.84l10.91,4.77l1.92,-0.08l2.08,2.36l-0.5,1.65l0.1,0.97l-2.05,-0.62l-4.82,1.23l-3.92,-1.03l-1.07,0.29l-1.13,0.83l-4.43,0.64l-7.09,-0.57l-0.83,0.21l-0.75,0.64l-1.88,2.96l-1.68,3.34l-2.33,0.32l-1.34,2.27l-1.29,0.85l-2.75,0.89l-7.28,-0.65l-3.68,2.45l-2.63,0.23l-1.99,1.19l-2.56,0.56l-1.26,1.19l-1.1,1.95l-0.72,2.3Z",
            "name": "M\u00e1laga"
        },
        "ES-AL": {
            "path": "M647.12,313.81l-0.61,1.02l-0.44,2.69l0.29,2.71l-0.37,1.58l0.2,2.76l7.04,10.61l0.99,0.5l0.63,-0.64l2.21,0.56l3.38,2.69l-0.18,0.42l-0.84,0.07l-0.37,0.45l-0.79,1.96l-1.15,1.66l-3.44,3.91l-1.71,6.57l-2.05,4.54l0.18,2.28l-1.37,0.27l-2.04,1.58l-0.64,0.85l-0.39,1.97l-1.67,1.68l-0.58,1.73l-1.03,0.42l-0.58,1.07l-1.21,0.67l-1.95,-0.32l-3.17,-3.63l-1.49,-0.93l-1.82,-0.47l-2.9,1.01l-2.01,-0.66l-3.3,0.61l-0.81,0.57l-1.59,4.08l-1.55,1.56l-0.9,0.39l-1.2,0.17l-0.92,-0.22l-0.62,0.26l-2.45,-1.58l-0.64,0.09l-0.57,0.53l-1.33,-1.6l-1.31,-0.87l-0.93,-0.05l-2.08,0.69l-3.45,-0.61l-1.83,0.14l-0.34,-1.46l4.21,-2.68l0.16,-0.46l-0.65,-1.86l-1.03,-0.98l2.87,-3.06l0.34,-0.94l-0.71,-2.72l-0.12,-2.15l0.34,-0.33l1.83,-0.31l1.11,-2.92l1.72,-1.12l1.17,-4.37l1.58,0.02l1.86,1.79l1.96,0.18l1.95,0.85l0.56,-0.39l-0.21,-3.58l0.51,-1.34l0.37,-3.43l5.94,-5.22l5.19,-1.63l0.28,-0.44l-0.64,-4.16l2.03,-0.42l0.32,-0.41l-0.22,-3.74l1.54,-3.3l-0.31,-2.98l0.34,-2.49l2.5,-1.83l1.53,0.89l1.77,-0.11l1.94,0.89l3.68,0.54Z",
            "name": "Almer\u00eda"
        },
        "ES-CE": {
            "path": "M511.17,411.06l0.66,0.05l1.58,1.01l1.17,0.05l-1.82,1.64l-0.95,-1.16l-0.64,-1.59Z",
            "name": "Ceuta"
        },
        "ES-PM": {
            "path": "M890.43,200.41l1.16,1.22l0.12,1.14l0.7,0.18l0.86,-0.92l2.04,1.91l1.1,0.41l0.33,0.46l0.27,1.15l-0.48,0.2l-0.03,0.73l1.58,0.37l0.77,2.18l-0.63,0.32l-0.1,3.09l-1.62,0.21l-2.71,-1.33l-6.46,-4.28l-1.42,-0.58l-1.83,-0.06l-2.77,0.56l-1.09,-0.39l0.58,-2.54l-1.2,-0.64l-0.56,-0.71l0.57,-1.32l2.52,-0.56l1.03,0.38l5.48,-0.33l1.77,-0.86ZM824.07,228.14l-0.7,-0.5l-1.22,0.52l-0.29,-0.82l-0.74,-0.68l0.06,-2.28l4.3,-2.39l2.0,-2.13l2.09,-0.68l1.96,-1.94l0.51,-0.96l0.85,-0.1l2.26,-2.44l1.53,-0.73l2.52,-2.03l1.25,-0.05l3.58,-2.18l5.63,-1.11l3.92,-1.61l0.35,0.45l-1.94,0.83l-0.88,0.88l-0.69,-0.16l-0.4,0.38l-0.09,1.68l0.33,0.41l1.6,0.24l2.15,-0.61l-0.24,1.07l-1.98,0.69l-0.51,0.55l-0.13,1.29l0.59,1.47l1.13,1.08l2.56,1.05l2.98,-0.02l2.37,-1.75l3.17,1.6l1.0,0.13l0.17,1.35l-0.48,0.74l0.19,0.78l-0.48,1.28l-0.36,0.6l-1.24,0.61l-0.52,0.79l0.1,1.57l-3.2,3.47l-1.26,2.49l-0.33,2.4l-0.61,0.17l-0.62,2.05l-1.16,1.25l-3.67,2.29l-2.35,2.24l-1.06,-1.58l-1.11,-0.69l-0.51,-1.62l-1.4,-0.88l-1.99,0.21l-3.38,-0.25l-1.4,-0.57l-0.86,-1.09l-0.4,-2.72l-0.55,-0.52l0.66,-1.73l-0.45,-1.41l-2.64,-2.02l-1.38,-0.35l-3.52,1.75l-0.72,0.83l-0.4,1.31l-0.83,0.87l-0.69,0.09l-0.74,-1.39l0.33,-0.84l-1.07,-1.1l-0.61,0.04l-0.3,0.39ZM845.43,248.43l-0.62,0.91l-0.77,-0.07l-0.5,-1.26l0.83,-0.79l1.08,-0.47l-0.02,1.69ZM779.44,262.64l-1.44,-0.84l-0.92,0.22l-0.32,0.41l-1.18,-0.97l-0.14,-0.71l0.59,-1.96l-0.25,-0.62l0.6,-0.29l0.35,0.21l1.84,-0.29l0.4,-0.46l-0.34,-2.13l0.02,-1.02l0.31,-0.34l2.0,-1.66l0.72,0.2l0.56,-0.44l0.69,0.11l1.78,-1.18l1.74,-0.14l1.06,-0.71l2.67,0.96l0.71,2.89l-0.98,0.64l-0.62,1.67l-1.45,1.0l-1.22,1.88l-1.75,1.19l-0.86,-0.3l-1.09,1.05l-0.66,2.95l-0.64,0.01l-0.42,-0.94l-0.69,-0.54l-1.08,0.14ZM782.35,270.5l0.26,-0.33l0.82,-0.09l0.59,-0.8l1.78,2.49l1.61,0.86l1.64,-0.56l0.38,0.49l-0.02,0.66l-1.81,0.11l-2.55,-1.59l-0.43,0.03l-2.31,2.06l-0.03,-1.57l0.41,-1.32l-0.34,-0.45Z",
            "name": "Baleares"
        },
        "ES-VI": {
            "path": "M597.76,52.47l-1.98,-2.35l1.99,-3.0l2.0,0.04l0.97,1.45l2.44,0.62l2.31,-0.27l2.27,-1.47l-0.17,-1.34l-1.32,-0.58l-0.83,-0.78l1.42,-0.26l0.61,-1.29l-0.48,-1.0l-0.94,-0.47l-0.31,-0.98l-0.8,-0.23l-0.74,0.36l-1.03,1.71l-2.7,-0.54l0.58,-1.21l0.27,-2.92l-0.28,-0.62l-0.89,-0.56l0.39,-1.37l0.38,-0.3l1.6,0.97l2.43,-0.52l0.75,-0.56l0.41,-1.73l0.54,-0.43l0.83,0.49l1.27,2.34l-0.79,2.9l0.42,0.77l2.12,1.99l1.89,0.12l2.81,1.11l1.81,-0.32l1.7,0.67l1.19,-0.34l1.23,0.22l0.51,-0.42l0.12,-0.8l-1.07,-1.86l0.95,-0.45l0.99,0.32l1.78,-0.3l0.42,2.35l-2.14,1.22l-0.63,1.67l0.18,0.44l1.96,1.13l0.92,-0.45l1.28,0.57l5.84,0.57l1.69,1.07l1.14,1.54l1.05,0.12l0.47,1.93l-0.1,0.86l-1.28,2.64l-0.2,2.16l-1.26,0.64l-0.4,0.69l0.34,2.59l0.76,0.88l-1.54,1.03l-0.84,0.07l-0.71,-0.93l-1.28,-0.25l-3.61,3.07l0.25,1.36l1.71,0.9l0.64,-0.18l0.83,-1.02l0.27,0.2l0.23,1.23l-0.41,3.22l-1.74,-0.47l-1.03,-0.6l-0.34,-0.83l-0.51,-0.22l-0.85,0.5l-0.47,0.87l-1.49,0.38l-0.83,-0.67l-1.24,0.33l-1.96,-1.38l-0.24,-2.73l-2.51,-1.7l-1.29,0.63l-0.42,1.11l-1.08,0.21l0.44,-1.27l-0.14,-0.5l-0.79,-0.11l-0.31,-1.97l-3.1,-2.77l-1.02,-0.48l-0.95,-1.2l-3.92,-2.69l-2.53,0.8l0.07,-0.7l-0.86,-1.18l1.56,-3.04l0.06,-0.82l-0.58,-0.78l-0.91,0.2l-0.93,1.13l-1.55,0.29l-0.79,1.52ZM621.09,55.6l-3.53,-1.14l-3.76,0.07l-0.88,0.53l-1.37,1.91l-0.15,0.78l0.28,0.58l2.09,1.86l2.54,1.19l4.89,1.51l3.03,0.07l0.88,0.54l1.06,-0.37l0.23,-1.28l-0.53,-1.5l-0.64,-0.12l-1.14,0.8l-1.13,-1.36l1.13,-0.85l0.58,-1.37l-0.01,-0.75l-1.04,-0.35l-1.06,-0.87l-1.46,0.11Z",
            "name": "\u00c1lava"
        },
        "ES-S": {
            "path": "M546.44,22.33l0.6,0.59l0.56,-0.0l0.75,-0.74l0.92,-0.17l2.15,1.04l0.87,-0.87l1.83,0.2l4.97,-0.53l1.25,-0.91l2.43,-0.76l2.87,-0.2l0.45,-0.7l1.01,0.69l0.55,-0.08l0.9,-0.56l-0.51,-0.63l1.16,-0.85l2.18,-0.12l1.1,-0.69l1.05,-0.22l1.48,0.51l-1.87,1.01l-0.61,0.67l0.42,1.41l0.38,0.38l0.53,0.01l1.16,-0.47l0.79,-1.0l0.49,0.57l0.81,-0.01l0.25,-0.54l-0.3,-0.97l0.76,-0.13l0.23,-0.66l1.22,-0.13l1.23,-0.87l2.96,-0.94l0.52,0.04l-0.04,0.55l0.38,0.43l0.57,0.03l1.29,1.04l2.82,0.57l0.09,0.5l-1.19,-0.42l-0.46,0.18l-1.31,1.56l1.8,1.28l0.56,-0.14l0.24,-0.44l0.92,0.33l1.25,-0.35l7.12,1.88l1.18,1.18l0.96,0.37l0.04,1.61l-0.3,0.67l-1.52,0.75l-1.25,-0.36l-3.64,-0.01l-4.37,3.14l-0.72,1.27l0.15,2.11l0.64,2.22l-3.24,-0.19l-3.38,-0.99l-1.3,-0.82l-0.64,0.02l-0.82,0.5l-2.34,2.79l-1.75,1.3l-2.08,0.11l-0.83,0.39l-0.29,1.61l-0.38,0.41l-1.6,0.76l-2.38,1.96l-1.3,3.33l-0.07,0.94l0.57,1.05l1.36,0.51l1.99,-0.93l0.88,-1.3l0.75,0.11l0.35,0.91l-1.03,0.66l-1.04,0.07l-0.8,1.5l0.35,1.42l0.64,0.46l0.9,-0.28l0.65,-0.93l0.64,-0.05l0.56,2.97l-0.33,0.3l-2.06,0.16l-1.52,1.35l-1.66,0.52l-0.98,-0.28l-0.05,-2.57l-0.66,-0.43l-0.84,0.6l-1.05,2.34l-1.06,0.26l-0.94,-1.1l-1.96,-0.44l-0.92,-0.86l1.93,-1.03l0.21,-0.7l-0.44,-0.9l-0.76,-0.3l-1.09,0.34l-0.93,0.72l-0.36,-0.21l-0.87,-5.6l-4.71,-1.95l-2.12,-2.89l-1.52,-0.72l-0.79,-0.02l-3.7,1.48l-1.92,-0.09l-4.62,0.52l-0.43,-1.52l-1.3,-1.72l-2.27,-1.57l-0.29,-1.33l0.14,-2.47l2.06,-0.38l1.15,0.14l0.56,-0.35l0.51,-1.3l0.27,-2.43l0.71,-0.31l2.1,-0.06l1.86,-1.38l0.97,0.18l0.66,0.96l0.66,-0.0l0.52,-0.4l0.52,-1.64l-0.72,-2.25l0.93,-2.26ZM594.81,31.26l0.0,-1.32l0.64,1.03l-0.65,0.29Z",
            "name": "Cantabria"
        },
        "ES-TE": {
            "path": "M658.16,188.26l0.19,-1.15l-0.29,-0.99l-1.69,-2.29l-1.52,-1.13l0.75,-0.62l1.59,-2.37l1.73,-1.46l0.09,-2.7l0.74,-2.07l1.25,0.18l1.68,0.77l1.73,-0.85l0.45,-0.68l-0.07,-1.75l0.67,-2.02l-0.1,-1.74l-0.68,-1.61l0.72,-2.57l-0.1,-1.89l-0.22,-0.61l-1.44,-1.15l-1.05,-1.6l-0.25,-3.39l1.97,0.12l1.29,-0.5l1.13,-0.1l0.94,0.31l0.62,-0.24l0.7,-1.24l-0.35,-2.26l1.35,-0.86l1.03,-1.85l1.01,-0.0l1.36,0.87l2.36,0.03l0.72,-0.44l0.32,-0.98l-0.49,-1.73l0.61,-1.13l1.01,-0.12l2.33,0.79l1.61,-0.79l0.72,-1.24l0.38,0.05l3.22,2.21l0.55,1.26l1.7,0.82l0.92,-0.32l1.93,-2.24l2.23,1.81l1.13,-0.04l0.62,-0.72l1.04,-2.88l2.2,2.46l0.63,0.0l3.36,-4.2l0.04,-0.44l-1.15,-2.18l0.57,-0.67l-0.16,-3.6l0.42,0.1l2.72,4.57l1.03,0.43l0.56,-0.71l0.06,-0.99l-2.17,-4.5l0.28,-0.46l2.08,-0.07l0.71,1.61l1.16,0.37l1.49,2.32l2.74,1.64l1.11,-0.54l1.68,1.96l9.24,4.28l0.66,0.56l1.7,3.71l1.15,0.23l1.13,-1.41l1.69,0.03l1.96,0.6l1.75,-0.25l0.47,1.31l1.77,1.22l0.55,1.73l-0.15,1.06l-0.98,1.94l-0.46,1.87l0.87,3.52l-1.62,2.4l-2.42,1.53l0.0,0.7l-2.82,0.46l-2.02,1.19l-0.2,-0.98l-0.53,-0.57l-3.66,-0.24l-3.08,-2.31l-1.46,-0.28l-0.73,0.33l-1.19,1.69l-0.36,2.55l-2.64,1.57l-1.63,-0.56l-1.47,0.85l-0.11,2.13l0.29,0.68l1.79,0.74l1.24,-0.18l-0.13,4.67l1.01,1.78l-1.92,0.85l-0.78,1.1l0.26,0.98l1.61,1.64l0.28,0.92l-1.71,1.24l-1.04,1.48l-1.28,1.09l-0.16,1.83l-0.42,0.48l-1.37,0.66l-2.03,0.36l-1.53,-0.52l-0.91,0.42l-0.19,2.06l-0.7,2.37l-1.91,2.46l0.17,1.65l-2.55,1.31l-2.79,0.25l-1.02,2.11l-1.88,0.97l-0.44,0.53l-0.35,1.67l0.27,1.47l1.51,1.93l-1.84,0.95l-1.04,0.14l-0.65,-0.43l-0.37,-2.07l0.27,-1.52l-0.93,-1.34l-3.19,-1.25l-2.27,0.02l-2.89,0.73l-0.38,-0.25l-0.51,-1.51l2.88,-1.42l0.47,-0.85l-0.18,-0.98l-3.01,-2.52l-3.32,-0.67l-0.43,-1.12l-0.95,-0.86l-1.13,-2.19l-0.62,-0.02l-0.64,0.54l-0.37,0.96l0.02,1.33l-1.34,0.42l-2.77,-0.41l0.28,-1.26l-0.38,-1.18l-1.67,0.01l-1.23,-0.38l-1.09,0.22l-4.74,-4.46l-1.14,-0.59l-1.05,0.09Z",
            "name": "Teruel"
        },
        "ES-CC": {
            "path": "M424.93,221.02l8.0,0.38l2.0,-0.59l2.19,-0.13l0.9,0.5l1.25,0.06l6.64,-1.01l0.67,-1.33l-0.12,-1.3l0.8,-1.8l-0.26,-1.53l0.4,-0.68l1.42,-0.73l1.06,-1.63l0.11,-2.93l0.62,-0.75l0.33,-2.35l0.82,-1.94l-3.12,-5.0l-0.98,-0.63l-1.43,-0.26l-0.35,-0.52l-0.55,-2.38l0.91,-2.01l2.33,-1.4l2.41,-0.16l0.93,-0.82l1.62,1.36l2.68,0.09l1.47,-0.71l1.55,0.42l1.29,-0.62l3.41,-0.78l0.94,-1.15l-0.17,-1.46l1.52,-1.4l2.84,-1.19l1.22,-1.15l1.66,-0.45l1.56,-1.9l2.07,-0.72l2.05,-1.24l1.83,0.94l1.1,1.06l0.98,0.36l0.48,0.93l1.39,0.64l-0.89,1.78l-0.11,0.54l0.28,0.35l2.76,1.33l1.46,1.32l2.52,1.16l1.31,-0.24l1.08,-1.91l2.64,-1.04l0.48,0.7l-0.4,1.46l0.44,0.71l1.08,0.19l1.42,-0.47l1.45,0.58l2.29,1.88l1.03,1.37l2.63,1.18l2.44,-0.22l2.53,-2.19l2.35,-0.58l-0.55,1.53l0.09,2.81l1.17,2.37l-0.95,0.52l-0.35,0.78l-0.37,5.16l-0.68,3.94l0.21,2.15l0.54,0.27l2.3,-0.33l1.02,1.07l-0.74,1.64l-0.37,2.89l0.67,1.14l2.38,0.21l1.88,-2.04l1.1,-0.09l0.28,0.88l-0.22,1.37l0.96,1.65l-0.65,3.14l-1.62,2.63l0.06,0.87l1.56,1.36l3.19,3.66l1.61,0.79l3.4,4.12l-1.35,0.77l-2.28,0.34l-1.04,-1.36l-1.1,-0.31l-0.69,0.77l-0.31,2.31l-2.03,1.37l-2.57,-0.01l-2.91,-0.92l-0.98,0.25l-0.62,1.38l-0.27,2.08l0.32,1.7l-1.85,2.77l-1.57,0.54l-2.89,-2.56l-1.18,-0.27l-1.08,0.3l-1.86,1.06l-0.05,0.66l1.24,1.9l-0.42,1.26l-0.72,0.61l-1.38,0.02l-1.51,0.85l-2.9,-2.59l-1.87,-0.5l-0.44,0.2l-0.68,1.24l-1.06,0.75l-2.28,0.88l-0.52,-0.99l-0.67,-0.06l-1.67,2.1l-0.39,0.07l-0.4,-2.94l-0.65,-0.26l-2.73,2.21l-1.84,2.38l-0.95,-1.13l-1.4,-0.09l-0.86,-1.32l-0.85,-0.59l-1.83,-0.13l-0.7,-1.22l-0.11,-2.75l-0.59,-0.34l-1.98,1.06l-6.16,-0.57l-1.09,1.03l-0.43,-0.23l-0.57,-1.14l-3.07,-0.93l-1.13,1.06l-3.15,-0.61l-1.01,-2.1l1.4,-1.82l0.49,-1.61l-0.33,-1.37l-0.87,-0.8l-0.83,-1.88l-0.85,-0.66l-2.89,0.23l-6.35,-2.73l-0.5,0.16l-0.71,1.15l0.14,0.56l1.23,0.69l0.39,0.67l-0.82,3.13l-0.49,-0.07l0.05,-2.99l-0.32,-0.43l-1.98,0.03l-2.05,1.28l-0.33,1.1l0.59,1.14l-1.72,2.35l-1.48,-0.2l-2.86,-3.4l-0.19,-2.07l0.73,-2.71l0.0,-1.11l-0.35,-0.72l-2.66,-1.0l-0.48,-0.4l-0.75,-1.59l-2.04,-1.37l-1.87,-2.22l-1.39,-3.81Z",
            "name": "C\u00e1ceres"
        },
        "ES-P": {
            "path": "M550.24,42.12l1.18,2.16l0.66,0.51l4.55,1.84l0.78,5.47l1.08,0.58l1.27,-0.83l0.91,-0.14l-0.02,0.67l-1.85,0.79l-0.03,0.89l1.31,1.26l1.86,0.38l0.74,0.92l-0.6,1.02l-1.21,-0.79l-0.89,0.19l-1.16,0.77l-1.27,1.66l-0.82,0.51l-1.18,-0.46l-0.64,1.06l0.29,3.78l-0.64,0.51l0.22,1.67l-0.55,0.25l-0.15,0.62l1.59,1.7l0.65,2.29l0.07,1.49l-1.88,-0.18l-0.86,0.28l-0.68,1.1l-0.03,1.93l0.63,1.51l1.58,0.02l1.61,8.02l-0.11,0.72l1.84,1.99l-0.53,2.28l0.35,0.49l3.1,0.32l0.59,3.29l1.15,1.43l3.82,-0.54l0.33,0.31l-2.22,3.07l0.1,1.34l0.39,0.33l0.94,-0.03l3.51,-1.85l0.33,0.23l0.09,0.87l-0.64,0.82l-2.61,0.82l-0.77,2.27l-2.06,0.8l-1.34,-0.04l-0.41,0.39l0.05,2.4l1.96,2.08l-0.06,0.56l-1.72,-0.24l-0.85,-1.59l-0.51,-0.18l-1.05,0.44l-4.26,-0.14l-2.16,1.57l-3.39,-0.49l-1.65,0.9l-0.75,-0.12l-1.01,-0.58l0.06,-2.89l-0.63,-0.33l-1.09,0.78l-1.75,0.33l-2.19,-2.31l-0.59,-1.56l-1.08,-0.51l-1.4,0.56l-2.57,3.38l-0.77,0.27l-1.81,-4.0l-1.27,-1.83l-0.47,-0.15l-2.09,0.79l-0.7,-0.8l-0.54,-0.06l-1.11,0.83l-0.4,-0.74l1.52,-3.45l0.85,-0.77l-0.07,-1.87l0.71,-0.99l0.25,-1.15l-0.21,-3.23l-0.38,-0.37l-3.47,-0.18l0.37,-1.31l-0.18,-2.41l0.61,-2.87l1.63,-0.32l0.32,-0.32l0.5,-2.73l-0.51,-0.45l-0.88,0.28l0.15,-1.05l2.16,-0.34l0.34,-0.42l0.93,-8.4l-1.0,-0.68l0.71,-3.85l-0.1,-2.61l0.68,-1.95l-0.33,-0.64l-1.69,-1.35l1.09,-1.98l0.15,-4.11l1.39,-0.36l0.65,-2.12l1.45,-1.46l0.51,-2.64l0.37,-0.67l1.04,-0.77l2.7,-0.73l5.45,-0.24l3.66,-1.48l0.88,0.13l1.18,0.7ZM564.08,90.16l-1.06,-0.12l0.05,-1.07l0.8,0.25l0.21,0.93Z",
            "name": "Palencia"
        },
        "ES-PO": {
            "path": "M369.46,72.42l1.89,-0.91l0.43,0.33l-0.35,0.39l-0.0,0.67l0.35,0.23l1.3,0.39l0.87,-0.44l0.07,-1.72l0.48,-0.71l-0.48,-1.84l0.07,-1.54l1.88,-1.89l2.27,-5.37l2.58,-0.94l1.61,0.37l1.22,-1.52l2.81,-0.51l1.23,0.68l1.36,-0.13l1.05,-0.78l1.02,-1.53l1.26,0.41l0.91,-0.38l0.41,-1.09l-0.1,-2.1l0.75,1.13l0.62,0.27l1.6,-0.86l1.76,0.28l1.38,-1.19l4.89,0.98l2.1,-0.75l0.87,0.22l-0.58,2.19l0.2,1.12l1.93,2.32l2.39,1.29l-0.0,0.52l-0.75,1.11l-0.23,2.33l-1.42,2.89l-0.86,0.42l-1.41,-0.07l-1.03,1.48l-1.88,-0.5l-2.98,0.18l-0.95,-1.12l-0.6,-0.01l-1.54,1.66l-1.45,0.53l-2.03,2.1l-1.32,-0.1l-0.42,0.46l-0.06,3.29l0.95,2.37l0.0,1.44l1.33,2.17l0.83,0.52l-0.38,2.54l1.72,2.05l2.44,-0.53l-0.53,3.13l-2.57,1.79l-1.74,0.42l-1.97,1.48l-6.11,0.99l-2.88,1.54l-2.32,0.26l-0.78,0.62l-1.04,2.18l-3.13,1.62l-1.11,1.76l-2.13,1.18l-1.16,1.24l-0.77,-11.73l2.72,-0.61l0.32,-0.86l-0.94,-0.9l1.06,-0.66l0.36,-1.12l1.32,-1.33l5.88,-4.32l0.25,-2.42l-0.32,-0.7l-0.72,0.06l-0.85,0.81l-0.91,1.82l-3.85,1.58l-0.48,0.48l-2.54,-0.04l0.38,-1.12l0.8,0.15l0.23,-0.41l-0.0,-2.43l1.57,0.27l0.52,-0.2l1.86,-2.54l2.57,-2.06l0.28,-1.37l-1.86,-0.03l-2.66,1.81l-1.97,0.32l-1.17,-0.15l-0.79,-0.49l-0.93,-2.28l-1.83,-0.54Z",
            "name": "Pontevedra"
        },
        "ES-GC": {
            "path": "M172.03,744.47l0.78,-0.54l0.53,-0.96l0.42,-3.54l1.94,-2.8l1.08,-0.64l2.4,-0.47l2.19,-1.67l3.94,-0.5l0.69,-0.77l1.59,-3.91l0.4,-0.09l1.5,1.25l-0.68,1.92l-0.87,0.72l-0.15,0.86l0.41,2.0l-0.54,1.28l0.01,1.46l-1.64,1.92l-1.22,0.67l-1.83,0.46l-1.19,1.04l-3.73,0.7l-1.15,0.92l-1.37,2.25l-1.22,-0.69l-1.88,-0.03l-0.39,-0.86ZM185.54,728.48l0.99,-1.96l0.36,0.09l0.2,0.48l-0.44,0.84l-1.12,0.55ZM146.97,781.34l0.21,-0.82l2.17,0.13l3.84,-1.56l2.9,-1.91l1.29,-1.24l1.14,-1.66l0.47,-3.14l1.21,-2.18l1.16,-3.62l1.72,-2.4l0.92,-2.27l1.61,-2.44l1.41,-5.77l2.34,-1.31l1.33,-0.18l1.17,0.38l1.03,1.16l0.53,3.39l-0.3,3.81l-1.12,3.36l0.0,2.06l0.53,1.18l-1.0,1.22l-0.24,1.28l-2.27,4.65l-1.17,0.65l-6.05,1.25l-1.39,0.94l-1.61,0.44l-0.92,0.55l-3.51,4.14l-1.52,0.71l-0.86,-0.0l-2.38,-0.92l-2.64,0.14ZM98.99,777.6l3.8,0.93l2.98,0.0l2.46,0.59l1.16,-0.31l0.25,-0.39l0.65,4.57l0.45,0.77l0.96,0.7l-0.5,2.24l0.48,0.85l-1.05,1.66l0.55,2.03l-1.11,0.66l-1.74,2.02l-3.33,1.12l-1.45,1.36l-1.0,-0.64l-3.1,-0.57l-2.08,-1.78l-0.59,-0.84l-1.1,-0.69l-1.46,-3.51l0.15,-3.15l2.57,-1.73l1.72,-2.17l-0.12,-1.14l0.58,-1.3l-0.15,-1.26ZM109.66,778.34l-0.11,-1.12l0.61,-0.11l0.11,0.33l-0.61,0.91Z",
            "name": "Las Palmas"
        },
        "ES-GI": {
            "path": "M806.14,79.44l0.8,0.15l1.87,-0.35l2.12,-1.78l0.71,-1.4l0.43,-0.21l1.94,0.21l3.52,-0.88l3.84,2.08l1.76,0.33l0.89,1.57l0.84,0.69l2.67,0.88l0.54,-0.38l0.52,-1.05l3.26,0.77l1.17,-0.06l0.36,-0.66l-0.81,-1.51l1.78,-1.53l1.29,-0.36l2.48,0.1l2.55,-1.98l1.94,-0.15l1.32,-0.97l1.08,0.42l0.91,-0.4l1.49,0.1l0.96,1.46l1.47,0.67l3.45,-0.13l-0.35,1.29l0.16,1.89l0.66,1.09l0.67,0.54l1.87,-0.1l0.73,0.75l0.83,-0.38l0.84,0.45l-1.09,2.95l-0.75,0.88l-0.55,-0.18l-1.36,0.3l-1.72,-1.05l-0.74,0.15l-1.07,1.04l-0.56,1.42l-0.09,3.23l0.25,1.08l0.82,0.94l1.31,0.8l1.52,2.16l-0.72,1.9l0.51,2.41l1.05,1.2l-0.11,0.85l-1.45,3.02l-1.64,2.1l-1.38,-0.02l-1.53,1.12l-0.49,1.54l-4.63,3.42l-0.72,1.13l-3.66,0.96l-1.17,1.31l-0.53,0.01l-0.57,0.68l-0.33,-0.96l0.56,-1.09l-0.36,-1.32l-0.93,-0.86l-1.86,-0.7l-1.57,0.07l-1.3,0.76l-3.3,0.69l-4.28,-4.33l-1.95,-0.2l-1.15,0.31l-1.11,-1.24l-0.43,-1.02l-0.09,-0.83l0.5,-0.91l1.91,0.87l1.65,-0.91l0.97,-0.12l0.78,-1.23l0.02,-1.0l-0.86,-1.14l1.95,-2.21l0.57,-2.02l-0.35,-1.28l-0.69,-1.03l-1.1,-0.69l-1.45,0.01l-1.96,-2.43l-2.47,0.29l-1.29,-1.65l-1.95,0.07l-1.18,0.76l-1.71,0.02l-1.18,0.41l-1.17,-0.92l-1.16,0.04l-0.42,-2.94l-1.06,-1.58l0.18,-1.11l0.7,-1.19l-0.27,-1.44l-0.75,-0.49l-2.15,0.21l-1.3,-0.98l-1.12,-0.29l-2.67,0.57l-0.13,-2.05l-1.0,-1.74l-0.2,-1.98l-2.71,-1.13l-0.78,-1.14l-0.21,-1.02l2.66,0.42l2.96,1.83l2.26,0.52l1.36,3.62l1.42,1.17ZM805.91,73.69l-1.09,-0.35l0.29,-1.14l0.21,0.27l0.59,1.23Z",
            "name": "Gerona"
        },
        "ES-TO": {
            "path": "M511.41,209.58l0.96,-10.43l0.19,-0.43l0.97,-0.45l3.73,0.47l1.69,0.9l1.05,0.02l1.19,-0.39l2.83,-2.53l1.57,-0.53l0.53,1.81l0.8,0.32l1.17,-0.22l1.87,-1.26l0.79,-1.8l3.06,-2.3l0.55,-0.81l0.35,-1.54l3.63,-0.53l0.48,2.79l0.7,0.79l1.49,0.54l2.64,-0.73l1.63,0.68l1.03,-0.3l0.63,-0.71l2.27,-1.22l2.76,-3.58l0.59,2.88l2.25,1.76l1.13,-0.71l1.42,-1.85l2.08,-0.76l1.7,1.66l1.63,0.33l1.39,-0.66l1.08,0.52l1.19,1.37l5.82,2.04l1.14,0.99l1.22,-0.08l1.43,1.43l3.47,0.33l2.17,1.2l0.02,0.94l-0.92,1.93l-1.34,0.72l-1.84,1.97l-1.57,0.9l-0.77,0.86l-2.94,0.84l-0.98,0.66l0.17,0.97l1.96,1.36l1.29,-0.04l2.59,-2.29l3.86,-1.52l0.28,-1.23l4.16,-1.62l0.97,-1.29l3.67,0.15l1.34,-0.55l1.37,0.58l2.21,-0.47l3.81,-1.75l0.48,0.28l-0.13,1.51l1.1,3.3l0.4,0.27l1.42,-0.07l-0.01,2.3l-1.1,2.81l0.22,0.52l1.07,0.43l1.35,1.51l0.73,2.52l1.04,1.28l0.69,2.29l3.5,3.97l-0.63,2.0l-0.23,6.57l-1.54,1.14l-1.79,-0.58l-1.7,0.32l-3.15,-2.31l-1.65,0.39l-0.32,0.72l-3.99,0.16l-0.82,0.73l-0.76,2.5l-2.79,0.23l-2.86,1.7l-0.42,1.62l-2.87,2.05l-1.23,-0.39l-3.69,0.66l-1.8,1.3l-1.96,-1.19l-1.03,0.05l-1.82,1.65l-1.03,-0.09l-1.09,-0.93l-2.34,-0.85l-0.19,-2.53l-0.33,-0.37l-4.05,-0.68l-1.42,1.16l-1.01,-0.69l0.89,-4.35l1.51,0.06l0.83,-1.22l0.04,-0.83l-0.7,-1.25l0.07,-0.37l1.26,-0.8l0.24,-0.6l-0.12,-1.68l-0.46,-0.31l-3.18,0.58l-1.25,-0.62l-0.56,0.23l-1.31,3.92l-1.71,0.91l-7.24,-1.57l-0.72,0.2l-0.59,0.87l-0.6,0.1l-0.7,-0.66l-0.51,-2.28l-0.4,-0.31l-1.05,0.02l-0.98,0.71l-0.54,2.04l-1.25,0.79l-0.73,1.35l-2.69,0.21l-2.24,1.51l-0.22,-0.35l0.9,-2.29l-0.52,-1.38l-0.99,-1.05l-3.9,-1.89l-0.59,0.4l-1.03,1.86l-1.66,5.88l-3.35,-4.08l-1.56,-0.74l-3.16,-3.63l-1.45,-1.2l1.58,-2.85l0.7,-3.34l-0.11,-0.71l-0.86,-1.19l0.22,-1.27l-0.39,-1.25l-0.64,-0.43l-1.23,0.12l-1.2,0.87l-0.94,1.27l-1.74,-0.24l0.18,-3.09l0.74,-1.44l-0.04,-0.69l-0.72,-1.0l-0.83,-0.54l-2.4,0.19Z",
            "name": "Toledo"
        },
        "ES-MU": {
            "path": "M654.08,334.76l-0.74,-0.61l-6.43,-9.94l-0.12,-2.38l0.37,-1.64l-0.3,-2.59l0.43,-2.59l0.64,-1.06l-0.12,-0.61l-0.49,-0.35l-3.7,-0.51l-1.93,-0.89l-1.88,0.09l-2.26,-1.42l-2.55,-3.75l-1.49,-1.17l0.47,-1.51l2.9,-3.69l1.53,-3.02l1.52,-1.31l1.81,-0.65l3.26,-3.13l0.49,-0.03l1.35,1.01l2.82,-0.61l1.67,-0.8l3.62,-2.44l0.31,-0.64l1.35,-0.65l1.02,0.42l1.04,0.01l0.28,1.88l0.44,0.56l1.18,0.59l1.03,0.05l2.51,-0.83l2.9,-2.39l0.69,-1.0l-0.18,-4.98l-0.65,-2.55l0.59,-1.22l1.27,-1.43l0.19,-2.01l0.62,-1.34l2.2,-2.19l0.77,0.74l0.67,0.06l2.43,-1.33l1.74,-1.54l2.23,-0.58l1.66,0.51l0.34,0.25l0.46,1.51l3.24,2.65l0.63,3.1l-0.53,4.91l-2.2,2.39l-0.42,1.58l0.33,3.5l3.35,1.39l0.93,2.55l-0.65,3.67l-1.7,3.1l-0.2,1.05l0.29,1.98l4.17,7.12l1.41,1.73l2.1,2.11l2.06,1.2l0.91,0.05l0.1,1.09l-0.52,-0.65l-0.69,0.11l-0.94,2.57l-1.44,0.77l-0.37,0.92l0.14,0.95l1.88,3.15l2.38,1.36l0.8,0.1l0.54,-0.46l0.43,0.5l-0.09,0.33l-1.01,0.85l-0.82,-0.19l-3.16,1.35l-1.99,0.12l-1.44,0.83l-1.77,-0.9l-1.42,-0.29l-3.46,0.05l-1.31,0.83l-0.23,0.75l0.21,0.67l-1.42,-0.34l-0.68,-1.07l-2.52,-0.76l-1.15,1.06l-2.38,-0.16l-1.86,1.06l-1.81,1.77l-2.32,1.25l-0.83,2.57l-0.87,-0.15l-1.14,0.91l-3.68,1.57l-3.51,-2.77l-2.47,-0.64l-0.86,0.54Z",
            "name": "Murcia"
        },
        "ES-GR": {
            "path": "M632.95,305.94l1.44,1.12l1.42,2.41l1.64,1.68l-2.03,1.42l-0.64,0.97l-0.22,2.45l0.32,2.78l-1.53,3.24l0.18,3.64l-2.06,0.43l-0.31,0.45l0.65,4.2l-5.08,1.63l-6.08,5.35l-0.4,1.01l-0.15,2.8l-0.51,1.38l0.17,3.09l-1.54,-0.65l-1.78,-0.14l-1.94,-1.82l-1.35,-0.23l-1.07,0.47l-1.23,4.44l-1.72,1.11l-0.91,2.71l-1.54,0.17l-0.91,0.84l-0.17,0.92l0.26,1.68l0.71,2.4l-0.19,0.6l-2.76,2.73l-0.3,0.78l1.19,1.48l0.45,1.36l-4.18,2.66l-0.18,0.43l0.38,1.62l-3.54,-0.46l-4.07,0.5l-3.49,2.46l-2.24,-0.03l-1.74,-1.24l-1.3,0.38l-1.19,-0.58l-0.87,-0.88l-2.59,0.16l-0.71,0.54l-1.84,0.21l-1.52,-0.48l-0.15,-1.1l0.45,-2.16l-2.36,-2.67l-2.16,-0.02l-10.77,-4.71l-4.84,-4.32l-0.54,-4.06l-1.22,-3.09l2.38,-1.97l-0.16,-1.79l0.97,-1.68l0.11,-1.64l0.56,-0.92l2.49,0.07l3.02,-2.69l2.81,0.07l2.15,1.19l4.38,-0.4l2.25,-4.14l4.2,-2.52l2.34,-0.64l4.73,-4.17l1.11,0.31l1.72,1.86l1.2,0.34l3.68,-0.76l2.5,-2.75l0.97,-0.27l1.29,0.15l3.79,1.98l1.83,-0.81l2.53,0.56l0.51,-0.31l0.25,-1.39l3.0,-1.91l0.07,-4.12l0.39,-1.22l4.08,-6.9l3.32,-2.92l1.23,0.5l2.9,-2.25l0.01,-2.92l1.78,-0.76l3.16,1.53l4.19,1.27l0.94,-0.05Z",
            "name": "Granada"
        },
        "ES-GU": {
            "path": "M587.07,162.21l0.68,-1.39l0.39,-2.05l0.89,-0.92l-0.12,-1.52l1.57,-4.35l0.11,-1.32l-1.08,-3.55l-2.02,-1.13l-2.25,-2.78l0.8,-0.17l3.03,-2.3l1.23,-0.39l0.43,-1.56l-0.14,-0.76l2.48,0.23l3.56,-0.69l2.06,-1.82l4.55,1.06l4.11,-0.35l1.69,-0.69l0.61,-0.94l0.94,-0.2l0.66,0.5l0.51,1.66l0.88,0.64l1.74,0.47l2.88,-0.71l1.21,1.3l1.76,0.41l1.46,1.09l0.99,-0.09l-0.88,1.11l0.12,0.43l1.07,0.81l-0.24,1.26l1.1,0.48l1.51,-0.49l0.66,1.43l0.99,0.63l0.85,1.8l1.8,0.9l0.73,-0.02l1.62,-0.77l1.44,0.79l1.67,-0.12l2.11,-1.15l2.34,-0.09l1.58,-1.42l2.22,1.94l0.79,0.17l0.5,-0.67l-0.16,-1.4l0.35,-1.89l2.85,-0.91l0.82,0.22l1.16,1.11l3.98,2.45l1.92,1.64l1.37,2.05l4.41,4.18l0.38,0.82l-0.14,2.09l0.25,0.97l0.67,1.21l2.0,2.0l0.1,1.61l-0.73,2.76l0.71,1.75l0.07,1.48l-0.67,2.0l0.1,1.57l-0.56,0.64l-1.02,0.34l-1.27,-0.7l-1.43,-0.28l-0.71,0.39l-0.89,2.43l-0.05,2.51l-1.58,1.22l-1.64,2.43l-0.8,0.7l-1.49,-1.09l-1.4,-5.41l-1.53,-3.14l-0.56,-0.48l-0.81,-0.09l-1.44,0.61l-1.36,-0.57l-2.26,-2.23l-2.6,-1.01l-0.79,0.34l-0.43,1.18l-0.77,0.38l-1.8,-0.42l-1.08,-0.7l-0.81,0.05l-0.48,0.85l-0.06,2.02l-0.79,0.89l-2.46,-1.95l-0.91,0.02l-0.63,0.77l-0.15,1.18l1.06,1.7l0.01,0.55l-1.5,-0.29l-2.13,1.13l-1.19,-1.46l-1.0,0.05l-0.42,0.45l-0.13,0.77l0.77,1.45l-0.24,1.42l1.17,1.25l0.14,0.92l-2.42,-1.42l-2.17,-0.28l-2.28,1.08l-1.62,1.72l-1.6,-1.07l-1.91,0.73l-0.53,4.61l0.57,3.11l-0.57,2.78l-1.9,0.53l-1.07,1.76l-0.47,0.23l-1.19,-0.55l-1.99,-2.01l-0.56,-0.0l-0.98,1.17l0.15,1.35l-1.63,-0.39l-0.4,-3.51l-0.85,-1.84l-1.14,-0.33l-1.99,1.56l0.31,-3.0l0.96,-1.18l0.44,-1.39l0.01,-2.69l-0.7,-1.13l-1.5,-0.9l-0.37,-3.69l-1.87,-1.58l-0.68,-0.08l-0.86,0.45l0.19,-0.6l-0.22,-0.96l-1.29,-1.48l0.3,-2.4l-0.24,-0.45l-1.39,-0.12l-1.61,-2.03l-0.77,0.46l-0.99,0.09l-0.53,-0.5l0.67,-1.58l-0.27,-2.1l-0.63,-1.1l-1.42,-0.55Z",
            "name": "Guadalajara"
        },
        "ES-AB": {
            "path": "M667.48,235.2l0.61,0.55l0.57,1.45l1.59,-0.18l2.98,1.65l5.96,1.72l-0.16,3.9l-0.88,2.45l-1.02,1.25l-1.13,2.64l-0.31,1.33l0.26,1.44l4.25,5.24l1.34,0.92l3.6,-0.21l1.76,-0.7l0.99,0.45l1.42,2.57l-0.21,1.52l0.54,1.77l-0.29,1.27l-1.13,0.79l-0.21,0.99l0.48,1.69l1.48,2.08l-1.81,1.08l-2.42,0.17l-3.08,-2.51l-0.6,-1.68l-2.4,-0.86l-2.63,0.65l-1.85,1.6l-2.1,1.2l-0.98,-0.74l-0.59,-0.04l-1.34,0.97l-1.33,1.62l-0.7,1.55l-0.16,1.9l-1.19,1.28l-0.63,1.23l-0.02,1.05l0.57,2.01l0.2,4.69l-3.26,2.94l-2.85,0.68l-1.17,-0.77l-0.02,-1.48l-0.48,-0.65l-2.23,-0.58l-0.87,0.13l-1.45,0.72l-0.18,0.63l-4.43,2.89l-2.87,0.79l-1.43,-1.0l-1.05,0.09l-3.4,3.23l-2.26,0.92l-1.23,1.2l-1.55,3.04l-2.73,3.4l-0.76,2.06l-4.63,-1.21l-2.81,-1.37l3.82,-5.07l-0.07,-1.85l0.62,-1.19l0.02,-1.6l-1.81,-1.84l-0.44,-4.58l-2.91,-1.07l-0.42,-0.49l-0.1,-3.84l-1.22,-0.57l-1.22,-0.07l-1.97,0.51l-2.71,-1.39l0.19,-0.76l-0.66,-1.21l0.5,-1.42l0.73,-0.79l2.12,-0.71l1.4,-3.77l0.06,-1.2l-1.57,-2.72l-2.07,-0.78l-0.57,-0.89l-0.64,-3.72l-1.48,-1.39l-2.15,0.01l-0.68,-0.25l-0.34,-0.73l2.97,-6.21l-0.1,-1.68l-1.24,-2.47l4.68,-6.73l-0.59,-2.41l2.69,-0.16l1.73,-0.91l2.03,0.64l1.54,-0.04l0.72,-0.57l5.2,5.34l0.66,-0.13l0.91,-2.18l0.6,-0.13l1.16,2.64l0.57,0.19l4.7,-2.73l4.64,0.71l0.44,-0.53l-1.45,-4.17l1.62,0.22l-0.07,0.63l1.95,2.46l3.98,-0.55l1.72,0.94l3.01,0.28l1.55,-2.19l9.3,-5.1l0.9,0.82Z",
            "name": "Albacete"
        },
        "ES-SO": {
            "path": "M622.72,141.08l0.79,-1.07l-0.29,-0.7l-1.35,-0.1l-1.36,-1.04l-1.71,-0.39l-1.3,-1.35l-1.18,-0.03l-1.11,0.65l-2.25,-0.34l-0.59,-0.42l-0.64,-1.89l-1.02,-0.56l-1.52,0.32l-1.18,1.31l-3.42,0.53l-1.32,0.01l-4.47,-1.06l-5.58,-4.4l0.28,-3.09l-0.33,-0.77l-1.75,-0.49l-1.16,-0.69l-0.29,-1.6l-0.69,-0.85l-0.91,-0.35l-1.02,0.39l-1.45,-0.85l-0.4,-0.66l-0.19,-2.08l2.74,0.82l0.49,-0.2l2.55,-5.22l1.18,-0.12l0.36,-0.37l0.15,-2.08l1.18,-0.4l1.74,-1.25l-0.23,-3.85l0.04,-0.95l0.32,-0.3l0.42,0.05l0.9,1.15l1.32,0.7l0.9,1.75l0.67,0.07l3.76,-4.74l1.01,-0.28l1.05,0.13l0.43,-0.28l0.62,-1.95l1.09,-0.39l0.39,-1.73l1.19,-2.78l0.59,-0.19l1.73,0.41l2.45,-1.35l0.73,-1.07l-0.02,-1.27l0.43,-1.14l0.73,-0.72l1.18,-0.0l0.27,0.56l-0.11,0.96l-0.72,0.84l-0.55,1.55l-0.01,0.71l0.36,0.49l1.76,0.44l1.23,0.79l4.04,0.02l1.73,-2.96l0.89,-0.94l0.21,-2.06l0.98,0.1l1.8,-1.28l0.95,-0.32l2.43,-0.19l1.94,0.23l0.36,0.24l0.38,1.52l0.98,0.85l3.38,-0.86l1.46,0.36l-0.02,0.47l-0.93,0.89l-0.02,0.87l0.42,0.93l1.32,1.43l-0.45,1.19l0.67,1.8l3.39,0.9l2.35,1.23l1.53,-0.25l2.49,-1.45l0.21,2.1l0.59,1.72l0.82,1.2l-1.17,3.27l1.56,2.97l0.81,0.85l-0.07,0.51l-0.99,2.15l-1.47,0.45l-1.69,1.33l-1.07,1.31l-1.54,-0.33l-1.23,0.99l-0.08,0.94l0.56,2.01l0.03,2.79l0.79,1.4l0.36,2.41l-2.84,1.37l-0.45,-2.33l-1.1,-0.53l-1.53,-0.14l-0.85,0.83l-0.47,2.89l-1.54,1.69l-0.29,2.81l0.57,1.45l0.43,4.07l0.67,0.89l1.83,0.35l1.31,1.07l-0.35,2.03l0.13,1.24l-2.63,-2.09l-1.94,1.49l-2.24,0.06l-2.09,1.15l-1.3,0.12l-1.77,-0.81l-2.1,0.79l-1.56,-0.91l-0.54,-1.44l-1.03,-0.68l-0.76,-1.53l-0.73,-0.29l-1.68,0.52l0.26,-1.14l-1.02,-0.89Z",
            "name": "Soria"
        },
        "ES-ML": {
            "path": "M609.44,442.39l-0.48,0.17l-0.56,-0.6l-0.1,-1.04l0.24,-0.25l0.89,1.71Z",
            "name": "Melilla"
        },
        "ES-LU": {
            "path": "M416.61,73.1l-1.07,-1.03l-3.2,-1.73l-1.16,-0.11l0.02,-2.0l-1.33,-1.66l1.39,-2.83l0.12,-1.88l0.84,-1.49l0.08,-1.05l-0.61,-0.77l-2.08,-0.99l-1.75,-2.12l0.57,-3.06l-0.29,-0.49l-0.92,-0.23l0.71,-1.35l1.62,-1.18l0.95,-1.82l0.25,-1.5l-0.01,-1.59l-1.12,-3.46l0.39,-2.24l-1.43,-5.24l1.3,-3.57l-0.34,-2.0l1.87,-2.6l0.29,-3.34l1.41,0.24l0.72,-0.3l0.83,-1.78l1.13,-0.78l1.43,-4.32l-0.54,-1.56l1.23,-1.65l0.11,-2.14l1.26,-1.5l0.03,-0.48l-0.65,-0.99l0.41,-2.46l0.7,-0.26l0.28,-0.74l0.62,-0.19l1.0,2.15l-0.1,0.75l0.55,0.42l0.53,-0.28l0.73,-1.21l0.52,-0.02l1.11,-0.85l1.83,0.31l4.81,2.46l2.45,4.38l1.69,0.91l-0.42,0.96l0.77,0.61l1.79,-0.63l2.42,0.52l2.44,-0.09l0.66,-0.36l1.47,0.61l0.04,0.8l-0.89,2.0l0.21,0.95l-2.33,2.47l-1.29,-0.13l-0.81,0.29l-0.39,0.84l-0.05,1.59l0.34,0.53l1.34,0.32l0.29,2.2l0.6,1.09l1.4,1.08l0.32,2.23l0.52,1.11l1.28,1.13l2.09,1.2l-0.32,1.86l0.65,1.26l0.82,0.47l0.96,-0.31l1.5,-0.88l0.62,-1.11l1.12,1.66l0.03,0.74l-1.36,1.24l-3.03,1.01l-0.81,1.93l-0.92,0.71l-0.17,0.77l0.55,1.41l0.53,0.37l0.89,-0.33l0.22,-0.88l1.03,1.2l1.73,0.31l1.14,1.25l0.3,2.34l-1.27,2.27l0.26,2.46l-0.32,0.97l-2.49,3.06l-1.37,0.12l-1.03,0.97l-1.18,0.54l-0.73,0.93l-0.3,1.03l0.14,0.86l0.88,1.62l-1.18,1.36l0.04,2.2l-0.69,1.58l-0.09,1.47l-1.56,3.27l-1.34,0.89l-0.59,0.82l-1.79,4.72l-1.72,-3.53l-0.65,-0.59l-2.19,-0.64l-1.75,0.27l-1.54,-1.24l-0.57,0.06l-0.42,0.53l-3.88,1.96l-2.09,-0.64l-1.64,0.26l-3.79,-2.57l-1.61,-0.12Z",
            "name": "Lugo"
        },
        "ES-SE": {
            "path": "M478.3,361.98l0.83,-1.08l-0.03,-0.52l-0.52,-0.06l-1.65,0.87l-0.79,0.02l-1.03,-0.62l-2.05,0.91l-1.13,-1.06l0.87,-2.57l-1.07,-3.7l0.21,-0.96l0.92,-1.56l-0.02,-1.68l0.39,-1.65l-0.44,-2.9l0.64,-2.67l-0.3,-0.9l-1.33,-1.56l0.81,-1.04l-0.07,-2.16l1.59,-0.62l0.26,-1.28l-1.66,-3.02l-0.81,-2.6l-0.94,-1.33l0.25,-1.29l-0.22,-0.44l-2.15,-1.01l-2.4,0.09l-0.68,-0.34l0.1,-0.95l0.94,-0.93l1.32,-2.3l0.67,-0.41l5.4,-1.51l1.59,0.03l0.67,1.46l0.92,0.32l0.63,-0.15l0.41,-0.92l-0.03,-1.96l0.35,-0.57l2.18,0.28l0.91,-0.56l0.16,-0.49l-0.84,-2.1l0.75,-2.85l-0.55,-0.63l-1.22,-0.08l-0.39,-0.92l2.43,-1.72l5.47,-1.01l1.09,-0.53l1.82,-3.19l-0.46,-1.55l0.44,-1.08l1.64,-1.15l1.15,-1.46l1.09,-0.41l2.92,-0.28l1.17,1.31l-1.66,1.27l0.34,2.04l0.47,0.39l1.28,-0.06l2.84,-2.31l1.17,0.06l0.09,0.89l3.36,3.62l0.8,3.23l2.2,2.0l0.66,3.65l1.87,1.43l0.72,2.46l1.16,0.91l-0.05,3.2l-2.77,0.02l-1.27,1.35l0.44,2.51l0.92,1.14l1.84,0.22l2.7,-0.73l3.33,-2.19l1.49,0.31l1.04,-0.19l1.16,-1.35l1.94,-0.81l1.71,0.18l1.27,1.5l0.4,1.06l0.02,1.52l0.93,0.86l0.14,0.79l-0.5,3.49l1.37,1.23l0.76,1.49l0.22,1.4l1.34,1.33l1.08,2.57l1.63,1.54l1.05,0.18l2.21,-1.58l0.44,0.21l0.46,0.54l0.25,1.98l0.61,1.68l-2.48,-0.01l-0.69,1.17l0.64,1.42l-0.1,0.72l-2.0,1.48l-0.49,0.12l-1.58,-1.52l-0.55,-0.15l-1.13,1.31l-1.83,-0.66l-1.21,0.22l-0.51,0.48l-0.05,0.58l0.54,0.68l1.44,0.86l-0.34,0.63l-8.93,5.42l-1.45,1.7l-1.51,0.95l-0.87,-0.24l-1.78,-2.74l-0.81,-0.41l-4.99,3.4l-0.19,-0.89l0.73,-1.46l0.08,-1.22l-0.88,-1.02l-1.3,-0.22l-1.23,0.75l-0.1,3.06l-0.41,0.92l-1.36,1.25l-1.34,0.2l-2.12,-1.73l-1.55,-0.36l-1.06,0.76l-0.86,1.45l-3.34,-0.05l-1.73,0.56l-1.02,0.84l-0.92,2.45l-1.63,-0.4l-1.39,0.37l-5.1,-0.65l-2.02,-1.37l-2.22,-0.65Z",
            "name": "Sevilla"
        },
        "ES-CA": {
            "path": "M475.89,381.69l0.29,0.33l-0.06,0.11l-0.23,-0.44ZM476.83,383.6l0.6,0.36l0.98,-0.49l1.32,-1.67l-0.25,-0.66l-1.57,0.17l0.03,-2.06l-0.35,-0.95l-2.03,-1.98l-0.67,-0.33l-3.25,-0.33l-0.44,-0.47l-0.49,-1.95l-1.19,-2.67l0.14,-0.69l0.63,-0.69l2.11,-0.86l0.77,-0.7l0.43,-1.36l-0.33,-2.01l0.18,-0.98l1.12,-0.97l2.7,0.2l2.86,0.81l2.22,1.45l5.28,0.67l1.33,-0.38l1.91,0.47l0.48,-0.29l0.92,-2.58l0.79,-0.61l1.35,-0.44l3.51,0.05l1.28,-1.77l0.71,-0.47l0.82,0.26l2.37,1.85l1.02,0.05l0.93,-0.36l1.65,-1.56l0.57,-1.78l-0.08,-2.16l0.64,-0.37l0.79,0.11l0.53,0.6l-0.85,2.34l0.13,1.16l0.79,0.63l0.66,-0.18l4.4,-3.24l1.98,2.85l0.67,0.48l0.93,0.05l1.06,-0.47l1.98,-1.99l1.46,1.94l0.45,1.39l-0.12,1.43l-1.58,2.28l-1.08,0.61l-1.04,0.04l-2.91,-2.23l-1.12,0.08l-0.83,0.49l-1.2,1.27l-0.34,0.84l0.41,1.38l1.3,1.61l-0.1,0.74l-0.82,1.14l-0.71,3.03l-1.58,1.39l-2.56,0.9l-1.52,2.22l-0.94,0.6l-3.4,1.1l-0.75,1.14l0.44,1.03l1.38,0.8l1.07,-0.04l2.79,-1.37l1.7,0.12l1.35,2.54l1.4,1.55l0.77,1.81l0.6,3.45l0.53,0.31l1.35,-0.48l0.69,1.42l-1.4,1.09l0.16,0.72l-1.88,3.53l-0.18,2.05l-0.51,-1.02l-0.73,-0.5l-1.07,-0.37l-1.17,0.27l-0.69,1.66l0.53,3.36l-0.48,0.8l-6.22,2.38l-0.73,-1.36l-2.34,-1.47l-1.2,0.24l-3.11,-1.2l-1.39,-1.75l-3.44,-3.1l-2.85,0.27l-1.91,-0.56l-2.62,-4.38l-2.21,-1.24l-0.94,-3.17l-1.39,-1.64l-1.37,-3.25Z",
            "name": "C\u00e1diz"
        },
        "ES-SG": {
            "path": "M584.61,121.17l0.82,1.72l1.63,0.96l1.32,-0.34l0.46,0.21l0.37,0.44l0.46,1.88l1.41,0.87l1.56,0.37l-0.13,3.65l5.36,4.32l-1.46,1.51l-3.46,0.69l-3.38,-0.4l-0.15,0.58l0.49,0.83l-0.14,1.24l-1.13,0.33l-3.05,2.32l-2.8,0.4l-1.46,0.89l-2.42,2.88l-2.37,1.8l-1.76,2.9l-4.6,2.04l-1.91,2.79l-0.1,1.93l-1.31,4.29l-1.08,0.32l-1.6,-0.25l-1.07,0.51l-3.13,4.49l-3.2,-0.6l-1.32,0.41l-1.14,-0.06l-0.89,0.98l-0.12,1.1l-0.66,0.44l-2.54,0.6l-0.93,-5.8l-1.25,-1.8l-0.49,-2.12l-0.38,-0.48l-0.86,-0.24l-1.64,0.29l0.58,-2.09l-0.76,-3.97l-0.31,-0.52l-1.3,-0.72l-1.58,-3.18l-2.28,-2.09l-0.49,-1.02l0.46,-3.19l1.97,-2.3l0.08,-1.25l2.76,-2.93l-0.02,-0.57l-0.92,-0.85l0.16,-0.48l1.15,0.7l0.49,-0.05l0.71,-0.69l2.25,1.33l0.6,-0.32l-0.05,-1.05l-0.92,-1.68l-0.04,-1.26l-0.59,-1.9l0.79,-0.03l3.05,-1.7l1.58,0.15l1.75,-0.65l2.94,-0.08l9.49,-3.3l1.16,-1.61l0.36,-1.86l3.12,1.64l2.28,2.59l1.8,-0.08l0.56,1.93l0.35,0.29l1.63,0.13l0.43,-0.4l0.05,-2.85l1.36,-1.04l0.7,-1.22l1.72,-0.67l1.93,0.42l1.04,-0.44Z",
            "name": "Segovia"
        },
        "ES-BU": {
            "path": "M620.9,56.38l1.47,-0.1l0.85,0.79l0.66,0.14l-0.61,1.37l-1.01,0.59l-0.06,0.84l1.64,1.79l0.74,-0.07l0.77,-0.67l0.28,1.44l-0.47,0.18l-0.87,-0.52l-3.01,-0.07l-2.01,-0.84l-2.68,-0.62l-2.39,-1.11l-2.03,-1.97l1.79,-2.25l3.48,-0.06l3.44,1.12ZM555.21,67.24l0.45,-0.58l-0.38,-1.33l0.74,-0.8l-0.43,-3.23l0.35,-0.86l1.05,0.33l1.07,-0.67l1.38,-1.76l0.95,-0.61l0.67,0.03l0.93,0.68l0.62,-0.17l0.83,-1.35l1.62,-0.56l1.16,-2.48l-0.04,2.28l0.29,0.44l1.4,0.4l2.2,-0.63l1.38,-1.28l1.89,-0.12l0.71,-0.4l0.33,-0.97l-0.69,-3.13l-0.5,-0.38l-0.79,-0.05l-1.43,1.34l-0.33,-1.15l0.34,-0.65l1.04,-0.12l1.35,-0.92l0.25,-0.69l-0.65,-1.21l-0.84,-0.52l-0.94,0.23l-0.92,1.34l-1.58,0.79l-0.97,-0.57l-0.08,-0.9l1.19,-3.1l2.17,-1.76l1.69,-0.83l0.58,-0.69l0.2,-1.42l1.82,-0.04l0.93,-0.33l1.83,-1.37l2.78,-3.07l1.42,0.75l3.51,1.03l2.8,0.28l1.24,-0.12l2.45,-0.95l3.72,-2.29l0.4,-0.03l0.98,0.75l3.03,0.29l0.14,0.33l-0.66,0.57l-0.56,1.52l0.37,0.99l0.85,0.55l-0.26,2.75l-0.63,1.21l0.07,0.44l1.93,0.83l1.72,0.14l0.68,-0.38l0.67,-1.47l0.45,-0.22l0.5,1.15l1.01,0.53l-0.21,0.81l-1.4,0.11l-0.42,0.39l-0.01,0.49l0.74,1.05l1.63,0.77l-0.08,0.66l-0.94,0.23l-0.71,0.63l-2.02,0.23l-2.01,-0.49l-0.37,-0.95l-0.77,-0.58l-2.48,-0.07l-2.15,2.55l-0.44,1.27l2.03,2.71l0.73,0.46l0.76,-0.39l0.51,-1.33l1.43,-0.22l1.25,-1.29l0.01,0.64l-1.56,2.86l0.18,0.95l0.68,0.84l-0.23,0.69l0.38,0.55l0.78,0.05l2.12,-0.84l3.55,2.46l0.95,1.2l1.11,0.56l2.9,2.57l-2.27,1.0l-4.22,-0.78l-2.53,0.51l-0.31,0.94l0.53,1.11l-2.02,2.6l-0.15,0.63l0.53,0.66l1.22,-0.11l-0.46,2.29l1.34,2.06l-0.36,1.37l0.09,2.38l-0.55,0.97l-1.3,0.47l-0.28,0.58l0.41,0.85l0.44,3.21l-0.54,2.66l-0.64,0.73l-0.12,0.62l1.73,3.27l0.98,0.81l1.11,1.94l0.93,0.5l2.84,-0.1l0.76,2.59l-0.8,0.41l-1.28,2.99l-0.31,1.53l-1.06,0.38l-0.65,1.88l-0.95,-0.08l-1.42,0.47l-3.46,4.36l-0.75,-1.39l-1.38,-0.75l-0.89,-1.17l-1.35,-0.13l-0.7,0.82l0.32,4.54l-3.03,1.78l-0.14,2.02l-1.38,0.33l-2.49,5.1l-2.62,-0.85l-0.74,0.49l-0.13,1.25l-0.89,0.47l-2.03,-0.41l-2.1,0.81l-0.85,1.36l-1.45,1.17l-0.15,2.81l-0.92,-0.07l-0.57,-1.98l-0.41,-0.29l-1.77,0.13l-2.13,-2.49l-3.53,-1.86l-0.57,-1.39l-1.33,-1.05l-0.05,-3.65l-0.94,-2.07l0.68,-2.58l-2.08,-2.41l0.04,-1.55l1.17,0.0l2.34,-0.94l0.59,-0.8l0.26,-1.53l2.32,-0.64l0.68,-0.5l0.48,-1.68l-0.54,-1.07l-0.68,-0.23l-4.12,1.9l-0.09,-0.52l2.22,-2.97l-0.28,-1.22l-0.81,-0.35l-3.5,0.59l-0.68,-0.9l-0.63,-3.5l-0.35,-0.33l-2.95,-0.3l0.47,-2.06l-1.85,-2.03l-1.44,-9.25l-0.41,-0.26l-1.58,0.15l-0.3,-0.87l0.01,-1.69l0.4,-0.68l2.63,0.1l0.44,-0.42l-0.11,-2.08l-0.68,-2.39l-1.23,-1.59ZM562.63,90.76l1.11,0.33l1.06,-0.56l-0.03,-1.26l-0.77,-0.94l-0.84,-0.2l-0.95,0.69l-0.15,0.85l0.57,1.09Z",
            "name": "Burgos"
        },
        "ES-SA": {
            "path": "M449.85,149.04l0.56,-0.29l3.52,0.09l0.79,-0.66l1.68,-2.51l0.35,-2.58l1.93,-1.9l2.26,-3.71l3.13,-0.14l3.35,-1.69l6.16,1.15l7.67,4.4l0.49,-0.07l0.64,-0.68l1.86,0.2l0.98,0.47l-0.13,1.49l0.93,0.96l0.98,0.16l0.59,-0.61l0.29,0.7l0.69,0.39l0.82,-0.12l0.76,-0.65l0.26,-0.76l-0.14,-2.99l0.73,-0.45l3.21,0.98l3.98,-0.64l1.78,-0.85l1.23,1.46l0.94,0.45l2.36,0.1l2.0,1.49l3.46,-0.31l0.41,1.92l1.6,0.24l0.93,1.1l0.82,0.37l0.68,-0.07l0.68,-0.52l0.37,-3.08l0.95,-0.59l1.02,1.27l2.02,0.34l1.68,1.51l-0.95,2.38l0.16,1.9l0.49,0.74l1.07,0.33l0.49,1.49l-0.27,1.24l-0.98,1.37l0.58,1.88l-1.91,2.3l-0.04,2.75l-0.65,1.21l-1.55,1.15l-1.01,1.64l-4.7,3.41l-1.02,2.99l-1.0,0.95l-1.24,0.62l-2.61,0.19l-0.47,0.44l0.22,1.82l0.39,0.35l2.5,0.02l-1.04,3.54l-1.66,0.52l-0.33,0.46l0.22,1.23l-0.21,0.23l-0.7,-0.29l-0.84,-1.0l-0.33,-1.34l-0.69,-0.24l-1.37,0.39l-2.83,2.27l-0.42,0.92l0.78,2.77l-1.96,3.14l-1.18,0.43l-0.69,-0.13l0.35,-1.64l-0.59,-1.07l-0.63,-0.22l-3.15,1.2l-1.33,2.05l-1.32,-0.4l-1.39,-0.71l-1.43,-1.29l-2.52,-1.21l0.81,-1.84l-0.05,-0.68l-1.61,-0.87l-0.54,-1.02l-0.99,-0.33l-2.44,-1.92l-0.95,-0.21l-0.67,0.1l-2.18,1.43l-1.29,0.31l-1.13,0.89l-0.79,1.23l-1.6,0.42l-1.26,1.16l-2.95,1.26l-1.79,1.73l0.14,1.58l-0.52,0.63l-3.3,0.74l-1.26,0.61l-1.16,-0.47l-1.67,0.72l-1.02,-0.19l-1.08,0.22l-0.96,-0.49l-1.07,-1.12l0.28,-0.66l2.09,-1.66l0.76,-1.35l-0.08,-0.48l-1.31,-1.23l-0.86,-1.4l-0.21,-1.53l1.77,-3.79l-0.27,-1.18l-1.17,-1.66l-0.07,-0.75l1.44,-3.46l-0.99,-5.84l0.09,-4.05l0.65,-0.41l0.16,-0.87l-0.35,-0.92l-1.23,-0.76l-1.22,-3.29l-2.17,-2.82l0.48,-1.96Z",
            "name": "Salamanca"
        },
        "ES-V": {
            "path": "M666.85,229.69l0.14,-2.86l1.36,-1.34l1.45,-2.88l1.07,-1.15l1.17,-0.69l1.58,0.65l0.96,0.03l0.87,-0.34l0.68,-0.7l0.13,-2.97l1.66,-2.76l0.93,-3.54l0.25,-2.95l-0.37,-1.03l2.06,-1.29l0.72,0.31l2.95,-0.75l2.1,-0.02l2.84,1.13l0.57,0.83l-0.28,1.43l0.39,2.18l0.4,0.59l0.83,0.43l0.96,-0.03l2.64,-1.21l0.42,0.24l1.42,2.46l1.24,0.39l0.44,-0.22l0.67,-1.44l0.87,0.53l0.41,2.1l-0.08,1.74l0.8,0.85l0.84,0.12l0.82,-0.32l1.28,-1.54l1.05,-0.59l1.99,3.22l1.37,0.43l1.06,-0.42l0.92,-0.82l1.23,-1.96l1.11,-0.62l1.17,0.42l1.52,1.89l2.81,1.68l-0.45,2.33l-1.93,2.47l-0.96,2.43l-1.72,2.88l-0.29,1.94l0.13,2.61l1.05,5.66l3.3,7.03l-0.93,1.02l1.3,4.57l3.63,6.67l3.1,3.01l-7.13,1.35l-3.5,-1.35l-4.15,3.14l-7.05,1.22l-0.28,0.6l1.18,2.02l0.49,0.17l1.09,-0.32l0.53,0.47l-3.75,2.18l-1.23,-1.11l-3.16,-1.8l-0.98,-0.13l-2.62,0.66l-1.84,-1.63l-1.95,0.05l-0.23,-0.25l0.53,-1.85l-0.54,-1.84l0.18,-1.69l-1.67,-2.93l-1.55,-0.64l-1.86,0.71l-3.2,0.24l-1.03,-0.7l-4.08,-4.96l-0.22,-1.17l0.27,-1.07l1.08,-2.52l1.03,-1.26l0.95,-2.65l0.34,-3.65l-0.35,-0.98l-6.32,-1.95l-3.04,-1.66l-1.42,0.17l-0.34,-1.22l-2.43,-2.33l0.76,-2.86l-0.16,-0.32ZM674.54,193.79l0.61,1.48l1.19,1.28l0.54,1.22l1.02,0.49l2.47,0.29l0.91,0.57l1.72,1.56l-0.11,0.9l-2.04,1.1l-4.08,0.95l-5.0,-1.12l-1.39,-4.3l-1.42,-1.14l-0.01,-0.51l3.04,0.44l1.75,-0.54l0.45,-0.7l-0.04,-1.52l0.4,-0.47Z",
            "name": "Valencia"
        },
        "ES-LE": {
            "path": "M453.7,75.82l0.63,-1.02l0.31,-1.87l-0.78,-1.6l-2.82,-0.79l-1.24,-0.73l-1.44,0.27l-1.07,0.7l-2.98,-0.44l0.26,-1.95l0.71,-1.68l-0.06,-2.1l1.2,-1.36l-0.12,-0.84l-0.78,-1.19l-0.05,-0.96l0.57,-0.93l1.3,-0.64l0.83,-0.85l1.55,-0.23l2.64,-3.21l0.47,-1.41l-0.28,-2.29l1.09,-1.93l1.01,0.16l1.31,0.99l2.68,-1.73l2.48,-0.14l1.09,0.42l1.95,0.16l2.56,-0.76l2.1,-1.17l0.34,-0.54l-0.06,-0.81l-1.33,-0.83l2.27,-0.51l1.12,-2.32l0.88,-0.4l1.25,0.7l4.0,1.3l0.58,-0.22l0.43,-1.16l3.44,0.64l1.08,-0.55l0.65,-1.47l2.42,0.41l1.12,-0.25l1.06,2.26l2.11,1.47l2.47,1.18l2.47,-0.03l0.95,-0.62l1.59,-3.2l0.78,-0.35l1.41,0.02l1.16,0.57l3.97,0.89l0.97,-0.39l1.05,0.01l0.84,-1.23l2.95,-0.32l0.98,-1.81l2.55,0.25l3.82,-0.46l2.17,-1.06l1.6,0.26l1.18,-1.27l1.2,-2.64l2.14,-0.76l4.21,-2.45l1.24,0.69l1.01,1.74l-0.16,2.91l0.39,1.65l0.73,0.8l1.61,0.88l1.33,1.86l0.23,1.03l-2.38,1.47l-0.49,0.92l-0.51,2.61l-1.35,1.26l-0.67,2.03l-0.87,-0.02l-0.6,0.71l-0.14,4.08l-1.13,2.14l0.57,1.13l1.45,0.99l-0.66,1.73l0.1,2.66l-0.76,4.13l0.24,0.44l0.81,0.33l-0.0,0.73l-0.95,7.09l-2.1,0.33l-0.33,0.34l-0.27,1.97l0.52,0.44l0.85,-0.27l-0.33,1.81l-1.53,0.3l-1.35,-0.4l-0.51,0.35l-0.09,1.07l-1.39,-1.91l-1.17,-0.01l-2.41,2.1l-0.76,0.25l-0.84,-0.4l-0.84,0.13l-0.92,1.25l-0.41,1.38l-0.83,0.17l-0.89,0.64l-1.82,-1.1l-1.17,0.6l-0.4,1.44l0.41,3.23l-0.41,2.84l0.37,1.89l-1.25,0.4l-4.04,-3.52l-0.84,-0.06l-0.41,0.3l-0.36,1.44l-2.13,-0.83l0.01,-1.2l-0.87,-1.22l-1.65,-0.76l-0.52,0.42l0.07,0.69l-1.95,0.27l-0.37,-0.96l-0.49,-0.24l-3.24,0.96l-0.96,-0.14l-0.9,-1.42l-0.7,-0.17l-0.73,0.79l-0.81,0.11l-0.52,0.44l-3.65,-1.7l-6.57,0.42l-1.2,-0.95l-1.36,-0.51l-0.87,-1.29l-0.69,-0.4l-1.15,0.42l-3.58,-0.07l-2.32,0.89l-1.28,-0.83l-1.36,-0.35l-2.35,0.07l-1.13,-0.53l-2.35,-0.06l-2.61,-1.62l1.43,-2.29l0.2,-2.33l-0.21,-0.73l-3.65,-3.06ZM514.67,84.67l0.24,-1.47l-0.3,-1.2l-0.48,-0.29l-1.01,0.28l-0.87,0.92l-0.0,0.93l0.5,0.98l1.01,0.28l0.9,-0.44Z",
            "name": "Le\u00f3n"
        },
        "ES-BI": {
            "path": "M600.96,24.47l1.07,0.18l0.99,-0.61l2.97,2.34l0.66,-0.3l0.0,-0.41l-0.84,-2.5l3.27,-1.99l0.29,-0.39l-0.17,-0.58l5.13,-0.37l1.52,-0.58l1.79,1.37l1.19,3.28l0.58,-0.36l0.43,-1.98l0.26,-0.07l6.86,2.19l0.86,1.21l1.91,0.91l-1.11,1.89l0.72,1.34l-1.42,1.91l-0.61,-0.07l-0.76,0.65l0.06,2.05l-0.72,1.24l0.24,3.05l-0.33,0.36l-3.2,0.6l-1.01,-0.32l-0.75,0.18l-0.78,0.53l-0.23,0.61l0.96,1.47l0.1,0.73l-0.96,-0.22l-1.23,0.34l-1.52,-0.65l-1.88,0.31l-2.7,-1.08l-1.71,-0.05l-2.19,-2.32l0.82,-2.7l-0.61,-1.63l-0.92,-1.24l-1.3,-0.72l-1.1,0.47l-0.61,2.07l-2.53,0.7l-1.17,-0.86l-0.54,-1.02l-3.19,-0.36l-1.31,-0.8l-1.04,0.27l-3.32,2.14l-1.93,0.75l-0.63,-2.12l-0.14,-1.92l0.43,-0.75l4.12,-2.99l3.38,0.06l1.26,0.36l1.96,-0.89l0.63,-1.15l-0.01,-1.54ZM596.05,31.58l0.17,-0.97l-0.75,-1.21l-0.93,-0.39l-0.52,0.38l-0.0,2.12l0.27,0.52l0.49,0.14l1.27,-0.58Z",
            "name": "Bizkaia"
        },
        "ES-HU": {
            "path": "M690.91,74.26l0.49,-1.85l-0.32,-1.26l-0.32,-6.41l-0.79,-1.98l1.41,-0.7l0.37,-0.98l-0.24,-0.73l-0.95,-0.89l0.21,-1.62l0.26,-0.55l1.1,-0.75l0.52,-1.08l0.28,-2.98l1.23,-1.89l0.24,-1.09l1.41,-0.98l0.68,-0.01l-0.13,1.11l0.72,1.02l1.32,0.15l1.93,1.35l1.48,1.99l0.17,0.86l1.01,0.16l0.02,0.66l0.57,0.6l0.6,0.01l1.09,-0.6l0.32,-1.27l2.63,0.99l1.42,-0.06l2.82,-1.96l0.84,0.07l0.5,-0.64l2.57,1.64l0.74,1.13l1.23,0.12l1.31,-0.38l0.26,1.46l1.35,1.61l0.38,0.94l3.22,1.73l1.67,-0.13l6.78,-2.09l2.5,0.77l0.84,1.48l0.99,0.88l0.86,-0.25l1.1,-1.56l1.04,-0.78l0.87,0.74l0.34,0.85l1.0,0.26l2.35,-0.42l0.7,0.26l6.34,0.04l1.02,-0.37l1.61,3.39l2.04,0.99l-0.36,1.96l-1.17,2.46l-0.0,0.93l-0.9,0.34l-0.26,0.68l0.41,2.05l0.87,1.35l0.51,1.85l0.19,3.26l-0.37,3.42l-0.88,1.98l-0.57,2.67l-0.1,3.14l-1.9,4.94l-0.13,1.35l-1.04,0.85l-0.61,0.99l-1.27,0.75l-0.49,0.78l0.12,0.8l0.94,0.88l0.05,2.12l-1.3,1.09l-0.69,1.03l-1.66,0.79l-1.43,2.38l-2.38,0.82l-3.12,4.08l-0.03,1.11l0.95,3.1l0.83,0.65l2.12,0.21l0.55,2.18l-1.57,2.45l-1.33,0.46l-0.66,0.62l-0.41,3.46l-3.51,-1.08l-0.45,0.16l-0.79,1.22l-1.11,0.36l-1.08,-0.51l-1.51,1.16l-0.79,1.69l-3.1,-0.45l-1.51,-1.25l-1.91,0.43l-1.26,-5.11l-0.61,-1.26l-1.35,-1.58l-0.59,-2.15l-0.8,-1.28l-1.31,-0.32l-1.33,0.98l-0.36,-0.06l-2.14,-2.3l-1.27,-0.52l-1.39,-2.79l-4.35,-2.76l-0.46,-0.85l-0.91,-4.65l-1.22,-1.57l-2.13,-1.12l-1.83,-3.11l-0.88,-0.6l-4.29,-0.11l-2.84,-1.99l-0.4,-1.34l0.81,-2.43l0.77,-0.08l0.75,1.01l0.8,0.25l0.72,-0.37l0.84,-1.46l-0.35,-9.37l0.9,-1.69l0.14,-1.08l-0.59,-4.3l-0.57,-0.55l-1.19,-0.06l-0.5,0.56l0.39,2.3l-1.21,3.2l-0.37,0.3l-0.74,-0.42l-1.01,0.01l-0.77,0.59l-0.47,1.15l-0.48,-0.14l-0.15,-0.52l3.28,-5.16l0.23,-0.87l-0.5,-1.78l-2.16,-1.32Z",
            "name": "Huesca"
        },
        "ES-LO": {
            "path": "M602.16,87.22l0.72,-0.94l0.59,-2.89l-0.47,-3.48l-0.36,-0.56l1.32,-0.52l0.78,-1.44l-0.09,-2.4l0.34,-1.62l-0.5,-1.16l-0.83,-0.85l0.5,-2.14l-0.68,-0.87l-1.09,0.18l2.11,-2.82l0.01,-0.72l-0.51,-0.96l2.01,-0.37l4.22,0.78l2.45,-0.8l0.35,1.28l0.51,0.12l-0.44,0.96l0.43,0.67l0.64,0.23l1.15,-0.25l0.43,-0.28l0.57,-1.34l0.71,-0.04l1.62,1.27l0.14,2.66l2.9,1.94l0.96,-0.48l0.19,0.75l0.68,0.25l0.87,-0.66l1.25,0.04l0.66,-1.36l0.41,0.78l2.67,1.16l3.53,0.9l2.77,-0.25l2.42,2.16l0.71,0.25l4.54,0.02l0.49,0.44l-0.37,0.9l0.56,0.85l1.26,0.51l2.04,-0.0l2.9,3.52l1.47,1.09l0.06,1.06l0.42,0.55l1.09,0.0l1.29,1.1l3.74,2.05l0.43,3.42l-0.58,0.27l-1.36,-0.56l-1.48,0.39l-1.25,-0.4l-0.71,0.2l-2.91,3.75l-0.3,0.96l0.02,1.05l0.45,1.15l1.54,1.35l0.22,0.73l-0.42,1.26l-2.44,1.48l-1.6,0.34l-2.1,-1.19l-3.15,-0.77l-0.36,-1.18l0.5,-0.78l-0.11,-0.68l-1.7,-2.19l-0.0,-0.49l0.82,-0.69l0.26,-0.87l-0.91,-0.99l-2.22,-0.15l-2.49,0.79l-0.41,-0.45l-0.43,-1.61l-0.7,-0.5l-2.27,-0.28l-2.62,0.22l-1.08,0.36l-1.69,1.24l-0.85,-0.13l-0.54,0.27l-0.31,2.28l-0.8,0.79l-1.37,2.65l-3.34,0.02l-1.36,-0.8l-1.56,-0.34l0.43,-1.71l0.79,-1.01l0.06,-1.66l-0.71,-0.83l-1.64,-0.03l-1.29,1.19l-0.59,2.8l-2.46,1.55l-1.18,-0.35l-0.3,-1.69l-0.88,-1.57l-2.7,0.04l-0.85,-0.25l-1.1,-1.92l-0.9,-0.69l-1.65,-3.04Z",
            "name": "La Rioja"
        },
        "ES-SS": {
            "path": "M624.31,45.3l-1.39,-0.85l0.2,-0.8l1.97,-1.02l0.48,-0.62l0.11,-1.02l-0.47,-1.83l1.11,-0.32l0.59,-0.75l-0.2,-3.21l0.42,-0.31l0.27,-0.84l-0.04,-2.01l1.06,-0.17l1.75,-2.3l-0.0,-0.48l-0.71,-0.92l1.01,-1.71l2.91,1.1l1.77,0.2l3.46,-0.6l0.85,0.92l0.82,0.14l0.38,-0.28l0.36,0.56l0.69,0.06l1.1,-0.88l4.11,-1.32l1.31,-0.78l0.67,0.27l0.66,0.85l0.49,0.02l0.56,-0.41l-0.0,-0.65l-0.36,-0.34l1.19,-0.56l1.46,-1.34l1.18,-0.64l0.29,0.21l-0.08,2.29l1.28,0.87l0.49,1.4l-1.44,0.94l-1.65,2.59l-0.61,0.27l-0.95,-0.17l-0.44,0.75l-0.54,-0.27l-0.58,0.21l-0.45,1.97l0.28,2.62l-0.9,1.44l-3.14,2.21l-0.91,1.74l-0.23,2.24l-0.38,0.38l-1.53,0.49l-1.42,1.51l-1.52,0.14l-1.18,-0.4l-0.73,0.22l-0.78,0.91l-0.73,1.67l-0.74,-0.03l-1.02,-1.45l-2.03,-1.23l-5.87,-0.57l-1.5,-0.69l-0.74,0.55Z",
            "name": "Gipuzkoa"
        },
        "ES-BA": {
            "path": "M445.84,296.37l-0.62,0.09l-0.43,0.6l-0.84,0.38l-0.92,0.19l-0.41,-0.01l-0.76,-0.71l-1.66,-4.18l-1.13,-0.99l-0.61,-1.3l-4.23,-5.46l-1.34,-0.98l0.7,-1.03l-0.33,-1.3l1.0,-3.0l1.91,-3.2l-0.12,-0.63l-0.69,-0.67l-0.06,-0.78l0.34,-2.83l0.5,-1.1l3.55,-2.67l1.08,-1.39l1.84,-0.42l1.99,-1.46l0.33,-1.77l-0.43,-1.01l1.57,-1.83l2.0,-3.73l-0.04,-0.68l-0.39,-0.45l0.2,-0.84l-0.25,-1.01l-0.67,-1.11l-1.62,-1.3l-1.16,-0.35l-1.21,0.11l-1.44,0.76l-0.92,-0.32l-0.3,-0.46l0.51,-1.52l-0.53,-1.23l-3.12,-1.42l-0.74,-1.59l0.41,-1.55l1.98,0.05l2.01,-2.83l-0.58,-1.42l0.22,-0.58l1.61,-0.93l1.23,-0.08l-0.17,2.1l0.49,1.3l0.79,0.24l0.78,-0.35l1.0,-3.67l-0.38,-0.96l-1.28,-0.87l0.31,-0.51l6.1,2.62l2.39,-0.26l1.01,0.46l0.73,1.74l0.82,0.72l0.27,1.12l-0.36,1.09l-1.55,2.35l0.91,2.08l0.63,0.68l3.54,0.69l1.08,-1.05l2.66,0.79l0.44,1.07l0.83,0.39l0.82,-0.27l0.51,-0.75l6.09,0.56l1.75,-0.86l0.27,2.98l0.83,0.98l1.97,0.2l1.58,1.83l1.55,0.18l0.94,1.29l0.64,0.01l2.07,-2.7l2.13,-1.73l0.29,2.31l0.82,0.63l0.93,-0.26l1.39,-1.74l0.4,0.77l0.5,0.19l2.66,-1.02l1.27,-0.87l0.7,-1.19l1.31,0.31l3.04,2.71l0.46,0.05l1.66,-0.94l1.33,-0.01l1.13,-0.91l0.57,-1.31l-0.06,-0.74l-1.09,-1.8l1.37,-0.78l0.83,-0.22l0.76,0.21l1.86,1.92l1.06,0.66l1.65,-0.22l0.79,-0.54l2.06,-3.16l-0.31,-1.82l0.53,-2.8l0.41,-0.14l2.96,0.91l2.74,0.01l2.59,-1.73l0.4,-2.46l0.28,-0.27l1.67,1.71l2.59,-0.39l1.85,-1.03l2.76,1.19l4.49,-1.94l0.65,-0.75l2.02,-1.11l0.31,0.87l-0.11,0.74l-1.16,2.83l-1.51,0.97l-0.34,1.2l1.67,4.01l1.88,2.24l-1.93,-1.0l-3.5,-0.03l-1.71,1.85l-0.85,3.15l0.14,1.45l1.08,0.88l0.16,0.49l-1.34,0.64l-2.58,-1.03l-0.93,0.79l1.39,4.36l0.51,0.42l2.69,0.83l-0.24,2.1l-2.09,0.08l-1.09,0.93l-0.88,1.71l-0.97,3.62l-0.66,1.36l-3.38,0.92l-3.7,0.32l-0.31,0.51l0.2,0.88l-0.38,1.08l-1.15,0.37l-1.86,1.29l-1.36,1.19l-0.7,1.29l-2.22,0.12l-1.56,1.83l-0.74,1.66l-1.8,1.37l-0.85,1.18l-2.44,1.22l-0.92,0.89l-0.37,1.62l0.65,1.35l-0.28,1.82l0.84,1.2l0.96,2.3l0.2,2.25l-0.65,2.72l-1.63,1.37l-1.78,-0.02l-2.75,2.28l-0.78,0.06l-0.29,-1.46l1.34,-0.79l0.36,-0.72l-1.03,-1.55l-1.36,-0.6l-3.95,0.83l-1.34,1.58l-2.02,1.68l-0.33,1.26l0.48,1.27l-1.51,2.73l-0.8,0.4l-5.6,1.05l-2.59,1.8l-0.52,-0.47l-6.09,-2.4l-0.71,-1.57l-2.16,-1.35l-1.4,0.33l-1.38,1.72l-3.09,-0.39l-0.36,-1.52l-1.49,-1.66l-2.52,-0.5l-2.83,0.12l-2.03,-0.74l-0.17,-0.39l0.79,-1.77l-0.49,-1.11l-5.44,-1.85l-0.81,0.43l-0.56,-0.29l-2.16,0.41Z",
            "name": "Badajoz"
        }
    },
    "height": 800.996283508868,
    "projection": {
        "type": "merc",
        "centralMeridian": 0.0
    },
    "width": 900.0
});

},{}],"3pSC7":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('us_aea_en', {
    "insets": [
        {
            "width": 220,
            "top": 440,
            "height": 146.9158157558812,
            "bbox": [
                {
                    "y": -8441281.712315228,
                    "x": -5263934.893342895
                },
                {
                    "y": -6227992.545028123,
                    "x": -1949631.2950683108
                }
            ],
            "left": 0
        },
        {
            "width": 80,
            "top": 460,
            "height": 129.05725678001465,
            "bbox": [
                {
                    "y": -4207380.690946597,
                    "x": -5958501.652314129
                },
                {
                    "y": -3658201.4570359783,
                    "x": -5618076.48127754
                }
            ],
            "left": 245
        },
        {
            "width": 900.0,
            "top": 0,
            "height": 550.2150229714246,
            "bbox": [
                {
                    "y": -5490839.2352678,
                    "x": -2029243.6460439637
                },
                {
                    "y": -2690044.485299302,
                    "x": 2552083.9617675776
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "US-VA": {
            "path": "M682.42,290.04l1.61,-0.93l1.65,-0.48l1.12,-0.95l3.57,-1.69l0.74,-2.33l0.82,-0.19l2.32,-1.54l0.05,-1.81l2.04,-1.86l-0.13,-1.58l0.26,-0.42l5.0,-4.09l4.76,-6.0l0.09,0.63l0.96,0.54l0.33,1.37l1.32,0.74l0.71,0.81l1.46,0.09l0.79,0.65l1.3,0.48l1.41,-0.09l0.79,-0.41l0.76,-1.22l1.17,-0.57l0.53,-1.38l2.72,1.49l1.42,-1.1l2.25,-0.99l0.76,0.06l1.08,-0.97l0.33,-0.82l-0.48,-0.96l0.23,-0.42l1.9,0.58l3.26,-2.62l0.3,-0.1l0.51,0.73l0.66,-0.07l2.38,-2.34l0.17,-0.85l-0.49,-0.51l0.99,-1.12l0.1,-0.6l-0.28,-0.51l-1.0,-0.46l0.71,-3.03l2.6,-4.8l0.55,-2.15l-0.01,-1.91l1.61,-2.55l-0.22,-0.94l0.24,-0.84l0.5,-0.48l0.39,-1.7l-0.0,-3.18l1.23,0.19l1.18,1.73l3.8,0.43l0.59,-0.28l1.05,-2.52l0.2,-2.36l0.71,-1.05l-0.04,-1.61l0.76,-2.31l1.78,0.75l0.65,-0.17l1.3,-3.3l0.57,0.05l0.59,-0.39l0.52,-1.2l0.81,-0.68l0.44,-1.8l1.38,-2.43l-0.35,-2.57l0.54,-1.76l-0.3,-2.01l9.18,4.58l0.59,-0.29l0.63,-4.0l2.6,-0.07l0.63,0.57l1.05,0.23l-0.5,1.74l0.6,0.88l1.61,0.85l2.52,-0.04l1.03,1.18l1.64,0.12l1.94,1.52l0.57,2.53l-0.94,0.78l-0.45,0.02l-0.3,0.43l0.13,0.71l-0.61,-0.05l-0.49,0.59l-0.37,2.5l0.07,2.29l-0.43,0.25l0.01,0.6l1.05,0.77l-0.36,0.14l-0.17,0.6l0.44,0.3l1.64,-0.08l1.38,-0.61l1.77,-1.61l0.39,0.58l-0.58,0.35l0.02,0.58l1.9,1.07l0.64,1.08l1.69,0.35l1.37,-0.11l0.95,0.49l0.82,-0.65l1.05,-0.08l0.33,0.56l1.26,0.63l-0.1,0.55l0.36,0.55l0.94,-0.23l0.41,0.56l3.96,0.88l0.25,1.12l-0.85,-0.41l-0.57,0.44l0.89,1.74l-0.35,0.57l0.62,0.78l-0.44,0.89l0.24,0.59l-1.36,-0.36l-0.59,-0.72l-0.67,0.18l-0.1,0.43l-2.44,-2.3l-0.56,0.05l-0.38,-0.56l-0.52,0.32l-1.36,-1.51l-1.23,-0.43l-2.86,-2.72l-1.34,-0.12l-1.11,-0.81l-1.17,0.05l-0.39,0.52l0.47,0.71l1.1,-0.01l0.63,0.68l1.33,0.07l0.6,0.43l0.62,1.4l1.46,1.11l1.13,0.34l1.53,1.8l2.55,0.94l1.4,1.89l2.14,-0.02l0.56,0.41l0.72,0.06l-0.61,0.7l0.3,0.49l2.03,0.34l0.26,0.72l0.55,0.1l0.13,1.67l-1.0,-0.75l-0.39,0.21l-1.13,-1.0l-0.58,0.29l0.1,0.82l-0.31,0.68l0.7,0.7l-0.18,0.6l1.12,0.32l-0.86,0.44l-2.12,-0.73l-1.39,-1.38l-0.83,-0.32l-2.23,-1.87l-0.58,0.11l-0.22,0.53l0.26,0.81l0.64,0.21l3.81,3.15l2.69,1.12l1.28,-0.33l0.45,1.07l1.27,0.26l-0.44,0.67l0.3,0.56l0.93,-0.19l0.0,1.24l-0.92,0.41l-0.57,0.73l-0.71,-0.93l-3.2,-1.58l-0.29,-1.16l-0.59,-0.59l-0.87,-0.11l-1.2,0.67l-1.71,-0.44l-0.36,-1.15l-0.71,-0.05l-0.05,1.32l-0.33,0.41l-1.43,-1.32l-0.51,0.09l-0.48,0.57l-0.65,-0.4l-0.99,0.45l-2.23,-0.1l-0.37,0.94l0.34,0.46l1.9,0.22l1.4,-0.31l0.85,0.24l0.56,-0.69l0.63,0.88l1.34,0.43l1.95,-0.31l1.5,0.71l0.67,-0.63l0.94,2.47l3.16,1.23l0.37,0.91l-0.57,1.03l0.56,0.44l1.72,-1.32l0.88,-0.02l0.83,0.65l0.8,-0.26l-0.61,-0.9l-0.2,-1.17l3.78,0.08l1.13,-0.44l1.89,3.23l-0.46,0.71l0.65,3.09l-1.19,-0.58l-0.02,0.88l-30.95,7.83l-37.19,8.41l-19.52,3.35l-7.08,0.85l-0.46,-0.26l-4.24,0.64l-0.82,0.62l-28.2,5.01ZM781.15,223.32l0.14,0.09l-0.06,0.07l-0.01,-0.03l-0.07,-0.12ZM808.05,244.59l0.53,-1.14l-0.26,-0.54l-0.36,-0.08l0.58,-0.98l-0.39,-0.71l-0.03,-0.49l0.44,-0.35l-0.17,-0.73l0.62,-0.3l0.23,-0.6l0.14,-2.33l1.01,-0.39l-0.12,-0.9l0.48,-0.14l-0.26,-1.53l-0.79,-0.4l0.87,-0.57l0.1,-1.03l2.69,-1.11l0.36,2.48l-1.08,4.2l-0.22,2.38l0.33,1.09l-0.34,0.97l-0.6,-0.79l-0.81,0.15l-0.39,0.95l0.27,0.37l-0.65,0.46l-0.3,0.85l0.17,1.05l-0.31,1.46l0.38,2.47l-0.6,0.6l0.07,1.33l-1.37,-1.9l0.23,-0.94l-0.33,-1.57l0.28,-0.97l-0.38,-0.3Z",
            "name": "Virginia"
        },
        "US-PA": {
            "path": "M716.46,159.99l0.63,-0.19l4.3,-3.73l1.13,5.2l0.48,0.31l34.84,-7.93l34.28,-8.64l1.42,0.58l0.71,1.39l0.64,0.13l0.77,-0.33l1.24,0.59l0.14,0.85l0.81,0.41l-0.16,0.58l0.89,2.69l1.9,2.07l2.12,0.75l2.21,-0.2l0.72,0.79l-0.89,0.87l-0.73,1.49l-0.17,2.25l-1.41,3.35l-1.37,1.58l0.04,0.79l1.79,1.72l-0.31,1.65l-0.84,0.43l-0.22,0.66l0.14,1.48l1.04,2.87l0.52,0.25l1.2,-0.18l1.18,2.39l0.95,0.58l0.66,-0.26l0.6,0.9l4.23,2.75l0.12,0.41l-1.29,0.93l-3.71,4.22l-0.23,0.76l0.17,0.9l-1.36,1.13l-0.84,0.15l-1.33,1.08l-0.33,0.66l-1.72,-0.12l-2.03,0.84l-1.15,1.37l-0.41,1.39l-37.23,9.21l-39.1,8.66l-10.03,-48.21l1.92,-1.22l3.08,-3.04Z",
            "name": "Pennsylvania"
        },
        "US-TN": {
            "path": "M571.72,341.09l0.86,-0.84l0.29,-1.37l1.0,0.04l0.65,-0.79l-0.99,-4.89l1.41,-1.93l0.06,-1.32l1.18,-0.46l0.36,-0.48l-0.63,-1.31l0.53,-0.65l0.05,-0.56l-0.89,-1.33l2.55,-1.57l1.09,-1.13l-0.14,-0.84l-0.85,-0.53l0.14,-0.19l0.34,-0.16l0.85,0.37l0.46,-0.33l-0.27,-1.31l-0.85,-0.9l0.06,-0.71l0.51,-1.43l1.0,-1.11l-1.35,-2.06l1.37,-0.21l0.61,-0.55l-0.13,-0.64l-1.17,-0.82l0.82,-0.15l0.58,-0.54l0.13,-0.69l-0.59,-1.38l0.02,-0.36l0.37,0.53l0.47,0.08l0.58,-0.29l0.6,-0.86l23.67,-2.81l0.35,-0.41l-0.1,-1.35l-0.84,-2.39l2.98,-0.08l0.82,0.58l22.79,-3.55l7.64,-0.46l7.5,-0.86l8.82,-1.42l24.01,-3.1l1.11,-0.6l29.3,-5.2l0.73,-0.6l3.56,-0.54l-0.4,1.44l0.43,0.85l-0.4,2.0l0.36,0.82l-1.15,-0.03l-1.71,1.79l-1.21,3.89l-0.55,0.7l-0.56,0.08l-0.63,-0.74l-1.44,-0.02l-2.66,1.73l-1.42,2.73l-0.96,0.89l-0.34,-0.34l-0.13,-1.05l-0.73,-0.54l-0.53,0.15l-2.3,1.81l-0.29,1.32l-0.93,-0.24l-0.9,0.48l-0.16,0.77l0.32,0.73l-0.85,2.18l-1.29,0.06l-1.75,1.14l-1.28,1.24l-0.61,1.06l-0.78,0.27l-2.28,2.46l-4.04,0.78l-2.58,1.7l-0.49,1.09l-0.88,0.55l-0.55,0.81l-0.18,2.88l-0.35,0.6l-1.65,0.52l-0.89,-0.16l-1.06,1.14l0.21,5.24l-20.21,3.32l-21.62,3.04l-25.56,2.95l-0.34,0.31l-7.39,0.9l-28.73,3.17Z",
            "name": "Tennessee"
        },
        "US-ID": {
            "path": "M132.38,121.39l-0.34,-0.44l0.08,-1.99l0.53,-1.74l1.42,-1.22l2.11,-3.59l1.68,-0.92l1.39,-1.53l1.08,-2.15l0.05,-1.22l2.21,-2.41l1.43,-2.7l0.37,-1.37l2.04,-2.26l1.89,-2.81l0.03,-1.01l-0.79,-2.95l-2.13,-1.94l-0.87,-0.36l-0.85,-1.61l-0.41,-3.02l-0.59,-1.19l0.94,-1.19l-0.12,-2.35l-1.04,-2.69l0.46,-0.98l9.67,-54.45l13.39,2.35l-3.54,20.72l1.29,2.89l1.0,1.27l0.27,1.55l1.17,1.76l-0.12,0.83l0.39,1.14l-0.99,0.95l0.83,1.76l-0.83,0.11l-0.28,0.71l1.93,1.68l1.03,2.04l2.24,1.22l0.54,1.58l1.09,1.33l1.49,2.79l0.08,0.68l1.64,1.81l0.01,1.88l1.79,1.71l-0.07,1.35l0.74,0.19l0.9,-0.58l0.36,0.46l-0.36,0.55l0.07,0.54l1.11,0.96l1.61,0.15l1.81,-0.36l-0.63,2.61l-0.99,0.54l0.25,1.14l-1.83,3.73l0.06,1.72l-0.81,0.07l-0.37,0.54l0.6,1.33l-0.62,0.9l-0.03,1.16l0.97,0.93l-0.37,0.81l0.28,1.01l-1.57,0.43l-1.21,1.41l0.1,1.11l0.46,0.77l-0.13,0.74l-0.83,0.77l-0.2,1.52l1.48,0.63l1.38,1.79l0.78,0.27l1.08,-0.35l0.56,-0.8l1.85,-0.41l1.21,-1.28l0.81,-0.29l0.15,-0.76l0.78,0.81l0.23,0.71l1.06,0.64l-0.42,1.23l0.73,0.95l-0.34,1.38l0.57,1.34l-0.21,1.61l1.54,2.64l0.31,1.73l0.82,0.37l0.67,2.08l-0.18,0.98l-0.76,0.64l0.51,1.9l1.24,1.16l0.3,0.79l0.81,0.08l0.86,-0.37l1.04,0.93l1.06,2.79l-0.5,0.81l0.89,1.83l-0.28,0.6l0.11,0.98l2.29,2.41l0.97,-0.14l-0.01,-1.14l1.07,-0.89l0.93,-0.22l4.53,1.62l0.69,-0.32l0.67,-1.35l1.19,-0.39l2.25,0.93l3.3,-0.1l0.96,0.88l2.29,-0.58l3.23,0.78l0.45,-0.49l-0.67,-0.76l0.26,-1.06l0.74,-0.48l-0.07,-0.96l1.23,-0.51l0.48,0.37l1.07,2.11l0.12,1.11l1.36,1.95l0.73,0.45l-6.27,53.86l-47.48,-6.32l-46.97,-7.73l6.88,-39.17l1.12,-1.18l1.07,-2.67l-0.21,-1.75l0.74,-0.15l0.77,-1.62l-0.9,-1.27l-0.18,-1.2l-1.24,-0.08l-0.64,-0.81l-0.88,0.29Z",
            "name": "Idaho"
        },
        "US-NV": {
            "path": "M139.36,329.2l-12.7,-16.93l-36.59,-51.1l-25.35,-34.52l13.7,-64.19l46.89,9.24l46.99,7.74l-18.72,125.83l-0.9,1.16l-0.99,2.19l-0.44,0.17l-1.34,-0.22l-0.98,-2.24l-0.7,-0.63l-1.41,0.22l-1.95,-1.02l-1.6,0.23l-1.78,0.96l-0.76,2.48l0.88,2.59l-0.6,0.97l-0.24,1.31l0.38,3.12l-0.76,2.54l0.77,3.71l-0.13,3.07l-0.3,1.07l-1.04,0.31l-0.12,0.51l0.32,0.8l-0.52,0.62Z",
            "name": "Nevada"
        },
        "US-TX": {
            "path": "M276.16,412.59l33.07,1.99l32.79,1.35l0.41,-0.39l3.6,-98.71l25.86,0.61l26.29,0.22l0.05,42.09l0.44,0.4l1.02,-0.13l0.78,0.28l3.74,3.82l1.66,0.21l0.88,-0.58l2.49,0.64l0.6,-0.68l0.11,-1.05l0.6,0.76l0.92,0.22l0.38,0.93l0.77,0.78l-0.01,1.64l0.52,0.83l2.85,0.42l1.25,-0.2l1.38,0.89l2.78,0.69l1.82,-0.56l0.63,0.1l1.89,1.8l1.4,-0.11l1.25,-1.43l2.43,0.26l1.67,-0.46l0.1,2.28l0.91,0.67l1.62,0.4l-0.04,2.09l1.56,0.79l1.82,-0.66l1.57,-1.68l1.02,-0.65l0.41,0.19l0.45,1.64l2.01,0.2l0.24,1.05l0.72,0.48l1.47,-0.21l0.88,-0.93l0.39,0.33l0.59,-0.08l0.61,-0.99l0.26,0.41l-0.45,1.23l0.14,0.76l0.67,1.14l0.78,0.42l0.57,-0.04l0.6,-0.5l0.68,-2.36l0.91,-0.65l0.35,-1.54l0.57,-0.14l0.4,0.14l0.29,0.99l0.57,0.64l1.21,0.02l0.83,0.5l1.26,-0.2l0.68,-1.34l0.48,0.15l-0.13,0.7l0.49,0.69l1.21,0.45l0.49,0.72l1.52,-0.05l1.49,1.74l0.52,0.02l0.63,-0.62l0.08,-0.71l1.49,-0.1l0.93,-1.43l1.88,-0.41l1.66,-1.13l1.52,0.83l1.51,-0.22l0.29,-0.83l2.29,-0.73l0.53,-0.55l0.5,0.32l0.38,0.88l1.82,0.42l1.69,-0.06l1.86,-1.14l0.41,-1.05l1.06,0.31l2.24,1.56l1.16,0.17l1.79,2.08l2.14,0.41l1.04,0.92l0.76,-0.11l2.48,0.85l1.04,0.04l0.37,0.79l1.38,0.97l1.45,-0.12l0.39,-0.72l0.8,0.36l0.88,-0.4l0.92,0.35l0.76,-0.15l0.64,0.36l2.23,34.03l1.51,1.67l1.3,0.82l1.25,1.87l0.57,1.63l-0.1,2.64l1.0,1.21l0.85,0.4l-0.12,0.85l0.75,0.54l0.28,0.87l0.65,0.7l-0.19,1.17l1.0,1.02l0.59,1.63l0.5,0.34l0.55,-0.1l-0.16,1.71l0.81,1.22l-0.64,0.25l-0.35,0.68l0.77,1.27l-0.55,0.89l0.19,1.39l-0.75,2.69l-0.74,0.85l-0.36,1.54l-0.79,1.13l0.64,2.0l-0.83,2.28l0.17,1.07l0.83,1.2l-0.19,1.01l0.49,1.6l-0.24,1.41l-1.13,1.67l-1.02,0.2l-1.76,3.37l-0.04,1.06l1.79,2.37l-3.43,0.08l-7.37,3.78l-0.02,-0.43l-2.19,-0.46l-3.24,1.07l1.09,-3.51l-0.3,-1.21l-0.8,-0.76l-0.62,-0.07l-1.52,0.85l-0.99,2.0l-1.56,-0.96l-1.64,0.12l-0.07,0.63l0.89,0.62l0.0,1.06l0.56,0.39l-0.47,0.69l0.07,1.02l1.63,0.64l-0.62,0.71l0.49,0.97l0.91,0.23l0.28,0.37l-0.4,1.25l-0.45,-0.12l-0.97,0.81l-1.72,2.25l-1.18,-0.4l-0.49,0.12l0.32,1.0l0.08,2.55l-1.85,1.49l-1.91,2.11l-0.96,0.37l-4.1,2.9l-3.3,0.45l-2.54,1.06l-0.2,1.12l-0.75,-0.34l-2.04,0.89l-0.33,-0.34l-1.11,0.18l0.43,-0.87l-0.52,-0.6l-1.43,0.22l-1.22,1.08l-0.6,-0.62l-0.11,-1.2l-1.38,-0.81l-0.5,0.44l0.65,1.44l0.01,1.12l-0.71,0.09l-0.54,-0.44l-0.75,-0.0l-0.55,-1.34l-1.46,-0.37l-0.58,0.39l0.04,0.54l0.94,1.7l0.03,1.24l0.58,0.37l0.36,-0.16l1.13,0.78l-0.75,0.37l-0.27,0.54l0.15,0.36l0.7,0.23l1.08,-0.54l0.96,0.6l-4.27,2.42l-0.57,-0.13l-0.37,-1.44l-0.5,-0.18l-1.13,-1.46l-0.49,-0.03l-0.48,0.51l0.1,0.63l-0.62,0.34l-0.05,0.51l1.18,1.61l-0.31,1.04l0.33,0.85l-1.66,1.79l-0.37,0.2l0.37,-0.64l-0.18,-0.72l0.25,-0.73l-0.46,-0.67l-0.52,0.17l-0.71,1.1l0.26,0.72l-0.39,0.95l-0.07,-1.13l-0.52,-0.55l-1.95,1.29l-0.78,-0.33l-0.7,0.52l0.07,0.75l-0.81,0.99l0.02,0.49l1.25,0.64l0.03,0.56l0.78,0.28l0.7,-1.41l0.86,-0.41l0.01,0.62l-2.82,4.36l-1.23,-1.0l-1.36,0.38l-0.32,-0.34l-2.4,0.39l-0.46,-0.31l-0.65,0.16l-0.18,0.58l0.41,0.61l0.55,0.38l1.53,0.03l-0.01,0.91l0.55,0.64l2.07,1.03l-2.7,7.63l-0.2,0.1l-0.38,-0.54l-0.34,0.1l0.18,-0.76l-0.57,-0.43l-2.35,1.95l-1.72,-2.36l-1.19,-0.91l-0.61,0.4l0.09,0.52l1.44,2.0l-0.11,0.82l-0.93,-0.09l-0.33,0.63l0.51,0.56l1.88,0.07l2.14,0.72l2.08,-0.72l-0.43,1.75l0.24,0.77l-0.98,0.7l0.37,1.59l-1.12,0.14l-0.43,0.41l0.4,2.11l-0.33,1.6l0.45,0.64l0.84,0.24l0.87,2.86l0.71,2.81l-0.91,0.82l0.62,0.49l-0.08,1.28l0.72,0.3l0.18,0.61l0.58,0.29l0.4,1.79l0.68,0.31l0.45,3.22l1.46,0.62l-0.52,1.1l0.31,1.07l-0.63,0.77l-0.84,-0.05l-0.53,0.44l0.08,1.31l-0.49,-0.33l-0.49,0.25l-0.39,-0.67l-1.49,-0.45l-2.92,-2.53l-2.2,-0.18l-0.81,-0.51l-4.2,0.09l-0.9,0.42l-0.78,-0.63l-1.06,0.25l-1.25,-0.2l-1.45,-0.7l-0.72,-0.97l-0.6,-0.14l-0.21,-0.72l-1.17,-0.49l-0.99,-0.02l-1.98,-0.87l-1.45,0.39l-0.83,-1.09l-0.6,-0.21l-1.43,-1.38l-1.96,0.01l-1.47,-0.64l-0.86,0.12l-1.62,-0.41l0.28,-1.26l-0.54,-1.01l-0.96,-0.35l-1.65,-6.03l-2.77,-3.02l-0.29,-1.12l-1.08,-0.75l0.35,-0.77l-0.24,-0.76l0.34,-2.18l-0.45,-0.96l-1.04,-1.01l0.65,-1.99l0.05,-1.19l-0.18,-0.7l-0.54,-0.33l-0.15,-1.81l-1.85,-1.44l-0.85,0.21l-0.29,-0.41l-0.81,-0.11l-0.74,-1.31l-2.22,-1.71l0.01,-0.69l-0.51,-0.58l0.12,-0.86l-0.97,-0.92l-0.08,-0.75l-1.12,-0.61l-1.3,-2.88l-2.66,-1.48l-0.38,-0.91l-1.13,-0.59l-0.06,-1.16l-0.82,-1.19l-0.59,-1.95l0.41,-0.22l-0.04,-0.73l-1.03,-0.49l-0.26,-1.29l-0.81,-0.57l-0.94,-1.74l-0.61,-2.38l-1.85,-2.36l-0.87,-4.24l-1.81,-1.34l0.05,-0.7l-0.75,-1.21l-3.96,-2.67l-0.71,-1.86l-1.82,-0.62l-1.44,-0.99l-0.01,-1.63l-0.6,-0.39l-0.88,0.24l-0.12,-0.77l-0.98,-0.33l-0.8,-2.08l-0.57,-0.47l-0.46,0.12l-0.46,-0.44l-0.86,0.27l-0.14,-0.6l-0.44,-0.31l-0.47,0.15l-0.25,0.61l-1.05,0.16l-2.89,-0.47l-0.39,-0.38l-1.48,-0.03l-0.79,0.29l-0.77,-0.44l-2.67,0.27l-3.92,-2.08l-1.35,0.86l-0.64,1.61l-1.98,-0.17l-0.52,0.44l-0.49,-0.17l-1.05,0.49l-1.33,0.14l-3.22,6.4l-0.18,1.77l-0.76,0.67l-0.38,1.8l0.35,0.59l-1.99,1.01l-0.72,1.3l-1.11,0.65l-1.12,2.0l-2.67,-0.46l-1.04,-0.87l-0.55,0.3l-1.69,-1.21l-1.31,-1.63l-2.9,-0.85l-1.15,-0.95l-0.02,-0.67l-0.42,-0.41l-2.75,-0.51l-2.28,-1.03l-1.89,-1.75l-0.91,-1.53l-0.96,-0.91l-1.53,-0.29l-1.77,-1.26l-0.22,-0.56l-1.31,-1.18l-0.65,-2.68l-0.86,-1.01l-0.24,-1.1l-0.76,-1.28l-0.26,-2.34l0.52,-3.05l-3.01,-5.07l-0.06,-1.94l-1.26,-2.51l-0.99,-0.44l-0.43,-1.24l-1.43,-0.81l-2.15,-2.18l-1.02,-0.1l-2.01,-1.25l-3.18,-3.35l-0.59,-1.55l-3.13,-2.55l-1.59,-2.45l-1.19,-0.95l-0.61,-1.05l-4.42,-2.6l-1.19,-2.19l-1.21,-3.23l-1.37,-1.08l-1.12,-0.08l-1.75,-1.67l-0.79,-3.05ZM502.09,468.18l-0.33,0.17l0.18,-0.16l0.15,-0.02ZM498.69,470.85l-0.09,0.12l-0.04,0.02l0.13,-0.14ZM497.79,472.33l0.15,0.05l-0.2,0.18l0.04,-0.11l0.01,-0.12ZM497.02,473.23l-0.13,0.12l0.03,-0.09l0.09,-0.03ZM467.54,489.19l0.03,0.02l-0.02,0.01l-0.0,-0.03ZM453.94,547.19l0.75,-0.5l0.25,-0.68l0.11,1.08l-1.1,0.1ZM460.89,499.8l-0.14,-0.59l1.22,-0.36l-0.28,0.33l-0.79,0.63ZM463.51,497.84l0.1,-0.23l1.27,-0.88l-0.92,0.85l-0.45,0.26ZM465.8,496.12l0.28,-0.24l0.47,-0.04l-0.25,0.13l-0.5,0.15ZM457.96,502.92l0.71,-1.64l0.64,-0.71l-0.02,0.75l-1.33,1.6ZM451.06,515.13l0.06,-0.22l0.07,-0.15l-0.13,0.37ZM451.5,513.91l0.16,-0.35l0.02,-0.02l-0.18,0.37ZM452.44,511.95l-0.01,-0.04l0.05,-0.04l-0.04,0.08Z",
            "name": "Texas"
        },
        "US-NH": {
            "path": "M829.94,105.42l0.2,-1.33l-1.43,-5.38l0.53,-1.45l-0.28,-2.22l1.0,-1.86l-0.13,-2.3l0.64,-2.28l-0.44,-0.62l0.29,-2.31l-0.93,-3.8l0.08,-0.7l0.3,-0.45l1.83,-0.8l0.7,-1.39l1.43,-1.62l0.74,-1.8l-0.25,-1.13l0.52,-0.62l-2.34,-3.49l0.87,-3.26l-0.11,-0.78l-0.81,-1.29l0.27,-0.59l-0.23,-0.7l0.48,-3.2l-0.36,-0.82l0.91,-1.49l2.44,0.33l0.65,-0.88l13.0,34.89l0.84,3.65l2.6,2.21l0.88,0.34l0.36,1.6l1.72,1.31l0.0,0.35l0.77,0.23l-0.06,0.58l-0.46,3.09l-1.57,0.24l-1.32,1.19l-0.51,0.94l-0.96,0.37l-0.5,1.68l-1.1,1.44l-17.61,4.74l-1.7,-1.43l-0.41,-0.89l-0.1,-2.0l0.54,-0.59l0.03,-0.52l-1.02,-5.18Z",
            "name": "New Hampshire"
        },
        "US-NY": {
            "path": "M821.38,166.44l0.69,-2.05l0.62,-0.02l0.55,-0.75l0.76,0.15l0.54,-0.41l-0.04,-0.31l0.57,-0.03l0.28,-0.66l0.66,-0.02l0.2,-0.55l-0.42,-0.83l0.22,-0.53l0.61,-0.37l1.34,0.22l0.54,-0.59l1.45,-0.18l0.21,-0.8l1.85,0.02l1.08,-0.91l0.11,-0.78l0.62,0.24l0.43,-0.61l4.83,-1.29l2.26,-1.3l1.99,-2.91l-0.2,1.16l-0.98,0.86l-1.22,2.31l0.55,0.46l1.6,-0.35l0.28,0.63l-0.43,0.49l-1.37,0.87l-0.51,-0.07l-2.26,0.92l-0.08,0.93l-0.87,-0.0l-2.73,1.72l-1.01,0.15l-0.17,0.8l-1.24,0.09l-2.24,1.91l-4.44,2.17l-0.2,0.71l-0.29,0.08l-0.45,-0.83l-1.41,-0.06l-0.73,0.42l-0.42,0.8l0.23,0.32l-0.92,0.69l-0.76,-0.84l0.32,-1.05ZM828.05,159.06l-0.02,-0.01l0.02,-0.06l-0.01,0.08ZM845.16,149.05l0.06,-0.06l0.18,-0.06l-0.11,0.19l-0.13,-0.07ZM844.3,154.94l0.1,-0.89l0.74,-1.16l1.65,-1.52l1.01,0.31l0.05,-0.82l0.79,0.67l-3.36,3.21l-0.67,0.45l-0.31,-0.25ZM850.39,150.14l0.02,-0.03l0.07,-0.07l-0.09,0.1ZM722.09,155.56l3.76,-3.85l1.27,-2.19l1.76,-1.86l1.16,-0.78l1.28,-3.35l1.56,-1.3l0.53,-0.83l-0.21,-1.83l-1.61,-2.42l0.43,-1.13l-0.17,-0.78l-0.83,-0.53l-2.11,-0.0l0.04,-0.99l-0.57,-2.22l4.99,-2.94l4.49,-1.8l2.38,-0.19l1.84,-0.74l5.64,-0.24l3.13,1.25l3.16,-1.68l5.49,-1.06l0.58,0.45l0.68,-0.2l0.12,-0.98l1.45,-0.72l1.03,-0.93l0.75,-0.2l0.69,-2.05l1.87,-1.76l0.79,-1.26l1.12,0.03l1.13,-0.52l1.07,-1.63l-0.46,-0.7l0.36,-1.2l-0.25,-0.51l-0.64,0.02l-0.17,-1.17l-0.94,-1.59l-1.01,-0.62l0.12,-0.18l0.59,0.39l0.53,-0.27l0.75,-1.44l-0.01,-0.91l0.81,-0.65l-0.01,-0.97l-0.93,-0.19l-0.6,0.7l-0.28,0.12l0.56,-1.3l-0.81,-0.62l-1.26,0.05l-0.87,0.77l-0.92,-0.41l-0.06,-0.29l2.05,-2.5l1.78,-1.47l1.67,-2.64l0.7,-0.56l0.11,-0.59l0.78,-0.95l0.07,-0.56l-0.5,-0.95l0.78,-1.89l4.82,-7.61l4.77,-4.5l2.84,-0.51l19.67,-5.66l0.41,0.88l-0.08,2.01l1.02,1.22l0.43,3.8l2.29,3.25l-0.09,1.89l0.85,2.42l-0.59,1.07l-0.0,3.41l0.71,0.9l1.32,2.76l0.19,1.09l0.62,0.84l0.12,3.92l0.55,0.85l0.54,0.07l0.53,-0.61l0.06,-0.87l0.33,-0.07l1.05,1.12l3.97,15.58l0.74,1.2l0.22,15.32l0.6,0.62l3.57,16.23l1.26,1.34l-2.82,3.18l0.03,0.54l1.52,1.31l0.19,0.6l-0.78,0.88l-0.64,1.8l-0.41,0.39l0.15,0.69l-1.25,0.64l0.04,-4.02l-0.57,-2.28l-0.74,-1.62l-1.46,-1.1l-0.17,-1.13l-0.7,-0.1l-0.42,1.33l0.68,1.27l1.05,0.83l0.97,2.85l-13.75,-4.06l-1.28,-1.47l-2.39,0.24l-0.63,-0.43l-1.06,-0.15l-1.74,-1.91l-0.75,-2.33l0.12,-0.72l-0.36,-0.63l-0.56,-0.21l0.09,-0.46l-0.35,-0.42l-1.64,-0.68l-1.08,0.32l-0.53,-1.22l-1.92,-0.93l-34.6,8.73l-34.44,7.84l-1.11,-5.15ZM818.84,168.69l1.08,-0.48l0.14,0.63l-1.17,1.53l-0.05,-1.68ZM730.07,136.63l0.03,-0.69l0.78,-0.07l-0.38,1.09l-0.43,-0.33Z",
            "name": "New York"
        },
        "US-HI": {
            "path": "M295.5,583.17l0.06,-1.75l4.12,-4.97l1.03,-3.4l-0.33,-0.64l0.94,-2.43l-0.05,-3.52l0.39,-0.78l2.47,-0.7l1.55,0.23l4.45,-1.4l0.51,-0.7l-0.17,-2.69l0.4,-1.66l1.78,-1.16l1.74,2.15l-0.15,0.94l1.88,3.6l0.94,0.35l5.13,7.65l0.86,3.93l-1.52,3.14l0.22,0.58l1.47,0.95l-0.68,2.07l0.35,1.51l1.6,3.0l-1.39,0.86l-2.28,-0.2l-3.27,0.51l-4.56,-1.32l-2.15,-1.34l-6.66,-0.15l-1.59,0.26l-1.56,1.19l-1.63,0.58l-1.14,0.02l-0.7,-2.54l-2.09,-2.18ZM306.33,530.7l1.6,0.08l0.51,2.07l-0.3,2.25l0.37,0.59l2.33,0.88l1.38,0.1l1.55,1.39l0.27,1.55l0.93,0.97l-0.13,1.05l1.83,2.52l-0.13,0.66l-0.61,0.48l-1.82,0.38l-1.84,-0.18l-1.47,-1.19l-2.21,-0.24l-2.69,-1.48l0.01,-1.23l1.15,-1.86l0.41,-2.07l-1.76,-1.28l-1.08,-1.75l-0.1,-2.61l1.79,-1.08ZM297.2,518.01l0.71,0.31l0.38,1.05l2.64,2.0l0.9,1.11l0.92,0.08l0.8,1.67l1.56,1.05l0.72,0.06l1.07,1.11l-1.31,0.41l-2.75,-0.66l-3.23,-3.93l-3.16,-2.01l-1.39,-0.44l-0.05,-0.7l1.58,-0.43l0.62,-0.67ZM301.59,541.55l-2.09,-0.98l-0.28,-0.51l2.92,0.34l-0.56,1.15ZM298.23,532.36l-0.92,-0.29l-0.72,-0.89l0.92,-2.06l-0.49,-1.73l2.6,1.38l0.61,2.08l0.14,1.06l-2.15,0.45ZM281.13,503.64l0.57,-1.85l-0.38,-0.9l-0.16,-2.84l0.75,-0.92l-0.12,-1.22l2.74,1.9l2.9,-0.62l1.56,0.15l0.38,1.01l-0.33,2.17l0.29,1.5l-0.69,0.6l-0.19,1.55l0.38,1.54l0.86,0.51l0.29,1.07l-0.52,1.14l0.53,1.28l-1.18,-0.0l-0.2,-0.48l-2.04,-0.86l-0.77,-2.83l-1.27,-0.38l0.8,-0.11l0.32,-0.46l-0.08,-0.66l-0.63,-0.68l-1.75,-0.32l0.23,1.82l-2.28,-1.1ZM259.66,469.47l-0.24,-2.03l-0.91,-0.69l-0.68,-1.23l0.08,-1.2l0.08,-0.34l2.39,-0.81l4.6,0.53l0.67,1.04l2.51,1.09l0.69,1.25l-0.15,1.9l-2.3,1.32l-0.74,1.3l-0.79,0.34l-2.78,0.09l-0.92,-1.53l-1.52,-1.0ZM245.78,462.61l-0.23,-0.74l1.03,-0.75l4.32,-0.72l0.43,0.3l-0.92,0.4l-0.68,0.94l-1.66,-0.5l-1.36,0.34l-0.94,0.72Z",
            "name": "Hawaii"
        },
        "US-VT": {
            "path": "M805.56,72.69l26.03,-7.97l0.89,1.85l-0.74,2.37l-0.03,1.54l2.22,2.75l-0.51,0.58l0.26,1.13l-0.67,1.6l-1.35,1.49l-0.64,1.32l-1.72,0.7l-0.62,0.92l-0.1,0.98l0.93,3.74l-0.29,2.44l0.4,0.54l-0.6,2.11l0.15,2.19l-1.0,1.87l0.27,2.36l-0.53,1.54l1.43,5.44l-0.22,1.22l1.05,5.3l-0.58,0.85l0.11,2.31l0.6,1.26l1.51,1.1l-11.44,2.89l-0.57,-0.85l-4.02,-15.75l-1.72,-1.59l-0.91,0.25l-0.3,1.19l-0.12,-0.26l-0.11,-3.91l-0.68,-1.0l-0.14,-0.98l-1.37,-2.85l-0.63,-0.68l0.01,-3.15l0.6,-1.15l-0.86,-2.57l0.08,-1.93l-0.39,-0.91l-1.55,-1.63l-0.38,-0.81l-0.41,-3.71l-1.03,-1.27l0.11,-1.87l-0.43,-1.01Z",
            "name": "Vermont"
        },
        "US-NM": {
            "path": "M230.86,422.88l11.82,-123.66l25.67,2.24l26.1,1.86l26.12,1.45l25.74,1.02l-0.31,10.24l-0.74,0.39l-3.59,98.69l-32.38,-1.34l-33.53,-2.02l-0.44,0.76l0.54,2.31l0.44,1.26l0.99,0.76l-30.55,-2.46l-0.43,0.36l-0.82,9.46l-14.63,-1.33Z",
            "name": "New Mexico"
        },
        "US-NC": {
            "path": "M826.87,289.49l0.07,-0.05l-0.02,0.03l-0.04,0.02ZM819.58,272.4l0.2,0.23l-0.05,0.01l-0.16,-0.24ZM821.84,276.68l0.19,0.15l-0.02,0.18l-0.05,-0.08l-0.12,-0.25ZM676.72,321.77l0.92,0.17l1.52,-0.39l0.42,-0.39l0.52,-0.97l0.13,-2.7l1.34,-1.19l0.47,-1.05l2.24,-1.47l2.12,-0.52l0.76,0.18l1.32,-0.52l2.36,-2.52l0.78,-0.25l1.84,-2.29l1.48,-1.0l1.55,-0.19l1.15,-2.65l-0.28,-1.22l1.66,0.06l0.51,-1.65l0.93,-0.77l1.08,-0.77l0.51,1.52l1.07,0.33l1.34,-1.17l1.35,-2.64l2.49,-1.59l0.79,0.08l0.82,0.8l1.06,-0.21l0.84,-1.07l1.47,-4.18l1.08,-1.1l1.47,0.09l0.44,-0.31l-0.69,-1.26l0.4,-2.0l-0.42,-0.9l0.38,-1.25l7.42,-0.86l19.54,-3.36l37.22,-8.42l31.12,-7.87l0.4,1.21l3.54,3.24l1.0,1.53l-1.21,-1.0l-0.16,-0.63l-0.92,-0.4l-0.52,0.05l-0.24,0.65l0.66,0.54l0.59,1.56l-0.53,0.01l-0.91,-0.75l-2.31,-0.8l-0.4,-0.48l-0.55,0.13l-0.31,0.69l0.14,0.64l1.37,0.44l1.69,1.38l-1.11,0.66l-2.48,-1.2l-0.36,0.51l0.14,0.42l1.6,1.18l-1.84,-0.33l-2.23,-0.87l-0.46,0.14l0.01,0.48l0.6,0.7l1.71,0.83l-0.97,0.58l0.0,0.6l-0.43,0.53l-1.48,0.74l-0.89,-0.77l-0.61,0.22l-0.1,0.35l-0.2,-0.13l-1.32,-2.32l0.21,-2.63l-0.42,-0.48l-0.89,-0.22l-0.37,0.64l0.62,0.71l-0.43,0.99l-0.02,1.04l0.49,1.73l1.6,2.2l-0.31,1.28l0.48,0.29l2.97,-0.59l2.1,-1.49l0.27,0.01l0.37,0.79l0.76,-0.34l1.56,0.05l0.16,-0.71l-0.57,-0.32l1.29,-0.76l2.04,-0.46l-0.1,1.19l0.64,0.29l-0.6,0.88l0.89,1.19l-0.84,0.1l-0.19,0.66l1.38,0.46l0.26,0.94l-1.21,0.05l-0.19,0.66l0.66,0.59l1.25,-0.16l0.52,0.26l0.4,-0.38l0.18,-1.95l-0.75,-3.33l0.41,-0.48l0.56,0.43l0.94,0.06l0.28,-0.57l-0.29,-0.44l0.48,-0.57l1.71,1.84l-0.0,1.41l0.62,0.9l-0.53,0.18l-0.25,0.47l0.9,1.14l-0.08,0.37l-0.42,0.55l-0.78,0.09l-0.91,-0.86l-0.32,0.33l0.13,1.26l-1.08,1.61l0.2,0.57l-0.32,0.22l-0.15,0.98l-0.74,0.55l0.1,0.91l-0.9,0.96l-1.06,0.21l-0.59,-0.37l-0.52,0.52l-0.93,-0.81l-0.86,0.1l-0.4,-0.82l-0.59,-0.21l-0.52,0.38l0.08,0.94l-0.52,0.22l-1.42,-1.25l1.31,-0.4l0.23,-0.88l-0.57,-0.42l-2.02,0.31l-1.14,1.01l0.29,0.67l0.44,0.16l0.09,0.82l0.35,0.25l-0.03,0.12l-0.57,-0.34l-1.69,0.83l-1.12,-0.43l-1.45,0.06l-3.32,-0.7l0.42,1.08l0.97,0.45l0.36,0.64l0.63,0.11l0.87,-0.32l1.68,0.63l2.35,0.39l3.51,0.11l0.47,0.42l-0.06,0.52l-0.99,0.05l-0.38,0.5l0.13,0.23l-1.62,1.44l0.32,0.58l1.85,0.01l-2.55,3.5l-1.67,0.04l-1.59,-0.98l-0.9,-0.19l-1.21,-1.02l-1.12,0.07l0.07,0.47l1.04,1.14l2.32,2.09l2.68,0.26l1.31,0.49l1.71,-2.16l0.51,0.47l1.17,0.33l0.4,-0.57l-0.55,-0.9l0.87,0.16l0.19,0.57l0.66,0.24l1.63,-1.2l-0.18,0.61l0.29,0.57l-0.29,0.38l-0.43,-0.2l-0.41,0.37l0.03,0.9l-0.97,1.72l0.01,0.78l-0.71,-0.07l-0.06,-0.74l-1.12,-0.61l-0.42,0.47l0.27,1.45l-0.52,-1.1l-0.65,-0.16l-1.22,1.08l-0.21,0.52l0.25,0.27l-2.03,0.32l-2.75,1.84l-0.67,-1.04l-0.75,-0.29l-0.37,0.49l0.43,1.26l-0.57,-0.01l-0.09,0.82l-0.94,1.73l-0.91,0.85l-0.59,-0.26l0.49,-0.69l-0.02,-0.77l-1.06,-0.93l-0.08,-0.52l-1.69,-0.41l-0.16,0.47l0.43,1.16l0.2,0.33l0.58,0.07l0.3,0.61l-0.88,0.37l-0.08,0.71l0.65,0.64l0.77,0.18l-0.01,0.37l-2.12,1.67l-1.92,2.65l-2.0,4.31l-0.34,2.13l0.12,1.34l-0.15,-1.03l-1.01,-1.59l-0.55,-0.17l-0.3,0.48l1.17,3.95l-0.63,2.27l-3.9,0.19l-1.43,0.65l-0.35,-0.52l-0.58,-0.18l-0.54,1.07l-1.9,1.14l-0.61,-0.02l-23.25,-15.36l-1.05,-0.02l-18.68,3.49l-0.65,-2.77l-3.25,-2.84l-0.47,0.08l-1.23,1.31l-0.01,-1.29l-0.82,-0.54l-22.82,3.35l-0.64,-0.27l-0.62,0.46l-0.25,0.65l-3.98,1.93l-0.89,1.23l-1.01,0.08l-4.78,2.66l-20.95,3.93l-0.34,-4.55l0.7,-0.95ZM817.0,271.48l0.19,0.35l0.24,0.39l-0.45,-0.41l0.02,-0.32ZM807.53,290.29l0.2,0.32l-0.16,-0.09l-0.03,-0.23ZM815.31,299.15l0.16,-0.36l0.16,0.07l-0.13,0.29l-0.19,0.01ZM812.76,299.11l-0.06,-0.28l-0.03,-0.11l0.3,0.26l-0.21,0.13ZM812.97,264.02l0.37,-0.24l0.15,0.42l-0.42,0.07l-0.1,-0.25ZM791.92,329.4l0.04,-0.08l0.22,0.03l-0.0,0.09l-0.26,-0.05Z",
            "name": "North Carolina"
        },
        "US-ND": {
            "path": "M438.54,42.78l2.06,6.9l-0.73,2.53l0.57,2.36l-0.27,1.17l0.47,1.99l0.01,3.26l1.42,3.95l0.45,0.54l-0.08,0.97l0.39,1.52l0.62,0.74l1.48,3.74l-0.06,3.9l0.42,0.7l0.5,8.35l0.51,1.54l0.51,0.25l-0.47,2.64l0.36,1.63l-0.14,1.75l0.69,1.1l0.2,2.16l0.49,1.13l1.8,2.56l0.15,2.2l0.51,1.08l0.17,1.39l-0.24,1.36l0.28,1.74l-27.89,0.73l-28.38,0.19l-28.38,-0.37l-28.49,-0.93l2.75,-65.47l23.08,0.78l25.57,0.42l25.57,-0.06l24.11,-0.49Z",
            "name": "North Dakota"
        },
        "US-NE": {
            "path": "M422.58,174.02l3.92,2.71l3.93,1.9l1.34,-0.22l0.51,-0.47l0.36,-1.08l0.48,-0.2l2.49,0.34l1.32,-0.47l1.58,0.25l3.45,-0.65l2.37,1.98l1.4,0.14l1.55,0.77l1.45,0.08l0.88,1.1l1.49,0.17l-0.06,0.98l1.68,2.08l3.32,0.6l0.19,0.68l-0.22,1.87l1.13,1.94l0.01,2.29l1.15,1.08l0.34,1.72l1.73,1.46l0.07,1.88l1.5,2.11l-0.49,2.33l0.44,3.09l0.52,0.54l0.94,-0.2l-0.04,1.25l1.21,0.5l-0.41,2.36l0.21,0.44l1.12,0.4l-0.6,0.77l-0.09,1.01l0.13,0.59l0.82,0.5l0.16,1.45l-0.26,0.92l0.26,1.27l0.55,0.61l0.3,1.93l-0.22,1.33l0.23,0.72l-0.57,0.92l0.02,0.79l0.45,0.88l1.23,0.63l0.25,2.5l1.1,0.51l0.03,0.79l1.18,2.75l-0.23,0.96l1.16,0.21l0.8,0.99l1.1,0.24l-0.15,0.96l1.31,1.68l-0.21,1.12l0.51,0.91l-26.15,1.05l-27.83,0.63l-27.84,0.14l-27.89,-0.35l0.46,-21.66l-0.39,-0.41l-32.36,-1.04l1.85,-43.24l43.36,1.22l44.67,-0.04Z",
            "name": "Nebraska"
        },
        "US-LA": {
            "path": "M508.97,412.97l-1.33,-21.76l51.44,-4.07l0.34,0.83l1.48,0.66l-0.92,1.35l-0.25,2.13l0.49,0.72l1.18,0.31l-1.21,0.47l-0.45,0.78l0.45,1.36l1.05,0.84l0.08,2.15l0.46,0.54l1.51,0.74l0.45,1.05l1.42,0.44l-0.87,1.22l-0.85,2.34l-0.75,0.04l-0.52,0.51l-0.02,0.73l0.63,0.72l-0.22,1.16l-1.35,0.96l-1.08,1.89l-1.37,0.67l-0.68,0.83l-0.79,2.42l-0.25,3.52l-1.55,1.74l0.13,1.21l0.62,0.96l-0.35,2.38l-1.61,0.29l-0.6,0.57l0.28,0.97l0.64,0.59l-0.26,1.41l0.98,1.51l-1.18,1.18l-0.08,0.45l0.4,0.23l6.18,-0.55l29.23,-2.92l-0.68,3.47l-0.52,1.02l-0.2,2.24l0.69,0.98l-0.09,0.66l0.6,1.0l1.31,0.7l1.22,1.42l0.14,0.88l0.89,1.39l0.14,1.05l1.11,1.84l-1.85,0.39l-0.38,-0.08l-0.01,-0.56l-0.53,-0.57l-1.28,0.28l-1.18,-0.59l-1.51,0.17l-0.61,-0.98l-1.24,-0.86l-2.84,-0.47l-1.24,0.63l-1.39,2.3l-1.3,1.42l-0.42,0.91l0.07,1.2l0.55,0.89l0.82,0.57l4.25,0.82l3.35,-1.0l1.32,-1.19l0.68,-1.19l0.34,0.59l1.08,0.43l0.59,-0.4l0.81,0.03l0.51,-0.46l-0.76,1.21l-1.12,-0.12l-0.57,0.32l-0.38,0.62l0.0,0.83l0.77,1.22l1.48,-0.02l0.65,0.89l1.1,0.48l0.94,-0.21l0.51,-0.45l0.46,-1.11l-0.02,-1.37l0.93,-0.58l0.42,-0.99l0.23,0.05l0.1,1.16l-0.24,0.25l0.18,0.57l0.43,0.15l-0.07,0.75l1.34,1.08l0.34,-0.16l-0.48,0.59l0.18,0.63l-0.35,0.13l-0.52,-0.57l-0.92,-0.19l-1.0,1.89l-0.85,0.14l-0.46,0.53l0.16,1.19l-1.6,-0.61l-0.43,0.19l0.04,0.46l1.14,1.06l-1.17,-0.14l-0.92,0.61l0.68,0.43l1.26,2.04l2.74,0.97l-0.08,1.2l0.34,0.41l2.07,-0.32l0.77,0.17l0.17,0.53l0.73,0.32l1.35,-0.34l0.53,0.78l1.08,-0.46l1.13,0.74l0.14,0.3l-0.4,0.62l1.54,0.86l-0.39,0.65l0.39,0.58l-0.18,0.62l-0.95,1.49l-1.3,-1.56l-0.68,0.34l0.1,0.66l-0.38,0.12l0.41,-1.88l-1.33,-0.76l-0.5,0.5l0.2,1.18l-0.54,0.45l-0.27,-1.02l-0.57,-0.25l-0.89,-1.27l0.03,-0.77l-0.96,-0.14l-0.47,0.5l-1.41,-0.17l-0.41,-0.61l0.14,-0.63l-0.39,-0.46l-0.45,-0.02l-0.81,0.73l-1.18,0.02l0.12,-1.23l-0.46,-0.88l-0.91,0.04l0.09,-0.96l-0.37,-0.36l-0.91,-0.03l-0.22,0.58l-0.85,-0.38l-0.48,0.27l-2.61,-1.26l-1.24,-0.03l-0.67,-0.64l-0.61,0.19l-0.3,0.56l-0.05,1.25l1.72,0.94l1.67,0.35l-0.16,0.92l0.28,0.39l-0.34,0.35l0.23,0.68l-0.76,0.95l-0.02,0.66l0.81,0.97l-0.95,1.43l-1.33,0.94l-0.76,-1.15l0.22,-1.5l-0.35,-0.92l-0.49,-0.18l-0.4,0.36l-1.15,-1.08l-0.59,0.42l-0.76,-1.05l-0.62,-0.2l-0.64,1.33l-0.85,0.26l-0.88,-0.53l-0.86,0.53l-0.1,0.62l0.48,0.41l-0.68,0.56l-0.13,1.44l-0.46,0.13l-0.39,0.83l-0.92,0.08l-0.11,-0.68l-1.6,-0.4l-0.77,0.97l-1.92,-0.93l-0.3,-0.54l-0.99,0.01l-0.35,0.6l-1.16,-0.51l0.42,-0.4l0.01,-1.46l-0.38,-0.57l-1.9,-1.19l-0.08,-0.54l-0.83,-0.72l-0.09,-0.91l0.73,-1.15l-0.34,-1.14l-0.87,-0.19l-0.34,0.57l0.16,0.43l-0.59,0.81l0.04,0.91l-1.8,-0.4l0.07,-0.39l-0.47,-0.54l-1.97,0.76l-0.7,-2.22l-1.32,0.23l-0.18,-2.12l-1.31,-0.35l-1.89,0.3l-1.09,0.65l-0.21,-0.71l0.84,-0.26l-0.05,-0.8l-0.6,-0.58l-1.03,-0.1l-0.85,0.42l-0.95,-0.15l-0.4,0.8l-2.0,1.11l-0.63,-0.31l-1.29,0.71l0.54,1.37l0.8,0.31l0.97,1.51l-1.39,0.19l-1.83,1.03l-3.69,-0.4l-1.24,0.21l-3.09,-0.45l-1.99,-0.68l-1.81,-1.07l-3.7,-1.1l-3.19,-0.48l-2.53,0.58l-5.62,0.45l-1.0,0.26l-1.82,1.25l-0.59,-0.63l-0.26,-1.08l1.59,-0.47l0.7,-1.76l-0.02,-1.55l-0.39,-0.56l1.11,-1.54l0.23,-1.59l-0.5,-1.83l0.07,-1.46l-0.66,-0.7l-0.21,-1.04l0.83,-2.22l-0.64,-1.95l0.76,-0.84l0.3,-1.49l0.78,-0.94l0.79,-2.83l-0.18,-1.42l0.58,-0.97l-0.75,-1.33l0.84,-0.39l0.2,-0.44l-0.89,-1.36l0.03,-2.13l-1.07,-0.23l-0.57,-1.57l-0.92,-0.84l0.28,-1.27l-0.81,-0.76l-0.33,-0.95l-0.64,-0.34l0.22,-0.98l-1.16,-0.58l-0.81,-0.93l0.16,-2.46l-0.68,-1.93l-1.33,-1.98l-2.63,-2.21ZM607.49,467.45l-0.03,-0.03l-0.07,-0.04l0.13,-0.01l-0.03,0.08ZM607.51,465.85l-0.02,-0.01l0.03,-0.01l-0.02,0.02ZM567.04,468.98l-2.0,-0.42l-0.66,-0.5l0.73,-0.43l0.35,-0.76l0.39,0.49l0.83,0.21l-0.15,0.61l0.5,0.81ZM550.39,463.0l1.73,-1.05l3.34,1.07l-0.69,0.56l-0.17,0.81l-0.68,0.17l-3.53,-1.57Z",
            "name": "Louisiana"
        },
        "US-SD": {
            "path": "M336.37,128.84l0.3,-0.53l0.75,-19.93l28.5,0.93l28.4,0.37l28.4,-0.19l27.78,-0.73l-0.18,1.71l-0.73,1.71l-2.9,2.46l-0.42,1.27l1.59,2.13l1.06,2.06l0.55,0.36l1.74,0.24l1.01,0.84l0.57,1.02l1.45,38.83l-1.84,0.09l-0.42,0.56l0.24,1.44l0.88,1.14l0.01,1.45l-0.65,0.36l0.17,1.48l0.48,0.43l1.09,0.04l0.34,1.68l-0.16,0.91l-0.62,0.83l0.02,1.73l-0.68,2.45l-0.49,0.44l-0.67,1.88l0.5,1.1l1.33,1.08l-0.16,0.62l0.64,0.66l0.35,1.15l-1.65,-0.28l-0.34,-0.94l-0.85,-0.73l0.19,-0.61l-0.28,-0.59l-1.58,-0.23l-1.03,-1.18l-1.57,-0.11l-1.51,-0.75l-1.34,-0.12l-2.38,-1.99l-3.78,0.6l-1.65,-0.25l-1.19,0.46l-2.62,-0.33l-0.98,0.48l-0.76,1.45l-0.72,0.05l-3.67,-1.82l-4.13,-2.8l-44.83,0.05l-43.33,-1.22l1.79,-43.2Z",
            "name": "South Dakota"
        },
        "US-DC": {
            "path": "M781.25,216.97l0.45,-0.77l2.04,1.26l-0.66,1.14l-0.55,-1.05l-1.28,-0.58Z",
            "name": "District of Columbia"
        },
        "US-DE": {
            "path": "M798.52,195.11l0.42,-1.51l0.92,-1.11l1.72,-0.71l1.12,0.06l-0.33,0.56l-0.08,1.38l-1.13,1.92l0.1,1.09l1.11,1.1l-0.07,1.52l2.29,2.48l1.25,0.6l0.93,1.52l0.99,3.35l1.72,1.57l0.57,1.32l3.06,1.99l1.44,-0.09l0.45,1.25l-1.06,0.56l0.16,1.32l0.36,0.19l-0.83,0.57l-0.08,1.21l0.66,0.21l0.85,-0.73l0.71,0.34l0.3,-0.21l0.75,1.55l-10.19,2.82l-8.12,-26.12Z",
            "name": "Delaware"
        },
        "US-FL": {
            "path": "M630.28,423.69l47.19,-6.86l1.53,1.91l0.87,2.72l1.47,1.0l48.79,-5.11l1.03,1.38l0.03,1.09l0.55,1.05l1.04,0.48l1.64,-0.28l0.85,-0.75l-0.14,-4.57l-0.98,-1.49l-0.22,-1.77l0.28,-0.74l0.62,-0.3l0.12,-0.7l5.6,0.96l4.03,-0.16l0.14,1.24l-0.75,-0.12l-0.33,0.43l0.25,1.54l2.11,1.81l0.22,1.01l0.42,0.38l0.29,1.92l1.87,3.29l1.7,4.87l0.73,0.84l0.51,1.5l1.64,2.46l0.64,1.57l2.79,3.71l1.93,3.18l2.29,2.77l0.16,0.6l0.63,0.36l6.82,7.53l-0.48,-0.03l-0.27,0.61l-1.35,-0.02l-0.34,-0.65l0.38,-1.38l-0.16,-0.56l-2.3,-0.92l-0.46,0.53l1.0,2.8l0.78,0.97l2.14,4.77l9.92,13.71l1.37,3.11l3.66,5.34l-1.38,-0.35l-0.43,0.74l0.8,0.65l0.85,0.24l0.56,-0.22l1.46,0.94l2.05,3.05l-0.5,0.34l-0.12,0.53l1.16,0.53l0.89,1.83l-0.08,1.06l0.59,0.95l0.61,2.64l-0.27,0.75l0.93,8.98l-0.31,1.07l0.46,0.67l0.5,3.1l-0.81,1.46l0.07,2.23l-0.84,0.74l-0.22,1.8l-0.48,0.85l0.21,1.47l-0.3,1.75l0.54,1.74l0.45,0.23l-1.15,1.8l-0.39,1.28l-0.94,0.24l-0.53,-0.22l-1.37,0.45l-0.35,1.06l-0.89,0.3l-0.18,0.58l-0.85,0.67l-1.44,0.14l-0.27,-0.32l-1.23,-0.1l-0.9,1.05l-3.17,1.13l-1.06,-0.59l-0.7,-1.04l0.06,-1.79l1.0,0.84l1.64,0.47l0.26,0.63l0.52,0.07l1.35,-0.72l0.2,-0.69l-0.26,-0.64l-1.58,-1.11l-2.4,-0.26l-0.91,-0.46l-0.85,-1.67l-0.89,-0.72l0.22,-0.98l-0.48,-0.28l-0.53,0.15l-1.38,-2.51l-0.44,-0.3l-0.64,0.07l-0.44,-0.61l0.22,-0.89l-0.7,-0.65l-1.21,-0.6l-1.06,-0.08l-0.75,-0.54l-0.57,0.18l-2.8,-0.59l-0.5,0.64l0.25,-0.91l-0.46,-0.42l-0.87,0.12l-0.26,-0.72l-0.88,-0.65l-0.61,-1.41l-0.55,-0.11l-0.72,-2.94l-0.77,-1.0l-0.16,-1.52l-0.44,-0.83l-0.71,-0.89l-0.49,-0.15l-0.12,0.93l-1.29,-0.26l1.06,-1.3l0.3,-0.75l-0.12,-0.63l0.86,-1.46l0.65,-0.34l0.28,-0.83l-0.61,-0.38l-1.42,0.93l-0.89,1.29l-0.42,2.17l-1.37,0.35l-0.21,-1.33l-0.79,-1.33l-0.27,-4.04l-0.86,-0.6l1.63,-1.33l0.22,-0.97l-0.58,-0.42l-3.06,1.92l-0.75,-0.66l-0.4,0.26l-1.27,-0.89l-0.37,0.74l1.13,1.09l0.52,0.1l1.26,2.0l-1.04,0.23l-1.42,-0.38l-0.84,-1.6l-1.13,-0.6l-1.94,-2.55l-1.04,-2.28l-1.28,-0.87l0.1,-0.87l-0.97,-1.8l-1.77,-0.98l0.09,-0.67l0.99,-0.41l-0.35,-0.49l0.44,-0.73l-0.39,-0.35l0.4,-1.21l2.47,-4.47l-1.05,-2.41l-0.68,-0.46l-0.92,0.42l-0.28,0.93l0.29,1.2l-0.24,0.03l-0.73,-2.44l-0.99,-0.28l-1.19,-0.87l-1.52,-0.31l0.29,1.95l-0.48,0.61l0.27,0.59l2.21,0.56l0.25,0.97l-0.37,2.46l-0.31,-0.58l-0.8,-0.22l-2.13,-1.53l-0.41,0.2l-0.29,-0.63l0.59,-2.11l0.07,-2.97l-0.66,-1.97l0.42,-0.51l0.48,-1.91l-0.24,-0.54l0.66,-3.04l-0.35,-5.26l-0.71,-1.7l0.35,-0.47l-0.47,-2.18l-2.1,-1.33l-0.05,-0.52l-0.55,-0.43l-0.1,-1.01l-0.92,-0.73l-0.55,-1.51l-0.64,-0.25l-1.44,0.32l-1.03,-0.2l-1.57,0.54l-1.14,-1.74l-1.51,-0.48l-0.19,-0.6l-1.35,-1.51l-0.87,-0.59l-0.62,0.07l-1.52,-1.16l-0.8,-0.21l-0.51,-2.75l-3.06,-1.13l-0.65,-0.59l-0.52,-1.23l-2.15,-1.93l-2.19,-1.09l-1.45,-0.12l-3.44,-1.68l-2.85,0.98l-1.0,-0.4l-1.05,0.42l-0.35,0.68l-1.33,0.68l-0.5,0.7l0.03,0.64l-0.73,-0.22l-0.59,0.6l0.67,0.94l1.51,0.08l0.41,0.21l-3.03,0.23l-1.58,1.51l-0.91,0.45l-1.3,1.56l-1.56,1.03l-0.32,0.13l0.2,-0.48l-0.26,-0.54l-0.66,-0.04l-0.96,0.75l-1.12,1.5l-2.2,0.23l-2.11,1.06l-0.78,0.03l-0.27,-2.03l-1.71,-2.23l-2.21,-1.0l-0.18,-0.41l-2.51,-1.5l2.79,1.33l1.21,-0.74l0.0,-0.74l-1.32,-0.34l-0.36,0.55l-0.21,-1.01l-0.34,-0.1l0.13,-0.52l-0.49,-0.33l-1.39,0.61l-2.3,-0.76l0.65,-1.08l0.83,-0.1l1.03,-1.45l-0.91,-0.95l-0.46,0.12l-0.49,1.02l-0.44,-0.04l-0.81,0.56l-0.72,-0.9l-0.7,0.09l-0.17,0.38l-1.34,0.73l-0.14,0.68l0.29,0.46l-3.95,-1.35l-5.05,-0.71l0.12,-0.24l1.27,0.29l0.61,-0.53l2.1,0.39l0.23,-0.78l-0.94,-1.02l0.09,-0.7l-0.63,-0.28l-0.5,0.32l-0.28,-0.47l-1.9,0.19l-2.25,1.1l0.3,-0.63l-0.41,-0.58l-0.96,0.35l-0.58,-0.25l-0.23,0.44l0.2,0.71l-1.45,0.8l-0.4,0.63l-5.18,0.97l0.32,-0.52l-0.4,-0.52l-1.35,-0.28l-0.72,-0.53l0.69,-0.53l0.01,-0.78l-0.68,-0.13l-0.81,-0.66l-0.46,0.11l0.14,0.76l-0.42,1.77l-1.05,-1.39l-0.69,-0.45l-0.55,0.07l-0.3,0.71l0.82,1.77l-0.25,0.79l-1.39,0.99l-0.05,1.04l-0.6,0.22l-0.17,0.57l-1.48,0.56l0.28,-0.65l-0.21,-0.46l1.14,-1.03l0.07,-0.74l-0.4,-0.58l-1.19,-0.24l-0.41,-0.84l0.3,-1.7l-0.18,-1.61l-2.17,-1.12l-2.39,-2.46l0.32,-1.44l-0.15,-1.04ZM767.29,490.44l0.48,1.07l0.9,0.39l0.78,-0.15l1.41,1.67l0.91,0.58l1.86,0.69l1.61,0.07l0.55,-0.44l-0.08,-0.87l0.55,-0.65l-0.16,-1.21l0.76,-1.36l0.09,-1.81l-0.64,-1.62l-1.46,-2.01l-1.74,-1.32l-1.19,-0.13l-1.12,0.83l-1.83,3.16l-2.12,1.94l-0.13,0.77l0.57,0.41ZM644.36,434.13l-0.94,0.26l0.41,-0.44l0.53,0.18ZM665.13,435.7l0.98,-0.28l0.35,0.32l0.09,0.72l-1.42,-0.75ZM770.56,455.01l0.42,0.56l-0.43,0.75l0.0,-1.31ZM788.88,525.23l0.01,-0.07l0.01,0.03l-0.03,0.04ZM789.47,522.87l-0.22,-0.23l0.49,-0.32l-0.27,0.55ZM768.83,453.61l0.21,0.76l-0.31,2.33l0.28,1.79l-1.38,-3.23l1.19,-1.65ZM679.81,445.61l0.22,-0.2l0.36,0.02l-0.11,0.42l-0.47,-0.25Z",
            "name": "Florida"
        },
        "US-WA": {
            "path": "M38.52,55.26l0.46,-1.32l0.18,0.45l0.65,0.3l1.04,-0.74l0.43,0.59l0.7,-0.03l0.17,-0.77l-0.92,-1.56l0.79,-0.74l-0.09,-1.36l0.49,-0.39l-0.1,-1.03l0.81,-0.27l0.05,0.5l0.48,0.41l0.95,-0.31l-0.09,-0.68l-1.35,-1.65l-0.9,0.15l-1.88,-0.56l0.17,-1.98l0.66,0.53l0.52,-0.07l0.29,-0.56l-0.16,-0.67l3.3,-0.52l0.26,-0.69l-1.7,-0.96l-0.86,-0.14l-0.37,-1.51l-0.7,-0.42l-0.81,-0.02l0.32,-4.73l-0.49,-1.28l0.1,-0.69l-0.4,-0.34l0.76,-5.74l-0.13,-2.46l-0.45,-0.62l-0.16,-1.36l-0.65,-1.33l-0.73,-0.57l-0.32,-2.45l0.35,-2.27l-0.15,-1.11l1.74,-3.3l-0.52,-1.23l4.59,3.9l1.19,0.38l0.92,0.75l0.81,1.3l1.86,1.08l3.24,0.91l0.84,0.77l1.42,0.11l1.73,1.02l2.33,0.73l1.46,-0.47l0.52,0.29l0.55,0.69l-0.03,1.09l0.55,0.74l0.31,0.11l0.49,-0.35l0.07,-0.75l0.45,0.03l0.63,1.39l-0.4,0.58l0.34,0.49l0.56,-0.04l0.72,-0.84l-0.38,-1.7l1.03,-0.24l-0.44,0.23l-0.21,0.69l1.27,4.41l-0.46,0.1l-1.67,1.73l0.22,-1.29l-0.22,-0.41l-1.31,0.31l-0.38,0.81l0.09,0.95l-1.37,1.7l-1.98,1.38l-1.06,1.41l-0.96,0.69l-1.1,1.67l-0.06,0.71l0.62,0.6l0.96,0.12l2.77,-0.48l1.22,-0.58l-0.03,-0.7l-0.64,-0.23l-2.94,0.79l-0.35,-0.3l3.23,-3.42l3.06,-0.88l0.89,-1.51l1.73,-1.54l0.53,0.57l0.54,-0.19l0.22,-1.81l-0.06,2.25l0.26,0.91l-0.99,-0.21l-0.64,0.77l-0.41,-0.73l-0.52,-0.19l-0.39,0.64l0.3,0.71l0.02,1.63l-0.21,-1.07l-0.67,-0.21l-0.47,0.69l-0.07,0.75l0.46,0.66l-0.63,0.58l-0.0,0.45l0.42,0.17l1.68,-0.57l0.25,1.09l-1.08,1.79l-0.08,1.05l-0.83,0.7l0.13,1.0l-0.85,-0.68l1.12,-1.44l-0.23,-0.96l-1.96,1.08l-0.38,0.64l-0.05,-2.11l-0.52,0.02l-1.03,1.59l-1.26,0.53l-1.14,1.87l-1.51,0.3l-0.46,0.43l-0.21,1.18l1.11,-0.03l-0.25,0.36l0.27,0.37l0.93,0.02l0.06,0.68l0.53,0.47l0.52,-0.27l0.35,-1.76l0.14,0.42l0.83,-0.15l1.11,1.48l1.31,-0.61l1.65,-1.48l0.98,-1.56l0.63,0.78l0.73,0.14l0.44,-0.23l-0.06,-0.86l1.56,-0.55l0.35,-0.94l-0.33,-1.27l0.22,-1.19l-0.18,-1.36l0.83,0.2l0.3,-0.92l-0.19,-0.75l-0.72,-0.63l0.89,-1.13l0.07,-1.75l1.24,-1.24l0.61,-1.37l1.61,-0.49l0.78,-1.16l-0.45,-0.66l-0.51,-0.02l-0.86,-1.3l0.16,-2.09l-0.26,-0.87l0.49,-0.79l0.06,-0.84l-1.15,-1.73l-0.63,-0.4l-0.17,-0.64l0.18,-0.5l0.59,0.23l0.53,-0.33l0.24,-1.8l0.79,-0.24l0.3,-1.0l-0.61,-2.32l0.44,-0.53l-0.03,-0.86l-0.96,-0.88l-0.95,0.3l-1.09,-2.66l0.93,-1.83l41.31,9.4l38.96,7.65l-9.66,54.39l-0.47,1.02l1.04,3.0l0.13,2.0l-1.0,1.3l0.73,1.88l-31.18,-5.92l-1.67,0.79l-7.24,-1.02l-1.68,0.92l-4.19,-0.12l-3.18,0.45l-1.64,0.75l-0.88,-0.26l-1.2,0.3l-1.51,-0.23l-2.43,-0.94l-0.91,0.46l-3.45,0.51l-2.11,-0.71l-1.65,0.3l-0.31,-1.36l-1.09,-0.88l-4.34,-1.46l-2.32,-0.11l-1.15,-0.51l-1.27,0.21l-1.89,0.86l-4.5,0.58l-1.11,-0.71l-1.15,-0.3l-1.61,-1.15l-1.84,-0.51l-0.63,-0.81l0.64,-6.82l-0.47,-0.95l-0.22,-1.9l-0.98,-1.35l-1.96,-1.67l-2.82,-0.11l-1.03,-1.31l-0.15,-1.05l-0.56,-0.63l-2.36,-0.31l-0.56,-0.3l-0.24,-0.79l-0.5,-0.18l-0.97,0.35l-0.84,-0.26l-1.1,0.4l-0.97,-1.47l-0.89,-0.22ZM61.85,39.78l0.16,0.74l-0.42,0.49l0.0,-0.91l0.26,-0.31ZM71.27,20.38l-0.61,0.87l-0.15,0.52l0.11,-1.01l0.65,-0.38ZM71.14,15.62l-0.09,-0.05l0.05,-0.04l0.04,0.1ZM70.37,15.48l-0.77,0.39l0.37,-0.68l-0.07,-0.6l0.22,-0.07l0.25,0.97ZM57.56,42.45l0.05,-0.02l-0.01,0.01l-0.04,0.02ZM67.75,19.23l1.73,-2.1l0.47,-0.02l0.53,1.71l-0.35,-0.55l-0.51,-0.12l-0.55,0.44l-0.35,-0.09l-0.35,0.73l-0.63,-0.01ZM67.87,20.4l0.44,0.0l0.61,0.5l0.08,0.35l-0.79,-0.2l-0.33,-0.65ZM68.84,23.16l-0.1,0.51l-0.0,0.0l-0.02,-0.24l0.12,-0.28ZM69.15,25.42l0.08,0.04l0.12,-0.04l-0.16,0.11l-0.05,-0.1ZM69.52,25.33l0.48,-0.93l1.02,1.21l0.11,1.12l-0.34,0.36l-0.34,-0.09l-0.27,-1.55l-0.67,-0.12ZM66.34,9.97l0.48,-0.34l0.18,1.51l-0.22,-0.05l-0.44,-1.12ZM68.04,9.66l0.83,0.8l-0.65,0.31l-0.18,-1.11ZM66.69,38.03l0.34,-1.07l0.21,-0.25l-0.03,1.07l-0.52,0.26ZM66.99,33.31l0.1,-1.04l0.35,-0.34l-0.23,1.56l-0.22,-0.18ZM66.51,14.27l-0.41,-0.4l0.6,-0.75l-0.18,0.61l-0.01,0.55ZM66.68,14.62l0.4,0.2l-0.08,0.12l-0.29,-0.12l-0.03,-0.2ZM66.74,12.96l-0.01,-0.1l0.05,-0.12l-0.04,0.23ZM64.36,13.12l-1.06,-0.82l0.19,-1.81l1.33,1.92l-0.35,0.18l-0.11,0.54ZM62.18,42.55l0.23,-0.25l0.02,0.01l-0.13,0.31l-0.12,-0.07ZM60.04,40.3l-0.09,-0.19l0.04,-0.07l0.0,0.13l0.05,0.14Z",
            "name": "Washington"
        },
        "US-KS": {
            "path": "M477.9,239.67l0.44,0.63l0.76,0.18l1.04,0.8l2.19,-1.08l-0.0,0.75l1.08,0.79l0.23,1.44l-0.95,-0.15l-0.6,0.31l-0.17,0.97l-1.14,1.37l-0.06,1.14l-0.79,0.5l0.04,0.64l1.56,2.1l2.0,1.49l0.2,1.13l0.42,0.86l0.74,0.56l0.32,1.11l1.89,0.91l1.54,0.26l2.67,46.82l-31.55,1.48l-31.97,0.88l-31.98,0.26l-32.05,-0.37l1.21,-65.47l27.9,0.35l27.86,-0.14l27.85,-0.64l27.68,-1.12l1.65,1.23Z",
            "name": "Kansas"
        },
        "US-WI": {
            "path": "M598.7,107.43l0.83,-0.15l-0.13,0.81l-0.56,0.01l-0.14,-0.68ZM594.22,116.05l0.47,-0.41l0.26,-2.36l0.95,-0.25l0.64,-0.69l0.22,-1.4l0.41,-0.63l0.63,-0.03l0.06,0.38l-0.76,0.06l-0.18,0.51l0.17,1.27l-0.38,0.17l-0.11,0.58l0.56,0.57l-0.24,0.65l-0.5,0.33l-0.69,1.91l0.07,1.23l-1.05,2.28l-0.41,0.15l-0.86,-0.97l-0.19,-0.72l0.31,-1.57l0.62,-1.05ZM510.06,124.08l0.41,-0.27l0.28,-0.9l-0.45,-1.48l0.04,-1.91l0.7,-1.16l0.53,-2.25l-1.61,-2.91l-0.83,-0.36l-1.28,-0.01l-0.21,-2.31l1.67,-2.26l-0.05,-0.77l0.77,-1.55l1.95,-1.09l0.48,-0.75l0.97,-0.25l0.45,-0.75l1.16,-0.14l1.04,-1.56l-0.97,-12.11l1.03,-0.35l0.22,-1.1l0.73,-0.97l0.78,0.69l1.68,0.64l2.61,-0.56l3.28,-1.57l2.65,-0.82l2.21,-2.12l0.31,0.29l1.39,-0.11l1.25,-1.48l0.79,-0.58l1.04,-0.1l0.4,-0.52l1.07,0.99l-0.48,1.68l-0.67,1.01l0.23,1.61l-1.21,2.21l0.64,0.66l2.5,-1.09l0.72,-0.86l2.16,1.22l2.34,0.47l0.44,0.54l0.86,-0.13l1.6,0.7l2.23,3.54l15.48,2.52l4.65,1.96l1.68,-0.17l1.63,0.42l1.33,-0.59l3.17,0.71l2.18,0.09l0.85,0.41l0.56,0.89l-0.42,1.09l0.41,0.77l3.4,0.63l1.41,1.13l-0.16,0.71l0.59,1.11l-0.36,0.81l0.43,1.25l-0.78,1.25l-0.03,1.76l0.91,0.63l1.38,-0.26l1.02,-0.72l0.2,0.26l-0.79,2.44l0.04,1.31l1.32,1.46l0.84,0.35l-0.24,2.02l-2.42,1.2l-0.51,0.79l0.04,1.26l-1.61,3.49l-0.4,3.5l1.11,0.82l0.92,-0.04l0.5,-0.36l0.49,-1.37l1.82,-1.47l0.66,-2.53l1.06,-1.7l0.14,0.25l0.45,-0.07l0.57,-0.7l0.88,-0.4l1.12,1.12l0.59,0.19l-0.29,2.21l-1.18,2.82l-0.56,5.58l0.23,1.11l0.8,0.93l0.07,0.52l-0.51,0.98l-1.3,1.34l-0.86,3.89l0.15,2.57l0.72,1.2l0.06,1.24l-1.07,3.22l0.12,2.12l-0.73,2.11l-0.28,2.47l0.59,2.02l-0.04,1.32l0.49,0.54l-0.21,1.7l0.92,0.78l0.54,2.43l1.2,1.54l0.08,1.69l-0.33,1.45l0.47,2.95l-44.2,4.6l-0.19,-0.79l-1.56,-2.19l-4.94,-0.84l-1.06,-1.35l-0.36,-1.69l-0.9,-1.21l-0.86,-4.9l1.04,-2.62l-0.09,-0.99l-0.71,-0.79l-1.44,-0.48l-0.71,-1.76l-0.47,-6.02l-0.7,-1.4l-0.52,-2.56l-1.15,-0.6l-1.1,-1.56l-0.93,-0.11l-1.17,-0.75l-1.71,0.09l-2.67,-1.79l-2.3,-3.5l-2.64,-2.1l-2.94,-0.53l-0.73,-1.24l-1.12,-1.0l-3.12,-0.45l-3.53,-2.74l0.45,-1.24l-0.12,-1.61l0.25,-0.81l-0.88,-3.11ZM541.58,78.25l0.05,-0.28l0.03,0.16l-0.08,0.12ZM537.91,83.72l0.28,-0.21l0.05,0.08l-0.33,0.12Z",
            "name": "Wisconsin"
        },
        "US-OR": {
            "path": "M10.69,140.12l0.01,-1.77l0.5,-0.84l0.32,-1.95l1.12,-1.91l0.24,-1.9l-0.72,-2.57l-0.33,-0.15l-0.12,-1.81l3.04,-3.82l2.5,-5.98l0.01,0.77l0.52,0.52l0.49,-0.28l0.6,-1.6l0.47,-0.48l0.31,0.98l1.12,0.41l0.33,-0.54l-0.45,-1.76l0.27,-0.87l-0.45,-0.14l-0.79,0.32l1.74,-3.16l1.13,-0.96l0.89,0.3l0.49,-0.29l-0.47,-1.08l-0.81,-0.4l1.77,-4.63l0.47,-0.57l0.02,-0.99l1.08,-2.67l0.62,-2.6l1.04,-1.92l0.33,0.28l0.66,-0.33l-0.04,-0.6l-0.76,-0.62l1.06,-2.6l0.32,0.22l0.59,-0.19l0.13,-0.35l-0.04,-0.51l-0.57,-0.32l0.85,-3.84l1.23,-1.8l0.83,-3.04l1.14,-1.76l0.83,-2.45l0.26,-1.21l-0.18,-0.5l1.19,-1.08l-0.32,-1.64l0.96,0.57l0.78,-0.63l-0.39,-0.75l0.2,-0.65l-0.77,-0.77l0.51,-1.07l1.3,-0.86l0.06,-0.46l-0.93,-0.34l-0.33,-1.25l0.97,-2.14l-0.04,-1.48l0.86,-0.53l0.58,-1.33l0.18,-1.96l-0.21,-1.45l0.83,1.17l0.6,0.18l-0.11,0.89l0.55,0.53l0.83,-0.96l-0.27,-0.99l0.21,-0.07l0.24,0.56l0.69,0.32l1.51,0.04l0.37,-0.36l1.37,-0.19l0.99,2.08l2.43,0.92l1.25,-0.64l0.78,0.04l1.72,1.51l0.77,1.04l0.21,1.9l0.43,0.78l-0.03,2.05l-0.39,1.24l0.19,0.93l-0.43,1.74l0.26,1.45l0.79,0.85l1.94,0.56l1.44,1.05l1.36,0.41l1.04,0.69l4.98,-0.53l2.9,-1.06l1.14,0.51l2.23,0.09l4.24,1.43l0.69,0.54l0.19,1.15l0.57,0.58l1.86,-0.27l2.11,0.71l3.79,-0.55l0.69,-0.42l2.19,0.93l1.64,0.24l1.2,-0.3l0.88,0.26l1.89,-0.78l3.07,-0.43l4.16,0.13l1.61,-0.91l7.17,1.02l0.96,-0.19l0.79,-0.58l31.27,5.93l0.23,1.81l0.93,1.82l1.16,0.63l1.96,1.86l0.57,2.45l-0.16,1.0l-3.69,4.55l-0.4,1.41l-1.39,2.63l-2.21,2.42l-0.65,2.68l-1.49,1.84l-2.23,1.5l-1.92,3.35l-1.49,1.27l-0.62,2.02l-0.12,1.87l0.28,0.92l0.56,0.61l0.54,0.04l0.39,-0.35l0.63,0.76l0.89,-0.05l0.07,0.88l0.81,0.95l-0.46,1.0l-0.65,0.06l-0.33,0.4l0.21,1.8l-1.03,2.56l-1.22,1.41l-6.86,39.16l-26.21,-4.99l-28.9,-6.05l-28.8,-6.61l-28.95,-7.24l-1.48,-2.59l0.2,-2.36l-0.23,-0.89Z",
            "name": "Oregon"
        },
        "US-KY": {
            "path": "M583.02,306.59l0.35,-2.18l1.13,0.96l0.72,0.2l0.75,-0.36l0.46,-0.88l0.87,-3.55l-0.54,-1.75l0.38,-0.86l-0.1,-1.88l-1.27,-2.04l1.79,-3.21l1.24,-0.51l0.73,0.06l7.03,2.56l0.81,-0.2l0.65,-0.72l0.24,-1.93l-1.49,-2.14l-0.24,-1.44l0.2,-0.87l0.4,-0.52l1.1,-0.18l1.24,-0.83l3.0,-0.95l0.64,-0.51l0.15,-1.13l-1.53,-2.05l-0.08,-0.68l1.33,-1.97l0.14,-1.16l1.25,0.42l1.12,-1.33l-0.68,-2.0l1.92,0.9l1.72,-0.84l0.03,1.18l1.0,0.46l0.99,-0.94l0.02,-1.36l0.51,0.16l1.9,-0.96l4.41,1.52l0.64,0.94l0.86,0.18l0.59,-0.59l0.73,-2.53l1.38,-0.55l1.39,-1.34l0.86,1.29l0.77,0.42l1.16,-0.13l0.11,0.75l0.95,0.19l0.67,-0.62l0.03,-1.01l0.84,-0.38l0.26,-0.48l-0.25,-2.09l0.84,-0.4l0.34,-0.56l-0.06,-0.69l1.25,-0.56l0.34,-0.72l0.38,1.47l0.61,0.6l1.46,0.64l1.25,-0.0l1.11,0.81l0.53,-0.11l0.26,-0.55l1.1,-0.46l0.53,-0.69l0.04,-3.48l0.85,-2.18l1.02,0.18l1.55,-1.19l0.75,-3.46l1.04,-0.37l1.65,-2.23l0.0,-0.81l-1.18,-2.88l2.78,-0.59l1.54,0.81l3.85,-2.82l2.23,-0.46l-0.18,-1.07l0.36,-1.47l-0.32,-0.36l-1.22,-0.04l0.58,-1.39l-1.09,-1.54l1.65,-1.83l1.81,1.18l0.92,-0.11l1.93,-1.01l0.78,0.88l1.76,0.54l0.57,1.28l0.94,0.92l0.79,1.84l2.6,0.67l1.87,-0.57l1.63,0.27l2.18,1.85l0.96,0.43l1.28,-0.18l0.61,-1.31l0.99,-0.54l1.35,0.5l1.34,0.04l1.33,1.09l1.26,-0.69l1.41,-0.15l1.81,-2.55l1.72,-1.03l0.92,2.35l0.7,0.83l2.45,0.81l1.35,0.97l0.75,1.05l0.93,3.35l-0.37,0.45l0.09,0.72l-0.44,0.61l0.02,0.53l2.24,2.62l1.35,0.92l-0.08,0.89l1.34,0.97l0.58,1.36l1.55,1.2l0.98,1.62l2.14,0.84l1.09,1.12l2.14,0.25l-4.86,6.13l-5.06,4.16l-0.42,0.86l0.22,1.25l-2.07,1.93l0.04,1.64l-3.06,1.63l-0.8,2.38l-1.71,0.6l-2.7,1.83l-1.66,0.48l-3.39,2.42l-23.95,3.09l-8.8,1.42l-7.47,0.86l-7.68,0.46l-22.71,3.52l-0.64,-0.56l-3.63,0.09l-0.41,0.6l1.03,3.57l-23.0,2.73ZM580.9,306.78l-0.59,0.08l-0.06,-0.55l0.47,-0.01l0.18,0.49Z",
            "name": "Kentucky"
        },
        "US-CO": {
            "path": "M364.18,239.57l-1.22,65.87l-29.29,-0.9l-29.38,-1.43l-29.35,-1.95l-32.17,-2.75l8.33,-87.15l27.79,2.4l28.23,1.92l29.58,1.46l27.95,0.87l-0.46,21.66Z",
            "name": "Colorado"
        },
        "US-OH": {
            "path": "M664.99,178.81l1.67,0.47l1.04,-0.3l1.74,1.07l2.07,0.26l1.47,1.18l1.71,0.23l-2.19,1.18l-0.12,0.47l0.42,0.24l2.46,0.19l1.39,-1.1l1.77,-0.25l3.39,0.96l0.92,-0.08l1.48,-1.29l1.74,-0.6l1.15,-0.96l1.91,-0.97l2.62,-0.03l1.09,-0.62l1.24,-0.06l1.07,-0.8l4.24,-5.46l4.53,-3.47l6.92,-4.36l5.83,28.05l-0.51,0.54l-1.28,0.43l-0.41,0.95l1.65,2.24l0.02,2.11l0.41,0.26l0.31,0.94l-0.04,0.76l-0.54,0.83l-0.5,4.08l0.18,3.21l-0.58,0.41l0.34,1.11l-0.35,1.74l-0.39,0.54l0.76,1.23l-0.25,1.87l-2.41,2.65l-0.82,1.86l-1.37,1.5l-1.24,0.67l-0.6,0.7l-0.87,-0.92l-1.18,0.14l-1.32,1.74l-0.09,1.32l-1.78,0.85l-0.78,2.25l0.28,1.58l-0.94,0.85l0.3,0.67l0.63,0.41l0.27,1.3l-0.8,0.17l-0.5,1.6l0.06,-0.93l-0.91,-1.26l-1.53,-0.55l-1.07,0.71l-0.82,1.98l-0.34,2.69l-0.53,0.82l1.22,3.58l-1.27,0.39l-0.28,0.42l-0.25,3.12l-2.66,1.2l-1.0,0.05l-0.76,-1.06l-1.51,-1.1l-2.34,-0.73l-1.17,-1.92l-0.31,-1.14l-0.42,-0.33l-0.73,0.13l-1.84,1.17l-1.1,1.29l-0.4,1.05l-1.43,0.15l-0.87,0.61l-1.11,-1.0l-3.14,-0.59l-1.37,0.72l-0.53,1.25l-0.71,0.05l-3.04,-2.26l-1.93,-0.29l-1.77,0.56l-2.14,-0.52l-0.55,-1.54l-0.96,-0.97l-0.63,-1.38l-2.03,-0.76l-1.14,-1.01l-0.97,0.26l-1.31,0.89l-0.46,0.03l-1.79,-1.23l-0.61,0.2l-0.6,0.71l-8.53,-55.69l20.43,-4.26ZM675.61,181.34l0.53,-0.79l0.67,0.41l-0.48,0.35l-0.72,0.03ZM677.31,180.77l0.01,-0.0l0.01,-0.0l-0.02,0.0Z",
            "name": "Ohio"
        },
        "US-OK": {
            "path": "M399.06,359.31l-0.05,-42.03l-0.39,-0.4l-26.69,-0.22l-25.13,-0.6l0.31,-10.23l36.7,0.74l36.0,-0.07l35.99,-0.86l35.56,-1.62l0.6,10.68l4.55,24.34l1.41,37.88l-1.2,-0.22l-0.29,-0.36l-2.13,-0.21l-0.82,-0.79l-2.11,-0.39l-1.77,-2.05l-1.23,-0.22l-2.25,-1.57l-1.5,-0.4l-0.8,0.46l-0.23,0.88l-0.82,0.24l-0.46,0.62l-2.47,-0.14l-0.47,-0.19l-0.27,-0.68l-1.05,-0.61l-2.3,1.29l-1.17,0.2l-0.19,0.56l-0.63,0.28l-2.12,-0.77l-1.7,1.18l-1.17,0.08l-0.89,0.42l-0.83,1.37l-1.48,0.06l-0.57,1.25l-1.26,-1.55l-1.7,-0.1l-0.32,-0.58l-1.21,-0.46l-0.02,-0.96l-0.44,-0.5l-1.24,-0.18l-0.73,1.38l-0.66,0.11l-0.84,-0.5l-0.97,0.07l-0.71,-1.51l-1.09,-0.35l-1.17,0.57l-0.45,1.7l-0.7,-0.08l-0.49,0.43l0.29,0.73l-0.51,1.68l-0.43,0.19l-0.55,-0.55l-0.3,-0.91l0.39,-1.65l-0.75,-0.86l-0.8,0.18l-0.49,0.76l-0.84,-0.18l-0.92,0.98l-1.07,0.13l-0.53,-1.36l-1.99,-0.19l-0.3,-1.48l-1.19,-0.53l-0.82,0.33l-2.12,2.15l-1.21,0.51l-0.97,-0.38l0.19,-1.25l-0.28,-1.13l-2.33,-0.68l-0.07,-2.18l-0.43,-0.55l-2.11,0.39l-2.52,-0.25l-0.64,0.26l-0.81,1.21l-0.95,0.06l-1.77,-1.77l-0.97,-0.12l-1.5,0.56l-2.68,-0.63l-1.86,-1.0l-1.05,0.25l-2.46,-0.3l-0.17,-2.12l-0.85,-0.87l-0.44,-1.02l-1.16,-0.41l-0.7,-0.83l-0.83,0.08l-0.44,1.64l-2.22,-0.68l-1.07,0.6l-0.96,-0.09l-3.79,-3.78l-1.12,-0.43l-0.8,0.08Z",
            "name": "Oklahoma"
        },
        "US-WV": {
            "path": "M693.03,248.42l3.95,-1.54l0.35,-0.71l0.12,-2.77l1.15,-0.22l0.4,-0.61l-0.57,-2.49l-0.61,-1.24l0.49,-0.64l0.36,-2.77l0.68,-1.66l0.45,-0.39l1.24,0.55l0.41,0.71l-0.14,1.13l0.71,0.46l0.78,-0.44l0.48,-1.42l0.49,0.21l0.57,-0.2l0.2,-0.44l-0.63,-2.09l-0.75,-0.55l0.81,-0.79l-0.26,-1.71l0.74,-2.0l1.65,-0.51l0.17,-1.6l1.02,-1.42l0.43,-0.08l0.65,0.79l0.67,0.19l2.28,-1.59l1.5,-1.64l0.79,-1.83l2.45,-2.67l0.37,-2.41l-0.73,-1.0l0.71,-2.33l-0.25,-0.76l0.59,-0.58l-0.27,-3.43l0.47,-3.93l0.53,-0.8l0.08,-1.11l-0.38,-1.21l-0.39,-0.33l-0.04,-2.01l-1.57,-1.91l0.44,-0.54l0.85,-0.1l0.3,-0.33l4.03,19.34l0.47,0.31l16.6,-3.55l2.17,10.68l0.5,0.37l2.06,-2.5l0.97,-0.56l0.34,-1.03l1.63,-1.99l0.25,-1.05l0.52,-0.4l1.19,0.45l0.74,-0.32l1.32,-2.6l0.6,-0.46l-0.04,-0.85l0.42,0.59l1.81,0.52l3.2,-0.57l0.78,-0.86l0.07,-1.46l2.0,-0.74l1.02,-1.69l0.67,-0.1l3.16,1.5l1.81,-0.71l-0.45,1.02l0.56,0.92l1.27,0.42l0.09,0.96l1.13,0.43l0.09,1.2l0.33,0.42l-0.58,3.64l-9.0,-4.48l-0.64,0.24l-0.31,1.14l0.38,1.61l-0.52,1.62l0.41,2.28l-1.36,2.4l-0.42,1.76l-0.72,0.53l-0.42,1.11l-0.27,0.21l-0.61,-0.23l-0.37,0.33l-1.25,3.28l-1.84,-0.78l-0.64,0.25l-0.94,2.77l0.08,1.47l-0.73,1.14l-0.19,2.33l-0.89,2.2l-3.25,-0.36l-1.44,-1.76l-1.71,-0.24l-0.5,0.41l-0.26,2.17l0.19,1.3l-0.32,1.45l-0.49,0.45l-0.31,1.04l0.23,0.92l-1.58,2.44l-0.04,2.1l-0.52,2.0l-2.58,4.73l-0.75,3.16l0.14,0.76l1.14,0.55l-1.08,1.38l0.06,0.6l0.45,0.4l-2.16,2.13l-0.55,-0.7l-0.84,0.15l-3.12,2.53l-1.03,-0.56l-1.32,0.26l-0.44,0.91l0.45,1.17l-0.91,0.91l-0.73,-0.05l-2.27,1.0l-1.21,0.96l-2.18,-1.36l-0.73,-0.01l-0.82,1.58l-1.1,0.49l-1.22,1.46l-1.08,0.08l-1.98,-1.09l-1.31,-0.01l-0.61,-0.74l-1.19,-0.6l-0.31,-1.33l-0.89,-0.55l0.36,-0.67l-0.3,-0.81l-0.85,-0.37l-0.84,0.25l-1.33,-0.17l-1.26,-1.19l-2.06,-0.79l-0.76,-1.43l-1.58,-1.24l-0.7,-1.49l-1.0,-0.6l-0.12,-1.09l-1.38,-0.95l-2.0,-2.27l0.71,-2.03l-0.25,-1.62l-0.66,-1.46Z",
            "name": "West Virginia"
        },
        "US-WY": {
            "path": "M218.53,207.02l10.1,-86.6l25.46,2.74l26.8,2.4l26.83,1.91l27.85,1.46l-3.67,87.11l-27.32,-1.41l-28.21,-1.97l-29.69,-2.63l-28.14,-3.02Z",
            "name": "Wyoming"
        },
        "US-UT": {
            "path": "M178.67,180.38l41.53,5.44l-2.51,21.5l0.35,0.45l32.24,3.43l-8.33,87.15l-42.54,-4.67l-42.41,-5.77l16.08,-108.34l5.58,0.82ZM187.74,191.46l-0.3,0.04l-0.25,0.62l0.74,3.68l-0.81,0.19l-0.5,1.31l1.15,0.59l0.35,-0.84l0.37,-0.18l0.92,1.14l0.83,1.68l-0.25,1.0l0.16,1.45l-0.4,0.77l0.4,0.52l-0.05,0.56l1.58,1.84l0.02,0.59l1.13,1.92l0.71,-0.1l0.83,-1.74l0.08,2.28l0.53,0.94l0.06,1.8l0.99,0.47l1.65,-0.67l2.48,-1.77l0.37,-1.25l3.32,-1.44l0.17,-0.54l-0.52,-1.02l-0.68,-0.84l-1.36,-0.7l-1.87,-4.59l-0.87,-0.46l0.87,-0.92l1.3,0.6l1.33,-0.15l0.92,-0.83l-0.06,-1.12l-1.55,-0.5l-0.81,0.42l-1.17,-0.12l0.27,-0.76l-0.58,-0.79l-1.86,-0.22l-0.56,1.13l0.28,0.78l-0.35,0.69l0.55,2.44l-0.91,0.32l-0.34,-0.42l0.22,-1.8l-0.42,-0.69l-0.06,-1.74l-0.68,-0.6l-1.32,-0.11l-1.07,-1.55l-0.19,-0.69l0.64,-0.55l0.36,-1.29l-0.83,-1.38l-1.23,-0.28l-0.99,0.81l-2.73,0.2l-0.35,0.63l0.62,0.83l-0.28,0.43ZM199.13,204.0l0.03,0.02l0.04,0.11l-0.07,-0.13ZM199.17,204.81l0.31,0.91l-0.18,0.9l-0.39,-0.93l0.25,-0.88Z",
            "name": "Utah"
        },
        "US-IN": {
            "path": "M600.86,189.63l1.43,0.87l2.1,0.14l1.52,-0.38l2.63,-1.39l2.73,-2.1l32.3,-4.83l8.81,57.45l-0.66,1.15l0.3,0.92l0.81,0.79l-0.66,1.14l0.49,0.8l1.12,0.04l-0.36,1.14l0.18,0.51l-1.81,0.29l-3.18,2.55l-0.43,0.17l-1.4,-0.81l-3.46,0.91l-0.09,0.78l1.19,3.1l-1.4,1.88l-1.18,0.49l-0.45,0.89l-0.31,2.6l-1.11,0.88l-1.06,-0.24l-0.47,0.47l-0.85,1.95l0.05,3.14l-0.39,1.0l-1.38,0.85l-0.93,-0.68l-1.24,0.01l-1.48,-0.69l-0.62,-1.84l-1.89,-0.73l-0.44,0.3l-0.04,0.5l0.83,0.68l-0.62,0.31l-0.89,-0.35l-0.36,0.29l-0.04,0.48l0.54,0.93l-1.08,0.68l0.14,2.37l-1.06,0.65l-0.0,0.83l-0.16,0.37l0.08,-0.5l-0.33,-0.51l-1.6,0.18l-1.4,-1.69l-0.5,-0.08l-1.67,1.5l-1.57,0.69l-1.07,2.89l-0.81,-1.07l-2.79,-0.77l-1.11,-0.61l-1.08,-0.18l-1.76,0.92l-0.64,-1.02l-0.58,-0.18l-0.53,0.56l0.64,1.86l-0.34,0.84l-0.28,0.09l-0.02,-1.18l-0.42,-0.4l-0.58,0.01l-1.46,0.79l-1.41,-0.84l-0.85,0.0l-0.48,0.95l0.71,1.55l-0.49,0.74l-1.15,-0.39l-0.07,-0.54l-0.53,-0.44l0.55,-0.63l-0.35,-3.09l0.96,-0.78l-0.07,-0.58l-0.44,-0.23l0.69,-0.46l0.25,-0.61l-1.17,-1.47l0.46,-1.16l0.32,0.19l1.39,-0.55l0.33,-1.8l0.55,-0.4l0.44,-0.92l-0.06,-0.83l1.52,-1.07l0.06,-0.69l-0.41,-0.93l0.57,-0.86l0.14,-1.29l0.87,-0.51l0.4,-1.91l-1.08,-2.54l0.22,-0.8l-0.16,-1.11l-0.93,-0.91l-0.61,-1.5l-1.05,-0.78l-0.04,-0.59l0.92,-1.39l-0.63,-2.25l1.27,-1.31l-6.5,-50.68Z",
            "name": "Indiana"
        },
        "US-IL": {
            "path": "M540.07,225.55l0.86,-0.35l0.37,-0.67l-0.23,-2.33l-0.73,-0.93l0.15,-0.41l0.72,-0.69l2.42,-0.98l0.71,-0.65l0.63,-1.68l0.17,-2.11l1.65,-2.47l0.27,-0.94l-0.03,-1.22l-0.59,-1.95l-2.23,-1.88l-0.11,-1.77l0.67,-2.38l0.45,-0.37l4.6,-0.85l0.81,-0.41l0.82,-1.12l2.55,-1.0l1.43,-1.56l-0.01,-1.57l0.4,-1.71l1.42,-1.46l0.29,-0.74l0.33,-4.37l-0.76,-2.14l-4.02,-2.47l-0.28,-1.5l-0.48,-0.82l-3.64,-2.48l44.58,-4.64l-0.01,2.66l0.57,2.59l1.37,2.49l1.31,0.95l0.76,2.6l1.26,2.71l1.42,1.84l6.6,51.49l-1.22,1.13l-0.1,0.69l0.67,1.76l-0.84,1.09l-0.03,1.11l1.19,1.09l0.56,1.41l0.89,0.82l-0.1,1.8l1.06,2.31l-0.28,1.49l-0.87,0.56l-0.21,1.47l-0.59,0.93l0.34,1.2l-1.48,1.13l-0.23,0.41l0.28,0.7l-0.93,1.17l-0.31,1.19l-1.64,0.67l-0.63,1.67l0.15,0.8l0.97,0.83l-1.27,1.15l0.42,0.76l-0.49,0.23l-0.13,0.54l0.43,2.94l-1.15,0.19l0.08,0.45l0.92,0.78l-0.48,0.17l-0.03,0.64l0.83,0.29l0.04,0.42l-1.31,1.97l-0.25,1.19l0.59,1.22l0.7,0.64l0.37,1.08l-3.31,1.22l-1.19,0.82l-1.24,0.24l-0.77,1.01l-0.18,2.04l0.3,0.88l1.4,1.93l0.07,0.54l-0.53,1.19l-0.96,0.03l-6.3,-2.43l-1.08,-0.08l-1.57,0.64l-0.68,0.72l-1.44,2.95l0.06,0.66l-1.18,-1.2l-0.79,0.14l-0.35,0.47l0.59,1.13l-1.24,-0.79l-0.01,-0.68l-1.6,-2.21l-0.4,-1.12l-0.76,-0.37l-0.05,-0.49l0.94,-1.35l0.2,-1.03l-0.32,-1.01l-1.44,-2.02l-0.47,-3.18l-2.26,-0.99l-1.55,-2.14l-1.95,-0.82l-1.72,-1.34l-1.56,-0.14l-1.82,-0.96l-2.32,-1.78l-2.34,-2.44l-0.36,-1.95l2.37,-6.85l-0.25,-2.32l0.98,-2.06l-0.38,-0.84l-2.66,-1.45l-2.59,-0.67l-1.29,0.45l-0.86,1.45l-0.46,0.28l-0.44,-0.13l-1.3,-1.9l-0.43,-1.52l0.16,-0.87l-0.54,-0.91l-0.29,-1.65l-0.83,-1.36l-0.94,-0.9l-4.11,-2.52l-1.01,-1.64l-4.53,-3.53l-0.73,-1.9l-1.04,-1.21l-0.04,-1.6l-0.96,-1.48l-0.75,-3.54l0.1,-2.94l0.6,-1.28ZM585.52,295.52l0.05,0.05l0.04,0.04l-0.05,-0.0l-0.04,-0.09Z",
            "name": "Illinois"
        },
        "US-AK": {
            "path": "M89.36,517.03l0.84,0.08l0.09,0.36l-0.3,0.32l-0.64,0.3l-0.15,-0.15l0.25,-0.4l-0.12,-0.31l0.04,-0.2ZM91.79,517.2l0.42,-0.02l0.19,-0.11l0.26,-0.56l1.74,-0.37l2.26,0.07l1.57,0.63l0.84,0.69l0.02,1.85l0.32,0.18l0.0,0.34l0.25,0.27l-0.35,0.09l-0.25,-0.16l-0.23,0.08l-0.41,-0.33l-0.29,-0.04l-0.69,0.23l-0.91,-0.21l-0.07,-0.26l-0.24,-0.17l0.27,-0.21l0.74,0.72l0.46,-0.02l0.2,-0.48l-0.28,-0.44l-0.03,-0.3l-0.31,-0.67l-0.96,-0.52l-1.05,0.27l-0.57,0.69l-1.04,0.3l-0.44,-0.3l-0.48,0.12l-0.06,0.12l-0.63,-0.14l-0.26,0.06l-0.22,0.24l0.2,-0.3l-0.1,-0.55l0.12,-0.79ZM99.83,520.19l0.3,-0.07l0.29,-0.28l-0.03,-0.55l0.31,0.2l-0.06,0.45l0.83,0.92l-0.93,-0.51l-0.44,0.41l-0.13,-0.54l-0.13,-0.04ZM100.07,520.81l0.0,0.04l-0.03,0.0l0.02,-0.04ZM102.01,520.78l0.05,-0.34l0.33,-0.2l0.01,-0.12l-0.58,-1.24l0.1,-0.2l0.59,-0.24l0.29,-0.3l0.65,-0.34l0.62,-0.01l0.41,-0.13l0.81,0.1l1.42,-0.06l0.64,0.15l0.49,0.27l0.88,0.11l0.27,0.15l0.23,-0.22l0.27,-0.05l0.39,0.09l0.2,0.21l0.26,-0.05l0.2,0.38l0.44,0.31l0.1,0.23l0.7,-0.06l0.3,-0.77l0.44,-0.61l0.47,-0.21l1.78,-0.45l0.5,0.04l0.37,0.23l1.13,-0.38l0.66,0.04l-0.11,0.41l0.43,0.51l0.42,0.26l0.62,0.06l0.42,-0.43l0.14,-0.42l-0.34,-0.29l-0.31,-0.03l0.15,-0.44l-0.15,-0.38l1.04,-1.0l0.83,-0.99l0.12,-0.08l0.34,0.17l0.38,-0.02l0.32,0.3l0.19,0.37l0.66,-0.29l-0.1,-0.57l-0.43,-0.58l-0.46,-0.24l0.15,-0.44l0.77,-0.47l0.36,0.04l0.68,-0.2l0.8,-0.08l0.58,0.18l0.45,-0.16l-0.12,-0.52l0.66,-0.6l0.4,0.06l0.26,-0.11l0.43,-0.52l0.34,-0.12l0.23,-0.46l-0.42,-0.3l-0.38,0.03l-0.33,0.15l-0.36,0.39l-0.51,-0.09l-0.5,0.27l-2.19,-0.52l-1.69,-0.24l-0.71,-0.26l-0.12,-0.2l0.17,-0.32l0.04,-0.44l-0.28,-0.56l0.45,-0.35l0.43,-0.13l0.36,0.38l0.04,0.25l-0.15,0.44l0.07,0.39l0.56,0.12l0.32,-0.15l-0.03,-0.3l0.16,-0.35l-0.05,-0.75l-0.84,-1.05l0.01,-0.7l-0.67,-0.19l-0.19,0.24l-0.06,0.48l-0.41,0.22l-0.09,0.03l-0.26,-0.56l-0.34,-0.09l-0.51,0.41l-0.02,0.26l-0.15,0.15l-0.38,-0.02l-0.48,0.27l-0.24,0.54l-0.22,1.13l-0.13,0.32l-0.19,0.05l-0.31,-0.31l0.1,-2.67l-0.23,-0.99l0.19,-0.33l0.02,-0.27l-0.16,-0.29l-0.53,-0.27l-0.46,0.26l-0.1,-0.07l-0.35,0.13l-0.01,-0.54l-0.54,-0.61l0.19,-0.22l0.08,-0.65l-0.16,-0.37l-0.55,-0.26l-1.89,-0.01l-0.58,-0.34l-1.01,-0.12l-0.16,-0.12l-0.07,-0.22l-0.23,-0.07l-1.06,0.53l-0.75,-0.16l-0.12,-0.44l0.3,0.09l0.48,-0.08l0.31,-0.44l-0.21,-0.49l0.37,-0.49l0.83,0.04l0.43,-0.16l0.12,-0.35l-0.14,-0.42l-1.11,-0.64l0.09,-0.27l0.34,-0.17l0.38,-0.44l1.12,-0.0l0.23,-0.09l0.19,-0.32l0.03,-0.95l0.22,-0.54l0.07,-1.42l0.25,-0.45l-0.08,-0.58l0.07,-0.2l0.88,-0.74l0.02,-0.1l-0.09,-0.02l0.19,-0.16l-0.31,-0.35l-0.27,0.05l-0.04,-0.25l-0.09,-0.04l0.57,-0.22l0.33,-0.25l0.51,-0.1l0.24,-0.25l0.42,-0.0l0.19,0.18l0.41,0.08l0.29,-0.08l0.44,-0.55l-0.3,-0.34l-0.39,-0.07l-0.05,-0.33l-0.27,-0.31l-0.6,0.4l-0.43,-0.07l-1.12,0.62l-1.04,0.06l-0.34,0.18l-0.48,-0.03l-0.12,0.5l0.4,0.64l-0.26,0.19l-0.29,0.45l-0.19,-0.09l-0.17,-0.27l-0.76,-0.04l-1.16,-0.25l-0.81,-0.4l-1.05,-0.59l-0.78,-0.61l-0.52,-0.69l0.01,-0.21l0.6,-0.1l-0.06,-0.4l0.1,-0.24l-0.51,-1.06l0.1,-0.78l-0.18,-0.52l0.33,-0.54l-0.4,-0.34l-0.23,0.0l-0.44,-0.69l-0.01,-0.2l0.59,-0.14l0.3,-0.37l-0.05,-0.44l-0.36,-0.26l0.72,0.04l0.29,-0.13l0.18,-0.25l0.63,0.01l0.08,0.51l0.56,0.51l0.32,0.49l-0.03,0.09l-0.79,0.11l-0.53,0.51l0.31,0.45l0.94,-0.08l0.4,0.24l0.26,-0.01l0.39,-0.22l0.29,0.03l0.08,0.07l-0.51,0.6l-0.05,0.38l0.22,0.43l0.46,0.24l1.42,0.07l0.28,-0.17l0.16,-0.35l0.19,-0.08l-0.2,-0.74l0.35,-0.35l-0.02,-0.33l-0.18,-0.25l0.15,-0.43l-0.08,-0.13l-0.52,-0.26l-0.77,-0.01l-0.34,0.1l-1.51,-1.2l-0.01,-0.53l-0.35,-0.39l-0.26,-0.12l-0.15,-0.38l0.55,0.15l0.53,-0.4l-0.17,-0.41l-0.7,-0.51l0.4,-0.45l-0.14,-0.5l0.31,-0.15l0.27,0.08l0.44,-0.1l0.45,0.27l0.75,-0.04l0.67,-0.44l-0.08,-0.48l-0.18,-0.19l-0.48,-0.03l-0.51,0.16l-0.43,-0.19l-1.02,-0.02l-0.26,0.14l-0.44,0.04l-0.36,0.29l-0.62,0.09l-0.15,0.12l-0.15,0.42l-0.13,-0.19l0.27,-0.52l0.36,-0.24l-0.1,-0.44l-0.48,-0.6l0.03,-0.1l0.37,0.1l0.4,-0.18l0.16,-0.22l0.07,-0.36l-0.22,-0.6l0.55,0.23l0.42,-0.5l-0.44,-0.59l0.38,0.32l0.94,0.37l0.2,-0.44l0.14,0.01l-0.04,-0.54l0.12,-0.36l0.48,-0.28l0.49,0.01l1.96,-0.47l0.8,-0.03l0.3,0.25l-0.01,0.44l0.19,0.27l-0.27,0.16l0.13,0.47l0.35,0.15l0.74,0.01l0.29,-0.39l-0.13,-0.45l0.08,-0.34l1.21,-0.11l0.29,-0.63l-0.31,-0.24l-0.93,-0.04l0.03,-0.08l0.41,-0.03l0.15,-0.63l0.72,-0.27l0.86,0.88l0.32,0.11l0.38,-0.28l0.08,-0.27l-0.04,-0.41l-0.18,-0.26l0.34,0.0l0.69,0.32l0.35,0.31l0.54,0.81l-0.06,0.29l-0.38,-0.09l-0.52,0.21l-0.13,0.47l0.43,0.24l1.07,0.06l0.05,0.52l0.31,0.3l0.91,0.49l1.02,0.09l0.53,-0.18l0.41,0.17l0.49,-0.0l1.61,-0.32l0.1,0.49l1.67,0.97l0.28,0.31l0.53,0.32l1.06,0.37l1.81,-0.2l0.56,-0.21l0.47,-0.49l0.2,-0.57l0.15,-0.95l0.61,-1.1l0.01,-0.29l-0.24,-0.88l0.14,-0.05l-0.03,-0.19l0.58,0.25l0.2,-0.1l0.86,0.0l0.36,-0.17l0.41,-0.47l0.07,-0.93l-0.19,-0.43l0.22,-0.03l0.11,-0.44l-0.23,-0.32l-0.73,-0.39l-0.29,0.12l-0.43,-0.04l-0.52,0.2l-0.21,-0.12l-0.29,-0.6l-0.31,-0.29l-0.51,0.0l-0.02,0.1l-0.52,-0.04l-0.43,-0.31l-0.56,-0.02l-0.32,0.1l-1.04,-0.24l-0.48,0.03l-0.33,0.16l0.04,-0.42l-0.29,-0.71l-0.21,-0.97l-0.49,-0.23l-0.55,-0.08l-0.29,0.09l-0.47,-0.64l-0.48,-0.4l-0.5,-0.25l-1.14,-1.02l-0.95,-0.24l-0.2,-0.27l-0.49,-0.27l-0.11,-0.23l-0.63,-0.01l-0.04,0.13l-0.9,-1.22l-1.86,-2.14l-0.25,-0.55l-0.0,-0.32l0.07,-0.19l0.27,0.06l0.27,-0.13l0.35,-0.76l-0.41,-1.02l0.05,-0.11l0.4,0.19l0.51,-0.05l0.41,-0.17l0.51,0.66l0.43,0.23l0.48,-0.4l-0.02,-0.33l-0.32,-0.66l-0.48,-0.41l-0.46,-0.78l-0.84,-0.88l-0.12,-0.02l-0.98,-1.16l-0.33,-0.52l-0.04,-0.3l-0.46,-0.96l0.41,0.03l0.54,0.45l0.34,0.15l0.44,-0.1l0.12,-0.17l0.2,0.03l0.06,-0.15l0.18,0.03l0.17,0.41l0.2,0.18l1.09,0.35l1.08,-0.18l1.53,0.45l0.14,0.13l-0.06,0.06l0.19,0.45l0.88,0.89l1.03,0.47l0.56,-0.36l-0.06,-0.35l-0.37,-0.64l1.48,0.48l0.36,0.26l0.11,0.4l0.61,0.16l1.2,0.07l0.48,0.24l1.49,0.99l0.18,0.45l-0.34,0.04l-0.1,0.06l-0.4,0.34l-0.16,0.3l-0.6,-0.28l-0.52,-0.06l-0.12,0.69l0.62,0.52l0.02,0.52l0.16,0.37l0.28,0.32l0.91,0.59l0.18,0.29l0.46,0.4l0.69,0.3l0.39,0.29l-0.14,0.25l0.02,0.32l0.38,0.24l0.2,-0.05l0.26,0.12l0.44,0.49l0.56,0.16l0.39,0.46l-0.08,0.39l0.24,0.31l0.41,0.19l0.41,-0.15l0.03,-0.15l1.39,-0.46l0.24,0.52l0.24,0.25l-0.25,0.06l0.01,0.5l0.38,0.29l0.43,0.02l0.5,-0.24l0.36,-0.41l-0.05,-0.98l-0.45,-0.65l0.19,0.01l0.65,1.54l0.23,0.25l1.6,0.95l0.53,-0.01l0.29,-0.27l0.34,-0.59l-0.02,-0.44l0.3,-0.38l-0.16,-0.23l-0.72,-0.38l-0.44,-0.04l-0.49,-0.92l-0.89,-0.53l-0.42,-0.12l-0.61,0.21l-0.32,-0.28l-0.0,-0.43l-0.16,-0.19l-0.23,-0.71l0.64,-0.39l0.29,-0.02l0.35,0.29l0.32,0.05l0.37,-0.41l-0.0,-0.15l-0.75,-1.21l-1.13,-0.68l-0.06,-0.29l0.18,-0.28l-0.15,-0.48l-0.43,-0.23l-0.43,0.29l-0.42,0.07l-0.25,-0.44l-0.53,-0.4l-0.31,-0.1l-0.25,-0.41l-1.35,-1.4l0.59,-1.11l0.15,-1.07l-0.1,-1.05l-0.51,-1.13l-0.29,-1.11l-0.36,-0.48l-0.85,-2.25l-1.06,-1.45l-0.08,-0.73l-0.38,-0.89l0.17,-0.17l0.91,-0.32l1.04,-1.04l1.08,1.08l1.75,1.29l0.84,0.44l1.33,0.95l1.37,0.54l1.36,0.24l1.49,-0.09l0.3,0.11l0.42,-0.05l0.4,-0.16l0.23,-0.26l0.3,-0.14l0.42,-0.5l0.56,-0.03l0.17,-0.31l1.66,0.14l0.96,-0.29l0.5,0.12l0.03,0.15l0.87,0.52l0.35,0.13l0.52,-0.01l0.77,0.56l0.91,0.33l0.1,0.2l0.28,-0.04l0.42,0.16l1.99,0.27l-0.05,0.31l0.11,0.18l-0.18,0.06l-0.15,0.66l0.44,0.21l0.04,0.83l0.28,0.36l0.44,-0.14l0.1,-0.13l0.05,-0.46l0.22,-0.51l1.1,0.62l0.73,0.1l0.29,-0.35l-0.22,-0.39l-0.74,-0.5l-0.43,-0.14l-0.07,-0.18l0.03,-0.25l0.76,-0.07l0.26,0.1l0.01,0.3l0.27,0.62l0.54,0.33l0.14,-0.17l0.45,0.24l0.16,-0.08l0.63,0.55l1.13,0.63l0.13,-0.03l0.81,0.55l0.59,0.22l1.21,0.25l1.27,0.12l1.06,-0.17l1.19,0.0l0.01,0.22l0.26,0.49l0.68,0.48l0.08,0.62l0.56,0.17l0.57,0.45l-0.61,-0.02l-0.77,-0.42l-0.42,0.03l-0.44,0.21l0.1,0.48l0.23,0.26l-0.19,0.32l0.18,0.59l0.33,0.11l0.33,-0.12l0.64,0.36l0.3,0.06l0.31,-0.08l0.23,-0.23l0.33,-0.02l0.39,0.36l0.26,0.01l0.25,0.18l0.33,0.02l0.27,-0.16l0.13,0.09l0.16,0.38l-0.54,-0.04l-0.29,0.34l0.21,0.4l0.2,0.11l0.07,0.35l0.89,0.58l-0.04,0.13l0.18,0.3l0.49,0.21l0.94,-0.04l0.96,0.68l0.58,0.26l0.32,0.03l0.37,0.42l0.23,0.1l0.1,0.31l0.34,0.26l0.21,0.38l0.34,0.08l0.26,-0.12l0.25,0.23l-0.55,0.05l-0.29,0.34l-0.41,0.04l-0.18,0.63l0.35,0.33l1.4,0.72l-0.08,0.69l1.48,0.96l0.49,0.67l0.27,0.15l0.49,-0.16l1.05,0.48l0.24,-0.05l0.38,0.32l0.16,0.58l1.1,0.42l0.72,0.06l0.21,0.19l0.85,0.38l0.32,0.34l0.31,0.09l0.59,0.53l0.2,0.37l0.73,0.47l0.25,0.29l0.1,0.53l0.48,0.29l0.55,0.03l0.31,0.44l0.56,0.33l-0.11,0.34l0.39,0.41l1.66,1.19l0.76,0.36l0.16,-0.03l1.78,1.0l0.42,0.4l0.69,0.34l0.47,0.65l0.08,-0.08l-0.02,0.25l0.22,0.06l0.5,0.55l0.02,0.21l0.5,0.23l0.54,0.42l1.19,0.58l0.8,0.03l0.63,0.31l0.03,0.31l0.43,0.12l0.33,-0.2l0.19,-0.0l0.43,0.12l1.02,0.51l0.05,0.25l0.41,0.27l0.22,-0.19l0.58,0.53l0.31,0.09l0.53,0.55l-0.01,0.24l0.49,0.42l0.02,0.24l0.27,0.43l0.55,0.34l0.18,0.4l0.42,0.15l0.58,0.51l0.56,0.96l0.35,0.26l0.53,0.01l0.15,0.11l-23.69,51.51l0.09,0.46l1.53,1.4l0.52,0.02l0.19,-0.15l1.17,1.29l0.41,0.12l1.37,-0.4l1.79,0.68l-0.86,0.96l-0.08,0.38l0.35,1.01l0.91,0.92l-0.08,0.65l0.1,0.44l2.43,4.76l-0.2,1.48l-0.29,0.38l0.19,0.62l0.58,0.12l0.83,-0.25l0.54,-0.07l0.07,0.08l0.03,0.1l-0.66,0.3l-0.33,0.34l0.29,0.54l0.35,-0.0l0.37,-0.18l0.25,0.12l0.02,0.21l0.44,0.11l0.09,0.11l0.26,1.19l-0.17,0.03l-0.1,0.51l0.24,0.32l0.94,0.22l0.04,0.16l-0.27,0.18l0.01,0.12l0.21,0.32l0.21,0.09l-0.05,0.37l-0.24,-0.02l-0.1,-0.46l-0.35,-0.31l-0.11,0.06l-0.28,-0.47l-0.47,-0.03l-0.26,0.35l-0.45,0.01l-0.08,0.13l-0.26,-0.63l-0.14,0.01l-0.35,-0.41l-0.47,-0.12l-0.89,-1.43l0.11,-0.01l0.32,-0.49l-0.08,-0.26l-0.34,-0.28l-0.51,0.01l-0.47,-0.93l-0.05,-0.15l0.12,-0.53l-0.08,-0.41l-0.52,-1.06l-0.46,-0.7l-0.19,-0.07l0.1,-0.61l-0.29,-0.28l-0.72,-0.14l-1.24,-1.44l-0.27,-0.47l-0.01,-0.21l-0.32,-0.23l-0.24,-0.34l-0.28,-0.11l-0.49,-0.63l0.39,-0.11l0.12,-0.23l0.05,0.05l0.59,-0.3l-0.02,0.13l-0.16,0.06l-0.16,0.55l0.3,0.41l0.38,0.07l0.43,-0.3l0.25,-1.03l0.15,-0.22l0.42,0.2l0.36,0.46l0.36,0.04l0.35,-0.35l-0.47,-0.83l-0.69,-0.39l-0.27,-0.91l-0.35,-0.63l-0.4,-0.17l-0.67,0.44l-0.39,0.06l-0.79,0.37l-1.9,-0.05l-1.0,-0.5l-0.45,-0.34l-1.46,-1.5l0.23,-0.14l0.21,-0.32l0.16,-0.74l-0.43,-0.94l-0.52,-0.09l-0.33,0.19l-0.12,0.52l-0.6,-0.04l-0.85,-0.89l-2.81,-1.97l-1.68,-0.48l-1.62,-0.65l-1.13,-0.19l-0.1,-0.53l-0.27,-0.5l0.13,-0.25l-0.02,-0.26l-0.22,-0.25l-0.8,-0.28l-0.36,-0.35l-0.17,-0.01l-0.13,-0.55l-0.2,-0.34l-0.2,-0.12l0.7,-0.5l0.09,-0.27l-0.09,-0.08l0.21,-0.27l0.23,-0.09l0.38,0.08l0.38,-0.17l0.18,-0.32l-0.03,-0.34l-0.35,-0.22l-0.55,-0.07l-0.81,0.27l-0.24,0.2l-0.57,0.02l-0.56,0.35l-0.61,0.15l-0.2,-0.13l-0.19,-0.59l-0.58,-0.63l0.77,-0.37l0.19,-0.38l-0.32,-0.45l-0.53,-0.01l-0.15,-0.48l-0.19,-0.17l0.09,-0.49l-0.16,-0.25l0.04,-0.22l-0.31,-0.55l-0.43,-0.22l-0.53,0.17l-0.07,-0.2l-0.27,-0.03l-0.09,-0.14l0.22,-0.56l0.26,0.03l0.08,-0.09l0.65,0.37l0.38,0.07l0.42,-0.49l-0.14,-0.42l-0.27,-0.26l-1.05,-0.52l-1.54,0.27l-0.1,-0.21l-0.41,-0.3l-0.42,-0.01l-0.08,-0.23l-0.47,0.02l-0.21,-0.16l0.21,-0.26l-0.05,-0.39l0.14,-0.4l-0.28,-0.27l-0.25,-0.05l0.21,-0.77l-0.33,-0.28l-0.29,0.02l-1.36,0.57l0.02,-0.11l-0.34,-0.35l-1.19,-0.19l-0.14,0.25l-0.55,0.26l0.08,0.49l0.21,0.14l-0.01,0.1l-0.83,-0.27l-0.63,-0.03l-0.23,0.49l-0.51,0.38l0.12,0.52l0.31,0.16l0.46,-0.02l-0.05,0.11l-0.98,0.16l-0.3,0.14l-0.16,0.16l-0.05,0.46l0.37,0.28l0.83,-0.12l0.12,0.14l-0.04,0.25l0.31,0.21l-0.27,0.12l-0.15,0.24l-0.51,-0.02l-0.23,0.34l-0.3,0.12l0.05,0.54l-0.3,0.32l-0.12,-0.14l-0.66,0.24l-0.32,-0.27l-0.44,-0.13l-0.32,-0.39l0.11,-0.5l-0.38,-0.29l-0.64,0.04l0.13,-0.4l-0.05,-0.34l-0.23,-0.26l-0.26,-0.07l-0.4,0.16l-0.47,0.73l-0.25,-0.01l-0.23,-0.49l-0.46,-0.07l-0.37,0.4l-0.4,-0.06l-0.16,0.33l-0.29,-0.31l-0.42,-0.03l-0.26,0.25l-0.01,0.21l-0.31,-0.08l-0.11,-0.32l-0.12,-0.03l-0.37,0.06l-0.72,0.4l-0.01,-0.27l-0.13,-0.08l-0.8,-0.04l-0.38,0.2l-0.0,0.45l-0.09,0.05l-1.16,0.08l-0.3,0.13l-0.87,-0.77l-0.22,-0.05l-0.29,0.29l-0.4,-0.28l-1.02,-0.03l0.03,-0.13l-0.35,-0.39l-0.01,-0.13l0.45,0.02l0.16,-0.37l0.53,0.01l0.43,0.3l0.3,0.45l0.49,-0.04l0.2,-0.43l0.23,0.09l0.44,-0.04l0.48,-0.17l0.06,-0.15l0.45,-0.23l0.46,-0.08l0.32,-0.52l-0.21,-0.37l-0.49,-0.19l-1.84,0.04l-0.57,-0.71l-0.07,-0.28l1.28,-0.98l1.62,-0.44l0.37,-0.26l0.33,-0.45l0.46,-0.1l0.65,-0.89l0.14,-1.04l0.36,-0.03l0.74,0.3l1.54,-0.17l1.4,0.03l0.01,0.5l0.23,0.42l0.56,0.48l1.06,0.16l0.14,0.1l0.28,0.41l0.4,0.26l1.19,1.07l0.2,0.34l0.25,0.13l0.5,-0.37l0.0,-0.44l-0.13,-0.39l-0.42,-0.46l-0.43,-0.13l-0.32,-0.52l-0.43,-0.35l-0.69,-1.19l0.45,-0.11l0.44,-0.3l0.35,0.02l0.33,-0.17l1.56,0.33l0.37,-0.06l0.15,-0.62l-0.09,-0.11l-0.67,-0.46l-0.84,-0.3l-0.61,-0.04l-0.74,0.14l-0.37,0.19l-0.29,0.35l-0.76,-0.52l-0.11,-0.24l-0.42,-0.02l-0.16,-0.12l0.14,-0.2l-0.17,-0.67l-0.09,-0.02l-1.07,0.27l-0.85,-0.19l-0.49,0.0l-0.85,0.41l-0.65,-0.15l-0.6,-0.29l-1.18,0.04l-0.71,0.35l-0.19,0.5l-0.35,-0.15l-0.65,0.04l-0.5,0.24l-0.62,0.03l-0.54,0.15l-0.41,0.33l-0.12,0.36l-0.49,0.22l-0.59,-0.02l-0.4,-0.27l-0.26,-0.68l-0.43,-0.32l-0.3,-0.11l-0.42,0.02l-0.3,0.28l0.16,0.51l0.31,0.08l0.01,0.37l0.37,0.61l0.21,0.72l-0.38,0.08l-0.35,0.26l-0.33,-0.06l-0.56,-0.39l-0.98,-0.37l-0.58,0.21l0.02,0.44l-0.07,-0.38l-0.32,-0.34l-0.42,0.19l-0.23,0.4l-0.2,-0.38l-0.81,0.14l-0.08,0.05l-0.02,0.41l-0.37,-0.32l-0.33,-0.04l-0.36,0.28l0.13,0.39l-1.49,-0.27l-0.16,0.49l-0.25,0.14l-0.28,0.36l-0.51,0.04l-0.02,0.17l-0.2,0.09l0.03,0.42l-0.16,0.27l-0.01,0.39l0.33,0.34l0.59,-0.05l0.39,0.38l0.56,0.31l0.08,0.49l0.23,0.34l0.3,0.19l0.03,0.3l-0.64,0.54l-0.5,-0.05l-0.44,0.18l-0.88,-0.46l-0.37,0.02l-0.48,0.41l-0.2,-0.12l-0.45,-0.01l-0.34,0.59l-0.75,-0.12l-0.4,0.05l-0.27,0.3l-0.1,-0.02l0.07,0.06l-0.11,0.01l0.0,0.1l-0.42,-0.28l-0.36,0.33l-0.19,-0.1l-0.32,0.19l-0.3,-0.11l-0.37,0.07l-0.53,-0.44l-0.45,-0.15l-0.9,0.53l-0.18,-0.15l-0.71,-0.02l-0.45,0.28l-0.15,-0.37l-0.41,-0.28l-0.42,0.1l-0.43,0.49l-0.37,-0.15l-0.28,0.31l-0.47,-0.08l-0.4,-0.43l-0.4,0.07l-0.3,0.24l-0.14,-0.11l-0.43,-0.05l-0.14,0.08l-1.45,-0.04l-0.31,0.12l-0.22,0.28l0.24,0.95l-0.31,-0.03l-0.15,0.18l-0.69,-0.24l-0.41,-0.28l-0.26,0.05l-0.26,0.26l-0.2,-0.24l-0.49,0.22l-0.65,0.09l-0.32,-0.22l-0.27,0.2l-0.19,-0.65l-0.39,-0.22l-0.43,0.08l-0.28,0.31l-0.44,0.09l-0.26,-0.07l-0.14,0.34l-0.06,-0.31l-0.26,-0.25l-0.54,-0.14l-1.29,-0.05l-0.62,0.31l-0.42,-0.34l-0.51,-0.04l-0.84,0.27l-0.73,0.11l-0.16,0.12l-0.11,0.56l-0.26,-0.07l-0.44,0.3l-0.03,0.21l-0.23,0.15l-0.26,-0.25l-0.37,-0.03l-0.36,0.17l-0.6,-0.33l-0.87,-0.22l-0.41,-0.18l-0.09,-0.37l-0.55,-0.15l-0.25,0.15l-0.71,-0.67l-0.41,0.02l-0.78,-0.24l-0.4,0.21ZM111.25,502.71l-0.44,0.21l-0.03,-0.02l0.24,-0.26l0.23,0.07ZM128.45,468.26l-0.1,0.14l-0.06,0.02l0.02,-0.15l0.14,-0.02ZM191.55,470.09l-0.0,0.04l-0.02,-0.04l0.03,-0.01ZM191.85,541.2l-0.08,-0.21l0.06,-0.51l0.25,-0.06l0.08,0.39l-0.31,0.39ZM165.84,518.29l-0.19,0.37l-0.34,0.04l-0.07,0.31l-0.27,-0.07l-0.45,0.06l-0.04,-0.09l0.46,-0.29l0.06,-0.15l0.84,-0.19ZM162.12,521.34l0.09,0.0l-0.06,0.02l-0.02,-0.03ZM162.26,521.34l0.08,-0.02l0.01,0.04l-0.04,0.04l-0.05,-0.05ZM141.64,514.73l0.19,0.06l0.26,0.22l-0.46,0.03l-0.07,-0.12l0.08,-0.19ZM132.07,521.13l-0.0,0.0l0.0,-0.0l0.0,0.0ZM132.06,520.84l-0.02,-0.07l0.06,-0.01l-0.03,0.08ZM109.91,522.38l0.07,-0.02l0.05,0.12l-0.03,0.01l-0.09,-0.11ZM107.83,523.67l0.01,0.02l-0.02,0.0l0.0,-0.02l0.01,-0.01ZM136.02,515.64l-0.01,-0.04l0.07,0.01l-0.06,0.03ZM199.71,549.76l0.43,-0.06l0.87,0.3l0.36,-0.05l0.76,-0.54l0.39,-0.87l0.67,-0.03l0.47,-0.34l0.17,-0.49l0.96,0.19l1.89,-0.14l0.49,0.7l0.06,0.43l0.38,0.59l-0.1,0.26l-0.29,0.17l-0.1,0.55l0.11,0.16l-0.11,0.33l0.13,0.53l0.17,0.24l0.69,0.46l0.02,0.37l0.3,0.56l0.35,0.24l0.08,0.34l-0.15,0.26l0.26,1.28l1.33,1.5l0.24,0.78l-0.64,-0.19l-0.38,0.04l-0.33,0.37l-0.51,0.26l-0.01,0.29l-0.38,0.15l-0.21,0.29l-0.52,-0.98l-0.84,-0.64l0.11,-0.44l-0.27,-1.06l0.14,-0.11l0.26,-1.09l-0.26,-0.26l0.04,-0.09l-0.12,-0.01l0.04,-0.06l-0.09,0.05l-0.1,-0.1l-0.04,0.1l-0.12,-0.01l-0.03,-0.07l0.24,-0.92l0.1,-1.07l-0.15,-1.05l0.51,-0.94l0.02,-0.37l-0.66,-0.25l-0.5,0.69l-0.24,-0.13l-0.45,0.11l0.01,0.55l-0.32,0.35l0.3,1.04l-0.34,0.85l0.13,1.32l-0.11,0.36l0.04,0.39l-0.27,0.34l0.03,1.86l-0.28,0.29l-0.27,-0.31l0.02,-1.36l-0.28,-0.43l-0.53,0.1l-0.08,0.1l-0.88,-0.14l0.22,-0.05l0.2,-0.25l0.2,-0.91l-0.12,-0.1l-0.13,-1.06l0.88,0.13l0.45,-0.45l-0.11,-0.33l-0.74,-0.45l-0.23,0.1l0.0,-0.84l-0.33,-0.34l-0.31,-0.01l-0.29,0.56l-0.24,0.06l-0.27,0.41l0.12,0.13l-0.5,-0.23l0.24,-0.5l-0.28,-0.54l-0.29,-0.02l-0.18,-0.5l-0.47,-0.15l-0.19,0.31l-0.22,-0.47ZM201.64,551.89l0.21,0.2l-0.19,0.19l-0.03,-0.38ZM210.83,558.1l0.42,0.83l-0.23,0.38l0.09,0.66l0.47,1.27l0.06,1.07l0.15,0.48l-0.33,-0.38l-1.31,-0.73l-0.26,-0.05l0.19,-0.2l-0.17,-0.39l0.14,-0.1l0.31,-0.63l-0.47,-0.31l-0.27,0.01l-0.75,0.68l-0.11,-0.36l0.09,-0.18l-0.03,-0.41l0.26,-0.33l0.36,-0.19l0.16,-0.56l0.43,-0.42l0.36,0.09l0.44,-0.23ZM211.88,563.05l1.25,5.46l-0.54,0.45l0.03,0.64l0.81,0.55l-0.47,0.67l0.05,0.52l0.58,0.54l-0.08,0.3l0.06,0.48l-0.14,0.55l0.15,0.3l0.2,0.13l0.9,0.26l1.46,1.84l1.18,0.8l0.34,0.76l0.55,0.42l-0.01,0.53l0.1,0.24l0.78,0.58l0.49,0.11l0.03,0.16l-0.16,0.69l-0.68,0.46l-0.31,0.4l-0.04,0.78l-0.31,0.67l0.11,0.99l-0.15,0.54l0.03,0.33l-0.4,0.17l-1.34,1.4l-0.41,0.31l-0.48,0.16l-0.2,-0.13l-0.28,0.01l0.12,-0.5l-0.16,-0.42l-0.64,0.07l-0.08,0.17l-0.1,-0.51l0.24,-0.03l0.12,0.14l0.5,0.14l1.27,-0.81l0.75,-0.65l-0.23,-0.63l-0.48,0.07l0.01,-0.13l-0.37,-0.36l-0.54,0.12l0.59,-1.72l0.0,-0.38l0.15,-0.3l-0.06,-0.43l0.09,-0.51l-0.36,-0.24l-0.06,-0.35l-0.27,-0.49l0.49,-0.15l0.35,-0.35l0.18,-0.48l-0.43,-0.27l-0.43,0.08l-0.61,0.31l-0.45,0.04l-0.55,-0.29l-1.43,0.28l-0.59,-0.05l0.17,-0.09l0.2,-0.36l0.21,-0.85l0.32,0.02l0.81,0.41l0.31,0.03l0.71,-0.34l-0.07,-0.49l-0.33,-0.19l-0.4,0.02l-0.88,-0.43l0.03,-0.84l-0.23,-0.29l-0.46,-0.26l0.02,-0.43l-0.43,-0.61l0.27,-0.3l-0.16,-0.68l-0.35,-0.03l0.1,-0.07l0.01,-0.21l0.42,-0.17l0.22,-0.62l-0.38,-0.26l-0.67,0.18l-0.27,-0.29l-0.2,-0.32l-0.06,-0.35l0.33,-0.21l0.18,-1.04l-0.39,-0.3l-0.47,0.16l-0.17,-0.08l-0.29,-0.36l0.13,-0.2l-0.14,-0.35l-0.45,-0.27l1.08,-0.08l0.35,-0.42l-0.28,-0.52l-0.49,0.08l-0.44,-0.14l0.18,-0.32l-0.03,-0.32l-0.51,-0.26l0.04,-0.13l0.64,0.01l0.41,0.72l0.28,0.23l0.31,0.02l0.28,-0.15l0.04,-0.52l-0.24,-0.23l-0.1,-0.4l-0.37,-0.63l-0.78,-0.91l0.12,-0.39l1.23,0.83l0.52,-0.45ZM214.19,585.45l-0.17,0.68l-0.05,-0.01l0.09,-0.42l0.13,-0.25ZM215.44,583.76l-0.46,0.24l-0.25,-0.22l-0.63,0.14l0.05,-0.14l0.52,-0.28l0.76,0.25ZM211.63,577.78l-0.08,0.43l0.26,0.27l-0.46,0.4l-0.51,-0.23l-0.26,0.45l0.06,0.32l-0.15,-0.2l0.08,-0.67l0.25,-0.15l0.49,-0.04l0.32,-0.57ZM209.08,567.17l-0.25,-0.24l0.08,-0.14l0.49,0.2l-0.32,0.18ZM138.39,458.34l-0.47,-0.44l0.06,-0.45l0.41,0.27l0.0,0.62ZM108.63,500.59l-0.13,0.01l0.09,-0.03l0.04,0.02ZM211.75,580.86l0.58,-0.24l-0.2,0.44l0.02,0.52l-0.22,-0.23l-0.18,-0.5ZM212.61,580.43l0.18,-0.49l-0.1,-0.18l0.52,-0.05l0.31,-0.26l0.18,-0.36l0.14,-0.03l0.14,-0.52l0.57,-0.03l0.29,1.05l0.12,1.09l-0.15,0.19l0.03,0.12l-0.16,0.04l-0.27,0.73l-0.28,0.21l-0.2,-0.36l0.13,-1.47l-0.39,-0.42l-0.41,0.19l-0.18,0.46l-0.46,0.07ZM211.52,574.36l0.23,0.31l0.37,0.12l0.01,0.48l-0.14,0.07l-0.12,-0.08l-0.4,-0.44l-0.11,-0.22l0.15,-0.24ZM209.53,575.0l0.17,-0.21l0.28,-0.04l-0.06,0.38l0.09,0.09l0.27,0.14l0.34,0.0l0.41,0.28l0.04,0.12l-0.35,0.14l0.09,0.38l-0.06,0.17l-0.28,0.08l0.14,-0.47l-0.34,-0.41l-0.06,-0.25l-0.69,-0.39ZM210.36,574.41l0.1,-0.07l0.07,0.06l-0.0,0.01l-0.16,-0.0ZM209.54,571.91l0.03,-0.1l0.32,-0.15l0.14,-0.29l-0.04,-0.37l0.05,-0.1l0.34,1.01l-0.09,-0.09l-0.52,-0.06l-0.15,0.21l-0.08,-0.04ZM206.97,580.16l0.1,-0.52l-0.42,-0.36l0.1,-0.03l-0.05,-0.5l-0.28,-0.2l0.14,-0.17l0.28,-0.1l0.36,0.03l0.21,-0.67l-0.39,-0.23l-1.18,-0.03l-0.2,-0.17l0.19,-0.17l0.46,-0.05l0.67,-0.52l0.19,-0.54l-0.08,-0.32l-0.26,-0.01l0.23,-0.63l0.14,0.22l0.53,0.22l0.24,0.31l0.4,0.27l0.42,1.0l0.12,0.56l-0.14,0.62l-0.17,-0.03l-0.11,0.19l-0.32,0.19l0.02,0.34l-0.75,0.25l-0.08,0.43l0.07,0.45l0.56,-0.01l-0.02,0.13l0.38,0.45l0.22,-0.01l0.23,0.23l0.25,-0.06l0.21,0.38l-0.39,-0.07l-0.32,0.43l-0.06,0.32l0.22,0.37l0.41,0.04l0.21,0.09l-0.2,-0.03l-0.41,0.47l-0.47,0.15l0.11,0.7l0.38,0.27l-0.13,0.2l0.18,0.53l-0.2,0.06l-0.06,0.23l-0.22,-0.08l0.18,-0.35l-0.4,-1.09l0.11,-0.08l0.05,-0.73l-0.28,-0.13l-0.15,-0.32l0.01,-0.81l-0.21,-0.78l-0.46,-0.01l-0.11,0.08l-0.05,-0.39ZM207.26,574.01l-0.02,-0.27l-0.21,-0.27l0.29,-0.14l0.03,0.3l0.15,0.15l-0.04,0.21l-0.2,0.0ZM206.9,573.41l-0.43,-0.14l-0.38,-0.35l0.21,-0.11l0.28,0.14l0.04,0.28l0.27,0.18ZM208.72,573.09l0.26,-0.17l0.43,0.23l0.25,-0.0l-0.15,0.15l-0.09,0.37l-0.14,0.04l-0.23,-0.02l-0.33,-0.6ZM206.49,567.38l1.0,0.59l0.81,0.7l0.06,0.4l-0.46,0.04l-0.19,0.76l0.03,0.31l0.19,0.26l-0.17,0.31l0.43,0.76l-0.15,0.1l-0.85,-0.57l-0.44,0.12l-0.01,0.16l-0.22,-0.06l0.24,-0.51l-0.06,-0.27l0.08,0.03l0.08,-0.27l-0.06,-0.29l0.42,-0.7l0.08,-0.44l-0.28,-0.43l0.06,-0.22l-0.32,-0.31l-0.25,-0.5ZM208.6,569.24l0.34,0.07l0.2,-0.33l0.2,0.07l0.2,0.44l-0.0,0.19l-0.3,0.2l-0.13,0.86l-0.14,-0.44l-0.01,-0.6l-0.07,-0.17l-0.2,-0.03l-0.09,-0.25ZM209.57,569.66l0.0,-0.0l0.03,-0.02l-0.04,0.02ZM204.29,565.52l0.44,-0.15l-0.03,-0.36l0.29,-0.2l0.29,0.26l0.51,-0.3l-0.08,0.47l-0.15,0.23l-0.33,-0.04l-0.36,0.3l-0.27,-0.06l-0.16,0.09l0.02,0.12l-0.36,0.07l0.19,-0.44ZM206.36,564.27l-0.49,0.31l-0.02,-0.59l-0.46,-0.14l-0.02,-0.1l0.53,-0.05l0.24,-0.65l-0.35,-0.23l-0.51,-0.03l-0.1,-0.28l0.09,-0.84l0.2,-0.34l0.16,-0.72l0.07,-1.03l0.34,-0.33l0.69,0.17l0.26,0.31l-0.04,0.27l-0.16,0.12l0.03,0.24l-0.13,0.05l-0.05,0.65l-0.22,0.57l0.02,0.09l0.33,0.11l0.23,1.01l-0.15,0.27l0.43,0.45l-0.08,0.23l-0.57,-0.12l-0.09,0.19l-0.15,0.04l-0.01,0.39ZM206.15,574.28l-0.13,-0.03l0.0,-0.02l0.15,-0.04l-0.02,0.09ZM205.18,574.32l-0.02,0.0l0.01,-0.01l0.01,0.0ZM204.96,570.25l-0.05,-0.24l0.09,0.22l-0.04,0.01ZM205.25,569.02l-0.25,0.19l-0.3,-0.19l-0.18,-0.37l-0.42,-0.07l0.04,-0.08l0.41,0.09l0.15,-0.2l0.31,0.17l0.28,-0.13l0.03,0.52l-0.07,0.07ZM198.99,558.2l0.09,-0.07l0.23,0.49l-0.21,-0.07l-0.11,-0.35ZM199.36,558.71l0.38,0.44l0.56,-0.45l-0.44,-1.09l0.59,0.02l0.03,-0.77l0.24,0.32l0.51,0.01l0.2,-0.29l0.29,-0.06l0.19,0.34l0.24,0.12l0.18,0.27l-0.28,0.14l-0.69,-0.17l-0.13,0.26l-0.17,-0.1l-0.57,0.26l0.08,0.42l0.27,0.54l0.56,0.48l0.25,0.5l0.39,0.36l-0.12,0.15l0.09,0.44l-0.94,-1.32l-0.28,-0.2l-0.61,0.35l0.06,0.34l-0.2,0.14l0.2,0.7l0.21,0.07l-0.14,0.51l0.2,0.13l0.05,0.18l-0.28,0.06l-0.12,-0.56l-0.37,-0.57l0.25,-0.15l-0.16,-0.49l-0.21,-0.17l-0.02,-0.33l-0.28,-0.49l-0.01,-0.31ZM202.27,558.92l0.38,-0.28l0.43,-0.1l0.76,0.39l0.05,0.17l0.43,0.38l-0.11,0.18l-0.41,-0.45l-0.58,-0.11l-0.2,0.41l0.19,0.59l-0.97,-1.19ZM202.11,560.96l0.33,0.1l0.14,0.21l0.26,0.09l0.85,-0.01l-0.23,1.25l-0.31,-0.14l-1.03,-1.5ZM201.29,562.69l0.18,0.07l0.33,-0.09l0.0,0.25l0.48,0.21l0.22,0.28l-0.11,0.08l0.12,0.52l-0.05,0.29l0.23,0.34l-0.06,0.8l0.13,0.32l-0.1,0.03l-0.14,0.56l-0.14,0.99l0.02,0.73l-0.25,0.74l-0.22,-0.02l-0.19,0.34l-0.01,0.5l-0.44,1.06l-0.2,-0.86l-0.08,-0.92l0.3,-0.02l0.63,-0.49l-0.06,-0.73l-0.22,-0.05l0.02,-0.45l-0.19,-0.26l-0.25,-0.01l-0.16,-0.59l-0.47,-0.03l0.24,-0.17l0.01,-0.27l0.65,-0.05l0.22,-0.32l-0.13,-0.51l-0.53,-0.24l0.57,-0.27l-0.34,-1.16l-0.33,-0.12l0.28,-0.19l0.04,-0.3ZM199.27,560.14l0.0,0.0l-0.01,0.0l0.0,-0.0ZM199.1,564.31l0.25,-0.07l0.1,-0.06l-0.12,0.15l-0.23,-0.02ZM199.63,563.32l0.06,-0.2l-0.05,-0.13l0.09,0.13l-0.1,0.2ZM162.15,525.49l0.25,-0.21l0.11,-0.0l-0.2,0.31l-0.16,-0.1ZM136.7,524.68l0.22,0.25l0.59,-0.1l0.04,-0.44l0.61,0.38l0.29,-0.23l0.18,-0.67l0.1,-0.05l0.25,0.13l0.16,-0.06l-0.14,0.5l0.39,0.72l-0.5,0.38l-0.19,-0.72l-0.36,-0.02l-0.69,0.57l-0.12,-0.24l-0.46,0.06l-0.15,0.16l-0.22,-0.52l-0.13,-0.04l0.04,-0.14l0.07,0.07ZM139.88,525.13l-0.03,-0.01l0.02,-0.02l0.01,0.03ZM127.78,528.13l0.49,-0.13l0.09,0.05l-0.34,0.29l-0.18,0.01l-0.06,-0.22ZM128.01,526.82l0.09,-0.93l-0.34,-0.41l0.27,-0.06l0.19,-0.29l0.22,-0.02l0.24,-0.25l0.44,0.22l0.16,-0.11l0.5,0.1l0.1,-0.23l0.15,-0.03l0.38,0.09l0.25,0.25l-0.43,0.12l0.02,0.5l0.44,0.31l-0.25,0.64l0.13,1.11l0.36,0.59l0.43,0.15l-0.37,0.07l-0.19,0.39l-0.11,-0.05l0.03,-0.41l-0.23,-0.36l-0.69,-0.05l-0.43,-0.59l-0.47,-0.4l-0.65,-0.34l-0.26,-0.01ZM131.4,528.57l0.28,-0.39l-0.19,-0.6l0.07,-0.55l0.15,-0.28l0.3,0.13l0.31,-0.27l0.44,0.14l0.52,-0.02l0.3,-0.22l0.26,0.17l0.23,-0.03l0.19,0.33l0.66,-0.29l0.18,-0.29l0.28,0.22l-0.13,0.25l-0.0,0.39l0.26,0.35l0.46,-0.02l0.28,-0.39l0.28,0.18l0.44,-0.16l0.31,0.17l0.08,-0.05l-0.05,0.23l-0.73,0.21l-0.21,0.41l0.22,0.27l-0.07,0.65l0.3,0.23l0.29,0.05l-0.5,0.18l-0.19,-0.24l-0.3,-0.08l-0.09,-0.22l-0.26,-0.17l-0.13,-0.32l-0.96,-0.67l-0.23,0.18l-0.65,0.18l-0.19,0.27l0.12,0.28l-0.38,-0.39l-0.44,0.12l-0.19,0.46l-0.91,-0.26l-0.07,0.08l-0.35,-0.23ZM134.19,529.01l0.07,-0.02l0.09,0.03l-0.15,-0.01l-0.01,0.0ZM134.4,529.04l0.27,0.1l0.23,0.58l-0.25,-0.11l0.04,-0.1l-0.29,-0.47ZM135.83,526.14l0.09,-0.06l0.01,0.01l-0.11,0.04ZM132.89,525.47l-0.57,-0.58l0.11,-0.17l0.27,-0.08l0.34,0.07l0.08,0.37l-0.22,0.39ZM98.14,450.76l0.34,-0.44l0.56,-0.16l0.06,0.49l-0.13,0.02l0.1,0.29l0.7,0.54l0.29,0.6l0.36,0.4l-0.66,-0.36l-1.21,-0.26l-0.45,-0.8l0.04,-0.32ZM100.81,452.78l1.01,0.2l0.26,0.2l0.38,0.11l0.3,0.33l0.23,0.8l-0.26,0.19l-0.26,0.4l0.43,0.51l0.28,0.71l0.39,0.33l-0.09,0.31l0.05,0.32l0.21,0.31l0.5,0.32l0.0,0.35l-0.82,-0.26l-0.09,0.09l-0.51,-0.1l-0.33,0.07l-0.08,-0.93l-0.57,-1.1l0.12,-0.48l-0.3,-0.98l-0.39,-0.84l-0.28,-0.35l-0.01,-0.23l-0.17,-0.28ZM104.84,458.76l0.28,0.01l0.41,0.53l-0.25,0.05l-0.44,-0.59ZM96.98,478.79l0.06,-0.22l1.37,1.26l0.38,-0.0l0.32,-0.21l0.21,0.06l0.2,0.25l0.72,-0.01l-0.01,0.32l0.69,0.19l0.2,0.27l-0.05,0.32l0.09,0.16l0.27,0.29l0.49,0.19l0.07,0.2l-0.23,0.33l-0.32,0.22l-0.42,1.13l-0.7,-0.22l-0.36,-0.42l-0.19,0.11l-0.26,-0.08l-0.29,-0.35l-0.42,-0.13l-0.26,-0.41l-0.51,-0.41l-0.61,-1.56l0.07,-0.19l-0.47,-0.5l0.04,-0.31l-0.09,-0.3ZM97.68,522.17l0.05,-0.07l0.04,-0.11l0.07,0.18l-0.15,-0.01ZM98.03,522.39l0.04,0.02l-0.0,0.03l-0.03,-0.05ZM80.23,514.88l0.08,-0.15l0.69,0.24l0.38,-0.02l1.55,-0.69l0.18,0.0l0.16,0.37l0.44,0.39l0.27,0.08l0.4,-0.16l0.54,0.24l0.6,-0.01l0.53,0.26l0.44,0.41l0.03,0.72l-0.26,0.4l-0.13,0.44l-0.31,0.06l-0.22,0.21l-0.27,0.01l-0.3,-0.08l-0.46,-0.58l-1.38,-0.93l-0.45,-0.11l-0.76,0.03l-0.42,0.3l-0.21,0.03l-0.91,-0.42l-0.33,-0.34l0.14,-0.67ZM74.26,514.0l0.03,-0.25l0.32,0.05l0.02,0.35l-0.37,-0.15ZM64.81,513.23l0.09,-0.01l0.13,0.09l-0.17,0.0l-0.05,-0.08ZM70.29,514.35l-0.12,-0.05l-0.16,0.39l-0.25,-0.27l-0.36,0.08l0.24,-0.12l0.32,0.02l0.41,-0.61l-0.31,-0.35l-0.31,-0.63l-0.3,-0.24l0.05,-0.29l0.13,-0.06l0.67,0.13l0.43,0.28l0.16,0.24l-0.29,0.4l0.11,0.51l-0.06,0.17l-0.33,0.11l-0.04,0.31ZM68.8,514.2l-0.28,0.32l-0.09,-0.1l0.24,-0.29l-0.1,-0.27l0.19,-0.02l0.04,0.36ZM59.97,511.71l0.2,-0.13l0.18,-0.38l0.48,-0.06l0.27,0.03l0.13,0.21l0.36,0.14l0.1,0.15l-0.09,0.12l-0.23,-0.03l-0.61,0.18l-0.41,-0.22l-0.36,0.0ZM62.67,511.56l0.07,-0.35l0.28,-0.32l0.75,-0.02l0.67,0.35l0.17,0.49l-0.28,0.29l-1.25,-0.24l-0.41,-0.2ZM37.79,498.38l0.07,-0.23l-0.1,-0.23l0.32,0.03l0.09,0.49l-0.29,0.05l-0.1,-0.11ZM36.41,498.87l-0.02,0.01l0.01,-0.02l0.01,0.01ZM36.85,498.71l-0.0,-0.07l-0.0,-0.01l0.02,0.01l-0.01,0.07ZM30.2,493.17l-0.02,-0.03l0.04,-0.04l0.0,0.08l-0.02,-0.0ZM26.76,492.74l0.41,-0.33l0.12,0.35l-0.02,0.08l-0.25,0.01l-0.26,-0.12ZM25.01,490.83l0.02,0.0l-0.01,0.01l-0.02,-0.01ZM23.18,488.38l-0.09,0.01l0.05,-0.17l0.04,0.08l0.01,0.08ZM23.19,487.9l-0.06,0.1l-0.14,-0.54l0.19,0.18l0.0,0.26ZM15.95,478.85l0.25,0.07l-0.02,0.19l-0.14,-0.01l-0.09,-0.25ZM1.23,449.67l0.23,0.17l0.21,0.66l0.47,0.45l-0.25,0.16l0.12,0.39l-0.24,-0.38l-0.54,-0.19l-0.11,-0.3l0.19,-0.08l0.2,-0.42l-0.28,-0.47Z",
            "name": "Alaska"
        },
        "US-NJ": {
            "path": "M801.67,165.24l1.31,-1.55l0.48,-1.57l0.5,-0.62l0.54,-1.45l0.11,-2.05l0.68,-1.35l0.92,-0.71l14.12,4.17l-0.3,5.66l-0.51,0.83l-0.13,-0.3l-0.65,-0.07l-0.34,0.44l-0.56,1.46l-0.46,2.72l0.26,1.55l0.63,0.61l1.06,0.15l1.23,-0.43l2.46,0.29l0.66,1.87l-0.2,4.55l0.29,0.47l-0.54,0.44l0.27,0.81l-0.72,0.74l0.03,0.35l0.43,0.22l-0.21,0.6l0.48,0.6l-0.17,3.8l0.59,0.52l-0.36,1.36l-1.14,1.82l-0.11,0.94l-1.36,0.07l0.09,1.21l0.64,0.83l-0.82,0.56l-0.18,1.15l1.05,0.77l-0.31,0.29l-0.17,-0.44l-0.53,-0.18l-0.5,0.22l-0.44,1.51l-1.28,0.61l-0.2,0.45l0.46,0.55l0.8,0.06l-0.66,1.26l-0.26,1.5l-0.68,0.65l0.19,0.48l0.4,0.04l-0.89,1.57l0.07,0.95l-1.56,1.66l-0.17,-1.65l0.33,-2.07l-0.11,-0.87l-0.58,-0.82l-0.89,-0.28l-1.11,0.34l-0.81,-0.35l-1.51,0.88l-0.31,-0.71l-1.62,-0.96l-1.0,0.04l-0.65,-0.71l-0.7,0.07l-3.24,-2.03l-0.06,-1.72l-1.02,-0.94l0.48,-0.68l0.0,-0.88l0.43,-0.83l-0.12,-0.73l0.51,-1.19l1.2,-1.16l2.6,-1.49l0.54,-0.86l-0.38,-0.85l0.5,-0.37l0.47,-1.44l1.24,-1.7l2.52,-2.22l0.18,-0.67l-0.47,-0.82l-4.26,-2.78l-0.75,-1.05l-0.9,0.24l-0.48,-0.33l-1.24,-2.46l-1.62,-0.02l-1.0,-3.45l1.02,-1.03l0.36,-2.23l-1.87,-1.91Z",
            "name": "New Jersey"
        },
        "US-ME": {
            "path": "M837.04,56.27l0.86,-1.15l1.42,1.7l0.84,0.04l0.39,-2.12l-0.46,-2.19l1.7,0.36l0.73,-0.42l0.21,-0.52l-0.32,-0.7l-1.18,-0.47l-0.44,-0.62l0.19,-1.43l0.86,-2.02l2.08,-2.25l0.01,-0.98l-0.52,-0.93l1.02,-1.64l0.39,-1.51l-0.22,-0.91l-1.02,-0.35l-0.07,-1.42l-0.4,-0.43l0.55,-0.96l-0.04,-0.63l-1.0,-1.26l0.13,-1.73l0.37,-0.63l-0.15,-0.97l1.22,-1.93l-0.96,-6.17l5.58,-18.88l2.25,-0.23l1.15,3.18l0.55,0.43l2.54,0.56l1.83,-1.73l1.68,-0.83l1.24,-1.72l1.25,-0.12l0.64,-0.47l0.25,-1.43l0.42,-0.3l1.36,0.04l3.68,1.41l1.14,0.96l2.36,1.05l8.38,22.7l0.64,0.65l-0.25,0.95l0.72,1.02l-0.1,1.41l0.54,1.3l0.67,0.47l1.05,-0.12l1.12,0.58l0.97,0.1l2.47,-0.53l0.4,0.95l-0.59,1.42l1.69,1.86l0.28,2.69l2.72,1.68l0.98,-0.1l0.47,-0.74l-0.06,-0.5l1.21,0.25l2.95,2.8l0.04,0.47l-0.52,-0.14l-0.38,0.41l0.18,0.77l-0.76,-0.15l-0.35,0.4l0.15,0.63l1.84,1.62l0.16,-0.88l0.39,-0.17l0.8,0.32l0.27,-0.83l0.33,0.41l-0.31,0.85l-0.53,0.19l-1.21,3.24l-0.62,-0.04l-0.31,0.44l-0.55,-1.05l-0.72,0.03l-0.3,0.5l-0.56,0.06l-0.02,0.49l0.58,0.85l-0.91,-0.45l-0.32,0.63l0.26,0.52l-1.2,-0.28l-0.37,0.3l-0.37,0.78l0.08,0.45l0.44,0.08l0.07,1.21l-0.37,-0.57l-0.54,-0.06l-0.39,0.45l-0.2,1.09l-0.48,-1.53l-1.14,0.01l-0.68,0.75l-0.36,1.48l0.59,0.63l-0.83,0.63l-0.7,-0.46l-0.73,1.04l0.1,0.64l0.99,0.63l-0.35,0.21l-0.1,0.82l-0.45,-0.2l-0.85,-1.82l-1.03,-0.46l-0.39,0.22l-0.45,-0.41l-0.57,0.63l-1.25,-0.19l-0.26,0.86l0.78,0.4l0.01,0.37l-0.51,-0.06l-0.56,0.4l-0.09,0.69l-0.49,-1.02l-1.17,-0.02l-0.16,0.64l0.52,0.87l-1.44,0.96l0.84,1.11l0.08,1.06l0.53,0.65l-0.96,-0.41l-0.96,0.22l-1.2,-0.42l-0.17,-0.91l0.74,-0.28l-0.08,-0.55l-0.43,-0.5l-0.67,-0.12l-0.3,0.33l-0.23,-2.37l-0.37,-0.22l-1.1,0.26l0.04,1.96l-1.85,1.92l0.02,0.49l1.25,1.47l-0.64,0.96l-0.19,3.87l0.77,1.41l-0.57,0.53l0.0,0.63l-0.51,0.55l-0.8,-0.19l-0.45,0.93l-0.62,-0.06l-0.41,-1.15l-0.73,-0.21l-0.52,1.03l0.11,0.69l-0.45,0.59l0.12,2.41l-0.95,-1.01l0.14,-1.28l-0.24,-0.59l-0.81,0.29l-0.08,2.01l-0.44,-0.25l0.15,-1.55l-0.48,-0.4l-0.68,0.49l-0.76,3.04l-0.75,-1.84l0.07,-1.51l-0.77,0.05l-1.06,2.76l0.51,0.55l0.73,-0.25l0.91,2.04l-0.28,-0.59l-0.52,-0.23l-0.66,0.3l-0.07,0.64l-1.38,-0.1l-2.16,3.18l-0.53,1.86l0.29,0.6l-0.68,0.65l0.51,0.43l0.91,-0.21l0.37,0.92l-0.77,0.3l-0.2,0.39l-0.4,-0.04l-0.51,0.57l-0.14,1.03l0.67,1.37l-0.08,0.68l-0.79,1.29l-0.94,0.61l-0.41,1.07l-0.1,1.28l0.44,0.9l-0.4,2.81l-0.8,-0.33l-0.41,0.6l-1.02,-0.76l-0.57,-1.86l-0.93,-0.37l-2.36,-1.99l-0.76,-3.45l-13.25,-35.55ZM863.92,80.85l0.09,0.26l-0.08,0.23l0.03,-0.29l-0.04,-0.2ZM865.33,81.07l0.47,0.7l-0.04,0.47l-0.32,-0.25l-0.1,-0.93ZM867.67,77.93l0.43,0.83l-0.16,0.14l-0.42,-0.19l0.16,-0.77ZM877.04,64.5l-0.14,0.2l-0.03,-0.24l0.17,0.04ZM873.08,74.84l0.01,0.02l-0.03,0.03l0.01,-0.06ZM882.73,63.41l0.04,-1.17l0.41,-0.66l-0.18,-0.44l0.4,-0.5l0.62,-0.11l1.54,1.36l-0.49,0.65l-1.08,0.04l-0.27,0.43l0.57,1.3l-0.99,-0.18l-0.14,-0.57l-0.44,-0.16ZM879.31,65.98l0.61,0.41l-0.35,0.29l0.15,0.96l-0.39,-0.63l0.19,-0.53l-0.21,-0.5ZM878.07,70.51l0.09,-0.01l0.48,-0.08l-0.25,0.46l-0.32,-0.37Z",
            "name": "Maine"
        },
        "US-MD": {
            "path": "M740.69,219.66l-2.04,-10.06l19.85,-4.49l-0.66,1.29l-0.94,0.08l-1.55,0.81l0.16,0.7l-0.42,0.49l0.23,0.78l-1.04,0.09l-0.72,0.41l-1.48,0.03l-1.14,-0.39l0.21,-0.36l-0.3,-0.49l-1.11,-0.31l-0.47,1.8l-1.63,2.85l-1.37,-0.39l-1.03,0.62l-0.41,1.26l-1.6,1.93l-0.36,1.04l-0.88,0.45l-1.3,1.87ZM760.76,204.58l37.02,-9.15l8.22,26.4l0.48,0.26l8.48,-2.22l0.24,0.71l0.6,0.03l0.38,0.95l0.52,-0.05l-0.38,1.96l-0.12,-0.26l-0.47,0.06l-0.73,0.86l-0.17,2.7l-0.6,0.19l-0.36,0.71l-0.02,1.47l-3.64,1.51l-0.37,0.76l-2.25,0.43l-0.56,0.65l-0.3,-1.09l0.5,-0.31l0.87,-1.85l-0.4,-0.51l-0.45,0.12l0.08,-0.5l-0.44,-0.42l-2.29,0.63l0.3,-0.6l1.15,-0.83l-0.17,-0.69l-1.36,-0.18l0.38,-2.24l-0.18,-1.02l-0.91,0.16l-0.53,1.76l-0.34,-0.69l-0.62,-0.07l-0.44,0.47l-0.5,1.39l0.53,1.02l-2.87,-2.14l-0.43,-0.19l-0.61,0.36l-0.73,-0.76l0.37,-0.84l-0.04,-0.84l0.76,-0.6l-0.08,-1.35l2.08,0.1l0.89,-0.45l0.36,-0.9l-0.32,-1.42l-0.43,-0.05l-0.54,1.31l-0.39,0.09l-1.05,-0.72l0.06,-0.4l-0.52,-0.28l-0.55,0.23l-0.22,-0.68l-0.73,0.1l-0.12,0.28l0.07,-0.74l0.65,-0.01l0.49,-0.37l0.22,-1.04l-0.54,-0.55l-0.57,0.71l-0.2,-0.53l0.88,-0.87l-0.25,-0.65l-0.54,-0.08l-0.09,-0.48l-0.42,-0.27l-0.35,0.15l-0.66,-0.53l0.89,-0.8l-0.24,-1.03l0.94,-2.38l-0.17,-0.43l-0.46,0.02l-0.66,0.66l-0.56,-0.16l-0.61,0.95l-0.74,-0.6l0.49,-3.59l0.6,-0.52l0.06,-0.61l4.22,-1.21l0.12,-0.7l-0.51,-0.3l-2.38,0.43l0.76,-1.27l1.42,-0.05l0.35,-0.5l-0.99,-0.67l0.44,-1.9l-0.63,-0.32l-1.2,1.82l0.05,-1.5l-0.59,-0.34l-0.68,1.1l-1.62,0.67l-0.31,1.65l0.39,0.54l0.65,0.12l-1.45,1.92l-0.2,-1.64l-0.64,-0.42l-0.61,0.73l0.07,1.45l-0.85,-0.29l-1.16,0.64l0.02,0.71l1.01,0.27l-0.37,0.54l-0.83,0.22l-0.05,0.34l-0.44,-0.04l-0.35,0.64l1.15,1.2l-1.88,-0.67l-1.21,0.59l0.16,0.69l1.56,0.58l0.91,0.93l0.72,-0.12l0.56,0.75l-0.98,-0.07l-1.15,1.36l0.32,0.77l1.57,0.92l-0.67,0.12l-0.21,0.41l0.8,1.08l-0.32,0.56l0.32,0.97l0.58,0.45l-0.52,1.09l0.99,1.25l0.96,3.54l0.61,0.84l2.07,1.63l0.42,0.81l-0.58,0.17l-0.64,-0.75l-1.45,-0.31l-1.64,-1.26l-1.33,-3.16l-0.73,-0.68l-0.3,0.37l0.11,0.7l1.28,3.54l1.14,1.31l2.05,0.74l1.03,1.11l0.64,0.14l0.91,-0.36l-0.03,1.11l1.66,1.54l0.1,1.1l-0.89,-0.35l-0.51,-1.29l-0.63,-0.45l-0.45,0.04l-0.13,0.44l0.27,0.79l-0.67,0.09l-0.65,-0.82l-1.41,-0.67l-2.39,0.63l-0.7,-0.67l-0.71,-1.49l-1.26,-0.71l-0.46,0.14l0.01,0.48l1.13,1.84l-0.22,-0.08l-1.62,-1.2l-1.66,-2.28l-0.45,-0.02l-0.37,1.44l-0.32,-0.79l-0.74,0.2l-0.21,0.27l0.33,0.72l-0.11,0.56l-0.76,0.53l-0.94,-1.5l0.07,-1.68l0.76,-0.6l-0.19,-0.74l0.78,-0.47l0.21,-1.61l1.07,-1.03l-0.0,-1.03l-0.46,-0.86l1.27,-2.19l-0.14,-0.54l-2.72,-1.68l-0.56,0.14l-0.63,1.08l-1.87,-0.26l-0.52,-0.83l-1.11,-0.51l-2.41,0.07l-1.25,-0.91l0.61,-1.35l-0.4,-0.97l-1.19,-0.3l-0.89,-0.66l-2.69,0.07l-0.36,-0.23l-0.11,-1.26l-1.04,-0.6l0.09,-1.2l-0.51,-0.29l-0.49,0.19l-0.23,-0.64l-0.52,-0.13l0.26,-0.83l-0.45,-0.58l-0.69,-0.12l-1.81,0.67l-2.24,-1.27ZM790.04,212.1l1.14,0.18l0.3,0.17l-0.52,0.29l-0.93,-0.63ZM803.05,225.67l-0.02,0.33l-0.21,-0.15l0.23,-0.19ZM807.02,229.13l-0.16,0.3l-0.13,0.07l0.02,-0.24l0.26,-0.12ZM797.57,220.61l-0.06,0.01l-0.09,0.03l0.12,-0.07l0.03,0.02ZM797.24,220.74l-0.26,0.56l-0.18,0.12l0.15,-0.61l0.29,-0.07ZM795.94,216.76l-0.29,0.29l-0.72,-0.27l0.02,-0.33l0.26,-0.36l0.72,0.67ZM794.58,212.85l-0.34,0.78l-0.59,0.23l0.02,-1.48l0.92,0.47ZM802.18,228.89l0.1,-0.11l0.12,0.08l-0.22,0.03Z",
            "name": "Maryland"
        },
        "US-AR": {
            "path": "M498.73,376.99l-1.42,-38.01l-4.48,-23.98l37.68,-2.58l39.02,-3.58l0.8,1.6l1.01,0.7l0.11,1.77l-0.77,0.57l-0.22,0.94l-1.42,0.93l-0.29,1.04l-0.83,0.54l-1.19,2.59l0.02,0.7l0.53,0.26l10.94,-1.46l0.86,0.93l-1.18,0.37l-0.52,0.96l0.25,0.49l0.84,0.41l-3.6,2.7l0.02,0.84l0.83,1.04l-0.6,1.15l0.62,0.97l-1.42,0.74l-0.11,1.44l-1.45,2.09l0.12,1.64l0.91,3.1l-0.15,0.27l-1.08,-0.01l-0.33,0.26l-0.51,1.73l-1.52,0.95l-0.04,0.51l0.79,0.91l0.05,0.65l-1.11,1.21l-2.02,1.13l-0.21,0.62l0.43,1.0l-0.19,0.27l-1.23,0.03l-0.42,0.67l-0.32,1.89l0.47,1.57l0.02,3.08l-1.27,1.09l-1.54,0.13l0.23,1.49l-0.21,0.48l-0.93,0.25l-0.59,1.77l-1.49,1.19l-0.02,0.93l1.39,0.76l-0.03,0.7l-1.23,0.3l-2.24,1.23l0.03,0.67l0.99,0.82l-0.45,1.14l0.53,1.38l-1.09,0.62l-1.9,2.57l0.52,0.7l1.0,0.49l0.01,0.58l-0.98,0.29l-0.42,0.64l0.51,0.84l1.63,1.01l0.06,1.77l-0.59,0.98l-0.09,0.84l0.29,0.4l1.05,0.39l0.5,2.17l-1.09,1.01l0.06,2.11l-51.46,4.07l-0.83,-11.53l-1.18,-0.85l-0.9,0.16l-0.83,-0.35l-0.93,0.39l-1.22,-0.33l-0.57,0.72l-0.47,0.01l-0.49,-0.48l-0.82,-0.15l-0.63,-1.0Z",
            "name": "Arkansas"
        },
        "US-MA": {
            "path": "M877.65,135.84l1.07,-0.19l0.85,-1.13l0.45,0.58l-1.06,0.64l-1.31,0.1ZM831.87,132.65l-0.46,-0.28l-10.4,2.53l-0.25,-0.18l-0.27,-14.8l29.99,-7.86l1.53,-1.8l0.34,-1.48l0.95,-0.35l0.61,-1.04l1.3,-1.08l1.23,-0.08l-0.44,1.05l1.36,0.55l-0.16,0.61l0.44,0.83l1.0,0.36l-0.06,0.32l0.39,0.28l1.31,0.19l-0.16,0.56l-2.52,1.87l-0.05,1.07l0.45,0.16l-1.11,1.41l0.23,1.08l-1.01,0.96l0.58,1.41l1.4,0.45l0.5,0.63l1.36,-0.57l0.33,-0.59l1.2,0.09l0.79,0.47l0.23,0.68l1.78,1.37l-0.07,1.25l-0.36,0.29l0.11,0.61l1.58,0.82l1.19,-0.14l0.68,1.2l0.22,1.14l0.89,0.68l1.33,0.41l1.48,-0.12l0.43,0.38l1.05,-0.23l3.35,-2.76l0.39,-0.69l0.54,0.02l0.56,1.86l-3.32,1.52l-0.94,0.82l-2.75,0.98l-0.49,1.65l-1.94,1.27l-0.81,-2.53l0.11,-1.35l-0.55,-0.31l-0.5,0.39l-0.93,-0.11l-0.3,0.51l0.25,0.92l-0.26,0.79l-0.4,0.06l-0.63,1.1l-0.6,-0.2l-0.5,0.48l0.22,1.86l-0.9,0.87l-0.63,-0.8l-0.47,0.01l-0.11,0.55l-0.26,0.03l-0.7,-2.02l-1.02,-0.35l0.44,-2.5l-0.21,-0.4l-0.77,0.4l-0.29,1.47l-0.69,0.2l-1.4,-0.64l-0.78,-2.12l-0.8,-0.22l-0.78,-2.15l-0.49,-0.24l-6.13,2.0l-0.3,-0.15l-14.84,4.19l-0.28,0.5ZM860.89,110.08l-0.02,-0.37l-0.14,-0.48l0.51,0.23l-0.35,0.62ZM876.37,122.8l-0.42,-0.66l0.06,-0.05l0.44,0.67l-0.09,0.05ZM875.46,121.25l-0.86,-0.11l-0.94,-1.42l1.44,1.0l0.36,0.54ZM871.54,119.46l-0.06,0.25l-0.35,-0.2l0.13,0.02l0.29,-0.07ZM871.87,135.18l0.01,-0.02l0.01,0.04l-0.02,-0.02ZM867.18,137.63l0.78,-0.56l0.28,-1.17l0.84,-1.19l0.17,0.26l0.46,-0.11l0.34,0.52l0.71,-0.01l0.19,0.38l-2.11,0.73l-1.34,1.31l-0.33,-0.17Z",
            "name": "Massachusetts"
        },
        "US-AL": {
            "path": "M608.66,337.47l25.17,-2.91l19.4,-2.75l14.04,43.3l0.79,1.4l0.22,1.05l1.17,1.59l0.59,1.87l2.24,2.5l0.92,1.8l-0.11,2.13l1.8,1.13l-0.17,0.74l-0.63,0.1l-0.16,0.7l-0.98,0.84l-0.22,2.29l0.25,1.48l-0.77,2.3l-0.14,1.84l1.1,2.94l1.21,1.52l0.53,1.6l-0.08,5.02l-0.25,0.81l0.48,2.03l1.35,1.16l1.14,2.07l-47.65,6.92l-0.42,0.61l-0.08,2.99l2.64,2.75l2.0,0.97l-0.34,2.7l0.56,1.6l0.43,0.39l-0.94,1.69l-1.24,1.0l-1.13,-0.75l-0.34,0.49l0.66,1.46l-2.82,1.05l0.29,-0.64l-0.45,-0.86l-0.99,-0.77l-0.1,-1.11l-0.57,-0.22l-0.53,0.61l-0.32,-0.1l-0.89,-1.53l0.41,-1.67l-0.97,-2.21l-0.46,-0.45l-0.86,-0.2l-0.3,-0.89l-0.56,-0.17l-0.37,0.61l0.14,0.35l-0.77,3.1l-0.01,5.08l-0.59,0.0l-0.24,-0.71l-2.22,-0.44l-1.65,0.31l-5.46,-31.99l-0.99,-66.49l-0.02,-0.37l-1.07,-0.63l-0.69,-1.02Z",
            "name": "Alabama"
        },
        "US-MO": {
            "path": "M468.68,225.54l24.71,-0.73l18.94,-1.43l22.11,-2.58l0.42,0.35l0.39,0.91l2.43,1.65l0.29,0.74l1.21,0.87l-0.51,1.37l-0.1,3.21l0.78,3.65l0.95,1.44l0.03,1.59l1.11,1.37l0.46,1.55l4.96,4.1l1.06,1.69l4.93,3.31l0.7,1.15l0.27,1.62l0.5,0.82l-0.18,0.69l0.47,1.8l0.97,1.63l0.77,0.73l1.04,0.16l0.83,-0.56l0.84,-1.4l0.57,-0.19l2.41,0.61l1.68,0.76l0.84,0.77l-0.97,1.95l0.26,2.28l-2.37,6.86l0.01,1.02l0.7,1.92l4.67,4.05l1.99,1.05l1.46,0.09l1.66,1.31l1.91,0.8l1.51,2.11l2.04,0.83l0.42,2.96l1.72,2.9l-1.1,1.94l0.18,1.38l0.75,0.33l2.31,4.25l1.94,0.92l0.55,-0.32l0.0,-0.65l0.87,1.1l1.07,-0.08l0.14,1.85l-0.37,1.07l0.53,1.6l-1.07,3.86l-0.51,0.07l-1.37,-1.13l-0.65,0.13l-0.78,3.34l-0.52,0.74l0.13,-1.06l-0.56,-1.09l-0.97,-0.2l-0.74,0.63l0.02,1.05l0.53,0.66l-0.04,0.7l0.58,1.34l-0.2,0.4l-1.2,0.39l-0.17,0.41l0.15,0.55l0.86,0.84l-1.71,0.37l-0.14,0.62l1.53,1.97l-0.89,0.75l-0.63,2.13l-10.61,1.42l1.06,-2.28l0.87,-0.61l0.18,-0.87l1.44,-0.96l0.25,-0.96l0.63,-0.37l0.29,-0.59l-0.22,-2.28l-1.05,-0.75l-0.2,-0.77l-1.09,-1.18l-39.24,3.61l-37.72,2.58l-3.21,-58.2l-1.03,-0.63l-1.2,-0.02l-1.52,-0.73l-0.19,-0.93l-0.76,-0.59l-0.34,-0.71l-0.36,-1.55l-0.55,-0.09l-0.3,-0.56l-1.13,-0.66l-1.4,-1.84l0.73,-0.51l0.09,-1.24l1.12,-1.27l0.09,-0.79l1.01,0.16l0.56,-0.43l-0.2,-2.24l-1.02,-0.74l-0.32,-1.1l-1.17,-0.01l-1.31,0.96l-0.81,-0.7l-0.73,-0.17l-2.67,-2.35l-1.05,-0.28l0.13,-1.6l-1.32,-1.72l0.1,-1.02l-0.37,-0.36l-1.01,-0.18l-0.59,-0.85l-0.84,-0.26l0.07,-0.53l-1.24,-2.88l-0.0,-0.74l-0.4,-0.49l-0.85,-0.29l-0.05,-0.54ZM583.77,294.59l-0.1,-0.1l-0.08,-0.15l0.11,-0.01l0.07,0.26Z",
            "name": "Missouri"
        },
        "US-MN": {
            "path": "M439.34,42.76l26.81,-1.05l0.34,1.46l1.28,0.84l1.79,-0.5l1.05,-1.43l0.78,-0.31l2.13,2.19l1.71,0.28l0.31,1.2l1.83,1.4l1.79,0.48l2.64,-0.41l0.39,0.85l0.67,0.4l5.12,0.01l0.37,0.23l0.54,1.59l0.71,0.61l4.27,-0.78l0.77,-0.65l0.07,-0.69l2.43,-0.79l3.97,-0.02l1.42,0.7l3.39,0.66l-1.01,0.79l0.0,0.82l1.18,0.54l2.23,-0.16l0.52,2.08l1.58,2.29l0.71,0.05l1.03,-0.78l-0.04,-1.73l2.67,-0.46l1.43,2.17l2.01,0.79l1.54,0.18l0.54,0.57l-0.03,0.83l0.58,0.35l1.32,0.06l0.38,0.83l1.43,-0.19l1.12,0.22l2.22,-0.85l2.78,-2.55l2.49,-1.54l1.24,2.52l0.96,0.51l2.23,-0.66l0.87,0.36l5.98,-1.3l0.56,0.18l1.32,1.64l1.24,0.59l0.62,-0.01l1.61,-0.83l1.35,0.08l-0.93,1.03l-4.69,3.07l-6.35,2.82l-3.68,2.48l-2.15,2.49l-0.95,0.58l-6.63,8.66l-0.95,0.61l-1.08,1.56l-1.96,1.96l-4.17,3.55l-0.86,1.79l-0.55,0.44l-0.14,0.96l-0.78,-0.01l-0.46,0.51l0.98,12.22l-0.79,1.2l-1.05,0.08l-0.52,0.82l-0.83,0.15l-0.61,0.83l-2.06,1.19l-0.94,1.86l0.06,0.72l-1.69,2.39l-0.01,2.06l0.38,0.91l2.15,0.39l1.42,2.49l-0.52,1.92l-0.71,1.25l-0.05,2.12l0.45,1.32l-0.71,1.23l0.91,3.14l-0.51,4.08l3.95,3.03l3.02,0.4l1.89,2.25l2.87,0.5l2.45,1.93l2.39,3.59l2.64,1.8l2.09,0.09l1.07,0.71l0.88,0.1l0.82,1.36l1.03,0.45l0.23,0.39l0.28,2.03l0.68,1.3l0.39,4.82l-40.63,3.2l-40.63,2.09l-1.46,-38.98l-0.7,-1.27l-0.83,-0.78l-2.57,-0.79l-0.94,-1.91l-1.46,-1.79l0.21,-0.68l2.83,-2.34l0.97,-2.12l0.4,-2.44l-0.35,-1.58l0.23,-1.58l-0.18,-1.79l-0.5,-1.03l-0.18,-2.33l-1.81,-2.59l-0.47,-1.13l-0.21,-2.16l-0.66,-0.98l0.15,-1.66l-0.35,-1.52l0.53,-2.69l-1.08,-1.85l-0.49,-8.33l-0.42,-0.79l0.06,-3.92l-1.58,-3.96l-0.53,-0.65l-0.4,-1.37l0.05,-1.19l-0.48,-0.53l-1.36,-3.77l0.0,-3.22l-0.47,-1.97l0.27,-1.12l-0.57,-2.32l0.73,-2.56l-2.06,-6.9ZM468.97,33.61l1.22,0.46l0.99,-0.2l0.33,0.45l-0.05,1.72l-1.78,1.12l-0.15,-0.47l-0.4,-0.14l-0.16,-2.95Z",
            "name": "Minnesota"
        },
        "US-CA": {
            "path": "M2.95,175.4l0.78,-1.24l0.46,0.46l0.59,-0.08l0.52,-1.18l0.8,-0.86l1.3,-0.26l0.56,-0.53l-0.15,-0.71l-0.93,-0.32l1.53,-2.79l-0.3,-1.58l0.14,-0.87l2.04,-3.3l1.31,-3.03l0.36,-2.12l-0.28,-1.0l0.16,-3.11l-1.36,-2.16l1.18,-1.38l0.67,-2.53l32.73,8.13l32.58,7.34l-13.67,64.68l25.45,34.66l36.6,51.1l13.3,17.72l-0.19,2.73l0.73,0.94l0.21,1.71l0.85,0.63l0.81,2.56l-0.07,0.91l0.63,1.46l-0.16,1.36l3.8,3.82l0.01,0.5l-1.95,1.53l-3.11,1.26l-1.2,1.99l-1.72,1.14l-0.33,0.81l0.38,1.03l-0.51,0.51l-0.1,0.9l0.08,2.29l-0.6,0.72l-0.64,2.44l-2.02,2.47l-1.6,0.14l-0.42,0.51l0.33,0.89l-0.59,1.34l0.54,1.12l-0.01,1.19l-0.78,2.68l0.57,1.02l2.74,1.13l0.34,0.83l-0.19,2.4l-1.18,0.78l-0.42,1.37l-2.27,-0.62l-1.25,0.6l-43.38,-3.34l0.17,-1.15l0.67,-0.51l-0.17,-1.06l-1.17,-1.38l-1.04,-0.15l0.23,-1.2l-0.28,-1.07l0.78,-1.33l-0.3,-4.25l-0.6,-2.3l-1.92,-4.07l-3.56,-4.07l-1.29,-1.98l-2.42,-2.11l-2.04,-3.01l-2.22,-0.89l-0.94,0.3l-0.39,0.96l-0.62,-0.73l-0.88,-0.22l-0.15,-0.31l0.61,-0.76l0.17,-1.57l-0.44,-2.06l-1.01,-1.95l-1.0,-0.74l-4.44,-0.19l-3.33,-1.81l-1.36,-1.26l-0.7,-0.12l-1.02,-1.19l-0.44,-2.6l-0.97,-0.47l-1.68,-2.31l-2.19,-1.73l-1.24,-0.41l-1.66,0.37l-1.15,-1.01l-1.25,0.03l-2.48,-1.83l-1.06,0.01l-1.49,-0.69l-4.91,-0.52l-1.12,-2.35l-1.43,-0.76l1.34,-2.45l-0.25,-1.36l0.74,-1.99l-0.63,-1.35l1.27,-2.45l0.33,-2.44l-0.99,-1.24l-1.26,-0.23l-1.4,-1.28l0.41,-1.62l0.79,-0.09l0.25,-0.45l-0.47,-2.2l-0.65,-0.77l-1.47,-0.84l-1.78,-3.97l-1.82,-1.25l-0.36,-2.75l-1.61,-2.58l0.07,-1.39l-0.33,-1.26l-1.16,-0.94l-0.74,-2.95l-2.41,-2.69l-0.55,-1.25l-0.02,-4.63l0.59,-0.57l-0.59,-1.14l0.51,-0.59l0.53,0.61l0.78,-0.02l0.84,-0.81l0.56,-1.33l0.8,0.04l0.21,-0.88l-0.43,-0.27l0.47,-1.19l-1.22,-3.68l-0.62,-0.48l-1.05,0.08l-1.93,-0.51l-1.04,-1.06l-1.89,-3.21l-0.8,-2.28l0.86,-2.39l0.09,-1.11l-0.27,-2.38l-0.32,-0.64l-0.54,-0.24l0.25,-1.19l0.69,-1.07l0.24,-2.71l0.47,-0.64l0.88,0.13l0.18,0.94l-0.7,2.13l0.05,1.15l1.18,1.32l0.55,0.1l0.58,1.28l1.16,0.78l0.4,1.01l0.89,0.41l0.83,-0.21l-0.21,-1.45l-0.65,-0.43l-0.18,-0.58l-0.24,-3.57l-0.56,-0.71l0.26,-0.69l-1.48,-1.06l0.5,-1.07l0.09,-1.06l-1.2,-1.58l0.78,-0.74l0.79,0.06l1.24,-0.73l1.25,1.02l1.87,-0.32l5.55,2.41l0.61,-0.09l0.64,-1.38l0.69,-0.04l1.92,2.53l0.25,0.18l0.63,-0.24l0.02,-0.38l-0.39,-0.93l-1.57,-1.89l-1.66,-0.32l0.27,-0.62l-0.28,-0.54l-0.48,0.09l-1.05,1.01l-1.84,-0.22l-0.43,0.28l-0.15,-0.51l-1.05,-0.4l0.24,-1.05l-0.85,-0.47l-1.0,0.28l-0.6,0.84l-1.09,0.4l-1.35,-0.9l-0.39,-0.88l-1.51,-1.44l-0.58,0.03l-0.64,0.61l-0.92,-0.12l-0.48,0.36l-0.33,1.88l0.21,0.78l-0.76,1.36l0.36,0.65l-0.47,0.59l-0.04,0.69l-2.16,-2.89l-0.44,-0.15l-0.25,0.32l-0.73,-1.0l-0.21,-1.03l-1.2,-1.17l-0.4,-1.05l-0.61,-0.18l0.65,-1.48l0.11,0.95l0.76,1.49l0.44,0.25l0.33,-0.38l-1.45,-5.21l-1.08,-1.42l-0.31,-2.68l-2.5,-2.87l-1.8,-4.48l-3.05,-5.54l1.09,-1.7l0.25,-1.97l-0.46,-2.11l-0.14,-3.61l1.34,-2.92l0.7,-0.74l-0.07,-1.54l0.42,-1.53l-0.41,-1.63l0.11,-1.96l-1.41,-4.06l-0.97,-1.15l0.06,-0.8l-0.42,-1.19l-2.91,-4.03l0.51,-1.35l-0.21,-2.69l2.23,-3.44ZM31.5,240.45l-0.06,0.1l-0.34,0.04l0.21,-0.05l0.19,-0.09ZM64.32,351.64l0.27,0.13l0.19,0.18l-0.31,-0.18l-0.15,-0.13ZM65.92,352.88l1.32,0.84l0.76,1.73l-0.89,-0.66l-1.14,0.03l-0.05,-1.94ZM62.72,363.08l1.36,2.08l0.57,0.53l-0.46,0.06l-0.83,-0.79l-0.65,-1.88ZM43.54,333.81l0.88,0.73l1.37,0.36l1.36,1.0l-2.82,-0.18l-0.71,-0.58l0.24,-0.66l-0.32,-0.67ZM47.89,335.89l0.94,-0.5l0.32,0.36l-0.37,0.14l-0.88,-0.0ZM46.05,352.4l0.29,-0.06l0.95,0.92l-0.61,-0.17l-0.64,-0.69ZM37.57,334.04l2.57,0.16l0.2,0.74l0.6,0.45l-1.21,0.64l-1.17,-0.1l-0.49,-0.44l-0.5,-1.44ZM34.94,332.37l0.06,-0.02l0.05,0.06l-0.01,-0.0l-0.1,-0.04Z",
            "name": "California"
        },
        "US-IA": {
            "path": "M452.9,162.25l42.83,-2.19l40.56,-3.19l0.96,2.52l2.0,1.0l0.08,0.59l-0.9,1.8l-0.16,1.04l0.9,5.09l0.92,1.26l0.39,1.75l1.46,1.72l4.95,0.85l1.27,2.03l-0.3,1.03l0.29,0.66l3.61,2.37l0.85,2.41l3.84,2.31l0.62,1.68l-0.31,4.21l-1.64,1.98l-0.5,1.94l0.13,1.28l-1.26,1.36l-2.51,0.97l-0.89,1.18l-0.55,0.25l-4.56,0.83l-0.89,0.73l-0.61,1.71l-0.15,2.56l0.4,1.08l2.01,1.47l0.54,2.65l-1.87,3.25l-0.22,2.24l-0.53,1.42l-2.88,1.39l-1.02,1.02l-0.2,0.99l0.72,0.87l0.2,2.15l-0.58,0.23l-1.34,-0.82l-0.31,-0.76l-1.29,-0.82l-0.29,-0.51l-0.88,-0.36l-0.3,-0.82l-0.95,-0.68l-22.3,2.61l-15.13,1.17l-7.59,0.51l-20.78,0.47l-0.22,-1.06l-1.3,-0.73l-0.33,-0.67l0.58,-1.16l-0.21,-0.95l0.22,-1.39l-0.36,-2.19l-0.6,-0.73l0.07,-3.65l-1.05,-0.5l0.05,-0.91l0.71,-1.02l-0.05,-0.44l-1.31,-0.56l0.33,-2.54l-0.41,-0.45l-0.89,-0.16l0.23,-0.8l-0.3,-0.58l-0.51,-0.25l-0.74,0.23l-0.42,-2.81l0.5,-2.36l-0.2,-0.67l-1.36,-1.71l-0.08,-1.92l-1.78,-1.54l-0.36,-1.74l-1.09,-0.94l0.03,-2.18l-1.1,-1.87l0.21,-1.7l-0.27,-1.08l-1.38,-0.67l-0.42,-1.58l-0.45,-0.59l0.05,-0.63l-1.81,-1.82l0.56,-1.61l0.54,-0.47l0.73,-2.68l0.0,-1.68l0.55,-0.69l0.21,-1.19l-0.51,-2.24l-1.33,-0.29l-0.05,-0.73l0.45,-0.56l-0.0,-1.71l-0.95,-1.42l-0.05,-0.87Z",
            "name": "Iowa"
        },
        "US-MI": {
            "path": "M612.24,185.84l1.83,-2.17l0.7,-1.59l1.18,-4.4l1.43,-3.04l1.01,-5.05l0.09,-5.37l-0.86,-5.54l-2.4,-5.18l0.61,-0.51l0.3,-0.79l-0.57,-0.42l-1.08,0.55l-3.82,-7.04l-0.21,-1.11l1.13,-2.69l-0.01,-0.97l-0.74,-3.13l-1.28,-1.65l-0.05,-0.62l1.73,-2.73l1.22,-4.14l-0.21,-5.34l-0.77,-1.6l1.09,-1.15l0.81,-0.02l0.56,-0.47l-0.27,-3.49l1.08,-0.11l0.67,-1.43l1.19,0.48l0.65,-0.33l0.76,-2.59l0.82,-1.2l0.56,-1.68l0.55,-0.18l-0.58,0.87l0.6,1.65l-0.71,1.8l0.71,0.42l-0.48,2.61l0.88,1.42l0.73,-0.06l0.52,0.56l0.65,-0.24l0.89,-2.26l0.66,-3.52l-0.08,-2.07l-0.76,-3.42l0.58,-1.02l2.13,-1.64l2.74,-0.54l0.98,-0.63l0.28,-0.64l-0.25,-0.54l-1.76,-0.1l-0.96,-0.86l-0.52,-1.99l1.85,-2.98l-0.11,-0.73l1.72,-0.23l0.74,-0.94l4.16,2.0l0.83,0.13l1.98,-0.4l1.37,0.39l1.19,1.04l0.53,1.14l0.77,0.49l2.41,-0.29l1.7,1.02l1.92,0.09l0.8,0.64l3.27,0.45l1.1,0.78l-0.01,1.12l1.04,1.31l0.64,0.21l0.38,0.92l-0.16,0.54l-0.66,-0.25l-0.94,0.57l-0.23,1.83l0.81,1.29l1.6,0.99l0.69,1.37l0.65,2.26l-0.12,1.73l0.77,5.57l-0.14,0.6l-0.57,0.2l-0.48,0.96l-0.75,0.08l-0.79,0.81l-0.17,4.47l-1.12,0.49l-0.18,0.82l-1.86,0.43l-0.73,0.6l-0.58,2.61l0.26,0.45l-0.21,0.52l0.25,2.58l1.38,1.31l2.9,0.84l0.91,-0.07l1.08,-1.23l0.6,-1.44l0.62,0.19l0.38,-0.24l1.01,-3.59l0.6,-1.06l-0.08,-0.52l0.97,-1.45l1.39,-0.39l1.07,-0.69l0.83,-1.1l0.87,-0.44l2.06,0.59l1.13,0.7l1.0,1.09l1.21,2.16l2.0,5.91l0.82,1.6l1.03,3.71l1.49,3.63l1.27,1.73l-0.33,3.93l0.45,2.49l-0.48,2.79l-0.34,0.44l-0.24,-0.33l-0.31,-1.71l-1.46,-0.52l-0.47,0.08l-1.48,1.36l-0.06,0.83l0.55,0.67l-0.83,0.57l-0.29,0.79l0.28,2.94l-0.49,0.75l-1.62,0.92l-1.06,1.85l-0.43,3.73l0.27,1.55l-0.33,0.93l-0.42,0.19l0.02,0.91l-0.64,0.3l-0.37,1.08l-0.52,0.52l-0.5,1.28l-0.02,1.05l-0.52,0.78l-20.37,4.25l-0.14,-0.86l-0.46,-0.33l-31.6,4.74ZM621.47,115.87l0.0,-0.07l0.12,-0.12l-0.01,0.03l-0.11,0.16ZM621.73,114.95l-0.07,-0.16l0.07,-0.14l-0.0,0.3ZM543.48,88.04l4.87,-2.38l3.55,-3.62l5.77,-1.36l1.39,-0.84l2.36,-2.71l0.97,0.04l1.52,-0.73l1.0,-2.25l2.82,-2.84l0.23,1.72l1.85,0.59l0.05,1.45l0.66,0.14l0.51,0.6l-0.17,3.14l0.44,0.95l-0.34,0.47l0.2,0.47l0.74,-0.02l1.08,-2.21l1.08,-0.9l-0.42,1.15l0.59,0.45l0.82,-0.67l0.52,-1.22l1.0,-0.43l3.09,-0.25l1.51,0.21l1.18,0.93l1.54,0.44l0.47,1.05l2.31,2.58l1.17,0.55l0.53,1.55l0.73,0.34l1.87,0.07l0.73,-0.4l1.07,-0.06l0.52,-0.65l0.88,-0.43l1.0,1.11l1.1,0.64l1.02,-0.25l0.68,-0.82l1.87,1.06l0.64,-0.34l1.65,-2.59l2.81,-1.89l1.7,-1.65l0.91,0.11l3.27,-1.21l5.17,-0.25l4.49,-2.72l2.56,-0.37l-0.01,3.24l0.29,0.71l-0.36,1.1l0.67,0.85l0.66,0.11l0.71,-0.39l2.2,0.7l1.14,-0.43l1.03,-0.87l0.66,0.48l0.21,0.71l0.85,0.22l1.27,-0.8l0.95,-1.55l0.66,-0.02l0.84,0.75l1.98,3.78l-0.86,1.04l0.48,0.89l0.47,0.36l1.37,-0.42l0.58,0.46l0.64,0.04l0.18,1.2l0.98,0.87l1.53,0.52l-1.17,0.68l-4.96,-0.14l-0.53,0.29l-1.35,-0.17l-0.88,0.41l-0.66,-0.76l-1.63,-0.07l-0.59,0.47l-0.07,1.22l-0.49,0.75l0.38,2.05l-0.92,-0.22l-0.89,-0.92l-0.77,-0.13l-1.96,-1.65l-2.41,-0.6l-1.6,0.04l-1.04,-0.5l-2.89,0.47l-0.61,0.45l-1.18,2.52l-3.48,0.73l-0.58,0.77l-2.06,-0.34l-2.82,0.93l-0.68,0.83l-0.56,2.51l-0.78,0.28l-0.81,0.87l-0.65,0.28l0.16,-1.96l-0.75,-0.91l-1.02,0.34l-0.76,0.92l-0.97,-0.39l-0.68,0.17l-0.37,0.4l0.1,0.83l-0.73,2.01l-1.2,0.59l-0.11,-1.38l-0.46,-1.06l0.34,-1.69l-0.17,-0.37l-0.66,-0.17l-0.45,0.58l-0.6,2.12l-0.22,2.57l-1.12,0.91l-1.26,3.02l-0.62,2.66l-2.56,5.33l-0.69,0.74l0.12,0.91l-1.4,-1.28l0.18,-1.75l0.63,-1.69l-0.41,-0.81l-0.62,-0.31l-1.36,0.85l-1.16,0.09l0.04,-1.29l0.81,-1.45l-0.41,-1.34l0.3,-1.09l-0.58,-0.98l0.15,-0.83l-1.9,-1.55l-1.1,-0.06l-0.59,-0.44l-0.86,0.2l-0.62,-0.2l0.3,-1.36l-0.94,-1.45l-1.13,-0.51l-2.23,-0.1l-3.2,-0.71l-1.55,0.59l-1.43,-0.42l-1.62,0.17l-4.56,-1.94l-15.37,-2.5l-2.0,-3.4l-1.88,-0.96l-0.76,0.26l-0.1,-0.3ZM603.38,98.65l-0.01,0.52l-0.46,0.32l-0.7,1.39l0.08,0.57l-0.65,-0.58l0.91,-2.16l0.83,-0.06ZM643.87,87.47l1.99,-1.52l0.17,-0.57l-0.27,-0.64l1.05,0.16l0.8,1.24l0.81,0.19l-0.27,1.08l-0.36,0.19l-1.5,-0.34l-0.77,0.45l-1.63,-0.24ZM635.6,77.64l0.56,-0.83l0.52,0.05l-0.37,1.32l0.11,0.71l-0.35,-0.9l-0.46,-0.35ZM636.53,79.17l0.09,0.14l0.01,0.01l-0.02,-0.01l-0.08,-0.14ZM637.39,81.25l0.4,0.45l0.22,0.61l-0.63,-0.71l0.01,-0.34ZM633.73,93.13l1.41,0.25l0.36,-0.18l0.4,0.21l-0.17,0.52l-0.75,0.11l-1.24,-0.9ZM618.85,96.77l0.62,2.25l-0.8,0.78l-0.39,-0.27l0.56,-2.76ZM613.26,110.83l0.47,0.3l-0.09,0.57l-0.45,-0.69l0.06,-0.17ZM612.23,113.57l0.0,-0.03l0.02,-0.04l-0.03,0.07ZM599.41,82.64l-0.23,-0.37l0.03,-0.4l0.37,0.32l-0.17,0.45ZM570.51,72.75l-0.51,-0.27l-1.16,0.06l-0.04,-1.56l1.0,-1.03l1.17,-2.09l1.84,-1.49l0.63,-0.0l0.53,-0.58l2.08,-0.89l3.34,-0.42l1.1,0.66l-0.54,0.38l-1.31,-0.12l-2.27,0.78l-0.15,0.29l0.3,0.59l0.71,0.13l-1.19,0.98l-1.4,1.89l-0.7,0.29l-0.36,1.45l-1.15,1.37l-0.66,2.04l-0.67,-0.87l0.75,-0.97l0.14,-1.95l-0.63,-0.37l-0.21,0.15l-0.6,0.92l-0.05,0.67ZM558.28,58.21l0.75,-0.98l-0.39,-0.33l0.56,-0.53l4.62,-2.98l1.97,-1.72l0.62,-0.18l-0.45,0.65l0.1,0.79l-0.43,0.49l-4.25,2.56l-0.86,0.99l0.24,0.36l-1.87,1.17l-0.61,-0.28Z",
            "name": "Michigan"
        },
        "US-GA": {
            "path": "M654.05,331.71l22.02,-3.57l20.65,-3.86l-1.48,1.42l-0.51,1.68l-0.66,0.82l-0.41,1.73l0.11,1.23l0.82,0.78l1.84,0.8l1.03,0.12l2.7,2.03l0.84,0.24l1.9,-0.37l0.6,0.25l0.8,1.64l1.51,1.6l1.04,2.5l1.33,0.82l0.84,1.16l0.56,0.26l1.0,1.77l1.07,0.3l1.17,0.99l3.81,1.85l2.41,3.16l2.25,0.58l2.53,1.67l0.5,2.34l1.25,1.02l0.47,-0.16l0.31,0.49l-0.1,0.62l0.79,0.73l0.79,0.09l0.56,1.21l4.99,1.89l0.4,1.78l1.54,1.73l1.02,2.01l-0.07,0.81l0.49,0.69l0.11,1.24l1.04,0.79l1.17,0.17l1.25,0.62l0.28,0.53l0.57,0.23l1.12,2.56l0.76,0.57l0.08,2.68l0.77,1.48l1.38,0.9l1.52,-0.27l1.44,0.76l1.45,0.11l-0.59,0.78l-0.56,-0.35l-0.47,0.28l-0.4,0.99l0.62,0.91l-0.38,0.48l-1.38,-0.16l-0.77,-0.55l-0.65,0.44l0.26,0.71l-0.49,0.52l0.36,0.61l0.94,-0.04l0.5,0.29l-0.58,1.35l-1.43,0.27l-1.33,-0.44l-0.44,0.39l0.34,0.85l1.23,0.35l-0.5,0.87l0.23,0.35l-0.2,0.64l0.83,0.64l-0.33,0.44l-0.72,-0.13l-0.96,0.51l-0.1,0.62l1.09,0.45l0.05,0.95l0.48,-0.07l1.2,-1.17l-0.92,2.31l-0.31,-0.58l-0.59,-0.08l-0.44,0.72l0.29,0.7l0.98,0.83l-2.32,0.04l-0.92,-0.28l-0.63,0.3l0.06,0.63l0.55,0.34l2.76,0.24l1.07,0.66l-0.02,0.34l-0.56,0.22l-0.88,1.95l-0.5,-1.41l-0.45,-0.13l-0.6,0.33l-0.15,0.84l0.34,0.96l-0.6,0.11l-0.03,0.84l-0.3,0.16l0.07,0.46l1.33,1.15l-1.09,1.03l0.32,0.47l0.77,0.07l-0.39,0.92l0.06,0.88l-0.46,0.51l1.1,1.66l0.03,0.76l-0.79,0.33l-2.64,-0.17l-4.06,-0.96l-1.31,0.35l-0.18,0.74l-0.68,0.26l-0.35,1.25l0.28,2.08l0.95,1.36l0.13,4.25l-1.97,0.4l-0.54,-0.92l-0.12,-1.3l-1.33,-1.82l-49.22,5.14l-0.72,-0.56l-0.86,-2.7l-0.94,-1.51l-0.56,-0.38l0.16,-0.68l-0.73,-1.51l-1.82,-1.81l-0.43,-1.75l0.25,-0.8l0.06,-5.18l-0.6,-1.81l-1.19,-1.47l-1.03,-2.65l0.12,-1.65l0.78,-2.36l-0.25,-1.53l0.19,-2.11l1.62,-1.33l0.46,-1.47l-0.55,-0.61l-1.42,-0.69l0.09,-2.15l-0.97,-1.87l-2.18,-2.42l-1.03,-2.81l-0.75,-0.68l-0.17,-0.96l-0.77,-1.37l-13.99,-43.12ZM745.21,389.83l0.7,-0.26l-0.07,0.82l-0.29,-0.33l-0.34,-0.24ZM743.75,406.73l0.05,0.87l-0.01,0.46l-0.34,-0.56l0.3,-0.76Z",
            "name": "Georgia"
        },
        "US-AZ": {
            "path": "M128.39,384.21l0.44,-1.81l1.29,-1.29l0.54,-1.11l0.48,-0.25l1.66,0.62l0.96,-0.03l0.52,-0.46l0.28,-1.17l1.31,-1.0l0.24,-2.73l-0.46,-1.24l-0.84,-0.66l-2.07,-0.67l-0.3,-0.61l0.8,-2.4l0.0,-1.39l-0.52,-1.2l0.57,-0.86l-0.2,-0.87l1.57,-0.27l2.29,-2.81l0.65,-2.43l0.65,-0.81l0.02,-3.17l0.55,-0.62l-0.29,-1.43l1.71,-1.14l1.03,-1.85l3.16,-1.29l2.03,-1.58l0.26,-0.53l-0.13,-1.04l-3.25,-3.49l-0.51,-0.22l0.22,-1.26l-0.66,-1.46l0.07,-0.91l-0.88,-2.76l-0.84,-0.56l-0.19,-1.65l-0.69,-0.8l0.19,-3.54l0.58,-0.87l-0.3,-0.86l1.04,-0.4l0.4,-1.42l0.14,-3.2l-0.76,-3.66l0.47,-0.88l0.29,-1.67l-0.4,-3.0l0.85,-2.56l-0.8,-1.87l-0.03,-0.92l0.43,-0.52l0.34,-1.35l2.54,-0.63l1.75,0.99l1.43,-0.19l0.96,2.24l0.79,0.71l1.54,0.14l1.01,-0.5l1.02,-2.27l0.94,-1.19l2.57,-16.95l42.43,5.78l42.56,4.67l-11.82,123.66l-36.89,-4.05l-36.34,-18.98l-28.44,-15.56Z",
            "name": "Arizona"
        },
        "US-MT": {
            "path": "M166.3,57.31l0.69,-0.1l0.33,-0.38l-0.9,-1.99l0.83,-0.96l-0.39,-1.3l0.09,-0.96l-1.24,-1.93l-0.24,-1.49l-1.03,-1.33l-1.19,-2.44l3.53,-20.65l43.66,6.71l43.06,5.23l42.75,3.84l43.15,2.53l-3.53,86.06l-28.11,-1.47l-26.82,-1.91l-26.78,-2.4l-25.84,-2.79l-0.44,0.35l-1.22,10.41l-1.51,-2.01l-0.03,-0.91l-1.19,-2.35l-1.25,-0.74l-1.8,0.92l0.03,1.05l-0.72,0.42l-0.34,1.56l-2.42,-0.41l-1.91,0.57l-0.92,-0.85l-3.36,0.09l-2.38,-0.96l-1.68,0.58l-0.84,1.49l-4.66,-1.6l-1.3,0.37l-1.12,0.9l-0.31,0.67l-1.65,-1.4l0.22,-1.43l-0.9,-1.71l0.4,-0.36l0.07,-0.62l-1.17,-3.08l-1.45,-1.25l-1.44,0.36l-0.21,-0.64l-1.08,-0.9l-0.41,-1.37l0.68,-0.61l0.2,-1.41l-0.77,-2.38l-0.77,-0.35l-0.31,-1.58l-1.51,-2.54l0.23,-1.51l-0.56,-1.26l0.34,-1.4l-0.73,-0.86l0.48,-0.98l-0.21,-0.74l-1.14,-0.75l-0.13,-0.59l-0.85,-0.91l-0.8,-0.4l-0.51,0.37l-0.07,0.74l-0.7,0.27l-1.13,1.22l-1.75,0.37l-1.21,1.07l-1.08,-0.85l-0.64,-1.01l-1.06,-0.44l0.02,-0.86l0.74,-0.63l0.24,-1.06l-0.61,-1.6l0.9,-1.09l1.07,-0.08l0.83,-0.8l-0.26,-1.14l0.38,-1.07l-0.95,-0.81l-0.04,-0.81l0.66,-1.28l-0.59,-1.07l0.74,-0.07l0.38,-0.42l-0.04,-1.77l1.83,-3.73l-0.14,-1.05l0.89,-0.62l0.6,-3.17l-0.78,-0.5l-1.8,0.37l-1.33,-0.11l-0.64,-0.55l0.37,-0.83l-0.62,-0.97l-0.66,-0.23l-0.72,0.35l-0.07,-0.95l-1.74,-1.63l0.04,-1.84l-1.68,-1.82l-0.08,-0.69l-1.55,-2.88l-1.07,-1.29l-0.57,-1.63l-2.35,-1.34l-0.95,-1.95l-1.44,-1.19Z",
            "name": "Montana"
        },
        "US-MS": {
            "path": "M555.49,431.1l0.67,-0.97l-1.05,-1.76l0.18,-1.63l-0.81,-0.87l1.69,-0.25l0.47,-0.54l0.4,-2.74l-0.77,-1.82l1.56,-1.79l0.25,-3.58l0.74,-2.26l1.89,-1.25l1.15,-1.97l1.4,-1.04l0.34,-0.78l-0.04,-0.99l-0.63,-0.96l1.14,-0.28l0.96,-2.59l0.91,-1.31l-0.16,-0.86l-1.54,-0.43l-0.35,-0.96l-1.83,-1.04l-0.07,-2.14l-0.93,-0.74l-0.45,-0.84l-0.02,-0.37l1.14,-0.29l0.47,-0.69l-0.26,-0.89l-1.41,-0.49l0.23,-1.77l0.98,-1.54l-0.77,-1.06l-1.08,-0.31l-0.15,-2.82l0.9,-0.54l0.23,-0.8l-0.62,-2.52l-1.25,-0.66l0.7,-1.33l-0.07,-2.22l-2.02,-1.52l1.14,-0.47l0.12,-1.41l-1.34,-0.89l1.58,-2.04l0.93,-0.31l0.36,-0.69l-0.52,-1.56l0.42,-1.35l-0.9,-0.89l1.6,-0.83l1.24,-0.27l0.59,-0.77l-0.09,-1.07l-1.41,-0.95l1.39,-1.08l0.62,-1.77l0.5,0.11l0.45,-0.28l0.34,-0.98l-0.2,-0.77l1.48,-0.43l1.22,-1.21l0.07,-3.53l-0.46,-1.53l0.36,-1.78l0.73,0.09l0.68,-0.33l0.42,-0.87l-0.41,-1.06l2.72,-1.71l0.58,-1.06l-0.29,-1.28l36.45,-4.1l0.86,1.26l0.85,0.45l0.99,66.5l5.52,32.95l-0.73,0.69l-1.53,-0.3l-0.91,-0.94l-1.32,1.06l-1.23,0.17l-2.17,-1.26l-1.85,-0.19l-0.83,0.36l-0.34,0.44l0.32,0.41l-0.56,0.36l-3.96,1.66l-0.05,-0.5l-0.96,-0.52l-1.0,0.04l-0.59,1.0l0.76,0.61l-1.59,1.21l-0.32,1.28l-0.69,0.3l-1.34,-0.06l-1.16,-1.86l-0.08,-0.89l-0.92,-1.47l-0.21,-1.01l-1.4,-1.63l-1.16,-0.54l-0.47,-0.78l0.1,-0.62l-0.69,-0.92l0.21,-1.99l0.5,-0.93l0.66,-2.98l-0.06,-1.23l-0.43,-0.29l-34.66,3.41Z",
            "name": "Mississippi"
        },
        "US-SC": {
            "path": "M697.56,324.11l4.86,-2.69l1.02,-0.05l1.11,-1.38l3.93,-1.9l0.45,-0.88l0.63,0.22l22.71,-3.36l0.07,1.22l0.42,0.57l0.71,0.01l1.21,-1.3l2.82,2.54l0.46,2.48l0.55,0.52l19.74,-3.49l22.74,15.07l0.02,0.55l-2.48,2.18l-2.44,3.67l-2.41,5.72l-0.09,2.74l-1.08,-0.21l0.85,-2.73l-0.64,-0.23l-0.76,0.87l-0.56,1.38l-0.11,1.55l0.84,0.95l1.05,0.23l0.44,0.91l-0.75,0.08l-0.41,0.56l-0.87,0.02l-0.24,0.68l0.94,0.45l-1.1,1.13l-0.07,1.02l-1.34,0.63l-0.5,-0.61l-0.5,-0.08l-1.07,0.87l-0.56,1.76l0.43,0.87l-1.2,1.23l-0.61,1.44l-1.2,1.01l-0.9,-0.4l0.27,-0.6l-0.53,-0.74l-1.38,0.31l-0.11,0.43l0.36,0.77l-0.52,0.03l0.05,0.76l0.72,0.58l1.3,0.43l-0.12,0.39l-0.88,0.94l-1.22,0.23l-0.25,0.51l0.33,0.45l-2.3,1.34l-1.42,-0.85l-0.56,0.11l-0.11,0.67l1.19,0.78l-1.54,1.57l-0.72,-0.75l-0.5,0.52l-0.0,0.74l-0.69,-0.37l-0.85,-0.0l-1.34,-0.84l-0.45,0.5l0.16,0.53l-1.73,0.17l-0.44,0.37l-0.06,0.77l0.65,0.23l1.43,-0.17l-0.26,0.55l0.42,0.25l1.91,-0.15l0.11,0.22l-0.97,0.86l-0.32,0.78l0.57,0.49l0.94,-0.53l0.03,0.21l-1.12,1.09l-0.99,0.43l-0.21,-2.04l-0.69,-0.27l-0.22,-1.55l-0.88,-0.15l-0.31,0.58l0.86,2.7l-1.12,-0.66l-0.63,-1.0l-0.4,-1.76l-0.65,-0.2l-0.52,-0.63l-0.69,0.0l-0.27,0.6l0.84,1.02l0.01,0.68l1.11,1.83l-0.02,0.86l1.22,1.17l-0.62,0.35l0.03,0.98l-1.2,3.56l-1.52,-0.78l-1.52,0.26l-0.97,-0.68l-0.54,-1.03l-0.17,-2.93l-0.86,-0.75l-1.06,-2.47l-1.04,-0.95l-3.23,-1.33l-0.49,-2.65l-1.12,-2.17l-1.43,-1.58l-0.06,-1.07l-0.76,-1.21l-4.82,-1.69l-0.58,-1.27l-1.21,-0.37l0.02,-0.7l-0.53,-0.87l-0.87,0.0l-0.73,-0.61l0.03,-1.21l-0.66,-1.26l-2.7,-1.78l-2.16,-0.52l-2.36,-3.12l-3.93,-1.93l-1.22,-1.03l-0.83,-0.12l-1.05,-1.81l-0.51,-0.22l-0.91,-1.21l-1.18,-0.68l-0.99,-2.42l-1.54,-1.65l-1.02,-1.87l-1.06,-0.37l-1.93,0.37l-0.46,-0.16l-2.75,-2.19l-1.06,0.02l-1.7,-0.74l-0.52,-0.53l0.36,-2.22l0.64,-0.78l0.34,-1.39l1.36,-1.23l0.4,-0.98ZM750.38,375.27l0.73,-0.08l0.51,0.45l-1.23,1.9l0.28,-1.22l-0.3,-1.06Z",
            "name": "South Carolina"
        },
        "US-RI": {
            "path": "M859.15,133.1l0.33,0.01l1.02,2.65l-0.31,0.56l-1.04,-3.22ZM858.41,136.77l-0.28,-0.34l0.24,-1.5l0.41,1.53l-0.37,0.31ZM851.13,141.49l0.22,-0.46l-0.53,-2.22l-3.14,-10.0l5.61,-1.84l0.76,2.06l0.8,0.25l0.19,0.73l0.08,0.41l-0.77,0.25l0.03,0.29l0.51,1.45l0.59,0.5l-0.6,0.15l-0.46,0.73l0.87,0.97l-0.14,1.22l0.94,2.18l-0.32,2.08l-1.33,0.23l-3.15,2.19l-0.16,-1.21ZM855.93,131.57l0.26,0.1l0.01,0.09l-0.17,-0.08l-0.1,-0.11ZM857.32,132.24l0.23,0.48l-0.2,0.31l-0.04,-0.39l0.01,-0.4ZM855.92,145.03l0.11,0.11l-0.18,0.1l-0.03,-0.14l0.11,-0.07Z",
            "name": "Rhode Island"
        },
        "US-CT": {
            "path": "M823.44,156.54l2.83,-3.23l-0.07,-0.54l-1.31,-1.25l-3.5,-15.89l9.81,-2.41l0.6,0.46l0.65,-0.26l0.23,-0.58l14.16,-4.0l3.2,10.18l0.47,1.96l-0.04,1.69l-1.65,0.32l-0.91,0.81l-0.69,-0.36l-0.5,0.11l-0.18,0.91l-1.15,0.07l-1.27,1.27l-0.62,-0.14l-0.56,-1.02l-0.89,-0.09l-0.21,0.67l0.75,0.64l0.08,0.54l-0.89,-0.02l-1.02,0.87l-1.65,0.07l-1.15,0.94l-0.86,-0.09l-2.05,0.82l-0.4,-0.68l-0.61,0.11l-0.89,2.12l-0.59,0.29l-0.83,1.29l-0.79,-0.05l-0.94,0.74l-0.2,0.63l-0.53,0.05l-0.88,0.75l-2.77,3.07l-0.96,0.27l-1.24,-1.04Z",
            "name": "Connecticut"
        }
    },
    "height": 589.0572567800147,
    "projection": {
        "type": "aea",
        "centralMeridian": -100
    },
    "width": 900.0
});

},{}],"ehkFF":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('us_lcc_en', {
    "insets": [
        {
            "width": 220,
            "top": 440,
            "height": 166.20896647806217,
            "bbox": [
                {
                    "y": -9267539.561615553,
                    "x": -5155319.926441444
                },
                {
                    "y": -6764278.677986234,
                    "x": -1841916.2872271966
                }
            ],
            "left": 0
        },
        {
            "width": 80,
            "top": 460,
            "height": 145.49027929319178,
            "bbox": [
                {
                    "y": -4795589.51310437,
                    "x": -6003827.791353204
                },
                {
                    "y": -4215886.671550633,
                    "x": -5685069.537883626
                }
            ],
            "left": 245
        },
        {
            "width": 900,
            "top": 0,
            "height": 551.3853227322381,
            "bbox": [
                {
                    "y": -5998735.631562797,
                    "x": -2035185.0941474987
                },
                {
                    "y": -3186828.4463602225,
                    "x": 2554557.0740735354
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "US-VA": {
            "path": "M683.63,289.84l1.59,-0.92l1.65,-0.49l1.11,-0.95l3.57,-1.7l0.73,-2.3l0.83,-0.2l2.31,-1.54l0.04,-1.78l2.03,-1.85l-0.13,-1.56l0.25,-0.41l5.0,-4.08l4.74,-5.96l0.1,0.61l0.97,0.52l0.34,1.35l1.33,0.71l0.71,0.79l1.47,0.07l2.09,1.08l1.41,-0.11l0.79,-0.41l0.76,-1.21l1.17,-0.57l0.53,-1.36l2.73,1.43l1.42,-1.1l2.25,-1.01l0.76,0.05l1.07,-0.96l0.33,-0.82l-0.49,-0.94l0.23,-0.41l1.9,0.55l3.25,-2.62l0.3,-0.1l0.51,0.71l0.66,-0.08l2.37,-2.33l0.17,-0.85l-0.5,-0.49l0.98,-1.12l0.1,-0.6l-0.29,-0.5l-1.0,-0.43l0.69,-2.99l2.58,-4.76l0.54,-2.12l-0.02,-1.87l1.6,-2.53l-0.22,-0.92l0.24,-0.83l0.5,-0.48l0.38,-1.68l-0.02,-3.12l1.23,0.17l1.19,1.69l3.81,0.37l0.58,-0.28l1.03,-2.5l0.18,-2.32l0.7,-1.04l-0.05,-1.59l0.74,-2.28l1.79,0.72l0.65,-0.18l1.29,-3.27l0.57,0.04l0.59,-0.39l0.51,-1.19l0.81,-0.68l0.43,-1.78l1.36,-2.41l-0.37,-2.53l0.53,-1.74l-0.32,-1.97l9.23,4.37l0.58,-0.3l0.61,-3.94l2.61,-0.11l0.63,0.55l1.06,0.21l-0.5,1.71l0.62,0.87l1.62,0.81l2.53,-0.08l1.04,1.14l1.49,0.11l2.25,1.66l0.01,1.29l0.45,1.24l-1.66,0.97l-0.11,0.65l-0.64,0.14l-0.27,0.45l-0.44,4.96l-0.36,0.13l-0.04,0.49l1.16,0.93l-0.28,0.11l-0.03,0.76l2.03,-0.04l2.4,-1.47l0.49,-0.72l0.34,0.71l-0.51,0.64l1.23,0.86l0.69,0.12l0.43,1.08l1.63,0.48l1.94,-0.23l0.84,0.41l0.82,-0.66l0.89,0.01l0.24,0.59l1.34,0.45l0.47,1.08l1.12,-0.06l0.03,0.3l1.18,0.39l2.84,0.59l0.4,0.98l-0.86,-0.4l-0.56,0.45l0.9,1.7l-0.35,0.56l0.61,0.77l-0.42,0.88l0.23,0.58l-1.36,-0.33l-0.59,-0.7l-0.66,0.19l-0.1,0.43l-2.46,-2.23l-0.56,0.06l-0.37,-0.54l-0.53,0.33l-1.48,-1.28l-1.19,-0.36l-0.43,-0.62l-0.91,-0.37l-0.71,-1.26l-0.77,-0.62l-1.34,-0.1l-1.12,-0.78l-1.17,0.07l-0.39,0.52l0.48,0.71l1.1,-0.03l0.64,0.66l1.33,0.05l0.59,0.4l0.39,1.49l2.75,1.5l1.87,1.82l1.95,0.57l1.6,2.05l0.98,0.22l1.36,-0.46l1.26,0.45l-0.58,0.69l0.31,0.48l2.03,0.3l0.27,0.71l0.46,0.11l0.32,1.91l-0.58,-0.81l-0.52,-0.21l-0.39,0.21l-1.14,-0.97l-0.58,0.3l0.11,0.81l-0.3,0.67l0.7,0.69l-0.16,0.59l0.52,0.28l0.43,-0.15l0.28,0.33l-1.39,0.73l-6.19,-4.58l-0.57,0.12l-0.19,0.81l0.25,0.53l2.3,1.47l2.11,2.07l2.79,1.12l1.25,-0.69l0.46,1.03l1.27,0.23l-0.43,0.66l0.3,0.56l0.93,-0.2l0.01,1.21l-0.92,0.42l-0.57,0.74l-0.65,-0.86l-3.16,-1.19l-0.43,-1.5l-0.6,-0.57l-0.86,-0.1l-1.2,0.68l-1.72,-0.41l-0.37,-1.13l-0.71,-0.04l-0.05,1.3l-0.33,0.41l-1.44,-1.27l-0.51,0.09l-0.49,0.57l-0.65,-0.38l-0.99,0.46l-2.23,-0.06l-0.37,0.94l0.35,0.45l1.9,0.18l1.4,-0.33l0.84,0.23l0.56,-0.69l0.64,0.86l1.35,0.4l1.96,-0.34l0.83,0.7l0.84,0.1l0.5,-0.56l0.79,2.4l1.35,0.11l0.24,0.42l1.68,0.67l0.45,0.65l-0.57,1.02l0.57,0.43l1.72,-1.32l0.89,-0.03l0.83,0.63l0.79,-0.28l-0.62,-0.88l-0.01,-0.81l-0.46,-0.31l4.0,0.01l0.93,-0.74l2.09,3.43l-0.39,0.7l0.68,3.03l-1.19,-0.55l-0.02,0.86l-33.58,8.85l-34.59,8.17l-19.54,3.56l-11.8,1.36l-0.81,0.62l-28.23,5.26ZM782.2,223.07l0.11,0.07l-0.08,0.05l0.0,-0.01l-0.03,-0.11ZM809.22,243.38l0.52,-1.13l-0.63,-0.6l0.57,-0.97l-0.39,-0.71l-0.03,-0.47l0.43,-0.35l-0.18,-0.72l0.62,-0.3l0.22,-0.6l0.12,-2.29l1.01,-0.4l-0.13,-0.88l0.48,-0.15l-0.27,-1.51l-0.77,-0.39l0.85,-0.56l0.1,-0.95l2.63,-1.04l0.33,2.42l-3.8,10.37l0.17,1.1l-0.47,0.31l-0.32,1.08l0.28,4.21l-1.12,-1.77l0.22,-0.92l-0.34,-1.54l0.27,-0.97l-0.38,-0.28ZM811.81,248.31l0.27,0.04l-0.09,0.2l-0.16,-0.21l-0.01,-0.03Z",
            "name": "Virginia"
        },
        "US-PA": {
            "path": "M717.0,161.37l0.63,-0.19l4.28,-3.74l1.16,5.11l0.48,0.3l34.8,-8.3l34.22,-9.04l1.43,0.55l0.73,1.36l0.63,0.12l0.77,-0.34l1.23,0.56l0.16,0.84l0.81,0.39l-0.15,0.58l0.92,2.65l1.92,2.02l2.12,0.71l2.2,-0.24l0.72,0.77l-0.89,0.86l-0.71,1.48l-0.16,2.22l-1.39,3.33l-1.36,1.59l0.04,0.79l1.8,1.66l-0.29,1.63l-0.84,0.44l-0.22,0.65l0.15,1.46l1.06,2.82l0.53,0.24l1.2,-0.2l1.2,2.33l0.96,0.56l0.66,-0.27l0.61,0.88l4.26,2.64l0.12,0.39l-1.28,0.94l-3.68,4.22l-0.22,0.75l0.18,0.88l-1.35,1.14l-0.84,0.16l-1.32,1.09l-0.31,0.65l-1.73,-0.09l-2.03,0.86l-1.14,1.36l-0.4,1.38l-37.2,9.64l-39.09,9.07l-10.33,-47.38l1.91,-1.23l3.06,-3.04Z",
            "name": "Pennsylvania"
        },
        "US-TN": {
            "path": "M572.78,341.14l0.84,-0.82l0.29,-1.35l1.01,0.04l0.65,-0.79l-1.01,-4.82l1.41,-1.91l0.06,-1.31l1.19,-0.46l0.36,-0.48l-0.64,-1.29l0.57,-1.2l-0.9,-1.3l2.56,-1.56l1.09,-1.12l-0.14,-0.84l-0.85,-0.52l0.13,-0.18l0.34,-0.16l0.85,0.36l0.45,-0.33l-0.27,-1.3l-0.85,-0.88l0.05,-0.69l0.5,-1.41l1.01,-1.1l-1.35,-2.02l1.36,-0.22l0.61,-0.55l-0.14,-0.64l-1.18,-0.78l0.82,-0.15l0.58,-0.54l0.13,-0.69l-0.59,-1.35l0.02,-0.36l0.38,0.53l0.47,0.07l1.18,-1.14l23.73,-2.95l0.35,-0.41l-0.1,-1.32l-0.84,-2.34l2.99,-0.1l0.82,0.57l22.84,-3.69l7.66,-0.52l7.51,-0.92l32.89,-4.78l1.11,-0.6l29.34,-5.46l0.73,-0.6l3.56,-0.57l-0.39,1.41l0.44,0.84l-0.39,1.97l0.36,0.8l-1.14,-0.02l-1.71,1.79l-1.19,3.85l-0.55,0.69l-0.57,0.08l-0.63,-0.72l-1.43,-0.0l-2.66,1.74l-1.41,2.7l-0.96,0.89l-0.34,-0.33l-0.14,-1.04l-0.73,-0.52l-0.53,0.15l-2.3,1.81l-0.29,1.31l-0.94,-0.23l-0.89,0.48l-0.16,0.76l0.32,0.71l-0.84,2.15l-1.29,0.07l-1.74,1.14l-1.89,2.29l-0.78,0.28l-2.28,2.45l-4.04,0.81l-2.58,1.7l-0.49,1.08l-0.88,0.55l-0.55,0.8l-0.17,2.85l-0.35,0.59l-1.66,0.53l-0.89,-0.15l-1.06,1.14l0.23,5.17l-20.26,3.48l-21.67,3.2l-25.83,3.15l-0.13,0.28l-7.42,0.94l-28.8,3.33Z",
            "name": "Tennessee"
        },
        "US-ID": {
            "path": "M132.97,123.69l-0.34,-0.44l0.1,-1.97l0.55,-1.73l1.43,-1.2l2.13,-3.56l1.69,-0.91l1.4,-1.51l1.09,-2.13l0.06,-1.21l2.23,-2.39l1.45,-2.68l0.38,-1.36l2.05,-2.24l1.91,-2.8l0.04,-1.01l-0.76,-2.96l-2.11,-1.96l-0.86,-0.37l-0.84,-1.62l-0.39,-3.03l-0.58,-1.2l0.95,-1.18l-0.1,-2.35l-1.01,-2.7l10.71,-56.01l13.31,2.45l-3.77,21.05l1.25,2.93l0.98,1.29l0.25,1.57l1.15,1.79l-0.13,0.84l0.38,1.16l-1.0,0.95l0.82,1.79l-0.84,0.11l-0.28,0.71l1.91,1.71l1.01,2.06l2.23,1.25l0.47,1.49l1.13,1.46l1.46,2.82l0.08,0.69l1.62,1.83l-0.01,1.89l1.78,1.73l-0.08,1.36l0.74,0.19l0.9,-0.58l0.35,0.47l-0.36,0.55l0.06,0.54l1.1,0.97l1.61,0.16l1.81,-0.35l-0.65,2.62l-0.99,0.53l0.24,1.14l-1.86,3.73l0.05,1.72l-0.81,0.07l-0.37,0.54l0.59,1.33l-0.62,0.9l-0.04,1.16l0.96,0.94l-0.37,0.81l0.27,1.02l-1.57,0.42l-1.22,1.4l0.09,1.11l0.45,0.77l-0.14,0.73l-0.83,0.77l-0.21,1.52l1.48,0.64l1.37,1.8l0.78,0.28l1.08,-0.34l0.56,-0.79l1.85,-0.4l1.21,-1.27l0.81,-0.29l0.16,-0.76l0.77,0.81l0.22,0.71l1.05,0.65l-0.43,1.23l0.72,0.95l-0.35,1.37l0.56,1.35l-0.22,1.61l1.53,2.65l0.3,1.72l0.82,0.37l0.65,2.08l-0.19,0.98l-0.77,0.63l0.5,1.89l1.23,1.16l0.3,0.79l0.81,0.09l0.87,-0.36l1.04,0.93l1.04,2.79l-0.51,0.81l0.88,1.83l-0.28,0.59l0.11,0.98l2.28,2.42l0.97,-0.13l-0.0,-1.13l1.08,-0.88l0.93,-0.21l4.52,1.64l0.69,-0.31l0.68,-1.34l1.19,-0.39l2.25,0.94l3.3,-0.08l0.95,0.88l2.29,-0.56l3.22,0.8l0.46,-0.49l-0.67,-0.77l0.26,-1.05l0.74,-0.47l-0.06,-0.96l1.23,-0.5l0.48,0.37l1.06,2.11l0.12,1.11l1.35,1.95l0.73,0.45l-6.5,53.31l-47.49,-6.61l-46.96,-8.09l7.13,-38.69l1.13,-1.16l1.09,-2.64l-0.2,-1.73l0.74,-0.14l0.78,-1.6l-0.89,-1.27l-0.17,-1.2l-1.24,-0.09l-0.63,-0.82l-0.89,0.28Z",
            "name": "Idaho"
        },
        "US-NV": {
            "path": "M138.94,328.71l-12.66,-16.84l-36.44,-50.74l-25.2,-34.29l14.1,-63.06l46.85,9.67l46.99,8.1l-19.26,123.7l-0.91,1.13l-1.0,2.15l-0.44,0.17l-1.35,-0.23l-0.97,-2.22l-0.7,-0.63l-1.42,0.2l-1.95,-1.02l-1.61,0.21l-1.79,0.93l-0.78,2.44l0.87,2.56l-0.61,0.95l-0.25,1.29l0.37,3.08l-0.77,2.5l0.76,3.67l-0.15,3.03l-0.31,1.05l-1.05,0.3l0.2,1.3l-0.52,0.61Z",
            "name": "Nevada"
        },
        "US-TX": {
            "path": "M276.0,412.24l33.23,2.09l32.95,1.42l0.41,-0.38l3.71,-97.6l25.94,0.65l26.37,0.23l0.05,41.48l0.44,0.4l1.03,-0.13l0.79,0.27l3.76,3.77l1.67,0.2l0.88,-0.57l2.5,0.64l0.6,-0.67l0.11,-1.04l0.61,0.75l0.93,0.22l0.38,0.92l0.77,0.77l-0.01,1.62l0.53,0.83l2.86,0.41l1.26,-0.2l1.39,0.88l2.8,0.68l1.83,-0.56l0.63,0.1l1.9,1.78l1.41,-0.11l1.26,-1.41l2.44,0.25l1.68,-0.45l0.32,2.58l2.31,0.73l-0.04,2.06l1.56,0.77l1.82,-0.65l1.57,-1.66l1.03,-0.64l0.41,0.19l0.45,1.62l2.02,0.2l0.25,1.03l0.72,0.47l1.47,-0.21l0.89,-0.93l0.39,0.33l0.59,-0.08l0.61,-0.98l0.26,0.4l-0.45,1.22l0.14,0.76l0.68,1.13l0.78,0.41l0.57,-0.04l0.6,-0.5l0.69,-2.34l0.91,-0.65l0.35,-1.53l0.57,-0.14l0.4,0.14l0.29,0.98l0.58,0.63l1.21,0.01l0.83,0.49l1.26,-0.2l0.69,-1.33l0.49,0.15l-0.13,0.69l0.49,0.69l1.21,0.44l0.49,0.71l1.53,-0.05l1.49,1.72l0.51,0.02l0.63,-0.62l0.08,-0.71l1.5,-0.1l0.93,-1.42l1.89,-0.41l1.67,-1.13l1.53,0.82l1.51,-0.22l0.29,-0.83l2.3,-0.73l0.52,-0.55l0.5,0.32l0.38,0.87l1.83,0.41l1.7,-0.06l1.87,-1.14l0.42,-1.04l1.07,0.3l2.25,1.54l1.16,0.17l1.8,2.05l2.15,0.39l1.05,0.91l0.76,-0.11l2.49,0.84l1.05,0.03l0.37,0.78l1.38,0.96l1.45,-0.12l0.39,-0.71l0.81,0.36l0.88,-0.4l0.93,0.34l0.76,-0.16l0.64,0.36l2.31,33.77l1.52,1.66l1.31,0.82l1.26,1.86l0.58,1.62l-0.09,2.63l1.01,1.2l0.85,0.39l-0.11,0.85l0.75,0.54l0.29,0.87l0.66,0.69l-0.19,1.17l1.01,1.02l0.6,1.63l0.51,0.34l0.55,-0.11l-0.16,1.71l0.82,1.21l-0.64,0.25l-0.35,0.68l0.77,1.26l-0.55,0.89l0.19,1.39l-0.75,2.69l-0.75,0.85l-0.35,1.54l-0.79,1.13l0.65,2.0l-0.83,2.28l0.17,1.08l0.84,1.2l-0.18,1.01l0.5,1.61l-0.24,1.41l-1.18,1.79l-1.18,0.4l-1.16,2.74l-0.02,2.11l1.4,1.68l-3.45,0.1l-7.41,3.83l-0.02,-0.44l-0.69,-0.23l-0.24,0.23l-0.79,-0.43l-3.41,1.15l0.65,-1.32l0.34,-2.05l-0.35,-1.36l-0.8,-0.79l-1.8,0.16l-1.18,2.6l-0.43,0.16l-0.36,-0.66l-2.39,-1.23l-0.4,0.31l-0.18,0.82l0.23,0.45l1.08,0.38l-0.3,0.82l0.54,0.82l-0.47,0.64l0.04,1.0l1.5,0.76l-0.45,0.47l0.5,1.13l0.91,0.23l0.28,0.37l-0.41,1.27l-0.46,-0.12l-0.98,0.82l-1.72,2.27l-1.19,-0.4l-0.49,0.12l0.33,1.01l0.08,2.57l-1.86,1.51l-1.91,2.13l-0.97,0.37l-4.13,2.94l-3.32,0.46l-2.56,1.08l-0.2,1.14l-0.75,-0.35l-2.05,0.9l-0.34,-0.35l-1.12,0.19l0.43,-0.89l-0.53,-0.6l-1.44,0.23l-1.22,1.1l-0.61,-0.63l-0.11,-1.21l-1.39,-0.82l-0.5,0.44l0.66,1.45l0.02,1.14l-0.72,0.09l-0.54,-0.44l-0.76,-0.0l-0.56,-1.35l-1.47,-0.37l-0.58,0.39l0.04,0.55l0.95,1.72l0.03,1.25l0.58,0.37l0.37,-0.16l1.15,0.79l-0.76,0.38l-0.12,0.91l0.7,0.23l1.09,-0.55l0.97,0.61l-4.3,2.46l-0.58,-0.13l-0.37,-1.46l-0.51,-0.19l-1.14,-1.48l-0.48,-0.03l-0.48,0.51l0.12,0.64l-0.63,0.35l-0.05,0.51l1.2,1.64l-0.31,1.06l0.33,0.86l-1.67,1.82l-0.38,0.2l0.38,-0.65l-0.19,-0.73l0.25,-0.74l-0.46,-0.68l-0.52,0.17l-0.72,1.11l0.26,0.73l-0.4,0.96l-0.07,-1.15l-0.52,-0.55l-1.96,1.31l-0.78,-0.33l-0.7,0.52l0.07,0.76l-0.82,1.01l0.02,0.49l1.26,0.64l0.03,0.57l0.79,0.28l0.7,-1.43l0.87,-0.42l0.01,0.64l-2.84,4.43l-1.24,-1.01l-1.37,0.39l-0.32,-0.35l-2.41,0.4l-0.46,-0.32l-0.66,0.17l-0.18,0.58l0.42,0.62l0.55,0.38l1.55,0.03l0.54,1.58l2.09,1.05l-2.71,7.77l-0.22,0.11l-0.38,-0.56l-0.34,0.1l0.18,-0.78l-0.57,-0.43l-2.37,1.99l-1.68,-2.35l-1.24,-0.98l-0.61,0.4l0.09,0.53l1.46,2.04l-0.24,0.47l0.42,0.49l-1.23,-0.21l-0.33,0.63l0.51,0.57l0.9,0.24l1.13,-0.16l0.66,0.63l1.38,0.18l1.0,-0.03l1.01,-0.63l-0.35,1.63l0.24,0.79l-0.98,0.72l0.38,1.63l-1.13,0.15l-0.43,0.41l0.41,2.15l-0.33,1.63l0.45,0.64l0.85,0.24l0.88,2.93l0.72,2.88l-0.92,0.84l0.63,0.49l-0.08,1.31l0.72,0.3l0.18,0.63l0.59,0.29l0.4,1.83l0.7,0.32l0.44,3.3l0.8,0.56l0.7,0.08l-0.55,1.14l0.33,1.11l-0.64,0.79l-0.85,-0.05l-0.54,0.46l0.09,1.34l-0.5,-0.34l-0.49,0.26l-0.39,-0.68l-1.5,-0.46l-2.95,-2.6l-2.23,-0.18l-0.81,-0.52l-4.24,0.1l-0.9,0.43l-0.79,-0.64l-1.65,0.24l-2.14,-0.91l-0.74,-1.0l-0.61,-0.14l-0.2,-0.74l-1.18,-0.5l-1.0,-0.02l-2.0,-0.89l-1.47,0.4l-0.84,-1.11l-0.61,-0.21l-1.44,-1.42l-1.98,0.01l-1.48,-0.66l-0.86,0.12l-1.64,-0.43l0.31,-1.21l-0.56,-1.11l-0.82,-0.3l0.32,-0.3l-0.27,-1.48l0.58,-1.23l-0.36,-0.68l0.89,-0.4l0.12,-0.54l-1.04,-0.54l-0.91,0.68l-0.33,-0.32l0.03,-1.12l-0.6,-0.86l0.32,-0.09l0.54,-1.46l-0.22,-0.7l-0.71,0.09l-1.03,0.99l-0.58,-0.91l-0.86,-0.29l-0.26,-1.37l-1.53,-0.79l0.29,-0.67l-0.24,-0.77l0.34,-2.22l-0.45,-0.97l-1.06,-1.03l0.66,-2.03l0.05,-1.21l-0.18,-0.71l-0.54,-0.33l-0.15,-1.85l-1.86,-1.46l-0.86,0.22l-0.3,-0.42l-0.81,-0.11l-0.75,-1.33l-2.24,-1.74l0.01,-0.7l-0.51,-0.59l0.12,-0.88l-0.98,-0.93l-0.08,-0.76l-1.13,-0.62l-1.31,-2.92l-2.68,-1.49l-0.38,-0.92l-1.14,-0.6l-0.06,-1.18l-0.82,-1.2l-0.6,-1.98l0.42,-0.23l-0.04,-0.72l-1.04,-0.5l-0.26,-1.31l-0.82,-0.58l-0.95,-1.75l-0.61,-2.4l-1.86,-2.38l-0.87,-4.28l-1.82,-1.35l0.05,-0.7l-0.76,-1.22l-4.1,-2.85l-0.3,-1.4l1.69,-0.02l0.8,-0.84l-0.29,-0.39l-0.65,-0.06l-0.09,-0.73l0.08,-0.89l0.65,-0.7l-0.11,-0.74l-0.48,0.05l-0.77,0.72l-0.45,0.69l0.01,0.66l-0.89,0.15l-0.4,1.07l-0.54,-0.04l-1.82,-1.76l0.06,-0.68l-0.42,-0.69l-0.77,-0.2l-0.64,0.3l-0.33,-0.54l-0.73,-0.13l-0.89,-2.18l-1.5,-0.8l-0.86,0.27l-0.44,-0.87l-0.61,0.1l-0.25,0.61l-1.06,0.16l-2.9,-0.47l-0.39,-0.38l-1.49,-0.03l-0.79,0.29l-0.77,-0.44l-2.68,0.27l-2.44,-1.09l-1.15,-0.89l-0.68,-0.07l-1.04,0.83l-0.65,1.62l-2.0,-0.18l-0.51,0.45l-0.49,-0.17l-2.54,0.78l-3.1,6.28l-0.19,1.78l-0.77,0.67l-0.38,1.81l0.35,0.59l-1.99,0.99l-0.75,1.33l-1.07,0.62l-0.63,0.84l-0.3,1.1l-2.94,-0.35l-1.04,-0.88l-0.55,0.3l-1.7,-1.22l-1.31,-1.64l-2.91,-0.86l-1.15,-0.96l-0.02,-0.67l-0.42,-0.41l-2.77,-0.52l-2.29,-1.04l-1.9,-1.77l-0.91,-1.55l-0.97,-0.92l-1.54,-0.29l-1.77,-1.27l-0.22,-0.56l-1.14,-0.97l-0.83,-2.92l-0.87,-1.02l-0.24,-1.11l-0.76,-1.28l-0.26,-2.35l0.53,-3.05l-3.01,-5.09l-0.05,-1.94l-1.26,-2.52l-0.99,-0.44l-0.43,-1.24l-1.44,-0.81l-2.16,-2.18l-1.03,-0.1l-2.02,-1.26l-3.19,-3.36l-0.59,-1.55l-3.14,-2.56l-1.59,-2.45l-1.19,-0.95l-0.61,-1.05l-4.44,-2.61l-2.4,-5.41l-1.37,-1.08l-1.13,-0.08l-1.76,-1.68l-0.78,-3.03ZM503.17,467.92l-0.35,0.18l0.19,-0.17l0.16,-0.02ZM499.77,470.57l-0.12,0.16l-0.05,0.03l0.17,-0.19ZM498.84,472.06l0.57,0.11l-2.42,2.02l1.61,-1.49l0.23,-0.64ZM468.43,489.16l0.04,0.02l-0.03,0.02l-0.0,-0.04ZM454.82,548.28l0.78,-0.53l0.25,-0.71l0.11,1.14l-1.14,0.1ZM461.75,499.93l-0.15,-0.61l1.24,-0.37l-0.3,0.34l-0.79,0.64ZM464.38,497.94l0.11,-0.25l1.3,-0.9l-0.94,0.88l-0.46,0.27ZM466.68,496.2l0.29,-0.26l0.49,-0.04l-0.26,0.14l-0.52,0.16ZM458.81,503.1l0.71,-1.67l0.64,-0.72l-0.01,0.77l-1.34,1.62ZM451.11,518.91l0.12,-0.83l0.26,-0.62l-0.06,0.18l-0.32,1.27ZM452.02,515.96l0.24,-0.75l1.01,-2.59l0.24,-0.78l0.13,0.07l-1.62,4.05Z",
            "name": "Texas"
        },
        "US-NH": {
            "path": "M830.02,105.75l0.18,-1.32l-1.48,-5.31l0.52,-1.45l-0.31,-2.2l0.98,-1.86l-0.16,-2.28l0.61,-2.27l-0.45,-0.61l0.27,-2.29l-0.98,-3.77l0.07,-0.7l0.3,-0.46l1.82,-0.82l0.68,-1.39l1.41,-1.63l0.72,-1.8l-0.26,-1.12l0.51,-0.62l-2.38,-3.45l0.83,-3.26l-0.12,-0.78l-0.82,-1.27l0.27,-0.59l-0.24,-0.69l0.44,-3.2l-0.37,-0.82l0.89,-1.5l2.44,0.3l0.64,-0.87l13.41,34.49l0.88,3.61l2.62,2.15l0.88,0.32l0.38,1.58l1.73,1.27l0.01,0.34l0.78,0.22l-0.05,0.56l-0.43,3.07l-1.57,0.26l-1.31,1.2l-0.5,0.94l-0.96,0.38l-0.49,1.67l-1.08,1.44l-17.56,4.99l-1.71,-1.38l-0.42,-0.87l-0.12,-1.98l0.53,-0.59l0.03,-0.52l-1.08,-5.12Z",
            "name": "New Hampshire"
        },
        "US-NY": {
            "path": "M822.62,168.33l-0.84,-0.69l0.8,-3.19l1.03,-0.31l0.37,-0.48l0.74,0.19l0.63,-0.33l-0.06,-0.57l0.43,-0.06l0.27,-0.66l0.72,-0.32l-0.22,-1.4l0.73,-0.47l0.36,0.55l1.04,-0.17l0.48,-0.33l0.01,-0.54l1.46,-0.2l0.23,-0.73l1.66,-0.01l0.91,-0.55l0.44,-1.21l0.62,0.24l0.42,-0.5l4.31,-1.33l2.34,-1.14l2.34,-2.85l0.17,0.15l-2.5,3.41l-0.01,0.46l0.57,0.37l1.59,-0.35l0.28,0.59l-1.28,1.2l-2.05,0.56l-0.37,0.58l-1.16,0.43l0.24,0.42l-0.24,0.3l-0.68,-0.14l-0.74,0.7l-1.04,0.18l-0.37,0.55l-1.41,0.47l-0.25,0.67l-1.34,0.21l-0.44,0.7l-1.35,0.97l-2.76,1.36l-1.02,0.89l-1.04,0.1l-0.31,0.92l-0.28,0.04l-0.28,-0.66l-1.44,-0.22l-0.87,0.75l0.08,0.94l-0.93,0.56ZM844.87,154.57l0.86,-2.11l1.18,-0.5l0.59,-0.93l0.82,0.32l0.12,-0.83l0.75,0.61l-3.8,3.69l-0.5,-0.26ZM845.69,148.75l0.14,-0.09l0.08,-0.01l-0.11,0.18l-0.12,-0.07ZM845.46,150.36l0.17,0.06l0.14,0.03l0.11,0.0l0.0,0.0l-0.61,0.15l0.19,-0.25ZM722.61,156.93l3.73,-3.85l1.26,-2.18l1.74,-1.86l1.16,-0.78l1.25,-3.33l2.08,-2.14l-0.22,-1.82l-1.63,-2.37l0.42,-1.12l-0.18,-0.77l-0.83,-0.52l-2.09,0.02l0.04,-0.98l-0.59,-2.2l4.95,-2.97l4.47,-1.84l2.38,-0.23l1.83,-0.76l5.64,-0.31l3.13,1.19l3.15,-1.71l5.48,-1.13l0.59,0.44l0.67,-0.21l0.11,-0.98l3.21,-1.88l0.67,-2.04l1.86,-1.77l0.77,-1.26l1.12,0.02l1.12,-0.53l1.05,-1.63l-0.47,-0.69l0.34,-1.19l-0.26,-0.51l-0.64,0.03l-0.18,-1.16l-0.95,-1.56l-1.01,-0.6l0.12,-0.18l0.6,0.38l0.53,-0.27l0.73,-1.43l-0.02,-0.91l0.8,-0.65l-0.03,-0.97l-0.93,-0.18l-0.6,0.7l-0.27,0.12l0.54,-1.29l-0.82,-0.62l-1.26,0.06l-0.86,0.77l-0.99,-0.68l2.02,-2.52l1.76,-1.49l1.64,-2.64l0.7,-0.57l0.88,-1.54l0.07,-0.56l-0.5,-0.93l0.76,-1.9l4.74,-7.65l4.71,-4.55l2.83,-0.54l19.58,-5.9l0.41,0.87l-0.06,2.0l1.03,1.2l0.48,3.77l2.33,3.2l-0.07,1.88l0.88,2.39l-0.58,1.07l0.04,3.4l0.72,0.88l1.35,2.72l0.2,1.08l0.62,0.83l0.16,3.89l0.56,0.83l0.54,0.07l0.53,-0.61l0.05,-0.86l0.33,-0.08l1.06,1.09l4.01,14.29l0.12,1.57l0.63,1.07l0.47,14.75l0.61,0.61l3.71,15.97l1.27,1.3l-2.79,3.18l0.03,0.55l1.75,1.57l-1.83,3.34l0.22,1.04l-1.03,0.46l-0.28,-4.19l-0.58,-2.19l-0.75,-1.59l-1.47,-1.06l-0.18,-1.11l-0.7,-0.09l-0.41,1.32l0.82,1.43l0.94,0.67l0.97,2.73l-13.78,-3.78l-1.29,-1.43l-2.38,0.27l-0.63,-0.41l-1.06,-0.13l-1.76,-1.86l-0.76,-2.29l0.11,-0.72l-0.36,-0.62l-0.55,-0.2l0.08,-0.45l-0.36,-0.42l-1.65,-0.64l-1.08,0.33l-0.76,-1.38l-1.71,-0.71l-34.54,9.13l-34.39,8.21l-1.15,-5.06ZM819.22,170.74l0.35,-0.89l-0.17,-1.3l1.12,-0.34l0.33,0.31l-0.37,0.96l-1.26,1.27ZM730.45,138.1l0.02,-0.67l0.78,-0.08l-0.36,1.08l-0.44,-0.33Z",
            "name": "New York"
        },
        "US-HI": {
            "path": "M295.73,604.47l-0.09,-1.15l-1.5,-3.39l-1.04,-1.3l0.1,-1.38l0.69,-1.6l4.5,-4.82l1.09,-4.84l0.45,-0.62l0.57,-2.11l-0.18,-2.37l0.48,-1.7l1.14,-0.75l1.44,-0.08l1.19,-0.48l1.4,0.28l2.54,-1.12l1.4,-0.07l1.12,-1.06l0.13,-3.0l0.39,-1.18l1.0,-1.52l1.13,-0.5l2.3,2.28l-0.17,1.59l0.9,1.56l0.64,2.06l1.47,1.01l1.75,2.48l3.26,7.32l0.37,3.13l-2.12,3.14l0.13,0.55l1.74,0.62l0.22,0.61l-0.03,0.5l-0.8,1.07l-0.18,1.77l0.41,1.96l0.86,1.44l0.09,1.11l-0.37,0.43l-2.2,0.64l-1.33,-0.3l-2.32,0.39l-1.08,-0.36l-2.31,-0.1l-2.85,-0.94l-0.78,-0.89l-1.27,-0.65l-2.68,0.15l-4.37,-0.59l-1.8,0.31l-1.07,1.16l-1.77,0.33l-1.18,0.77l-1.42,0.2ZM307.49,551.48l1.48,-2.25l0.67,-1.82l-0.24,-0.76l-0.5,-0.41l-1.02,0.02l-1.25,-2.06l-0.15,-2.46l0.33,-0.93l0.89,-0.83l0.82,-0.49l0.98,-0.1l0.77,0.4l0.59,1.28l-0.3,3.21l0.19,0.37l2.67,1.2l1.52,0.11l1.63,1.57l0.44,3.08l0.49,0.32l0.06,1.02l1.87,2.51l-0.19,1.09l-1.38,1.08l-0.77,-0.17l-0.74,0.28l-2.15,-0.59l-1.71,-1.23l-2.81,-0.47l-0.83,-0.95l-1.26,-0.74l-0.08,-1.29ZM299.5,525.22l3.92,4.09l0.81,0.65l0.91,-0.18l-0.14,0.89l0.92,1.13l2.95,1.72l0.77,1.13l-1.5,0.38l-3.0,-0.75l-3.69,-4.32l-4.53,-2.87l-0.0,-0.87l1.88,-0.29l0.71,-0.71ZM302.95,552.12l-1.03,-0.87l-1.79,-0.86l-0.04,-0.29l3.25,0.19l0.3,0.85l-0.58,0.36l-0.11,0.62ZM298.68,541.09l-0.89,-0.58l0.01,-0.65l1.23,-2.12l-0.81,-1.81l0.27,-0.49l1.37,0.56l1.8,1.75l0.41,2.72l-0.13,0.63l-1.17,0.56l-2.1,-0.57ZM282.54,509.02l0.47,-2.04l-0.19,-1.53l0.41,-1.04l-0.21,-1.51l0.83,-1.31l-0.17,-1.16l2.73,1.91l2.4,-0.13l1.03,-0.59l1.14,-0.11l0.82,0.38l0.14,0.98l-0.54,1.47l-0.1,2.26l0.32,1.13l-0.73,0.4l-0.62,1.18l0.48,2.33l0.59,0.41l0.42,-0.11l-0.2,0.66l0.23,0.81l-0.52,1.32l0.45,1.22l-0.98,0.11l-0.28,-0.71l-2.39,-0.78l-0.01,-0.8l-0.66,-1.17l0.18,-0.7l-0.25,-0.63l-0.98,0.21l-0.32,-0.69l0.15,-0.23l0.92,0.05l0.44,-0.59l-0.35,-0.9l-0.58,-0.24l-0.31,-0.55l-0.44,0.17l-0.42,-0.47l-0.39,0.3l0.04,1.82l-2.52,-1.14ZM292.27,511.4l0.02,-0.05l0.02,0.02l-0.05,0.02ZM259.59,464.35l1.86,-0.38l1.05,-0.61l1.19,0.48l3.31,0.38l0.6,1.29l0.96,-0.05l0.98,1.07l0.8,0.21l0.62,0.82l0.18,1.43l-0.27,1.07l-0.49,0.57l-1.92,0.8l-1.34,1.83l-0.53,-0.17l-0.47,0.45l-2.58,0.13l-3.12,-3.56l-0.13,-1.78l-1.43,-2.09l0.1,-1.16l0.64,-0.74ZM245.61,463.08l-0.17,-0.4l0.27,-0.75l0.9,-0.67l3.63,-0.03l1.22,-0.79l0.55,0.5l-1.33,0.71l-0.39,0.74l-2.96,-0.29l-1.71,0.97Z",
            "name": "Hawaii"
        },
        "US-VT": {
            "path": "M805.29,73.6l25.91,-8.31l0.91,1.82l-0.71,2.37l-0.01,1.54l2.25,2.7l-0.5,0.59l0.28,1.12l-0.64,1.6l-1.33,1.51l-0.63,1.32l-1.71,0.73l-0.61,0.93l-0.09,0.98l0.97,3.7l-0.26,2.43l0.41,0.53l-0.58,2.1l0.17,2.17l-0.98,1.87l0.29,2.34l-0.52,1.54l1.49,5.37l-0.2,1.21l1.1,5.24l-0.57,0.85l0.14,2.28l0.61,1.24l1.51,1.06l-11.69,3.24l-4.47,-16.57l-1.73,-1.55l-0.9,0.26l-0.29,1.19l-0.12,-0.25l-0.15,-3.88l-0.69,-0.99l-0.15,-0.97l-1.4,-2.82l-0.63,-0.67l-0.02,-3.13l0.58,-1.15l-0.89,-2.54l0.06,-1.92l-0.4,-0.91l-1.57,-1.6l-0.39,-0.8l-0.45,-3.69l-1.04,-1.25l0.09,-1.86l-0.44,-0.99Z",
            "name": "Vermont"
        },
        "US-NM": {
            "path": "M230.44,422.29l12.23,-122.29l25.73,2.35l26.17,1.96l26.2,1.52l25.82,1.07l-0.32,10.06l-0.74,0.39l-3.7,97.58l-32.54,-1.4l-33.69,-2.12l-0.44,0.75l0.53,2.31l0.44,1.25l1.0,0.77l-30.68,-2.58l-0.44,0.36l-0.85,9.43l-14.71,-1.4Z",
            "name": "New Mexico"
        },
        "US-NC": {
            "path": "M828.44,287.31l0.0,-0.0l-0.0,0.0l-0.0,0.0ZM820.97,270.59l0.2,0.22l-0.05,0.01l-0.16,-0.23ZM823.26,274.78l0.2,0.15l-0.02,0.18l-0.05,-0.08l-0.12,-0.24ZM678.04,321.19l0.92,0.16l1.52,-0.4l0.42,-0.39l0.52,-0.97l0.11,-2.67l1.34,-1.19l0.47,-1.04l2.24,-1.47l2.12,-0.54l0.76,0.17l1.32,-0.53l2.36,-2.51l0.78,-0.25l1.84,-2.28l1.49,-1.0l1.55,-0.2l1.14,-2.63l-0.29,-1.2l1.66,0.04l0.5,-1.63l0.93,-0.77l1.08,-0.77l0.52,1.49l1.07,0.32l1.34,-1.17l1.34,-2.62l2.49,-1.6l0.79,0.07l0.83,0.78l1.05,-0.21l0.84,-1.07l1.46,-4.14l1.08,-1.09l1.48,0.07l0.43,-0.31l-0.7,-1.24l0.39,-1.97l-0.43,-0.89l0.38,-1.23l7.43,-0.94l19.57,-3.57l37.24,-8.82l31.13,-8.24l0.41,1.18l3.57,3.14l1.01,1.48l-1.21,-0.97l-0.17,-0.62l-0.93,-0.38l-0.52,0.06l-0.23,0.65l0.66,0.52l0.6,1.52l-0.54,0.02l-0.92,-0.73l-2.32,-0.75l-0.41,-0.47l-0.55,0.14l-0.31,0.69l0.15,0.64l1.38,0.42l1.69,1.33l-1.1,0.66l-2.5,-1.14l-0.35,0.51l0.15,0.42l1.6,1.13l-4.09,-1.12l-0.46,0.15l0.02,0.48l0.61,0.68l1.69,0.78l-0.96,0.58l0.0,0.6l-0.43,0.52l-1.48,0.76l-0.9,-0.75l-0.6,0.23l-0.1,0.35l-0.2,-0.13l-1.33,-2.26l0.19,-2.6l-0.43,-0.47l-0.89,-0.21l-0.36,0.64l0.63,0.69l-0.43,0.98l-0.01,1.02l0.5,1.7l1.61,2.14l-0.3,1.26l0.49,0.29l2.97,-0.63l2.09,-1.5l0.27,0.01l0.38,0.78l0.76,-0.34l1.57,0.03l0.15,-0.72l-0.56,-0.3l1.28,-0.76l2.04,-0.49l-0.08,1.17l0.64,0.28l-0.59,0.87l0.89,1.16l-0.84,0.12l-0.18,0.67l1.39,0.43l0.26,0.92l-1.21,0.07l-0.18,0.66l0.67,0.57l1.25,-0.18l0.52,0.25l0.4,-0.38l0.16,-1.93l-0.77,-3.27l0.41,-0.49l0.57,0.42l0.93,0.04l0.28,-0.42l-0.29,-0.59l0.46,-0.58l1.73,1.79l0.01,1.39l0.62,0.87l-0.53,0.19l-0.25,0.47l0.91,1.12l-0.08,0.35l-0.41,0.55l-0.78,0.1l-0.91,-0.83l-0.31,0.34l0.14,1.24l-1.07,1.62l0.2,0.55l-0.32,0.22l-0.15,0.97l-0.73,0.55l0.1,0.9l-0.89,0.97l-1.06,0.22l-0.6,-0.36l-0.51,0.52l-0.94,-0.79l-0.86,0.12l-0.4,-0.81l-0.59,-0.2l-0.51,0.38l0.09,0.93l-0.52,0.23l-1.42,-1.2l1.3,-0.41l0.23,-0.87l-0.57,-0.42l-2.03,0.34l-1.13,1.02l0.3,0.67l0.44,0.14l-0.05,0.37l0.16,0.44l0.34,0.24l-0.03,0.12l-0.58,-0.33l-1.69,0.84l-1.13,-0.41l-1.45,0.08l-3.33,-0.64l0.44,1.07l0.98,0.43l0.36,0.63l1.51,-0.23l4.04,0.94l3.52,0.06l0.47,0.41l-0.05,0.51l-0.99,0.07l-0.24,0.72l-1.6,1.45l0.33,0.58l1.85,-0.03l-2.54,3.49l-1.68,0.07l-1.61,-0.94l-0.9,-0.17l-1.22,-0.99l-1.12,0.09l0.08,0.47l1.05,1.11l2.35,2.03l2.69,0.22l1.31,0.46l1.69,-2.16l0.52,0.45l1.18,0.31l0.39,-0.58l-0.55,-0.87l0.87,0.14l0.2,0.56l0.66,0.22l1.62,-1.2l-0.17,0.59l0.29,0.57l-0.29,0.38l-0.43,-0.2l-0.4,0.38l0.04,0.89l-0.96,1.71l0.02,0.78l-0.71,-0.06l-0.07,-0.73l-1.13,-0.58l-0.41,0.48l0.29,1.46l-0.35,-0.91l-0.84,-0.35l-1.21,1.08l-0.21,0.52l0.25,0.26l-2.03,0.35l-2.74,1.86l-0.68,-1.01l-0.75,-0.29l-0.36,0.49l0.44,1.24l-0.57,-0.01l-0.09,0.82l-0.93,1.72l-0.91,0.85l-0.59,-0.25l0.48,-0.69l-0.03,-0.77l-1.07,-0.9l-0.09,-0.52l-1.69,-0.38l-0.15,0.47l0.44,1.14l0.2,0.32l0.59,0.07l0.3,0.59l-0.88,0.38l-0.08,0.71l0.66,0.62l0.76,0.16l-0.0,0.36l-2.12,1.68l-1.9,2.65l-1.98,4.29l-0.33,2.11l0.13,1.34l-0.16,-1.03l-1.02,-1.56l-0.55,-0.16l-0.29,0.48l1.21,3.89l-0.62,2.26l-3.91,0.24l-1.43,0.66l-0.36,-0.51l-0.58,-0.17l-0.53,1.07l-1.9,1.16l-0.61,-0.01l-23.43,-14.88l-1.05,-0.01l-18.71,3.69l-0.67,-2.72l-3.28,-2.77l-0.46,0.08l-1.23,1.32l-0.02,-1.27l-0.82,-0.52l-22.87,3.58l-0.64,-0.26l-0.62,0.46l-0.25,0.65l-3.98,1.95l-0.89,1.23l-1.01,0.09l-4.78,2.68l-21.0,4.1l-0.36,-4.48l0.7,-0.95ZM818.38,269.72l0.19,0.35l0.24,0.37l-0.45,-0.4l0.02,-0.32ZM809.02,288.41l0.21,0.33l-0.17,-0.08l-0.04,-0.24ZM816.9,297.06l0.14,-0.36l0.16,0.07l-0.13,0.28l-0.17,0.02ZM814.31,297.05l-0.06,-0.28l-0.03,-0.11l0.3,0.25l-0.21,0.13ZM814.29,262.45l0.36,-0.24l0.15,0.4l-0.42,0.08l-0.1,-0.23ZM793.64,327.32l0.04,-0.07l0.22,0.03l-0.0,0.08l-0.26,-0.04Z",
            "name": "North Carolina"
        },
        "US-ND": {
            "path": "M438.81,45.56l2.07,7.04l-0.73,2.58l0.57,2.4l-0.27,1.19l0.48,2.02l0.02,3.31l1.42,4.0l0.45,0.55l-0.08,0.99l0.39,1.53l0.62,0.75l1.49,3.79l-0.05,3.94l0.42,0.71l0.51,8.42l0.51,1.54l0.51,0.25l-0.47,2.66l0.36,1.64l-0.14,1.76l0.69,1.11l0.2,2.17l0.49,1.14l1.8,2.57l0.16,2.21l0.51,1.08l0.17,1.4l-0.24,1.36l0.29,1.75l-27.86,0.76l-28.35,0.2l-28.35,-0.38l-28.45,-0.97l2.91,-66.15l23.0,0.82l25.46,0.43l25.47,-0.06l24.0,-0.51Z",
            "name": "North Dakota"
        },
        "US-NE": {
            "path": "M423.03,177.17l3.93,2.68l3.93,1.87l1.33,-0.22l0.51,-0.47l0.36,-1.07l0.48,-0.2l2.49,0.33l1.32,-0.47l1.58,0.24l3.45,-0.65l2.38,1.96l1.41,0.14l1.55,0.76l1.45,0.08l0.89,1.09l1.48,0.17l-0.06,0.97l1.69,2.06l3.32,0.59l-0.02,2.52l1.14,1.92l0.01,2.26l1.16,1.06l0.34,1.69l1.74,1.44l0.07,1.85l1.51,2.07l-0.49,2.3l0.44,3.05l0.52,0.54l0.93,-0.2l-0.03,1.23l1.21,0.49l-0.4,2.32l0.21,0.45l1.11,0.39l-0.59,0.75l-0.09,1.0l0.13,0.59l0.82,0.49l0.16,1.42l-0.26,0.91l0.26,1.26l0.55,0.6l0.3,1.89l-0.21,1.31l0.23,0.71l-0.57,0.9l0.03,0.78l0.45,0.87l1.23,0.62l0.26,2.46l1.1,0.5l0.03,0.78l1.18,2.69l-0.23,0.95l1.16,0.21l0.8,0.98l1.1,0.23l-0.15,0.95l1.31,1.64l-0.21,1.1l0.49,0.89l-26.18,1.09l-27.89,0.67l-27.89,0.15l-27.94,-0.37l0.47,-21.31l-0.39,-0.41l-32.41,-1.09l1.91,-42.67l43.38,1.27l44.7,-0.05Z",
            "name": "Nebraska"
        },
        "US-LA": {
            "path": "M509.93,412.65l-1.38,-21.61l25.73,-1.93l25.93,-2.35l0.35,0.82l1.48,0.64l-0.92,1.34l-0.25,2.12l0.5,0.72l1.18,0.3l-1.21,0.47l-0.45,0.78l0.46,1.35l1.05,0.83l0.08,2.13l0.47,0.54l1.52,0.73l0.45,1.04l1.43,0.42l-0.87,1.22l-0.85,2.34l-0.76,0.05l-0.52,0.51l-0.02,0.73l0.63,0.72l-0.21,1.15l-1.35,0.96l-1.08,1.89l-1.38,0.68l-0.68,0.83l-0.79,2.41l-0.24,3.51l-1.55,1.75l0.13,1.2l0.63,0.95l-0.35,2.37l-1.62,0.3l-0.59,0.57l0.29,0.97l0.65,0.59l-0.25,1.41l0.99,1.51l-1.18,1.19l-0.08,0.45l0.4,0.23l6.21,-0.58l29.38,-3.07l-0.67,3.47l-0.52,1.02l-0.19,2.25l0.7,0.98l-0.09,0.66l0.61,1.0l1.32,0.7l1.23,1.41l0.15,0.88l0.9,1.38l0.14,1.05l1.13,1.84l-1.86,0.4l-0.38,-0.08l-0.02,-0.56l-0.54,-0.57l-1.29,0.28l-1.19,-0.59l-1.52,0.18l-0.62,-0.98l-1.25,-0.86l-2.85,-0.46l-1.25,0.64l-1.39,2.31l-1.3,1.43l-0.41,0.92l0.07,1.2l0.56,0.89l0.83,0.56l4.28,0.81l3.36,-1.02l1.32,-1.2l0.68,-1.2l0.35,0.59l1.09,0.42l0.59,-0.41l0.81,0.02l0.51,-0.47l-0.76,1.22l-1.12,-0.11l-0.57,0.32l-0.38,0.62l0.0,0.83l0.77,1.22l1.49,-0.03l0.66,0.9l1.11,0.48l1.45,-0.67l0.46,-1.11l-0.02,-1.37l0.93,-0.58l0.42,-1.0l0.24,0.05l0.11,1.17l-0.24,0.25l0.19,0.57l0.43,0.15l-0.07,0.75l1.35,1.08l0.35,-0.17l-0.48,0.6l0.19,0.63l-0.24,0.18l-0.85,-0.72l-0.71,-0.08l-1.0,1.9l-0.85,0.15l-0.46,0.54l0.17,1.2l-1.03,-0.48l-1.01,0.07l0.05,0.46l1.16,1.07l-1.18,-0.14l-0.92,0.61l0.69,0.43l1.28,2.05l2.76,0.96l-0.07,1.21l0.34,0.4l2.08,-0.33l0.78,0.16l0.18,0.53l0.74,0.32l1.35,-0.35l0.54,0.78l1.08,-0.47l1.14,0.74l0.14,0.3l-0.41,0.63l1.55,0.86l-0.39,0.66l0.39,0.58l-0.18,0.63l-0.95,1.51l-1.32,-1.57l-0.68,0.34l0.1,0.67l-0.39,0.12l0.4,-1.9l-1.33,-0.76l-0.5,0.51l0.2,1.18l-0.55,0.46l-0.27,-1.03l-0.58,-0.25l-0.9,-1.28l0.03,-0.77l-0.97,-0.13l-0.47,0.51l-1.42,-0.16l-0.75,-0.77l-2.33,-0.08l0.38,-0.87l-0.13,-0.66l-0.64,-0.69l-0.92,0.05l0.09,-0.97l-0.37,-0.36l-0.91,-0.03l-0.22,0.59l-0.86,-0.38l-0.48,0.27l-2.63,-1.26l-1.25,-0.02l-0.68,-0.64l-0.61,0.19l-0.3,0.57l-0.05,1.26l1.74,0.94l1.68,0.34l-0.15,0.92l0.29,0.4l-0.34,0.35l0.23,0.69l-0.76,0.95l-0.02,0.67l0.82,0.97l-0.95,1.45l-1.34,0.95l-0.78,-1.16l0.21,-1.51l-0.35,-0.93l-0.49,-0.18l-0.4,0.36l-1.16,-1.08l-0.6,0.43l-0.77,-1.06l-0.63,-0.2l-0.63,1.34l-0.86,0.26l-0.89,-0.53l-0.85,0.54l-0.1,0.62l0.49,0.41l-0.68,0.57l-0.13,1.46l-0.46,0.13l-0.39,0.85l-0.93,0.09l-0.12,-0.69l-1.61,-0.4l-0.76,0.99l-1.94,-0.93l-0.3,-0.54l-1.0,0.01l-0.35,0.61l-1.17,-0.51l0.43,-0.41l-0.0,-1.46l-0.38,-0.57l-1.91,-1.19l-0.08,-0.54l-0.84,-0.71l-0.1,-0.92l0.73,-1.16l-0.35,-1.14l-0.88,-0.19l-0.34,0.57l0.16,0.43l-0.58,0.82l0.04,0.92l-1.82,-0.4l0.07,-0.39l-0.47,-0.54l-1.98,0.77l-0.71,-2.23l-1.33,0.24l-0.19,-2.14l-1.31,-0.35l-1.9,0.3l-1.09,0.66l-0.22,-0.71l0.85,-0.27l-0.06,-0.8l-0.61,-0.58l-1.04,-0.1l-0.86,0.43l-0.95,-0.14l-0.4,0.81l-2.01,1.12l-0.64,-0.31l-1.29,0.72l0.54,1.37l0.81,0.31l1.05,1.56l-1.28,0.37l-1.82,1.07l-7.68,-0.89l-6.75,-2.3l-3.48,-0.65l-6.89,0.72l-3.42,0.81l-1.58,0.74l-0.92,-1.42l1.21,-0.46l0.79,-0.99l0.26,-2.31l-0.6,-0.84l1.15,-1.63l0.23,-1.6l-0.5,-1.84l0.07,-1.46l-0.67,-0.7l-0.22,-1.05l0.83,-2.22l-0.64,-1.95l0.77,-0.85l0.29,-1.49l0.78,-0.94l0.78,-2.84l-0.19,-1.42l0.58,-0.98l-0.76,-1.33l0.84,-0.39l0.19,-0.44l-0.9,-1.35l0.02,-2.13l-1.08,-0.23l-0.58,-1.57l-0.92,-0.84l0.28,-1.27l-0.82,-0.75l-0.33,-0.95l-0.65,-0.34l0.22,-0.98l-1.17,-0.57l-0.81,-0.93l0.15,-2.45l-0.69,-1.92l-1.34,-1.96l-2.65,-2.19ZM550.27,462.3l0.02,-0.01l0.0,0.0l-0.02,0.0ZM609.21,466.78l-0.03,-0.03l-0.09,-0.04l0.15,-0.01l-0.03,0.09ZM609.22,465.15l-0.02,-0.02l0.04,-0.01l-0.02,0.02ZM568.52,468.5l-2.02,-0.42l-0.67,-0.5l0.74,-0.44l0.35,-0.77l0.4,0.49l0.84,0.2l-0.14,0.62l0.51,0.81ZM551.73,462.55l1.74,-1.07l3.37,1.07l-0.7,0.57l-0.17,0.82l-0.69,0.18l-3.56,-1.57Z",
            "name": "Louisiana"
        },
        "US-SD": {
            "path": "M336.84,132.26l0.3,-0.53l0.79,-19.91l28.46,0.97l28.36,0.38l28.37,-0.2l27.74,-0.76l-0.17,1.71l-0.72,1.71l-2.9,2.46l-0.41,1.28l1.59,2.13l1.06,2.05l0.55,0.36l1.74,0.24l1.02,0.84l0.58,1.02l1.51,38.61l-1.84,0.09l-0.42,0.56l0.24,1.42l0.88,1.12l0.01,1.44l-0.65,0.36l0.17,1.47l0.48,0.43l1.09,0.04l0.34,1.66l-0.16,0.9l-0.62,0.82l0.02,1.71l-0.68,2.42l-0.49,0.44l-0.67,1.87l0.5,1.1l1.32,1.06l-0.16,0.61l0.64,0.65l0.36,1.13l-1.66,-0.28l-0.34,-0.92l-0.85,-0.72l0.19,-0.6l-0.29,-0.59l-1.58,-0.22l-1.03,-1.16l-1.57,-0.11l-1.51,-0.74l-1.34,-0.11l-2.39,-1.96l-3.78,0.6l-1.65,-0.24l-1.19,0.46l-2.62,-0.32l-0.98,0.48l-0.76,1.43l-0.72,0.05l-3.67,-1.79l-4.13,-2.77l-44.85,0.05l-43.36,-1.27l1.86,-42.89Z",
            "name": "South Dakota"
        },
        "US-DC": {
            "path": "M784.09,218.11l-0.46,-0.63l-1.55,-0.63l0.57,-1.0l2.04,1.2l-0.6,1.05Z",
            "name": "District of Columbia"
        },
        "US-DE": {
            "path": "M799.28,194.88l0.47,-1.54l0.91,-1.11l1.72,-0.73l1.11,0.04l-0.32,0.54l-0.07,1.36l-0.46,1.08l-0.6,0.54l-0.08,0.77l0.13,0.61l1.03,0.82l0.13,2.27l4.0,3.21l1.16,3.91l1.97,1.62l0.48,1.23l3.19,2.18l1.35,-0.1l0.49,1.17l-0.59,0.27l-0.3,0.67l0.04,0.75l0.34,0.18l-0.81,0.57l-0.07,1.2l0.67,0.2l0.85,-0.73l0.72,0.33l0.3,-0.21l0.6,1.5l-9.83,2.76l-8.56,-25.34Z",
            "name": "Delaware"
        },
        "US-FL": {
            "path": "M631.9,422.72l47.41,-7.21l1.55,1.89l0.89,2.71l1.48,0.99l49.02,-5.54l1.04,1.37l0.04,1.09l0.56,1.05l0.87,0.49l1.83,-0.32l0.85,-0.76l-0.18,-4.58l-1.0,-1.48l-0.24,-1.76l0.27,-0.74l0.62,-0.3l0.11,-0.7l5.64,0.9l4.05,-0.2l0.15,1.25l-0.75,-0.12l-0.32,0.43l0.26,1.54l2.14,1.79l0.23,1.01l0.42,0.37l0.31,1.93l5.44,11.49l1.84,3.07l7.28,10.23l0.63,0.35l6.95,7.56l-0.5,-0.03l-0.27,0.62l-1.37,-0.01l-0.35,-0.66l0.37,-1.4l-0.16,-0.56l-2.33,-0.91l-0.46,0.53l1.04,2.81l0.79,0.98l2.21,4.81l10.14,13.82l1.42,3.15l3.76,5.42l-1.4,-0.35l-0.42,0.74l0.81,0.66l0.86,0.24l0.56,-0.22l1.49,0.95l2.1,3.1l-0.5,0.37l-0.11,0.53l1.17,0.53l0.92,1.86l-0.07,1.08l0.6,0.97l0.65,2.7l-0.26,0.77l1.06,9.19l-0.3,1.1l0.47,0.68l0.55,3.19l-0.8,1.5l0.1,2.29l-0.84,0.77l-0.19,1.85l-0.47,0.87l0.24,1.51l-0.28,1.8l0.56,1.77l0.48,0.24l-1.15,1.88l-0.37,1.32l-0.95,0.25l-0.54,-0.23l-1.38,0.47l-0.34,1.1l-0.9,0.32l-0.16,0.6l-0.86,0.7l-1.45,0.15l-0.28,-0.33l-1.25,-0.09l-0.89,1.09l-3.18,1.18l-1.08,-0.61l-0.73,-1.08l0.04,-1.87l1.02,0.86l1.68,0.48l0.26,0.65l0.53,0.07l1.36,-0.75l0.19,-0.71l-0.27,-0.64l-1.61,-1.13l-2.43,-0.26l-0.92,-0.47l-0.89,-1.72l-0.91,-0.74l0.21,-1.0l-0.48,-0.28l-0.53,0.16l-1.43,-2.58l-0.44,-0.29l-0.65,0.08l-0.46,-0.63l0.22,-0.91l-0.72,-0.66l-1.22,-0.61l-1.07,-0.08l-0.77,-0.55l-0.58,0.19l-2.84,-0.59l-0.51,0.66l0.25,-0.95l-0.47,-0.42l-0.88,0.13l-0.27,-0.74l-0.9,-0.67l-0.63,-1.44l-0.56,-0.1l-0.77,-3.03l-0.79,-1.0l-0.18,-1.56l-0.45,-0.84l-0.73,-0.91l-0.49,-0.15l-0.1,0.95l-1.33,-0.26l1.07,-1.35l0.29,-0.76l-0.13,-0.64l0.86,-1.51l0.65,-0.35l0.27,-0.85l-0.62,-0.38l-1.42,0.96l-1.02,1.71l-0.26,1.83l-1.38,0.37l-0.22,-1.36l-0.81,-1.35l-0.32,-4.12l-0.88,-0.61l1.64,-1.37l0.21,-0.99l-0.59,-0.41l-3.06,1.98l-0.76,-0.67l-0.4,0.27l-1.29,-0.9l-0.37,0.75l1.15,1.1l0.53,0.1l1.3,2.04l-1.05,0.25l-1.44,-0.38l-0.87,-1.63l-1.14,-0.6l-1.99,-2.58l-1.07,-2.32l-1.3,-0.89l0.1,-0.89l-1.0,-1.82l-1.8,-0.98l0.08,-0.69l0.99,-0.41l-0.36,-0.5l0.44,-0.75l-0.4,-0.35l0.4,-1.23l2.44,-4.56l-1.08,-2.44l-0.69,-0.46l-0.92,0.43l-0.27,0.94l0.31,1.21l-0.24,0.04l-0.76,-2.47l-1.0,-0.27l-1.2,-0.88l-1.53,-0.3l0.32,1.97l-0.48,0.63l0.27,0.59l2.23,0.56l0.26,0.99l-0.35,2.51l-0.32,-0.59l-0.8,-0.21l-2.16,-1.54l-0.41,0.21l-0.3,-0.64l0.58,-2.14l0.04,-3.02l-0.69,-1.99l0.42,-0.52l0.47,-1.94l-0.25,-0.54l0.63,-3.08l-0.42,-5.46l-0.72,-1.57l0.35,-0.47l-0.49,-2.2l-2.12,-1.32l-0.05,-0.53l-0.56,-0.42l-0.11,-1.02l-0.93,-0.73l-0.56,-1.52l-0.64,-0.24l-1.45,0.33l-1.03,-0.19l-1.58,0.56l-1.17,-1.74l-1.52,-0.47l-0.19,-0.6l-1.37,-1.51l-0.88,-0.58l-0.62,0.08l-1.54,-1.16l-0.81,-0.21l-0.53,-2.76l-3.09,-1.12l-0.66,-0.59l-0.54,-1.23l-2.18,-1.92l-2.21,-1.07l-1.46,-0.11l-3.47,-1.66l-2.86,1.01l-1.01,-0.4l-1.04,0.43l-0.35,0.69l-1.34,0.69l-0.5,0.71l0.04,0.65l-0.74,-0.22l-0.59,0.6l0.68,0.93l1.51,0.06l0.42,0.21l-3.05,0.26l-1.58,1.53l-0.91,0.46l-1.29,1.58l-1.56,1.04l-0.33,0.14l0.2,-0.49l-0.26,-0.53l-0.67,-0.04l-2.07,2.27l-2.21,0.25l-2.12,1.08l-0.79,0.04l-0.29,-2.04l-1.73,-2.23l-2.23,-0.99l-0.18,-0.41l-2.54,-1.49l2.83,1.31l1.21,-0.75l-0.01,-0.74l-1.33,-0.33l-0.36,0.57l-0.22,-1.02l-0.34,-0.1l0.12,-0.52l-0.49,-0.33l-1.4,0.62l-2.32,-0.74l0.65,-1.09l0.83,-0.11l1.03,-1.46l-0.92,-0.95l-0.46,0.13l-0.49,1.02l-0.44,-0.03l-0.81,0.57l-0.73,-0.9l-0.7,0.1l-0.17,0.38l-1.34,0.74l-0.14,0.68l0.29,0.46l-3.99,-1.33l-5.08,-0.68l0.12,-0.24l1.28,0.29l0.61,-0.53l2.12,0.37l0.22,-0.78l-0.95,-1.02l0.08,-0.7l-0.63,-0.28l-0.5,0.32l-0.29,-0.47l-1.91,0.2l-2.26,1.12l0.29,-0.64l-0.41,-0.58l-0.96,0.36l-0.59,-0.25l-0.22,0.44l0.2,0.71l-1.45,0.81l-0.39,0.64l-5.2,1.01l0.31,-0.52l-0.4,-0.52l-1.36,-0.27l-0.73,-0.53l0.69,-0.54l0.0,-0.78l-0.68,-0.12l-0.82,-0.66l-0.46,0.11l0.15,0.76l-0.41,1.78l-1.06,-1.39l-0.7,-0.45l-0.55,0.07l-0.3,0.72l0.83,1.77l-0.25,0.8l-1.39,1.0l-0.05,1.04l-0.6,0.23l-0.17,0.57l-1.5,0.57l0.28,-0.66l-0.22,-0.45l1.14,-1.04l0.07,-0.74l-0.4,-0.58l-1.19,-0.23l-0.42,-0.84l0.3,-1.7l-0.19,-1.61l-2.19,-1.1l-2.41,-2.45l0.31,-1.44l-0.16,-1.03ZM646.11,433.06l-0.95,0.27l0.41,-0.45l0.54,0.17ZM667.01,434.49l0.99,-0.29l0.36,0.31l0.09,0.73l-1.44,-0.75ZM773.25,453.07l0.44,0.57l-0.43,0.77l-0.01,-1.34ZM792.59,524.69l0.02,-0.12l0.03,0.05l-0.05,0.07ZM793.17,522.23l-0.25,-0.25l0.54,-0.37l-0.29,0.62ZM771.5,451.69l0.22,0.77l-0.28,2.36l0.31,1.82l-1.43,-3.27l1.19,-1.68ZM681.83,444.33l0.22,-0.2l0.37,0.02l-0.11,0.43l-0.48,-0.25Z",
            "name": "Florida"
        },
        "US-WA": {
            "path": "M39.71,56.54l0.38,-1.08l0.92,0.66l0.56,-0.13l0.55,-0.65l0.48,0.67l0.71,0.0l0.18,-0.77l-0.96,-1.49l0.86,-0.82l-0.07,-1.37l0.49,-0.38l-0.09,-1.04l0.81,-0.26l0.04,0.5l0.47,0.42l0.95,-0.3l-0.08,-0.68l-1.41,-1.85l-1.83,-0.12l-0.16,0.32l-0.77,-0.83l0.28,-1.63l0.65,0.54l0.52,-0.07l0.3,-0.56l-0.17,-0.69l3.35,-0.49l0.25,-0.67l-2.57,-1.32l-0.03,-0.8l-0.66,-0.58l-1.3,-0.33l0.44,-4.77l-0.48,-1.3l0.26,-0.72l-0.51,-0.49l0.6,-3.97l0.11,-4.42l-0.54,-1.04l-0.03,-0.99l-1.52,-2.38l0.4,-4.29l-0.19,-1.32l0.8,-0.8l0.05,-0.72l0.99,-1.45l-0.58,-1.46l1.03,0.82l0.44,0.01l3.29,3.38l0.99,0.36l2.14,2.46l3.7,1.54l1.2,0.08l0.78,0.72l0.67,0.31l0.6,-0.14l1.55,1.09l1.48,0.49l1.28,0.29l1.22,-0.61l0.52,0.31l0.45,0.72l-0.07,1.25l0.54,0.75l0.81,-0.23l0.08,-0.77l0.44,0.04l0.61,1.42l-0.41,0.58l0.34,0.5l0.56,-0.03l0.74,-0.84l-0.35,-1.73l1.04,-0.23l-0.46,0.23l-0.22,0.69l1.21,4.49l-0.47,0.1l-1.69,1.73l0.24,-1.3l-0.22,-0.41l-1.31,0.3l-0.39,0.81l0.08,0.96l-1.4,1.71l-2.0,1.38l-1.08,1.41l-0.97,0.69l-1.12,1.67l-0.07,0.71l0.61,0.61l0.95,0.12l2.77,-0.46l1.23,-0.58l-0.02,-0.7l-0.64,-0.23l-2.94,0.77l-0.34,-0.31l3.28,-3.44l3.07,-0.87l0.91,-1.52l1.75,-1.54l0.52,0.57l0.54,-0.18l0.25,-1.83l-0.1,2.29l0.25,0.92l-0.98,-0.22l-0.65,0.77l-0.4,-0.74l-0.53,-0.2l-0.4,0.64l0.29,2.36l-0.19,-1.07l-0.67,-0.22l-0.47,0.69l-0.07,0.76l0.46,0.68l-0.64,0.59l-0.0,0.45l0.41,0.17l1.68,-0.56l0.23,1.1l-1.1,1.8l-0.1,1.06l-0.84,0.7l0.12,1.02l-0.84,-0.69l1.14,-1.45l-0.22,-0.97l-1.98,1.07l-0.39,0.64l-0.03,-2.13l-0.52,0.01l-1.05,1.6l-1.27,0.53l-1.16,1.87l-1.51,0.29l-0.47,0.43l-0.22,1.19l1.11,-0.03l-0.25,0.36l0.26,0.38l0.92,0.03l0.05,0.68l0.53,0.47l0.52,-0.27l0.37,-1.77l0.14,0.42l0.83,-0.14l1.09,1.5l1.32,-0.61l1.66,-1.47l1.0,-1.57l0.61,0.79l0.73,0.14l0.44,-0.22l-0.05,-0.87l1.56,-0.54l0.36,-0.94l-0.31,-1.28l0.24,-1.2l-0.16,-1.37l0.83,0.21l0.31,-0.92l-0.18,-0.76l-0.71,-0.65l0.91,-1.14l0.1,-1.76l1.25,-1.25l0.63,-1.38l1.62,-0.49l0.79,-1.15l-0.44,-0.67l-0.51,-0.02l-0.84,-1.32l0.19,-2.12l-0.25,-0.88l0.5,-0.8l0.07,-0.84l-1.12,-1.76l-0.62,-0.41l-0.16,-0.67l0.19,-0.51l0.59,0.24l0.53,-0.33l0.26,-1.83l0.8,-0.24l0.31,-1.01l-0.57,-2.35l0.45,-0.55l-0.02,-0.86l-0.94,-0.9l-0.95,0.3l-1.05,-2.71l0.96,-1.87l41.06,9.78l38.73,7.96l-10.71,55.98l1.01,3.02l0.12,2.01l-1.02,1.29l0.71,1.89l-31.09,-6.18l-1.67,0.78l-7.22,-1.08l-1.69,0.9l-4.19,-0.16l-3.18,0.42l-1.65,0.73l-0.88,-0.27l-1.2,0.29l-1.5,-0.24l-2.42,-0.97l-0.91,0.45l-3.45,0.47l-2.1,-0.73l-1.65,0.28l-0.3,-1.36l-1.08,-0.89l-4.32,-1.5l-2.32,-0.14l-1.14,-0.52l-1.27,0.2l-1.9,0.84l-4.5,0.53l-2.25,-1.03l-1.6,-1.16l-1.84,-0.53l-0.62,-0.82l0.72,-6.82l-0.45,-0.95l-0.19,-1.91l-0.96,-1.36l-1.94,-1.7l-1.58,-0.24l-1.32,0.27l-1.91,-3.27l-2.07,-0.25l-0.56,-0.31l-0.09,-0.53l-0.54,-0.48l-1.22,0.27l-0.8,-0.16l-1.0,0.51l-1.01,-1.79l-0.92,-0.24ZM63.34,41.38l0.15,0.75l-0.42,0.47l0.01,-0.9l0.26,-0.31ZM73.03,21.82l-0.63,0.89l-0.16,0.52l0.21,-1.4l0.58,-0.0ZM72.97,17.02l-0.1,-0.06l0.06,-0.05l0.05,0.11ZM72.2,16.85l-0.78,0.39l0.38,-0.69l-0.06,-0.62l0.23,-0.07l0.23,1.0ZM58.95,44.05l0.12,-0.05l-0.02,0.01l-0.1,0.04ZM69.52,20.65l1.77,-2.13l0.46,-0.01l0.5,1.75l-0.34,-0.55l-0.51,-0.13l-0.55,0.44l-0.35,-0.1l-0.36,0.74l-0.63,-0.01ZM69.6,21.82l0.46,0.01l0.6,0.51l0.08,0.36l-0.78,-0.21l-0.35,-0.68ZM70.55,24.64l-0.1,0.51l-0.0,0.01l-0.02,-0.24l0.12,-0.27ZM70.82,26.91l0.1,0.05l0.13,-0.05l-0.17,0.12l-0.05,-0.12ZM71.19,26.85l0.5,-0.95l1.08,1.49l0.01,0.89l-0.35,0.36l-0.33,-0.1l-0.25,-1.56l-0.67,-0.13ZM68.26,11.22l0.5,-0.34l0.16,1.54l-0.22,-0.05l-0.44,-1.15ZM69.97,10.92l0.82,0.83l-0.66,0.31l-0.16,-1.13ZM68.19,39.66l0.35,-1.09l0.22,-0.25l-0.05,1.08l-0.52,0.25ZM68.37,15.61l-0.41,-0.42l0.61,-0.75l-0.18,0.6l-0.02,0.56ZM68.53,15.96l0.4,0.2l-0.09,0.14l-0.28,-0.12l-0.03,-0.21ZM68.62,14.27l-0.01,-0.1l0.05,-0.13l-0.04,0.22ZM68.56,34.9l0.11,-1.05l0.35,-0.34l-0.25,1.58l-0.21,-0.18ZM66.24,14.43l-1.04,-0.84l0.22,-1.86l1.3,1.97l-0.36,0.18l-0.12,0.55ZM63.63,44.17l0.23,-0.25l0.02,0.01l-0.13,0.31l-0.12,-0.07ZM61.53,41.89l-0.09,-0.2l0.04,-0.07l0.0,0.12l0.05,0.15Z",
            "name": "Washington"
        },
        "US-KS": {
            "path": "M478.48,241.8l0.44,0.62l0.76,0.17l1.05,0.79l2.2,-1.07l-0.0,0.74l1.08,0.77l0.23,1.41l-0.95,-0.15l-0.59,0.31l-0.17,0.95l-1.14,1.36l-0.06,1.12l-0.79,0.5l0.04,0.63l1.57,2.07l2.01,1.46l0.2,1.11l0.42,0.84l0.75,0.55l0.33,1.09l1.9,0.89l1.54,0.25l2.74,46.02l-31.64,1.55l-32.07,0.92l-32.08,0.27l-32.14,-0.39l1.25,-64.36l27.95,0.37l27.91,-0.15l27.9,-0.67l27.73,-1.17l1.65,1.2Z",
            "name": "Kansas"
        },
        "US-WI": {
            "path": "M598.92,110.31l0.82,-0.15l-0.13,0.81l-0.55,0.02l-0.14,-0.67ZM594.49,118.94l0.47,-0.41l0.24,-2.35l0.95,-0.25l0.64,-0.7l0.21,-1.41l0.41,-0.63l0.63,-0.04l0.07,0.38l-0.76,0.07l-0.18,0.51l0.18,1.26l-0.38,0.18l-0.11,0.57l0.56,0.57l-0.73,0.97l-0.68,1.91l0.08,1.23l-1.04,2.28l-0.41,0.15l-0.87,-0.96l-0.19,-0.72l0.3,-1.57l0.61,-1.05ZM510.43,127.37l0.4,-0.27l0.27,-0.9l-0.45,-1.48l0.03,-1.91l0.69,-1.16l0.52,-2.24l-1.62,-2.9l-0.83,-0.35l-1.28,-0.0l-0.22,-2.31l1.66,-2.26l-0.05,-0.77l0.76,-1.55l1.95,-1.09l0.48,-0.75l0.97,-0.25l0.45,-0.76l1.16,-0.14l1.03,-1.57l-1.02,-12.15l1.03,-0.35l0.22,-1.1l0.72,-0.98l0.78,0.7l1.68,0.64l2.61,-0.58l3.26,-1.59l2.64,-0.84l2.2,-2.14l0.31,0.29l1.39,-0.11l1.24,-1.49l0.78,-0.58l1.04,-0.1l0.4,-0.53l1.08,0.99l-0.47,1.7l-0.67,1.01l0.24,1.62l-1.19,2.23l0.64,0.65l2.49,-1.1l0.72,-0.87l2.16,1.21l2.34,0.47l0.44,0.54l0.86,-0.13l1.6,0.69l2.25,3.55l15.47,2.46l4.65,1.94l1.67,-0.17l1.63,0.41l1.33,-0.6l3.17,0.69l2.18,0.08l0.86,0.4l0.56,0.89l-0.41,1.09l0.41,0.77l3.4,0.61l1.41,1.12l-0.15,0.71l0.6,1.11l-0.35,0.81l0.44,1.24l-0.77,1.25l-0.02,1.75l0.91,0.63l1.38,-0.26l1.02,-0.73l0.2,0.25l-0.78,2.44l0.05,1.31l1.32,1.45l0.84,0.34l-0.23,2.01l-2.41,1.21l-0.51,0.78l0.04,1.25l-1.59,3.49l-0.38,3.49l1.12,0.82l0.91,-0.05l0.5,-0.37l0.48,-1.36l1.81,-1.47l0.65,-2.53l1.05,-1.7l0.59,0.17l0.58,-0.71l0.87,-0.4l1.13,1.11l0.59,0.19l-0.26,2.17l-1.17,2.85l-0.54,5.55l0.23,1.1l0.8,0.92l0.07,0.52l-0.5,0.98l-1.29,1.34l-0.84,3.86l0.16,2.55l0.72,1.19l0.07,1.23l-1.05,3.21l0.13,2.09l-0.72,2.1l-0.27,2.44l0.6,2.0l-0.03,1.31l0.49,0.53l-0.2,1.69l0.92,0.77l0.55,2.41l1.21,1.51l0.09,1.67l-0.32,1.43l0.49,2.91l-44.22,4.84l-0.2,-0.78l-1.57,-2.16l-4.94,-0.8l-1.06,-1.32l-0.37,-1.66l-0.91,-1.19l-0.88,-4.84l1.03,-2.59l-0.09,-0.98l-0.72,-0.78l-1.44,-0.47l-0.72,-1.74l-0.49,-5.97l-0.71,-1.39l-0.53,-2.54l-1.16,-0.6l-1.1,-1.55l-0.93,-0.11l-1.17,-0.74l-1.71,0.09l-2.68,-1.77l-2.31,-3.46l-2.64,-2.08l-2.94,-0.52l-0.73,-1.23l-1.13,-0.99l-3.12,-0.43l-3.54,-2.71l0.45,-1.24l-0.12,-1.61l0.25,-0.81l-0.89,-3.1ZM541.7,81.33l0.05,-0.28l0.03,0.16l-0.08,0.12ZM538.06,86.86l0.29,-0.22l0.05,0.09l-0.34,0.13Z",
            "name": "Wisconsin"
        },
        "US-OR": {
            "path": "M11.15,140.78l0.67,-3.89l1.34,-2.47l0.24,-1.21l-0.0,-1.25l-0.46,-0.66l-0.13,-1.12l-0.42,-0.32l-0.1,-1.82l2.76,-3.56l2.24,-4.65l0.11,-1.08l0.42,-0.26l-0.0,0.79l0.73,0.11l0.43,-1.09l0.89,-0.82l0.22,0.94l1.38,0.29l-0.48,-2.63l-0.92,0.07l2.12,-3.74l1.12,-0.74l0.8,0.41l0.55,-0.32l-0.65,-1.36l-0.6,-0.31l1.75,-4.33l0.42,-0.38l0.05,-0.95l1.8,-5.43l0.99,-1.96l0.4,0.34l0.67,-0.28l-0.11,-0.97l-0.55,-0.32l0.99,-2.71l0.81,0.18l0.24,-0.45l-0.15,-0.52l-0.51,-0.28l0.57,-2.84l1.6,-2.67l0.86,-3.0l1.16,-1.74l1.01,-3.08l-0.07,-1.03l1.22,-1.09l0.05,-0.6l-0.46,-0.66l0.15,-0.52l0.5,0.64l0.45,0.06l0.4,-0.62l0.19,-1.39l-0.73,-0.73l0.52,-1.19l1.29,-0.77l0.06,-0.46l-0.86,-0.51l-0.25,-1.11l0.88,-2.17l-0.04,-1.44l0.93,-0.58l0.41,-0.85l0.12,-3.76l0.48,0.87l0.89,0.42l-0.05,0.91l0.55,0.54l0.44,-0.81l0.39,-0.13l-0.25,-0.99l1.11,0.86l1.53,0.02l1.46,-0.67l1.41,2.38l1.98,0.81l1.4,-0.65l0.91,0.07l1.7,1.53l0.76,1.05l0.19,1.9l0.42,0.78l-0.05,2.05l-0.4,1.24l0.18,0.93l-0.45,1.74l0.24,1.45l0.78,0.85l1.93,0.58l1.42,1.07l2.39,1.12l4.98,-0.48l2.91,-1.03l1.14,0.52l2.23,0.11l4.23,1.47l0.69,0.55l0.18,1.15l0.57,0.59l1.86,-0.25l2.1,0.73l3.79,-0.51l0.69,-0.42l2.18,0.95l1.64,0.26l1.2,-0.29l0.87,0.27l1.89,-0.76l3.07,-0.4l4.16,0.17l1.62,-0.9l7.15,1.08l0.96,-0.18l0.8,-0.58l31.18,6.2l0.22,1.81l0.91,1.83l1.15,0.64l1.95,1.88l0.55,2.46l-0.16,1.0l-3.72,4.51l-0.41,1.41l-1.41,2.61l-2.23,2.39l-0.67,2.66l-1.5,1.82l-2.24,1.47l-1.94,3.32l-1.5,1.25l-0.63,2.01l-0.13,1.86l0.28,0.92l0.56,0.61l0.54,0.04l0.39,-0.34l0.63,0.76l0.89,-0.04l0.06,0.87l0.8,0.95l-0.46,0.99l-0.65,0.05l-0.34,0.4l0.2,1.79l-1.04,2.53l-1.23,1.39l-7.1,38.68l-26.2,-5.22l-28.87,-6.33l-28.76,-6.91l-28.83,-7.55l-1.52,-2.51l0.28,-2.43l-0.28,-0.87Z",
            "name": "Oregon"
        },
        "US-KY": {
            "path": "M583.99,307.06l0.34,-2.14l1.15,0.94l0.72,0.19l0.75,-0.36l0.46,-0.87l0.86,-3.5l-0.55,-1.72l0.38,-0.85l-0.11,-1.84l-1.27,-2.0l1.78,-3.16l1.25,-0.51l0.74,0.05l7.05,2.46l0.8,-0.2l0.65,-0.71l0.23,-1.91l-1.5,-2.09l-0.24,-1.4l0.19,-0.86l0.4,-0.52l1.1,-0.18l1.24,-0.83l3.01,-0.96l0.64,-0.51l0.14,-1.13l-1.54,-2.01l-0.08,-0.66l1.33,-1.95l0.14,-1.14l1.26,0.4l1.12,-1.32l-0.68,-1.97l1.93,0.86l1.72,-0.84l0.03,1.15l1.01,0.45l0.99,-0.94l0.02,-1.34l0.51,0.16l1.9,-0.97l4.43,1.45l0.64,0.92l0.86,0.17l0.59,-0.59l0.73,-2.49l1.39,-0.55l1.39,-1.33l0.87,1.26l0.77,0.41l1.16,-0.14l0.12,0.74l0.95,0.18l0.66,-0.62l0.02,-0.99l0.84,-0.38l0.27,-0.48l-0.25,-2.05l0.84,-0.4l0.34,-0.56l-0.06,-0.67l1.24,-0.57l0.34,-0.72l0.39,1.45l0.62,0.59l1.47,0.61l1.25,-0.01l1.12,0.79l0.52,-0.11l0.26,-0.54l1.1,-0.46l0.53,-0.69l0.03,-3.42l0.85,-2.15l1.03,0.17l1.55,-1.19l0.73,-3.41l1.04,-0.37l1.65,-2.21l-0.0,-0.81l-1.19,-2.81l2.79,-0.61l1.54,0.78l3.85,-2.81l2.24,-0.47l-0.18,-1.06l0.35,-1.45l-0.32,-0.36l-1.21,-0.02l0.57,-1.37l-1.09,-1.5l1.65,-1.82l1.82,1.15l0.92,-0.12l1.94,-1.01l0.78,0.85l1.76,0.51l0.57,1.26l0.94,0.89l0.8,1.8l2.6,0.63l1.87,-0.58l1.64,0.25l2.19,1.8l0.96,0.41l1.27,-0.19l0.6,-1.3l0.99,-0.54l1.35,0.47l1.34,0.02l1.34,1.06l1.26,-0.69l1.42,-0.16l1.8,-2.53l1.72,-1.04l0.94,2.3l0.7,0.81l2.46,0.77l1.36,0.94l0.75,1.02l0.95,3.27l-0.37,0.45l0.1,0.71l-0.44,0.61l0.02,0.53l2.26,2.56l1.36,0.89l-0.07,0.87l1.34,0.94l0.58,1.33l1.56,1.16l0.99,1.58l2.15,0.8l1.09,1.09l2.13,0.23l-4.83,6.08l-5.05,4.15l-0.42,0.85l0.23,1.22l-2.07,1.92l0.05,1.61l-3.06,1.64l-0.8,2.36l-1.71,0.61l-2.7,1.83l-1.66,0.49l-3.39,2.42l-32.82,4.77l-7.49,0.91l-7.7,0.53l-22.76,3.67l-0.64,-0.54l-3.64,0.12l-0.41,0.6l1.05,3.5l-23.05,2.87ZM581.87,307.26l-0.6,0.08l-0.06,-0.53l0.48,-0.02l0.18,0.46Z",
            "name": "Kentucky"
        },
        "US-CO": {
            "path": "M364.55,241.8l-1.26,64.76l-29.38,-0.94l-29.47,-1.5l-29.44,-2.05l-32.26,-2.88l8.56,-85.67l27.82,2.51l28.27,2.01l29.63,1.53l28.0,0.91l-0.47,21.31Z",
            "name": "Colorado"
        },
        "US-OH": {
            "path": "M665.71,180.65l1.66,0.34l0.97,-0.31l1.75,1.03l2.07,0.23l1.48,1.14l1.59,0.23l-2.05,1.16l-0.12,0.47l0.43,0.24l2.45,0.16l1.39,-1.1l1.77,-0.27l3.41,0.91l0.92,-0.09l1.47,-1.3l1.73,-0.6l3.06,-1.95l2.62,-0.06l1.09,-0.62l1.24,-0.08l1.06,-0.8l4.21,-5.44l4.51,-3.48l6.9,-4.4l6.0,27.58l-0.51,0.54l-1.28,0.43l-0.41,0.94l1.67,2.19l0.03,2.07l0.41,0.26l0.32,0.91l-0.04,0.75l-0.54,0.82l-0.48,4.02l0.19,3.16l-0.57,0.41l0.34,1.08l-0.34,1.72l-0.39,0.54l0.77,1.2l-0.24,1.84l-2.4,2.64l-0.82,1.84l-1.36,1.49l-1.24,0.68l-0.6,0.7l-0.88,-0.89l-1.18,0.15l-1.31,1.73l-0.08,1.3l-1.77,0.86l-0.77,2.22l0.28,1.55l-0.93,0.85l0.31,0.66l0.63,0.4l0.27,1.26l-0.8,0.18l-0.49,1.59l0.06,-0.91l-0.92,-1.23l-1.53,-0.52l-1.13,0.8l-0.75,1.87l-0.33,2.65l-0.53,0.82l1.24,3.51l-1.46,0.64l-0.43,3.32l-2.54,1.14l-1.01,0.06l-0.77,-1.04l-1.52,-1.07l-2.35,-0.69l-1.17,-1.87l-0.32,-1.12l-0.74,-0.34l-2.26,1.33l-1.09,1.28l-0.4,1.04l-1.43,0.17l-0.87,0.61l-1.12,-0.98l-3.15,-0.55l-1.36,0.72l-0.53,1.24l-0.72,0.06l-3.06,-2.19l-1.93,-0.26l-1.77,0.57l-2.15,-0.49l-0.55,-1.51l-0.97,-0.95l-0.64,-1.35l-2.04,-0.73l-1.15,-0.98l-2.28,1.15l-0.46,0.03l-1.8,-1.19l-0.61,0.21l-0.6,0.7l-8.93,-54.65l20.65,-4.41ZM676.29,182.91l0.5,-0.77l0.64,0.41l-0.44,0.34l-0.7,0.03Z",
            "name": "Ohio"
        },
        "US-OK": {
            "path": "M399.49,359.67l-0.05,-41.43l-0.39,-0.4l-26.77,-0.23l-25.21,-0.63l0.32,-10.06l36.81,0.78l36.11,-0.07l36.1,-0.9l35.67,-1.7l0.62,10.5l4.6,23.96l1.48,37.41l-1.21,-0.21l-0.29,-0.36l-2.14,-0.2l-0.83,-0.78l-2.12,-0.38l-1.78,-2.03l-1.24,-0.21l-2.27,-1.54l-1.5,-0.39l-0.8,0.45l-0.23,0.87l-0.83,0.24l-0.46,0.62l-2.48,-0.13l-1.8,-1.46l-2.31,1.28l-1.17,0.2l-0.19,0.56l-0.63,0.27l-2.13,-0.76l-1.71,1.17l-2.06,0.51l-0.83,1.36l-1.49,0.07l-0.57,1.24l-1.27,-1.53l-1.7,-0.09l-0.32,-0.57l-1.21,-0.45l-0.02,-0.95l-0.44,-0.5l-1.24,-0.17l-0.74,1.37l-0.67,0.11l-0.84,-0.49l-0.98,0.07l-0.71,-1.49l-1.09,-0.34l-1.17,0.57l-0.45,1.69l-0.7,-0.08l-0.49,0.43l0.29,0.72l-0.5,1.66l-0.44,0.19l-0.86,-1.43l0.39,-1.63l-0.76,-0.85l-0.8,0.18l-0.49,0.76l-0.85,-0.18l-0.93,0.97l-1.08,0.13l-0.53,-1.34l-1.99,-0.18l-0.3,-1.46l-1.19,-0.53l-0.83,0.33l-2.13,2.13l-1.22,0.51l-0.98,-0.37l0.19,-1.23l-0.28,-1.12l-2.33,-0.66l-0.08,-2.15l-0.44,-0.55l-2.11,0.39l-2.53,-0.25l-0.64,0.26l-0.81,1.2l-0.96,0.06l-1.77,-1.75l-0.97,-0.12l-1.5,0.55l-2.69,-0.63l-1.86,-0.99l-1.05,0.25l-2.48,-0.3l-0.18,-2.09l-0.86,-0.86l-0.44,-1.01l-1.17,-0.41l-0.7,-0.82l-0.82,0.08l-0.44,1.62l-2.23,-0.67l-1.08,0.59l-0.96,-0.09l-3.81,-3.74l-1.13,-0.42l-0.81,0.08Z",
            "name": "Oklahoma"
        },
        "US-WV": {
            "path": "M694.04,248.77l3.95,-1.56l0.35,-0.7l0.11,-2.72l1.15,-0.23l0.4,-0.61l-0.59,-2.46l-0.62,-1.21l0.48,-0.64l0.34,-2.73l0.67,-1.64l0.46,-0.39l1.25,0.52l0.41,0.68l-0.13,1.12l0.71,0.44l0.77,-0.44l0.47,-1.4l0.5,0.21l0.57,-0.2l0.2,-0.45l-0.64,-2.05l-0.75,-0.53l0.8,-0.78l-0.27,-1.69l0.73,-1.98l1.65,-0.53l0.16,-1.57l1.01,-1.41l0.44,-0.09l0.65,0.77l0.67,0.18l2.27,-1.59l1.49,-1.63l0.78,-1.81l2.44,-2.66l0.36,-2.38l-0.73,-0.98l0.69,-2.31l-0.25,-0.75l0.58,-0.57l-0.29,-3.38l0.45,-3.87l0.53,-0.79l0.07,-1.1l-0.39,-1.18l-0.4,-0.32l-0.05,-1.97l-1.58,-1.85l0.44,-0.53l0.85,-0.11l0.3,-0.33l4.15,18.99l0.48,0.31l16.59,-3.72l2.23,10.48l0.51,0.37l2.05,-2.49l0.97,-0.56l0.34,-1.02l1.62,-1.98l0.25,-1.03l0.52,-0.4l1.2,0.42l0.73,-0.32l1.31,-2.58l0.6,-0.46l-0.04,-0.85l0.42,0.58l1.81,0.49l3.2,-0.61l0.77,-0.86l0.07,-1.44l1.99,-0.76l1.01,-1.68l0.67,-0.11l3.17,1.44l1.8,-0.73l-0.44,1.01l0.56,0.9l1.27,0.4l0.09,0.95l1.13,0.4l0.1,1.18l0.34,0.41l-0.56,3.59l-9.04,-4.28l-0.64,0.24l-0.3,1.14l0.39,1.58l-0.51,1.6l0.42,2.24l-1.35,2.38l-0.41,1.74l-0.72,0.53l-0.41,1.09l-0.28,0.22l-0.61,-0.22l-0.37,0.33l-1.23,3.25l-1.85,-0.74l-0.64,0.26l-0.93,2.74l0.09,1.44l-0.72,1.14l-0.18,2.3l-0.88,2.18l-3.26,-0.31l-1.45,-1.71l-1.71,-0.22l-0.5,0.41l-0.25,2.14l0.2,1.28l-0.31,1.43l-0.49,0.45l-0.31,1.03l0.23,0.91l-1.57,2.42l-0.03,2.07l-0.51,1.98l-2.56,4.69l-0.73,3.13l0.15,0.76l1.14,0.52l-1.08,1.37l0.06,0.6l0.44,0.39l-2.14,2.12l-0.55,-0.69l-0.84,0.16l-3.12,2.53l-1.04,-0.54l-1.31,0.27l-0.43,0.9l0.46,1.14l-0.91,0.91l-0.73,-0.04l-2.27,1.02l-1.21,0.97l-2.19,-1.31l-0.73,0.0l-0.81,1.57l-1.1,0.5l-1.22,1.46l-1.09,0.1l-1.99,-1.05l-1.31,0.0l-0.62,-0.72l-1.2,-0.58l-0.31,-1.3l-0.88,-0.53l0.35,-0.66l-0.31,-0.81l-0.85,-0.36l-0.84,0.25l-1.34,-0.15l-1.27,-1.15l-2.07,-0.75l-0.77,-1.4l-1.59,-1.2l-0.71,-1.46l-1.0,-0.57l-0.13,-1.07l-1.39,-0.92l-2.01,-2.21l0.7,-2.0l-0.26,-1.59l-0.67,-1.43Z",
            "name": "West Virginia"
        },
        "US-WY": {
            "path": "M218.73,209.12l10.46,-85.67l25.43,2.87l26.77,2.51l26.81,2.0l27.83,1.53l-3.8,86.23l-27.36,-1.48l-28.25,-2.06l-29.73,-2.75l-28.17,-3.16Z",
            "name": "Wyoming"
        },
        "US-UT": {
            "path": "M220.48,188.24l-2.58,21.18l0.35,0.45l32.27,3.59l-8.56,85.67l-42.65,-4.89l-42.5,-6.05l16.55,-106.49l47.12,6.55Z",
            "name": "Utah"
        },
        "US-IN": {
            "path": "M601.49,191.82l1.43,0.85l2.1,0.13l1.52,-0.39l2.62,-1.39l2.73,-2.09l32.15,-5.03l9.23,56.45l-0.66,1.15l0.31,0.91l0.81,0.76l-0.65,1.12l0.5,0.79l1.11,0.03l-0.36,1.11l0.18,0.5l-1.8,0.3l-3.17,2.54l-0.44,0.18l-1.41,-0.78l-3.46,0.93l-0.09,0.77l1.21,3.04l-1.4,1.87l-1.18,0.5l-0.45,0.88l-0.3,2.56l-1.11,0.88l-0.89,-0.25l-0.63,0.49l-0.85,1.93l0.06,3.08l-0.39,0.98l-1.38,0.85l-0.94,-0.66l-1.24,0.02l-1.48,-0.66l-0.63,-1.81l-1.89,-0.7l-0.44,0.3l-0.03,0.51l0.82,0.66l-0.61,0.3l-0.89,-0.34l-0.35,0.29l-0.04,0.48l0.55,0.9l-1.08,0.68l0.15,2.33l-1.06,0.65l0.0,0.82l-0.16,0.36l-0.26,-0.99l-1.61,0.19l-1.41,-1.65l-0.49,-0.07l-1.67,1.49l-1.57,0.69l-1.07,2.86l-0.82,-1.05l-2.8,-0.74l-1.11,-0.59l-1.08,-0.17l-1.76,0.92l-0.64,-1.0l-0.58,-0.18l-0.53,0.56l0.65,1.82l-0.33,0.82l-0.29,0.09l-0.03,-1.15l-0.43,-0.39l-2.04,0.81l-1.42,-0.81l-0.84,0.01l-0.48,0.95l0.72,1.52l-0.49,0.73l-1.16,-0.38l-0.08,-0.53l-0.52,-0.42l0.54,-0.62l-0.35,-3.04l0.95,-0.78l-0.08,-0.59l-0.43,-0.22l0.68,-0.45l0.25,-0.61l-1.18,-1.43l0.45,-1.15l0.33,0.19l1.38,-0.55l0.33,-1.77l0.55,-0.39l0.44,-0.91l-0.06,-0.81l1.52,-1.06l0.06,-0.69l-0.42,-0.9l0.57,-0.85l0.13,-1.27l0.87,-0.51l0.39,-1.89l-1.09,-2.5l0.05,-1.89l-0.94,-0.89l-0.62,-1.47l-1.05,-0.76l-0.04,-0.57l0.92,-1.38l-0.64,-2.21l1.27,-1.31l-6.7,-49.86Z",
            "name": "Indiana"
        },
        "US-IL": {
            "path": "M540.74,227.63l0.87,-0.35l0.37,-0.67l-0.24,-2.29l-0.74,-0.91l0.15,-0.4l0.71,-0.69l2.42,-0.98l0.71,-0.64l0.63,-1.66l0.17,-2.07l1.64,-2.45l0.27,-0.93l-0.04,-1.2l-0.59,-1.92l-2.24,-1.84l-0.12,-1.74l0.66,-2.35l0.45,-0.37l4.6,-0.86l0.81,-0.4l0.82,-1.11l2.55,-1.0l1.43,-1.55l0.38,-3.24l1.42,-1.45l0.29,-0.74l0.32,-4.32l-0.77,-2.12l-4.03,-2.42l-0.28,-1.47l-0.48,-0.81l-3.65,-2.42l44.59,-4.88l0.0,2.62l0.58,2.56l1.39,2.45l1.31,0.92l0.77,2.56l1.27,2.67l1.43,1.81l6.8,50.64l-1.21,1.12l-0.1,0.69l0.68,1.71l-0.83,1.07l-0.03,1.1l1.2,1.07l0.56,1.38l0.9,0.8l-0.09,1.77l1.07,2.26l-0.27,1.46l-0.87,0.56l-0.21,1.45l-0.59,0.92l0.33,1.18l-1.48,1.12l-0.22,0.42l0.29,0.68l-0.93,1.16l-0.3,1.17l-1.64,0.68l-0.62,1.65l0.16,0.8l0.97,0.8l-1.27,1.13l0.4,0.75l-0.47,0.23l-0.12,0.55l0.43,2.88l-1.15,0.2l0.08,0.45l0.9,0.75l-0.47,0.17l-0.02,0.64l0.83,0.28l0.04,0.41l-1.3,1.94l-0.24,1.17l0.6,1.2l0.7,0.63l0.37,1.05l-3.31,1.23l-1.19,0.81l-1.24,0.25l-0.77,1.0l-0.17,2.02l1.71,2.75l0.07,0.52l-0.53,1.17l-0.97,0.03l-6.33,-2.34l-1.08,-0.07l-1.57,0.64l-0.67,0.71l-1.43,2.91l0.06,0.66l-1.19,-1.18l-0.79,0.14l-0.35,0.47l0.57,1.1l-1.22,-0.76l-0.02,-0.67l-1.61,-2.16l-0.4,-1.1l-0.76,-0.36l-0.05,-0.47l0.94,-1.33l0.2,-1.02l-0.33,-1.0l-1.45,-1.98l-0.48,-3.12l-2.27,-0.96l-1.56,-2.09l-1.96,-0.79l-1.73,-1.3l-1.56,-0.13l-1.83,-0.93l-2.33,-1.73l-2.35,-2.39l-0.37,-1.91l2.35,-6.75l-0.25,-2.28l0.98,-2.03l-0.39,-0.84l-2.67,-1.41l-2.6,-0.64l-1.28,0.45l-0.86,1.43l-0.91,0.16l-1.3,-1.86l-0.43,-1.49l0.15,-0.86l-0.54,-0.9l-0.29,-1.62l-0.83,-1.33l-0.94,-0.88l-4.12,-2.46l-1.01,-1.61l-4.55,-3.44l-0.74,-1.87l-1.05,-1.18l-0.04,-1.57l-0.97,-1.45l-0.76,-3.48l0.09,-2.89l0.6,-1.26ZM586.47,296.15l0.05,0.06l0.03,0.03l-0.05,-0.0l-0.04,-0.08Z",
            "name": "Illinois"
        },
        "US-AK": {
            "path": "M87.36,534.18l0.86,0.09l0.07,0.37l-1.08,0.71l0.14,-1.18ZM89.85,534.33l0.63,-0.13l0.31,-0.6l1.87,-0.44l2.32,0.02l1.55,0.61l0.79,0.71l-0.15,1.95l0.57,0.86l0.73,-0.34l0.0,-0.66l1.02,1.67l-0.98,-0.46l-0.45,0.39l-0.16,-0.54l-1.1,-0.01l-0.39,-0.32l-1.03,0.22l-0.89,-0.2l-0.29,-0.45l0.36,-0.29l0.69,0.74l0.47,-0.03l0.21,-0.45l-0.51,-1.49l-0.96,-0.54l-1.1,0.3l-0.64,0.75l-0.83,0.25l-0.71,-0.22l-1.73,0.45l0.41,-1.76ZM99.7,537.93l0.76,-0.58l-0.33,-1.69l1.69,-1.0l3.38,-0.21l2.27,0.65l0.55,-0.3l0.82,0.25l0.67,0.92l0.71,-0.02l0.94,-1.56l2.41,-0.81l0.85,0.24l1.86,-0.43l-0.15,0.41l0.4,0.58l1.07,0.29l0.58,-0.9l-0.6,-0.34l0.03,-0.84l2.21,-2.31l0.89,0.03l0.44,0.69l0.67,-0.24l-0.05,-0.61l-0.83,-0.87l0.25,-0.55l0.9,-0.58l2.94,-0.35l-0.12,-0.56l2.43,-1.61l0.2,-0.48l-0.44,-0.28l-2.22,0.96l-4.62,-0.83l0.21,-1.03l-0.26,-0.66l0.93,-0.79l0.47,0.57l-0.18,1.13l0.91,-0.0l0.2,-0.69l0.04,-0.79l-0.74,-1.1l0.09,-0.77l-0.68,-0.24l-0.33,0.83l-0.54,0.27l-0.61,-0.64l-0.8,0.95l-0.87,0.26l-0.57,1.75l-0.58,0.56l-0.16,-0.77l0.5,-4.0l-0.57,-0.63l-1.01,0.33l0.05,-0.47l-0.5,-0.78l0.4,-0.99l-0.13,-0.42l-2.58,-0.12l-0.7,-0.36l-0.95,0.0l-0.37,-0.5l-1.14,0.69l-0.75,-0.17l-0.17,-0.56l1.1,-0.08l0.03,-0.82l0.5,-0.72l1.33,-0.18l0.03,-0.76l-1.07,-0.66l0.16,-0.38l0.86,-0.73l1.21,-0.07l0.4,-0.38l1.06,-4.39l1.31,-1.41l-0.66,-0.67l1.94,-1.13l1.4,0.08l0.44,-0.51l-0.66,-0.45l-0.28,-0.68l-2.44,1.23l-1.93,0.34l-0.17,0.47l0.35,0.75l-0.79,0.8l-0.27,-0.33l-2.03,-0.22l-1.8,-0.94l-1.17,-1.3l0.09,-0.39l0.64,-0.07l-0.3,-1.76l0.11,-1.45l0.42,-0.68l-0.63,-0.29l-0.35,-1.04l0.76,-0.18l0.32,-0.43l-0.3,-0.62l-0.54,-0.17l1.35,0.03l0.49,-0.47l0.67,-0.05l0.02,0.53l0.78,1.02l-1.55,0.88l0.32,0.52l1.01,-0.16l0.4,0.22l1.0,-0.31l-0.7,1.16l0.68,0.73l1.49,-0.04l0.65,-0.59l-0.14,-0.9l0.47,-0.37l0.03,-1.22l-0.55,-0.28l-1.19,0.2l-1.39,-1.18l0.07,-0.57l-0.76,-1.04l0.78,0.09l0.51,-0.35l-0.15,-0.47l-0.73,-0.52l0.6,-0.48l0.01,-0.7l1.17,-0.29l0.43,0.25l0.8,-0.11l0.67,-0.43l-0.02,-0.53l-0.63,-0.27l-0.66,0.28l-1.53,-0.1l-1.83,0.74l-0.5,0.58l0.67,-0.97l-0.22,-1.39l0.64,0.03l0.45,-0.5l-0.09,-0.88l-0.39,-0.37l1.09,0.44l0.4,-0.45l-0.43,-0.96l1.51,0.82l0.56,-1.46l0.63,-0.43l3.6,-0.95l0.39,1.02l-0.41,0.26l0.14,0.45l1.14,0.1l0.29,-0.37l-0.13,-1.06l1.7,-0.24l0.22,-0.67l-1.21,-0.15l0.59,-0.27l0.26,-0.73l0.88,-0.42l1.11,0.98l0.48,-0.67l-0.25,-0.72l0.64,-0.07l0.94,0.55l0.41,0.86l-0.15,0.5l-1.08,0.24l-0.1,0.49l1.56,0.15l-0.07,0.5l1.04,0.75l2.83,-0.14l1.67,-0.57l0.1,0.54l1.86,1.24l1.6,0.59l2.13,-0.53l0.89,-0.67l1.68,-3.33l0.16,-1.99l0.77,0.39l1.39,-0.39l0.62,-0.63l0.11,-1.74l0.51,-0.4l-0.22,-0.39l-0.76,-0.38l-1.4,0.54l-0.6,-1.04l-4.46,0.26l-0.15,-2.27l-1.41,-0.11l-2.37,-2.26l-0.92,-0.12l-0.7,-0.73l-0.82,0.16l-1.63,-2.46l-0.75,-1.53l0.14,-0.58l0.75,-0.35l0.49,-0.79l-0.27,-1.07l0.24,-0.52l0.51,0.22l0.99,-0.43l0.88,0.96l0.51,-0.41l-0.78,-1.9l-1.93,-2.48l-0.54,-2.31l0.87,0.04l0.87,0.54l1.14,-0.63l0.22,0.55l0.54,0.22l1.01,0.04l1.02,-0.39l1.57,0.23l0.08,0.66l0.76,0.9l1.11,0.4l0.53,-0.4l-0.39,-1.23l0.25,-0.04l1.65,0.29l0.26,0.6l0.64,0.16l1.88,0.02l1.32,0.83l0.18,0.61l-1.07,0.58l-0.48,0.71l-1.25,-0.2l-0.08,0.66l0.52,0.44l-0.04,1.08l1.63,1.62l1.04,0.51l-0.32,0.66l1.84,0.92l0.28,1.26l0.49,0.2l2.21,-1.28l0.36,0.87l-0.45,0.13l-0.08,0.49l0.34,0.34l0.57,-0.02l0.94,-0.75l0.19,-1.13l-0.53,-1.05l0.53,0.03l0.58,2.0l1.49,0.84l0.77,-0.22l1.11,-1.85l-0.16,-0.31l-1.19,-0.35l-0.24,-0.94l-0.88,-0.51l-0.51,-0.09l-0.69,0.4l-0.2,-0.22l-0.08,-1.63l1.0,-0.81l0.97,0.2l0.43,-0.52l-0.5,-1.34l-1.05,-0.63l0.35,-1.07l-0.62,-0.48l-0.96,0.61l-2.2,-2.68l1.04,-1.59l0.69,-2.57l-0.68,-5.72l-0.74,-1.55l-0.08,-2.11l1.75,-1.03l1.6,-1.71l2.49,2.21l2.11,1.2l1.43,0.3l1.51,-0.09l2.59,-0.71l2.6,-2.01l0.17,-0.45l2.11,-0.42l1.62,-0.75l0.8,0.57l1.16,-0.06l1.84,1.0l2.9,-0.57l-0.46,0.31l0.23,0.44l-0.72,0.37l0.2,2.28l0.49,-0.11l1.04,-1.84l1.02,0.46l0.85,-0.08l-0.07,-0.72l-0.97,-0.6l0.21,-0.91l1.23,-0.29l0.16,1.55l0.45,-0.0l0.24,-0.34l0.68,0.07l0.46,0.48l2.53,1.0l2.76,-0.39l2.42,-1.05l0.06,0.74l0.64,0.58l-0.31,0.27l0.14,0.59l0.99,0.51l-0.16,0.38l-0.75,0.22l-0.83,-0.31l-0.6,0.19l-0.28,0.66l0.17,0.38l-0.54,0.69l0.23,0.62l0.74,-0.27l0.96,0.29l1.05,-0.76l0.95,0.43l0.6,-0.41l0.08,0.63l-1.01,0.44l0.05,1.19l0.75,0.52l0.01,0.63l0.62,0.2l1.03,-0.36l0.71,0.57l0.94,0.17l0.75,1.66l0.74,-0.17l0.23,0.34l-1.14,0.49l-0.32,0.63l-0.62,0.16l-0.15,0.49l0.34,0.45l1.51,0.7l-0.62,0.26l-0.03,0.62l1.22,0.9l0.27,0.79l0.36,0.22l0.55,-0.41l1.06,0.38l0.2,-0.18l0.25,1.14l1.78,0.16l1.45,0.93l1.2,1.77l-0.05,0.81l1.01,0.25l0.51,0.78l-0.19,0.45l0.29,0.53l1.42,1.32l0.89,0.25l2.21,1.58l0.86,2.08l0.9,0.7l1.13,0.58l0.84,-0.17l0.4,0.22l0.04,0.55l1.4,-0.34l0.81,0.4l-0.03,0.31l0.54,0.37l0.38,-0.1l0.76,0.96l0.85,2.66l0.87,0.8l0.3,1.3l0.95,0.33l-33.98,70.24l0.13,0.48l1.32,1.32l0.79,-0.15l1.08,1.34l1.84,-0.4l1.67,0.65l-1.13,1.7l0.36,1.08l0.77,0.97l-0.07,1.25l1.95,5.3l-0.61,2.65l0.55,0.37l1.62,-0.48l0.04,0.26l-1.08,0.71l0.29,0.55l0.75,-0.24l0.73,0.58l0.24,1.45l-0.31,0.03l-0.1,0.46l0.22,0.36l0.92,0.25l-0.26,0.51l0.39,0.46l-0.13,0.52l-0.95,-1.28l-0.51,-0.03l-0.8,0.52l-0.19,-0.6l-0.93,-0.56l-0.86,-1.68l0.26,-0.0l0.25,-0.73l-0.84,-0.29l-0.39,-1.0l0.08,-1.24l-1.0,-2.03l0.15,-0.7l-0.98,-0.44l-2.64,-3.93l1.32,-0.63l-0.4,0.78l0.27,0.46l0.43,0.08l0.44,-0.35l0.53,-1.48l0.69,0.71l0.41,0.04l0.32,-0.36l-0.4,-0.84l-0.65,-0.42l-0.46,-1.73l-0.44,-0.2l-1.96,1.12l-1.88,0.06l-1.36,-0.87l-1.39,-1.72l0.51,-0.38l0.32,-0.95l-0.37,-1.07l-0.54,-0.07l-0.45,0.84l-0.66,0.01l-0.74,-0.96l-2.63,-2.07l-4.34,-1.23l-0.27,-1.21l0.21,-0.51l-1.48,-0.95l-0.44,-1.09l0.8,-0.67l0.32,-0.81l1.04,-0.28l0.17,-0.64l-0.96,-0.3l-3.08,1.24l-0.12,-0.66l-0.68,-0.71l1.25,-0.96l-0.33,-0.49l-0.45,0.03l-0.32,-0.71l0.18,-0.56l-0.3,-1.13l-0.47,-0.26l-0.52,0.22l-0.37,-0.34l0.24,-0.86l1.49,0.35l0.4,-0.44l-0.08,-0.47l-1.31,-0.84l-1.57,0.42l-0.47,-0.51l-1.12,-0.32l0.44,-1.22l-0.51,-0.36l0.34,-0.87l-0.36,-0.34l-1.68,0.74l-0.36,-0.43l-1.2,-0.12l-0.7,0.58l0.13,0.9l-1.47,-0.23l-0.8,0.99l0.1,0.52l0.75,0.12l-0.12,0.24l-1.26,0.35l-0.34,0.65l0.41,0.33l0.83,-0.19l0.35,0.72l-0.55,0.51l-0.59,-0.03l-0.59,0.56l-0.22,0.87l-0.91,0.34l-1.02,-0.83l0.1,-0.7l-0.95,-0.14l0.18,-0.79l-0.53,-0.37l-0.99,1.08l-0.38,-0.52l-0.51,-0.08l-1.04,0.81l-0.69,-0.33l-0.29,0.57l-0.55,-0.48l-1.11,0.56l-0.13,-0.35l-0.86,-0.01l-0.38,0.23l0.01,0.46l-1.69,0.41l-0.81,-0.77l-0.57,0.25l-1.35,-0.26l-0.37,-0.87l0.76,-0.34l0.6,0.01l0.64,0.78l0.5,-0.04l0.2,-0.57l0.76,0.07l1.59,-0.8l0.3,-0.47l-0.19,-0.43l-2.39,-0.04l-0.5,-1.06l1.51,-1.29l1.74,-0.62l0.8,-0.87l0.46,-0.1l0.8,-1.11l0.24,-1.21l1.19,0.24l2.98,-0.4l0.14,1.0l0.52,0.51l1.2,0.2l2.13,2.39l0.48,-0.33l-0.02,-0.92l-1.45,-1.55l-0.6,-1.46l1.86,-0.8l1.94,0.15l0.15,-0.57l-0.75,-0.62l-1.47,-0.26l-0.98,0.33l-0.55,0.58l-0.76,-0.78l-0.55,-0.08l0.23,-0.38l-0.2,-0.67l-1.25,0.38l-1.36,-0.1l-0.92,0.54l-1.52,-0.4l-1.55,0.47l-0.35,0.71l-1.1,-0.03l-1.76,0.61l-0.57,0.83l-0.6,0.29l-0.93,-0.24l-0.61,-1.09l-0.77,-0.06l-0.26,0.26l0.43,0.59l0.36,1.96l-0.85,0.46l-1.92,-0.78l-0.52,0.26l0.04,0.66l-0.37,-0.91l-0.74,0.66l-0.19,-0.37l-0.85,0.2l-0.12,0.56l-0.75,-0.38l-0.12,0.91l-1.2,-0.34l-0.65,0.34l-0.65,0.8l-0.75,0.29l-0.26,1.16l1.8,0.98l0.51,1.62l-0.81,0.56l-0.99,0.2l-0.85,-0.45l-0.94,0.51l-0.66,-0.11l-0.37,0.68l-1.22,-0.04l-0.4,0.63l-0.42,-0.4l-0.43,0.41l-1.25,0.09l-0.97,-0.58l-1.0,0.59l-0.88,-0.1l-0.48,0.3l-0.39,-0.63l-0.39,-0.0l-0.65,0.67l-0.41,-0.17l-0.34,0.36l-0.83,-0.53l-0.75,0.35l-2.2,-0.01l-0.54,0.42l0.15,1.07l-0.54,0.16l-1.08,-0.51l-0.53,0.36l-0.19,-0.26l-1.8,0.33l-0.14,-0.63l-0.41,-0.25l-0.73,0.46l-0.68,-0.0l-0.2,0.35l-0.31,-0.54l-0.54,-0.13l-1.34,-0.02l-0.65,0.34l-0.95,-0.36l-1.62,0.44l-0.28,0.71l-0.34,-0.03l-0.8,0.73l-2.44,-0.62l-0.46,-0.57l-0.83,0.0l-0.67,-0.68l-1.22,-0.21l-0.73,0.25ZM106.4,539.35l-0.02,0.01l-0.0,0.03l0.02,-0.04ZM106.43,539.32l0.01,-0.01l-0.01,0.0l-0.0,0.01ZM111.62,518.09l-0.6,0.34l-0.09,-0.01l0.34,-0.36l0.35,0.02ZM135.54,477.36l-0.14,0.2l-0.03,0.01l0.06,-0.2l0.11,-0.01ZM165.25,532.53l-0.76,-0.12l1.57,-0.88l-0.71,0.64l-0.1,0.36ZM161.82,535.36l0.25,0.0l0.0,0.01l-0.28,0.13l0.03,-0.14ZM158.22,525.53l0.0,-0.0l-0.0,0.0l-0.0,-0.0ZM157.41,525.31l-0.02,-0.01l0.0,-0.01l0.01,0.02ZM141.51,529.3l0.28,0.11l0.27,0.23l-0.57,0.16l0.02,-0.5ZM130.96,537.03l0.02,0.01l-0.03,0.02l0.0,-0.03ZM107.99,539.38l0.13,-0.03l0.06,0.1l-0.11,0.04l-0.07,-0.1ZM105.81,540.76l0.01,0.03l-0.02,0.0l0.0,-0.03l0.01,-0.0ZM98.05,537.95l0.0,0.06l-0.04,0.0l0.04,-0.07ZM189.71,556.2l0.09,-0.87l0.26,-0.09l0.03,0.48l-0.38,0.49ZM196.78,565.52l1.79,0.06l0.8,-0.74l0.4,-0.91l0.54,-0.0l0.6,-0.47l0.12,-0.55l2.96,-0.05l0.85,1.94l-0.58,0.67l-0.01,1.59l0.83,0.81l0.14,0.93l0.38,0.34l-0.04,1.68l1.31,2.12l0.14,0.96l-1.07,-0.14l-1.5,1.57l-0.42,-1.04l-0.8,-0.71l-0.04,-1.75l0.51,-1.36l-0.65,-0.5l0.52,-2.26l-0.06,-1.21l0.65,-1.51l-0.68,-0.27l-0.56,0.83l-0.66,-0.04l-0.01,0.58l-0.37,0.38l0.23,1.2l-0.43,0.98l-0.54,4.87l-0.33,0.4l-0.23,-0.51l0.12,-1.48l-0.26,-0.33l-0.64,0.26l-0.81,-0.2l0.44,-0.36l0.25,-0.95l-0.18,-1.42l0.94,0.09l0.44,-0.41l-0.08,-0.36l-0.92,-0.4l0.04,-0.97l-0.59,-0.35l-0.89,1.17l0.35,0.35l-0.2,0.26l-0.04,-0.39l-0.49,-0.25l0.3,-0.64l-0.28,-0.55l-0.84,-0.74l-0.25,0.33l-0.2,-0.53ZM207.21,574.53l0.41,1.04l-0.25,0.72l0.45,1.73l1.02,8.09l-0.6,0.55l0.03,0.61l0.79,0.6l-0.55,0.81l0.04,0.5l0.56,0.6l-0.25,1.47l0.34,0.45l0.87,0.27l1.35,1.98l1.13,0.85l0.3,0.83l0.53,0.45l0.04,0.84l1.25,0.91l-0.21,0.8l-1.04,0.96l-0.51,3.6l-2.74,2.27l-0.45,-0.13l0.0,-0.97l-0.73,0.19l-0.09,-0.51l0.87,0.2l2.09,-1.6l-0.23,-0.63l-0.45,0.06l-0.38,-0.5l-0.52,0.14l0.95,-3.63l-0.63,-1.24l0.53,-0.19l0.53,-0.87l-0.44,-0.25l-1.49,0.51l-0.56,-0.3l-2.08,0.29l0.46,-0.46l0.3,-1.03l1.43,0.46l0.69,-0.35l-0.04,-0.49l-1.57,-0.61l0.08,-0.93l-0.66,-0.58l-0.35,-1.15l0.33,-0.41l-0.17,-0.67l-0.35,-0.02l0.84,-1.18l-0.39,-0.29l-0.68,0.21l-0.47,-1.07l0.37,-0.23l0.24,-1.12l-0.4,-0.33l-0.62,0.12l-0.34,-1.11l-1.14,-0.3l0.13,-0.23l1.54,0.2l0.56,-0.36l-0.22,-0.67l-0.94,-0.06l0.24,-0.68l-0.49,-0.27l0.09,-0.26l0.62,-0.0l0.63,1.03l0.6,-0.15l-0.58,-1.88l-0.72,-1.0l0.18,-0.54l1.25,0.9l0.39,-0.66l-1.84,-1.3l0.04,-0.71l0.54,-0.78l-0.77,-0.32l-0.75,0.75l-0.1,-0.38l0.99,-1.98l0.49,-0.5l0.71,-0.12ZM208.9,604.79l-0.14,0.6l-0.04,-0.01l0.1,-0.48l0.08,-0.11ZM210.37,602.77l-0.57,0.31l-0.25,-0.22l-0.61,0.16l0.62,-0.53l0.81,0.28ZM206.97,596.06l-0.04,0.0l0.0,-0.01l0.04,0.01ZM206.76,596.37l0.19,0.71l-0.54,0.46l-0.46,-0.21l-0.24,0.87l-0.03,-1.0l0.77,-0.25l0.3,-0.58ZM205.35,581.23l-0.08,-0.02l-0.02,-0.09l0.1,0.11ZM174.62,442.02l0.16,-0.03l0.01,0.02l-0.12,0.04l-0.05,-0.03ZM149.15,463.88l-0.48,-0.68l0.25,-0.87l0.46,0.23l-0.22,1.31ZM139.58,480.84l-0.2,-0.16l-0.1,-0.17l0.02,-0.02l0.29,0.35ZM110.4,493.59l-0.04,0.0l-0.0,-0.01l0.04,-0.0l0.0,0.0ZM207.09,600.51l-0.38,-0.82l0.65,-0.29l-0.24,0.42l-0.04,0.69ZM206.1,600.69l-0.0,0.01l0.0,-0.01l0.0,0.0ZM207.6,599.25l0.1,-0.76l0.89,-0.35l0.53,-1.04l0.54,-0.04l0.3,2.36l-0.63,1.24l-0.28,0.19l-0.18,-0.34l0.21,-1.62l-0.4,-0.43l-0.61,0.72l-0.47,0.08ZM206.69,592.89l0.19,-0.29l0.56,0.44l-0.02,0.58l-0.73,-0.72ZM204.84,593.41l0.45,-0.35l0.02,0.49l1.0,0.44l-0.34,0.97l-0.26,0.09l0.16,-0.53l-0.38,-0.7l-0.66,-0.41ZM205.68,592.73l0.12,-0.12l0.05,0.06l-0.03,0.06l-0.14,0.0ZM205.02,590.02l0.06,-0.2l0.47,-0.43l-0.02,-0.41l0.06,-0.12l0.29,1.13l-0.85,0.04ZM202.22,585.03l1.33,0.87l0.51,0.99l0.58,0.17l0.23,-0.36l0.31,0.54l-0.52,1.44l-0.13,-1.28l-0.42,-0.49l-0.58,0.05l-0.22,0.89l0.24,0.51l-0.23,0.37l0.39,0.79l-0.2,0.16l-0.8,-0.56l-0.69,0.26l0.95,-2.73l-0.74,-1.63ZM204.11,591.3l0.32,-0.24l0.71,0.23l-0.52,0.7l-0.51,-0.69ZM201.15,595.61l1.09,-0.64l0.15,-0.76l-0.29,-0.08l0.28,-0.75l1.23,1.05l0.38,2.22l-0.78,0.67l0.07,0.29l-0.79,0.31l-0.07,0.49l0.07,0.41l0.53,0.0l0.37,0.59l0.83,0.45l-0.77,0.87l0.2,0.39l0.69,0.17l-0.7,0.53l-0.49,0.15l-0.24,-0.48l-0.3,-2.08l-0.55,0.05l0.09,-0.93l-0.46,-0.42l0.14,-0.54l-0.3,-0.23l0.87,-0.34l0.22,-0.65l-1.6,-0.27l-0.17,-0.19l0.34,-0.25ZM203.12,602.03l0.1,0.62l0.38,0.29l0.04,0.82l-0.34,0.35l-0.22,-0.12l0.22,-0.36l-0.34,-1.17l0.17,-0.43ZM203.35,597.92l0.0,0.0l-0.0,-0.0l0.0,-0.0ZM202.64,592.33l-0.2,-0.51l-0.91,-0.69l0.48,0.0l0.43,0.59l0.29,-0.26l0.16,0.59l-0.26,0.27ZM199.97,583.57l0.25,-0.56l0.45,-0.17l-0.03,-0.41l1.11,-0.23l-0.33,0.81l-1.46,0.55ZM202.63,581.99l-0.01,-0.02l0.01,0.0l0.0,0.02ZM202.5,581.14l-0.16,0.52l-0.5,0.27l-0.01,-0.56l-0.47,-0.33l0.6,-0.09l0.24,-0.62l-0.85,-0.29l-0.09,-0.31l0.71,-3.37l0.42,-0.42l0.9,0.5l-0.73,2.15l0.34,0.21l-0.02,1.42l0.4,0.49l-0.13,0.37l-0.51,-0.18l-0.16,0.25ZM203.26,574.86l0.1,0.02l0.05,0.13l-0.14,-0.13l-0.0,-0.02ZM200.55,588.29l-0.23,-0.35l0.1,-0.05l0.11,0.08l0.01,0.32ZM200.12,587.91l-0.07,-0.01l-0.0,-0.01l0.01,-0.0l0.07,0.02ZM200.37,586.97l-0.49,-0.66l1.11,-0.07l-0.09,0.69l-0.26,0.22l-0.28,-0.19ZM201.49,592.7l-0.08,-0.14l0.12,-0.03l-0.03,0.09l-0.01,0.07ZM200.64,592.73l-0.02,0.02l-0.16,0.03l0.09,-0.08l0.09,0.04ZM195.39,575.1l0.13,-0.1l0.59,1.07l0.58,-0.41l-0.42,-1.39l0.66,0.12l0.11,-0.88l0.2,0.31l0.55,0.02l0.48,-0.4l0.58,0.85l-1.06,0.03l-0.85,0.39l0.03,0.46l1.37,2.08l-0.08,0.72l0.81,0.48l0.82,-0.05l-0.38,1.5l-2.4,-3.56l-0.62,0.31l-0.22,0.62l0.41,0.79l-0.18,0.57l0.22,0.34l-0.29,0.13l-0.44,-1.29l0.31,-0.17l-0.91,-2.53ZM198.57,575.77l0.96,-0.49l1.13,1.07l-0.14,0.22l-0.34,-0.45l-0.61,-0.13l-0.17,0.55l0.26,0.64l-1.07,-1.41ZM197.4,579.96l0.52,-0.02l-0.02,0.3l0.7,0.53l0.05,2.61l-0.52,2.54l-1.28,2.94l-0.17,-1.99l1.01,-0.59l-0.25,-1.34l-0.54,-0.86l-0.51,-0.01l0.34,-0.57l0.9,-0.38l-0.1,-0.53l-0.52,-0.27l0.61,-0.35l-0.29,-1.24l-0.54,-0.23l0.52,-0.12l0.1,-0.43ZM195.81,580.52l-0.11,0.18l-0.0,-0.36l0.11,0.18ZM195.45,581.71l-0.18,0.24l-0.21,-0.02l0.06,-0.09l0.33,-0.12ZM166.89,538.83l0.06,-0.04l0.0,0.06l-0.06,-0.02ZM167.11,538.95l0.13,0.08l0.02,0.1l-0.16,-0.18ZM161.05,540.17l0.02,-0.05l0.3,0.02l0.37,-0.3l0.19,-0.01l-0.48,0.48l-0.4,-0.13ZM135.33,540.66l0.22,0.31l0.6,-0.08l0.0,-0.59l0.71,0.45l0.71,-1.09l0.33,0.1l-0.13,1.11l0.28,0.22l-0.63,0.48l-0.1,-0.77l-0.37,-0.01l-0.74,0.65l-0.1,-0.23l-0.65,0.25l-0.13,-0.81ZM138.62,541.16l-0.19,-0.04l0.14,-0.08l0.05,0.11ZM125.8,544.87l0.6,-0.15l0.09,0.05l-0.61,0.5l-0.08,-0.39ZM126.2,543.5l0.18,-0.98l-0.32,-0.49l1.09,-0.75l1.05,0.21l0.34,-0.31l0.75,0.43l-0.66,0.08l-0.0,0.49l0.42,0.33l-0.31,1.7l0.34,0.82l0.44,0.2l0.31,-0.36l-0.14,-0.65l0.36,-1.01l1.96,-0.34l0.62,0.46l0.93,-0.67l0.27,0.22l-0.23,0.69l0.26,0.39l0.48,-0.04l0.32,-0.45l1.1,0.14l-1.11,0.92l0.1,1.04l0.61,0.28l-0.64,0.25l-1.83,-1.74l-0.92,0.42l-0.02,0.66l-0.46,-0.44l-0.43,0.12l-0.28,0.54l-1.47,-0.4l-0.48,0.54l-0.22,-0.87l-0.79,-0.03l-0.44,-0.76l-1.18,-0.63ZM134.27,542.42l-0.01,-0.06l0.17,-0.06l0.0,0.05l-0.16,0.07ZM132.2,545.57l0.62,0.11l0.22,0.62l-0.32,-0.02l-0.52,-0.71ZM126.26,546.94l-0.15,0.05l-0.01,-0.01l0.06,-0.03l0.11,-0.0ZM131.32,541.84l-0.53,-0.58l0.79,-0.36l0.05,0.41l-0.32,0.53ZM105.81,462.39l0.24,-1.05l1.03,-0.57l-0.16,0.82l0.69,0.55l0.5,1.03l2.09,0.63l0.33,1.16l-0.71,0.85l0.91,1.52l-0.18,0.68l0.65,0.63l0.08,0.78l-0.88,-0.38l-1.23,0.14l0.06,-0.93l-0.42,-1.19l0.25,-0.53l-0.13,-1.07l-0.52,-1.72l-0.81,-0.64l-1.62,-0.23l-0.18,-0.48ZM111.34,469.47l0.68,0.23l0.32,0.49l-0.46,0.25l-0.54,-0.96ZM99.58,492.96l0.13,-0.45l1.35,1.34l0.79,-0.29l0.37,0.3l0.76,-0.06l-0.04,0.35l0.68,0.15l0.15,0.8l0.81,0.75l-1.01,1.05l-0.34,0.96l-1.09,-0.66l-0.43,0.09l-1.38,-1.29l-0.73,-3.04ZM95.47,539.48l0.12,-0.24l0.27,0.59l-0.2,-0.34l-0.19,-0.01ZM88.44,537.17l0.0,-0.02l0.03,0.0l-0.03,0.01ZM77.94,532.86l0.31,-0.91l1.11,0.21l1.83,-0.75l0.54,0.78l2.38,0.39l0.41,0.41l0.02,0.57l-0.53,1.12l-0.89,0.3l-2.06,-1.64l-1.25,-0.07l-0.67,0.35l-1.19,-0.77ZM72.06,531.33l0.05,-0.29l0.35,0.02l0.04,0.43l-0.43,-0.17ZM62.39,530.55l0.16,-0.01l0.12,0.09l-0.08,0.09l-0.2,-0.16ZM62.89,530.86l0.03,0.06l0.02,0.04l-0.11,-0.1l0.06,0.01ZM67.63,532.06l-0.61,-0.2l0.64,-0.13l0.42,-0.6l-0.85,-1.27l0.51,-0.42l0.98,0.67l-0.35,1.15l-0.73,0.8ZM66.48,531.55l-0.31,0.29l-0.03,0.08l0.13,-0.72l0.21,0.36ZM68.16,529.58l-0.03,-0.02l-0.0,-0.0l0.03,0.03ZM57.55,529.02l0.61,-0.61l0.64,0.01l0.57,0.51l-1.02,0.3l-0.8,-0.22ZM60.36,528.86l0.42,-0.72l0.69,-0.04l0.67,0.28l0.23,0.6l-0.36,0.32l-1.65,-0.44ZM34.78,515.5l0.04,0.03l-0.03,0.13l-0.02,-0.17l0.01,0.0ZM35.78,515.3l-0.02,-0.52l0.37,0.05l0.06,0.52l-0.41,-0.05ZM28.34,509.91l0.02,-0.08l0.04,-0.02l-0.01,0.1l-0.05,-0.01ZM24.83,509.43l0.48,-0.33l0.11,0.34l-0.32,0.12l-0.27,-0.14ZM23.14,507.45l0.09,0.02l-0.03,0.03l-0.06,-0.05ZM21.49,504.94l-0.1,0.01l0.06,-0.23l0.04,0.13l0.0,0.1ZM21.53,504.44l-0.09,0.14l-0.11,-0.6l0.21,0.2l-0.01,0.26ZM14.7,495.16l0.26,0.08l-0.03,0.22l-0.16,-0.02l-0.06,-0.27ZM1.42,466.34l0.45,-0.48l-0.24,-0.55l0.86,1.33l-0.28,0.17l0.12,0.42l-0.91,-0.89Z",
            "name": "Alaska"
        },
        "US-NJ": {
            "path": "M802.29,165.34l1.3,-1.54l0.97,-2.17l0.52,-1.44l0.1,-2.02l0.66,-1.34l0.92,-0.72l14.16,3.88l-0.35,5.94l-0.34,0.55l-0.23,-0.43l-0.69,0.12l-0.25,1.16l-0.75,0.97l0.14,1.4l-0.46,0.6l0.1,1.7l0.59,0.6l1.2,0.27l1.38,-0.45l2.3,0.2l0.95,6.79l-0.56,0.39l0.18,0.66l-0.6,0.94l0.46,0.57l-0.2,0.58l0.54,1.91l-0.46,1.98l0.11,0.6l0.62,0.62l-0.38,1.12l-0.49,0.45l-0.0,0.58l-0.92,1.13l0.02,0.51l-1.07,0.12l0.11,1.19l0.64,0.8l-0.81,0.56l-0.17,1.14l1.05,0.74l-0.31,0.29l-0.18,-0.44l-1.02,0.06l-0.43,1.49l-1.27,0.62l-0.19,0.44l0.46,0.55l0.79,0.05l-0.64,1.24l-0.25,1.48l-0.67,0.65l0.19,0.48l0.39,0.04l-0.88,1.55l0.08,0.93l-1.64,1.72l-0.13,-1.3l0.35,-2.41l-0.12,-0.85l-0.59,-0.8l-0.89,-0.26l-1.11,0.36l-0.82,-0.33l-1.51,0.89l-0.31,-0.69l-1.63,-0.92l-1.0,0.06l-0.66,-0.68l-0.7,0.08l-3.25,-1.94l-0.07,-1.7l-1.02,-0.91l0.47,-0.67l-0.0,-0.86l0.42,-0.83l-0.13,-0.72l0.5,-1.17l1.19,-1.16l2.59,-1.51l0.54,-0.86l-0.38,-0.83l0.49,-0.38l0.46,-1.42l1.23,-1.7l2.51,-2.23l0.18,-0.66l-0.48,-0.81l-4.29,-2.66l-0.76,-1.02l-0.9,0.25l-0.48,-0.32l-1.26,-2.4l-1.62,0.01l-1.03,-3.38l1.01,-1.02l0.35,-2.21l-1.88,-1.85Z",
            "name": "New Jersey"
        },
        "US-ME": {
            "path": "M899.41,43.59l-0.02,-0.3l0.01,-0.16l0.05,0.36l-0.04,0.1ZM836.53,56.79l0.85,-1.16l1.44,1.67l0.84,0.03l0.36,-2.12l-0.49,-2.18l1.7,0.33l0.72,-0.43l0.21,-0.52l-0.33,-0.69l-1.18,-0.45l-0.45,-0.61l0.17,-1.43l0.83,-2.03l2.04,-2.28l-0.01,-0.98l-0.53,-0.93l1.0,-1.65l0.36,-1.52l-0.23,-0.91l-1.02,-0.34l-0.09,-1.42l-0.41,-0.43l0.54,-0.97l-0.05,-0.63l-1.02,-1.25l0.1,-1.74l0.36,-0.64l-0.17,-0.97l1.19,-1.95l-1.07,-6.18l5.24,-19.07l2.24,-0.25l1.2,3.2l0.56,0.42l2.55,0.53l1.8,-1.76l1.66,-0.85l1.21,-1.74l1.25,-0.13l0.63,-0.48l0.22,-1.45l0.42,-0.3l1.36,0.03l3.7,1.38l1.16,0.96l2.38,1.03l8.77,22.67l0.65,0.64l-0.17,1.26l0.66,0.85l-0.08,1.52l-0.32,0.05l-0.23,0.66l1.73,1.1l1.79,0.19l0.82,0.4l1.88,-0.22l1.24,-0.65l0.35,0.85l-0.57,1.43l1.72,1.83l0.32,2.68l2.75,1.63l0.98,-0.12l0.45,-0.75l-0.07,-0.5l0.36,0.07l0.26,0.49l0.64,0.06l1.43,1.09l0.28,0.74l1.28,0.92l0.04,0.47l-0.52,-0.13l-0.38,0.41l0.19,0.77l-0.76,-0.14l-0.34,0.4l0.17,0.63l0.82,0.51l0.56,0.9l0.48,0.16l0.15,-0.88l0.38,-0.18l0.81,0.31l0.24,-0.83l0.34,0.4l-0.3,0.85l-0.52,0.19l-1.17,3.25l-0.63,-0.03l-0.31,0.44l-0.57,-1.04l-0.72,0.04l-0.3,0.51l-0.56,0.07l-0.01,0.49l0.59,0.83l-0.91,-0.44l-0.32,0.63l0.27,0.51l-1.2,-0.26l-0.36,0.3l-0.36,0.78l0.08,0.45l0.44,0.08l0.09,1.2l-0.37,-0.56l-0.54,-0.05l-0.38,0.45l-0.19,1.09l-0.5,-1.52l-1.14,0.03l-0.66,0.76l-0.34,1.48l0.6,0.61l-0.82,0.64l-0.7,-0.45l-0.72,1.04l0.11,0.64l1.0,0.61l-0.35,0.22l-0.09,0.82l-0.46,-0.2l-0.87,-1.79l-1.04,-0.44l-0.38,0.22l-0.45,-0.41l-0.56,0.64l-1.25,-0.17l-0.25,0.86l0.78,0.39l0.01,0.36l-0.51,-0.05l-0.55,0.41l-0.08,0.69l-0.51,-1.01l-1.17,-0.0l-0.15,0.65l0.53,0.86l-1.42,0.98l0.85,1.09l0.1,1.05l0.54,0.64l-0.97,-0.39l-0.95,0.23l-1.2,-0.4l-0.19,-0.9l0.74,-0.29l-0.09,-0.55l-0.43,-0.48l-0.67,-0.11l-0.3,0.33l-0.26,-2.35l-0.38,-0.21l-1.1,0.28l0.07,1.95l-1.82,1.94l0.03,0.5l1.27,1.44l-0.63,0.96l-0.14,3.85l0.79,1.39l-1.06,1.73l-0.8,-0.18l-0.44,0.93l-0.62,-0.05l-0.42,-1.14l-0.73,-0.2l-0.5,1.03l0.12,0.68l-0.44,0.6l0.15,2.39l-0.96,-0.98l0.12,-1.27l-0.25,-0.59l-0.81,0.3l-0.06,2.0l-0.44,-0.24l0.13,-1.54l-0.48,-0.39l-0.67,0.49l-0.73,3.03l-0.8,-1.94l0.16,-1.21l-0.4,-0.27l-0.46,0.21l-1.01,2.59l0.36,0.52l0.84,-0.16l0.98,2.05l-0.29,-0.58l-0.52,-0.22l-0.65,0.31l-0.06,0.64l-1.38,-0.08l-2.12,3.19l-0.51,1.86l0.3,0.59l-0.67,0.66l0.51,0.42l0.9,-0.23l0.37,0.9l-1.87,1.24l-0.13,1.03l0.68,1.35l-0.07,0.67l-0.77,1.3l-0.93,0.62l-0.53,1.29l0.46,1.54l-0.37,2.79l-0.8,-0.32l-0.41,0.6l-1.03,-0.73l-0.59,-1.83l-0.94,-0.35l-2.38,-1.93l-0.79,-3.41l-13.67,-35.15ZM863.74,81.23l0.09,0.25l-0.08,0.23l0.03,-0.28l-0.04,-0.2ZM865.15,81.42l0.47,0.69l-0.04,0.47l-0.32,-0.24l-0.11,-0.92ZM867.45,78.27l0.43,0.81l-0.16,0.15l-0.42,-0.18l0.15,-0.77ZM876.64,64.76l-0.14,0.2l-0.03,-0.23l0.17,0.03ZM872.82,75.11l0.01,0.02l-0.02,0.03l0.01,-0.05ZM898.0,42.46l-0.08,-0.13l0.12,-0.32l-0.04,0.39l-0.0,0.06ZM882.31,63.57l0.02,-1.16l0.4,-0.66l-0.18,-0.44l0.4,-0.5l0.62,-0.12l1.56,1.32l-0.48,0.65l-1.08,0.06l-0.26,0.44l0.58,1.28l-0.99,-0.16l-0.15,-0.56l-0.44,-0.16ZM883.2,66.79l0.09,-0.08l0.06,0.18l-0.03,-0.03l-0.12,-0.07ZM881.03,70.35l-0.02,-0.23l-0.05,-0.26l0.1,0.22l-0.03,0.27ZM878.94,66.19l0.61,0.39l-0.35,0.3l0.16,0.95l-0.4,-0.62l-0.04,-1.02ZM877.76,70.71l0.09,-0.01l0.47,-0.09l-0.24,0.45l-0.32,-0.36ZM876.6,69.4l0.31,-0.46l0.2,-0.05l-0.31,0.54l-0.2,-0.03Z",
            "name": "Maine"
        },
        "US-MD": {
            "path": "M741.62,219.86l-2.1,-9.87l19.84,-4.7l-0.65,1.27l-0.95,0.09l-1.54,0.82l0.16,0.69l-0.41,0.49l0.23,0.76l-1.76,0.52l-1.48,0.05l-1.12,-0.36l0.2,-0.35l-0.3,-0.49l-1.11,-0.29l-0.46,1.78l-1.61,2.82l-1.38,-0.37l-1.03,0.63l-0.4,1.24l-1.59,1.92l-0.36,1.03l-0.88,0.46l-1.3,1.86ZM761.64,204.73l36.89,-9.55l8.67,25.64l0.46,0.25l1.06,-0.22l8.17,-2.18l-0.9,0.52l0.32,0.64l0.52,0.0l0.38,0.74l0.52,-0.06l-0.37,1.93l-0.12,-0.26l-0.47,0.07l-0.72,0.86l-0.15,2.66l-0.6,0.2l-0.35,0.7l-0.01,1.64l-3.61,1.41l-0.44,0.7l-2.2,0.46l-0.56,0.65l-0.31,-1.05l0.5,-0.31l0.85,-1.83l-0.41,-0.5l-0.43,0.12l0.06,-0.48l-0.44,-0.41l-2.29,0.65l0.29,-0.58l1.15,-0.84l-0.18,-0.69l-1.36,-0.15l0.37,-2.2l-0.19,-1.01l-0.91,0.17l-0.52,1.75l-0.35,-0.67l-0.62,-0.06l-0.44,0.47l-0.49,1.37l0.54,1.0l-2.89,-2.07l-0.43,-0.18l-0.6,0.37l-0.74,-0.74l0.36,-0.82l-0.04,-0.83l0.75,-0.6l-0.08,-1.33l2.55,0.19l0.77,-1.49l-0.34,-1.4l-0.72,0.28l-0.27,1.28l-0.98,-0.23l-0.38,-1.04l-0.52,-0.27l-0.55,0.23l-0.22,-0.66l-0.63,0.09l0.99,-0.81l0.21,-1.04l-0.54,-0.54l-0.75,0.83l-0.21,-0.59l1.06,-0.92l-0.26,-0.65l-0.54,-0.07l-0.51,-0.73l-0.42,0.23l-0.52,-0.35l0.81,-1.02l-0.25,-1.01l0.82,-1.93l-0.08,-0.85l-0.46,0.02l-0.66,0.67l-0.56,-0.16l-0.48,0.46l-0.19,0.96l-0.95,-1.16l0.73,-3.42l0.59,-0.52l0.07,-0.73l3.89,-0.83l0.48,-0.41l-0.24,-0.67l-0.45,-0.06l-2.37,0.59l0.87,-1.53l1.43,-0.07l0.35,-0.5l-0.99,-0.65l0.42,-1.88l-0.63,-0.32l-0.47,0.39l-0.85,1.93l0.18,-1.97l-0.6,-0.34l-0.88,1.42l-1.41,0.36l-0.3,1.63l0.39,0.53l0.64,0.11l-1.43,1.91l-0.21,-1.61l-0.64,-0.41l-0.6,0.72l0.08,1.44l-0.85,-0.28l-1.15,0.65l0.03,0.71l1.01,0.24l-0.36,0.53l-0.83,0.23l-0.05,0.34l-0.45,-0.03l-0.34,0.65l1.2,1.18l-0.28,0.18l-1.53,-0.73l-1.32,0.49l0.17,0.69l0.82,0.09l1.27,1.17l1.49,0.55l0.1,0.26l-0.44,0.33l-1.37,0.52l-0.11,1.17l1.84,1.0l0.44,0.58l-0.64,-0.39l-1.04,0.3l0.21,0.64l0.92,0.45l-0.33,0.47l0.41,1.13l0.6,0.09l-0.62,1.24l0.14,0.42l0.63,0.63l1.32,4.09l2.85,2.49l-0.0,0.34l-0.38,0.54l-0.68,-1.2l-1.22,-0.2l-1.7,-0.83l-1.53,-3.56l-0.74,-0.66l-0.27,0.69l1.19,3.86l0.66,0.9l1.46,0.78l1.3,0.28l1.5,1.34l0.88,-0.33l0.38,1.29l1.48,1.42l0.11,1.05l-1.09,-0.65l-0.34,-1.21l-0.64,-0.44l-0.45,0.05l-0.12,0.44l0.27,0.76l-0.74,0.14l-0.63,-0.71l-1.16,-0.35l-1.53,0.03l-0.92,0.44l-0.55,-0.19l-1.02,-2.14l-1.27,-0.68l-0.46,0.15l0.01,0.48l1.2,1.94l-0.68,-0.11l-0.29,-0.49l-0.9,-0.38l-1.63,-2.54l-0.48,-0.13l-0.42,1.46l-0.26,-0.73l-0.61,-0.03l-0.4,0.45l0.33,0.72l-0.17,0.68l-0.64,0.59l-0.57,-0.24l-0.64,-1.81l0.25,-1.12l0.71,-0.38l0.19,-0.5l-0.36,-0.51l0.83,-0.52l0.2,-1.59l1.06,-0.36l0.06,-0.66l-0.33,-0.4l0.22,-0.42l-0.38,-0.36l-0.04,-0.68l1.25,-2.18l-0.14,-0.54l-2.73,-1.61l-0.55,0.15l-0.68,1.19l-1.82,-0.34l-1.1,-1.15l-2.96,-0.04l-1.25,-0.87l0.6,-1.34l-0.41,-0.96l-1.19,-0.28l-0.89,-0.63l-2.7,0.11l-0.36,-0.22l-0.12,-1.24l-1.04,-0.58l0.09,-1.18l-0.51,-0.28l-0.48,0.2l-0.24,-0.62l-0.5,-0.13l0.24,-0.8l-0.46,-0.57l-0.69,-0.11l-1.81,0.69l-2.23,-1.21ZM791.05,211.88l0.29,-0.01l0.9,0.19l-0.42,0.4l-0.78,-0.58ZM797.81,217.58l0.0,0.15l-0.12,-0.09l0.12,-0.06ZM804.09,224.84l-0.02,0.32l-0.21,-0.13l0.22,-0.19ZM808.08,228.18l-0.14,0.28l-0.12,0.07l0.01,-0.23l0.25,-0.12ZM798.56,219.94l-0.05,0.01l-0.02,0.01l0.05,-0.03l0.02,0.01ZM798.22,220.09l-0.23,0.54l-0.17,0.12l0.14,-0.59l0.27,-0.07ZM797.08,216.49l-0.59,0.32l-0.58,-0.41l0.02,-0.51l0.16,-0.23l0.68,0.29l0.31,0.54ZM795.42,212.64l-0.23,0.49l-0.8,0.4l0.15,-1.15l0.88,0.26ZM803.27,228.26l0.02,-0.03l0.06,0.04l-0.05,-0.01l-0.03,0.0Z",
            "name": "Maryland"
        },
        "US-AR": {
            "path": "M499.58,376.97l-1.49,-37.54l-4.53,-23.6l37.79,-2.7l39.13,-3.76l0.8,1.57l1.02,0.68l0.11,1.73l-0.77,0.56l-0.22,0.92l-1.42,0.93l-0.29,1.03l-0.83,0.54l-1.19,2.56l0.02,0.7l0.53,0.25l10.97,-1.52l0.87,0.91l-1.18,0.36l-0.52,0.95l0.25,0.49l0.84,0.39l-3.6,2.68l0.02,0.83l0.83,1.01l-0.59,1.14l0.62,0.95l-1.42,0.74l-0.11,1.43l-1.45,2.07l0.12,1.62l0.92,3.04l-0.14,0.27l-1.41,0.25l-0.5,1.71l-1.52,0.95l-0.04,0.51l0.8,0.89l0.05,0.63l-1.1,1.2l-2.02,1.13l-0.21,0.62l0.43,0.98l-0.19,0.26l-1.24,0.04l-0.42,0.67l-0.32,1.87l0.47,1.55l0.03,3.03l-1.27,1.09l-1.55,0.14l0.23,1.47l-0.21,0.48l-0.93,0.25l-0.59,1.75l-1.49,1.19l-0.02,0.93l1.4,0.75l-0.02,0.68l-1.24,0.3l-2.24,1.23l0.03,0.67l0.99,0.8l-0.45,1.13l0.54,1.36l-1.09,0.61l-1.9,2.56l0.52,0.7l1.0,0.48l0.01,0.56l-0.99,0.29l-0.42,0.64l0.51,0.83l1.64,0.99l0.07,1.74l-0.59,0.98l-0.09,0.84l1.35,0.78l0.51,2.15l-1.09,1.01l0.07,2.1l-25.96,2.35l-25.72,1.93l-0.86,-11.43l-1.19,-0.85l-0.9,0.17l-0.83,-0.35l-0.93,0.39l-1.23,-0.33l-0.56,0.71l-0.47,0.01l-0.49,-0.48l-0.83,-0.14l-0.63,-0.98Z",
            "name": "Arkansas"
        },
        "US-MA": {
            "path": "M877.89,135.16l1.19,-0.37l0.84,-1.13l0.64,0.61l-0.21,0.43l-2.46,0.46ZM820.66,120.4l29.96,-8.42l1.51,-1.81l0.33,-1.47l0.94,-0.36l0.6,-1.04l1.16,-1.06l1.35,-0.12l-0.43,1.05l1.03,0.3l0.23,1.53l1.17,0.53l-0.06,0.32l0.39,0.27l1.31,0.16l-0.16,0.55l-2.27,1.81l-0.03,1.07l0.45,0.15l-1.09,1.4l0.24,1.06l-1.0,0.97l0.6,1.39l1.4,0.42l0.51,0.61l1.35,-0.59l0.32,-0.6l1.2,0.07l0.8,0.45l0.24,0.67l1.8,1.33l-0.06,1.23l-0.55,0.55l0.13,0.6l1.23,0.63l1.72,-0.26l0.69,1.17l0.23,1.12l0.9,0.66l1.33,0.38l1.47,-0.15l0.43,0.37l1.05,-0.25l2.89,-2.37l0.81,-1.12l0.54,0.01l0.58,1.82l-3.31,1.56l-0.93,0.83l-2.74,1.02l-0.47,1.63l-1.92,1.39l-0.84,-2.58l0.1,-1.33l-0.55,-0.3l-0.49,0.39l-0.93,-0.09l-0.3,0.51l0.25,0.9l-0.25,0.79l-0.4,0.07l-0.62,1.1l-0.61,-0.19l-0.49,0.49l0.23,1.83l-0.89,0.88l-0.64,-0.78l-0.47,0.02l-0.1,0.55l-0.26,0.04l-0.72,-1.98l-1.02,-0.34l0.42,-2.47l-0.21,-0.39l-0.77,0.41l-0.28,1.46l-0.69,0.21l-1.41,-0.61l-0.8,-2.07l-0.8,-0.21l-0.79,-2.11l-0.49,-0.23l-6.11,2.08l-0.3,-0.15l-14.8,4.4l-0.28,0.51l-0.47,-0.28l-0.86,0.18l-9.52,2.5l-0.25,-0.17l-0.46,-14.49ZM860.78,109.92l-0.02,-0.36l-0.15,-0.47l0.51,0.21l-0.35,0.62ZM876.52,122.22l-0.12,-0.41l0.25,0.34l-0.13,0.07ZM875.49,120.55l-0.78,0.01l-0.55,-1.17l0.56,0.43l0.77,0.73ZM871.66,119.08l-0.07,0.13l-0.08,-0.06l0.15,-0.07ZM872.23,134.46l0.01,-0.02l0.01,0.03l-0.02,-0.01ZM867.51,137.26l0.27,-0.09l0.16,-0.13l-0.13,0.36l-0.29,-0.15ZM868.23,136.59l0.37,-1.35l0.84,-1.19l0.17,0.25l0.46,-0.12l0.35,0.51l0.7,-0.02l0.18,0.36l-2.1,0.76l-0.98,0.79Z",
            "name": "Massachusetts"
        },
        "US-AL": {
            "path": "M609.82,337.31l25.25,-3.08l19.46,-2.89l14.29,42.72l0.8,1.38l0.22,1.04l1.18,1.57l0.61,1.85l2.26,2.46l0.94,1.78l-0.1,2.12l1.81,1.11l-0.17,0.73l-0.64,0.11l-0.15,0.7l-0.98,0.85l-0.21,2.28l0.26,1.47l-0.76,2.29l-0.13,1.83l1.13,2.92l1.22,1.5l0.54,1.59l-0.05,5.01l-0.25,0.81l0.5,2.02l1.36,1.15l1.16,2.05l-47.86,7.28l-0.41,0.61l-0.06,2.99l2.67,2.73l2.01,0.95l-0.33,2.7l0.57,1.6l0.43,0.39l-0.94,1.7l-1.24,1.01l-1.14,-0.75l-0.34,0.49l0.67,1.46l-2.83,1.07l0.29,-0.64l-0.45,-0.86l-1.0,-0.76l-0.1,-1.11l-0.57,-0.21l-0.52,0.61l-0.32,-0.1l-0.9,-1.52l0.4,-1.68l-0.99,-2.2l-1.33,-0.64l-0.31,-0.89l-0.56,-0.17l-0.36,0.61l0.15,0.34l-0.76,3.11l0.01,5.1l-0.6,0.0l-0.25,-0.71l-2.23,-0.43l-1.65,0.32l-5.64,-31.91l-1.25,-65.89l-0.02,-0.37l-1.08,-0.62l-0.69,-1.0Z",
            "name": "Alabama"
        },
        "US-MO": {
            "path": "M469.23,227.92l24.75,-0.8l18.97,-1.48l22.14,-2.65l0.42,0.34l0.4,0.89l2.44,1.61l0.29,0.73l1.21,0.85l-0.5,1.34l-0.09,3.17l0.79,3.59l0.95,1.41l0.03,1.56l1.11,1.35l0.47,1.52l4.98,4.01l1.07,1.66l4.95,3.23l0.7,1.12l0.28,1.59l0.51,0.8l-0.17,0.68l0.48,1.78l0.98,1.6l0.77,0.72l1.03,0.15l0.83,-0.56l0.83,-1.39l0.58,-0.19l2.42,0.59l1.68,0.74l0.84,0.75l-0.96,1.92l0.27,2.24l-2.35,6.76l0.02,1.01l0.71,1.89l4.69,3.96l2.0,1.01l1.46,0.08l1.67,1.27l1.92,0.78l1.51,2.06l2.05,0.8l0.43,2.91l1.73,2.84l-1.09,1.91l0.19,1.37l0.75,0.32l2.34,4.17l1.94,0.89l0.54,-0.32l0.0,-0.64l0.88,1.08l1.08,-0.08l0.15,1.81l-0.37,1.06l0.54,1.56l-1.06,3.81l-0.52,0.08l-1.38,-1.1l-0.65,0.13l-0.78,3.3l-0.52,0.73l0.13,-1.04l-0.56,-1.07l-0.96,-0.19l-0.74,0.63l0.02,1.04l0.53,0.64l-0.04,0.69l0.59,1.31l-0.2,0.39l-1.2,0.39l-0.17,0.42l0.99,1.36l-1.69,0.37l-0.13,0.62l1.54,1.93l-0.89,0.74l-0.63,2.1l-10.64,1.47l1.05,-2.24l0.87,-0.61l0.18,-0.86l1.44,-0.95l0.25,-0.95l0.92,-0.95l-0.23,-2.25l-1.06,-0.74l-0.2,-0.75l-1.09,-1.16l-39.35,3.78l-37.83,2.71l-3.3,-57.22l-1.04,-0.62l-1.2,-0.02l-1.52,-0.71l-0.2,-0.92l-1.11,-1.27l-0.37,-1.52l-0.56,-0.09l-0.3,-0.55l-1.13,-0.65l-1.4,-1.8l0.73,-0.5l0.09,-1.22l1.12,-1.25l0.09,-0.78l1.02,0.15l0.56,-0.42l-0.21,-2.21l-1.02,-0.72l-0.33,-1.08l-1.17,-0.0l-1.31,0.95l-0.82,-0.69l-0.73,-0.16l-2.68,-2.3l-1.05,-0.27l0.13,-1.57l-1.32,-1.69l0.09,-1.0l-0.37,-0.36l-1.02,-0.17l-0.59,-0.84l-0.83,-0.26l0.07,-0.52l-1.24,-2.83l-0.0,-0.72l-0.4,-0.49l-0.85,-0.28l-0.05,-0.52ZM584.71,295.24l-0.1,-0.1l-0.07,-0.13l0.11,-0.01l0.06,0.24Z",
            "name": "Missouri"
        },
        "US-MN": {
            "path": "M443.94,70.88l-0.41,-1.38l0.05,-1.2l-0.48,-0.54l-1.37,-3.82l-0.01,-3.27l-0.47,-2.0l0.27,-1.14l-0.57,-2.35l0.73,-2.61l-2.07,-7.04l29.44,-1.27l0.46,-0.82l-0.4,-7.29l2.83,0.15l1.24,0.84l0.39,2.75l1.75,5.42l0.14,2.35l0.51,0.87l1.46,1.07l1.3,0.5l3.21,-0.37l0.39,0.87l0.54,0.38l5.23,0.03l0.38,0.24l0.54,1.61l0.72,0.62l4.25,-0.8l0.77,-0.66l0.07,-0.71l0.69,-0.36l1.73,-0.45l3.96,-0.03l1.42,0.71l3.38,0.67l-1.0,0.81l0.0,0.83l0.51,0.45l2.89,-0.07l0.53,2.12l1.59,2.33l0.71,0.05l1.03,-0.8l-0.05,-1.76l2.65,-0.47l1.44,2.19l2.01,0.8l1.53,0.18l0.54,0.58l-0.03,0.84l0.59,0.36l1.32,0.06l0.19,0.76l0.42,0.1l1.2,-0.22l1.12,0.22l2.2,-0.86l2.75,-2.6l2.47,-1.57l1.25,2.56l0.97,0.51l2.21,-0.68l0.87,0.36l5.95,-1.33l0.55,0.18l1.33,1.66l1.24,0.6l0.62,-0.01l1.6,-0.84l1.33,0.08l-0.92,1.04l-4.66,3.12l-6.31,2.87l-3.66,2.51l-2.13,2.52l-0.95,0.58l-6.56,8.77l-0.94,0.61l-1.06,1.57l-1.95,1.99l-4.15,3.59l-0.85,1.8l-0.54,0.44l-0.14,0.96l-0.77,-0.01l-0.46,0.51l1.03,12.26l-0.79,1.21l-1.04,0.08l-0.52,0.82l-0.82,0.16l-0.61,0.83l-2.06,1.2l-0.93,1.87l0.07,0.72l-1.68,2.39l-0.0,2.06l0.38,0.91l2.15,0.38l1.43,2.48l-0.51,1.92l-0.71,1.25l-0.04,2.12l0.46,1.32l-0.71,1.23l0.92,3.13l-0.49,4.07l3.96,3.01l3.02,0.38l1.89,2.23l2.87,0.48l2.45,1.91l2.4,3.56l2.64,1.77l2.09,0.08l1.07,0.7l0.88,0.09l0.82,1.34l1.26,0.83l0.28,2.01l0.68,1.29l0.41,4.77l-40.63,3.34l-40.64,2.18l-1.51,-38.76l-1.53,-2.05l-2.57,-0.78l-0.94,-1.9l-1.46,-1.79l0.21,-0.68l2.82,-2.34l0.93,-2.04l0.42,-2.53l-0.36,-1.59l0.23,-1.86l-0.18,-1.52l-0.51,-1.03l-0.19,-2.34l-1.82,-2.6l-0.47,-1.13l-0.22,-2.17l-0.66,-0.98l0.15,-1.67l-0.36,-1.53l0.52,-2.71l-1.08,-1.86l-0.51,-8.4l-0.42,-0.8l0.05,-3.96l-1.58,-4.0l-0.53,-0.66Z",
            "name": "Minnesota"
        },
        "US-CA": {
            "path": "M3.09,213.1l1.19,-1.55l-0.39,-7.33l0.62,-1.82l1.46,-2.37l0.31,-2.59l-0.35,-1.2l0.2,-2.35l-0.7,-1.04l-1.22,-3.65l-0.57,-0.54l0.11,-0.92l-0.31,-0.88l-1.03,-0.88l-1.99,-3.3l0.53,-1.2l-0.24,-2.67l3.28,-4.42l0.87,0.32l1.32,-2.17l0.92,0.13l0.64,-0.22l0.41,-0.56l-0.27,-0.82l-0.71,-0.36l1.54,-2.62l0.13,-0.77l-0.42,-0.48l0.1,-1.31l0.86,-0.85l1.19,-2.2l1.29,-2.95l0.4,-2.06l-0.27,-1.0l0.08,-3.84l-1.23,-1.24l0.92,-1.21l0.96,-2.75l32.68,8.5l32.54,7.68l-14.07,63.55l25.31,34.44l36.44,50.74l13.26,17.62l-0.21,2.7l0.73,0.93l0.21,1.69l0.85,0.63l0.8,2.53l-0.08,0.9l0.63,1.44l-0.17,1.35l3.8,3.81l0.01,0.49l-1.96,1.49l-3.13,1.22l-1.21,1.96l-1.73,1.11l-0.34,0.81l0.37,1.02l-0.51,0.51l-0.1,0.89l0.07,2.26l-0.61,0.7l-0.66,2.41l-2.04,2.43l-1.61,0.12l-0.43,0.51l0.33,0.88l-0.6,1.32l0.53,1.11l-0.02,1.17l-0.79,2.65l0.57,1.01l2.75,1.15l0.33,0.82l-0.2,2.38l-1.19,0.76l-0.43,1.36l-2.29,-0.63l-1.26,0.59l-43.54,-3.75l0.05,-0.75l0.39,-0.06l0.31,-0.56l-0.11,-1.38l-1.09,-1.65l-1.09,0.01l0.17,-1.12l-0.24,-1.1l0.35,-0.13l0.37,-0.92l0.07,-2.45l-0.38,-2.63l-2.44,-5.64l-3.46,-4.08l-1.29,-1.97l-2.42,-2.13l-2.06,-2.85l-2.01,-1.06l-1.24,0.16l-0.3,0.87l-1.57,-0.96l-0.11,-0.37l0.63,-0.5l0.23,-0.94l-0.45,-2.63l-1.0,-1.94l-0.7,-0.58l-2.17,-0.45l-1.45,-0.15l-1.12,0.29l-0.49,-0.59l-1.66,-0.66l-3.05,-1.96l-1.24,-1.36l-0.52,-2.62l-0.88,-0.66l-1.76,-2.24l-1.66,-1.31l-1.91,-0.53l-1.1,0.23l-1.1,-0.73l-1.51,-0.16l-2.0,-1.53l-2.34,-0.85l-5.74,-0.73l-0.39,-1.68l-1.98,-1.53l1.34,-2.33l-0.32,-1.37l0.85,-2.17l-0.64,-1.26l1.2,-2.34l0.33,-2.38l-0.99,-1.24l-1.32,-0.27l-1.34,-1.4l-0.08,-0.73l1.45,-1.37l-0.49,-2.28l-0.34,-0.54l-1.67,-0.77l-1.86,-4.24l-1.79,-1.17l-0.31,-2.6l-1.61,-2.6l-0.2,-2.71l-1.01,-0.76l-1.11,-3.35l-2.15,-2.3l-0.74,-1.59l0.06,-3.87l0.48,-0.67l0.08,-0.76l-0.52,-0.6l0.51,-0.51l0.56,0.71l0.58,-0.09l0.81,-0.57l0.91,-1.6l0.83,0.02l0.09,-0.52l-0.5,-0.5l0.41,-0.85l-0.05,-0.93l-0.47,-2.19l-0.61,-1.2l-0.6,-0.44l-0.92,0.23l-2.03,-0.45l-1.44,-1.81l-0.85,-2.13l-0.53,-0.38l-0.31,-1.17l-0.46,-0.5l0.05,-1.1l0.87,-2.21l-0.19,-2.91l-0.88,-1.28l1.12,-2.68l0.23,-2.29l1.34,-0.18l0.21,1.49l-0.62,0.3l-0.12,2.68l1.73,1.18l0.69,1.4l1.0,0.72l0.39,1.0l0.89,0.41l0.85,-0.38l-0.18,-1.18l-0.67,-0.51l-0.36,-1.51l0.14,-1.96l-0.54,-1.25l-0.37,-0.02l-0.09,-0.12l0.61,-0.35l-0.0,-0.34l-1.61,-1.21l0.69,-0.65l-0.16,-1.86l-0.95,-0.37l-0.28,-0.6l1.05,-0.63l0.99,0.01l0.96,-0.68l1.25,1.03l2.63,-0.06l5.0,2.27l0.53,-0.21l0.06,-0.58l0.6,-0.65l-0.29,0.74l0.39,0.76l0.8,-0.05l0.36,-0.48l1.35,1.59l0.7,-0.16l0.03,-0.38l-0.53,-1.13l-0.96,-0.75l-0.26,-0.79l-0.65,-0.39l-1.08,-0.08l0.27,-0.56l-0.25,-0.54l-2.49,1.24l-0.7,-0.34l-0.76,0.17l-0.17,-0.55l-1.09,-0.26l0.28,-0.64l-0.35,-0.69l-1.08,-0.18l-1.87,1.52l-0.34,-0.46l-1.36,-0.55l-0.36,-0.87l-1.35,-1.35l-2.6,0.48l0.1,0.91l-0.7,1.18l0.52,0.72l-0.88,0.89l-0.09,2.24l-0.37,-0.09l-1.51,-2.06l-1.18,-0.35l-1.15,-2.42l-1.4,-1.2l0.1,-0.68l-0.67,-0.19l0.73,-1.14l0.92,2.04l0.44,0.25l0.34,-0.38l-1.74,-5.59l-0.97,-0.79l0.2,-0.82l-0.52,-2.25l-2.7,-3.31l-0.98,-2.96l-2.59,-4.32l-0.84,-2.17ZM31.29,239.95l-0.09,0.13l-0.63,0.21l-0.2,-0.07l0.92,-0.27ZM63.53,350.16l0.25,0.02l0.12,0.17l-0.3,-0.1l-0.08,-0.1ZM65.01,351.29l1.25,0.78l0.76,1.83l-0.72,-0.55l-1.37,-0.32l-0.19,-0.45l0.26,-1.29ZM61.81,361.37l0.35,0.68l1.42,1.87l-0.36,0.19l-0.94,-0.99l-0.48,-1.75ZM42.94,332.38l1.0,0.67l1.26,0.33l0.99,0.92l-0.98,0.26l-2.07,-0.65l-0.2,-1.54ZM47.54,334.45l0.36,-0.43l0.53,0.07l-0.29,0.36l-0.59,-0.01ZM45.0,350.63l0.31,-0.09l1.04,0.9l-0.69,-0.27l-0.66,-0.55ZM36.91,332.52l1.16,-0.16l1.19,0.27l0.31,0.81l0.69,0.46l-2.3,0.43l-0.6,-0.54l-0.45,-1.26Z",
            "name": "California"
        },
        "US-IA": {
            "path": "M453.35,165.47l42.84,-2.29l40.57,-3.34l0.97,2.5l2.0,0.98l0.08,0.58l-0.89,1.79l-0.15,1.03l0.92,5.03l0.93,1.24l0.39,1.73l1.47,1.69l4.95,0.81l1.27,2.0l-0.3,1.02l0.29,0.66l3.62,2.32l0.86,2.38l3.85,2.26l0.62,1.65l-0.3,4.15l-1.64,1.96l-0.49,1.92l0.14,1.26l-1.25,1.35l-2.51,0.97l-0.89,1.17l-0.55,0.25l-4.57,0.84l-0.89,0.72l-0.6,1.69l-0.15,2.52l0.4,1.06l2.02,1.44l0.55,2.6l-1.86,3.21l-0.21,2.21l-0.52,1.4l-2.88,1.39l-1.02,1.01l-0.2,0.99l0.72,0.85l0.21,2.11l-0.58,0.24l-1.34,-0.81l-0.31,-0.75l-1.29,-0.8l-0.29,-0.5l-0.89,-0.35l-0.3,-0.8l-0.95,-0.67l-22.33,2.69l-15.15,1.21l-7.6,0.53l-20.81,0.54l-0.22,-1.04l-1.3,-0.72l-0.33,-0.66l0.57,-1.13l-0.21,-0.95l0.21,-1.37l-0.36,-2.16l-0.6,-0.71l0.06,-3.6l-1.05,-0.49l0.05,-0.88l0.71,-1.0l-0.05,-0.44l-1.31,-0.54l0.33,-2.51l-0.41,-0.45l-0.89,-0.16l0.23,-0.78l-0.3,-0.58l-0.51,-0.25l-0.74,0.23l-0.42,-2.77l0.5,-2.33l-0.2,-0.67l-1.37,-1.68l-0.08,-1.89l-1.78,-1.52l-0.36,-1.72l-1.09,-0.93l0.03,-2.15l-1.11,-1.85l0.21,-1.67l-0.27,-1.07l-1.38,-0.66l-0.87,-2.14l0.04,-0.63l-1.81,-1.79l0.56,-1.58l0.54,-0.47l0.72,-2.66l0.01,-1.67l0.54,-0.68l0.21,-1.18l-0.51,-2.22l-1.33,-0.28l-0.05,-0.71l0.44,-0.56l-0.0,-1.7l-0.96,-1.41l-0.05,-0.86Z",
            "name": "Iowa"
        },
        "US-MI": {
            "path": "M612.84,122.92l1.01,-0.11l0.46,-0.67l-0.39,-3.2l1.08,-0.11l0.66,-1.43l1.19,0.46l0.65,-0.34l0.74,-2.59l0.81,-1.2l0.55,-1.68l0.55,-0.19l-0.57,0.87l0.61,1.64l-0.7,1.8l0.71,0.41l-0.46,2.61l0.89,1.41l0.73,-0.06l0.52,0.55l0.64,-0.24l0.87,-2.26l0.64,-3.51l-0.09,-2.07l-0.78,-3.41l0.57,-1.03l2.12,-1.65l2.74,-0.56l0.98,-0.64l0.28,-0.64l-0.25,-0.54l-1.76,-0.09l-0.97,-0.85l-0.53,-1.98l1.83,-2.99l-0.11,-0.73l1.72,-0.24l0.74,-0.94l4.17,1.97l0.83,0.12l1.98,-0.42l1.37,0.39l0.99,0.79l1.19,1.76l2.74,-0.21l1.71,1.0l1.92,0.07l0.81,0.63l1.15,0.23l1.44,-0.07l1.77,1.03l0.0,1.12l1.05,1.3l0.64,0.2l0.37,0.9l-0.14,0.55l-0.67,-0.24l-0.93,0.58l-0.22,1.83l0.82,1.28l1.61,0.97l0.7,1.36l0.67,2.25l-0.1,1.73l0.8,5.78l-0.78,0.65l-0.4,0.86l-0.74,0.08l-0.79,0.82l-0.14,4.44l-1.12,0.49l-0.17,0.81l-1.86,0.44l-0.72,0.61l-0.56,2.6l0.26,0.45l-0.15,2.27l0.27,0.91l1.33,1.18l2.9,0.81l0.91,-0.08l1.07,-1.23l0.59,-1.44l0.62,0.19l0.39,-0.25l0.99,-3.57l0.59,-1.06l-0.08,-0.51l0.92,-1.41l1.43,-0.44l1.06,-0.69l0.82,-1.1l0.86,-0.45l2.07,0.57l2.15,1.75l1.22,2.13l2.05,5.84l0.83,1.58l1.05,3.67l1.51,3.58l1.42,2.21l-0.43,3.38l0.46,2.45l-0.46,2.76l-0.36,0.45l-0.58,-1.19l0.02,-0.83l-1.46,-0.5l-0.47,0.09l-1.47,1.36l-0.05,0.83l0.54,0.65l-0.81,0.57l-0.29,0.79l0.3,2.9l-0.48,0.74l-1.61,0.93l-1.05,1.84l-0.41,3.69l0.28,1.54l-0.32,0.92l-0.42,0.19l0.02,0.9l-0.63,0.31l-0.88,1.59l-0.49,1.28l-0.02,1.04l-0.52,0.9l-20.5,4.37l-0.15,-0.91l-0.46,-0.33l-31.45,4.93l1.86,-2.22l1.82,-5.86l1.42,-3.02l0.98,-4.95l0.08,-5.29l-1.11,-6.41l-2.21,-4.24l0.6,-0.5l0.3,-0.78l-0.57,-0.42l-1.08,0.55l-4.01,-7.3l0.08,-1.35l0.97,-2.05l-0.02,-0.97l-0.76,-3.1l-1.29,-1.63l-0.05,-0.61l1.71,-2.73l1.2,-4.12l-0.25,-5.32l-0.78,-1.58l1.09,-1.15ZM621.72,118.56l0.0,-0.07l0.11,-0.12l-0.01,0.03l-0.11,0.16ZM621.98,117.65l-0.07,-0.16l0.07,-0.14l0.0,0.3ZM543.65,91.17l4.86,-2.41l3.53,-3.65l5.75,-1.39l1.38,-0.86l2.34,-2.73l0.98,0.03l1.51,-0.74l0.99,-2.27l2.79,-2.88l0.24,1.74l1.85,0.59l0.06,1.45l0.67,0.14l0.51,0.6l-0.15,3.16l0.45,0.96l-0.33,0.48l0.21,0.47l0.74,-0.03l1.06,-2.23l1.07,-0.91l-0.41,1.16l0.59,0.44l0.83,-0.68l0.52,-1.23l1.0,-0.44l3.08,-0.27l1.5,0.2l1.19,0.93l1.54,0.44l0.47,1.05l2.32,2.59l1.17,0.54l0.54,1.56l0.73,0.34l1.87,0.06l0.72,-0.41l1.06,-0.06l1.39,-1.1l1.0,1.11l1.11,0.64l1.01,-0.26l0.67,-0.83l1.88,1.05l0.64,-0.34l1.63,-2.6l2.79,-1.92l1.68,-1.66l0.92,0.1l3.25,-1.23l5.16,-0.28l3.23,-2.12l2.27,-0.9l1.52,-0.12l0.01,3.26l0.3,0.71l-0.35,1.11l0.46,0.7l0.68,0.28l0.91,-0.41l2.2,0.69l1.14,-0.44l1.02,-0.88l0.66,0.48l0.21,0.7l0.85,0.22l1.22,-0.78l0.78,-1.58l0.68,-0.29l1.06,0.22l1.34,-1.16l0.53,-0.01l0.22,0.08l-0.28,2.03l0.77,1.33l-1.11,-0.03l-0.36,0.5l0.85,1.83l-0.86,1.05l0.12,0.45l0.84,0.79l1.36,-0.43l0.6,0.47l0.62,0.04l0.18,1.19l0.99,0.87l1.53,0.5l-1.17,0.69l-4.96,-0.11l-0.53,0.3l-1.35,-0.16l-0.88,0.41l-0.67,-0.75l-1.63,-0.06l-0.59,0.47l-0.06,1.22l-0.49,0.76l0.4,2.05l-0.92,-0.22l-0.9,-0.92l-0.78,-0.13l-1.97,-1.64l-2.41,-0.58l-1.6,0.05l-1.04,-0.5l-2.88,0.49l-0.6,0.45l-1.16,2.53l-3.47,0.76l-0.57,0.77l-2.06,-0.32l-2.81,0.95l-0.68,0.84l-0.54,2.52l-0.77,0.29l-0.81,0.88l-0.65,0.28l0.14,-1.96l-0.75,-0.9l-1.02,0.34l-0.76,0.93l-0.97,-0.39l-0.68,0.17l-0.36,0.4l0.11,0.82l-0.72,2.02l-1.19,0.6l-0.11,-1.37l-0.47,-1.06l0.33,-1.69l-0.17,-0.37l-0.67,-0.16l-0.44,0.57l-0.58,2.13l-0.2,2.57l-1.11,0.91l-1.24,3.03l-0.6,2.66l-2.52,5.34l-0.69,0.74l0.13,0.91l-1.4,-1.26l0.17,-1.74l0.62,-1.69l-0.42,-0.81l-0.62,-0.3l-1.35,0.86l-1.16,0.1l0.03,-1.28l0.8,-1.45l-0.42,-1.33l0.29,-1.09l-0.58,-0.98l0.14,-0.83l-1.91,-1.54l-1.1,-0.05l-0.59,-0.43l-1.48,0.01l0.29,-1.37l-0.95,-1.45l-1.13,-0.51l-2.23,-0.09l-3.2,-0.69l-1.55,0.6l-1.43,-0.42l-1.62,0.17l-4.57,-1.92l-15.37,-2.44l-2.01,-3.4l-1.89,-0.96l-0.76,0.26l-0.1,-0.3ZM603.54,101.5l-0.0,0.52l-0.46,0.32l-0.69,1.39l0.08,0.57l-0.66,-0.58l0.9,-2.16l0.83,-0.07ZM643.9,90.03l1.97,-1.54l0.16,-0.57l-0.28,-0.64l1.05,0.15l0.81,1.23l0.82,0.18l-0.27,1.09l-0.35,0.19l-1.51,-0.32l-0.76,0.46l-1.64,-0.23ZM637.38,83.85l0.4,0.45l0.23,0.61l-0.63,-0.71l0.0,-0.34ZM633.81,95.77l1.77,0.05l0.4,0.21l-0.17,0.52l-0.57,0.13l-1.43,-0.92ZM618.98,99.51l0.64,2.25l-0.42,0.62l-0.62,0.14l0.41,-3.01ZM613.49,113.6l0.47,0.29l-0.08,0.56l-0.45,-0.69l0.06,-0.17ZM612.48,116.33l0.0,-0.02l0.02,-0.03l-0.02,0.06ZM599.46,85.47l-0.23,-0.37l0.02,-0.41l0.37,0.33l-0.16,0.45ZM570.54,75.67l-0.51,-0.27l-1.15,0.07l-0.05,-1.58l0.99,-1.03l1.16,-2.12l1.82,-1.52l0.63,-0.01l0.52,-0.59l2.07,-0.91l3.33,-0.44l1.1,0.67l-0.54,0.38l-1.31,-0.12l-2.25,0.79l0.15,0.87l0.72,0.13l-1.19,1.0l-1.39,1.91l-0.69,0.29l-0.34,1.46l-1.14,1.38l-0.64,2.06l-0.67,-0.87l0.74,-0.98l0.12,-1.97l-0.84,-0.22l-0.59,0.93l-0.04,0.67ZM558.24,61.02l0.74,-1.0l-0.4,-0.33l0.56,-0.55l4.58,-3.04l1.96,-1.75l0.62,-0.18l-0.45,0.68l0.11,0.79l-0.42,0.5l-4.22,2.61l-0.85,1.0l0.24,0.37l-1.86,1.2l-0.61,-0.29Z",
            "name": "Michigan"
        },
        "US-GA": {
            "path": "M655.33,331.23l22.08,-3.74l20.7,-4.03l-0.06,0.56l-2.59,3.34l-0.4,1.71l0.12,1.22l0.83,0.77l2.88,0.87l2.72,1.97l0.84,0.22l1.9,-0.39l0.6,0.24l0.81,1.61l1.52,1.57l1.06,2.46l1.34,0.8l0.85,1.14l0.56,0.26l1.01,1.74l1.08,0.28l1.18,0.97l3.83,1.78l2.43,3.1l2.26,0.55l2.55,1.63l0.51,2.31l1.26,0.99l0.47,-0.17l0.31,0.48l-0.09,0.62l0.79,0.71l0.79,0.08l0.57,1.19l5.02,1.81l0.41,1.76l1.56,1.7l1.03,1.98l-0.07,0.8l0.49,0.68l0.12,1.23l1.05,0.78l2.43,0.76l0.28,0.53l0.58,0.23l1.14,2.53l0.77,0.56l0.1,2.67l0.78,1.47l1.39,0.88l1.53,-0.28l1.45,0.74l1.46,0.1l-0.58,0.78l-0.56,-0.35l-0.47,0.28l-0.4,0.99l0.63,0.9l-0.37,0.48l-1.39,-0.14l-0.78,-0.54l-0.65,0.45l0.26,0.71l-0.48,0.53l0.36,0.6l1.45,0.23l-0.57,1.35l-1.44,0.29l-1.09,-0.43l-0.6,0.22l0.04,0.82l1.46,0.58l-1.74,3.74l0.37,1.72l-0.47,0.98l0.87,1.46l-2.31,-0.16l-0.46,0.3l0.07,0.63l0.55,0.33l2.78,0.21l1.08,0.65l-0.02,0.34l-0.56,0.22l-0.87,1.96l-0.52,-1.4l-0.45,-0.12l-0.6,0.34l-0.14,0.84l0.35,0.96l-0.6,0.12l-0.02,0.84l-0.3,0.16l0.07,0.46l1.35,1.13l-1.09,1.04l0.33,0.47l0.78,0.07l-0.38,0.92l0.06,0.88l-0.46,0.52l1.12,1.65l0.04,0.76l-0.79,0.34l-2.65,-0.14l-4.09,-0.92l-1.31,0.36l-0.17,0.74l-0.68,0.26l-0.34,1.25l0.29,2.08l0.96,1.35l0.17,4.26l-1.99,0.42l-0.55,-0.92l-0.13,-1.3l-1.35,-1.81l-49.44,5.58l-0.72,-0.55l-0.89,-2.69l-0.96,-1.5l-0.57,-0.37l0.15,-0.68l-0.74,-1.5l-1.84,-1.79l-0.44,-1.74l0.25,-0.8l0.03,-5.17l-0.62,-1.8l-1.2,-1.45l-1.05,-2.63l0.11,-1.64l0.77,-2.36l-0.26,-1.52l0.18,-2.1l1.62,-1.34l0.45,-1.47l-0.56,-0.6l-1.43,-0.67l0.08,-2.14l-0.98,-1.85l-2.2,-2.38l-1.05,-2.78l-0.76,-0.67l-0.17,-0.95l-0.78,-1.35l-14.24,-42.54ZM747.93,387.83l0.1,0.25l-0.07,0.25l-0.07,-0.25l0.04,-0.25ZM746.77,393.37l0.37,-2.07l0.45,-0.5l-0.3,1.2l-0.52,1.37ZM745.85,404.8l0.06,0.87l-0.01,0.46l-0.35,-0.57l0.3,-0.77Z",
            "name": "Georgia"
        },
        "US-AZ": {
            "path": "M127.68,383.08l0.45,-1.79l1.3,-1.26l0.54,-1.11l0.48,-0.25l1.67,0.63l0.96,-0.03l0.52,-0.45l0.29,-1.16l1.32,-0.98l0.26,-2.71l-0.45,-1.23l-0.84,-0.66l-2.07,-0.68l-0.3,-0.61l0.81,-2.37l0.01,-1.38l-0.51,-1.19l0.57,-0.84l-0.2,-0.86l1.58,-0.25l2.32,-2.76l0.66,-2.4l0.66,-0.79l0.04,-3.14l0.56,-0.61l-0.28,-1.41l1.72,-1.11l1.05,-1.82l3.18,-1.25l2.05,-1.54l0.27,-0.53l-0.12,-1.03l-3.24,-3.48l-0.51,-0.22l0.23,-1.24l-0.65,-1.44l0.08,-0.9l-0.87,-2.73l-0.84,-0.56l-0.18,-1.63l-0.68,-0.79l0.21,-3.48l0.59,-0.85l-0.29,-0.84l1.03,-0.39l0.41,-1.4l0.15,-3.16l-0.75,-3.61l0.77,-2.51l-0.38,-2.96l0.86,-2.51l-0.8,-1.85l-0.03,-0.89l0.78,-1.84l2.55,-0.6l1.75,1.0l1.43,-0.18l0.96,2.22l0.78,0.71l1.54,0.15l1.02,-0.48l1.04,-2.23l0.95,-1.17l2.64,-16.66l42.52,6.06l42.67,4.9l-12.23,122.29l-37.06,-4.25l-36.43,-19.17l-28.48,-15.72Z",
            "name": "Arizona"
        },
        "US-MT": {
            "path": "M167.37,59.79l0.71,-0.1l0.33,-0.38l-0.88,-2.01l0.85,-0.96l-0.38,-1.32l0.1,-0.97l-1.21,-1.96l-0.22,-1.51l-1.01,-1.36l-1.16,-2.48l3.76,-20.98l43.45,6.99l42.85,5.44l42.57,4.0l42.96,2.63l-3.73,86.73l-28.09,-1.54l-26.8,-1.99l-26.76,-2.51l-25.81,-2.91l-0.45,0.35l-1.27,10.36l-1.5,-2.01l-0.02,-0.91l-1.17,-2.35l-1.24,-0.74l-1.81,0.9l0.02,1.04l-0.72,0.42l-0.35,1.55l-2.42,-0.42l-1.92,0.55l-0.92,-0.85l-3.36,0.07l-2.38,-0.98l-1.68,0.56l-0.85,1.47l-4.65,-1.62l-1.3,0.36l-1.13,0.89l-0.31,0.66l-1.65,-1.4l0.22,-1.42l-0.89,-1.71l0.4,-0.36l0.07,-0.62l-1.16,-3.07l-1.44,-1.25l-1.44,0.34l-0.21,-0.64l-1.07,-0.9l-0.4,-1.37l0.68,-0.6l0.21,-1.41l-0.75,-2.38l-0.77,-0.36l-0.3,-1.58l-1.49,-2.55l0.24,-1.51l-0.55,-1.26l0.35,-1.4l-0.72,-0.86l0.48,-0.97l-0.21,-0.75l-1.14,-0.76l-0.13,-0.59l-0.84,-0.92l-0.8,-0.4l-0.51,0.37l-0.08,0.74l-0.7,0.26l-1.14,1.21l-1.75,0.35l-1.22,1.06l-1.07,-0.86l-0.63,-1.01l-1.05,-0.45l0.02,-0.86l0.74,-0.63l0.25,-1.06l-0.6,-1.61l0.91,-1.09l1.07,-0.08l0.83,-0.8l-0.25,-1.14l0.38,-1.06l-0.94,-0.81l-0.04,-0.81l0.67,-1.28l-0.58,-1.08l0.74,-0.06l0.39,-0.42l-0.03,-1.78l1.85,-3.73l-0.13,-1.05l0.89,-0.62l0.63,-3.17l-0.78,-0.51l-1.8,0.36l-1.33,-0.12l-0.64,-0.56l0.37,-0.84l-0.61,-0.98l-0.66,-0.23l-0.72,0.34l-0.06,-0.95l-1.73,-1.65l0.06,-1.85l-1.66,-1.84l-0.08,-0.69l-1.52,-2.91l-1.06,-1.31l-0.55,-1.65l-2.33,-1.37l-0.93,-1.98l-1.44,-1.22Z",
            "name": "Montana"
        },
        "US-MS": {
            "path": "M556.74,430.55l0.67,-0.97l-1.06,-1.76l0.18,-1.63l-0.82,-0.86l1.7,-0.26l0.47,-0.54l0.39,-2.74l-0.78,-1.81l1.57,-1.79l0.24,-3.57l0.74,-2.25l1.89,-1.25l1.15,-1.97l1.4,-1.04l0.34,-0.78l-0.04,-0.99l-0.64,-0.95l1.15,-0.28l0.96,-2.58l0.91,-1.3l-0.16,-0.86l-1.54,-0.42l-0.35,-0.95l-1.84,-1.03l-0.08,-2.13l-0.94,-0.73l-0.45,-0.83l-0.02,-0.37l1.14,-0.29l0.46,-0.68l-0.26,-0.89l-1.41,-0.48l0.23,-1.76l0.98,-1.53l-0.78,-1.06l-1.08,-0.3l-0.15,-2.8l0.9,-0.54l0.22,-0.8l-0.63,-2.5l-1.26,-0.65l0.69,-1.32l-0.08,-2.2l-2.03,-1.49l1.13,-0.47l0.12,-1.4l-1.35,-0.87l1.57,-2.02l0.93,-0.31l0.36,-0.68l-0.52,-1.55l0.42,-1.34l-0.89,-0.87l2.83,-1.1l0.59,-0.76l-0.09,-1.06l-1.42,-0.93l1.39,-1.07l0.61,-1.76l0.94,-0.17l0.34,-0.97l-0.2,-0.76l1.48,-0.43l1.22,-1.21l0.06,-3.49l-0.47,-1.51l0.36,-1.75l0.74,0.08l0.67,-0.33l0.42,-0.87l-0.41,-1.04l2.72,-1.71l0.58,-1.05l-0.29,-1.26l36.56,-4.31l0.86,1.23l0.85,0.44l1.25,65.9l5.71,32.88l-0.73,0.7l-1.54,-0.29l-0.91,-0.94l-1.32,1.07l-1.24,0.18l-2.05,-1.2l-2.0,-0.23l-0.84,0.37l-0.34,0.44l0.32,0.41l-0.56,0.37l-3.98,1.69l-0.05,-0.5l-0.97,-0.51l-1.0,0.05l-0.58,1.0l0.76,0.61l-1.6,1.22l-0.32,1.28l-0.69,0.31l-1.34,-0.05l-1.18,-1.86l-0.09,-0.89l-0.93,-1.47l-0.21,-1.01l-1.41,-1.63l-1.17,-0.53l-0.47,-0.77l0.1,-0.62l-0.7,-0.92l0.2,-1.99l0.5,-0.94l0.65,-2.98l-0.07,-1.22l-0.43,-0.28l-34.83,3.59Z",
            "name": "Mississippi"
        },
        "US-SC": {
            "path": "M698.95,323.28l4.87,-2.71l1.02,-0.06l1.11,-1.38l3.94,-1.92l0.45,-0.88l0.63,0.21l22.6,-3.59l0.31,0.13l-0.1,0.97l0.46,0.66l0.71,0.0l1.21,-1.3l2.84,2.48l0.48,2.44l0.56,0.51l19.53,-3.72l23.16,14.62l0.02,0.54l-2.47,2.19l-2.42,3.66l-2.38,5.7l-0.07,2.72l-1.09,-0.2l0.84,-2.71l-0.64,-0.22l-0.76,0.87l-0.55,1.38l-0.1,1.54l0.85,0.93l1.06,0.22l0.44,0.89l-0.75,0.09l-0.4,0.56l-0.88,0.03l-0.23,0.69l0.94,0.43l-1.1,1.13l-0.07,1.01l-1.35,0.64l-0.5,-0.6l-0.5,-0.07l-1.06,0.87l-0.55,1.77l0.43,0.86l-1.19,1.23l-0.6,1.44l-1.2,1.02l-0.91,-0.38l0.27,-0.59l-0.54,-0.73l-1.37,0.32l-0.11,0.44l0.37,0.76l-0.52,0.03l0.06,0.76l2.04,0.98l-0.12,0.38l-0.88,0.95l-1.22,0.24l-0.24,0.51l0.33,0.44l-2.29,1.36l-1.44,-0.82l-0.56,0.11l-0.1,0.68l1.2,0.76l-1.53,1.58l-0.73,-0.74l-0.49,0.53l-0.0,0.73l-1.55,-0.35l-1.35,-0.82l-0.44,0.5l0.17,0.52l-1.73,0.19l-0.44,0.37l-0.05,0.78l0.65,0.21l0.18,-0.15l1.25,-0.03l-0.24,0.55l0.43,0.25l1.92,-0.17l0.11,0.21l-0.97,0.87l-0.32,0.78l0.57,0.49l0.94,-0.54l0.03,0.21l-1.12,1.1l-1.0,0.45l-0.22,-2.03l-0.7,-0.26l-0.23,-1.53l-0.89,-0.14l-0.3,0.58l0.88,2.67l-1.13,-0.65l-0.64,-0.99l-0.41,-1.75l-0.66,-0.2l-0.53,-0.62l-0.69,0.01l-0.26,0.6l0.86,1.01l0.01,0.67l1.13,1.81l-0.01,0.85l1.24,1.16l-0.62,0.35l0.03,0.98l-1.18,3.56l-1.53,-0.76l-1.53,0.27l-0.98,-0.66l-0.55,-1.02l-0.19,-2.92l-0.87,-0.74l-1.08,-2.44l-1.05,-0.93l-3.25,-1.29l-0.51,-2.63l-1.14,-2.15l-1.44,-1.55l-0.07,-1.06l-0.78,-1.19l-4.84,-1.62l-0.6,-1.25l-1.21,-0.35l0.01,-0.7l-0.54,-0.86l-0.87,0.01l-0.74,-0.59l0.02,-1.2l-0.67,-1.25l-2.72,-1.73l-2.17,-0.49l-2.39,-3.07l-3.96,-1.86l-1.23,-1.01l-0.83,-0.11l-1.06,-1.78l-0.51,-0.21l-0.92,-1.19l-1.19,-0.66l-1.01,-2.38l-1.55,-1.62l-1.04,-1.84l-1.06,-0.36l-2.4,0.24l-2.77,-2.13l-1.06,0.03l-2.24,-1.23l0.35,-2.19l2.59,-3.3l0.15,-1.06ZM752.27,373.36l0.73,-0.08l0.52,0.44l-1.22,1.91l0.28,-1.21l-0.3,-1.05Z",
            "name": "South Carolina"
        },
        "US-RI": {
            "path": "M859.49,132.64l0.33,0.0l1.04,2.59l-0.31,0.56l-1.06,-3.15ZM858.78,136.28l-0.28,-0.32l0.23,-1.49l0.42,1.5l-0.37,0.32ZM851.55,141.07l0.22,-0.46l-0.55,-2.18l-3.23,-9.81l5.59,-1.92l0.78,2.02l0.81,0.24l0.19,0.72l0.09,0.41l-0.77,0.26l0.03,0.29l0.52,1.43l0.59,0.52l-0.59,0.11l-0.45,0.73l0.87,0.94l-0.13,1.21l0.91,1.86l0.04,1.64l-0.27,0.7l-0.9,0.18l-3.57,2.39l-0.19,-1.28ZM856.26,131.18l0.26,0.09l0.01,0.09l-0.17,-0.08l-0.1,-0.1ZM857.65,131.82l0.25,0.52l-0.05,0.32l-0.15,0.01l-0.05,-0.85ZM856.47,144.58l0.14,0.1l-0.19,0.1l-0.0,-0.1l0.06,-0.11Z",
            "name": "Rhode Island"
        },
        "US-CT": {
            "path": "M823.99,156.4l2.8,-3.23l-0.07,-0.55l-1.32,-1.21l-3.63,-15.62l9.79,-2.54l0.6,0.44l0.65,-0.27l0.22,-0.58l14.12,-4.2l3.29,10.0l0.48,1.92l-0.03,1.67l-1.65,0.34l-0.91,0.82l-0.7,-0.34l-0.49,0.11l-0.18,0.9l-1.15,0.09l-1.26,1.27l-0.62,-0.12l-0.57,-0.99l-0.89,-0.07l-0.2,0.68l0.75,0.61l0.09,0.53l-0.89,-0.0l-1.01,0.88l-1.65,0.1l-1.14,0.95l-1.44,0.15l-1.2,0.94l-0.66,-0.97l-0.6,0.12l-0.99,2.44l-1.06,0.62l-0.24,1.01l-0.77,-0.25l-0.95,0.57l-0.08,0.84l-1.71,1.0l-1.92,2.28l-1.18,0.48l-0.23,0.39l-1.41,-1.19Z",
            "name": "Connecticut"
        }
    },
    "height": 606.2089664780622,
    "projection": {
        "type": "lcc",
        "centralMeridian": -100
    },
    "width": 900.0
});

},{}],"6c6zq":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('us_merc_en', {
    "insets": [
        {
            "width": 200,
            "top": 400,
            "height": 152.55491533012142,
            "bbox": [
                {
                    "y": -11550712.000326537,
                    "x": -19771865.68561177
                },
                {
                    "y": -6662889.707734156,
                    "x": -13363914.447835693
                }
            ],
            "left": 10
        },
        {
            "width": 100,
            "top": 430,
            "height": 64.88082384078604,
            "bbox": [
                {
                    "y": -2541822.7747577806,
                    "x": -16734015.891922569
                },
                {
                    "y": -2147829.263106574,
                    "x": -16126758.634187918
                }
            ],
            "left": 220
        },
        {
            "width": 900.0,
            "top": 0,
            "height": 492.4951100679866,
            "bbox": [
                {
                    "y": -6341066.837557688,
                    "x": -12777719.644375157
                },
                {
                    "y": -2821100.997497519,
                    "x": -6345230.892117638
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "US-VA": {
            "path": "M759.72,259.27l0.64,-1.46l-0.16,-0.7l0.65,-0.63l-0.12,-0.57l-0.27,-0.13l0.69,-0.66l-0.06,-1.13l0.43,-0.2l0.02,-0.68l0.59,-0.11l0.37,-0.52l-0.06,-0.19l0.45,-0.5l0.27,-1.23l0.95,-0.12l0.15,-0.79l0.4,-0.02l0.24,-0.63l-0.08,-0.8l-0.5,-0.51l0.78,-0.27l0.33,-0.86l2.53,-0.34l-0.22,2.18l-0.64,0.79l-1.28,2.57l-0.75,2.01l0.04,0.99l-0.49,0.72l-0.31,-0.78l-0.55,-0.2l-0.67,0.6l-0.15,0.28l0.14,0.36l-0.79,0.41l-0.45,0.85l0.02,0.61l-0.55,0.97l-0.28,2.42l-0.26,-0.02l-0.4,0.38l-0.21,0.99l-0.73,-1.76l0.4,-0.71l-0.12,-0.64ZM641.11,273.11l1.27,-0.47l1.53,-0.17l1.14,-0.65l3.43,-0.92l1.03,-1.91l0.75,-0.03l2.31,-0.98l0.3,-0.63l0.04,-0.94l2.1,-1.29l0.23,-0.63l-0.07,-0.78l0.28,-0.29l5.11,-2.74l5.13,-4.35l0.12,0.57l0.68,0.51l0.06,1.26l1.05,0.87l0.49,0.83l1.29,0.33l0.58,0.69l1.08,0.64l1.28,0.16l0.79,-0.22l0.89,-0.93l1.15,-0.29l0.7,-1.1l1.75,1.66l0.4,0.11l1.46,-0.7l2.17,-0.47l0.67,0.18l1.14,-0.65l0.46,-0.69l-0.25,-0.93l0.25,-0.28l1.57,0.84l3.37,-1.69l0.24,-0.03l0.34,0.72l0.62,0.06l2.55,-1.6l0.33,-0.75l-0.35,-0.52l1.07,-0.78l0.22,-0.54l-0.17,-0.52l-0.8,-0.54l1.2,-2.51l3.23,-3.71l0.91,-1.78l0.35,-1.66l1.93,-1.94l-0.01,-0.87l0.37,-0.67l0.55,-0.33l0.68,-1.43l0.1,-1.23l0.36,-0.61l0.14,-0.92l1.03,0.38l0.73,1.75l3.33,1.12l0.61,-0.14l1.45,-2.02l0.65,-2.04l0.84,-0.78l0.29,-1.44l1.12,-1.85l1.55,1.06l0.53,-0.08l1.84,-2.63l0.5,0.14l0.62,-0.23l0.72,-0.96l0.88,-0.44l0.77,-1.5l1.75,-1.87l0.22,-2.36l0.85,-1.45l0.13,-1.81l7.31,5.96l0.64,-0.15l1.42,-3.38l1.05,0.06l1.28,0.42l0.44,0.64l0.9,0.42l0.02,0.26l-0.86,1.14l0.36,0.95l1.28,1.1l1.49,0.18l0.78,0.32l0.67,1.26l1.44,0.46l0.92,0.89l0.47,0.84l-0.05,2.32l-0.99,0.46l-0.4,-0.08l-0.38,0.32l-0.07,0.61l-0.48,-0.15l-0.59,0.44l-0.55,1.3l0.02,0.41l-0.34,0.41l-0.43,1.98l-0.42,0.13l-0.13,0.59l0.73,0.82l-0.29,0.05l-0.31,0.53l0.36,0.4l1.49,0.28l1.37,-0.24l1.92,-1.02l0.19,0.54l-0.57,0.16l-0.12,0.58l1.45,1.35l-0.03,0.42l0.38,0.67l1.43,0.67l1.24,0.2l0.33,0.48l0.43,0.15l0.86,-0.38l0.47,0.23l0.45,-0.07l0.18,0.54l0.95,0.79l-0.19,0.47l0.21,0.58l0.88,0.01l0.23,0.57l3.28,1.61l-0.02,0.93l-0.62,-0.5l-0.64,0.27l-0.08,0.37l0.47,1.36l-0.44,0.4l-0.0,0.38l0.36,0.47l-0.57,0.64l0.03,0.51l-1.01,-0.57l-0.35,-0.74l-0.69,0.01l-0.15,0.26l-1.63,-2.44l-0.49,-0.07l-0.23,-0.57l-0.53,0.17l-0.85,-1.58l-1.0,-0.65l-0.3,-0.66l-0.66,-0.52l-0.98,-1.8l-1.17,-0.4l-0.34,-0.64l-0.48,-0.3l-1.06,-0.21l-0.49,0.38l-0.02,0.4l0.3,0.39l0.96,0.23l0.42,0.72l1.17,0.35l0.43,0.49l0.24,1.35l1.05,1.28l0.92,0.54l0.15,0.63l0.81,1.25l0.65,0.35l0.33,0.48l0.63,0.12l0.42,0.41l0.32,1.15l0.5,0.79l0.47,0.28l1.43,0.19l0.4,0.47l0.48,0.17l-0.58,0.47l0.18,0.53l1.67,0.75l0.1,0.66l0.46,0.22l-0.25,1.34l-0.7,-0.82l-0.36,0.09l-0.77,-1.1l-0.63,0.14l-0.1,0.72l-0.41,0.53l0.09,0.47l0.33,0.31l-0.25,0.48l0.43,0.4l0.46,0.09l-0.79,0.18l-1.68,-1.08l-0.91,-1.48l-0.67,-0.46l-0.75,-1.29l-0.8,-0.81l-0.57,-0.04l-0.33,0.44l0.06,0.79l0.52,0.33l0.61,1.08l0.55,0.41l1.49,2.04l2.12,1.55l1.16,-0.0l0.18,1.0l1.01,0.46l-0.49,0.46l0.15,0.62l0.83,0.05l-0.26,0.97l-0.89,0.15l-0.62,0.47l-0.42,-0.91l-2.26,-1.78l-0.18,-1.3l-0.4,-0.66l-0.77,-0.29l-1.16,0.29l-1.38,-0.71l-0.06,-1.05l-0.68,-0.22l-0.25,0.32l-0.09,0.8l-0.33,0.26l-0.97,-1.43l-0.49,-0.03l-0.52,0.36l-0.49,-0.45l-0.98,0.18l-1.96,-0.54l-0.54,0.78l0.22,0.5l1.63,0.59l1.28,0.03l0.27,0.32l0.46,0.06l0.63,-0.46l0.33,0.87l1.1,0.66l1.78,0.15l1.17,0.93l0.7,-0.35l0.27,2.25l0.95,0.51l0.23,0.53l1.3,0.7l0.13,0.82l-0.72,0.77l0.44,0.54l0.59,-0.09l1.2,-0.66l0.74,0.16l0.22,0.48l0.51,0.32l0.67,-0.12l-0.33,-0.94l0.18,-0.27l-0.11,-0.72l3.26,0.9l1.06,-0.13l0.88,3.07l-0.53,0.55l-0.13,2.73l-0.41,-0.58l-0.46,-0.17l-0.25,0.74l-62.65,0.21l-17.72,-0.58l-6.35,-0.47l-0.38,-0.3l-3.84,-0.15l-0.84,0.4l-25.35,-0.13Z",
            "name": "Virginia"
        },
        "US-PA": {
            "path": "M694.83,162.37l0.63,-0.05l3.44,-2.05l1.37,-0.57l0.0,5.05l0.4,0.4l68.59,0.05l1.18,0.88l0.33,1.45l0.57,0.28l0.79,-0.12l0.98,0.83l-0.18,0.23l0.12,0.6l0.57,0.27l0.07,0.28l-0.29,0.5l0.2,0.94l-0.04,1.75l1.25,2.37l1.09,0.55l0.69,0.66l1.12,0.05l0.6,0.37l0.36,-0.05l0.46,0.88l-1.04,0.54l-1.04,1.17l-0.73,2.0l-0.75,1.02l-0.67,0.49l-0.71,1.18l-1.66,1.11l-0.16,0.75l1.22,1.97l-0.54,0.7l-0.14,0.71l-0.88,0.19l-0.36,0.53l-0.24,1.38l0.25,2.84l0.43,0.37l1.13,0.12l0.29,1.96l0.49,0.87l0.44,0.34l0.67,-0.06l0.33,0.94l3.25,3.68l-2.77,1.42l-1.05,0.98l-2.04,1.12l-0.4,0.64l-0.05,0.82l-1.5,0.68l-0.8,-0.07l-1.46,0.65l-0.45,0.5l-1.52,-0.5l-1.14,0.0l-0.9,0.27l-1.37,0.95l-0.7,1.14l-73.26,-0.0l-0.01,-45.94l1.01,-0.53l1.04,-0.24l2.57,-1.45l0.94,-0.78Z",
            "name": "Pennsylvania"
        },
        "US-TN": {
            "path": "M537.59,303.93l0.66,-0.56l0.37,-1.12l0.84,0.13l0.68,-0.65l0.07,-1.08l-0.52,-2.09l0.03,-1.14l1.41,-1.53l0.18,-1.14l1.05,-0.27l0.38,-0.4l0.03,-0.39l-0.45,-0.82l0.5,-0.49l0.11,-0.52l-0.66,-1.21l2.37,-1.09l1.08,-0.88l-0.02,-0.81l-0.58,-0.62l0.28,-0.1l0.71,0.4l0.49,-0.28l0.1,-0.61l-0.21,-0.59l-0.65,-0.85l0.11,-0.58l0.57,-1.18l0.86,-0.53l0.14,-0.35l-0.95,-1.89l1.35,-0.11l0.44,-0.4l-0.07,-0.63l-0.93,-0.74l0.86,-0.11l0.44,-0.38l0.19,-0.61l-0.38,-1.34l0.27,0.33l0.7,0.08l0.89,-0.85l21.29,0.01l0.4,-0.36l0.07,-1.19l-0.46,-2.12l2.57,0.25l0.32,0.51l0.38,0.1l20.65,-0.39l9.95,0.68l6.87,0.19l4.76,-0.12l21.66,0.76l1.08,-0.35l26.63,0.14l0.75,-0.4l3.14,0.13l-0.56,1.11l0.23,0.82l-0.69,1.64l0.13,0.7l-0.93,-0.18l-1.82,1.27l-1.72,3.15l-0.68,0.56l-0.37,-0.11l-0.42,-0.73l-1.29,-0.25l-0.67,0.43l-1.95,0.63l-0.9,0.87l-0.79,1.25l-0.96,0.59l-0.2,-0.34l0.05,-0.91l-0.58,-0.6l-0.51,0.05l-2.2,1.11l-0.57,1.14l-0.76,-0.33l-0.89,0.28l-0.28,0.67l0.16,0.67l-1.04,1.68l-1.12,-0.14l-1.72,0.71l-1.32,0.87l-0.69,0.8l-0.72,0.13l-2.36,1.76l-0.91,0.18l-0.66,-0.27l-2.06,0.15l-2.56,1.12l-0.54,0.82l-0.84,0.34l-0.62,0.63l-0.59,2.45l-0.38,0.44l-1.47,0.2l-0.76,-0.26l-1.11,0.84l-0.24,0.63l-0.34,3.84l-37.06,-0.05l-22.57,-0.38l-0.32,0.23l-31.68,-0.04Z",
            "name": "Tennessee"
        },
        "US-ID": {
            "path": "M117.66,111.71l1.18,-1.45l0.33,-1.36l1.11,-2.55l1.5,-1.21l1.11,-1.75l0.69,-2.31l-0.16,-1.21l1.77,-2.79l0.95,-2.94l0.13,-1.43l1.64,-2.62l0.47,-1.51l0.74,-0.99l0.18,-0.64l-0.15,-1.02l-1.31,-2.83l-1.83,-0.97l-0.65,-0.6l-0.94,-0.21l-1.15,-1.47l-0.96,-2.98l-0.82,-1.1l0.74,-1.37l-0.55,-2.35l-1.54,-2.55l0.29,-1.09l-0.2,-59.01l14.63,0.0l-0.01,22.86l1.84,2.8l1.26,1.16l0.55,1.58l0.65,0.49l0.25,0.62l0.62,0.54l0.02,0.9l0.61,1.14l-0.78,0.78l-0.09,0.39l0.7,0.75l0.19,0.68l0.32,0.28l-0.9,0.26l-0.16,0.76l2.27,1.41l1.4,1.95l2.52,0.89l0.82,1.56l1.35,1.2l0.66,1.15l1.33,1.5l0.2,0.69l0.88,0.48l1.11,1.13l-0.04,0.9l0.28,0.92l1.38,1.27l0.81,0.32l-0.09,0.94l0.24,0.47l0.77,0.07l0.84,-0.74l0.45,0.44l-0.27,0.5l0.13,0.66l1.28,0.81l1.01,-0.21l0.66,0.11l1.81,-0.64l-0.34,2.24l0.11,0.55l-0.71,0.36l-0.21,0.35l0.44,1.12l-0.48,1.28l-0.05,1.07l-0.76,1.76l0.33,1.75l-0.82,0.2l-0.29,0.6l0.13,0.47l0.68,0.78l-0.48,1.02l0.15,1.18l0.29,0.44l0.84,0.35l-0.25,0.88l0.44,0.99l-0.38,0.36l-1.15,0.32l-1.0,1.61l0.27,1.1l0.58,0.71l-0.02,0.77l-0.71,0.91l0.19,0.69l-0.24,0.48l0.09,0.38l1.59,0.4l1.67,1.59l0.82,0.15l1.03,-0.51l0.44,-0.89l0.58,-0.04l1.22,-0.65l1.02,-1.47l0.78,-0.42l0.03,-0.8l0.93,0.71l0.33,0.68l1.16,0.49l-0.24,1.31l0.2,0.44l0.68,0.4l-0.14,1.43l0.18,0.68l0.58,0.59l0.02,1.64l0.69,0.71l0.18,0.65l1.06,1.06l0.56,1.68l0.88,0.25l0.96,1.98l-0.04,1.0l-0.67,0.74l0.78,1.81l1.4,0.97l0.41,0.74l0.82,-0.03l0.81,-0.49l1.17,0.78l1.44,2.62l-0.39,0.87l0.63,1.28l0.51,0.41l-0.19,0.63l0.25,0.95l1.15,1.05l0.86,0.33l0.58,0.69l0.52,0.02l0.42,-0.29l0.13,-0.39l-0.3,-0.72l0.94,-1.02l0.89,-0.34l2.36,0.37l0.39,0.27l0.75,-0.04l0.67,0.4l0.53,0.0l0.64,-0.4l0.49,-1.42l1.13,-0.54l0.48,0.29l1.88,0.34l3.27,-0.52l1.06,0.75l1.35,-0.34l0.86,-0.52l1.63,0.01l0.9,0.43l0.78,-0.06l0.39,-0.55l-0.21,-0.41l-0.55,-0.26l0.13,-1.08l0.68,-0.56l-0.19,-0.95l0.8,-0.25l0.37,-0.41l0.53,0.31l0.93,1.68l0.39,0.3l0.25,1.09l0.62,0.45l0.97,1.32l0.78,0.36l0.02,52.75l-92.18,0.01l-0.2,-38.44l0.5,-0.5l0.39,-0.84l0.58,-2.78l-0.1,-0.83l-0.42,-0.82l0.7,-0.27l0.47,-1.71l-1.1,-1.08l-0.39,-1.14l-0.42,-0.1l-0.81,0.24l-0.57,-0.63l-0.45,-0.04l-0.57,0.43l-0.41,-0.37l0.03,-1.01l-0.31,-0.95l0.32,-1.18l-0.11,-0.62Z",
            "name": "Idaho"
        },
        "US-NV": {
            "path": "M156.86,303.24l-30.88,-29.74l-22.85,-21.55l-29.08,-25.88l-0.01,-60.92l92.05,-0.01l0.01,115.79l-0.64,1.11l-0.57,2.0l-0.34,0.19l-1.17,-0.01l-1.15,-1.8l-0.73,-0.47l-1.22,0.37l-1.87,-0.62l-1.39,0.42l-1.09,0.61l-0.37,0.48l-0.03,1.16l-0.33,0.58l0.03,0.54l0.43,1.12l0.69,0.99l-0.39,0.9l-0.03,1.17l0.13,1.0l0.62,1.63l-0.01,1.19l-0.3,1.1l1.17,3.07l0.3,2.64l-0.11,0.91l-0.64,0.15l-0.23,0.28l-0.03,0.49l0.38,0.61l-0.34,0.51Z",
            "name": "Nevada"
        },
        "US-TX": {
            "path": "M281.99,360.79l55.54,-0.03l0.4,-0.4l0.37,-84.45l46.56,-0.0l0.05,36.46l0.44,0.4l0.88,-0.11l0.65,0.23l3.27,3.29l1.47,0.18l0.75,-0.49l1.49,0.53l0.69,0.03l0.43,-0.31l0.23,-1.11l0.46,0.61l0.79,0.19l0.32,0.78l0.65,0.66l-0.01,1.4l0.47,0.75l2.5,0.39l1.07,-0.16l1.19,0.77l2.4,0.62l1.62,-0.45l0.52,0.09l1.09,1.29l0.54,0.28l1.23,-0.08l1.1,-1.2l2.1,0.26l1.4,-0.35l0.04,1.88l0.81,0.64l1.34,0.36l-0.13,1.46l0.24,0.49l0.47,0.29l0.92,0.26l0.82,-0.17l2.87,-2.29l0.36,0.26l0.02,0.77l0.31,0.54l1.72,0.21l0.17,0.87l0.67,0.47l1.29,-0.15l0.77,-0.75l0.29,0.26l0.59,-0.06l0.49,-0.79l0.17,0.29l-0.42,1.03l0.1,0.69l0.56,1.0l0.7,0.4l0.49,-0.02l0.57,-0.43l0.69,-1.98l0.77,-0.54l0.36,-1.3l0.44,-0.08l0.29,0.1l0.22,0.84l0.42,0.53l1.13,0.11l0.71,0.45l1.12,-0.14l0.63,-1.11l0.31,0.11l-0.09,0.67l0.39,0.54l1.02,0.42l0.42,0.64l1.31,0.01l1.22,1.51l0.51,0.04l0.59,-0.54l0.1,-0.57l1.26,-0.04l0.42,-0.31l0.43,-0.87l1.63,-0.28l1.45,-0.88l1.27,0.74l1.35,-0.13l0.31,-0.69l1.94,-0.53l0.49,-0.42l0.36,0.24l0.11,0.67l0.2,0.11l1.59,0.44l1.46,0.02l1.7,-0.93l0.35,-0.84l0.88,0.3l1.86,1.42l0.99,0.2l0.13,0.43l1.31,1.41l1.82,0.45l0.87,0.84l0.66,-0.05l2.09,0.84l0.87,0.08l0.28,0.68l1.16,0.9l1.3,-0.04l0.35,-0.56l0.63,0.33l0.8,-0.28l0.76,0.33l0.67,-0.08l0.48,0.31l0.08,28.7l1.2,1.5l1.04,0.75l0.93,1.61l0.38,1.38l-0.22,2.19l0.78,1.08l0.61,0.36l-0.08,0.69l0.6,0.52l0.18,0.71l0.48,0.6l-0.2,0.96l0.79,0.93l0.41,1.39l0.33,0.31l0.54,-0.01l-0.25,1.32l0.54,1.03l-0.68,0.34l-0.12,0.43l0.55,1.07l-0.5,0.68l0.08,1.17l-0.61,1.25l-0.16,0.92l-0.66,0.65l-0.38,1.22l-0.47,0.34l-0.26,0.6l0.42,1.68l-0.81,1.83l0.09,0.91l0.61,1.0l-0.2,0.83l0.31,1.32l-0.28,1.13l-0.98,1.25l-0.84,0.12l-1.67,2.72l-0.08,0.92l1.33,1.9l-2.75,-0.08l-6.11,2.68l-0.01,-0.24l-1.84,-0.55l-2.54,0.71l0.96,-2.7l-0.19,-1.05l-0.78,-0.77l-0.43,-0.02l-1.31,0.64l-0.87,1.57l-1.19,-0.83l-1.44,0.04l-0.09,0.61l0.64,0.54l-0.0,0.84l0.4,0.35l-0.49,0.98l0.17,0.44l1.14,0.54l-0.4,0.42l0.36,0.96l0.92,0.52l-0.32,0.9l-0.34,-0.08l-0.85,0.62l-1.52,1.77l-0.87,-0.38l-0.5,0.1l0.2,0.88l-0.02,2.03l-1.56,1.14l-1.62,1.63l-0.79,0.26l-3.42,2.19l-2.69,0.24l-2.1,0.78l-0.22,0.81l-0.87,-0.16l-1.36,0.59l-0.25,-0.28l-0.75,0.07l0.29,-0.55l-0.17,-0.48l-0.3,-0.12l-1.2,0.14l-0.95,0.8l-0.4,-0.43l0.09,-0.6l-0.18,-0.42l-0.22,-0.24l-0.45,-0.02l-0.48,-0.47l-0.5,0.42l0.47,1.22l-0.03,0.8l-1.44,-0.34l-0.44,-1.1l-1.19,-0.35l-0.59,0.37l0.02,0.44l0.72,1.43l0.0,1.03l0.53,0.34l0.28,-0.11l0.8,0.55l-0.53,0.24l-0.29,0.53l0.11,0.3l0.63,0.26l0.88,-0.41l0.68,0.39l-3.43,1.79l-0.41,-0.12l-0.27,-1.16l-0.37,-0.17l-0.89,-1.21l-0.49,-0.05l-0.44,0.44l-0.01,0.49l-0.41,0.25l-0.07,0.5l0.9,1.31l-0.27,0.82l0.23,0.69l-0.55,0.36l-0.8,1.02l0.21,-1.75l-0.41,-0.36l-0.48,0.15l-0.61,0.88l0.18,0.63l-0.22,0.55l0.01,-0.73l-0.47,-0.51l-1.58,0.98l-0.65,-0.27l-0.63,0.45l0.01,0.63l-0.64,0.74l0.14,0.66l0.73,0.26l0.12,0.51l0.55,0.4l0.5,-0.38l0.3,-0.83l0.55,-0.23l0.01,0.34l-2.29,3.34l-0.94,-0.77l-1.14,0.28l-0.25,-0.28l-2.83,0.12l-0.2,0.58l0.33,0.52l0.47,0.34l1.14,0.05l0.01,0.71l0.43,0.54l1.6,0.92l-0.42,0.69l-1.89,5.27l-0.49,-0.34l0.08,-0.5l-0.56,-0.44l-0.89,0.63l-0.1,0.33l-0.53,0.06l-0.35,0.41l-1.27,-1.84l-0.94,-0.77l-0.62,0.39l0.06,0.42l1.1,1.64l-0.15,0.54l-0.6,-0.05l-0.34,0.62l0.44,0.49l1.5,0.1l1.63,0.61l0.65,-0.02l0.97,-0.46l-0.32,1.28l0.17,0.6l-0.79,0.54l0.25,1.24l-0.84,0.08l-0.4,0.38l0.25,1.69l-0.27,1.3l0.4,0.59l0.62,0.18l0.62,2.29l0.49,2.23l-0.73,0.65l0.46,0.45l-0.06,1.01l0.55,0.28l0.13,0.46l0.41,0.28l0.32,1.42l0.47,0.29l0.34,2.56l0.99,0.55l-0.31,0.79l0.17,0.83l-0.3,0.45l-0.78,0.06l-0.52,0.46l0.02,0.71l-0.57,0.09l-0.25,-0.49l-1.17,-0.41l-2.26,-2.09l-1.7,-0.19l-0.69,-0.43l-3.31,0.0l-0.65,0.3l-0.64,-0.49l-1.3,0.16l-1.62,-0.72l-0.54,-0.77l-0.42,-0.15l-0.25,-0.58l-0.91,-0.41l-0.77,-0.04l-1.55,-0.71l-1.16,0.29l-0.45,-0.38l-0.17,-0.48l-0.47,-0.19l-1.12,-1.11l-1.58,-0.04l-1.17,-0.52l-1.85,-0.2l0.21,-1.01l-0.43,-0.84l-0.75,-0.3l-0.22,-1.4l-1.04,-3.42l-2.18,-2.46l-0.23,-0.9l-0.82,-0.57l0.26,-0.59l-0.18,-0.65l0.28,-1.74l-0.33,-0.77l-0.8,-0.85l0.47,-1.56l0.05,-0.96l-0.14,-0.61l-0.42,-0.3l-0.13,-1.44l-1.51,-1.21l-0.69,0.13l-0.21,-0.28l-0.66,-0.12l-0.59,-1.04l-1.74,-1.36l0.01,-0.53l-0.38,-0.49l0.07,-0.7l-0.79,-0.75l-0.08,-0.63l-0.88,-0.47l-1.05,-2.34l-2.14,-1.21l-0.34,-0.75l-0.87,-0.45l-0.05,-0.94l-0.66,-0.95l-0.42,-1.53l0.24,-0.13l-0.04,-0.73l-0.81,-0.38l-0.2,-1.03l-0.65,-0.48l-0.78,-1.39l-0.51,-1.94l-1.51,-1.91l-0.13,-1.35l-0.6,-2.1l-1.49,-1.09l0.04,-0.56l-0.64,-1.01l-1.08,-0.61l-0.74,-0.79l-1.42,-0.75l-0.63,-1.53l-1.49,-0.49l-1.17,-0.8l-0.02,-1.32l-0.55,-0.33l-0.62,0.14l-0.16,-0.56l-0.73,-0.19l-0.73,-1.68l-0.57,-0.46l-0.3,0.1l-0.41,-0.36l-0.65,0.15l-0.53,-0.67l-0.46,0.16l-0.18,0.48l-0.82,0.13l-2.32,-0.33l-0.38,-0.31l-1.21,-0.0l-0.64,0.25l-0.63,-0.34l-2.19,0.26l-1.34,-0.73l-0.62,-0.09l-1.0,-0.72l-0.61,-0.04l-0.85,0.71l-0.48,1.31l-1.62,-0.09l-0.4,0.33l-0.42,-0.08l-2.08,0.71l-2.38,5.21l-0.12,1.43l-0.6,0.61l-0.27,1.49l0.24,0.46l-1.52,0.84l-0.55,1.08l-0.85,0.52l-0.51,0.74l-0.19,0.85l-2.22,-0.22l-0.98,-0.68l-0.42,0.23l-1.37,-0.89l-1.11,-1.29l-2.39,-0.61l-0.92,-0.72l-0.06,-0.53l-0.4,-0.36l-2.26,-0.33l-1.87,-0.75l-0.71,-0.79l-0.89,-0.58l-0.8,-1.22l-0.81,-0.7l-0.61,-0.25l-0.7,0.03l-1.46,-0.93l-0.21,-0.44l-0.97,-0.75l-0.78,-2.33l-0.74,-0.79l-0.24,-0.87l-0.68,-1.02l-0.31,-1.88l0.32,-1.37l-0.01,-1.17l-2.69,-4.05l-0.14,-1.62l-1.15,-2.01l-0.84,-0.35l-0.43,-1.0l-1.22,-0.61l-0.66,-0.8l-1.23,-0.9l-0.87,-0.07l-1.7,-0.9l-0.66,-0.82l-2.15,-1.81l-0.58,-1.26l-2.73,-1.96l-1.45,-1.94l-1.05,-0.73l-0.54,-0.81l-0.81,-0.55l-2.36,-0.88l-0.7,-0.53l-1.1,-1.73l-0.41,-1.27l-0.74,-1.31l-0.71,-0.67l-0.58,-0.23l-0.93,0.0l-0.91,-0.94l-0.56,-0.26l-0.85,-2.46ZM429.12,467.63l0.19,-0.14l0.17,-0.24l0.02,0.35l-0.39,0.03ZM435.47,429.67l-0.06,-0.32l0.69,-0.17l-0.06,0.07l-0.57,0.42ZM433.03,432.09l0.63,-1.09l0.4,-0.31l-0.02,0.26l-1.01,1.14Z",
            "name": "Texas"
        },
        "US-NH": {
            "path": "M814.7,148.98l-0.11,-0.46l-1.07,-1.32l-0.14,-0.92l0.47,-1.88l0.67,-0.4l0.18,-0.48l0.5,-5.22l0.55,-1.07l0.17,-5.43l0.92,-1.21l0.36,-2.16l1.48,-1.47l0.53,-2.2l1.26,-1.97l-0.24,-0.71l0.96,-2.18l0.19,-3.79l0.28,-0.64l0.42,-0.34l1.99,-0.23l1.08,-1.12l1.85,-1.12l1.24,-1.5l0.09,-1.15l0.68,-0.44l0.02,-0.6l-1.28,-3.05l0.05,-0.37l1.81,-2.86l0.13,-0.78l-0.34,-0.7l-0.05,-0.78l0.43,-0.49l-0.02,-0.74l1.42,-2.94l0.1,-0.41l-0.21,-0.49l1.34,-1.17l1.42,0.84l0.84,0.22l0.53,-0.18l0.37,-0.48l1.93,36.99l-0.29,3.65l0.31,0.76l1.48,2.06l0.69,0.51l-0.06,1.8l1.17,1.56l-0.1,0.32l0.65,0.46l-1.05,1.84l-0.51,1.37l-1.53,-0.24l-1.58,0.72l-0.75,0.72l-1.0,0.06l-0.5,0.46l-0.46,0.94l-0.75,0.32l-0.69,0.68l-17.78,-0.58Z",
            "name": "New Hampshire"
        },
        "US-NY": {
            "path": "M790.78,193.67l-0.46,-0.9l1.51,-2.38l0.76,0.02l0.7,-0.53l0.65,0.32l0.63,-0.25l0.04,-0.24l0.52,0.09l0.42,-0.5l0.6,0.13l0.34,-0.48l-0.17,-0.84l0.33,-0.41l0.64,-0.18l1.16,0.54l0.41,-0.03l0.25,-0.36l1.37,0.2l0.38,-0.32l0.05,-0.33l1.66,0.49l0.94,-0.3l0.61,-0.89l0.48,0.37l0.57,-0.43l4.74,0.12l2.41,-0.57l2.58,-2.08l-0.49,0.93l-1.12,0.52l-0.42,0.68l-0.76,0.41l-0.56,0.67l0.39,0.6l1.52,0.11l0.08,0.61l-0.5,0.31l-1.48,0.41l-0.45,-0.2l-2.31,0.23l-0.38,0.57l0.1,0.21l-0.2,0.07l-0.63,-0.26l-2.95,0.82l-0.96,-0.13l-0.39,0.66l-1.12,-0.24l-2.54,1.13l-1.54,0.12l-1.74,0.57l-1.33,0.11l-0.39,0.59l-0.22,0.0l-0.23,-0.86l-0.3,-0.18l-1.31,-0.2l-0.88,0.48l-0.05,0.64l-0.96,0.38ZM814.82,187.54l0.49,-0.94l1.46,-1.07l0.53,0.03l0.72,-0.52l0.41,0.44l0.43,0.1l0.27,-0.69l0.49,0.76l-1.68,0.64l-2.22,1.31l-0.72,0.22l-0.18,-0.28ZM817.23,182.49l0.11,-0.02l0.04,0.01l-0.1,0.09l-0.05,-0.07ZM701.06,159.36l4.35,-2.83l1.67,-1.79l1.71,-0.94l0.35,-0.45l1.27,-0.49l1.93,-2.88l1.76,-0.89l0.69,-0.68l0.2,-1.78l-0.5,-1.17l-0.16,-1.04l-0.35,-0.42l0.65,-0.97l-0.0,-0.79l-0.69,-0.69l-1.64,-0.2l-0.37,-0.25l0.25,-0.92l-0.07,-2.22l2.71,-0.93l1.64,-0.29l1.06,-0.51l4.7,-0.73l2.33,0.34l1.93,-0.3l5.45,1.04l1.79,1.48l0.91,0.41l0.85,-0.02l2.56,-0.85l5.49,0.27l0.45,0.56l0.7,-0.03l0.23,-0.21l0.12,-0.69l1.55,-0.34l1.2,-0.63l0.76,-0.02l1.15,-1.77l2.21,-1.22l1.06,-1.01l1.06,0.3l1.21,-0.22l0.55,-0.29l0.87,-1.0l-0.04,-0.61l-0.23,-0.17l0.63,-1.04l-0.11,-0.56l-0.62,-0.14l0.13,-1.15l-0.51,-1.74l-0.82,-0.83l0.15,-0.13l0.47,0.52l0.58,-0.13l1.07,-1.19l0.22,-0.87l0.94,-0.42l0.23,-0.94l-0.35,-0.36l-0.5,-0.06l-0.75,0.52l-0.27,0.05l0.52,-0.45l0.32,-0.65l-0.62,-0.8l-1.23,-0.27l-1.03,0.52l-0.78,-0.62l0.01,-0.29l2.59,-1.9l2.08,-0.97l2.27,-2.12l0.82,-0.36l0.26,-0.54l0.99,-0.72l0.21,-0.53l-0.24,-1.04l1.24,-1.63l6.64,-6.13l2.11,-1.3l1.11,-0.36l2.59,-1.47l2.9,0.25l20.64,-0.14l0.15,0.97l-0.64,1.91l0.64,1.45l-0.64,3.77l0.2,1.12l1.11,2.45l-0.62,1.95l0.24,1.57l-0.09,0.96l-0.86,0.85l-0.94,3.25l0.43,1.04l0.16,2.04l0.34,0.93l-0.12,1.08l0.36,0.96l-0.88,2.74l-0.08,0.99l0.29,0.95l0.5,0.22l0.68,-0.43l0.3,-0.8l0.32,0.02l0.28,0.88l0.4,0.45l-0.3,14.57l-0.2,1.04l0.36,1.31l-3.9,14.17l0.39,0.74l-0.99,15.69l0.79,1.53l-3.4,2.13l-0.12,0.53l1.05,1.57l0.02,0.55l-0.24,0.34l-0.7,0.25l-1.06,1.46l-0.48,0.26l-0.05,0.64l-1.22,0.23l1.03,-3.54l0.07,-2.21l-0.26,-1.67l-1.05,-1.36l0.13,-1.06l-0.65,-0.28l-0.55,0.51l-0.19,0.6l0.3,1.34l0.75,1.01l0.15,2.76l-11.57,-7.09l-0.82,-1.66l-0.68,-0.03l-0.66,-0.35l-0.92,0.0l-0.47,-0.54l-0.94,-0.39l-1.13,-2.17l0.09,-1.52l-0.19,-0.78l0.29,-0.65l-0.18,-0.68l-0.45,-0.33l0.18,-0.38l-0.23,-0.5l-1.36,-1.02l-1.08,0.03l-0.35,-1.48l-1.41,-1.11l-68.54,-0.05l-0.0,-4.99ZM787.68,194.73l0.3,-1.41l1.08,-0.14l-0.03,0.54l-1.35,1.01ZM712.62,143.21l0.17,-0.63l0.74,0.1l-0.58,0.93l-0.33,-0.4Z",
            "name": "New York"
        },
        "US-HI": {
            "path": "M299.3,483.56l-0.38,-1.88l-1.43,-2.23l-0.08,-0.63l1.19,-1.47l1.02,-0.53l1.22,-1.89l0.89,-0.89l0.03,-0.74l-1.18,-1.66l-0.42,-1.19l0.54,-1.4l1.78,0.61l0.29,0.65l2.59,1.52l0.77,-0.15l6.09,2.72l2.05,2.13l0.31,2.63l0.42,0.34l1.22,-0.04l0.42,1.63l0.84,0.84l2.08,1.23l-0.47,1.03l-1.43,0.82l-1.77,1.7l-3.22,1.05l-1.84,0.06l-4.08,2.74l-0.87,0.86l-0.47,1.43l-0.72,1.04l-0.56,0.38l-1.4,-1.23l-2.07,-0.52l-0.58,-0.82l-0.04,-1.77l0.48,-3.27l-0.75,-2.74l-0.49,-0.36ZM286.01,454.54l0.9,-0.56l0.26,0.17l0.79,0.84l0.62,1.42l0.41,0.35l2.07,-0.38l0.88,-0.53l1.46,0.24l0.78,0.86l0.92,0.21l0.34,0.7l2.12,0.83l0.17,0.43l-0.17,0.53l-0.92,0.99l-1.17,0.66l-1.35,-0.13l-1.46,0.8l-2.13,0.2l-0.43,-0.71l-0.06,-1.69l-0.61,-1.52l-0.57,-0.25l-1.08,0.15l-1.34,-0.64l-1.07,-1.55l0.62,-1.41ZM285.62,463.52l0.72,-0.32l0.99,-0.6l0.01,0.79l-1.73,0.13ZM275.28,450.48l0.41,-0.1l0.67,0.48l2.41,0.12l1.03,0.32l0.59,-0.28l1.14,0.64l1.43,-0.01l0.44,-0.25l0.96,0.19l-0.56,0.7l-1.87,0.75l-3.55,-1.1l-2.75,0.1l-1.0,0.33l-0.24,-0.32l0.76,-0.93l0.13,-0.65ZM281.65,458.98l-0.63,0.2l-0.69,-0.21l-0.3,-1.71l-0.96,-0.81l1.95,-0.18l1.19,1.03l0.49,0.53l-1.05,1.15ZM256.78,443.18l2.3,0.05l1.55,-1.71l0.89,-0.53l0.59,0.41l0.71,1.51l0.81,0.84l-0.18,0.66l0.55,1.08l0.69,0.72l0.96,0.1l0.57,0.5l0.18,0.94l0.74,0.54l-0.5,0.36l-0.77,-0.12l-1.11,0.32l-1.25,-1.22l-0.39,-0.21l-0.56,0.17l0.04,-0.83l-0.95,-0.41l-0.49,0.03l-0.06,0.32l-0.8,0.25l0.12,0.44l0.73,0.52l-1.6,0.29l-0.42,-1.32l-0.62,-0.42l-1.28,-1.71l0.07,-0.85l-0.52,-0.71ZM228.76,433.82l1.14,-1.65l2.84,-1.64l0.87,0.34l1.94,-0.43l1.05,0.6l0.52,1.06l-0.79,1.79l0.1,1.12l-0.33,0.61l-1.5,1.22l-1.2,-0.51l-1.34,0.04l-1.05,-1.14l-0.84,-0.02l-0.86,-0.42l-0.55,-0.96ZM220.67,438.43l-0.26,-0.28l0.28,-0.89l0.55,-0.8l0.42,-0.11l1.39,-1.48l-0.29,1.45l-1.18,0.44l-0.67,0.85l-0.23,0.83Z",
            "name": "Hawaii"
        },
        "US-VT": {
            "path": "M799.87,130.85l-0.02,-0.88l0.84,-2.25l0.1,-0.84l-0.37,-1.13l0.13,-0.97l-0.35,-1.0l-0.17,-2.07l-0.41,-0.81l0.88,-2.99l0.89,-0.93l0.13,-1.22l-0.25,-1.46l0.46,-1.02l0.16,-1.01l-0.15,-0.83l-1.02,-1.93l-0.15,-0.88l0.64,-3.68l-0.64,-1.5l0.63,-1.77l-0.13,-1.1l27.46,-0.19l0.08,1.08l0.32,0.62l-0.09,0.35l-1.42,2.05l-0.49,1.47l1.32,3.28l-0.66,0.41l-0.08,1.15l-1.11,1.32l-1.73,1.03l-1.0,1.07l-1.85,0.17l-0.86,0.7l-0.38,0.9l-0.19,3.81l-0.98,2.23l0.22,0.62l-1.17,1.81l-0.48,2.1l-1.49,1.48l-0.42,2.29l-0.94,1.3l-0.18,5.49l-0.55,1.08l-0.5,5.22l-0.78,0.63l-0.54,2.17l0.21,1.34l1.1,1.41l-11.49,-0.43l-0.3,-0.92l0.2,-1.07l0.3,-14.72l-0.81,-1.66l-0.38,-0.31l-1.02,0.03l-0.52,0.99Z",
            "name": "Vermont"
        },
        "US-NM": {
            "path": "M244.72,372.31l0.01,-106.11l93.41,0.0l0.01,8.92l-0.65,0.42l-0.36,84.43l-55.65,0.03l-0.4,0.42l0.49,1.9l0.57,1.37l0.76,0.47l-25.63,-0.07l-0.4,0.4l0.0,7.84l-12.16,0.0Z",
            "name": "New Mexico"
        },
        "US-NC": {
            "path": "M631.06,299.64l0.79,0.27l1.38,-0.11l0.44,-0.28l0.61,-0.77l0.07,-0.78l0.47,-0.92l-0.04,-0.58l1.34,-0.82l0.55,-0.82l2.16,-0.92l1.92,-0.13l0.62,0.27l1.25,-0.25l2.45,-1.8l0.71,-0.09l0.82,-0.92l1.15,-0.76l1.43,-0.62l1.4,0.07l0.64,-0.67l0.8,-1.45l-0.06,-1.07l0.32,-0.04l0.66,0.41l0.45,-0.06l0.66,-0.91l0.08,-0.44l0.91,-0.5l1.04,-0.47l0.17,1.35l0.44,0.41l0.48,0.07l1.38,-0.8l0.88,-1.35l0.73,-0.7l1.74,-0.52l0.67,-0.43l0.65,0.18l0.15,0.47l0.46,0.36l1.0,-0.01l0.93,-0.79l1.59,-3.0l0.4,-0.34l1.11,-0.75l1.26,0.32l0.47,-0.21l0.05,-0.46l-0.43,-0.76l0.69,-1.65l-0.21,-0.87l0.52,-0.96l6.65,0.51l17.74,0.58l62.8,-0.21l0.09,1.08l0.75,0.91l0.17,0.75l0.76,0.78l0.64,1.09l0.46,1.34l-0.65,-0.99l-0.03,-0.59l-0.71,-0.55l-0.48,-0.08l-0.39,0.57l0.45,0.6l0.18,1.37l-0.42,-0.1l-0.62,-0.83l-1.79,-1.17l-0.29,-0.51l-0.54,-0.0l-0.44,0.54l-0.02,0.61l1.1,0.69l1.1,1.47l-1.0,0.3l-1.89,-1.56l-0.47,0.4l0.03,0.41l1.02,1.21l-1.36,-0.61l-0.55,-0.55l-1.19,-0.66l-0.48,0.02l-0.11,0.47l0.34,0.69l1.22,1.05l-0.85,0.26l-0.16,0.54l-0.45,0.32l-1.41,0.31l-0.58,-0.83l-0.86,0.19l-0.63,-2.22l0.75,-2.21l-0.28,-0.52l-0.73,-0.38l-0.51,0.53l0.38,0.69l-0.58,0.75l-0.24,0.9l0.05,1.59l0.89,2.19l-0.53,1.01l0.4,0.4l2.68,0.13l2.13,-0.81l0.18,0.06l0.16,0.75l0.48,0.09l0.28,-0.2l1.33,0.38l0.33,-0.66l-0.33,-0.34l1.16,-0.33l1.77,0.02l-0.31,0.96l0.48,0.4l-0.7,0.61l0.5,1.16l-0.7,-0.1l-0.35,0.6l0.42,0.46l0.67,0.24l-0.03,0.74l-0.97,-0.2l-0.35,0.59l0.46,0.66l1.1,0.14l0.41,0.32l0.47,-0.26l0.59,-1.61l0.08,-2.94l0.42,-0.29l0.38,0.46l0.83,0.25l0.36,-0.32l-0.07,-0.55l0.45,-0.33l1.0,1.85l-0.32,1.18l0.32,0.83l-0.45,0.04l-0.36,0.39l0.51,1.16l-0.14,0.25l-0.44,0.33l-0.68,-0.08l-0.23,-0.63l-0.36,-0.28l-0.39,0.24l-0.17,1.08l-1.28,1.13l0.03,0.5l-0.28,0.1l-0.35,0.77l-0.53,0.07l-0.23,0.27l-0.14,0.78l-0.95,0.6l-0.89,-0.04l-0.44,-0.44l-0.58,0.31l-0.59,-0.86l-0.73,-0.1l-0.16,-0.74l-0.48,-0.33l-0.57,0.22l-0.13,0.8l-0.46,0.07l-0.17,-0.44l-0.44,-0.18l-0.14,-0.58l0.76,0.04l0.44,-0.33l0.23,-0.52l-0.45,-0.55l-1.79,-0.17l-1.22,0.62l0.12,0.72l0.3,0.18l-0.08,0.74l0.22,0.26l-0.42,-0.38l-1.61,0.34l-0.85,-0.59l-1.26,-0.25l-1.44,-0.61l-0.8,-0.64l-0.5,-0.02l-0.13,0.48l0.25,0.58l0.75,0.61l0.15,0.58l0.59,0.26l0.34,-0.2l0.43,0.11l1.3,0.88l0.99,0.27l1.04,0.6l2.85,0.79l0.28,0.41l-0.13,0.36l-0.82,-0.17l-0.45,0.57l-1.65,0.87l0.16,0.64l1.47,0.4l-0.51,0.27l-0.24,0.53l-2.06,1.49l-0.94,-0.05l-0.45,-0.26l-1.15,-1.15l-0.72,-0.34l-0.83,-1.11l-0.56,-0.25l-0.46,0.1l-0.04,0.47l2.19,3.4l2.24,0.79l1.04,0.68l1.89,-1.44l0.32,0.49l0.93,0.52l0.53,-0.46l-0.32,-0.8l0.38,0.33l0.27,-0.03l0.05,0.5l0.34,0.32l0.58,0.02l1.0,-0.37l0.06,0.71l-0.27,0.19l-0.41,-0.26l-0.37,0.26l-0.16,0.75l-1.19,1.23l-0.14,0.63l-0.49,-0.16l0.07,-0.67l-0.84,-0.75l-0.52,0.36l-0.04,0.63l-0.38,-0.62l-0.72,-0.01l-0.97,0.65l-0.23,0.33l0.14,0.25l-1.73,-0.15l-2.67,0.95l-0.35,-0.93l-0.61,-0.45l-0.47,0.39l0.13,1.05l-0.46,-0.1l-0.33,0.35l0.03,0.34l-1.12,1.23l-0.9,0.5l-0.36,-0.29l0.5,-0.45l0.14,-0.7l-0.68,-0.96l0.01,-0.49l-0.4,-0.39l-1.01,-0.31l-0.26,0.42l0.13,1.07l0.1,0.32l0.48,0.18l0.13,0.52l-0.8,0.11l-0.24,0.65l0.43,0.68l0.59,0.29l-0.07,0.24l-2.11,0.96l-2.18,1.84l-2.56,3.19l-0.75,1.86l-0.49,-1.42l-0.48,-0.29l-0.4,0.4l0.29,2.32l-0.09,1.19l-0.93,1.71l-3.3,-0.6l-1.34,0.26l-0.14,-0.45l-0.5,-0.3l-0.68,0.79l-1.82,0.59l-0.48,-0.14l-16.82,-17.16l-0.9,-0.21l-16.58,-0.37l-0.09,-2.43l-2.31,-2.98l-0.46,-0.01l-1.21,0.85l0.21,-1.0l-0.65,-0.64l-19.16,-1.03l-1.08,0.1l-0.53,-0.33l-0.65,0.3l-0.32,0.5l-3.74,1.02l-0.34,0.53l-0.61,0.37l-0.38,-0.2l-0.5,0.11l-4.54,1.52l-18.63,0.25l0.35,-3.85l0.69,-0.67ZM761.81,282.4l0.04,0.16l0.04,0.12l-0.11,-0.18l0.04,-0.1ZM754.4,305.11l0.11,-0.17l0.04,0.03l-0.09,0.13l-0.06,0.01ZM752.17,304.5l0.01,-0.13l0.07,0.1l-0.08,0.03ZM760.05,275.08l0.28,-0.11l0.03,0.28l-0.29,-0.02l-0.02,-0.15Z",
            "name": "North Carolina"
        },
        "US-ND": {
            "path": "M428.1,9.38l1.98,7.66l-0.69,1.62l-0.17,1.11l0.53,2.57l-0.32,1.26l0.44,2.17l-0.22,1.61l0.13,1.91l1.37,4.28l0.46,0.6l-0.12,1.04l0.36,1.63l0.63,0.8l0.85,2.23l0.28,1.47l0.3,0.34l-0.11,1.38l0.17,1.08l-0.25,1.68l0.41,0.75l-0.11,2.86l0.34,2.13l0.01,3.81l0.47,1.61l0.54,0.29l-0.31,0.71l-0.28,2.04l0.31,1.71l-0.21,1.82l0.68,1.16l0.13,2.25l0.4,0.56l0.06,0.63l1.76,2.72l0.08,2.28l0.48,1.13l0.12,1.44l-0.3,1.39l0.23,1.81l-115.82,-0.01l-0.04,-69.56l105.46,-0.0Z",
            "name": "North Dakota"
        },
        "US-NE": {
            "path": "M408.74,144.0l3.79,2.69l2.08,0.9l0.51,0.59l1.21,0.41l1.31,-0.19l0.51,-0.45l0.37,-1.03l0.47,-0.18l0.97,0.23l0.74,-0.14l0.72,0.29l1.3,-0.42l1.54,0.28l3.38,-0.53l1.47,1.49l0.78,0.5l1.37,0.18l1.49,0.79l1.41,0.12l0.82,1.09l1.43,0.21l-0.08,0.94l0.82,0.77l0.18,0.7l0.56,0.6l3.2,0.69l0.16,0.65l-0.28,1.79l1.02,1.9l-0.23,1.51l0.15,0.68l1.08,1.07l0.26,1.65l0.55,0.72l1.06,0.74l-0.01,1.78l1.36,2.05l-0.24,1.48l-0.33,0.7l0.04,1.4l0.32,0.69l-0.06,0.85l0.49,0.55l0.89,-0.15l-0.19,0.72l0.11,0.45l0.38,0.33l0.75,0.19l-0.48,2.18l0.19,0.46l1.03,0.41l-0.59,0.68l-0.12,0.95l0.11,0.58l0.75,0.5l0.09,1.35l-0.29,0.85l0.21,0.44l-0.02,0.77l0.49,0.59l0.2,1.8l-0.26,1.23l0.19,0.68l-0.57,0.83l-0.01,0.76l0.39,0.84l1.14,0.64l-0.06,1.58l0.2,0.76l1.01,0.51l-0.0,0.73l0.42,0.68l0.1,0.86l0.46,1.03l-0.35,0.63l0.1,0.27l0.32,0.26l0.78,0.0l0.71,0.95l1.01,0.26l-0.18,0.89l1.14,1.59l-0.25,1.02l0.36,0.83l-102.86,0.0l-0.01,-20.08l-0.4,-0.4l-30.79,-0.01l0.01,-41.16l86.19,0.0Z",
            "name": "Nebraska"
        },
        "US-LA": {
            "path": "M478.53,360.34l0.03,-18.22l43.98,-0.05l0.26,0.71l1.17,0.62l-0.87,1.04l-0.38,1.8l0.38,0.68l0.94,0.29l-1.01,0.25l-0.49,0.68l0.28,1.19l0.82,0.78l-0.11,1.79l0.38,0.53l1.19,0.71l0.3,0.92l1.15,0.44l-0.83,0.92l-0.88,1.85l-0.6,-0.02l-0.54,0.43l-0.08,0.63l0.47,0.67l-0.26,0.88l-1.21,0.69l-1.05,1.48l-1.19,0.45l-0.66,0.66l-0.85,1.96l-0.46,2.87l-0.96,0.69l-0.46,0.64l0.0,1.05l0.44,0.84l-0.46,1.9l-1.46,0.14l-0.45,0.44l0.17,0.86l0.47,0.54l-0.3,1.14l0.69,1.27l-1.04,0.86l-0.12,0.44l0.38,0.26l29.57,0.0l-0.85,2.69l-0.52,0.79l-0.37,1.85l0.48,0.87l-0.12,0.57l0.41,0.88l1.02,0.71l0.87,1.26l0.04,0.73l0.6,1.2l0.03,0.9l0.7,1.51l-1.45,0.13l-0.22,-0.07l-0.11,-0.75l-0.31,-0.24l-1.06,0.11l-0.93,-0.59l-1.24,0.01l-0.39,-0.82l-0.97,-0.84l-2.35,-0.65l-1.12,0.43l-1.34,1.77l-1.19,1.06l-0.43,0.75l-0.04,1.02l0.39,0.8l0.65,0.54l1.78,0.38l1.65,0.65l2.86,-0.54l1.21,-0.88l0.59,-0.77l0.41,0.53l0.68,0.29l1.24,-0.22l0.28,-0.26l-0.66,0.72l-0.85,-0.17l-0.53,0.22l-0.4,0.51l-0.08,0.7l0.54,1.11l1.21,0.16l0.75,1.02l0.61,0.24l0.8,-0.09l0.49,-0.35l0.49,-0.89l0.1,-1.09l0.8,-0.38l0.5,-0.71l-0.04,0.88l-0.19,0.17l0.12,0.59l0.26,0.14l-0.15,0.37l0.3,0.54l0.82,0.7l-0.2,0.25l0.05,0.54l-0.7,-0.57l-0.61,-0.14l-1.04,1.47l-0.67,0.03l-0.46,0.41l-0.07,0.86l-1.08,-0.53l-0.44,0.14l-0.01,0.47l0.71,0.8l-0.77,-0.17l-0.54,0.1l-0.32,0.38l0.51,0.46l0.88,1.78l0.96,0.5l0.51,0.04l0.62,0.47l-0.15,0.96l0.27,0.4l0.53,0.13l1.2,-0.19l0.54,0.22l0.14,0.42l0.59,0.34l1.1,-0.13l0.39,0.66l1.11,-0.18l0.66,0.74l-0.36,0.52l1.11,0.86l-0.32,0.46l0.29,0.53l-0.26,0.45l-0.82,0.93l-0.69,-1.11l-0.41,-0.19l-0.23,0.14l0.13,-0.67l-0.37,-0.43l-0.71,-0.39l-0.53,0.42l0.05,0.97l-0.36,0.26l-0.12,-0.82l-0.44,-0.26l-0.56,-1.02l0.03,-0.72l-0.8,-0.21l-0.47,0.35l-1.04,-0.23l-0.23,-0.48l0.15,-0.49l-0.3,-0.47l-0.45,-0.06l-0.7,0.51l-0.8,-0.07l0.19,-0.69l-0.29,-0.85l-0.53,-0.38l-0.32,0.1l0.19,-0.69l-0.32,-0.37l-0.79,-0.09l-0.25,0.35l-0.63,-0.28l-0.39,0.16l-1.98,-1.24l-1.02,-0.16l-0.47,-0.53l-0.63,0.12l-0.28,0.42l-0.15,1.09l1.35,0.94l1.26,0.38l-0.17,0.71l0.18,0.36l-0.3,0.24l0.1,0.53l-0.67,0.73l-0.08,0.54l0.29,0.74l0.27,0.14l-0.84,0.99l-1.05,0.6l-0.51,-0.91l0.29,-1.17l-0.22,-0.82l-0.44,-0.22l-0.34,0.25l-0.89,-0.96l-0.47,0.23l-0.51,-0.83l-0.53,-0.23l-0.41,0.29l-0.25,0.73l-0.25,-0.1l-0.45,0.23l-0.36,-0.46l-0.31,-0.04l-0.79,0.4l-0.14,0.54l0.31,0.4l-0.53,0.32l-0.23,1.14l-0.34,0.07l-0.37,0.63l-0.63,-0.06l-0.08,-0.45l-1.31,-0.5l-0.72,0.7l-0.9,-0.73l-0.52,-0.15l0.06,-0.19l-0.3,-0.28l-0.88,-0.06l-0.29,0.44l-0.72,-0.45l0.25,-0.22l0.11,-0.9l-0.16,-0.76l-1.53,-1.22l-0.03,-0.43l-0.62,-0.65l-0.01,-0.7l0.73,-1.18l-0.26,-0.72l-0.75,-0.25l-0.39,0.54l0.1,0.29l-0.54,0.63l0.0,0.67l-1.3,-0.43l-0.32,-0.77l-1.61,0.44l-0.46,-1.83l-0.42,-0.14l-0.61,0.21l0.13,-1.26l-0.36,-0.63l-0.84,-0.23l-1.53,0.08l-0.97,0.46l-0.13,-0.43l0.72,-0.21l0.01,-0.68l-0.49,-0.57l-0.86,-0.17l-0.74,0.27l-0.77,-0.17l-0.34,0.26l-0.07,0.38l-1.66,0.72l-0.49,-0.25l-0.39,0.09l-0.81,0.48l0.35,1.17l0.67,0.37l0.5,1.11l-0.94,0.09l-1.55,0.72l-2.94,-0.56l-1.06,0.08l-2.47,-0.55l-1.57,-0.68l-1.42,-0.99l-2.97,-1.12l-2.59,-0.58l-2.12,0.32l-4.64,0.06l-0.85,0.17l-1.51,0.91l-0.4,-0.5l-0.15,-0.8l1.31,-0.34l0.68,-1.43l0.06,-1.29l-0.27,-0.48l0.96,-1.14l0.29,-1.32l-0.31,-1.55l0.14,-1.2l-0.52,-0.64l-0.11,-0.83l0.81,-1.77l-0.42,-1.64l0.68,-0.66l0.31,-1.18l0.7,-0.74l0.17,-0.94l0.65,-1.37l-0.07,-1.19l0.53,-0.76l-0.52,-1.11l0.67,-0.27l0.21,-0.39l-0.66,-1.2l0.19,-0.53l-0.05,-1.24l-0.29,-0.28l-0.6,-0.04l-0.38,-1.28l-0.71,-0.74l0.3,-1.05l-0.64,-0.67l-0.22,-0.8l-0.48,-0.33l0.22,-0.31l-0.03,-0.49l-0.95,-0.56l-0.61,-0.79l0.27,-2.02l-0.48,-1.67l-1.01,-1.72l-1.12,-0.84l-0.42,-0.72l-0.54,-0.41ZM552.44,413.06l0.03,0.16l-0.11,0.02l0.08,-0.18ZM522.76,410.13l-0.65,-0.11l-1.17,-0.71l0.52,-0.28l0.31,-0.48l0.86,0.56l-0.15,0.37l0.28,0.64ZM509.87,404.15l1.02,-0.32l0.38,-0.34l0.71,0.16l0.64,0.55l1.04,0.37l-0.41,0.3l-0.22,0.64l-0.48,0.09l-2.68,-1.45Z",
            "name": "Louisiana"
        },
        "US-SD": {
            "path": "M322.49,100.55l0.28,-0.55l-0.1,-20.26l115.68,0.01l-0.25,1.75l-0.8,1.72l-3.04,2.41l-0.47,1.28l1.54,2.21l1.0,2.12l0.54,0.38l1.75,0.31l1.0,0.89l0.54,1.06l0.0,38.63l-1.81,0.02l-0.33,0.17l-0.1,0.37l0.19,1.41l0.82,1.14l-0.04,1.4l-0.65,0.34l0.22,0.81l-0.11,0.64l0.46,0.44l1.06,0.08l0.27,1.63l-0.19,0.87l-0.64,0.78l0.13,0.61l-0.18,1.07l-0.4,0.65l-0.35,1.68l-0.5,0.41l-0.73,1.8l0.45,1.09l1.24,1.07l-0.17,0.59l0.6,0.66l0.3,1.1l-1.58,-0.32l-0.3,-0.91l-0.8,-0.73l0.21,-0.57l-0.26,-0.6l-1.53,-0.27l-0.39,-0.7l-0.58,-0.47l-1.53,-0.16l-1.45,-0.77l-1.31,-0.15l-2.27,-1.99l-0.65,-0.1l-3.06,0.57l-1.61,-0.28l-1.17,0.42l-0.68,-0.29l-0.72,0.14l-1.15,-0.23l-0.98,0.45l-0.42,1.08l-0.35,0.3l-0.7,0.03l-1.02,-0.36l-0.43,-0.56l-2.09,-0.91l-3.99,-2.78l-86.37,-0.0l-0.05,-42.65Z",
            "name": "South Dakota"
        },
        "US-DC": {
            "path": "M742.55,227.41l0.52,-0.53l1.5,1.5l-0.78,0.79l-0.27,-1.01l-0.98,-0.76Z",
            "name": "District of Columbia"
        },
        "US-DE": {
            "path": "M763.07,211.97l0.72,-1.24l1.08,-0.77l1.08,-0.24l1.58,0.3l-0.38,0.39l-0.4,1.21l-1.48,1.45l-0.16,1.01l0.62,0.74l0.11,0.48l-0.43,1.34l1.47,2.72l0.98,0.83l0.47,1.53l-0.13,1.31l0.22,1.87l0.54,0.51l0.63,1.28l0.2,1.3l2.26,2.47l1.29,0.24l0.1,1.14l-0.69,0.0l-0.38,0.26l-0.17,1.24l0.21,0.21l-0.81,0.3l-0.28,0.33l0.14,0.3l-0.22,0.44l0.57,0.37l0.92,-0.44l0.57,0.46l0.28,-0.1l0.29,1.41l-9.64,0.11l-1.17,-24.77Z",
            "name": "Delaware"
        },
        "US-FL": {
            "path": "M578.94,379.08l39.63,-0.01l0.46,0.49l0.52,1.22l0.35,2.32l0.8,0.94l0.36,0.12l40.51,2.77l0.64,1.23l-0.14,0.87l0.29,0.96l0.3,0.42l0.53,0.17l1.4,0.02l0.6,-0.2l0.26,-0.33l0.6,-3.74l-0.57,-1.37l0.09,-1.45l0.32,-0.49l0.54,-0.17l0.23,-0.54l4.33,1.66l3.31,0.53l-0.12,0.79l-0.55,-0.13l-0.37,0.35l-0.04,1.3l1.43,1.82l0.02,0.86l0.27,0.35l-0.07,1.61l0.52,2.03l0.46,0.93l0.16,1.67l0.51,1.99l-0.08,0.49l0.45,0.84l0.18,1.29l0.92,2.23l0.26,1.36l1.64,3.43l1.04,2.87l1.36,2.56l0.05,0.55l0.43,0.38l4.07,6.92l-0.59,0.41l-0.95,-0.21l-0.09,-0.77l0.36,-0.4l0.09,-0.86l-1.72,-1.17l-0.56,0.43l0.35,2.41l0.45,0.89l0.92,4.14l5.57,12.5l0.57,2.69l1.92,4.68l-1.1,-0.45l-0.31,0.61l0.52,0.65l0.65,0.35l0.47,-0.06l0.94,0.95l1.06,2.67l-0.38,0.14l-0.22,0.47l0.23,0.36l0.58,0.27l0.38,1.57l-0.24,0.81l0.3,0.85l0.03,2.16l-0.33,0.54l-0.76,7.18l-0.42,0.8l0.24,0.63l-0.12,2.44l-0.86,1.04l-0.31,1.74l-0.73,0.4l-0.47,1.39l-0.52,0.62l-0.07,1.18l-0.51,1.32l0.16,1.5l0.23,0.22l-1.09,1.16l-0.48,0.87l-0.67,0.04l-0.42,-0.23l-1.13,0.13l-0.46,0.73l-0.72,0.14l-0.25,0.42l-0.69,0.38l-1.07,-0.09l-0.18,-0.33l-0.99,-0.26l-0.85,0.67l-2.54,0.37l-0.64,-0.59l-0.36,-0.89l0.28,-1.28l0.5,0.74l1.14,0.63l0.18,0.57l0.42,0.14l0.8,-0.1l0.4,-0.27l0.28,-0.54l-0.1,-0.59l-1.07,-1.16l-1.79,-0.59l-0.59,-0.48l-0.38,-1.41l-0.54,-0.66l0.29,-0.77l-0.37,-0.35l-0.4,0.01l-0.65,-2.08l-0.37,-0.38l-0.45,-0.03l-0.19,-0.46l0.26,-0.73l-0.45,-0.62l-0.86,-0.67l-0.79,-0.22l-0.48,-0.53l-0.5,0.02l-0.75,-0.44l-1.49,-0.36l0.07,-0.24l-0.37,-0.5l-0.63,-0.01l-0.1,-0.61l-0.56,-0.61l-0.26,-1.19l-0.43,-0.27l-0.1,-2.32l-0.44,-0.9l0.1,-1.22l-0.22,-0.75l-0.41,-0.81l-0.45,-0.24l-0.31,0.71l-0.72,-0.32l1.0,-0.88l0.36,-1.08l0.79,-0.9l0.57,-0.19l0.36,-0.64l-0.53,-0.49l-1.27,0.53l-0.9,0.9l-0.65,1.63l-0.98,0.09l0.05,-1.06l-0.41,-1.16l0.39,-3.22l-0.54,-0.6l1.5,-0.89l0.24,-0.62l-0.5,-0.52l-0.67,0.42l-1.24,0.19l-0.71,0.42l-0.53,-0.61l-0.29,0.11l-0.86,-0.85l-0.52,0.62l0.74,1.06l0.38,0.15l0.67,1.71l-0.75,-0.06l-0.99,-0.46l-0.41,-1.36l-0.51,-0.62l-0.3,-0.06l-1.13,-2.28l-0.43,-1.16l-0.05,-0.81l-0.86,-0.86l0.22,-0.23l-0.02,-0.44l-0.5,-1.58l-1.22,-1.04l0.13,-0.39l0.48,0.01l0.36,-0.27l-0.15,-0.46l0.39,-0.5l-0.25,-0.33l0.64,-1.17l2.45,-2.92l-0.46,-2.12l-0.54,-0.53l-0.83,0.2l-0.33,0.47l-0.08,1.21l0.02,-1.36l-0.24,-0.67l-0.71,-0.37l-0.82,-0.85l-1.26,-0.5l-0.19,0.45l0.18,0.47l-0.12,0.7l-0.42,0.41l0.16,0.63l1.59,0.75l0.07,0.75l-0.51,1.13l-0.01,0.68l-0.14,-0.43l-0.61,-0.32l-1.46,-1.52l-0.34,0.1l-0.13,-0.47l0.24,-0.16l0.52,-1.42l0.36,-1.67l0.16,-1.13l-0.27,-1.21l0.41,-0.37l0.66,-1.45l-0.1,-0.51l0.96,-2.32l0.5,-4.25l-0.19,-1.37l0.22,-0.44l-0.05,-1.81l-1.49,-1.4l0.04,-0.37l-0.36,-0.51l0.05,-0.75l-0.61,-0.75l-0.23,-1.27l-0.58,-0.36l-1.15,0.04l-0.83,-0.31l-1.25,0.22l-0.67,-1.55l-1.14,-0.6l-0.14,-0.65l-0.81,-1.27l-0.62,-0.6l-0.54,-0.05l-1.02,-1.12l-0.59,-0.27l-0.1,-0.65l0.22,-1.0l-0.15,-0.65l-2.32,-1.36l-0.43,-0.55l-0.25,-1.06l-1.49,-1.89l-1.61,-1.18l-1.18,-0.32l-2.55,-1.83l-0.59,-0.06l-1.88,0.42l-0.49,-0.43l-0.32,-0.01l-0.93,0.21l-0.38,0.48l-1.17,0.38l-0.52,0.52l-0.06,0.45l-0.5,-0.22l-0.44,0.15l-0.2,0.28l0.61,1.06l-1.14,0.05l-1.48,1.01l-0.81,0.25l-1.34,1.14l-1.4,0.6l0.13,-0.22l-0.17,-0.57l-0.59,-0.12l-0.88,0.48l-1.08,1.06l-1.8,-0.09l-1.85,0.59l-0.57,-0.07l0.05,-1.64l-0.89,-1.71l-0.83,-0.92l-1.08,-0.52l-0.24,-0.47l0.68,0.11l0.78,-0.43l0.13,-0.69l-1.13,-0.48l-0.24,0.19l-0.06,-0.58l-0.23,-0.11l0.14,-0.41l-0.43,-0.4l-1.18,0.33l-1.69,-0.84l0.58,-0.71l0.71,-0.01l1.03,-1.13l-0.65,-0.92l-0.48,0.05l-0.51,0.74l-0.33,-0.07l-0.69,0.33l-0.44,-0.76l-0.71,-0.01l-0.15,0.26l-1.22,0.46l-0.13,0.83l-2.88,-1.49l-2.87,-0.85l0.51,-0.3l1.19,0.53l0.66,-0.15l0.15,-0.52l-0.63,-0.96l0.14,-0.55l-0.58,-0.37l-0.38,0.18l-0.14,-0.36l-1.65,-0.12l-1.75,0.48l0.16,-0.22l-0.32,-0.63l-0.81,0.14l-0.49,-0.24l-0.29,0.41l0.07,0.57l-1.2,0.44l-0.48,0.47l-2.77,-0.02l-1.32,0.21l0.19,-0.31l-0.29,-0.52l-1.09,-0.4l-0.46,-0.47l0.54,-0.27l0.23,-0.42l-0.11,-0.32l-0.55,-0.19l-0.61,-0.64l-0.47,0.05l0.0,0.68l-0.44,1.19l-1.03,-1.43l-0.46,-0.17l-0.54,0.32l0.01,1.0l0.4,0.87l-0.29,0.6l-1.22,0.62l-0.2,0.84l-0.46,0.11l-0.26,0.47l-0.99,0.22l0.05,-0.77l1.01,-0.67l0.19,-0.53l-0.29,-0.68l-0.95,-0.33l-0.24,-0.7l0.44,-1.33l0.1,-1.19l-0.3,-0.43l-1.45,-0.93l-1.65,-2.17l0.39,-1.19l-0.01,-0.82ZM679.8,451.12l0.22,0.92l0.68,0.48l0.62,0.02l0.79,1.48l0.63,0.62l1.34,0.85l1.27,0.32l0.56,-0.27l0.12,-0.69l0.52,-0.48l0.06,-0.94l0.81,-0.96l0.36,-1.45l-0.24,-1.4l-0.81,-1.83l-1.15,-1.32l-0.99,-0.33l-1.04,0.49l-1.94,2.2l-1.92,1.18l-0.29,0.61l0.14,0.42l0.25,0.09ZM589.04,389.08l-0.31,0.04l0.16,-0.13l0.15,0.09ZM606.31,392.9l0.6,-0.11l0.19,0.24l-0.06,0.41l-0.73,-0.54ZM688.14,423.83l0.14,0.23l-0.26,0.33l0.12,-0.56ZM610.54,395.68l-0.28,-0.23l0.09,0.03l0.2,0.21ZM598.7,389.73l-0.08,-0.02l0.02,-0.03l0.06,0.05ZM691.83,479.91l-0.0,-0.01l0.01,-0.0l-0.01,0.01ZM686.27,425.8l-0.42,-2.53l1.1,-1.02l-0.62,2.33l-0.06,1.22ZM616.9,402.74l0.12,-0.09l0.17,0.03l-0.09,0.19l-0.19,-0.13Z",
            "name": "Florida"
        },
        "US-WA": {
            "path": "M0.48,23.79l1.02,0.24l4.82,2.58l1.32,0.08l1.15,0.54l1.17,1.14l2.19,0.63l3.55,0.08l1.07,0.58l1.48,-0.27l1.48,0.25l0.56,0.36l2.58,0.16l1.37,-0.88l0.62,0.17l0.76,0.59l0.26,0.44l-0.02,0.71l0.74,0.62l0.34,0.03l0.39,-0.46l-0.12,-0.83l0.51,-0.09l0.19,0.56l0.48,0.19l0.33,0.56l-0.26,0.72l0.45,0.4l0.55,-0.18l0.53,-1.05l-0.21,-0.67l-0.61,-0.7l0.01,-0.31l1.06,-0.53l-0.42,0.4l-0.04,0.74l2.44,4.32l-0.48,0.22l-1.32,2.3l-0.1,-1.49l-0.32,-0.34l-0.61,0.5l-0.63,0.14l-0.19,0.92l0.34,0.97l-0.99,2.13l-1.68,1.92l-0.73,1.72l-0.81,0.96l-0.69,1.98l0.11,0.72l0.77,0.45l0.99,-0.12l2.69,-1.19l1.09,-0.91l-0.2,-0.67l-0.7,-0.07l-2.79,1.56l-0.45,-0.24l1.35,-2.76l1.08,-1.61l2.9,-1.68l0.53,-1.79l1.41,-2.06l0.68,0.48l0.48,-0.31l-0.24,-2.0l0.68,2.23l-0.13,0.21l0.49,0.87l-1.08,0.05l-0.46,0.97l-0.62,-0.67l-0.56,-0.06l-0.23,0.73l0.48,0.66l0.48,1.9l-0.57,-1.25l-0.7,-0.05l-0.3,0.82l0.21,0.94l0.56,0.41l-0.51,0.78l0.11,0.44l0.44,0.06l1.59,-1.02l0.16,0.8l0.36,0.29l-0.66,2.13l-0.07,0.51l0.25,0.59l-0.67,0.92l0.37,1.03l-1.06,-0.51l0.79,-1.76l-0.08,-0.57l-0.37,-0.34l-1.72,1.59l-0.26,0.8l-0.04,-0.85l-0.53,-1.35l-0.5,0.14l-0.65,1.89l-1.15,0.87l-0.69,2.2l-1.46,0.69l-0.35,0.55l0.09,1.23l0.45,0.07l1.03,-0.69l-0.53,0.74l0.71,0.33l0.59,-0.25l0.23,0.69l0.64,0.34l0.45,-0.39l-0.07,-1.91l0.26,0.4l0.8,-0.37l0.89,1.01l0.6,0.25l1.17,-0.95l1.3,-1.92l0.61,-1.87l0.85,0.66l0.76,-0.04l0.39,-0.34l-0.04,-0.62l-0.23,-0.25l1.45,-0.94l0.12,-1.03l-0.65,-1.22l-0.06,-1.28l-0.56,-1.51l0.23,0.33l0.71,-0.18l0.08,-1.01l-0.38,-0.72l-0.9,-0.5l0.64,-1.4l-0.36,-1.83l0.26,-0.76l0.7,-0.86l0.29,-1.58l1.54,-0.92l0.5,-1.36l-0.61,-0.56l-0.54,0.11l-1.22,-1.16l-0.29,-0.64l-0.06,-1.6l-0.49,-0.83l0.32,-0.99l-0.15,-0.86l-1.61,-1.51l-0.75,-0.27l-0.36,-0.67l0.08,-0.56l-0.47,-0.34l0.09,-0.12l0.75,0.55l0.65,-0.29l0.19,-0.53l-0.28,-1.65l0.78,-0.44l0.06,-1.12l-0.34,-0.72l-0.45,-0.34l-0.12,-0.79l-0.31,-0.43l0.33,-0.71l-0.24,-0.85l-1.21,-0.68l-0.57,0.18l-0.34,0.41l-0.75,-0.96l-0.27,-0.83l-0.81,-0.8l0.33,-0.68l-0.19,-0.79l0.44,-0.52l-0.09,-0.26l88.04,-0.0l0.2,58.95l-0.29,1.13l0.19,0.64l1.41,2.21l0.5,2.01l-0.78,1.49l1.08,1.78l-32.52,0.04l-0.91,0.86l-0.6,0.28l-3.78,0.06l-2.18,0.42l-1.51,0.0l-1.48,1.27l-4.22,0.76l-3.08,1.13l-1.48,1.1l-0.94,-0.07l-1.13,0.56l-0.97,-0.13l-0.59,0.23l-2.63,-0.41l-0.8,0.66l-1.69,0.47l-0.83,0.6l-0.81,0.2l-2.25,-0.24l-1.57,0.66l-0.52,-1.15l-0.54,-0.47l-0.83,-0.28l-4.65,-0.46l-2.33,0.42l-1.69,-0.15l-2.44,1.71l-4.32,1.63l-1.27,-0.44l-1.21,-0.02l-1.87,-0.75l-0.89,0.15l-1.06,-0.22l-0.93,-0.93l-0.08,-2.29l-0.4,-0.84l0.09,-1.24l-0.52,-2.29l-0.69,-0.83l-0.68,-1.85l-0.82,-0.8l-2.85,-1.49l-2.84,0.59l-1.36,-1.05l-0.42,-1.02l-0.7,-0.48l-2.43,0.28l-0.64,-0.16l-0.44,-0.73l-0.53,-0.05l-0.88,0.6l-0.9,-0.05l-1.0,0.68l-1.35,-1.22l-0.95,0.01l0.13,-1.52l0.31,0.45l0.72,0.13l0.58,-0.44l0.27,-0.58l0.6,0.49l0.67,-0.2l-0.02,-0.81l-0.82,-0.54l-0.51,-0.8l0.49,-0.44l0.11,-0.51l-0.44,-1.34l0.39,-0.51l-0.37,-1.02l0.09,-0.29l0.67,-0.21l0.18,0.5l0.57,0.28l0.86,-0.55l-0.25,-0.64l-0.37,-0.06l-1.41,-1.26l-0.57,0.07l-0.29,0.32l-2.04,-0.08l-0.35,-2.09l0.83,0.37l0.49,-0.2l0.14,-0.63l-0.41,-0.65l3.27,-1.4l0.08,-0.73l-0.53,-0.25l-1.1,0.0l-0.32,-0.28l-0.91,0.08l-0.38,-1.05l-0.7,-0.55l-1.33,0.12l-0.42,-3.02l-0.5,-1.91l-0.42,-0.88l-0.41,-0.29l-0.08,-0.73l-0.5,-0.24l-0.75,-6.11l-0.79,-2.5l-0.61,-0.5l-0.53,-1.37l-1.01,-1.19l-0.89,-0.38l-1.0,-2.47l-0.26,-2.46l-0.47,-1.12l0.38,-0.68l0.19,-2.45l0.33,-0.78l-0.13,-0.41l-0.78,-0.76ZM30.39,49.19l0.36,0.76l-0.31,0.67l-0.25,-1.0l0.21,-0.42ZM35.29,26.67l-0.48,1.14l-0.0,0.74l-0.21,-1.26l0.32,-0.5l0.37,-0.12ZM33.08,21.81l-0.44,0.61l-0.32,0.01l0.21,-0.83l-0.24,-0.64l0.26,-0.16l0.53,1.01ZM31.24,26.46l1.29,-2.72l0.5,-0.14l0.19,0.71l0.81,0.69l-0.01,0.32l-0.54,-0.48l-0.52,0.01l-0.44,0.6l-0.38,-0.01l-0.17,0.86l-0.72,0.18ZM31.56,27.59l0.6,-0.11l0.76,0.38l0.2,0.45l-0.4,-0.17l-0.52,0.12l-0.64,-0.65ZM33.4,30.05l0.04,0.76l0.01,0.1l-0.14,-0.34l0.09,-0.52ZM34.2,32.5l0.53,-0.31l0.09,-1.03l1.43,1.09l0.4,1.17l-0.27,0.48l-0.4,0.0l-0.3,-1.19l-0.35,-0.37l-0.54,-0.05l-0.44,0.38l-0.15,-0.18ZM34.84,46.26l0.08,-1.23l0.17,-0.34l0.26,1.15l-0.52,0.41ZM33.99,41.3l-0.15,-1.12l0.3,-0.55l0.17,1.83l-0.32,-0.16ZM31.48,19.03l-0.0,-0.01l0.0,0.01l-0.0,0.0ZM31.38,51.98l0.18,-0.33l0.05,0.01l-0.06,0.38l-0.18,-0.05ZM27.43,17.03l0.49,-0.56l0.03,0.65l0.57,1.0l-0.3,0.01l-0.28,-0.69l-0.51,-0.41ZM29.13,16.19l1.16,0.69l-0.66,0.55l-0.5,-1.24ZM28.65,19.74l0.04,0.39l-0.04,0.81l0.18,0.67l-0.63,-0.4l0.47,-1.04l-0.02,-0.43ZM28.97,21.78l0.54,0.13l-0.05,0.21l-0.36,-0.04l-0.12,-0.31ZM28.55,49.88l0.05,0.18l0.22,0.33l-0.31,-0.36l0.04,-0.16ZM26.32,20.97l-1.05,-0.32l-0.35,-0.34l-0.34,-1.44l0.07,-0.58l0.34,0.06l1.59,1.65l-0.34,0.29l0.07,0.68Z",
            "name": "Washington"
        },
        "US-KS": {
            "path": "M459.6,207.65l0.38,0.6l0.71,0.2l0.94,0.79l0.64,-0.07l0.92,-0.69l0.53,-0.13l-0.04,0.68l0.96,0.77l-0.09,0.82l0.21,0.5l-0.83,-0.22l-0.6,0.27l-0.2,0.87l-1.14,1.21l-0.11,1.02l-0.55,0.12l-0.21,0.33l0.01,0.6l1.35,2.0l1.08,0.73l0.2,0.51l0.5,0.23l0.13,1.03l0.34,0.8l0.66,0.55l0.26,1.04l1.71,0.93l0.88,0.04l0.52,0.28l0.01,41.94l-114.85,0.0l-0.18,-58.96l104.38,0.0l0.91,0.95l0.57,0.25Z",
            "name": "Kansas"
        },
        "US-WI": {
            "path": "M588.92,91.5l0.86,-0.03l-0.25,0.8l-0.57,-0.06l-0.04,-0.71ZM583.24,99.51l0.53,-0.34l0.58,-2.33l0.59,0.12l0.39,-0.23l0.74,-0.61l0.41,-1.38l0.5,-0.58l0.65,0.06l0.02,0.41l-0.78,-0.05l-0.25,0.48l0.17,0.33l-0.17,0.97l-0.41,0.12l-0.19,0.56l0.49,0.65l-0.33,0.61l-0.54,0.26l-0.95,1.81l-0.25,0.79l0.15,0.45l-1.36,2.13l-0.43,0.09l-0.73,-1.08l-0.09,-0.74l0.52,-1.52l0.76,-0.97ZM497.91,98.69l0.43,-0.24l0.35,-0.88l-0.34,-1.53l0.19,-1.93l0.79,-1.11l0.71,-2.23l-0.13,-0.57l-0.76,-0.99l-0.52,-1.51l-0.81,-0.42l-1.3,-0.11l-0.19,-0.5l0.14,-1.87l1.88,-2.17l0.01,-0.79l0.91,-1.52l2.08,-0.95l0.55,-0.73l1.01,-0.18l0.53,-0.74l0.86,0.11l0.33,-0.15l0.41,-0.82l0.78,-0.69l0.01,-12.59l1.1,-0.27l0.32,-1.12l0.56,-0.33l0.29,-0.63l0.75,0.79l1.67,0.82l2.74,-0.35l3.52,-1.33l2.8,-0.6l2.5,-2.01l0.29,0.34l1.43,0.02l0.51,-0.71l0.55,-0.1l0.38,-0.6l0.87,-0.53l1.09,0.01l0.48,-0.5l0.29,0.53l0.51,0.06l0.23,0.56l-0.67,1.73l-0.77,0.89l-0.16,1.01l0.23,0.7l-1.3,1.79l-0.18,0.44l0.18,0.5l0.68,0.26l0.53,-0.12l1.95,-0.84l0.75,-0.78l2.1,1.49l2.35,0.73l0.4,0.6l0.9,-0.05l1.57,0.9l1.56,3.56l0.35,0.33l15.53,4.32l4.5,2.55l1.11,0.17l0.61,-0.14l1.6,0.63l1.43,-0.44l1.76,0.71l0.69,-0.05l0.69,0.45l2.2,0.37l0.82,0.52l0.46,0.98l-0.57,1.06l0.31,0.82l0.76,0.45l1.03,-0.02l0.55,0.48l1.01,0.16l1.28,1.33l-0.25,0.7l0.46,1.2l-0.46,0.77l0.27,1.31l-0.95,1.16l-0.26,1.76l0.3,0.49l0.53,0.25l1.42,-0.08l1.13,-0.59l0.17,0.29l-0.41,0.53l-0.71,1.82l-0.13,1.32l1.13,1.63l0.8,0.46l-0.34,0.66l-0.16,1.33l-2.58,0.88l-0.61,0.72l0.07,0.84l-0.19,0.42l-0.87,1.04l-0.4,1.22l-0.78,1.0l-0.08,1.06l-0.42,0.73l-0.34,1.63l1.0,0.95l0.92,0.08l0.54,-0.3l0.67,-1.29l2.0,-1.23l0.64,-1.05l-0.06,-0.49l0.42,-0.89l1.29,-1.55l0.1,0.26l0.46,-0.01l0.67,-0.63l0.56,0.02l0.37,-0.3l0.98,1.26l0.56,0.27l-0.58,2.16l-1.54,2.64l-0.83,4.13l-0.46,1.3l0.08,1.13l0.67,1.02l0.0,0.52l-0.63,0.89l-0.91,0.5l-0.54,0.65l-1.35,3.7l-0.19,2.53l0.55,1.26l-0.1,1.21l-1.46,3.0l-0.15,2.07l-0.98,1.95l-0.58,2.35l0.32,2.03l-0.2,1.27l0.41,0.58l-0.41,1.61l0.79,0.87l0.22,2.4l0.97,1.62l-0.14,1.62l-0.5,1.35l0.09,2.86l-43.19,-0.41l-0.12,-0.77l-0.88,-1.8l-0.43,-0.45l-4.71,-1.26l-0.9,-1.38l-0.2,-1.65l-0.77,-1.24l-0.39,-4.8l0.14,-0.61l1.11,-1.82l0.01,-0.97l-0.63,-0.84l-1.36,-0.59l-0.54,-1.77l-0.09,-4.26l0.18,-1.65l-0.11,-0.68l-0.45,-0.75l-0.01,-1.46l-0.28,-1.1l-1.09,-0.7l-0.95,-1.63l-0.91,-0.19l-1.09,-0.84l-1.7,-0.06l-1.88,-1.69l-0.61,-0.31l-1.99,-3.65l-2.45,-2.3l-2.89,-0.77l-0.63,-1.29l-1.04,-1.08l-3.08,-0.69l-2.15,-2.17l-1.18,-0.83l0.55,-1.2l0.01,-1.62l0.31,-0.79l-0.22,-1.91l-0.43,-1.28ZM534.18,54.68l0.0,-0.0l0.13,-0.45l0.02,0.27l-0.15,0.18ZM532.09,56.77l0.06,-0.02l0.03,-0.01l-0.02,0.04l-0.06,-0.02ZM529.75,59.98l0.42,-0.26l0.06,0.13l-0.48,0.13Z",
            "name": "Wisconsin"
        },
        "US-OR": {
            "path": "M3.1,147.11l1.91,-4.32l0.88,-6.23l0.2,0.72l0.63,0.36l0.4,-0.4l-0.02,-0.75l0.3,-0.42l-0.11,-0.49l0.32,-0.55l0.54,0.85l0.73,0.23l0.44,-0.11l0.18,-0.61l-0.86,-1.54l0.16,-0.44l-0.12,-0.46l-0.47,-0.02l-0.66,0.48l0.87,-3.39l0.84,-1.19l0.92,0.07l0.4,-0.4l-0.12,-0.42l-0.6,-0.49l-0.86,-0.18l0.54,-4.83l0.31,-0.66l-0.23,-0.95l0.37,-2.82l-0.05,-2.65l0.53,-2.1l0.39,0.19l0.55,-0.49l-0.19,-0.57l-0.89,-0.41l0.37,-2.78l0.36,0.13l0.53,-0.34l0.04,-0.37l-0.17,-0.48l-0.63,-0.17l-0.14,-3.94l0.75,-2.06l0.2,-2.76l-0.15,-0.4l0.46,-0.91l0.21,-1.1l-0.03,-2.09l0.23,-0.51l-0.05,-1.25l-0.3,-0.45l0.9,-1.37l-0.11,-0.59l-0.62,-0.53l0.0,-0.42l0.63,0.34l0.46,-0.02l0.61,-0.81l-0.57,-0.64l0.04,-0.7l-0.95,-0.56l0.23,-1.2l1.07,-1.18l-0.06,-0.46l-1.0,-0.1l-0.65,-1.16l0.37,-1.0l0.05,-1.38l-0.43,-1.46l0.73,-0.75l0.23,-1.46l-0.32,-1.99l-0.59,-1.42l1.15,0.97l0.65,0.02l0.11,0.93l0.67,0.38l0.57,-1.15l-0.53,-0.92l0.22,-0.14l0.38,0.5l0.76,0.15l1.51,-0.34l0.28,-0.45l1.32,-0.53l1.05,1.51l0.45,0.32l2.64,0.31l1.08,-0.95l0.8,-0.15l1.1,0.77l1.0,0.31l1.03,0.85l0.67,1.84l0.62,0.67l0.47,2.05l-0.09,1.33l0.41,0.87l-0.01,1.83l0.6,1.37l0.98,0.65l1.22,0.25l0.84,-0.16l1.67,0.7l1.44,0.08l1.19,0.44l4.8,-1.7l1.78,-1.35l0.85,-0.38l1.25,0.24l2.24,-0.42l4.54,0.45l0.82,0.39l0.45,1.1l0.69,0.45l1.78,-0.69l2.25,0.24l0.97,-0.24l0.8,-0.6l1.87,-0.54l0.6,-0.57l2.38,0.45l0.66,-0.23l1.03,0.11l1.13,-0.56l1.05,0.04l1.59,-1.15l2.97,-1.09l4.19,-0.75l1.41,-1.25l1.44,0.01l2.12,-0.41l3.83,-0.06l0.92,-0.39l0.68,-0.75l32.59,-0.04l0.56,1.79l1.26,1.67l1.27,0.42l0.45,0.49l1.85,1.04l1.0,2.36l0.02,1.04l-0.74,1.0l-0.44,1.45l-1.71,2.75l-0.15,1.48l-0.92,2.86l-1.77,2.79l0.1,1.43l-0.27,1.34l-1.15,2.08l-1.44,1.13l-0.5,0.74l-1.02,2.4l-0.28,1.23l-1.24,1.52l0.08,0.8l-0.32,1.29l0.31,1.03l-0.09,0.82l0.44,0.85l0.66,0.5l0.54,-0.06l0.32,-0.41l0.25,0.4l0.51,0.23l0.86,-0.21l0.22,0.84l0.95,0.78l-0.27,1.05l-0.63,0.17l-0.26,0.45l0.53,1.71l-0.55,2.66l-0.94,1.59l0.16,0.88l0.05,37.55l-111.59,0.0l-2.04,-2.08l-0.36,-2.16l-0.44,-0.78l-0.42,-1.63l0.26,-0.9l-0.18,-1.89l0.59,-2.04l-0.24,-1.84l-1.31,-2.22l-0.35,-0.06l-0.55,-1.65Z",
            "name": "Oregon"
        },
        "US-KY": {
            "path": "M550.66,275.14l0.49,-1.75l0.87,0.91l0.63,0.25l0.89,-0.39l1.36,-3.03l0.13,-1.14l-0.29,-1.04l0.43,-0.71l0.1,-1.79l-0.92,-1.78l1.45,-2.22l1.01,-0.63l1.24,0.05l5.4,2.8l0.8,0.19l0.8,-0.21l0.55,-0.59l0.36,-0.95l-0.05,-0.79l-1.06,-1.89l-0.12,-0.6l0.33,-1.4l0.39,-0.4l1.01,-0.04l1.21,-0.6l2.8,-0.51l0.65,-0.39l0.28,-1.04l-1.14,-1.98l0.0,-0.58l0.3,-0.56l1.12,-1.02l0.27,-0.99l1.04,0.51l0.45,-0.18l0.75,-0.88l0.07,-0.41l-0.45,-1.44l0.84,0.76l0.75,0.27l1.62,-0.52l-0.11,0.99l0.53,0.52l0.37,0.04l1.02,-0.73l0.21,-1.13l1.0,0.01l1.22,-0.5l3.21,1.75l0.56,0.11l0.47,0.9l0.35,0.27l0.44,-0.0l0.62,-0.47l0.97,-2.14l1.31,-0.31l1.4,-1.01l0.61,1.23l0.66,0.48l1.01,0.04l0.04,0.66l0.85,0.29l0.71,-0.49l0.15,-0.86l1.0,-0.43l0.16,-2.1l0.8,-0.24l0.39,-0.48l0.04,-0.58l1.17,-0.35l0.42,-0.57l0.1,1.31l0.48,0.62l1.24,0.76l1.13,0.16l0.89,0.86l0.53,-0.03l0.31,-0.45l1.05,-0.26l0.58,-0.56l0.3,-0.85l0.21,-2.24l1.06,-1.81l0.88,0.31l1.58,-0.86l0.48,-0.91l0.35,-1.66l0.32,-0.4l1.0,-0.19l1.82,-1.77l0.12,-0.77l-0.67,-2.69l2.58,-0.13l0.7,0.7l0.6,0.24l0.76,-0.19l3.16,-1.78l1.67,0.07l0.44,-0.16l0.19,-0.47l-0.18,-0.55l0.54,-1.26l-0.26,-0.4l-1.06,-0.19l0.52,-0.56l0.18,-0.61l-0.76,-1.52l1.75,-1.37l1.48,1.31l0.87,0.03l1.3,-0.6l0.59,-0.03l0.58,0.9l1.52,0.74l0.32,1.22l0.72,0.96l0.45,1.78l2.27,0.99l1.8,-0.22l1.42,0.49l1.69,1.98l0.82,0.53l1.2,0.04l0.5,-0.41l0.28,-0.67l0.96,-0.31l1.13,0.65l1.21,0.24l1.03,1.18l0.81,-0.11l0.46,-0.3l1.3,0.1l0.48,-0.24l0.47,-0.84l1.13,-0.9l1.69,-0.63l0.44,2.21l0.5,0.86l2.09,1.13l1.05,1.08l0.49,1.03l-0.06,0.91l0.39,1.03l-0.05,1.12l-0.41,0.36l-0.04,0.65l-0.49,0.46l-0.07,0.5l1.58,2.7l1.06,1.02l-0.14,0.94l0.88,0.75l0.33,1.36l1.23,1.39l0.51,1.49l1.05,0.55l0.48,0.61l0.34,0.03l0.79,1.16l1.76,0.59l-5.26,4.46l-5.19,2.8l-0.53,0.71l0.0,1.1l-1.52,0.78l-0.63,0.58l-0.22,1.42l-1.97,0.79l-0.99,0.15l-1.07,1.54l-0.05,0.41l-1.57,0.25l-1.6,0.54l-1.06,0.63l-1.54,0.17l-1.52,0.53l-1.04,0.76l-0.81,0.29l-21.62,-0.76l-4.77,0.12l-6.85,-0.19l-9.98,-0.69l-20.58,0.38l-0.52,-0.56l-3.25,-0.33l-0.35,0.14l-0.12,0.38l0.53,2.17l-0.0,1.01l-20.62,-0.01ZM548.18,275.11l0.02,-0.4l0.35,0.03l0.09,0.36l-0.46,0.01Z",
            "name": "Kentucky"
        },
        "US-CO": {
            "path": "M352.94,206.04l0.18,59.36l-108.39,0.0l0.0,-79.44l108.2,0.01l0.01,20.08Z",
            "name": "Colorado"
        },
        "US-OH": {
            "path": "M642.65,170.63l0.3,0.32l1.21,0.38l1.04,-0.11l1.39,1.24l1.99,0.63l1.19,1.34l1.32,0.48l-0.68,0.43l-1.33,0.28l-0.2,0.44l0.37,0.31l0.77,0.03l0.25,0.28l0.59,-0.03l0.68,0.3l1.5,-0.79l0.4,-0.07l0.7,0.27l0.6,-0.13l1.34,0.77l0.5,-0.05l1.18,0.75l0.88,0.09l1.62,-0.94l1.74,-0.25l1.25,-0.69l1.97,-0.56l2.47,0.44l0.73,-0.06l0.41,-0.32l0.65,0.26l0.53,-0.1l1.15,-0.55l5.01,-4.29l4.93,-2.38l1.02,-0.19l1.15,-0.47l0.34,-0.37l4.85,-1.71l0.0,26.9l-0.56,0.38l-0.65,-0.06l-0.63,0.22l-0.57,0.8l0.11,0.62l1.0,1.74l-0.38,1.91l0.32,0.32l0.11,0.9l-0.18,0.68l-0.58,0.53l-0.42,0.95l-0.91,2.83l-0.09,1.65l-0.35,1.18l-0.59,0.29l0.1,1.06l-0.64,1.49l-0.46,0.42l0.03,0.62l0.43,0.64l-0.39,0.61l-0.19,1.0l-2.69,1.93l-1.1,1.52l-0.63,0.26l-0.89,0.84l-1.26,0.38l-0.66,0.51l-0.62,-0.97l-1.13,-0.09l-1.52,1.33l-0.32,1.16l-1.19,0.13l-0.58,0.34l-1.11,1.87l-0.03,1.46l-1.0,0.61l0.16,0.67l0.5,0.48l-0.01,1.11l-0.71,0.06l-0.37,0.9l-0.35,0.44l0.26,-0.78l-0.61,-1.3l-1.32,-0.76l-0.62,0.07l-0.57,0.45l-1.02,1.56l-0.77,2.33l-0.63,0.67l0.49,3.38l-0.88,0.03l-0.53,0.27l-0.73,2.67l-0.24,0.24l-1.21,0.11l-1.27,0.46l-0.88,-0.11l-0.5,-1.06l-1.18,-1.23l-2.0,-1.03l-0.73,-1.87l-0.1,-1.06l-0.64,-0.46l-2.28,0.82l-1.2,0.97l-0.52,0.86l-1.31,-0.09l-0.87,0.4l-0.84,-1.06l-1.35,-0.32l-0.64,-0.51l-0.78,-0.19l-1.38,0.44l-0.68,1.03l-0.63,-0.07l-2.41,-2.48l-1.71,-0.55l-1.7,0.24l-1.85,-0.78l-0.28,-1.51l-0.71,-0.96l-0.44,-1.42l-1.68,-0.9l-0.4,-0.73l-0.49,-0.34l-0.94,0.09l-1.33,0.6l-0.41,-0.04l-1.45,-1.36l-0.47,0.02l-0.76,0.59l0.42,-52.16l20.02,-0.77ZM652.38,174.71l0.52,-0.57l0.42,0.47l-0.37,0.21l-0.57,-0.1Z",
            "name": "Ohio"
        },
        "US-OK": {
            "path": "M385.72,311.93l-0.05,-36.41l-0.39,-0.4l-46.33,-0.01l-0.01,-8.92l129.83,0.0l-0.0,9.38l2.79,21.41l-0.69,32.43l-0.95,-0.23l-0.24,-0.32l-1.81,-0.29l-0.89,-0.79l-1.58,-0.33l-1.43,-1.82l-1.06,-0.25l-1.87,-1.43l-1.31,-0.41l-0.74,0.37l-0.26,0.76l-0.67,0.14l-0.45,0.51l-2.1,-0.22l-0.34,-0.18l-0.23,-0.58l-0.9,-0.57l-2.08,1.01l-1.03,0.15l-0.21,0.44l-0.52,0.23l-1.32,-0.72l-0.48,-0.01l-1.5,0.94l-1.01,0.03l-0.81,0.34l-0.75,1.12l-1.27,0.0l-0.39,0.36l-0.13,0.66l-1.0,-1.32l-0.51,-0.2l-0.95,0.04l-0.36,-0.55l-0.95,-0.37l-0.14,-0.15l0.17,-0.63l-0.39,-0.48l-1.11,-0.18l-0.69,1.16l-0.52,0.06l-0.72,-0.45l-0.82,0.04l-0.56,-1.29l-0.98,-0.34l-0.95,0.33l-0.54,1.57l-0.56,-0.09l-0.5,0.42l0.19,0.61l-0.29,0.45l-0.15,0.95l-0.32,0.12l-0.43,-0.45l-0.23,-0.75l0.34,-0.7l0.04,-0.7l-0.65,-0.79l-0.76,0.13l-0.42,0.6l-0.74,-0.14l-0.82,0.8l-0.89,0.08l-0.41,-1.16l-0.71,-0.25l-0.98,0.05l-0.22,-1.25l-1.08,-0.51l-0.74,0.27l-1.88,1.79l-1.02,0.4l-0.78,-0.3l0.17,-1.51l-0.22,-0.53l-1.99,-0.62l-0.03,-1.82l-0.38,-0.52l-0.72,-0.03l-1.15,0.32l-2.19,-0.25l-0.58,0.23l-0.72,1.01l-0.78,0.03l-1.51,-1.53l-0.86,-0.12l-1.29,0.45l-2.3,-0.56l-1.61,-0.88l-0.92,0.2l-2.11,-0.28l-0.12,-1.8l-0.73,-0.75l-0.37,-0.87l-1.02,-0.38l-0.6,-0.71l-0.79,0.08l-0.36,1.38l-1.91,-0.59l-0.95,0.51l-0.82,-0.08l-3.28,-3.24l-0.99,-0.38l-0.66,0.06Z",
            "name": "Oklahoma"
        },
        "US-WV": {
            "path": "M656.29,242.87l0.43,-0.4l0.13,-0.71l0.45,-0.49l0.05,-1.48l-0.36,-1.34l0.93,-0.02l2.87,-0.71l0.46,-0.59l0.58,-2.42l1.06,0.01l0.49,-0.49l-0.08,-2.34l-0.34,-1.18l0.55,-0.49l0.8,-2.41l0.9,-1.36l0.45,-0.26l1.02,0.69l0.24,0.67l-0.31,1.01l0.58,0.54l0.81,-0.26l0.68,-1.14l0.38,0.24l0.57,-0.08l0.29,-0.4l-0.25,-0.9l0.04,-1.07l-0.56,-0.6l0.85,-0.56l0.07,-1.59l1.03,-1.64l1.6,-0.18l0.44,-1.4l1.16,-1.08l0.39,0.0l0.45,0.81l0.6,0.3l0.59,-0.16l0.49,-0.46l1.3,-0.4l0.94,-0.87l0.73,-0.34l1.06,-1.49l2.93,-2.23l0.61,-1.83l-0.46,-1.04l0.36,-0.32l0.71,-1.65l-0.07,-0.7l0.63,-0.43l0.4,-3.15l1.18,-3.45l0.64,-0.62l0.29,-1.02l-0.12,-1.17l-0.3,-0.39l0.32,-0.91l0.02,-0.9l-1.09,-2.02l0.49,-0.38l0.82,0.07l0.31,-0.22l0.01,18.2l0.4,0.4l15.83,-0.01l-0.16,9.93l0.41,0.47l0.66,-0.27l1.72,-1.55l1.0,-0.31l0.51,-0.84l1.89,-1.45l0.44,-0.88l0.53,-0.25l0.99,0.64l0.75,-0.14l1.74,-2.06l0.64,-0.29l0.09,-0.7l0.31,0.57l1.5,0.8l1.33,0.23l0.67,-0.23l1.03,0.14l0.92,-0.63l0.41,-1.28l0.74,-0.27l1.2,0.02l1.28,-1.29l0.62,0.05l1.81,1.63l0.74,0.38l1.78,-0.26l-0.63,0.8l0.3,0.94l1.06,0.66l-0.12,0.87l0.91,0.6l-0.18,1.08l0.21,0.45l-1.28,3.05l-7.17,-5.83l-0.66,0.08l-0.54,0.98l0.01,1.5l-0.81,1.34l-0.1,2.09l-1.73,1.85l-0.75,1.47l-0.76,0.32l-0.6,0.89l-0.27,0.12l-0.51,-0.32l-0.43,0.23l-1.78,2.63l-1.48,-1.04l-0.67,0.1l-1.42,2.27l-0.22,1.31l-0.89,0.87l-0.64,2.02l-1.22,1.74l-2.8,-0.93l-0.97,-1.83l-1.5,-0.55l-0.56,0.29l-0.28,1.23l-0.38,0.64l-0.08,1.18l-0.56,1.21l-0.53,0.3l-0.48,0.86l0.02,0.86l-1.88,1.84l-0.44,1.84l-0.84,1.65l-3.19,3.65l-1.27,2.63l-0.01,0.74l0.9,0.66l-1.21,0.99l-0.07,0.57l0.28,0.42l-2.19,1.37l-0.39,-0.66l-0.78,-0.02l-3.23,1.63l-0.81,-0.66l-1.24,-0.01l-0.58,0.74l0.19,1.08l-0.93,0.6l-0.65,-0.16l-2.19,0.47l-1.23,0.62l-1.69,-1.54l-0.67,-0.14l-0.47,0.29l-0.55,0.95l-1.05,0.24l-0.99,1.0l-0.33,0.06l-0.96,-0.11l-0.92,-0.56l-0.64,-0.73l-1.15,-0.23l-0.41,-0.74l-0.96,-0.74l-0.01,-1.14l-0.68,-0.67l0.41,-0.55l-0.15,-0.76l-0.72,-0.49l-0.79,0.07l-1.15,-0.37l-0.26,-0.62l-0.65,-0.63l-1.7,-1.02l-0.47,-1.42l-1.18,-1.3l-0.37,-1.43l-0.78,-0.68l0.19,-0.46l-0.14,-0.53l-1.08,-1.06l-1.44,-2.38Z",
            "name": "West Virginia"
        },
        "US-WY": {
            "path": "M213.5,100.68l108.19,-0.0l0.05,84.48l-108.23,0.0l-0.01,-84.48Z",
            "name": "Wyoming"
        },
        "US-UT": {
            "path": "M172.31,165.14l40.4,0.0l0.0,20.4l0.4,0.4l30.82,0.0l-0.0,79.44l-77.02,-0.06l-0.04,-100.19l5.43,0.0ZM182.44,174.3l-0.28,0.07l-0.16,0.63l1.17,3.31l-0.74,0.3l-0.33,0.8l0.03,0.51l0.39,0.33l0.79,0.08l0.3,-0.37l-0.06,-0.47l0.3,-0.2l1.02,0.93l0.34,0.8l0.65,0.64l-0.11,0.96l0.33,1.33l-0.28,0.77l0.43,0.44l0.03,0.52l1.71,1.51l0.11,0.54l0.63,0.53l0.68,1.12l0.68,-0.19l0.55,-1.7l0.34,1.06l0.01,1.01l0.62,0.81l0.06,1.33l0.22,0.33l1.0,0.32l1.48,-0.82l2.13,-1.94l0.2,-1.19l0.76,-0.53l0.69,-0.15l1.51,-1.05l0.11,-0.54l-0.62,-0.9l-0.75,-0.71l-1.36,-0.49l-0.55,-1.31l-0.61,-0.51l-0.25,-0.91l-0.84,-0.84l-0.07,-0.47l-0.4,-0.35l-0.47,0.0l0.68,-0.91l1.3,0.4l0.5,-0.28l0.76,-0.03l0.77,-0.9l-0.2,-1.06l-0.35,-0.24l-1.2,-0.06l-0.72,0.49l-1.11,0.03l0.24,-0.39l-0.08,-0.34l-0.66,-0.67l-0.7,0.05l-0.34,-0.21l-0.77,0.18l-0.4,1.14l0.36,0.71l-0.24,0.67l0.82,2.19l-0.81,0.4l-0.35,-0.33l-0.15,-0.74l0.13,-0.97l-0.49,-0.6l-0.28,-1.62l-0.73,-0.48l-0.59,-0.07l-0.36,0.27l-0.32,-0.14l-1.21,-1.32l-0.26,-0.6l0.53,-0.59l0.18,-1.27l-0.97,-1.21l-0.48,-0.19l-0.73,0.08l-0.84,0.89l-1.2,0.1l-1.37,0.44l-0.27,0.66l0.23,0.46l0.46,0.24l-0.2,0.41ZM194.94,185.4l0.4,0.76l-0.05,0.78l-0.45,-0.75l0.11,-0.79Z",
            "name": "Utah"
        },
        "US-IN": {
            "path": "M571.96,249.53l-0.01,-0.47l-0.38,-0.41l0.52,-0.5l-0.15,-1.04l0.23,-0.46l-0.01,-1.28l0.93,-0.58l0.0,-0.59l-0.32,-0.24l0.63,-0.28l0.32,-0.53l-0.06,-0.42l-0.83,-1.01l0.53,-0.93l0.24,0.17l1.36,-0.33l0.52,-1.57l0.55,-0.29l0.51,-0.77l0.06,-0.74l1.5,-0.78l0.15,-0.63l-0.27,-0.86l0.63,-0.7l0.27,-1.13l0.86,-0.36l0.6,-1.68l-0.68,-2.42l0.3,-0.68l-0.02,-1.05l-0.75,-0.93l-0.38,-1.42l-0.87,-0.82l0.04,-0.5l1.02,-1.16l-0.31,-2.09l1.05,-0.61l0.29,-0.45l0.18,-47.43l0.65,0.29l0.58,0.69l1.99,0.4l1.5,-0.16l2.68,-0.96l2.88,-1.62l31.39,0.02l-0.42,53.87l-0.77,0.96l0.15,0.9l0.61,0.79l-0.76,0.9l0.01,0.48l0.58,0.49l0.72,0.07l-0.36,0.53l-0.04,0.84l-1.65,0.01l-3.67,1.91l-1.17,-0.92l-2.84,0.13l-0.45,0.22l-0.21,0.72l0.65,2.92l-1.52,1.47l-1.15,0.29l-0.54,0.75l-0.63,2.26l-1.09,0.62l-0.94,-0.35l-0.51,0.37l-1.19,2.07l-0.43,2.89l-1.63,0.8l-0.73,-0.7l-1.12,-0.16l-1.07,-0.65l-0.23,-0.28l0.03,-1.0l-0.2,-0.46l-0.97,-0.79l-0.75,-0.21l-0.46,0.22l-0.11,0.5l0.6,0.69l-0.5,0.16l-0.78,-0.42l-0.39,0.24l-0.1,0.46l0.37,0.86l-1.05,0.46l-0.21,0.66l0.02,1.48l-1.04,0.45l-0.11,0.62l-0.25,-0.53l-1.46,-0.04l-0.62,-0.71l-0.42,-0.95l-0.48,-0.14l-1.69,1.12l-0.95,0.12l-0.56,0.31l-1.3,2.42l-0.59,-1.04l-2.42,-1.02l-0.93,-0.67l-0.97,-0.29l-1.68,0.61l-0.31,-0.29l-0.13,-0.66l-0.54,-0.25l-0.58,0.46l0.01,0.82l0.35,0.9l-0.38,0.67l-0.21,0.05l0.12,-1.02l-0.35,-0.43l-0.55,-0.06l-1.41,0.53l-1.16,-0.89l-0.53,-0.15l-0.55,0.21l-0.29,0.65l0.45,1.46l-0.49,0.56l-0.95,-0.46ZM593.79,248.29l-0.06,0.28l-0.09,0.06l0.15,-0.34Z",
            "name": "Indiana"
        },
        "US-IL": {
            "path": "M518.87,198.66l0.84,-0.25l0.43,-0.62l-0.02,-2.17l-0.61,-0.93l0.17,-0.34l0.72,-0.57l2.36,-0.7l0.74,-0.55l0.75,-1.51l0.35,-1.94l1.78,-2.15l0.35,-0.86l0.08,-1.15l-0.38,-1.87l-0.58,-0.83l-1.36,-1.12l0.05,-1.65l0.84,-2.16l0.45,-0.31l4.46,-0.38l0.81,-0.31l0.89,-0.97l2.52,-0.7l1.52,-1.34l0.21,-0.65l-0.06,-0.84l0.55,-1.56l1.5,-1.23l0.36,-0.68l0.75,-4.1l-0.52,-2.12l-3.62,-2.74l-0.12,-1.44l-0.39,-0.84l-3.28,-2.68l43.54,0.42l-0.34,2.51l0.23,2.53l1.01,2.53l1.13,1.05l0.4,2.54l0.86,2.71l1.12,1.91l-0.18,48.21l-0.77,0.37l-0.48,0.51l-0.18,0.64l0.42,1.04l-0.01,0.6l-0.89,0.87l-0.17,1.03l0.23,0.5l0.75,0.65l0.34,1.33l0.72,0.84l-0.31,1.61l0.69,2.19l-0.42,1.26l-0.87,0.41l-0.42,0.84l0.04,0.46l-0.65,0.76l-0.08,0.47l0.22,0.64l-1.44,0.82l-0.28,0.38l0.18,0.64l-0.36,0.56l-0.62,0.38l-0.42,1.01l-0.34,-0.07l-0.43,0.42l-0.27,-0.18l-0.55,0.26l-0.77,1.43l0.05,0.77l0.76,0.83l-1.26,0.83l0.18,0.74l-0.35,0.13l-0.19,0.53l0.04,2.59l-0.63,-0.12l-0.42,0.18l0.03,0.45l0.65,0.72l-0.37,0.11l-0.11,0.62l0.71,0.35l-0.01,0.34l-1.4,1.58l-0.36,1.04l0.4,1.18l0.56,0.65l0.21,0.94l-3.08,0.7l-1.16,0.59l-1.16,0.08l-0.82,0.83l-0.39,1.81l0.18,0.82l1.04,1.83l0.01,0.46l-0.58,0.96l-0.83,-0.08l-5.39,-2.8l-0.98,-0.19l-0.84,0.12l-1.29,0.8l-1.66,2.52l-0.03,0.52l-0.32,-0.21l-0.19,-0.71l-0.37,-0.21l-1.02,0.25l-0.12,0.53l0.3,0.62l-0.82,-0.71l0.05,-0.6l-1.21,-2.1l-0.26,-1.04l-0.62,-0.39l0.0,-0.38l0.98,-1.1l0.29,-0.92l-0.19,-0.94l-1.09,-1.92l0.11,-1.37l-0.23,-1.5l-1.94,-1.1l-1.19,-2.05l-1.68,-0.91l-1.43,-1.36l-1.41,-0.28l-0.95,-0.8l-0.6,-0.22l-1.13,-1.25l-0.8,-0.54l-1.9,-2.38l-0.15,-1.75l2.8,-5.92l-0.0,-2.1l0.67,-0.81l0.42,-0.95l-0.27,-0.83l-2.32,-1.57l-1.48,-0.37l-0.85,-0.47l-1.02,0.15l-1.16,1.37l-0.43,0.2l-0.38,-0.15l-1.01,-1.8l-0.26,-1.41l0.22,-0.79l-0.41,-0.87l-0.12,-1.52l-0.65,-1.32l-0.79,-0.91l-3.58,-2.65l-0.79,-1.58l-3.91,-3.6l-0.52,-1.8l-0.87,-1.19l0.1,-1.46l-0.77,-1.44l-0.4,-3.31l0.34,-2.69l0.66,-1.11Z",
            "name": "Illinois"
        },
        "US-AK": {
            "path": "M78.2,455.37l0.42,-0.29l0.17,-0.22l0.64,-0.02l0.37,-0.17l0.11,-0.12l0.1,-0.23l0.01,-0.21l-0.06,-0.13l0.17,-0.09l-0.05,-0.32l0.14,-0.13l0.31,0.22l0.22,0.04l0.23,-0.05l0.32,-0.15l0.33,-0.3l0.27,-0.15l0.18,-0.21l0.06,-0.15l-0.03,-0.1l0.17,-0.06l0.08,-0.33l0.22,-0.34l0.56,-0.42l0.34,-0.14l0.44,-0.32l0.06,0.01l-0.01,0.1l0.25,0.23l0.22,0.11l1.18,0.17l0.22,-0.03l0.89,-0.4l0.19,-0.55l-0.06,-0.11l-0.18,-0.19l-0.32,-0.14l-0.4,-0.28l-0.23,-0.07l0.18,-0.21l0.88,-0.62l0.38,-0.13l0.21,-0.15l0.31,-0.03l0.13,0.2l0.18,0.13l0.68,-0.38l0.17,-0.31l0.64,-0.51l0.13,-0.21l0.45,-0.15l0.82,-0.16l0.78,-0.07l0.3,0.31l0.24,0.04l0.0,0.21l-0.34,0.45l-0.11,0.51l-0.01,0.45l0.11,0.43l-0.14,0.13l-0.36,0.08l-0.54,0.34l-0.05,0.13l0.36,0.55l0.69,0.0l0.11,0.27l0.21,0.31l0.36,0.29l0.47,0.12l0.95,-0.14l0.33,0.16l0.57,0.05l0.42,-0.09l0.31,-0.17l0.41,-0.01l0.02,0.48l0.16,0.25l0.57,-0.05l0.11,-0.22l0.19,-0.06l0.2,0.13l0.2,0.04l0.26,-0.03l0.25,-0.11l0.24,-0.18l0.43,0.13l0.17,0.35l0.02,0.16l0.28,0.15l0.13,0.02l0.27,-0.03l0.24,-0.12l0.18,-0.33l-0.12,-0.27l0.23,-0.22l0.11,-0.24l-0.04,-0.15l0.22,-0.37l0.29,-0.8l0.06,-0.05l0.17,0.22l0.19,0.15l0.49,0.09l-0.03,0.17l-0.25,0.23l0.17,0.39l0.07,0.05l0.26,0.08l0.23,-0.03l0.27,-0.15l0.16,-0.23l0.2,-0.54l0.07,-0.65l-0.12,-0.3l-0.44,-0.72l-0.55,-0.32l-0.56,-0.18l0.31,-0.16l0.16,-0.17l0.37,0.2l0.24,0.36l0.83,0.66l0.83,0.02l0.54,-0.18l0.66,-0.07l0.34,-0.23l0.14,-0.43l-0.01,-0.86l-0.14,-0.41l-0.15,-0.24l0.04,-0.67l-0.11,-0.08l-0.36,-0.08l-0.26,0.08l-0.13,0.11l-0.24,0.0l-0.26,0.13l-0.14,0.18l-0.42,-0.42l-0.38,-0.19l-0.26,-0.01l-0.56,0.16l-0.21,0.0l-0.31,0.11l-0.15,0.13l-0.29,0.58l-0.01,0.19l-0.05,-0.0l-0.27,-0.05l-0.27,-0.49l-0.19,-0.06l-0.67,-0.72l0.07,-0.26l-0.04,-0.26l0.24,-0.38l0.04,-0.19l-0.02,-0.23l0.26,-0.32l0.41,0.01l0.25,-0.16l0.07,-0.09l0.04,-0.42l-0.09,-0.18l-0.2,-0.19l-0.18,-0.05l-0.32,-0.25l-0.27,-0.06l-0.31,-0.2l-0.2,-0.03l-0.54,0.05l-0.53,0.17l-0.21,-0.28l-0.12,-0.05l0.09,-0.23l0.0,-0.23l-0.12,-0.25l-0.31,-0.19l-0.1,-0.01l-0.26,0.04l-0.2,0.12l-0.14,0.45l0.1,0.07l-0.35,0.62l-0.03,-0.07l-0.18,-0.11l-0.25,-0.06l-0.58,0.02l-0.35,0.07l-0.05,0.05l-0.34,-0.21l-1.81,-0.4l-0.04,-0.07l-0.09,-1.27l-0.12,-0.65l-0.51,-1.38l-0.3,-0.59l-0.4,-0.56l-1.06,-0.88l-0.9,-1.08l-0.27,-0.17l-0.29,-0.07l-0.64,-0.72l-0.67,-0.64l-0.8,-0.63l-0.64,-0.3l-0.54,-0.15l-0.44,-0.22l-0.53,-0.86l-0.44,-0.31l-0.28,-0.3l-0.46,-0.21l0.13,-0.01l0.04,-0.12l0.16,-0.07l0.05,-0.49l0.05,-0.01l-0.05,-0.17l0.12,-0.27l0.05,-0.41l0.17,-0.28l0.07,-0.26l-0.02,-0.32l0.11,-0.76l0.05,-0.89l-0.1,-0.67l0.12,0.08l0.26,0.07l0.6,-0.06l0.61,0.16l1.18,-0.14l0.95,-0.05l0.95,-0.32l1.65,-0.19l0.69,-0.29l0.25,-0.21l0.47,-0.27l1.21,-1.15l1.09,-1.73l0.06,0.03l0.24,-0.21l0.3,-0.54l0.15,-0.45l0.02,-0.63l0.06,-0.34l0.07,-0.09l0.04,-0.19l0.03,-0.48l-0.05,-0.3l0.08,-0.09l0.04,-0.48l0.11,-0.06l0.18,-0.24l0.06,-0.24l-0.04,-0.29l-0.14,-0.23l0.7,-0.9l0.23,-0.2l0.35,-0.53l0.27,-0.27l0.19,-0.51l0.05,-0.3l0.4,-0.47l-0.03,-0.15l0.09,-0.23l0.2,-0.2l0.09,-0.06l0.16,0.13l0.89,-0.16l0.19,-0.09l0.17,-0.19l0.07,0.01l0.42,-0.21l-0.03,-0.21l0.15,-0.2l0.93,-0.05l0.46,-0.19l0.38,-0.28l0.14,0.1l0.45,0.01l0.17,-0.41l-0.02,-0.1l0.22,-0.13l0.83,-0.85l0.13,-0.2l-0.01,-0.08l0.49,-0.35l0.71,-0.82l0.16,0.03l-0.16,0.24l-0.21,0.03l-0.22,0.68l0.12,0.11l0.28,0.11l0.17,-0.01l-0.43,0.93l0.26,0.51l0.13,0.04l0.37,-0.12l0.51,1.2l0.45,0.23l0.32,-0.39l0.0,-0.31l-0.09,-0.29l-0.14,-0.22l-0.04,-0.51l0.03,-0.24l-0.16,-0.45l0.08,-0.45l0.38,-0.01l0.54,-0.32l0.36,0.04l0.51,-0.34l0.18,-0.3l-0.5,-0.53l-0.34,0.11l-0.27,-0.06l-0.25,0.0l-0.39,0.22l-0.13,-0.17l-0.08,-0.42l-0.1,-0.22l-0.31,-0.38l0.48,-0.28l0.04,-0.18l0.47,-0.74l0.08,-0.02l0.22,0.36l0.26,0.14l0.08,0.2l0.27,0.39l0.39,0.23l0.36,-0.27l0.02,-0.33l-0.07,-0.2l0.6,-0.15l0.16,-0.27l0.76,0.13l1.31,-0.28l0.15,-0.19l0.8,-0.0l0.18,-0.04l0.62,-0.31l1.18,-0.99l1.14,-1.28l0.55,-0.97l0.22,-0.53l0.69,-1.06l0.22,-0.23l0.1,0.25l0.27,0.2l0.21,0.31l0.26,0.08l0.57,-0.04l0.17,0.07l0.09,0.13l-0.07,0.09l-0.08,0.33l0.46,0.4l0.39,-0.12l0.21,-0.19l0.13,0.07l0.23,-0.11l0.41,0.19l0.1,0.33l-0.0,0.24l-0.22,0.16l-0.12,0.2l-0.12,0.07l-0.11,0.29l-0.23,0.16l-0.81,0.13l-0.09,0.06l0.03,0.05l-0.22,0.16l0.05,0.18l-0.21,0.14l0.16,0.7l0.2,0.02l0.01,0.08l0.2,0.07l0.07,0.13l-0.09,0.35l0.07,0.35l-0.03,0.32l0.54,0.37l0.38,-0.21l0.14,-0.33l-0.04,-0.21l0.29,-0.1l0.54,-0.01l0.05,-0.1l0.24,-0.14l0.19,-0.44l0.01,-0.61l0.18,-0.17l0.17,-0.3l0.11,0.1l0.43,0.03l0.23,-0.23l0.32,-0.02l0.09,-0.06l0.16,-0.2l0.06,-0.16l0.06,-0.51l0.04,0.0l0.31,0.44l0.29,0.24l-0.15,0.33l-0.05,0.36l-0.2,0.07l-0.23,0.21l-0.07,0.17l0.43,0.56l0.14,-0.02l0.03,0.17l0.22,0.33l0.34,0.12l0.31,-0.03l0.3,-0.11l0.14,0.04l0.06,0.32l0.14,0.17l0.19,0.1l0.28,0.01l0.4,-0.21l0.36,-0.49l0.28,-0.27l0.12,-0.28l1.11,0.1l0.38,-0.13l0.34,-0.05l0.29,-0.28l0.14,0.15l0.26,0.14l0.28,-0.04l0.11,0.25l0.17,0.17l0.19,0.09l0.2,-0.01l0.09,0.19l0.37,0.23l0.41,-0.22l0.14,-0.26l0.02,-0.2l0.53,0.23l0.07,0.08l-0.85,1.21l-0.01,0.44l0.13,0.38l-0.38,0.28l-0.14,0.27l0.14,0.49l0.58,0.21l0.38,-0.12l1.52,-0.15l0.13,0.04l-0.37,0.36l-0.13,0.33l0.31,0.54l0.85,0.14l0.91,-0.02l0.27,0.12l0.24,0.3l0.24,0.2l0.28,0.03l0.16,-0.04l0.3,-0.39l-0.09,-0.35l0.42,-0.05l0.26,-0.14l0.28,-0.08l0.37,-0.01l0.07,-0.05l0.02,-0.26l0.25,0.02l0.02,0.06l0.31,0.14l-0.08,0.35l0.46,0.4l0.26,-0.07l0.36,-0.22l0.36,-0.01l0.26,-0.1l0.58,-0.53l0.3,0.07l0.34,-0.14l0.48,-0.02l0.11,0.15l0.37,0.09l0.39,-0.12l0.66,0.27l0.17,0.29l0.24,0.16l0.23,-0.05l0.31,0.18l0.33,-0.01l0.42,0.3l-0.02,0.27l0.34,0.46l0.45,0.06l0.21,-0.03l0.3,-0.18l0.18,-0.23l0.17,0.26l0.14,0.12l0.24,0.06l0.1,0.1l0.32,0.0l0.09,0.58l0.21,0.18l0.36,0.16l0.99,0.13l0.74,0.27l0.4,0.09l0.84,-0.08l0.18,-0.18l0.24,0.01l1.06,0.1l0.64,-0.03l0.41,0.25l0.19,0.06l0.35,0.02l0.21,-0.05l0.2,0.06l0.59,0.54l0.09,-0.05l0.21,0.35l0.16,-0.05l0.26,0.23l0.38,0.21l0.04,0.26l0.09,0.07l0.33,0.07l0.31,-0.07l0.63,0.22l0.41,-0.09l0.61,0.13l0.58,-0.14l0.19,-0.17l0.14,-0.23l0.25,-0.14l0.59,0.0l-0.0,0.14l0.3,0.4l0.45,-0.2l0.19,-0.62l0.2,-0.17l0.17,-0.01l0.2,-0.1l0.31,0.08l0.34,-0.04l0.14,-0.07l0.12,0.04l0.17,-0.03l0.14,0.37l0.65,0.08l0.07,-0.08l0.05,-0.27l0.29,0.04l0.09,0.12l0.28,0.12l0.32,-0.06l0.61,0.43l0.17,0.47l0.16,0.09l0.14,0.01l0.23,0.17l0.07,-0.01l0.1,0.38l0.44,0.52l0.22,0.1l0.44,0.05l0.15,0.37l0.21,0.15l0.38,0.04l0.12,-0.06l0.66,0.32l0.44,0.44l0.25,0.52l0.25,0.21l0.42,0.16l0.46,-0.13l0.14,-0.21l0.13,0.05l0.02,77.26l0.25,0.37l1.69,0.67l0.52,-0.22l0.07,-0.17l1.26,0.68l0.48,-0.08l0.91,-0.95l1.53,-0.09l-0.36,1.34l0.06,0.33l0.48,0.7l0.15,0.13l1.0,0.49l0.15,0.64l0.22,0.38l3.44,3.51l0.33,1.48l-0.1,0.47l0.42,0.48l0.29,-0.02l0.25,-0.11l0.56,-0.54l0.34,-0.22l0.08,0.12l-0.13,0.09l-0.14,0.26l-0.17,0.18l-0.09,0.17l-0.05,0.24l0.49,0.39l0.31,-0.15l0.22,-0.28l0.11,0.0l0.08,0.17l0.38,-0.05l0.1,0.06l0.01,0.11l0.15,0.13l0.44,0.79l-0.16,0.1l0.09,0.46l0.31,0.22l0.79,-0.11l0.08,0.1l-0.18,0.25l0.04,0.1l0.31,0.24l0.14,-0.0l0.08,0.36l-0.07,0.02l-0.19,-0.32l-0.44,-0.18l-0.05,0.07l-0.32,-0.28l-0.48,0.17l-0.08,0.39l-0.22,0.08l-0.13,0.14l-0.14,-0.24l-0.15,-0.13l-0.11,0.05l-0.24,-0.19l-0.2,-0.06l-0.38,0.04l-0.12,-0.14l-0.31,-0.18l-0.69,-0.61l0.1,-0.06l0.1,-0.53l-0.14,-0.21l-0.12,-0.1l-0.34,-0.05l-0.31,0.17l-0.63,-0.61l-0.1,-0.12l-0.08,-0.53l-0.19,-0.33l-0.75,-0.77l-0.65,-0.49l-0.12,0.0l-0.1,-0.58l-0.41,-0.17l-0.55,0.15l-1.01,-0.66l-0.38,-0.16l-0.19,-0.24l-0.17,-0.08l-0.09,-0.19l-0.33,-0.11l-0.32,-0.21l-0.27,-0.01l-0.15,-0.14l-0.46,-0.25l0.13,-0.03l0.06,-0.14l0.14,-0.11l0.01,-0.25l0.06,0.02l0.26,-0.38l-0.11,0.18l0.07,0.51l0.18,0.17l0.21,0.11l0.42,-0.11l0.23,-0.45l0.0,-0.28l-0.12,-0.26l-0.06,-0.51l0.05,-0.28l0.27,0.02l0.2,0.2l0.27,0.09l0.38,-0.13l0.14,-0.46l-0.29,-0.19l0.02,-0.03l-0.21,-0.22l-0.16,-0.11l-0.67,-0.1l-0.35,-0.43l-0.16,-0.31l-0.28,-0.19l-0.21,-0.27l-0.41,-0.04l-0.07,0.03l-0.3,0.43l-0.08,0.29l-0.35,0.3l-0.42,0.6l-0.94,0.52l-0.49,0.21l-0.92,-0.04l-0.45,-0.12l-0.3,-0.1l-0.47,-0.29l-0.89,-0.4l0.14,-0.2l0.07,-0.32l-0.0,-0.35l-0.15,-0.44l0.04,-0.07l-0.22,-0.28l-0.54,-0.44l-0.23,0.05l-0.24,0.12l-0.19,0.3l-0.01,0.1l0.13,0.45l-0.45,0.23l-0.95,-0.46l-0.42,-0.04l-0.34,-0.12l-0.99,-0.16l-0.57,-0.19l-0.55,-0.07l-1.5,0.31l-1.5,0.14l-0.87,0.33l-0.12,-0.29l-0.53,-0.5l0.04,-0.23l-0.11,-0.27l-0.34,-0.15l-0.19,0.09l-0.39,-0.05l-0.15,0.05l-0.48,-0.11l-0.15,-0.26l-0.14,-0.14l-0.29,-0.23l-0.19,-0.02l-0.02,-0.13l0.2,-0.19l-0.02,-0.09l0.08,-0.09l0.09,-0.32l-0.03,-0.28l-0.11,-0.02l0.06,-0.44l0.16,-0.21l0.22,-0.04l0.1,-0.07l0.22,-0.34l0.01,-0.34l-0.15,-0.27l-0.42,-0.07l-0.35,0.12l-0.17,0.12l-0.15,0.18l-0.1,0.23l-0.26,0.24l-0.1,0.32l-0.43,0.3l-0.29,0.6l-0.2,0.15l-0.19,0.26l-0.1,-0.02l-0.17,-0.14l-0.2,-0.31l-0.74,-0.33l0.49,-0.81l-0.01,-0.38l-0.52,-0.27l-0.34,0.21l-0.06,-0.11l-0.08,-0.01l-0.25,-0.26l-0.11,-0.03l-0.09,-0.45l-0.26,-0.22l-0.05,-0.22l-0.45,-0.37l-0.42,-0.05l-0.11,0.05l-0.19,0.18l-0.13,0.22l-0.16,-0.12l-0.15,0.07l-0.07,-0.03l-0.04,-0.09l-0.03,-0.61l-0.07,-0.04l0.28,-0.1l0.03,-0.12l0.58,0.02l0.37,-0.14l0.13,-0.58l-0.28,-0.34l-0.15,-0.09l-0.24,-0.05l-0.85,-0.0l-0.2,0.04l-0.2,0.13l-0.36,0.44l-0.3,0.22l-0.18,0.22l-0.13,-0.1l-0.46,-0.07l-0.33,0.19l-0.18,-0.15l-0.28,0.21l-0.21,0.01l0.07,-0.39l-0.14,-0.34l-0.04,-0.0l-0.07,-0.42l-0.23,-0.12l-0.3,0.03l0.02,-0.14l-0.03,-0.14l-0.04,-0.01l0.03,-0.1l-0.13,-0.41l-0.06,-0.05l-0.42,-0.06l-0.24,0.18l-0.28,0.53l-0.25,0.27l-0.2,0.34l-0.48,-0.15l-0.99,0.46l-0.0,0.31l-0.09,0.09l-0.2,0.4l0.29,0.38l0.19,0.03l0.06,0.09l-0.03,0.1l-0.16,0.07l-0.33,0.02l-0.22,0.07l-0.51,0.32l0.05,0.55l-0.23,0.61l0.35,0.4l0.31,-0.01l0.28,-0.2l0.01,0.13l-0.49,0.45l-0.31,0.39l-0.1,0.32l0.15,0.38l0.06,0.05l0.46,0.02l0.53,-0.5l0.05,0.02l0.09,0.25l0.36,0.06l-0.2,0.3l-0.0,0.3l-0.37,0.19l-0.04,0.07l-0.06,0.25l0.04,0.17l-0.19,0.27l0.29,0.38l-0.09,0.47l-0.08,-0.02l-0.49,0.5l0.01,0.04l-0.27,-0.07l-0.24,0.01l-0.15,0.06l-0.2,-0.14l-0.14,-0.01l-0.16,-0.51l-0.11,-0.06l-0.37,-0.02l-0.15,0.06l-0.24,0.2l-0.05,-0.32l-0.17,-0.27l-0.34,-0.13l-0.3,0.09l-0.23,0.35l-0.04,0.44l0.07,0.3l-0.07,0.17l-0.1,0.04l-0.26,-0.23l-0.1,-0.03l-0.47,0.2l-0.1,0.3l0.0,0.25l-0.25,0.08l-0.07,0.07l0.02,0.32l-0.26,-0.09l-0.4,0.21l-0.08,0.32l0.11,0.23l-0.2,0.06l-0.28,-0.22l-0.1,0.04l-0.27,0.26l-0.28,0.64l-0.12,-0.17l-0.13,-0.01l-0.28,0.1l-0.38,0.3l-0.2,0.39l0.21,0.34l-0.06,0.1l-0.37,0.26l-0.05,0.15l-0.36,0.25l-0.15,0.22l-0.34,-0.01l-0.35,-0.15l-0.25,-0.02l-0.22,0.09l-0.09,0.34l-0.26,-0.03l-0.14,0.05l-0.29,0.17l-0.16,0.17l-0.2,0.06l-0.45,-0.19l-0.12,-0.15l0.35,-0.59l0.15,-0.05l0.22,-0.21l0.34,0.03l0.17,0.16l0.29,0.09l0.41,-0.31l0.0,-0.33l-0.07,-0.14l0.21,-0.04l0.28,-0.26l0.31,-0.39l-0.03,-0.18l0.15,-0.18l0.09,-0.27l0.3,-0.32l0.01,-0.56l-0.11,-0.11l-0.27,-0.13l-0.34,0.03l-0.15,0.07l-0.96,0.77l-0.33,0.2l-0.63,-0.29l-0.17,-0.21l0.5,-1.62l0.99,-1.27l0.15,-0.41l0.04,-0.61l0.14,-0.07l0.15,-0.25l0.09,-0.76l-0.01,-0.46l-0.38,-0.99l0.18,-0.1l0.11,-0.13l0.48,-0.05l0.21,-0.09l1.07,-1.0l0.94,-0.67l0.07,0.19l0.14,0.19l0.24,0.22l0.15,0.07l0.63,0.15l0.32,-0.06l0.61,-0.36l0.08,0.01l0.38,0.24l0.41,0.03l0.21,0.11l1.11,0.24l0.31,0.22l0.33,-0.01l0.24,-0.53l-0.18,-0.4l-0.27,-0.31l-0.2,-0.13l-0.36,-0.09l-0.37,0.09l-0.44,-0.29l-0.47,-0.1l-0.44,-0.28l-0.24,-0.25l-0.4,-0.26l0.29,-0.28l0.27,-0.66l0.28,-0.18l0.18,-0.35l1.08,-0.47l0.23,-0.06l0.26,-0.27l-0.17,-0.57l-0.33,-0.09l-0.23,0.03l-0.33,-0.07l-0.77,0.18l-0.51,0.31l-0.61,0.73l-0.1,0.29l-0.05,0.39l-0.7,-0.07l-0.22,-0.17l-0.43,0.21l-0.05,-0.12l0.05,-0.24l-0.52,-0.46l-0.25,0.15l-0.16,0.23l-0.05,0.22l-0.18,0.02l-0.15,0.28l-0.42,0.22l-0.3,0.08l-0.37,0.28l-0.16,0.22l-0.28,0.63l-0.51,0.2l-0.21,-0.02l-0.38,0.1l-0.23,0.14l-0.41,0.44l-0.24,0.12l-0.26,0.43l-0.1,0.27l0.0,0.29l0.12,0.28l-0.05,-0.07l-0.31,0.13l-0.32,0.33l-0.15,0.07l-0.11,0.14l-0.15,0.36l-0.44,0.38l-0.29,0.38l-0.16,0.42l-0.01,0.24l0.09,0.3l-0.22,0.29l-0.06,0.2l-0.25,0.11l-0.17,0.16l-0.33,-0.02l-0.07,-0.1l-0.16,-0.06l-0.28,-0.3l-0.49,-0.05l-0.33,0.08l-0.31,0.27l-0.08,0.35l0.41,0.36l0.21,-0.07l0.06,0.15l0.26,0.27l0.39,0.19l0.16,0.13l0.14,0.23l0.21,0.2l-0.28,0.32l-0.13,0.41l-0.23,0.1l-0.57,-0.02l-0.7,0.14l-0.21,0.1l-0.12,0.12l-0.2,0.38l0.05,0.07l-0.37,-0.12l-0.27,0.39l0.01,0.4l-0.17,-0.14l-0.09,0.01l-0.34,0.33l-0.01,0.09l-0.21,0.16l-0.04,0.09l0.21,0.35l-0.16,-0.07l-0.26,0.0l-0.28,0.17l0.22,0.69l-0.2,0.03l-0.26,0.23l-0.39,0.08l-0.12,0.18l-0.22,0.47l0.07,0.08l-0.13,0.27l-0.03,0.47l-0.34,0.27l0.06,0.17l-0.11,0.17l0.03,0.12l0.2,0.21l-0.01,0.32l0.17,0.33l0.08,0.06l0.42,0.06l0.25,-0.16l0.12,-0.17l0.43,0.1l0.47,-0.04l0.11,0.21l0.17,0.15l0.35,0.18l0.26,-0.01l0.22,0.3l-0.16,0.25l-0.14,0.51l-0.17,0.14l-0.18,0.06l-0.21,0.25l-0.04,0.15l-0.34,0.07l-0.43,-0.01l-0.3,0.24l-0.07,0.38l-0.1,0.05l0.02,0.12l-0.13,0.01l-0.29,0.14l-0.1,0.12l-0.02,0.5l0.04,0.14l-0.55,0.3l-0.26,0.26l-0.07,0.38l-0.07,-0.01l-0.01,0.05l0.07,0.01l-0.07,0.05l0.05,0.07l-0.37,-0.0l-0.16,0.46l-0.14,0.03l-0.16,0.32l-0.27,0.09l-0.2,0.2l-0.53,-0.05l-0.26,0.05l-0.19,0.1l-0.06,0.05l-0.12,0.44l-0.19,0.37l-0.12,-0.01l-0.16,0.28l-0.1,-0.01l-0.32,0.12l-0.14,0.41l-0.18,-0.17l-0.41,-0.07l-0.11,0.04l-0.2,0.17l-0.08,0.15l-0.08,0.33l0.01,0.26l-0.3,0.09l-0.06,0.42l-0.26,0.11l-0.56,-0.08l-0.14,0.21l-0.09,0.04l-0.1,0.33l-0.07,-0.01l-0.4,0.22l-0.05,0.12l-0.32,0.18l-0.37,0.39l-0.3,0.17l-0.16,0.27l-0.02,0.33l0.3,0.36l0.09,0.01l0.2,0.22l-0.21,0.14l-0.03,0.24l-0.14,0.06l-0.13,-0.03l-0.02,0.05l-0.66,0.07l-0.17,0.19l-0.06,0.25l-0.16,-0.03l-0.3,0.46l-0.04,-0.02l-0.02,0.08l-0.32,0.32l-0.29,0.0l-0.07,0.19l-0.22,-0.22l-0.15,-0.07l-0.1,-0.03l-0.36,0.08l-0.26,0.3l-0.04,0.37l-0.26,0.31l-0.17,0.03l0.0,0.16l-0.39,-0.07l-0.64,0.29l-0.17,0.22l-0.17,0.06l-0.35,0.26l-0.24,0.5l-0.2,-0.04l-0.23,0.04l-0.38,0.26l-0.37,0.49l-0.05,0.15l-0.27,0.23l-0.16,0.25l-0.05,0.17l0.1,0.39l0.1,0.09l-0.19,0.03l-0.17,0.41l-0.01,0.13l0.06,0.0l0.03,0.09l-0.07,0.23l-0.23,-0.07l-0.33,0.21l-0.14,0.28l-0.2,0.06l-0.3,0.0l-0.37,0.21l-0.28,0.08l-0.32,0.06l-0.17,-0.2l-0.07,0.0l-0.35,0.1l-0.2,0.17l-0.03,0.11l-0.73,-0.07l-0.48,0.35l-0.09,-0.03l-0.36,0.17l-0.1,0.25l0.01,0.12l-0.14,0.12l0.02,-0.22l0.2,-0.47l-0.21,-0.25l-0.27,-0.11l-0.52,-0.32l-0.04,-0.18l0.26,-0.48l0.04,-0.38l0.25,-0.58l0.38,-0.33l0.21,-0.32l0.56,-0.35l0.59,-0.6l0.28,-0.2l0.46,-0.22l0.13,0.04l0.31,-0.1l0.63,-0.38l0.24,-0.04l0.05,-0.27l0.18,-0.21l0.24,-0.11l0.21,0.04l0.14,-0.15l0.35,0.17l0.39,-0.0l0.14,0.09l0.55,-0.44l-0.04,-0.42l-0.12,-0.32l-0.02,-0.53l0.11,-0.36l1.09,-1.51l0.32,-0.22l0.32,-0.02l0.45,-0.58l0.18,-0.34l0.36,-0.24l0.08,0.28l0.25,0.12l0.3,0.03l0.02,0.05l0.6,-0.1l0.17,-0.08l0.18,-0.18l0.09,-0.24l-0.04,-0.2l0.04,-0.12l-0.15,-0.42l-0.45,-0.02l-0.12,0.04l-0.08,-0.31l-0.16,-0.18l-0.12,-0.04l-0.01,-0.24l0.24,-1.11l0.1,-1.24l0.04,-0.1l0.31,-0.07l0.24,-0.2l0.25,0.05l0.35,0.2l0.4,-0.59l-0.14,-0.24l-0.22,-0.18l-0.56,-0.23l-0.2,-0.03l-0.24,0.05l-0.07,-0.4l0.18,-0.59l0.12,-0.22l0.26,-0.17l0.38,-0.55l0.5,-0.49l0.46,-0.17l0.27,-0.38l0.0,-0.05l-0.36,-0.27l0.1,-0.17l0.01,-0.31l0.08,-0.17l0.02,-0.27l0.3,-0.18l0.13,-0.23l0.05,-0.68l0.18,-0.3l-0.12,-0.51l-0.52,0.03l-0.25,0.24l-0.16,0.29l-0.08,0.38l0.02,0.14l-0.19,0.06l-0.21,0.17l-0.21,0.49l-0.45,0.26l-0.45,0.13l-0.62,0.35l-0.21,0.07l-0.72,0.38l-0.55,0.38l-0.54,0.19l-0.12,-0.07l-0.04,-0.36l-0.18,-0.36l-0.17,-0.16l-0.31,-0.15l0.17,-0.58l-0.01,-0.35l0.55,0.13l0.11,0.15l0.1,0.43l0.24,0.29l0.34,-0.17l0.01,0.06l0.04,-0.01l0.13,-0.15l0.05,0.04l-0.01,-0.06l0.07,-0.04l-0.02,-0.07l0.09,-0.12l-0.16,-0.2l0.01,-0.2l-0.1,-0.27l-0.35,-0.5l-0.27,-0.13l-0.24,-0.01l-0.57,-0.24l-0.33,-0.57l-0.69,0.22l-0.02,0.29l0.2,0.45l-0.14,0.21l-0.04,0.2l-0.47,-0.24l-0.27,0.12l-0.17,0.59l0.12,0.24l-0.03,0.23l-0.13,0.06l-0.14,0.15l-0.05,0.09l0.04,0.07l-0.18,0.3l0.1,0.56l0.4,1.03l0.09,0.37l-0.09,0.11l-0.27,-0.05l0.0,-0.08l-0.22,-0.24l0.04,-0.02l-0.31,-0.62l-0.7,-1.21l-0.28,-0.38l-0.37,-0.29l-0.03,-0.38l-0.11,-0.22l-0.32,-0.17l-0.48,0.09l-0.25,0.48l-0.11,0.0l-0.07,0.2l-0.12,-0.19l-0.22,-0.16l-0.18,-0.04l-0.21,0.03l-0.16,-0.07l0.02,-0.32l-0.13,-0.29l-0.1,-0.11l-0.03,-0.17l-0.36,-0.23l-0.39,0.04l-0.18,0.1l-1.07,0.88l-0.18,0.21l-0.38,0.02l-0.15,0.06l-0.73,0.5l-0.15,0.0l-0.18,-0.13l-0.21,0.09l-0.16,0.22l-0.03,0.32l-0.19,0.3l-0.06,0.21l-0.32,0.14l-0.15,0.14l-0.26,-0.23l-0.08,0.03l0.32,-0.18l0.28,-0.35l-0.02,-0.48l-0.1,-0.13l-0.29,-0.14l-0.0,-0.64l0.56,-0.46l0.21,-0.3l0.01,-0.09l-0.09,-0.31l-0.38,-0.29l-0.38,0.03l-0.13,0.11l-0.33,-0.03l-0.16,0.04l-0.08,-0.26l0.15,-0.36l0.02,-0.59l0.18,-0.14l0.23,-0.29l0.17,-0.08l0.18,-0.19l0.1,-0.21l-0.04,-0.32l-0.47,-0.8l-0.13,-0.57l-0.39,-0.78l-0.28,-0.43l-0.07,-0.54l-0.29,-0.28l-0.06,-0.15l-0.07,-0.26l0.11,-0.35l-0.02,-0.3l0.08,-0.1l0.06,-0.38l-0.04,-0.1l-0.08,0.03l0.06,-0.24l-0.36,-0.14l-0.24,0.06l-0.05,0.13l-0.17,-0.13l0.3,-0.59l0.09,-0.43l0.19,-0.18l0.1,-0.21l0.03,-0.39l0.27,-0.26l0.16,0.02l0.41,-0.22l0.08,-0.21l0.07,-0.04l0.02,-0.67l-0.1,-0.07l-0.39,-0.04l-0.23,0.14l-0.16,-0.18l-0.33,-0.12l-0.1,0.01l-0.26,0.66l0.06,0.06l-0.33,0.19l-0.14,0.24l-0.09,0.51l-0.25,0.57l-0.15,0.08l-0.05,0.17l-0.18,0.19l-0.03,0.11l-0.27,0.2l-0.02,0.06l0.05,0.01l-0.14,0.15l0.04,0.12l-0.35,0.23l0.17,0.47l0.62,0.29l-0.1,0.35l0.07,0.41l-0.04,0.17l-0.18,-0.0l-0.12,-0.08l-0.61,0.33l-0.04,0.12l-0.89,0.53l-0.73,0.18l-0.99,0.19l-0.81,0.01l-0.66,-0.2l-0.12,-0.23l0.37,-0.45l-0.24,-0.21l0.0,-0.09l-0.1,-0.21l-0.87,-0.51l-0.16,-0.25l0.02,-0.11l-0.22,-0.36l-0.38,-0.3l0.01,-0.15l-0.14,-0.57l-0.52,0.04l-0.1,0.1l-0.58,-0.22l-0.16,-0.19l0.2,-0.22l0.04,-0.18l0.12,-0.16l0.04,-0.17l-0.03,-0.24l-0.28,-0.33l-0.37,-0.03l-0.16,0.07l0.67,-0.56l0.11,-0.28l-0.04,-0.34l0.35,-0.37l0.05,0.1l0.29,0.22l0.63,0.05l0.11,0.08l0.35,0.1l0.06,0.16l-0.18,0.14l-0.11,0.24l-0.13,0.12l-0.09,0.17l-0.07,0.65l0.08,0.09l0.48,0.08l0.08,-0.04l0.51,-0.64l0.3,-0.04l0.28,-0.24l0.13,-0.41l0.18,-0.18l0.04,0.0l-0.05,0.25l0.04,0.12l-0.05,0.37l0.05,0.2l0.13,0.23l0.23,0.19l0.23,0.04l0.41,-0.08l0.29,-0.16l0.62,-0.53l0.23,-0.39l0.01,-0.33l-0.07,-0.17l0.1,-0.16l-0.15,-0.2l-0.43,-0.33l0.11,-0.19l-0.02,-0.33l-0.18,-0.25l-0.24,-0.1l-0.17,-0.48l-0.12,-0.06l-0.38,0.02l-0.18,0.1l-0.17,0.22l-0.16,0.08l-0.24,0.23l-0.13,0.29l-1.18,-0.07l-0.4,0.06l-0.11,-0.24l-0.19,-0.17l-0.19,-0.08l-0.3,-0.04l-0.24,0.05l-0.1,-0.09l-0.23,-0.09l0.1,-0.06l-0.0,-0.07l0.14,-0.03l0.11,-0.11l0.17,-0.06l0.16,-0.6l-0.06,-0.08l-0.36,-0.17l-0.31,0.07l-0.42,-0.02l0.06,-0.05l0.03,-0.58l-0.29,-0.3l-0.1,-0.01l-0.0,-0.13l0.11,-0.14l0.04,-0.24l0.22,-0.11l0.24,-0.38l0.44,-0.08l0.18,-0.25l0.15,-0.09l0.17,-0.22l0.21,-0.72l-0.18,-0.27l-0.23,-0.13l-0.2,-0.02l-0.38,0.25l0.02,0.08l-0.29,0.48l-0.22,0.04l-0.19,0.11l-0.14,0.16l-0.07,0.02l-0.22,0.31l-0.26,0.21l-0.13,0.32l-0.25,0.32l0.04,0.03l-0.12,0.37l0.03,0.08l-0.31,0.31l-0.11,0.38l-0.08,-0.4l0.07,0.02l0.02,-0.06l-0.07,-0.02l0.07,-0.04l-0.01,-0.06l-0.05,-0.07l-0.1,0.06l-0.16,-0.42l-0.28,-0.11l-0.32,-0.05l-0.07,-0.2l0.31,-0.17l0.13,-0.2l0.06,-0.31l-0.05,-0.32l-0.19,-0.27l-0.42,-0.29l-0.18,-0.06l0.47,-0.11l0.23,-0.14l0.0,-0.6l-0.65,-0.21l-0.15,-0.11l0.24,-0.03l0.31,0.04l0.25,-0.15l0.29,-0.02l0.35,-0.21l-0.13,-0.41l0.11,-0.06l-0.12,-0.23l-0.22,-0.22l-0.13,-0.45l0.17,-0.67l0.11,-0.17l0.24,-0.21l0.5,-0.9l0.38,-0.52l0.19,-0.45l0.28,-0.27l0.21,-0.31l0.09,-0.05l0.17,0.03l0.04,0.13l0.21,0.27l0.31,0.11l-0.11,0.42l0.4,0.26l0.31,-0.08l0.58,-0.56l0.02,-0.32l-0.04,-0.13l-0.3,-0.28l-0.26,-0.44l-0.04,0.0l0.91,-1.12l-0.17,-0.62l-0.09,-0.03l-0.37,0.05l-0.57,0.56l-0.06,-0.14l0.28,-0.25l0.03,-0.1l-0.28,-0.52l0.01,-0.16l0.35,-0.82l0.2,-0.01l0.18,0.12l0.28,-0.06l0.38,0.13l0.35,-0.16l0.1,-0.38l-0.16,-0.42l-0.18,-0.2l-0.41,-0.16l0.37,-0.41l0.62,-0.21l0.37,0.03l0.51,0.25l0.22,0.03l0.07,0.07l0.1,0.18l-0.05,0.16l0.14,0.1l-0.4,0.28l-0.18,0.27l-0.05,0.27l0.24,0.44l0.48,-0.14l0.11,-0.15l0.38,-0.24l0.25,-0.28l0.23,0.37l0.51,0.06l0.13,-0.08l0.58,-0.06l0.31,-0.14l0.36,-0.38l0.3,-0.23l0.2,-0.31l0.05,-0.24l0.19,-0.04l0.21,-0.12l0.35,-0.37l0.71,-1.23l0.16,-0.18l0.39,0.33l1.7,-0.29l0.17,0.08l0.24,0.01l0.16,-0.07l0.42,-0.03l0.14,-0.12l0.62,-0.18l0.2,-0.13l0.45,-0.54l0.13,-0.31l0.29,-0.25l0.15,-0.29l0.25,-0.27l0.15,-0.31l0.12,-0.86l-0.15,-0.69l-0.41,-1.1l-0.07,-1.17l-0.08,-0.43l-0.18,-0.32l-0.4,-0.35l-0.18,-0.28l-0.03,-0.21l0.05,-0.11l-0.33,-0.33l0.34,0.04l0.2,-0.04l0.26,-0.17l0.11,-0.16l-0.02,-0.1l0.64,-0.66l0.15,-0.36l0.05,-0.63l-0.04,-0.23l-0.4,-0.84l-0.53,-0.47l0.15,-0.59l-0.18,-0.12l-0.24,-0.05l-0.19,0.03l-0.09,0.06l-0.2,-0.03l-0.35,0.11l-0.2,0.39l-0.29,0.26l-0.26,0.62l-0.15,0.02l-0.21,-0.08l-0.29,-0.28l-0.45,-0.08l-0.41,0.28l0.08,0.22l-0.2,0.11l-0.26,0.27l-0.36,-0.01l-0.14,0.07l-0.01,0.12l-0.21,0.09l-0.23,0.22l-0.17,0.35l-0.79,0.49l-0.44,0.52l-0.09,0.21l-0.13,-0.25l-0.61,-0.5l-0.17,-0.23l-0.16,-0.12l-0.0,-0.1l-0.45,-0.39l-0.36,0.07l-0.18,0.11l-0.43,0.36l-0.16,0.26l-0.53,-0.19l-0.59,-0.05l-0.62,0.16l-0.79,0.0l-0.27,-0.13l-0.38,0.03l-0.75,0.49l-0.33,-0.08l-0.46,0.1l-0.19,-0.12l-0.53,0.38l0.07,0.21l-0.04,0.05l-1.31,-0.47l-1.46,-0.29l-0.49,-0.2l-0.57,-0.1l-0.48,-0.33l-0.3,-0.56l0.02,-0.29l0.22,-0.13l0.1,-0.26l-0.04,-0.26l-0.05,-0.05l0.05,-0.15l-0.13,-0.45l-0.32,-0.34l-0.61,-0.37l-0.1,-0.43l0.22,-0.04l0.28,-0.13l0.32,-0.47l0.06,-0.13l0.01,-0.34l0.08,-0.06l0.73,0.22l0.3,-0.03l0.23,-0.13l0.1,-0.52l-0.13,-0.22l-0.25,-0.26l-0.45,-0.24l-0.51,-0.08l-0.11,0.04l-0.8,-0.4l-1.13,-0.17l-0.14,0.07l-0.73,-0.24l-0.6,-0.08l-0.52,-0.24l-0.21,-0.27l-1.21,-0.75ZM96.16,464.68l-0.0,0.06l0.02,0.16l-0.07,-0.16l0.05,-0.05ZM86.52,489.71l0.12,0.34l-0.0,0.09l-0.12,-0.14l0.0,-0.29ZM102.36,507.24l-0.04,0.07l-0.0,0.0l0.02,-0.05l0.03,-0.02ZM129.15,499.85l0.14,-0.04l0.24,0.03l-0.03,0.11l-0.24,0.17l-0.01,-0.15l-0.09,-0.13ZM147.01,494.95l0.0,-0.06l0.09,-0.05l-0.01,0.03l-0.08,0.08ZM148.47,490.15l0.05,0.25l-0.05,0.2l-0.24,0.23l0.1,0.28l-0.26,0.13l-0.15,0.13l0.03,0.03l-0.13,0.07l-0.08,-0.07l0.2,-0.29l0.09,-0.28l-0.02,-0.18l0.44,-0.51ZM98.16,445.58l-0.31,-0.16l-0.54,-0.08l-0.09,-0.38l-0.16,-0.34l-0.09,-0.04l-0.05,-0.11l0.12,-0.08l0.42,-0.04l0.47,0.93l0.23,0.23l-0.03,0.07ZM186.08,504.61l0.31,-0.22l0.73,-0.05l0.33,-0.21l0.42,-0.79l0.05,-0.2l-0.02,-0.76l0.29,-0.1l0.23,-0.2l0.26,-0.5l0.03,-0.3l-0.07,-0.22l0.82,-0.19l1.37,-0.8l0.27,0.26l0.29,0.18l0.11,0.3l0.18,0.22l0.21,0.09l0.17,0.21l0.0,0.34l-0.18,0.28l0.09,0.5l0.13,0.11l0.01,0.35l0.26,0.46l0.24,0.19l0.64,0.17l0.13,0.33l0.4,0.42l0.36,0.12l0.15,0.28l-0.04,0.32l0.25,0.38l0.06,0.27l0.27,0.42l0.13,0.13l1.35,0.81l0.41,0.64l-0.51,0.05l-0.32,0.18l-0.13,0.23l-0.02,0.22l-0.32,0.4l0.08,0.19l-0.01,0.09l-0.19,0.18l-0.12,0.28l-0.56,-0.58l-0.28,-0.12l-0.37,-0.06l-0.18,-0.1l-0.05,-0.46l-0.09,-0.17l-0.19,-0.16l-0.02,-0.12l-0.08,-0.07l-0.17,-0.38l0.09,-0.13l-0.08,-0.36l0.04,-0.33l-0.08,-0.41l-0.3,-0.12l0.07,-0.07l-0.04,-0.04l-0.15,0.04l0.02,-0.1l-0.04,-0.01l-0.02,0.12l-0.09,-0.03l-0.03,-0.07l-0.03,0.05l-0.04,-0.02l0.03,-0.11l-0.09,-0.37l-0.03,-0.41l-0.14,-0.36l-0.1,-0.66l-0.44,-0.94l0.11,-1.1l-0.09,-0.32l-0.74,0.01l-0.17,0.8l-0.17,-0.02l-0.37,0.25l0.09,0.44l0.09,0.08l-0.17,0.42l0.26,0.36l0.16,0.36l0.14,0.16l-0.01,0.91l0.5,1.18l0.02,0.36l0.16,0.36l-0.12,0.4l0.44,1.13l0.13,0.56l-0.11,0.19l-0.02,0.13l-0.11,-0.05l-0.12,-0.2l-0.11,-0.51l-0.28,-0.69l-0.36,-0.21l-0.07,0.0l-0.38,0.3l-0.03,0.11l-0.21,0.02l-0.16,0.11l-0.23,0.02l0.17,-0.12l0.08,-0.29l-0.01,-0.22l-0.12,-0.28l-0.01,-0.39l-0.11,-0.05l-0.24,-0.61l-0.21,-0.33l0.71,-0.2l0.25,-0.55l-0.2,-0.28l-0.28,-0.12l-0.44,-0.04l-0.14,0.13l-0.14,-0.55l-0.09,-0.17l-0.2,-0.17l-0.23,-0.06l-0.32,0.12l-0.06,0.63l-0.17,0.14l-0.06,0.48l0.1,0.04l-0.31,-0.03l-0.03,-0.27l0.06,-0.27l-0.48,-0.39l-0.17,0.05l-0.27,-0.34l-0.49,0.0l-0.07,0.29l-0.24,-0.26ZM188.21,505.88l0.15,0.06l-0.03,0.15l-0.12,-0.21ZM193.86,511.0l0.48,-0.08l0.25,0.17l0.05,0.28l-0.09,0.15l0.1,0.2l-0.09,0.08l0.15,0.6l-0.05,0.35l0.05,0.23l0.04,0.07l0.29,-0.01l0.47,0.83l-0.05,0.28l0.05,0.08l0.4,0.18l0.0,0.25l-0.43,0.02l-0.04,0.07l-0.01,0.19l-0.09,0.06l0.12,0.44l-0.22,0.27l-0.18,-0.44l-0.36,0.01l-0.02,-0.04l0.38,-0.22l-0.0,-0.67l-0.08,-0.05l-0.35,-0.04l-0.32,0.11l-0.13,-0.16l-0.06,-0.48l-0.12,-0.31l0.05,-0.36l-0.09,-0.7l-0.15,-0.55l0.0,-0.2l-0.11,-0.19l0.12,-0.18l0.05,-0.22ZM195.19,516.11l0.02,0.32l-0.05,0.25l-0.26,0.07l-0.11,0.11l-0.07,0.3l-0.14,0.05l-0.04,-0.07l-0.04,0.02l-0.02,0.08l-0.04,-0.03l-0.06,0.11l0.08,0.03l-0.01,0.05l-0.1,0.05l0.0,-0.32l0.22,-0.13l0.07,-0.13l-0.14,-0.29l0.12,-0.21l0.26,0.09l0.3,-0.34ZM196.28,511.06l0.02,-0.2l-0.14,-0.37l0.1,-0.39l0.23,-0.3l0.03,-0.2l-0.08,-0.36l0.13,-0.18l0.08,-0.33l0.26,-0.04l0.26,-0.3l0.49,0.54l-0.08,0.42l0.3,0.65l0.68,0.93l0.35,0.95l0.13,0.2l-1.35,-0.28l-0.16,0.02l0.08,-0.21l-0.26,-0.27l0.11,-0.18l0.06,-0.64l-0.59,-0.14l-0.19,0.09l-0.24,0.37l0.03,0.1l-0.14,0.27l-0.1,-0.14ZM198.0,512.73l0.23,0.13l0.27,0.03l0.38,0.16l0.24,0.02l0.06,-0.02l0.2,-0.45l0.08,0.11l1.26,2.46l0.67,1.01l0.36,0.75l-0.29,0.57l0.24,0.57l0.72,0.22l-0.17,0.72l0.21,0.45l0.55,0.28l0.02,0.27l0.18,0.4l0.01,0.45l0.25,0.3l0.22,0.06l0.37,0.02l0.34,-0.05l1.57,1.13l0.4,0.16l0.54,0.08l0.14,0.09l0.46,0.56l0.27,0.14l0.24,0.06l0.12,0.43l0.14,0.19l0.16,0.1l0.56,0.18l0.18,0.03l0.25,-0.04l0.08,0.24l0.0,0.45l-0.43,0.65l-0.09,0.29l-0.01,0.2l0.05,0.29l0.11,0.24l-0.07,0.3l0.0,0.35l0.19,0.56l0.13,0.24l0.02,0.48l0.1,0.26l-0.24,0.24l-0.05,0.22l-0.15,0.23l-0.25,0.66l-0.15,0.21l-0.06,0.19l-0.22,0.35l-0.28,0.22l-0.16,-0.05l-0.11,0.02l-0.04,-0.39l-0.21,-0.26l0.28,-0.28l0.07,-0.23l0.42,-0.5l0.32,-0.53l0.08,-0.22l-0.42,-0.52l-0.29,0.11l-0.47,-0.22l-0.26,0.16l-0.03,-0.38l0.07,-0.63l-0.02,-0.45l-0.09,-0.31l0.03,-0.29l-0.15,-0.34l-0.07,-0.47l-0.05,-0.05l-0.27,-0.05l-0.14,-0.28l-0.32,-0.32l0.31,-0.24l0.07,-0.25l0.12,-0.15l-0.01,-0.51l-0.5,-0.09l-0.31,0.2l-0.38,0.44l-0.32,0.17l-0.5,-0.07l-0.08,0.07l0.02,0.05l-0.22,-0.01l-0.15,0.16l-0.12,0.02l-0.42,0.32l-0.22,0.03l0.05,-0.34l-0.07,-0.76l0.18,-0.05l0.28,-0.0l0.49,0.11l0.3,-0.14l0.16,-0.25l0.23,-0.19l-0.21,-0.44l-0.08,-0.04l-0.29,-0.03l-0.27,0.12l-0.7,-0.09l-0.09,-0.18l-0.03,-0.29l-0.07,-0.21l-0.32,-0.21l-0.36,-0.09l-0.09,-0.33l-0.15,-0.18l-0.34,-0.22l0.13,-0.35l-0.39,-0.57l-0.13,0.02l-0.06,-0.13l0.18,-0.25l0.1,-0.06l0.0,-0.63l-0.37,-0.13l-0.26,0.09l-0.28,0.25l-0.2,-0.12l-0.22,-0.2l-0.15,-0.29l0.21,-0.27l-0.12,-0.51l0.04,-0.17l-0.07,-0.28l-0.5,-0.17l-0.33,0.27l-0.06,-0.01l-0.28,-0.2l-0.01,-0.09l0.06,-0.12l-0.23,-0.29l-0.11,-0.05l-0.1,0.03l-0.16,-0.06l0.28,-0.18l0.3,-0.08l0.21,-0.16l0.15,-0.34l-0.0,-0.13l-0.44,-0.39l-0.29,0.13l-0.09,0.1l-0.25,0.04l0.04,-0.33l-0.11,-0.27l-0.47,-0.11l0.01,-0.08l0.18,-0.02l0.25,-0.13l0.44,0.47l0.35,0.13l0.29,-0.1l0.19,-0.24l-0.13,-0.47l-0.24,-0.13l-0.18,-0.31l-0.05,0.02l-0.22,-0.18l-0.03,-0.1l-0.19,-0.2l-0.3,-0.16l-0.19,-0.22l-0.34,-0.16l-0.02,-0.37ZM207.42,530.52l-0.4,0.18l-0.11,-0.19l0.07,-0.03l0.24,0.07l0.2,-0.03ZM207.35,529.25l-0.17,0.22l-0.23,-0.1l-0.3,0.22l0.27,-0.35l0.42,-0.0ZM203.2,525.74l0.19,0.12l-0.03,0.06l0.05,0.04l-0.2,0.3l-0.45,-0.03l-0.06,0.25l-0.05,-0.23l0.5,-0.35l0.05,-0.15ZM202.24,522.6l0.14,0.09l0.3,0.01l0.13,0.37l-0.07,0.02l-0.21,-0.16l-0.19,-0.07l-0.13,-0.14l0.03,-0.11ZM198.34,516.95l-0.13,-0.06l0.02,-0.12l0.25,0.01l-0.13,0.17ZM192.52,506.08l-0.0,0.0l-0.04,-0.05l0.04,0.05ZM177.09,499.6l-0.15,-0.57l0.12,-0.1l0.15,0.29l-0.11,0.38ZM104.59,526.27l-0.34,-0.04l-0.3,0.1l-0.08,0.44l-0.27,-0.22l0.13,-0.13l0.04,-0.41l0.83,0.28ZM103.26,526.69l-0.14,0.19l-0.2,0.02l-0.11,0.15l-0.41,0.0l-0.26,0.15l-0.1,0.13l-0.03,-0.24l-0.05,-0.06l-0.22,-0.14l-0.17,-0.04l-0.17,-0.19l-0.55,-0.33l-0.27,-0.01l-0.63,0.16l-0.59,0.79l-0.04,0.27l0.05,0.16l-0.04,0.35l-0.47,0.7l-0.4,0.03l-0.3,0.39l0.01,0.07l-0.29,0.14l-0.22,0.23l-0.25,-0.27l-0.15,-0.38l-0.14,-0.2l0.23,-0.23l0.07,-0.19l-0.04,-0.42l-0.06,-0.1l0.89,-1.17l0.3,-0.19l0.17,-0.21l0.6,-0.41l0.36,-0.34l0.25,-0.04l1.01,-0.35l0.04,0.04l0.79,0.02l0.12,0.3l0.34,0.39l0.36,0.56l0.4,0.22l0.03,-0.03l0.28,0.08ZM101.68,527.82l-0.45,0.2l-0.16,-0.13l-0.16,-0.01l0.05,-0.2l0.51,0.13l0.2,-0.0ZM96.09,530.12l-0.25,0.49l-0.04,-0.4l-0.22,-0.15l-0.04,-0.1l0.26,-0.14l0.2,-0.17l0.13,0.12l-0.03,0.35ZM93.53,531.89l-0.15,0.2l-0.03,0.27l-0.31,0.19l-0.55,-0.14l-1.19,0.09l-0.35,0.13l-0.2,0.13l-0.39,0.38l-0.11,0.2l-0.01,0.25l-0.18,0.14l-0.47,0.06l-0.15,0.08l-0.27,-0.04l-0.22,-0.47l-0.02,-0.1l0.48,-0.2l0.24,-0.24l0.66,-1.34l0.19,0.14l0.21,0.05l0.31,-0.01l0.22,-0.08l0.21,-0.35l0.43,-0.12l0.37,-0.33l0.4,-0.09l0.4,0.04l0.31,0.35l0.06,0.46l0.13,0.35ZM103.72,525.94l-0.17,-0.22l0.07,-0.01l0.1,0.23ZM113.95,514.67l-0.0,0.0l0.0,-0.0l0.0,0.0ZM86.35,489.38l0.02,-0.03l0.03,0.03l-0.05,-0.0ZM101.26,464.81l-0.14,0.0l-0.17,-0.06l0.31,0.06ZM204.38,528.17l-0.22,-0.32l0.14,-0.12l0.01,0.18l0.07,0.26ZM204.7,527.07l-0.04,-0.3l-0.12,-0.11l0.35,-0.15l0.19,-0.34l-0.06,-0.11l0.08,-0.22l0.09,-0.07l-0.03,-0.46l0.34,-0.15l0.42,0.73l0.05,0.24l0.22,0.35l0.09,0.29l-0.06,0.2l0.06,0.1l-0.12,0.07l-0.02,0.66l-0.08,0.1l-0.15,-0.08l-0.08,-0.45l-0.14,-0.36l-0.06,-0.43l-0.52,-0.27l-0.3,0.32l-0.02,0.41l-0.11,0.05ZM198.74,526.41l0.33,-0.17l0.08,-0.21l0.16,-0.15l0.11,-0.27l-0.0,-0.51l-0.16,-0.26l-0.19,0.06l-0.03,-0.12l0.08,-0.07l-0.04,-0.21l0.25,0.06l0.22,-0.03l0.3,0.19l0.16,-0.0l0.15,0.09l0.18,0.27l0.17,0.14l0.23,0.3l0.01,0.09l0.21,0.32l0.07,0.38l-0.03,0.13l-0.08,0.03l-0.04,0.19l-0.12,0.09l-0.12,0.26l0.13,0.2l-0.42,0.31l-0.08,0.12l0.07,0.25l0.0,0.2l0.22,0.34l0.36,-0.13l0.53,0.32l0.15,-0.07l0.24,0.12l0.1,-0.07l0.16,0.1l0.02,0.03l-0.25,0.03l-0.16,0.58l0.08,0.27l0.22,0.19l0.34,-0.03l-0.1,0.35l-0.08,0.09l-0.2,0.14l-0.07,-0.19l-0.23,-0.01l-0.19,-0.19l-0.16,-0.41l-0.04,-0.26l-0.16,-0.28l-0.26,-0.33l-0.41,0.15l-0.07,-0.14l-0.07,-0.52l-0.34,-0.17l-0.19,-0.46l-0.21,-0.08l0.04,-0.14l0.15,-0.14l0.29,-0.1l-0.03,-0.69l-0.3,-0.09l-0.25,0.02l-0.77,0.3l-0.09,-0.05l0.09,-0.19ZM202.1,530.84l0.14,0.24l0.25,0.08l-0.04,0.1l0.06,0.19l-0.45,-0.55l0.05,-0.06ZM198.94,523.22l0.01,0.13l-0.06,-0.11l-0.21,-0.15l0.03,-0.16l0.1,0.21l0.13,0.08ZM198.23,523.02l-0.09,0.01l-0.33,-0.14l0.1,-0.09l0.12,0.01l0.1,0.19l0.09,0.02ZM202.63,531.65l0.08,0.06l-0.06,0.04l0.0,-0.04l-0.02,-0.07ZM200.95,523.58l0.04,-0.03l0.01,-0.16l0.07,-0.05l0.06,0.27l-0.18,-0.03ZM201.52,523.72l0.26,-0.08l0.33,0.09l0.05,0.08l-0.24,0.19l0.01,0.06l-0.15,-0.15l-0.15,-0.03l-0.11,-0.16ZM202.07,524.3l0.03,-0.01l-0.02,0.15l0.01,-0.05l-0.01,-0.1ZM200.36,520.41l0.19,0.25l-0.29,0.07l0.06,-0.35l0.03,0.03ZM199.82,522.23l0.11,-0.18l0.19,0.06l0.21,-0.01l-0.03,0.26l0.04,0.14l-0.16,0.08l-0.36,-0.36ZM195.65,519.99l-0.22,-0.24l-0.22,-0.03l0.22,-0.03l0.05,-0.15l0.22,0.02l0.11,-0.11l0.16,0.31l-0.11,0.27l-0.2,-0.04ZM197.54,519.86l0.09,-0.42l-0.06,-0.4l-0.34,-0.26l-0.02,-0.24l-0.33,-0.16l-0.31,-0.33l0.8,0.2l0.77,0.35l0.17,0.32l-0.36,0.17l0.06,0.71l0.11,0.26l0.21,0.17l-0.04,0.31l0.28,0.18l0.26,0.35l-0.03,0.05l-0.28,-0.02l-0.19,-0.14l-0.31,-0.02l-0.36,0.25l-0.02,-0.22l0.06,-0.1l-0.16,-0.24l0.12,-0.06l-0.02,-0.16l-0.13,-0.23l0.04,-0.31ZM197.65,521.21l0.02,0.11l-0.03,0.01l-0.0,-0.0l0.0,-0.12ZM199.3,519.85l-0.07,-0.11l-0.02,-0.11l0.02,0.06l0.06,0.15ZM199.18,519.48l-0.22,-0.37l-0.11,0.02l-0.16,-0.15l0.15,0.01l0.09,-0.06l0.06,-0.33l0.3,0.3l0.05,0.17l-0.16,0.19l-0.01,0.22ZM188.37,512.81l-0.12,-0.14l-0.06,-0.12l0.25,0.25l-0.07,0.0ZM188.68,513.02l0.28,0.1l0.38,-0.6l-0.17,-0.24l-0.26,-0.22l-0.23,-0.34l0.43,-0.19l-0.08,-0.48l-0.1,-0.11l0.14,0.08l0.51,-0.2l0.06,-0.32l0.1,-0.08l0.25,0.18l0.2,0.02l0.21,0.17l-0.17,0.2l-0.4,0.03l-0.19,0.08l-0.02,0.25l-0.09,-0.01l-0.44,0.4l0.0,0.05l0.21,0.35l0.1,0.05l0.1,0.18l0.19,0.15l0.56,0.23l0.17,0.12l0.16,0.23l0.4,0.18l-0.05,0.18l0.16,0.25l-0.94,-0.74l-0.31,-0.1l-0.45,0.53l0.16,0.3l-0.12,0.19l-0.06,-0.08l-0.17,-0.07l-0.12,-0.27l-0.35,-0.33l-0.04,-0.11ZM190.88,512.01l0.22,-0.39l0.27,-0.21l0.62,0.08l0.09,0.13l0.38,0.12l0.03,0.07l-0.03,0.12l-0.3,-0.18l-0.61,0.11l-0.03,0.4l0.15,0.27l-0.79,-0.52ZM191.4,513.9l0.18,-0.01l0.14,0.13l0.31,-0.02l0.53,-0.29l0.04,0.35l0.13,0.41l0.0,0.38l-0.15,-0.01l-1.18,-0.94ZM189.68,514.21l0.2,0.24l0.08,-0.02l-0.03,0.08l0.08,0.32l-0.49,-0.42l0.16,-0.19ZM190.11,514.95l0.09,0.01l0.09,0.13l-0.03,0.09l-0.04,0.02l-0.11,-0.24ZM191.28,515.71l0.12,-0.0l0.19,-0.14l0.04,0.18l0.43,0.02l0.21,0.14l-0.07,0.1l0.26,0.4l0.03,0.27l0.29,0.24l0.19,0.71l0.02,0.05l0.06,-0.02l0.12,0.19l-0.08,-0.01l-0.02,0.06l0.07,0.31l-0.01,0.23l0.15,0.49l0.03,0.4l0.11,0.22l0.02,0.23l0.09,0.18l0.03,0.73l-0.17,0.04l-0.04,0.35l0.14,0.43l0.02,0.51l-0.05,0.18l0.03,0.14l-0.27,-0.44l-0.32,-0.76l0.22,-0.11l0.16,-0.38l0.18,-0.24l-0.34,-0.64l-0.13,0.01l0.01,-0.18l-0.15,-0.23l-0.19,-0.12l-0.19,0.06l-0.36,-0.45l-0.2,0.04l0.07,-0.11l-0.07,-0.24l0.48,-0.26l0.07,-0.34l-0.03,-0.13l-0.26,-0.29l-0.42,-0.01l0.34,-0.42l-0.22,-0.36l-0.46,-0.56l-0.2,0.02l0.16,-0.26l-0.06,-0.24ZM148.76,498.75l0.04,-0.1l0.01,0.1l-0.05,-0.0ZM124.32,516.05l0.14,-0.15l0.0,-0.34l0.14,-0.12l0.0,-0.23l0.05,-0.08l0.12,-0.08l0.29,0.01l0.06,-0.18l0.36,-0.12l-0.02,-0.26l0.08,-0.09l0.26,-0.1l0.21,0.05l-0.26,0.29l0.27,0.41l0.4,0.05l0.11,0.58l0.09,0.15l0.19,0.16l0.2,0.38l0.22,0.22l0.41,0.21l0.23,-0.04l-0.13,0.17l0.01,0.21l-0.08,-0.15l-0.34,-0.19l-0.47,0.18l-0.11,0.13l-0.03,-0.11l-0.28,-0.03l-0.12,-0.1l-0.22,-0.05l-0.48,-0.04l-0.57,0.11l-0.32,-0.68l-0.18,-0.13l-0.22,-0.04ZM125.48,518.15l0.1,-0.09l0.01,-0.01l-0.01,0.19l-0.1,-0.1ZM128.71,516.5l-0.34,0.06l-0.02,0.09l-0.23,-0.02l0.05,-0.39l-0.2,-0.25l-0.19,-0.14l-0.04,-0.21l-0.15,-0.25l-0.02,-0.29l0.23,-0.04l0.11,-0.38l0.37,-0.13l0.35,-0.29l0.04,-0.23l0.06,-0.06l0.23,-0.0l0.1,-0.09l0.27,0.13l0.42,-0.57l-0.01,-0.34l0.15,0.02l0.01,0.28l0.17,0.31l0.43,0.18l0.19,-0.08l0.15,-0.16l0.06,-0.24l-0.02,-0.23l0.26,0.01l0.17,-0.19l0.08,-0.18l0.21,-0.01l0.02,0.14l-0.19,0.2l-0.22,0.34l0.03,0.42l0.03,0.05l0.24,0.05l0.05,0.07l-0.01,0.13l0.2,0.38l0.39,0.04l-0.13,0.22l-0.16,-0.06l-0.26,0.04l-0.11,-0.08l-0.24,-0.02l-0.25,-0.18l-0.73,-0.1l-0.32,0.04l-0.07,0.04l-0.02,0.21l-0.36,0.4l-0.02,0.09l-0.01,0.3l0.23,0.16l-0.41,-0.13l-0.29,0.34l0.01,0.28l0.01,0.06l0.05,-0.01l0.0,0.12l-0.16,0.0l-0.2,0.17ZM127.67,513.4l-0.5,-0.11l0.01,-0.19l0.14,-0.19l0.16,-0.07l0.18,0.18l0.01,0.38ZM130.36,515.59l0.16,-0.04l0.15,0.16l0.23,0.14l-0.08,-0.0l-0.45,-0.26ZM130.4,511.23l-0.18,-0.12l-0.06,-0.13l-0.12,0.03l-0.03,-0.1l0.26,0.09l0.46,-0.4l-0.18,-0.38l0.54,-0.02l-0.17,0.68l-0.14,-0.09l-0.37,0.3l-0.03,0.13ZM131.23,510.07l0.03,-0.27l-0.16,-0.63l0.06,-0.05l0.25,-0.04l0.04,0.38l0.26,0.21l0.07,0.23l0.25,0.02l-0.13,0.45l-0.45,-0.42l-0.22,0.13ZM80.61,497.31l-0.12,-0.29l0.3,-0.03l0.93,0.16l0.35,-0.06l0.28,-0.27l0.09,-0.4l0.11,-0.06l0.26,0.05l0.38,-0.29l0.04,-0.16l0.05,-0.03l0.17,0.25l0.31,-0.12l0.22,-0.19l0.23,0.06l0.16,0.3l0.17,0.07l0.39,0.05l0.23,-0.05l0.16,-0.11l0.13,0.09l-0.06,0.12l0.06,0.31l-0.1,0.38l0.16,0.28l-0.1,0.16l0.19,0.3l-0.06,0.01l0.17,0.48l-0.27,0.19l-0.02,-0.03l-0.22,0.11l-0.06,-0.05l-0.48,-0.01l-0.07,0.05l0.01,0.16l-0.14,0.08l-0.06,-0.05l-0.36,-0.02l-0.2,0.06l-0.12,0.1l-0.36,-0.13l-0.53,0.01l-0.18,-0.16l-0.21,-0.07l-0.16,-0.16l-0.67,-0.41l0.0,-0.14l-0.06,-0.05l-0.25,-0.04l-0.06,-0.08l-0.22,0.08l-0.05,-0.03l-0.14,-0.28l-0.22,-0.15ZM84.99,535.84l-0.1,0.03l-0.03,-0.05l0.08,-0.05l0.05,0.06ZM81.55,538.93l0.0,-0.01l0.02,0.02l-0.02,-0.01ZM82.58,538.26l0.03,0.04l-0.04,-0.01l0.01,-0.03ZM82.61,537.86l-0.1,0.18l-0.02,-0.16l-0.36,-0.06l-0.51,-0.24l-0.24,-0.0l-0.09,-0.12l0.14,-0.2l0.17,-0.02l0.16,-0.12l-0.03,-0.01l0.35,-0.01l0.13,0.07l0.02,0.33l0.32,0.23l0.04,0.13ZM82.62,538.66l-0.11,-0.03l0.06,-0.04l-0.01,-0.09l0.06,0.16ZM75.58,541.97l-0.07,-0.27l0.22,-0.25l0.1,-0.08l0.14,0.04l0.29,-0.07l0.08,0.04l-0.19,0.12l-0.22,0.36l-0.35,0.11ZM76.95,540.58l-0.07,-0.16l-0.0,-0.34l0.38,-0.36l0.44,-0.13l0.28,0.18l0.02,0.25l-0.32,0.15l-0.48,0.35l-0.24,0.06ZM65.19,471.35l-0.04,0.21l0.3,0.15l-0.11,0.1l0.28,0.2l0.67,-0.03l0.17,-0.06l0.26,0.07l0.23,0.2l0.4,0.02l0.13,0.06l0.4,-0.02l0.53,-0.36l0.33,-0.35l0.33,-0.06l0.25,-0.18l0.09,0.05l0.27,0.01l0.37,0.4l0.24,0.11l0.06,0.33l-0.11,0.25l0.14,0.46l0.53,0.04l0.3,0.19l0.11,0.15l0.21,0.07l0.46,-0.0l0.11,0.35l0.21,0.23l0.4,0.13l0.14,-0.0l0.32,-0.12l0.26,0.36l0.21,0.09l-0.47,0.12l-0.29,0.18l-0.21,0.2l-0.01,0.16l-0.4,0.31l-0.11,0.21l-0.07,-0.04l-0.2,-0.36l-0.27,-0.24l-0.47,-0.21l-0.04,0.03l-0.35,-0.33l-0.2,-0.01l-0.08,-0.35l-0.1,-0.17l-0.37,-0.21l-0.43,-0.43l-0.76,-0.42l-0.23,-0.09l-0.18,-0.01l-0.14,-0.18l-0.2,-0.12l-0.19,-0.02l-0.79,0.12l-0.05,0.07l-0.28,0.12l-0.17,0.18l-0.3,0.12l-0.11,0.1l0.06,0.07l-0.14,0.13l-0.26,0.16l-0.09,-0.03l-0.2,-0.15l-0.4,-0.13l-0.2,-0.36l-0.07,-0.37l0.02,-0.45l0.28,-0.6ZM73.85,474.42l0.36,-0.07l0.24,-0.22l0.51,0.12l-0.0,0.16l-0.14,0.27l-0.17,-0.01l-0.16,-0.1l-0.27,-0.07l-0.29,0.03l-0.07,-0.1ZM55.92,547.58l-0.04,0.06l-0.01,-0.07l0.05,0.01ZM56.35,546.27l0.13,0.02l0.09,0.1l-0.06,0.08l-0.08,-0.15l-0.09,-0.05ZM47.85,549.47l-0.06,0.01l0.01,-0.13l0.13,0.02l-0.08,0.1ZM11.46,542.95l0.21,0.02l0.0,-0.04l0.32,-0.03l-0.01,0.16l-0.36,0.23l-0.08,-0.02l0.02,-0.11l-0.1,-0.21Z",
            "name": "Alaska"
        },
        "US-NJ": {
            "path": "M766.65,213.85l0.57,-0.47l0.22,-0.78l0.59,-0.65l0.06,-0.68l0.73,-0.92l1.35,-0.74l2.72,-0.71l0.7,-0.64l0.08,-0.56l-0.2,-0.3l0.53,-0.21l0.77,-1.16l0.73,-0.4l0.8,-0.81l2.84,-1.37l0.34,-0.56l-0.23,-0.88l-3.19,-3.51l-0.43,-1.12l-0.49,-0.17l-0.41,0.16l-0.34,-0.4l-0.22,-1.81l-0.31,-0.69l-1.03,-0.46l-0.45,0.04l-0.18,-2.32l0.24,-0.73l-0.14,-0.25l0.29,-0.35l0.89,-0.31l0.31,-1.0l0.55,-0.73l-0.08,-0.77l-1.07,-1.74l1.58,-1.01l0.78,-1.25l0.61,-0.44l0.81,-1.1l0.66,-1.91l0.96,-1.05l1.02,-0.41l11.9,7.29l-0.7,2.33l-0.67,1.14l-0.35,1.51l-0.64,0.59l-0.05,-0.26l-0.61,-0.24l-0.43,0.31l-0.31,0.68l-0.57,0.49l-0.51,1.5l-0.6,0.84l-0.16,1.44l0.44,0.73l0.92,0.39l1.23,-0.08l2.15,0.87l0.12,1.8l-1.33,3.98l0.14,0.48l-0.59,0.25l-0.13,0.42l0.16,0.37l-0.85,0.5l-0.06,0.32l0.33,0.31l-0.33,0.46l0.25,0.69l-1.08,3.3l0.39,0.62l-0.64,1.08l-1.49,1.34l-0.33,0.77l-1.24,-0.25l-0.24,0.37l0.01,0.75l0.37,0.87l-0.86,0.27l-0.46,0.99l-0.02,0.26l0.75,0.66l-0.29,0.15l-0.04,-0.41l-0.44,-0.29l-0.53,0.08l-0.77,1.21l-1.29,0.24l-0.29,0.35l0.29,0.66l0.65,0.23l-0.87,0.91l-0.59,1.24l-0.77,0.42l0.04,0.5l0.33,0.13l-0.44,0.65l-0.72,0.5l-0.16,0.83l-1.71,1.05l0.21,-1.41l0.8,-1.74l0.11,-0.79l-0.33,-0.88l-0.75,-0.48l-1.06,0.03l-0.29,-0.39l-0.37,-0.1l-1.54,0.43l-0.11,-0.69l-1.01,-0.78l-0.22,-0.45l-0.9,-0.19l-0.42,-0.77l-0.65,-0.12l-2.42,-2.52l0.36,-1.53l-0.68,-1.06Z",
            "name": "New Jersey"
        },
        "US-ME": {
            "path": "M836.31,93.87l0.86,-0.83l0.33,-0.02l0.86,2.07l0.23,0.26l0.56,0.04l0.4,-0.44l0.06,-0.77l0.56,-0.71l0.02,-1.82l0.2,-0.44l0.26,-0.06l1.28,0.92l0.83,-0.18l0.37,-0.44l-0.09,-0.77l-0.99,-0.82l-0.24,-0.74l0.62,-1.33l1.46,-1.7l2.72,-1.54l0.31,-0.95l-0.21,-1.07l1.51,-1.28l0.85,-1.35l0.08,-0.95l-0.88,-0.67l0.38,-1.41l-0.26,-0.56l0.85,-0.77l0.16,-0.62l-0.11,-0.73l-0.47,-0.82l0.67,-1.66l0.57,-0.5l0.16,-1.01l1.81,-1.5l1.03,-6.41l11.69,-17.0l2.33,0.53l-0.11,2.01l0.19,1.57l0.4,0.61l2.09,1.35l0.66,0.01l1.95,-1.04l1.73,-0.17l1.1,-0.92l0.92,-0.45l0.56,-0.02l0.71,0.34l0.79,-0.24l0.73,-1.34l0.53,-0.15l1.34,0.52l0.65,0.81l2.49,1.89l0.79,1.35l1.13,1.3l0.84,0.56l0.37,25.13l0.4,0.85l-0.57,0.84l0.34,1.22l-0.57,1.33l0.05,1.31l0.51,0.8l0.72,0.35l0.34,-0.11l0.88,0.94l0.9,0.43l2.55,0.33l0.06,1.05l-0.91,0.77l-0.14,0.39l0.21,0.95l0.77,1.41l-0.6,1.72l-0.05,0.94l2.02,2.52l0.96,0.24l0.69,-0.54l0.12,-0.5l0.75,0.62l0.32,0.03l0.25,0.68l0.71,0.86l-0.0,0.8l0.88,1.33l-0.13,0.47l-0.45,-0.31l-0.5,0.25l-0.09,0.8l-0.68,-0.41l-0.46,0.26l-0.07,0.65l0.59,0.77l0.21,1.05l0.39,0.32l0.39,-0.33l0.06,-0.45l0.43,-0.03l0.01,0.27l0.63,0.31l0.54,-0.69l0.17,0.5l-0.58,0.7l-0.56,-0.0l-1.66,2.18l-0.59,0.46l-0.58,-0.25l-0.44,0.31l0.0,-0.9l-0.45,-0.47l-0.41,-0.03l-0.46,0.38l-0.55,-0.13l-0.19,0.45l0.26,1.0l-0.35,-0.62l-0.35,-0.12l-0.51,0.48l0.07,0.58l-0.38,-0.4l-0.9,-0.23l-0.82,0.72l-0.08,0.45l0.39,0.23l-0.12,1.05l-0.22,0.11l-0.16,-0.66l-0.49,-0.24l-0.52,0.29l-0.56,0.96l0.06,-1.61l-1.2,-0.33l-0.77,0.45l-0.34,0.74l-0.32,0.13l-0.18,0.4l0.35,0.78l-0.55,-0.0l-0.44,0.32l-0.01,-0.29l-0.49,-0.37l-0.39,0.19l-0.18,0.45l-0.47,0.09l-0.12,0.64l0.6,0.47l0.12,0.44l-0.4,0.09l-0.37,0.74l-0.36,-0.34l-0.2,-1.99l-0.82,-0.77l-0.44,0.08l-0.29,-0.54l-0.62,0.14l-0.12,0.27l-0.4,-0.41l-0.72,-0.18l-0.44,0.31l-0.09,0.41l0.22,0.44l0.38,0.19l-0.11,0.35l-0.47,-0.22l-0.66,0.2l-0.31,0.63l-0.13,-1.12l-0.46,-0.36l-0.64,-0.04l-0.36,0.55l0.21,0.99l-0.27,-0.04l-0.41,0.41l-0.99,0.06l0.43,1.32l-0.26,1.02l0.29,0.78l-0.78,-0.7l-0.98,-0.1l-0.99,-0.78l0.24,-0.4l-0.11,-0.52l0.39,0.14l0.4,-0.17l0.1,-0.55l-0.24,-0.6l-0.59,-0.33l-0.39,0.21l0.57,-1.71l-0.03,-0.6l-0.28,-0.33l-1.13,-0.11l-0.59,1.86l-0.41,0.01l-0.87,0.73l-1.09,0.48l-0.14,0.48l0.71,1.78l-0.91,0.7l-1.41,3.57l0.03,1.15l0.33,0.25l-0.08,0.16l-0.71,0.32l-0.2,0.59l-0.66,0.36l-0.39,-0.46l-0.3,0.02l-0.72,0.73l-0.56,-0.25l-0.16,-0.46l0.14,-0.75l-0.62,-0.43l-0.81,0.8l-0.11,0.68l-0.6,0.42l-0.64,2.29l-0.58,-1.23l0.53,-1.15l-0.04,-0.63l-0.69,-0.18l-0.17,0.2l-0.71,1.85l-0.33,-0.36l0.62,-1.4l-0.33,-0.53l-0.79,0.25l-1.66,2.6l-0.14,-1.94l0.56,-0.97l-0.02,-0.43l-0.74,-0.19l-1.68,1.75l-0.19,0.52l0.31,0.67l0.77,-0.01l0.23,2.17l-0.07,-0.62l-0.42,-0.38l-0.71,0.08l-0.31,0.33l0.05,0.25l-1.27,-0.52l-0.96,0.88l-0.98,0.43l-1.07,1.0l-1.07,1.59l0.09,0.65l-0.43,0.01l-0.41,0.4l0.35,0.56l0.92,0.07l0.06,0.96l-0.81,0.04l-0.31,0.3l-0.36,-0.16l-0.65,0.38l-0.44,0.92l-0.01,0.94l0.22,0.53l-0.27,0.6l-1.13,0.96l-1.06,0.29l-0.7,0.87l-0.48,1.17l0.14,0.96l-1.21,2.47l-0.65,-0.54l-0.29,0.03l-0.27,0.4l-0.73,-1.0l0.19,-1.07l-0.18,-0.81l-0.77,-0.62l-1.62,-2.54l0.31,-3.44l-1.96,-37.69ZM854.44,125.42l-0.0,0.25l-0.14,0.19l0.12,-0.25l0.03,-0.19ZM855.7,126.06l0.22,0.79l-0.18,0.42l-0.22,-0.33l0.19,-0.88ZM858.87,123.84l0.14,0.89l-0.19,0.08l-0.33,-0.31l0.38,-0.67ZM871.97,114.19l-0.2,0.14l0.05,-0.23l0.14,0.09ZM864.94,122.64l0.0,0.02l-0.02,0.01l0.02,-0.03ZM877.71,115.0l0.42,-1.08l0.6,-0.48l-0.02,-0.47l0.54,-0.34l0.62,0.1l1.01,1.77l-0.67,0.44l-0.41,0.03l-0.62,-0.34l-0.39,0.32l-0.06,0.78l0.3,0.47l-0.13,0.16l-0.88,-0.49l0.05,-0.58l-0.36,-0.3ZM873.32,117.89l0.02,-0.6l0.35,-0.44l-0.04,-0.53l0.37,0.24l0.07,0.33l-0.42,0.16l-0.19,0.53l0.21,0.35l-0.36,-0.04ZM871.03,120.16l0.08,0.02l0.47,0.07l-0.37,0.34l-0.18,-0.43Z",
            "name": "Maine"
        },
        "US-MD": {
            "path": "M705.36,221.37l0.15,-9.28l18.93,0.0l-0.82,0.95l-0.87,-0.12l-1.58,0.41l-0.04,0.66l-0.46,0.37l0.06,0.72l-0.96,-0.13l-0.75,0.22l-1.33,-0.27l-0.9,-0.55l0.22,-0.55l-0.49,-0.57l-0.65,-0.18l-0.82,1.52l-0.49,0.31l-1.56,1.9l-1.15,-0.63l-1.08,0.35l-0.63,1.04l-1.84,1.4l-0.54,0.85l-0.89,0.23l-1.51,1.36ZM726.78,212.1l35.5,0.01l1.19,25.07l0.4,0.37l8.02,0.01l0.07,0.67l0.49,0.16l0.14,0.93l0.44,0.08l-0.75,1.46l-0.03,-0.18l-0.47,-0.06l-0.86,0.59l-0.77,2.27l-0.57,0.04l-0.48,0.53l-0.37,1.27l-3.55,0.47l-0.52,0.57l-1.71,-0.17l-0.9,0.38l-0.23,-0.53l0.14,-0.3l0.5,-0.16l1.2,-1.42l-0.26,-0.59l-0.33,-0.02l0.11,-0.36l-0.32,-0.49l-2.13,0.01l0.36,-0.36l1.21,-0.46l0.01,-0.72l-1.0,-0.22l-0.14,-0.21l0.85,-1.84l0.08,-0.97l-0.5,-0.23l-0.39,0.15l-0.82,1.35l-0.15,-0.6l-0.58,-0.22l-0.4,0.23l-0.88,1.2l0.26,0.94l-0.46,-0.68l-0.47,-0.19l-1.1,-1.58l-0.35,-0.26l-0.63,0.16l-0.45,-0.78l0.51,-0.61l0.16,-0.73l0.8,-0.35l0.36,-0.91l-0.09,-0.29l1.6,0.54l0.67,-0.03l0.61,-0.27l0.36,-0.61l0.19,-0.79l-0.16,-0.56l-0.4,-0.15l-0.36,0.23l-0.44,0.81l-0.34,-0.01l-0.75,-0.83l0.14,-0.34l-0.43,-0.4l-0.5,0.06l-0.06,-0.61l-0.72,-0.09l0.1,-0.34l0.98,-0.01l0.54,-0.76l-0.04,-0.55l-0.31,-0.32l-0.67,0.48l-0.07,-0.15l0.03,-0.28l0.97,-0.56l-0.08,-0.69l-0.44,-0.18l0.02,-0.42l-0.34,-0.36l-0.34,0.05l-0.4,-0.55l0.92,-0.5l0.18,-0.64l-0.14,-0.33l1.19,-1.53l0.13,-0.81l-0.45,-0.1l-0.76,0.44l-0.46,-0.27l-0.75,0.63l-0.49,-0.61l1.25,-3.01l0.49,-0.16l0.36,-0.67l4.06,-0.11l0.29,-0.65l-0.4,-0.39l-2.19,-0.16l0.93,-0.89l1.28,0.28l0.47,-0.39l-0.19,-0.47l-0.52,-0.34l0.49,-0.6l0.32,-0.98l-0.53,-0.47l-0.53,0.24l-0.87,1.01l0.33,-1.19l-0.49,-0.48l-0.46,0.19l-0.42,0.63l-1.01,-0.01l-0.62,0.23l-0.67,1.4l0.23,0.6l0.53,0.25l-1.68,1.3l0.21,-1.43l-0.51,-0.55l-0.46,0.15l-0.27,0.36l-0.27,1.21l-0.69,-0.36l-1.19,0.31l-0.16,0.7l0.84,0.41l-0.44,0.38l-0.81,0.02l-0.12,0.27l-0.37,-0.12l-0.49,0.54l0.73,1.29l-1.46,-1.03l-1.25,0.24l-0.01,0.71l1.27,0.86l0.61,1.02l0.68,0.08l0.3,0.7l-0.8,-0.28l-0.44,0.16l-0.15,0.42l-0.46,0.02l-0.32,0.35l0.11,0.79l1.13,1.05l-0.54,0.01l-0.31,0.35l0.0,0.43l0.42,0.7l-0.37,0.44l0.2,0.47l-0.13,0.43l0.35,0.56l-0.64,0.82l0.07,0.57l0.53,0.76l0.07,3.32l0.37,0.88l1.47,1.87l0.19,0.75l-0.51,0.02l-0.5,-0.89l-1.12,-0.5l-1.18,-1.46l-0.47,-3.04l-0.15,-0.5l-0.38,-0.28l-0.44,0.58l0.34,3.74l0.73,1.41l1.66,1.09l0.68,1.2l0.55,0.27l0.84,-0.11l-0.27,0.93l0.16,0.51l0.97,1.2l-0.15,0.89l-0.66,-0.44l-0.16,-1.23l-0.47,-0.55l-0.45,-0.07l-0.23,0.39l0.09,0.67l-0.13,-0.15l-0.45,0.12l-0.4,-0.86l-1.1,-0.9l-2.26,0.03l-0.45,-0.72l-0.3,-1.45l-0.98,-0.92l-0.48,0.03l-0.11,0.47l0.61,1.77l-0.14,-0.09l-1.17,-1.38l-0.45,-1.48l-0.53,-0.89l-0.43,-0.12l-0.58,1.1l-0.14,-0.67l-0.75,0.0l-0.25,0.19l0.12,0.74l-0.21,0.44l-0.74,0.3l-0.36,-0.6l-0.14,-0.88l0.42,-1.42l0.8,-0.36l0.07,-0.75l0.74,-0.2l0.54,-1.36l1.19,-0.68l0.23,-0.92l-0.22,-0.86l1.61,-1.64l-0.0,-0.56l-2.07,-2.07l-0.57,0.0l-0.79,0.8l-1.6,-0.61l-0.29,-0.85l-0.9,-0.7l-2.18,-0.46l-0.91,-1.04l0.84,-1.06l-0.16,-0.97l-1.01,-0.53l-0.67,-0.78l-1.38,-0.45l-1.07,-0.07l-0.25,-0.26l0.17,-1.15l-0.35,-0.56l-0.46,-0.2l0.34,-1.02l-0.43,-0.4l-0.43,0.05l-0.09,-0.58l-0.35,-0.26l0.33,-0.62l-0.29,-0.65l-0.61,-0.26l-1.38,0.32l-0.4,-0.1l-1.67,-1.54ZM762.6,243.81l-0.1,0.12l-0.05,0.02l0.04,-0.13l0.11,-0.02ZM759.94,239.91l-0.05,0.15l-0.08,-0.09l0.13,-0.06ZM755.82,234.28l-0.13,0.08l-0.02,0.03l0.03,-0.1l0.11,0.0ZM755.59,234.58l-0.02,0.07l-0.08,0.04l0.1,-0.12ZM755.31,226.74l-0.44,0.57l-0.52,0.05l0.33,-1.19l0.63,0.56ZM751.55,225.11l0.91,0.39l0.18,0.15l-0.47,0.13l-0.62,-0.67ZM755.66,230.45l-0.25,0.12l-0.57,-0.31l0.09,-0.25l0.28,-0.23l0.46,0.68Z",
            "name": "Maryland"
        },
        "US-AR": {
            "path": "M471.67,329.56l0.7,-32.59l-2.74,-21.04l68.75,0.0l0.55,1.44l0.83,0.7l-0.07,1.51l-0.73,0.41l-0.27,0.78l-1.35,0.69l-0.35,0.88l-0.79,0.4l-1.3,2.15l-0.05,0.66l0.49,0.3l9.78,-0.27l0.65,0.86l-1.05,0.14l-0.57,0.81l0.19,0.52l0.65,0.38l-0.7,0.59l-2.33,1.02l-0.36,0.36l-0.07,0.79l0.61,0.94l-0.47,0.46l-0.14,0.49l0.43,0.84l-0.91,0.2l-0.37,0.3l-0.24,1.25l-1.47,1.68l-0.05,1.44l0.51,2.72l-0.13,0.18l-0.92,-0.11l-0.35,0.22l-0.58,1.42l-1.41,0.68l-0.1,0.5l0.6,0.84l-0.01,0.52l-1.04,0.91l-1.88,0.81l-0.25,0.56l0.28,0.86l-0.16,0.18l-1.06,-0.08l-0.45,0.56l-0.45,1.6l0.27,1.39l-0.24,2.59l-1.16,0.8l-1.38,0.0l-0.15,0.5l0.21,0.82l-0.19,0.33l-0.84,0.18l-0.66,1.45l-1.37,0.89l-0.11,0.84l0.22,0.35l0.92,0.45l-0.07,0.51l-1.06,0.14l-2.06,0.88l-0.04,0.63l0.78,0.76l-0.47,0.94l0.34,1.19l-0.96,0.4l-1.85,2.05l0.4,0.69l0.81,0.48l-0.03,0.42l-1.09,0.29l-0.19,0.44l0.38,0.77l1.31,0.97l-0.08,1.44l-0.58,0.79l-0.14,0.76l0.22,0.36l0.87,0.42l0.24,1.82l-1.0,0.74l-0.12,1.75l-44.02,0.05l-0.09,-9.73l-1.0,-0.84l-0.81,0.08l-0.67,-0.33l-0.85,0.26l-1.03,-0.34l-0.55,0.56l-0.31,-0.01l-0.46,-0.42l-0.51,-0.02l-0.62,-0.99Z",
            "name": "Arkansas"
        },
        "US-MA": {
            "path": "M809.43,164.02l-0.34,-0.36l-10.33,-0.45l-0.18,-0.22l3.71,-13.68l30.21,1.05l1.95,-1.22l0.75,-1.26l0.98,-0.05l0.88,-0.78l1.43,-0.63l1.26,0.31l0.04,0.21l-0.42,-0.03l-0.34,0.65l1.1,0.9l-0.33,0.51l0.17,0.9l0.82,0.62l-0.15,0.28l0.28,0.37l0.85,0.21l0.3,0.34l-0.3,0.45l-1.74,0.39l-1.14,0.58l-0.36,0.98l0.37,0.27l-0.59,0.19l-0.28,0.47l-0.56,0.3l-0.21,0.44l0.1,0.6l-1.02,0.32l-0.18,0.27l0.19,0.51l-0.2,0.39l0.15,0.58l1.16,0.82l0.05,0.52l0.25,0.2l1.05,-0.25l0.39,0.12l0.48,-0.44l1.07,0.43l0.59,0.65l0.01,0.68l1.24,1.77l-0.42,1.09l-0.41,0.16l-0.08,0.62l1.22,1.2l1.13,0.21l0.27,1.27l-0.14,1.1l0.62,0.89l1.1,0.75l1.38,0.32l0.29,0.47l1.03,0.1l3.89,-1.51l0.57,-0.52l0.46,0.19l-0.04,1.78l-3.48,0.39l-1.11,0.47l-0.14,-0.16l-1.84,0.38l-0.43,-0.24l-0.56,0.28l-0.77,1.17l-2.11,0.57l-0.01,-2.47l0.34,-0.41l0.16,-0.79l-0.42,-0.44l-0.57,0.2l-0.82,-0.36l-0.44,0.39l-0.04,0.89l-0.47,0.63l-0.38,-0.06l-0.89,0.81l-0.49,-0.35l-0.62,0.31l-0.38,1.11l0.04,0.62l-1.04,0.5l-0.36,-0.87l-0.45,-0.13l-0.27,0.46l-0.22,-0.04l-0.21,-1.02l0.15,-0.98l-0.27,-0.44l-0.55,-0.18l1.11,-2.11l-0.08,-0.44l-0.44,-0.09l-0.41,0.23l-0.69,1.24l-0.68,-0.01l-1.1,-0.97l-0.18,-0.3l0.08,-1.83l-0.13,-0.26l-0.55,-0.19l-0.1,-2.16l-0.39,-0.37l-6.23,0.1l-0.23,-0.22l-14.89,-0.24l-0.41,0.36ZM842.84,151.59l-0.06,-0.04l0.09,-0.8l0.4,0.33l-0.43,0.51ZM853.26,167.65l-0.17,-0.7l0.04,-0.02l0.2,0.7l-0.06,0.01ZM852.85,165.96l-0.72,-0.34l-0.41,-1.47l0.97,1.26l0.15,0.55ZM849.77,163.24l-0.1,0.16l-0.15,-0.19l0.22,0.03l0.03,-0.0ZM850.69,179.78l0.24,0.01l0.28,0.13l-0.24,-0.04l-0.27,-0.1ZM851.34,179.95l1.33,-0.77l0.15,0.27l0.07,0.33l-0.41,0.22l-1.14,-0.04ZM840.53,178.36l0.24,-0.0l0.35,-0.12l-0.39,0.31l-0.2,-0.19ZM841.33,178.1l0.63,-0.99l1.1,-0.81l0.07,0.27l0.45,0.05l-0.04,0.37l0.2,0.19l0.64,0.2l0.05,0.35l-2.03,0.04l-1.09,0.35Z",
            "name": "Massachusetts"
        },
        "US-AL": {
            "path": "M566.41,389.21l-1.28,-26.77l6.18,-56.04l0.02,-0.3l-0.88,-0.7l-0.45,-0.85l39.28,0.46l6.27,38.27l0.48,1.25l0.05,0.92l0.77,1.48l0.26,1.64l1.54,2.36l0.53,1.6l-0.38,1.74l1.35,1.19l-0.29,0.46l-0.45,0.04l-0.28,0.25l0.0,0.33l-0.56,0.16l-0.36,0.42l-0.49,1.88l0.02,1.25l-0.94,1.78l-0.36,1.51l0.53,2.59l0.8,1.41l0.23,1.36l-0.34,1.08l0.1,0.54l-0.28,0.45l-0.2,2.03l-0.31,0.63l0.13,1.75l0.97,1.16l0.66,1.74l-40.08,0.01l-0.47,0.5l-0.0,0.95l-0.4,0.94l0.01,0.61l1.9,2.57l1.52,0.99l-0.58,2.15l0.3,1.4l0.26,0.33l-0.89,1.21l-1.06,0.66l-0.87,-0.73l-0.4,0.44l0.37,1.21l-2.11,0.5l0.14,-0.41l-0.19,-0.61l-0.81,-0.86l0.15,-0.61l-0.14,-0.35l-0.49,-0.26l-0.52,0.43l-0.37,-0.36l-0.35,-1.04l0.51,-1.46l-0.57,-1.78l-0.37,-0.45l-0.65,-0.26l-0.17,-0.74l-0.49,-0.23l-0.44,0.55l0.08,0.25l-0.96,2.47l-0.39,1.9l-0.13,2.16l-0.33,-0.02l-0.2,-0.6l-0.45,-0.17l-1.31,-0.41l-0.31,0.15l-0.38,-0.24l-0.67,0.14Z",
            "name": "Alabama"
        },
        "US-MO": {
            "path": "M451.6,194.19l19.74,0.55l5.42,-0.03l8.88,-0.22l7.28,0.09l17.93,-0.5l3.1,-0.26l0.36,0.35l0.3,0.88l0.83,0.44l0.25,0.55l1.07,0.74l0.2,0.7l1.03,0.9l-0.8,2.24l-0.13,1.92l0.42,3.42l0.77,1.39l-0.11,1.45l0.92,1.36l0.3,1.46l0.38,0.59l3.89,3.58l0.84,1.63l3.63,2.69l0.63,0.74l0.54,1.09l0.11,1.49l0.39,0.77l-0.22,0.6l0.28,1.7l0.75,1.57l0.65,0.74l0.96,0.24l0.82,-0.44l0.89,-1.18l0.53,-0.11l0.77,0.44l1.39,0.33l1.47,0.84l0.68,0.75l-1.07,1.66l0.02,2.07l-2.8,5.93l-0.08,0.94l0.47,1.8l1.83,2.17l0.87,0.59l1.17,1.29l0.63,0.24l1.08,0.88l1.31,0.22l1.38,1.32l1.65,0.89l1.15,2.01l1.75,0.92l0.18,1.18l-0.1,1.47l1.14,2.07l0.12,0.65l-0.2,0.52l-0.97,1.07l0.03,1.3l0.63,0.35l0.22,0.92l0.97,1.52l0.17,1.19l0.3,0.35l0.88,0.71l0.78,0.3l0.56,-0.26l0.09,-0.5l0.59,1.0l0.38,0.18l0.58,-0.12l-0.07,1.57l-0.45,0.93l0.31,1.44l-1.34,3.24l-0.41,0.01l-1.1,-1.12l-0.64,0.04l-0.44,0.68l-0.61,2.18l-0.42,0.49l0.18,-0.8l-0.41,-1.03l-0.87,-0.27l-0.74,0.52l-0.08,0.95l0.4,0.6l-0.1,0.6l0.38,1.22l-0.19,0.28l-1.11,0.23l-0.21,0.39l0.09,0.52l0.57,0.74l-1.41,0.15l-0.2,0.6l1.15,1.82l-0.84,0.54l-0.76,1.77l-9.39,0.26l1.1,-1.8l0.83,-0.45l0.25,-0.75l1.34,-0.68l0.33,-0.81l0.58,-0.26l0.33,-0.51l0.01,-2.04l-0.87,-0.77l-0.1,-0.67l-0.53,-0.92l-0.37,-0.24l-69.04,0.0l0.08,-52.02l-0.94,-0.65l-1.12,-0.09l-1.35,-0.73l-0.14,-0.86l-0.68,-0.58l-0.28,-0.65l0.01,-0.92l-0.29,-0.53l-0.49,-0.11l-0.26,-0.53l-1.01,-0.66l-0.54,-1.03l-0.66,-0.7l0.7,-0.41l0.14,-1.13l1.1,-1.11l0.12,-0.7l0.92,0.19l0.57,-0.37l0.15,-0.45l-0.25,-0.63l0.03,-1.03l-0.91,-0.72l0.02,-0.61l-0.29,-0.44l-1.11,-0.07l-1.26,0.82l-0.71,-0.67l-0.68,-0.19l-0.23,-0.47l-0.6,-0.28l-1.57,-1.53l-0.97,-0.31l0.2,-1.46l-1.15,-1.64l0.12,-0.95l-0.34,-0.36l-0.94,-0.2l-0.52,-0.81l-0.74,-0.28l0.07,-0.47l-0.51,-1.17l-0.01,-0.6l-0.51,-0.94l0.03,-0.68l-0.36,-0.49l-0.79,-0.3l-0.03,-0.45ZM552.41,264.59l-0.01,-0.02l0.01,0.0l0.0,0.02Z",
            "name": "Missouri"
        },
        "US-MN": {
            "path": "M428.9,9.38l28.82,0.0l0.06,1.27l0.59,0.81l0.93,0.53l1.93,-0.44l0.62,-0.54l0.58,-0.97l0.87,-0.29l0.47,0.33l0.67,1.13l1.03,1.08l0.93,0.37l0.9,0.03l0.25,1.34l1.85,1.63l1.87,0.64l2.84,-0.28l0.28,0.28l0.1,0.7l0.66,0.45l5.45,0.36l0.4,0.29l0.46,1.76l0.7,0.7l3.06,-0.2l0.45,-0.24l1.08,-0.09l0.84,-0.63l0.12,-0.76l2.67,-0.68l4.23,0.29l1.45,0.88l3.55,1.0l0.13,0.18l-0.75,0.2l-0.5,0.42l-0.07,0.86l0.49,0.51l0.71,0.16l1.47,-0.18l0.92,0.21l0.26,0.68l0.11,1.63l1.48,2.6l0.73,0.11l1.14,-0.74l-0.09,-1.58l0.2,-0.29l1.72,-0.34l1.16,0.07l0.23,0.16l0.55,1.66l0.54,0.65l2.04,1.03l1.61,0.34l0.53,0.69l-0.21,0.38l0.09,0.49l0.57,0.43l1.41,0.19l-0.1,0.41l0.39,0.51l1.52,-0.07l1.14,0.35l0.91,-0.46l1.5,-0.22l3.17,-2.46l2.79,-1.4l0.18,0.11l0.0,0.94l0.52,0.47l0.37,1.33l0.94,0.63l2.42,-0.47l0.87,0.48l0.71,-0.26l0.41,0.12l5.31,-0.59l0.57,0.26l1.21,1.91l1.23,0.77l0.63,0.06l1.79,-0.7l0.89,0.3l0.62,-0.09l-1.19,1.07l-5.26,2.74l-3.12,1.0l-0.69,0.42l-3.14,0.88l-4.1,2.24l-2.49,2.41l-1.05,0.51l-7.72,8.47l-1.04,0.55l-1.25,1.53l-1.42,0.94l-0.79,0.94l-1.54,0.88l-3.09,2.45l-1.04,1.79l-0.6,0.41l-0.23,0.99l-0.81,-0.07l-0.5,0.47l-0.02,12.7l-0.61,0.52l-0.3,0.65l-1.07,-0.01l-0.6,0.79l-0.86,0.09l-0.69,0.8l-2.2,1.05l-1.1,1.83l0.01,0.73l-1.91,2.3l-0.17,2.1l0.31,0.95l0.28,0.25l1.87,0.31l0.43,1.34l0.82,1.3l-0.68,1.9l-0.82,1.21l-0.21,2.14l0.36,1.36l-0.81,1.18l0.48,1.5l0.2,1.72l-0.31,0.72l0.01,1.53l-0.62,1.32l0.09,0.47l1.39,1.03l1.32,1.28l0.33,0.59l0.68,0.43l2.99,0.63l0.83,0.87l0.87,1.52l2.82,0.73l2.28,2.11l2.07,3.75l0.7,0.38l1.76,1.62l0.66,0.27l1.41,0.0l1.0,0.79l0.86,0.17l0.69,1.41l0.98,0.54l0.19,0.4l0.09,2.01l0.55,1.33l-0.19,1.56l0.14,3.17l-80.35,0.02l-0.0,-38.79l-0.66,-1.31l-0.81,-0.82l-0.57,-0.4l-2.01,-0.49l-0.89,-1.97l-1.42,-1.87l0.24,-0.69l2.96,-2.29l1.06,-2.13l0.5,-2.48l-0.3,-1.64l0.3,-1.62l-0.12,-1.85l-0.48,-1.08l-0.1,-2.42l-1.77,-2.75l-0.08,-0.68l-0.36,-0.51l-0.14,-2.25l-0.64,-1.04l0.22,-1.73l-0.31,-1.61l0.24,-1.86l0.4,-0.94l-0.16,-0.53l-0.54,-0.33l-0.36,-1.11l-0.0,-3.8l-0.34,-2.09l0.11,-2.9l-0.41,-0.84l0.25,-1.52l-0.17,-1.13l0.12,-1.51l-0.37,-0.54l-0.26,-1.38l-0.89,-2.34l-0.54,-0.72l-0.38,-1.47l0.1,-1.26l-0.49,-0.59l-1.32,-4.1l-0.12,-1.74l0.22,-1.73l-0.44,-2.15l0.32,-1.21l-0.53,-2.53l0.12,-0.85l0.75,-1.91l-0.13,-1.14l-1.85,-6.53ZM461.11,0.6l1.32,0.6l1.08,-0.16l0.35,0.55l-0.15,1.93l-0.31,0.39l-1.73,0.76l-0.12,-0.54l-0.44,-0.17l-0.01,-3.36Z",
            "name": "Minnesota"
        },
        "US-CA": {
            "path": "M6.71,193.39l0.41,-1.28l0.52,0.3l0.55,-0.22l0.19,-1.18l0.52,-0.96l1.12,-0.53l0.4,-0.62l-0.32,-0.65l-0.91,-0.07l0.74,-2.86l-0.65,-1.37l-0.08,-0.82l1.09,-3.47l0.49,-3.08l-0.33,-1.76l0.14,-0.25l-0.49,-0.87l-0.03,-0.83l-0.53,-1.17l-0.04,-0.88l-0.72,-0.93l-1.05,-0.73l0.75,-1.53l0.02,-2.47l64.74,0.0l0.14,61.4l29.2,25.99l22.85,21.54l22.84,22.18l8.7,8.18l0.2,2.35l0.76,0.7l0.41,1.43l0.83,0.44l1.02,2.04l0.06,0.79l0.72,1.08l0.05,1.24l3.1,2.21l0.66,0.55l0.07,0.38l-1.45,1.49l-2.51,1.48l-0.49,0.72l-0.29,1.12l-1.32,1.17l-0.19,0.78l0.43,0.79l-0.34,0.51l0.03,0.73l0.31,0.88l-0.13,0.63l0.18,0.45l-0.41,0.67l-0.23,2.12l-0.66,0.77l-0.73,1.54l-1.33,0.31l-0.31,0.55l0.38,0.68l-0.31,1.21l0.6,0.87l0.14,0.98l-0.29,2.37l0.64,0.79l2.06,0.37l0.75,0.82l0.16,1.99l-0.88,0.78l-0.17,1.18l-1.95,-0.23l-1.01,0.66l-36.79,3.3l-0.02,-0.87l0.28,-0.1l0.19,-0.46l-0.31,-0.87l-0.62,-0.7l-0.97,-0.39l-0.47,0.08l-0.01,-0.93l-0.4,-0.82l0.42,-0.72l0.02,-0.53l-0.91,-3.49l-0.87,-1.83l-2.26,-3.09l-3.66,-2.85l-1.41,-1.44l-2.38,-1.38l-2.23,-2.19l-2.06,-0.39l-0.69,0.31l-0.27,0.92l-0.55,-0.46l-0.78,-0.04l-0.14,-0.23l0.38,-0.68l-0.12,-1.36l-0.72,-1.66l-1.2,-1.48l-0.99,-0.46l-3.8,0.57l-0.79,-0.4l-2.33,-0.54l-1.39,-0.82l-0.61,0.02l-1.04,-0.81l-0.85,-2.1l-0.91,-0.23l-1.83,-1.64l-2.19,-1.07l-1.16,-0.13l-0.78,0.17l-0.55,0.43l-1.15,-0.64l-1.07,0.24l-2.43,-1.09l-0.91,0.19l-1.45,-0.31l-4.19,0.46l-0.74,-1.21l-0.65,-0.55l-1.34,-0.35l0.68,-2.27l-0.46,-1.12l0.26,-1.8l-0.79,-1.03l0.62,-2.27l-0.18,-2.14l-1.11,-0.89l-1.15,0.03l-1.42,-0.79l0.03,-1.35l0.66,-0.24l0.15,-0.49l-0.84,-1.79l-0.73,-0.54l-1.42,-0.42l-2.3,-3.02l-1.82,-0.72l-0.84,-2.24l-0.67,-0.46l-1.23,-1.42l-0.22,-1.19l-0.55,-1.02l-1.19,-0.58l-1.24,-2.36l-0.53,-0.56l-2.11,-1.25l-0.3,-0.66l-0.48,-0.38l-0.5,-2.78l-0.4,-1.01l0.31,-0.24l0.08,-0.42l-0.17,-0.45l-0.56,-0.41l0.27,-0.54l0.57,0.41l0.71,-0.17l0.59,-0.89l0.21,-1.21l0.71,-0.16l-0.0,-0.84l-0.42,-0.14l0.15,-1.12l-1.83,-2.93l-0.66,-0.29l-0.9,0.27l-1.78,-0.03l-1.12,-0.7l-1.3,-1.56l-1.03,-0.81l-1.17,-1.78l0.25,-2.22l-0.16,-1.0l-0.75,-2.01l-0.43,-0.5l-0.51,-0.09l-0.03,-1.03l0.38,-1.09l-0.36,-2.39l0.26,-0.62l0.79,-0.07l0.33,0.74l-0.17,1.99l0.31,1.02l0.8,0.37l0.54,0.54l0.48,-0.02l0.59,0.49l0.2,0.47l1.2,0.45l0.57,0.79l0.89,0.17l0.7,-0.36l-0.08,-0.66l-0.36,-0.56l-0.72,-0.32l-0.26,-0.44l-0.96,-3.04l-0.62,-0.51l0.05,-0.66l-1.52,-0.6l0.22,-1.02l-0.15,-0.94l-1.39,-1.11l0.51,-0.76l0.7,-0.12l0.95,-0.89l1.31,0.63l1.61,-0.66l5.43,0.96l0.54,-0.2l-0.05,-0.57l0.35,-0.75l0.55,-0.15l0.76,0.78l0.66,0.24l1.07,0.88l0.56,-0.37l-0.06,-0.36l-0.55,-0.74l-1.79,-1.34l-0.84,-0.12l-0.66,0.17l0.09,-0.54l-0.4,-0.46l-0.44,0.19l-0.72,1.08l-1.67,0.17l-0.32,0.33l-0.23,-0.41l-0.97,-0.12l0.14,-0.42l-0.18,-0.55l-0.88,-0.24l-0.84,0.46l-0.37,0.86l-0.86,0.56l-1.38,-0.5l-0.54,-0.68l-1.65,-0.94l-0.55,0.17l-0.42,0.65l-0.83,0.08l-0.38,0.46l0.11,1.71l0.32,0.62l-0.34,1.37l0.42,0.46l-0.26,0.63l0.15,0.55l-2.51,-2.05l-0.46,-0.04l-0.14,0.3l-0.83,-0.67l-0.42,-0.86l-1.32,-0.76l-0.57,-0.81l-0.57,-0.03l0.26,-1.23l0.23,0.66l1.0,1.13l0.49,0.14l0.23,-0.45l-0.15,-0.59l-2.04,-2.91l-0.25,-0.75l-1.26,-1.02l0.01,-0.41l-0.89,-1.85l-0.57,-0.58l-2.3,-1.38l-2.61,-3.53l-1.4,-1.22l-2.58,-2.95l-0.04,-0.37l0.51,-0.67l0.13,-0.67l-0.22,-1.8l-0.9,-1.78l-0.95,-3.14l0.53,-2.88l0.46,-0.82l-0.42,-1.37l0.02,-1.46l-0.75,-1.36l-0.36,-1.77l-2.23,-3.3l-1.15,-0.81l-0.14,-0.72l-0.66,-0.97l-3.59,-2.92l0.14,-1.32l-0.83,-2.35l0.62,-2.32l0.59,-1.28ZM97.74,334.25l1.13,0.44l0.79,1.12l-0.69,-0.32l-0.94,0.21l-0.3,-1.45ZM97.02,343.56l1.07,1.11l0.46,0.28l-0.21,0.1l-0.78,-0.5l-0.53,-0.99ZM80.96,337.13l0.12,-0.05l0.83,0.49l-0.39,-0.06l-0.57,-0.38ZM75.68,322.28l0.89,0.37l0.95,-0.0l1.14,0.52l-2.21,0.3l-0.65,-0.31l0.06,-0.61l-0.19,-0.27ZM79.7,322.95l0.51,-0.41l0.25,0.19l-0.23,0.12l-0.52,0.11ZM70.57,323.42l2.03,-0.34l0.31,0.56l0.54,0.26l-0.86,0.65l-0.98,0.12l-0.47,-0.26l-0.58,-0.98Z",
            "name": "California"
        },
        "US-IA": {
            "path": "M438.83,133.33l82.4,-0.04l0.71,2.54l1.86,1.15l0.02,0.58l-1.04,1.66l-0.25,1.0l0.41,4.99l0.79,1.3l0.22,1.72l0.56,1.11l0.7,0.68l4.72,1.27l1.03,2.05l-0.39,0.95l0.22,0.67l3.26,2.6l0.59,2.38l3.46,2.57l0.42,1.64l-0.71,3.94l-1.76,1.7l-0.67,1.78l0.0,1.22l-1.32,1.15l-2.49,0.67l-0.96,1.02l-0.54,0.18l-4.42,0.36l-0.93,0.61l-0.73,1.56l-0.38,2.39l0.28,1.05l1.4,1.02l0.38,0.54l0.24,0.74l0.04,1.76l-0.23,0.62l-1.83,2.24l-0.41,2.07l-0.61,1.26l-0.44,0.32l-2.4,0.72l-1.05,0.87l-0.28,0.93l0.6,0.86l0.0,1.97l-0.54,0.16l-1.18,-0.86l-0.22,-0.73l-1.14,-0.87l-0.24,-0.49l-0.8,-0.4l-0.21,-0.77l-0.85,-0.72l-3.32,0.27l-17.92,0.5l-7.26,-0.09l-7.09,0.21l-7.2,0.04l-19.64,-0.55l-0.16,-0.98l-1.2,-0.74l-0.28,-0.62l0.59,-1.03l-0.16,-0.92l0.26,-1.29l-0.25,-2.07l-0.53,-0.69l0.2,-3.44l-0.92,-0.44l-0.06,-0.24l0.09,-0.65l0.71,-0.93l-0.03,-0.44l-1.22,-0.58l0.41,-2.37l-0.28,-0.4l-0.94,-0.24l0.17,-1.11l-0.67,-0.46l-0.71,0.19l0.08,-0.83l-0.34,-0.61l-0.03,-1.22l0.31,-0.54l0.24,-1.86l-0.24,-0.63l-1.15,-1.52l0.18,-0.99l-0.18,-0.83l-1.66,-1.54l-0.28,-1.68l-1.01,-0.94l0.11,-2.07l-1.0,-1.83l0.27,-1.61l-0.22,-1.06l-0.52,-0.49l-0.79,-0.21l-0.36,-1.53l-0.41,-0.58l0.06,-0.61l-1.32,-1.19l-0.39,-0.7l0.61,-1.44l0.54,-0.44l0.37,-1.76l0.44,-0.8l0.2,-1.27l-0.13,-0.36l0.55,-0.64l0.25,-1.15l-0.42,-2.2l-0.43,-0.28l-0.85,-0.05l-0.02,-0.69l0.45,-0.53l0.06,-1.67l-0.1,-0.45l-0.79,-0.98l-0.01,-0.84Z",
            "name": "Iowa"
        },
        "US-MI": {
            "path": "M591.52,169.38l1.01,-0.68l1.05,-1.14l0.86,-1.4l1.71,-3.94l1.79,-2.68l1.66,-4.61l0.85,-5.07l-0.13,-6.36l-1.51,-4.42l0.66,-0.4l0.41,-0.72l-0.51,-0.5l-1.12,0.38l-2.83,-7.7l0.28,-1.31l1.25,-1.86l0.13,-0.95l-0.38,-2.45l0.09,-0.71l-1.03,-1.79l0.04,-0.61l1.52,-1.55l0.56,-0.87l1.82,-3.97l0.21,-0.93l-0.14,-1.73l0.47,-2.56l-0.54,-1.69l0.46,-0.6l0.8,-0.38l0.81,0.1l0.63,-0.38l0.24,-3.5l1.09,0.05l0.88,-1.33l1.11,0.65l0.7,-0.23l1.15,-2.46l1.01,-1.07l0.88,-1.64l0.52,-0.05l-0.72,0.79l0.35,1.74l-0.59,0.69l-0.39,0.99l0.64,0.53l-0.87,2.52l0.66,1.54l0.28,0.19l0.46,-0.13l0.43,0.63l0.68,-0.14l1.22,-2.1l1.2,-3.39l0.24,-2.07l-0.33,-2.83l0.1,-0.7l0.74,-0.93l2.39,-1.31l2.84,-0.11l1.08,-0.47l0.38,-0.59l-0.16,-0.58l-1.74,-0.38l-0.84,-1.02l-0.3,-1.38l0.09,-0.7l0.27,-0.56l1.28,-1.07l0.79,-1.07l0.15,-0.47l-0.16,-0.28l1.79,0.05l0.49,-0.25l0.42,-0.58l2.57,1.56l1.29,1.14l0.81,0.26l2.06,-0.07l1.32,0.63l0.86,0.97l0.45,1.43l0.43,0.55l0.48,0.21l2.29,0.07l1.53,1.31l1.23,0.43l0.67,-0.01l0.69,0.78l1.11,0.44l1.45,0.19l1.58,1.36l-0.25,0.43l0.04,0.68l0.8,1.49l0.6,0.32l0.22,0.99l-0.25,0.53l-0.62,-0.38l-1.04,0.4l-0.55,1.78l0.58,1.41l1.42,1.26l0.45,1.48l0.25,2.34l-0.42,1.68l-0.27,5.84l-0.19,0.31l-0.69,0.17l-0.55,0.78l-0.75,-0.05l-0.91,0.66l-0.37,0.86l-0.25,2.5l-0.32,0.47l0.0,0.5l-1.18,0.28l-0.31,0.76l-0.49,-0.07l-0.56,0.28l-0.85,-0.1l-0.81,0.47l-1.01,2.44l0.17,0.48l-0.29,0.47l-0.18,2.54l0.36,0.75l0.77,0.75l2.68,1.29l0.9,0.08l1.26,-1.01l0.83,-1.29l0.57,0.29l0.42,-0.17l1.33,-2.37l0.27,-0.93l0.77,-0.93l0.02,-0.51l0.45,-0.24l0.74,-1.0l1.43,-0.14l1.17,-0.48l1.0,-0.92l0.93,-0.27l2.44,1.34l1.23,1.71l0.79,2.3l0.89,6.05l0.5,1.68l0.33,3.74l0.79,3.73l0.91,1.88l0.02,0.51l-1.05,3.16l0.17,1.18l-0.6,2.74l-0.92,1.41l-0.33,-1.21l0.17,-0.79l-0.4,-0.4l-1.39,-0.36l-0.9,0.73l-0.76,0.3l-0.21,0.79l0.39,0.72l-0.87,0.39l-0.42,0.7l-0.18,1.01l0.21,0.75l-0.27,1.06l-0.59,0.62l-1.7,0.6l-1.33,1.57l-1.04,3.44l-0.19,1.03l0.17,0.48l-0.45,0.81l-0.43,0.1l-0.28,0.63l0.13,0.23l-0.64,0.18l-0.54,0.95l-0.58,0.4l-0.69,1.12l-0.2,0.97l-0.36,0.16l-0.26,0.48l-19.96,0.76l-0.0,-0.8l-0.4,-0.4l-30.71,-0.02ZM610.45,103.24l0.02,-0.08l0.14,-0.11l-0.02,0.04l-0.14,0.15ZM610.85,102.37l-0.05,-0.18l0.1,-0.14l-0.05,0.32ZM535.14,64.98l5.27,-1.95l4.06,-3.36l6.11,-0.76l1.52,-0.71l1.34,-1.02l1.41,-1.52l1.0,0.16l1.65,-0.57l1.31,-2.22l3.29,-2.64l0.02,1.84l0.5,0.45l1.34,0.4l-0.13,1.51l0.66,0.22l0.46,0.7l0.03,0.74l-0.59,2.52l0.34,1.04l-0.41,0.44l0.14,0.49l0.75,0.08l1.4,-1.88l-0.01,-0.28l0.59,-0.18l0.68,-0.63l-0.59,1.18l0.53,0.52l0.93,-0.59l0.7,-1.2l1.09,-0.32l3.22,0.15l1.53,0.42l0.7,0.43l0.4,0.7l0.68,0.1l0.19,0.45l0.65,0.1l0.35,1.16l1.95,2.6l0.07,0.38l1.12,0.72l0.33,1.67l0.69,0.44l1.9,0.33l0.79,-0.31l1.1,0.09l0.61,-0.6l0.47,-0.01l0.5,-0.31l0.87,1.29l0.56,0.26l0.47,0.56l1.07,-0.11l0.82,-0.75l0.46,0.57l0.86,0.36l0.43,0.44l0.7,-0.25l2.07,-2.42l0.85,-0.24l0.58,-0.5l1.72,-0.79l1.99,-1.45l0.92,0.25l3.53,-0.74l5.33,0.56l0.84,-0.17l2.82,-1.46l1.37,-0.45l2.72,0.03l-0.28,0.7l-0.28,2.66l0.18,0.78l-0.55,1.07l0.54,0.97l0.64,0.22l0.8,-0.29l0.38,0.4l1.73,0.68l1.23,-0.25l1.2,-0.72l0.6,0.62l0.09,0.75l0.82,0.36l1.42,-0.61l1.23,-1.42l0.68,0.09l0.73,0.92l0.77,1.89l0.22,1.68l0.39,0.64l-1.06,0.9l0.34,0.97l0.41,0.45l1.45,-0.2l0.5,0.57l0.65,0.16l-0.2,0.8l0.17,0.44l0.84,1.05l0.92,0.3l0.54,0.49l-1.31,0.5l-3.29,-0.73l-1.05,0.03l-0.64,-0.29l-0.58,0.21l-0.47,-0.29l-0.87,-0.11l-0.46,0.29l-0.51,-0.02l-0.54,-0.88l-1.64,-0.34l-0.66,0.38l-0.27,1.22l-0.62,0.68l0.06,2.14l-0.92,-0.38l-0.75,-1.08l-0.76,-0.26l-0.39,-0.69l-1.32,-1.3l-1.46,-0.46l-0.88,-0.53l-1.63,-0.21l-0.97,-0.67l-0.58,0.2l-0.67,-0.36l-0.64,0.29l-1.11,-0.11l-0.68,0.36l-1.59,2.38l-1.89,-0.04l-1.74,0.25l-0.44,0.23l-0.26,0.47l-2.04,-0.66l-2.99,0.52l-0.81,0.74l-0.55,1.04l-0.39,1.43l-0.83,0.18l-0.45,0.53l-1.22,0.45l-0.01,-0.61l0.48,-1.38l-0.4,-0.89l-0.42,-0.18l-0.57,0.11l-1.21,0.96l-0.93,-0.54l-0.71,0.07l-0.42,0.35l-0.01,0.85l-1.03,1.93l-1.31,0.44l0.09,-1.42l-0.32,-1.14l0.5,-0.99l0.08,-0.68l-0.12,-0.4l-0.64,-0.26l-0.53,0.52l-0.32,1.2l-0.58,0.86l-0.58,2.57l-1.25,0.76l-1.69,2.88l-0.98,2.6l-3.28,5.01l-0.79,0.64l0.0,0.93l-1.24,-1.47l0.4,-1.73l0.85,-1.61l-0.31,-0.86l-0.58,-0.39l-1.47,0.68l-1.19,-0.06l0.2,-1.29l0.62,-0.53l0.38,-0.82l-0.24,-1.41l0.37,-0.42l0.08,-0.64l-0.46,-1.07l0.26,-0.82l-1.72,-1.81l-1.11,-0.2l-0.54,-0.52l-0.9,0.09l-0.6,-0.28l-0.08,-0.22l0.56,-1.14l-0.76,-1.59l-1.08,-0.66l-2.26,-0.38l-0.67,-0.45l-0.68,0.05l-1.81,-0.72l-1.17,0.12l-0.48,0.29l-1.41,-0.61l-1.67,-0.03l-4.42,-2.53l-15.43,-4.3l-1.22,-3.09l-0.46,-0.62l-1.44,-0.71l-0.39,-0.48l-0.81,0.19l-0.07,-0.34ZM594.89,83.3l-0.09,0.54l-0.51,0.26l-0.51,0.99l-0.39,0.31l0.01,0.6l-0.6,-0.7l0.49,-0.51l0.74,-1.55l0.87,0.05ZM637.5,78.42l0.36,0.02l0.53,-0.58l1.39,-0.63l0.26,-0.54l-0.18,-0.71l1.06,0.35l0.59,1.39l0.79,0.34l-0.47,1.06l-0.4,0.13l-1.46,-0.6l-0.86,0.32l-0.49,-0.23l-0.71,0.03l-0.43,-0.35ZM630.82,67.02l0.72,-0.78l0.54,0.14l-0.61,1.3l0.16,1.28l-0.4,-1.51l-0.42,-0.43ZM632.03,70.98l0.35,0.55l0.11,0.68l-0.52,-0.85l0.07,-0.38ZM626.31,82.42l1.41,0.49l0.39,-0.13l0.38,0.29l-0.27,0.51l-0.78,-0.02l-1.12,-1.14ZM610.53,86.65l-0.4,0.11l-0.38,-0.22l1.04,-3.01l0.27,2.56l-0.53,0.56ZM603.02,96.98l0.43,0.37l-0.17,0.57l-0.35,-0.77l0.09,-0.17ZM601.58,99.6l0.02,-0.06l0.06,-0.08l-0.07,0.13ZM593.15,66.44l-0.19,-0.45l0.1,-0.42l0.35,0.41l-0.25,0.46ZM564.82,52.32l-0.53,-0.42l-1.21,-0.08l0.06,-1.41l3.18,-3.59l1.66,-1.02l0.65,0.09l0.62,-0.55l2.28,-0.66l3.53,0.0l0.87,0.53l0.21,0.35l-0.64,0.34l-1.34,-0.3l-2.45,0.5l-0.2,0.28l0.23,0.62l0.76,0.25l-1.39,0.9l-0.32,0.58l-0.65,0.36l-0.74,0.86l-0.75,0.2l-0.48,0.78l-0.07,0.68l-0.48,0.26l-0.26,0.63l-0.63,0.38l-0.95,2.07l-0.6,-1.03l0.9,-0.92l0.39,-2.02l-0.58,-0.45l-0.33,0.21l-0.67,0.87l-0.07,0.7ZM564.91,52.46l0.12,0.0l-0.1,0.02l-0.02,-0.03ZM553.82,35.39l0.91,-0.96l-0.39,-0.41l0.67,-0.52l2.62,-1.52l0.72,-0.12l0.73,-0.54l1.14,-0.43l2.29,-1.59l0.76,-0.1l-0.62,0.68l0.02,0.85l-0.53,0.48l-4.78,2.2l-1.01,0.94l0.21,0.42l-2.11,1.02l-0.33,-0.01l-0.31,-0.38Z",
            "name": "Michigan"
        },
        "US-GA": {
            "path": "M610.09,305.01l37.81,-0.29l-1.44,0.89l-0.7,1.35l-0.7,0.61l-0.62,1.42l-0.08,1.1l0.6,0.8l1.46,0.95l0.86,0.27l2.01,2.1l0.71,0.33l1.67,-0.02l0.44,0.28l0.42,1.49l1.04,1.59l0.49,2.26l1.02,0.92l0.52,1.09l0.45,0.33l0.57,1.63l0.88,0.43l0.83,1.0l1.57,0.95l1.36,1.19l1.53,3.02l1.82,0.85l1.86,1.79l0.03,2.0l0.9,1.07l0.43,-0.06l-0.02,0.94l0.55,0.74l0.63,0.22l0.29,1.08l3.73,2.14l0.29,0.72l-0.12,1.0l1.01,1.71l0.51,1.81l-0.19,0.62l0.29,0.67l-0.1,1.07l0.47,0.64l1.23,0.54l0.92,0.71l0.14,0.47l0.44,0.3l0.5,2.27l0.54,0.59l-0.38,2.19l0.4,1.39l1.01,0.98l1.32,0.04l1.06,0.86l1.12,0.28l-0.51,0.43l-0.43,-0.35l-0.47,0.17l-0.52,0.79l0.33,0.85l-0.3,0.25l-1.06,-0.34l-0.59,-0.59l-0.65,0.27l0.03,0.64l-0.42,0.34l0.23,0.67l0.77,0.12l0.31,0.29l-0.65,0.92l-1.17,-0.02l-1.04,-0.58l-0.49,0.26l-0.08,0.35l0.24,0.49l0.92,0.45l-0.53,0.56l0.15,0.36l-0.3,0.53l0.54,0.62l-0.26,0.23l-0.56,-0.22l-0.89,0.26l-0.22,0.59l0.76,0.57l-0.04,0.77l0.49,0.02l0.97,-0.65l-0.93,1.37l-0.24,-0.45l-0.46,-0.08l-0.52,0.58l0.13,0.63l0.63,0.75l-1.79,-0.34l-0.72,-0.38l-0.61,0.15l-0.06,0.64l0.39,0.36l2.24,0.65l0.73,0.65l-0.05,0.21l-0.5,0.12l-0.99,1.4l-0.12,-1.18l-0.42,-0.21l-0.59,0.2l-0.24,0.41l0.08,1.0l-0.47,0.07l-0.2,0.7l-0.24,0.07l-0.02,0.46l0.89,1.12l-0.73,0.26l-0.32,0.39l0.23,0.5l0.5,0.19l-0.5,1.28l-0.44,0.4l0.63,1.53l-0.08,0.54l-0.64,0.14l-2.11,-0.55l-3.17,-1.42l-1.18,0.1l-0.27,0.54l-0.59,0.15l-0.49,0.98l-0.1,1.76l0.56,1.24l-0.55,3.41l-1.54,0.03l-0.28,-0.79l0.1,-1.08l-0.58,-0.9l-0.02,-0.7l-0.27,-0.13l-40.95,-2.82l-0.48,-0.51l-0.35,-2.3l-0.58,-1.37l-0.38,-0.37l0.19,-0.53l-0.41,-1.35l-0.84,-1.41l-0.42,-0.3l-0.12,-1.46l0.31,-0.62l0.18,-1.93l0.27,-0.36l-0.06,-0.77l0.34,-1.2l-0.27,-1.58l-0.79,-1.36l-0.51,-2.3l0.31,-1.32l0.96,-1.85l-0.0,-1.3l0.43,-1.7l1.52,-0.88l0.59,-1.22l-0.4,-0.61l-1.08,-0.74l0.39,-1.07l-0.03,-0.7l-0.57,-1.68l-1.5,-2.29l-0.51,-2.48l-0.54,-0.65l-0.01,-0.82l-0.46,-1.22l-6.25,-38.09ZM678.53,366.92l0.39,-0.05l-0.13,0.4l-0.12,-0.2l-0.14,-0.15ZM674.24,381.22l-0.1,-0.26l0.19,-0.39l-0.06,0.53l-0.03,0.12Z",
            "name": "Georgia"
        },
        "US-AZ": {
            "path": "M154.93,350.97l0.2,-0.74l-0.08,-0.77l0.9,-1.21l0.31,-0.99l0.33,-0.24l1.46,0.3l0.83,-0.15l0.41,-0.48l0.09,-1.02l0.98,-1.02l-0.15,-2.33l-0.55,-0.99l-0.84,-0.47l-1.8,-0.28l-0.31,-0.44l0.36,-2.1l-0.19,-1.17l-0.59,-0.9l0.36,-0.77l-0.22,-0.67l1.22,-0.43l1.6,-2.69l0.23,-2.12l0.45,-0.76l-0.39,-2.67l0.38,-0.63l-0.44,-1.13l1.31,-1.17l0.63,-1.68l2.56,-1.51l1.55,-1.6l0.16,-0.53l-0.26,-0.9l-3.24,-2.53l-0.46,-0.13l0.02,-1.08l-0.75,-1.13l-0.06,-0.79l-1.12,-2.23l-0.81,-0.38l-0.38,-1.37l-0.69,-0.57l-0.3,-3.01l0.38,-0.84l-0.32,-0.63l0.78,-0.51l0.16,-1.28l-0.31,-2.77l-1.15,-3.01l0.28,-0.8l0.03,-1.51l-0.75,-2.51l0.02,-0.99l0.38,-1.33l-0.96,-1.51l-0.15,-0.74l0.3,-0.51l0.1,-1.19l2.12,-0.87l1.67,0.63l1.22,-0.36l1.13,1.79l0.8,0.53l1.39,-0.07l0.86,-0.59l0.6,-2.09l0.68,-1.17l0.04,-15.02l77.02,0.06l-0.01,106.11l-30.99,-0.1l-58.0,-21.23Z",
            "name": "Arizona"
        },
        "US-MT": {
            "path": "M140.69,42.59l0.53,-0.49l0.19,-0.65l-0.63,-1.3l-0.07,-1.02l-0.72,-0.71l-0.3,-0.68l-0.59,-0.43l-0.51,-1.53l-1.3,-1.22l-1.67,-2.38l0.01,-22.79l186.21,-0.0l0.14,90.49l-108.87,0.0l-0.4,0.4l-0.01,10.49l-1.74,-1.82l-0.14,-0.9l-0.48,-0.45l-0.98,-1.74l-1.33,-0.59l-1.69,1.13l-0.08,0.48l0.23,0.55l-0.67,0.51l-0.24,0.94l0.09,0.65l-2.46,-0.11l-0.88,0.55l-0.96,0.25l-0.36,-0.44l-0.67,-0.28l-3.32,0.51l-2.49,-0.65l-1.59,0.79l-0.64,1.58l-2.1,-0.6l-2.74,-0.37l-1.24,0.54l-0.99,1.04l-0.21,0.7l-0.97,-0.41l-0.86,-0.74l-0.18,-0.59l0.2,-0.85l-0.59,-0.58l-0.54,-0.99l0.34,-0.41l-0.02,-0.62l-1.59,-2.89l-0.76,-0.69l-0.86,-0.34l-0.6,0.03l-0.79,0.52l-0.3,-0.61l-1.2,-0.74l-0.6,-1.3l0.59,-0.7l0.0,-1.43l-1.11,-2.26l-0.82,-0.24l-0.53,-1.54l-1.11,-1.13l-0.1,-0.54l-0.67,-0.65l0.01,-1.55l-0.66,-0.77l-0.09,-0.42l0.14,-1.46l-0.31,-0.48l-0.55,-0.27l0.34,-1.06l-0.32,-0.71l-1.26,-0.59l-0.22,-0.57l-0.99,-0.79l-0.86,-0.28l-0.45,0.44l0.04,0.77l-0.67,0.37l-0.95,1.4l-1.71,0.63l-0.58,1.0l-0.48,0.26l-0.37,-0.02l-0.85,-0.67l-0.8,-0.91l-1.14,-0.28l-0.11,-0.88l0.65,-0.75l0.08,-1.1l-0.86,-1.52l0.75,-1.25l1.07,-0.25l0.71,-0.93l-0.44,-1.11l0.22,-1.14l-0.22,-0.33l-0.87,-0.34l-0.17,-0.82l0.42,-0.79l0.05,-0.62l-0.78,-1.01l0.75,-0.18l0.32,-0.48l-0.32,-1.8l0.74,-1.69l0.05,-1.09l0.49,-1.33l-0.32,-1.06l0.56,-0.31l0.26,-0.46l-0.11,-0.56l0.36,-1.69l-0.06,-0.94l-0.26,-0.37l-0.55,-0.17l-1.91,0.67l-0.56,-0.12l-0.83,0.22l-0.75,-0.47l0.24,-0.92l-0.78,-0.89l-0.7,-0.12l-0.72,0.52l-0.2,-1.02l-0.9,-0.4l-1.15,-0.99l-0.25,-1.91l-1.33,-1.32l-0.7,-0.3l-0.2,-0.69l-1.35,-1.52l-0.72,-1.22l-1.32,-1.17l-0.86,-1.6l-2.65,-1.0l-1.32,-1.88l-1.8,-1.03l0.81,-0.23l0.25,-0.7l-0.62,-0.57l-0.21,-0.67l-0.45,-0.42Z",
            "name": "Montana"
        },
        "US-MS": {
            "path": "M515.86,374.0l1.36,-0.07l0.48,-0.45l0.54,-2.26l-0.51,-1.55l1.44,-1.38l0.47,-2.94l0.79,-1.81l1.66,-0.87l1.12,-1.55l1.27,-0.77l0.35,-0.63l0.05,-0.86l-0.47,-0.78l0.99,-0.18l1.02,-2.07l0.88,-1.04l-0.07,-0.77l-1.26,-0.51l-0.23,-0.83l-1.44,-1.0l0.11,-1.78l-0.75,-0.73l-0.3,-0.71l-0.01,-0.25l0.97,-0.15l0.48,-0.56l-0.16,-0.85l-1.13,-0.47l0.33,-1.44l0.96,-1.22l-0.05,-0.42l-0.54,-0.61l-0.87,-0.32l0.1,-2.35l0.78,-0.35l0.29,-0.72l-0.33,-2.19l-1.01,-0.64l0.69,-1.04l0.12,-1.89l-0.67,-0.83l-0.88,-0.55l0.65,-0.13l0.42,-0.38l0.09,-1.04l-0.36,-0.48l-0.68,-0.36l1.46,-1.56l0.81,-0.18l0.39,-0.58l-0.31,-1.38l0.46,-1.16l-0.57,-0.77l1.29,-0.54l1.1,-0.13l0.59,-0.62l0.02,-0.95l-1.14,-0.9l1.27,-0.78l0.68,-1.43l0.38,0.12l0.46,-0.22l0.39,-0.82l-0.07,-0.63l1.25,-0.26l0.67,-0.39l0.6,-0.73l0.29,-2.85l-0.27,-1.35l0.43,-1.41l0.61,0.12l0.66,-0.24l0.45,-0.76l-0.28,-0.88l2.53,-1.24l0.61,-0.89l-0.08,-1.07l32.01,0.04l0.6,1.14l0.67,0.48l-6.18,55.99l1.24,27.63l-0.6,0.48l-1.17,-0.38l-0.7,-0.87l-1.2,0.74l-0.99,0.02l-1.67,-1.24l-1.55,-0.33l-0.69,0.21l-0.39,0.4l0.19,0.33l-0.42,0.21l-3.36,0.97l0.01,-0.39l-0.73,-0.51l-0.89,-0.06l-0.62,0.82l0.57,0.54l-1.39,0.81l-0.41,1.04l-0.54,0.15l-1.06,-0.18l-0.74,-1.56l0.01,-0.74l-0.62,-1.28l-0.09,-0.86l-1.03,-1.49l-0.89,-0.53l-0.3,-0.63l0.12,-0.53l-0.48,-0.81l0.39,-1.11l-0.04,-0.48l0.49,-0.71l0.81,-2.4l0.06,-1.04l-0.39,-0.33l-28.85,-0.0l0.51,-0.7l-0.74,-1.53l0.32,-0.85l-0.06,-0.52l-0.58,-0.68Z",
            "name": "Mississippi"
        },
        "US-SC": {
            "path": "M648.79,304.7l4.59,-1.53l0.9,0.11l0.9,-0.54l0.3,-0.45l3.68,-1.0l0.51,-0.66l0.52,0.27l1.15,-0.11l18.99,1.01l-0.19,1.0l0.28,0.59l0.65,0.14l1.25,-0.87l1.95,2.59l-0.05,2.14l0.42,0.58l17.51,0.57l16.4,16.79l-0.11,0.41l-2.45,1.33l-2.75,2.59l-3.11,4.31l-0.36,0.78l-0.2,1.34l-0.75,-0.29l1.2,-2.04l-0.57,-0.36l-0.82,0.6l-0.73,1.05l-0.38,1.28l0.24,0.69l1.12,0.69l0.18,0.76l-0.58,-0.11l-0.45,0.38l-0.7,-0.13l-0.38,0.62l0.68,0.49l-1.1,0.7l-0.26,0.82l-1.17,0.25l-0.28,-0.55l-0.47,-0.18l-1.05,0.53l-0.79,1.28l0.14,0.91l-1.18,0.78l-0.76,1.07l-1.16,0.61l-0.56,-0.46l0.28,-0.37l-0.05,-0.53l-0.27,-0.25l-1.27,0.01l-0.2,0.4l0.13,0.6l-0.38,-0.03l-0.12,0.7l0.52,0.64l0.6,0.18l0.38,0.38l-0.96,0.8l-1.12,0.0l-0.33,0.43l0.14,0.38l-2.03,0.66l-1.0,-0.91l-0.53,-0.02l-0.24,0.64l0.8,0.8l-1.41,0.94l-0.49,-0.7l-0.59,0.41l-0.04,0.54l-0.52,-0.42l-0.71,-0.15l-1.0,-0.93l-0.52,0.4l0.03,0.39l-1.59,-0.08l-0.48,0.64l0.38,0.44l-0.45,0.5l0.13,2.09l-0.58,-0.52l-0.35,-0.91l-0.17,-0.83l0.14,-0.69l-0.52,-0.3l-0.32,-0.6l-0.62,-0.14l-0.38,0.51l0.52,0.99l-0.1,0.57l0.61,1.67l-0.16,0.7l0.73,1.04l-0.48,0.27l-0.15,0.83l-1.59,2.63l-0.28,-0.43l-0.76,-0.41l-1.3,-0.05l-0.64,-0.68l-0.28,-0.91l0.37,-2.34l-0.63,-0.9l-0.46,-2.17l-0.81,-1.06l-2.36,-1.52l0.03,-2.27l-0.58,-1.99l-0.93,-1.54l0.12,-0.88l-0.45,-1.15l-3.77,-2.19l-0.29,-1.15l-0.93,-0.46l0.12,-0.61l-0.33,-0.84l-0.74,-0.15l-0.49,-0.58l0.22,-1.01l-0.35,-1.17l-2.0,-1.93l-1.74,-0.78l-1.07,-2.46l-0.43,-0.51l-1.47,-1.29l-1.57,-0.95l-0.87,-1.05l-0.67,-0.22l-0.61,-1.69l-0.4,-0.27l-0.59,-1.15l-0.9,-0.76l-0.46,-2.17l-1.06,-1.64l-0.6,-1.75l-0.87,-0.49l-1.7,0.02l-0.35,-0.19l-2.04,-2.28l-0.9,-0.14l-1.34,-0.87l-0.35,-0.5l0.64,-1.78l0.68,-0.57l0.51,-1.12l1.36,-0.83l0.51,-0.77ZM685.22,355.89l0.47,0.03l0.3,0.39l-1.11,1.2l0.35,-0.76l-0.0,-0.86ZM686.79,351.5l0.84,0.16l-0.21,0.38l0.36,0.33l1.58,0.19l-0.95,0.69l-0.37,0.59l0.45,0.56l0.83,-0.22l-1.12,0.7l-0.83,0.16l0.19,-1.61l-0.52,-0.4l0.16,-0.96l-0.42,-0.58Z",
            "name": "South Carolina"
        },
        "US-RI": {
            "path": "M834.46,172.01l0.28,0.09l-0.12,0.81l0.29,1.84l-0.4,0.37l-0.05,-3.11ZM832.73,175.05l-0.16,-0.33l0.62,-1.21l-0.06,1.39l-0.4,0.15ZM824.56,178.42l0.18,-1.08l0.34,-0.37l0.14,-2.15l-0.07,-9.91l5.67,-0.1l0.11,2.07l0.34,0.43l0.33,0.04l-0.04,0.7l-0.04,0.35l-0.78,0.05l-0.06,0.27l0.05,1.47l0.4,0.61l-0.58,-0.04l-0.63,0.54l0.51,1.13l-0.48,1.06l0.25,0.94l-0.01,1.29l-0.88,1.76l-1.27,-0.16l-3.48,1.09ZM831.98,169.75l0.15,0.11l-0.01,0.04l-0.11,-0.1l-0.03,-0.06ZM833.02,170.73l0.06,0.45l-0.23,0.2l0.07,-0.32l0.11,-0.33ZM828.0,181.96l0.01,-0.08l0.09,-0.02l0.04,0.08l-0.15,0.03Z",
            "name": "Rhode Island"
        },
        "US-CT": {
            "path": "M795.33,183.54l3.42,-2.17l0.09,-0.54l-0.87,-1.46l0.97,-15.34l9.72,0.4l0.45,0.58l0.67,-0.07l0.38,-0.47l14.18,0.23l0.08,10.1l-0.12,1.88l-0.3,0.37l-0.21,1.13l-1.59,-0.16l-1.06,0.48l-0.52,-0.51l-0.5,-0.04l-0.42,0.77l-1.05,-0.25l-1.51,0.8l-0.5,-0.28l0.04,-0.56l-0.29,-0.51l-0.8,-0.33l-0.39,0.59l0.51,0.77l-0.07,0.47l-0.79,-0.25l-1.17,0.51l-1.53,-0.38l-0.89,0.2l-0.42,0.34l-0.76,-0.31l-2.09,0.2l-0.18,-0.71l-0.61,-0.06l-1.38,1.68l-0.62,0.11l-1.11,0.95l-0.7,-0.26l-1.07,0.42l-0.34,0.51l-0.5,-0.08l-1.01,0.44l-3.34,2.05l-0.23,-0.16l-0.71,0.15l-0.84,-1.22Z",
            "name": "Connecticut"
        }
    },
    "height": 552.5549153301214,
    "projection": {
        "type": "merc",
        "centralMeridian": -10
    },
    "width": 900.0
});

},{}],"9OmMc":[function(require,module,exports,__globalThis) {
jsVectorMap.addMap('us_mill_en', {
    "insets": [
        {
            "width": 200,
            "top": 370,
            "height": 108.45463042130267,
            "bbox": [
                {
                    "y": -9738382.809686134,
                    "x": -19771865.68561177
                },
                {
                    "y": -6263522.893432467,
                    "x": -13363914.447835693
                }
            ],
            "left": 10
        },
        {
            "width": 100,
            "top": 400,
            "height": 63.33165105817746,
            "bbox": [
                {
                    "y": -2517962.3575535044,
                    "x": -16734015.891922569
                },
                {
                    "y": -2133376.310059538,
                    "x": -16126758.634187918
                }
            ],
            "left": 220
        },
        {
            "width": 900.0,
            "top": 0,
            "height": 448.51731569561787,
            "bbox": [
                {
                    "y": -5994230.507329411,
                    "x": -12777719.644375157
                },
                {
                    "y": -2788583.186879637,
                    "x": -6345230.892117638
                }
            ],
            "left": 0
        }
    ],
    "paths": {
        "US-VA": {
            "path": "M759.72,228.63l0.64,-1.33l-0.16,-0.64l0.65,-0.59l-0.13,-0.56l-0.23,-0.12l0.65,-0.53l-0.04,-1.04l0.41,-0.18l0.06,-0.65l0.56,-0.07l0.37,-0.53l0.38,-0.57l0.29,-1.13l0.94,-0.11l0.2,-0.72l0.35,-0.03l0.21,-1.09l-0.46,-0.7l0.88,-0.42l0.13,-0.6l2.51,-0.3l-0.19,1.95l-0.63,0.69l-1.28,2.35l-0.76,1.86l0.05,0.89l-0.5,0.66l-0.32,-0.72l-0.53,-0.19l-0.67,0.55l-0.02,0.58l-0.78,0.38l-0.46,0.79l0.02,0.56l-0.55,0.89l-0.28,2.22l-0.25,-0.03l-0.4,0.35l-0.22,0.94l-0.73,-1.63l0.38,-0.59l-0.11,-0.6ZM641.29,241.29l1.08,-0.37l1.53,-0.15l1.13,-0.6l3.42,-0.84l1.03,-1.75l0.75,-0.03l2.31,-0.9l0.31,-0.59l0.03,-0.85l2.1,-1.18l0.23,-0.5l-0.05,-0.81l0.26,-0.25l5.11,-2.52l5.14,-3.99l0.13,0.53l0.67,0.45l0.07,1.16l1.06,0.8l0.49,0.76l1.29,0.3l0.58,0.64l1.08,0.59l1.27,0.15l0.78,-0.2l0.89,-0.86l1.14,-0.27l0.71,-1.01l1.77,1.52l0.38,0.1l1.46,-0.65l2.17,-0.43l0.66,0.17l1.13,-0.6l0.48,-0.66l-0.25,-0.86l0.24,-0.22l1.58,0.77l3.37,-1.55l0.25,-0.02l0.35,0.66l0.6,0.05l2.55,-1.47l0.35,-0.72l-0.33,-0.48l1.05,-0.67l0.23,-0.54l-0.18,-0.51l-0.77,-0.46l1.18,-2.26l3.23,-3.39l0.91,-1.64l0.35,-1.51l1.93,-1.77l-0.01,-0.8l0.37,-0.6l0.55,-0.31l0.69,-1.32l0.1,-1.12l0.36,-0.56l0.14,-0.83l1.05,0.36l0.73,1.6l3.32,1.02l0.59,-0.12l1.45,-1.85l0.65,-1.86l0.84,-0.71l0.3,-1.33l1.12,-1.68l1.45,0.93l0.62,-0.02l1.85,-2.41l0.5,0.14l0.61,-0.21l0.72,-0.87l0.88,-0.4l0.77,-1.37l1.75,-1.7l0.23,-2.16l0.85,-1.31l0.13,-1.64l7.33,5.42l0.62,-0.15l1.41,-3.06l2.36,0.44l0.44,0.58l0.9,0.38l-0.85,1.2l0.37,0.92l1.28,1.0l2.27,0.46l0.67,1.15l1.44,0.42l0.92,0.81l0.46,0.73l-0.04,2.07l-0.99,0.43l-0.4,-0.08l-0.38,0.29l-0.09,0.56l-0.47,-0.14l-0.59,0.41l-0.54,1.17l0.02,0.38l-0.35,0.41l-0.43,1.77l-0.42,0.12l-0.14,0.61l0.66,0.68l-0.54,0.56l0.36,0.4l1.48,0.26l1.36,-0.21l1.93,-0.94l0.19,0.45l-0.56,0.12l-0.12,0.6l1.43,1.22l-0.01,0.39l0.39,0.62l1.43,0.61l1.24,0.18l0.33,0.44l0.41,0.14l0.88,-0.35l0.92,0.15l0.19,0.5l0.91,0.68l-0.16,0.45l0.22,0.55l0.78,0.01l0.33,0.53l3.27,1.45l-0.02,0.81l-0.64,-0.47l-0.62,0.25l-0.09,0.39l0.46,1.21l-0.43,0.35l-0.0,0.41l0.32,0.4l-0.53,0.55l0.0,0.45l-0.43,-0.15l-0.57,-0.37l-0.35,-0.67l-0.67,0.01l-0.16,0.26l-0.95,-1.5l-0.79,-0.84l-0.37,0.01l-0.22,-0.51l-0.55,0.14l-0.84,-1.43l-1.01,-0.61l-0.3,-0.61l-0.65,-0.47l-0.99,-1.65l-1.16,-0.37l-0.34,-0.58l-0.47,-0.28l-1.05,-0.19l-0.48,0.35l-0.02,0.43l0.3,0.36l0.95,0.21l0.43,0.66l1.17,0.32l0.42,0.44l0.25,1.24l1.06,1.18l0.9,0.49l0.15,0.57l0.81,1.15l2.04,1.26l0.31,1.04l0.5,0.73l0.47,0.25l1.43,0.17l0.77,0.55l-0.47,0.43l0.19,0.52l1.64,0.69l0.13,0.6l0.46,0.2l-0.25,1.18l-0.7,-0.77l-0.38,0.09l-0.77,-1.01l-0.62,0.14l-0.11,0.65l-0.4,0.49l0.09,0.48l0.3,0.26l-0.23,0.43l0.43,0.4l0.43,0.02l-0.77,0.16l-1.69,-0.99l-0.9,-1.35l-0.67,-0.43l-0.75,-1.18l-0.8,-0.74l-0.55,-0.03l-0.34,0.43l0.06,0.76l0.52,0.31l0.61,0.99l0.56,0.38l1.49,1.87l2.11,1.42l1.14,-0.0l0.2,0.92l0.97,0.38l-0.45,0.39l0.15,0.64l0.82,0.05l-0.25,0.82l-0.89,0.14l-0.64,0.44l-0.43,-0.85l-2.26,-1.63l-0.17,-1.18l-0.42,-0.63l-0.75,-0.26l-1.18,0.28l-1.38,-0.66l-0.06,-0.94l-0.66,-0.22l-0.26,0.32l-0.08,0.72l-0.35,0.24l-0.97,-1.32l-0.47,-0.03l-0.53,0.34l-0.49,-0.43l-0.97,0.17l-1.95,-0.5l-0.55,0.76l0.23,0.48l1.63,0.54l1.28,0.02l0.27,0.3l0.43,0.06l0.64,-0.44l0.34,0.8l1.1,0.61l1.78,0.14l1.16,0.85l0.71,-0.34l0.27,2.07l0.94,0.47l0.25,0.49l1.28,0.63l0.13,0.71l-0.71,0.72l0.43,0.53l1.79,-0.69l0.75,0.15l0.22,0.43l0.5,0.3l0.67,-0.14l-0.32,-0.87l0.16,-0.22l-0.12,-0.66l3.27,0.82l1.07,-0.12l0.85,2.76l-0.52,0.53l-0.14,2.49l-0.41,-0.54l-0.46,-0.15l-0.25,0.68l-62.65,0.19l-17.72,-0.53l-6.35,-0.44l-0.37,-0.28l-3.84,-0.14l-0.83,0.37l-25.18,-0.12Z",
            "name": "Virginia"
        },
        "US-PA": {
            "path": "M694.82,141.0l0.62,-0.03l3.44,-1.82l1.38,-0.51l0.0,4.46l0.4,0.4l68.61,0.05l1.16,0.78l0.34,1.3l0.54,0.24l0.81,-0.1l0.94,0.7l-0.01,0.78l0.61,0.41l-0.28,0.45l0.2,0.87l-0.04,1.57l1.26,2.14l1.1,0.5l0.68,0.59l2.08,0.32l0.45,0.78l-1.02,0.41l-1.04,1.05l-0.73,1.8l-0.75,0.91l-0.67,0.44l-0.71,1.05l-1.66,1.0l-0.17,0.73l1.21,1.74l-0.42,0.41l-0.25,0.83l-0.88,0.18l-0.35,0.47l-0.26,1.26l0.25,2.59l0.44,0.36l1.13,0.11l0.29,1.75l0.49,0.79l0.45,0.31l0.66,-0.07l0.33,0.86l3.22,3.27l-2.75,1.25l-1.05,0.88l-2.04,1.01l-0.42,0.6l-0.06,0.72l-1.48,0.61l-0.79,-0.06l-1.46,0.59l-0.46,0.46l-1.53,-0.46l-2.03,0.25l-1.37,0.86l-0.7,1.03l-73.27,-0.0l-0.01,-41.2l2.03,-0.67l2.57,-1.29l0.95,-0.71Z",
            "name": "Pennsylvania"
        },
        "US-TN": {
            "path": "M537.69,269.77l0.72,-0.73l0.2,-0.77l0.85,0.12l0.67,-0.6l0.08,-1.04l-0.52,-1.93l0.03,-1.03l1.4,-1.41l0.18,-1.05l1.05,-0.24l0.38,-0.37l0.04,-0.41l-0.42,-0.73l0.47,-0.43l0.12,-0.51l-0.66,-1.1l2.36,-1.0l1.07,-0.81l-0.02,-0.8l-0.58,-0.52l0.3,-0.09l0.71,0.37l0.48,-0.27l0.1,-0.6l-0.21,-0.54l-0.65,-0.78l0.67,-1.58l0.59,-0.27l0.42,-0.56l-0.02,-0.36l-0.89,-1.38l1.3,-0.09l0.44,-0.38l-0.08,-0.63l-0.89,-0.61l0.81,-0.1l0.44,-0.36l0.19,-0.59l-0.38,-1.22l0.69,0.43l0.56,-0.19l0.61,-0.63l21.3,0.01l0.4,-0.36l0.07,-1.1l-0.44,-1.92l2.57,0.23l0.32,0.47l0.36,0.09l20.66,-0.36l9.96,0.63l11.63,0.07l21.66,0.7l1.08,-0.33l26.64,0.13l0.75,-0.37l3.11,0.12l-0.53,0.97l0.22,0.77l-0.68,1.5l0.1,0.62l-0.89,-0.16l-1.81,1.17l-1.72,2.91l-0.68,0.51l-0.39,-0.09l-0.42,-0.68l-1.26,-0.23l-2.62,0.98l-0.91,0.81l-0.78,1.15l-0.97,0.55l-0.2,-0.27l0.04,-0.88l-0.57,-0.55l-0.49,0.04l-2.2,1.02l-0.58,1.07l-0.76,-0.31l-0.87,0.26l-0.29,0.59l0.14,0.67l-1.02,1.54l-1.12,-0.14l-1.71,0.65l-1.32,0.81l-0.7,0.74l-0.72,0.11l-2.36,1.63l-0.92,0.17l-0.66,-0.25l-2.05,0.14l-2.56,1.03l-0.54,0.76l-0.84,0.31l-0.63,0.59l-0.59,2.28l-0.37,0.39l-1.49,0.18l-0.75,-0.24l-1.11,0.78l-0.25,0.61l-0.34,3.54l-37.06,-0.04l-22.57,-0.35l-0.31,0.21l-31.59,-0.04Z",
            "name": "Tennessee"
        },
        "US-ID": {
            "path": "M117.67,96.19l1.16,-1.26l0.34,-1.21l1.1,-2.21l1.49,-1.06l1.11,-1.54l0.69,-2.05l-0.17,-1.04l1.77,-2.43l0.95,-2.56l0.13,-1.25l1.63,-2.26l0.48,-1.32l0.74,-0.86l0.2,-0.61l-0.15,-0.91l-1.32,-2.48l-1.83,-0.85l-0.64,-0.52l-0.95,-0.19l-1.14,-1.27l-0.96,-2.57l-0.78,-0.91l0.7,-1.19l-0.56,-2.08l-1.53,-2.17l0.28,-0.93l-0.2,-50.44l14.63,0.0l-0.01,19.38l1.86,2.45l1.25,0.99l0.55,1.36l1.51,1.4l0.02,0.77l0.59,0.93l-0.76,0.61l-0.11,0.4l0.72,0.69l0.33,0.73l-0.75,0.25l-0.13,0.71l2.29,1.23l1.4,1.67l2.52,0.76l0.82,1.34l1.35,1.03l0.66,0.99l1.32,1.28l0.21,0.6l0.88,0.42l1.06,0.95l-0.02,0.79l0.36,0.89l1.31,0.99l0.8,0.28l-0.11,0.76l0.26,0.46l0.73,0.06l0.89,-0.64l0.4,0.31l-0.26,0.53l0.17,0.53l1.27,0.7l1.65,-0.09l1.83,-0.57l-0.27,2.34l-0.67,0.28l-0.23,0.33l0.44,0.93l-0.49,1.16l-0.04,0.92l-0.76,1.53l0.33,1.49l-0.8,0.17l-0.31,0.57l0.15,0.47l0.67,0.65l-0.48,0.83l0.16,1.08l0.3,0.41l0.78,0.29l-0.2,0.84l0.4,0.72l-1.48,0.55l-1.02,1.44l0.27,1.01l0.57,0.6l-0.0,0.61l-0.72,0.8l0.18,0.62l-0.23,0.41l0.1,0.4l1.59,0.35l1.67,1.39l0.79,0.13l1.02,-0.44l0.44,-0.77l0.58,-0.04l1.21,-0.57l1.02,-1.28l0.78,-0.36l0.08,-0.69l0.91,0.61l0.34,0.6l1.16,0.43l-0.26,1.08l0.22,0.45l0.66,0.33l-0.14,1.24l0.19,0.6l0.57,0.49l0.03,1.45l0.69,0.62l0.19,0.58l1.06,0.92l0.57,1.47l0.87,0.21l0.96,1.71l-0.04,0.81l-0.68,0.66l0.79,1.65l1.39,0.85l0.42,0.66l0.79,-0.03l0.83,-0.43l1.18,0.68l1.43,2.28l-0.39,0.75l0.64,1.15l0.46,0.35l-0.16,0.61l0.25,0.79l1.16,0.93l0.86,0.29l0.58,0.61l0.48,0.02l0.42,-0.26l0.14,-0.38l-0.29,-0.63l0.93,-0.87l0.92,-0.3l4.69,0.88l0.64,-0.35l0.49,-1.24l1.14,-0.49l0.5,0.26l1.87,0.3l3.27,-0.45l1.05,0.66l1.33,-0.29l0.87,-0.46l1.64,0.01l0.91,0.38l0.75,-0.05l0.4,-0.53l-0.23,-0.42l-0.54,-0.22l-0.04,-0.39l0.17,-0.47l0.68,-0.52l-0.15,-0.84l0.75,-0.18l0.37,-0.37l0.55,0.28l0.93,1.47l0.39,0.26l0.26,0.96l0.62,0.39l0.97,1.16l0.76,0.31l0.02,46.58l-92.18,0.01l-0.19,-34.03l0.87,-1.17l0.58,-2.47l-0.1,-0.77l-0.4,-0.65l0.49,-0.09l0.31,-0.34l0.35,-1.39l-1.11,-0.96l-0.4,-1.01l-1.22,0.13l-0.58,-0.56l-0.64,0.04l-0.36,0.32l-0.43,-0.33l0.04,-0.86l-0.31,-0.82l0.31,-1.0l-0.09,-0.55Z",
            "name": "Idaho"
        },
        "US-NV": {
            "path": "M156.86,269.15l-30.9,-27.49l-22.85,-19.78l-29.06,-23.59l-0.01,-54.79l92.05,-0.01l0.01,105.04l-0.64,1.01l-0.57,1.83l-0.34,0.18l-1.19,-0.01l-1.15,-1.66l-0.73,-0.43l-1.21,0.35l-1.86,-0.57l-1.39,0.39l-1.09,0.56l-0.37,0.45l-0.34,2.13l0.44,1.05l0.69,0.89l-0.39,0.82l-0.04,1.1l0.13,0.94l0.62,1.5l-0.01,1.1l-0.29,1.05l1.17,2.83l0.3,2.44l-0.11,0.81l-0.64,0.13l-0.23,0.28l-0.03,0.49l0.37,0.54l-0.33,0.46Z",
            "name": "Nevada"
        },
        "US-TX": {
            "path": "M282.01,322.94l55.53,-0.02l0.4,-0.4l0.37,-78.58l46.56,-0.0l0.05,33.71l0.44,0.4l0.89,-0.11l0.66,0.21l3.27,3.06l1.46,0.17l0.76,-0.46l2.18,0.52l0.43,-0.3l0.23,-1.03l0.47,0.57l0.79,0.18l0.31,0.72l0.64,0.6l0.06,1.59l0.41,0.43l2.49,0.37l1.08,-0.15l1.19,0.72l2.4,0.58l1.6,-0.42l0.53,0.09l1.09,1.2l0.53,0.26l1.22,-0.07l1.1,-1.12l2.1,0.24l1.4,-0.33l0.04,1.73l0.82,0.62l1.33,0.33l-0.13,1.33l0.25,0.5l0.47,0.27l0.91,0.24l0.81,-0.16l2.89,-2.14l0.35,0.23l0.02,0.72l0.31,0.52l1.72,0.2l0.17,0.79l0.66,0.45l1.28,-0.13l0.78,-0.71l0.3,0.25l0.57,-0.06l0.51,-0.74l0.16,0.24l-0.42,0.95l0.1,0.68l0.56,0.94l0.7,0.37l0.49,-0.02l0.56,-0.4l0.29,-1.16l0.32,-0.25l0.09,-0.45l0.8,-0.58l0.32,-1.14l0.44,-0.08l0.3,0.09l0.22,0.78l0.43,0.5l1.13,0.1l0.7,0.42l1.11,-0.13l0.64,-1.04l0.3,0.1l-0.07,0.62l0.4,0.52l1.02,0.39l0.42,0.6l1.31,0.01l1.22,1.41l0.49,0.03l0.6,-0.52l0.1,-0.51l1.25,-0.03l0.42,-0.3l0.42,-0.81l1.63,-0.26l1.46,-0.83l1.28,0.7l1.34,-0.12l0.33,-0.64l1.93,-0.5l0.49,-0.4l0.36,0.23l0.12,0.63l0.2,0.1l1.58,0.4l1.46,0.02l1.7,-0.87l0.35,-0.77l0.89,0.28l1.86,1.32l0.99,0.18l0.13,0.4l1.31,1.32l1.82,0.42l0.87,0.79l0.66,-0.05l2.09,0.79l0.87,0.07l0.28,0.64l1.16,0.84l1.28,-0.04l0.35,-0.53l0.65,0.31l0.79,-0.27l0.77,0.32l0.67,-0.08l0.48,0.29l0.08,26.89l1.21,1.43l1.04,0.7l0.93,1.51l0.37,1.29l-0.29,1.47l0.08,0.6l0.79,1.02l0.58,0.33l-0.02,0.73l0.57,0.42l0.18,0.66l0.46,0.55l-0.15,1.02l0.75,0.78l0.41,1.31l0.33,0.29l0.53,-0.01l-0.25,1.21l0.51,0.97l-0.65,0.31l-0.13,0.44l0.54,0.99l-0.48,0.64l0.07,1.11l-0.61,1.17l-0.16,0.87l-0.66,0.61l-0.38,1.15l-0.47,0.32l-0.27,0.59l0.42,1.59l-0.7,1.18l-0.1,0.56l0.09,0.88l0.61,0.93l-0.2,0.8l0.31,1.24l-0.28,1.06l-0.97,1.18l-0.84,0.12l-1.67,2.59l-0.08,0.9l1.31,1.76l-2.73,-0.07l-6.11,2.55l-0.01,-0.21l-0.67,-0.28l-0.17,0.14l-1.0,-0.4l-2.52,0.67l0.6,-1.34l0.32,-1.46l-0.19,-0.75l-0.78,-0.74l-0.42,-0.02l-1.3,0.6l-0.88,1.5l-1.2,-0.8l-1.42,0.04l-0.09,0.62l0.63,0.51l0.01,0.79l0.38,0.33l-0.48,0.91l0.18,0.45l1.07,0.49l-0.34,0.52l0.36,0.8l0.9,0.49l-0.25,0.75l-0.39,0.01l-0.84,0.59l-1.57,1.71l-0.84,-0.39l-0.49,0.11l0.2,0.84l-0.01,1.91l-1.56,1.08l-1.62,1.55l-0.79,0.25l-3.42,2.09l-2.69,0.23l-2.1,0.74l-0.23,0.78l-0.87,-0.16l-1.37,0.57l-0.25,-0.27l-0.73,0.06l0.26,-0.48l-0.18,-0.49l-0.3,-0.11l-1.2,0.13l-0.96,0.77l-0.39,-0.4l-0.1,-0.98l-1.15,-0.69l-0.5,0.42l0.47,1.18l-0.02,0.73l-1.45,-0.33l-0.44,-1.04l-1.19,-0.34l-0.58,0.37l0.02,0.42l0.72,1.38l0.0,0.98l1.59,0.72l-0.51,0.22l-0.3,0.54l0.11,0.28l0.63,0.25l0.88,-0.39l0.65,0.35l-3.41,1.7l-0.41,-0.12l-0.27,-1.1l-0.37,-0.16l-0.89,-1.15l-0.47,-0.05l-0.44,0.43l-0.03,0.46l-0.39,0.24l-0.07,0.52l0.89,1.24l-0.27,0.77l0.22,0.66l-1.33,1.3l0.21,-1.65l-0.41,-0.36l-0.48,0.15l-0.61,0.84l0.17,0.61l-0.23,0.52l0.01,-0.71l-0.47,-0.49l-1.58,0.93l-0.65,-0.26l-0.64,0.44l0.0,0.6l-0.62,0.7l0.14,0.67l0.73,0.25l0.11,0.47l0.55,0.4l0.5,-0.37l0.3,-0.78l0.55,-0.22l0.01,0.29l-2.29,3.19l-0.95,-0.74l-1.15,0.27l-0.24,-0.28l-2.83,0.12l-0.2,0.59l0.34,0.5l0.47,0.32l1.13,0.05l0.02,0.68l0.43,0.52l1.59,0.85l-2.31,5.7l-0.49,-0.33l0.08,-0.45l-0.55,-0.45l-0.89,0.61l-0.09,0.31l-0.54,0.06l-0.36,0.41l-1.28,-1.77l-0.94,-0.74l-0.61,0.39l0.06,0.4l1.09,1.57l-0.15,0.49l-0.6,-0.05l-0.34,0.63l0.44,0.47l1.5,0.09l1.63,0.59l0.64,-0.02l0.96,-0.44l-0.3,1.22l0.16,0.56l-0.78,0.51l0.24,1.18l-0.82,0.08l-0.4,0.38l0.24,1.62l-0.26,1.25l0.4,0.59l0.62,0.17l0.61,2.18l0.5,2.17l-0.74,0.59l0.46,0.45l-0.05,0.97l0.55,0.27l0.13,0.44l0.41,0.27l0.33,1.37l0.46,0.28l0.36,2.46l0.95,0.53l-0.28,0.75l0.16,0.8l-0.29,0.43l-0.78,0.06l-0.52,0.45l0.01,0.68l-0.56,0.09l-0.26,-0.47l-1.17,-0.39l-2.26,-2.01l-1.71,-0.18l-0.68,-0.41l-3.31,0.0l-0.65,0.29l-0.64,-0.47l-1.3,0.16l-1.62,-0.7l-0.54,-0.74l-0.41,-0.14l-0.26,-0.55l-0.91,-0.39l-0.77,-0.04l-1.55,-0.68l-1.16,0.28l-0.45,-0.36l-0.17,-0.46l-0.47,-0.19l-1.12,-1.07l-1.58,-0.03l-1.17,-0.5l-1.84,-0.18l0.2,-0.97l-0.43,-0.81l-0.74,-0.29l-0.21,-1.34l-1.04,-3.28l-2.19,-2.37l-0.23,-0.87l-0.81,-0.53l0.26,-0.56l-0.18,-0.64l0.27,-1.66l-0.34,-0.75l-0.77,-0.8l0.5,-1.68l-0.0,-0.87l-0.14,-0.45l-0.41,-0.29l-0.14,-1.37l-1.52,-1.16l-0.68,0.13l-0.21,-0.27l-0.66,-0.11l-0.59,-1.0l-1.73,-1.29l0.0,-0.5l-0.37,-0.47l0.06,-0.67l-0.79,-0.72l-0.08,-0.6l-0.88,-0.45l-1.06,-2.23l-2.13,-1.15l-0.34,-0.71l-0.87,-0.43l-0.05,-0.9l-0.66,-0.91l-0.4,-1.44l0.21,-0.11l-0.04,-0.73l-0.81,-0.36l-0.2,-0.97l-0.65,-0.46l-0.78,-1.32l-0.51,-1.86l-1.5,-1.82l-0.13,-1.28l-0.61,-2.01l-1.49,-1.04l0.04,-0.53l-0.65,-0.96l-1.08,-0.58l-0.84,-0.81l-1.32,-0.65l-0.63,-1.46l-1.49,-0.46l-1.17,-0.76l-0.03,-1.25l-0.54,-0.31l-0.62,0.14l-0.17,-0.53l-0.73,-0.18l-0.72,-1.57l-0.56,-0.47l-0.31,0.1l-0.41,-0.34l-0.65,0.15l-0.54,-0.64l-0.45,0.15l-0.18,0.45l-0.83,0.13l-2.32,-0.32l-0.38,-0.3l-1.21,-0.0l-0.64,0.24l-0.63,-0.33l-2.19,0.25l-1.35,-0.7l-0.62,-0.08l-1.0,-0.68l-0.6,-0.03l-0.85,0.67l-0.48,1.25l-1.62,-0.09l-0.41,0.32l-0.41,-0.09l-2.08,0.67l-2.38,4.95l-0.12,1.35l-0.6,0.59l-0.26,1.21l0.21,0.63l-1.49,0.79l-0.55,1.02l-0.85,0.5l-0.52,0.72l-0.19,0.79l-2.25,-0.21l-0.95,-0.64l-0.42,0.23l-1.38,-0.86l-1.11,-1.22l-2.39,-0.58l-0.9,-0.68l-0.07,-0.5l-0.4,-0.35l-2.26,-0.31l-1.87,-0.72l-1.6,-1.29l-0.8,-1.16l-0.81,-0.67l-0.6,-0.24l-0.7,0.03l-1.46,-0.89l-0.21,-0.42l-0.97,-0.71l-0.78,-2.21l-0.74,-0.75l-0.23,-0.82l-0.68,-0.97l-0.3,-1.77l0.32,-1.29l-0.01,-1.12l-2.68,-3.84l-0.15,-1.54l-1.14,-1.9l-0.84,-0.34l-0.43,-0.94l-1.22,-0.57l-0.66,-0.75l-1.23,-0.85l-0.86,-0.06l-1.7,-0.85l-0.66,-0.77l-2.15,-1.71l-0.58,-1.19l-2.73,-1.84l-1.45,-1.83l-1.05,-0.69l-0.54,-0.77l-0.8,-0.52l-2.37,-0.83l-0.7,-0.5l-1.09,-1.62l-0.41,-1.19l-0.75,-1.23l-0.71,-0.64l-1.51,-0.22l-0.92,-0.89l-0.56,-0.24l-0.83,-2.27ZM429.17,424.54l0.13,-0.1l0.18,-0.24l0.02,0.31l-0.33,0.03ZM435.46,388.17l-0.06,-0.27l0.65,-0.15l-0.01,0.01l-0.58,0.41ZM433.07,390.44l0.59,-0.97l0.4,-0.3l-0.02,0.22l-0.97,1.05Z",
            "name": "Texas"
        },
        "US-NH": {
            "path": "M814.7,129.01l-0.12,-0.41l-1.07,-1.17l-0.13,-0.77l0.46,-1.63l0.68,-0.37l0.19,-0.45l0.5,-4.61l0.55,-0.96l0.17,-4.78l0.92,-1.07l0.35,-1.89l1.48,-1.3l0.53,-1.95l1.26,-1.74l-0.22,-0.67l0.95,-1.88l0.19,-3.32l0.69,-0.84l1.98,-0.2l1.08,-0.98l1.85,-0.99l1.23,-1.31l0.1,-1.01l0.68,-0.38l0.03,-0.62l-1.27,-2.65l0.04,-0.28l1.81,-2.51l0.12,-0.74l-0.34,-0.61l-0.04,-0.61l0.44,-0.47l-0.02,-0.62l1.42,-2.56l-0.03,-0.78l1.26,-1.0l2.27,0.92l0.51,-0.16l0.39,-0.45l1.93,32.44l-0.29,3.24l0.32,0.71l1.48,1.83l0.69,0.45l-0.06,1.59l1.14,1.36l-0.08,0.23l0.59,0.49l-1.51,2.74l-1.52,-0.22l-1.58,0.64l-0.75,0.64l-1.01,0.05l-0.5,0.41l-0.46,0.83l-0.75,0.29l-0.7,0.61l-17.79,-0.51Z",
            "name": "New Hampshire"
        },
        "US-NY": {
            "path": "M790.32,168.22l1.69,-2.23l0.58,0.13l0.69,-0.48l0.66,0.3l0.61,-0.25l0.04,-0.2l0.5,0.1l0.43,-0.47l0.6,0.14l0.35,-0.48l-0.16,-0.72l0.31,-0.34l0.66,-0.16l1.17,0.49l0.38,-0.02l0.25,-0.34l1.38,0.2l0.43,-0.59l1.66,0.44l1.22,-0.48l0.33,-0.65l0.49,0.38l0.56,-0.39l4.74,0.1l2.41,-0.51l2.6,-1.87l-0.49,0.75l-1.12,0.46l-0.42,0.61l-0.76,0.36l-0.56,0.61l0.38,0.62l1.52,0.09l0.06,0.48l-0.47,0.26l-1.5,0.38l-0.44,-0.18l-2.3,0.2l-0.48,0.76l-0.63,-0.24l-2.95,0.74l-0.96,-0.12l-0.4,0.6l-1.12,-0.22l-2.54,1.01l-4.61,0.73l-0.39,0.53l-0.2,0.0l-0.27,-0.77l-1.17,-0.37l-1.29,0.45l-0.1,0.59l-0.45,0.25l-0.5,0.09l-0.44,-0.76ZM814.87,163.5l0.43,-0.79l1.47,-0.97l0.52,0.04l0.73,-0.49l0.43,0.42l0.68,-0.27l0.01,-0.28l0.43,0.65l-1.61,0.54l-2.22,1.18l-0.74,0.21l-0.12,-0.22ZM817.27,159.0l0.01,-0.0l-0.01,0.01l-0.0,-0.0ZM701.06,138.32l4.33,-2.51l1.67,-1.59l1.71,-0.83l0.35,-0.4l1.27,-0.44l1.93,-2.56l1.76,-0.79l0.7,-0.62l0.2,-1.63l-0.5,-1.04l-0.16,-0.94l-0.33,-0.35l0.63,-0.82l-0.01,-0.76l-0.68,-0.61l-2.0,-0.38l0.25,-0.78l-0.07,-1.92l2.7,-0.82l1.64,-0.25l1.06,-0.45l4.71,-0.64l2.33,0.3l1.92,-0.26l5.47,0.92l1.8,1.31l0.9,0.36l0.83,-0.02l2.57,-0.75l5.51,0.24l0.45,0.5l0.67,-0.02l0.37,-0.8l1.53,-0.3l1.22,-0.57l0.76,-0.01l1.14,-1.56l2.21,-1.08l1.06,-0.89l1.08,0.26l1.19,-0.2l1.41,-1.13l-0.04,-0.64l-0.21,-0.14l0.61,-0.84l-0.12,-0.59l-0.6,-0.12l0.12,-1.01l-0.51,-1.53l-0.76,-0.72l0.59,0.4l0.55,-0.12l1.07,-1.05l0.22,-0.77l0.93,-0.37l0.26,-0.41l-0.03,-0.51l-0.35,-0.32l-0.48,-0.05l-0.82,0.48l0.62,-0.87l-0.64,-0.79l-1.19,-0.23l-1.05,0.48l-0.78,-0.72l2.59,-1.67l2.08,-0.85l2.27,-1.86l0.82,-0.32l0.27,-0.48l0.99,-0.63l0.22,-0.51l-0.22,-0.9l1.19,-1.38l6.63,-5.37l5.82,-2.74l2.9,0.22l20.64,-0.13l0.14,0.78l-0.64,1.69l0.64,1.26l-0.64,3.31l0.18,0.95l1.04,1.76l0.08,0.56l-0.61,1.57l0.24,1.39l-0.09,0.81l-0.85,0.74l-0.95,2.9l0.43,0.94l0.16,1.79l0.34,0.81l-0.12,0.96l0.35,0.83l-0.88,2.4l-0.08,0.9l0.31,0.88l0.47,0.19l0.67,-0.38l0.3,-0.7l0.36,0.02l0.28,0.77l0.38,0.38l-0.3,12.86l-0.2,0.91l0.35,1.16l-3.89,12.6l0.39,0.71l-0.99,14.0l0.76,1.36l-3.35,1.89l-0.13,0.56l1.05,1.41l0.02,0.41l-0.24,0.31l-0.7,0.22l-1.07,1.31l-0.48,0.24l-0.08,0.57l-1.15,0.18l0.99,-3.16l0.06,-1.95l-0.27,-1.53l-1.04,-1.2l0.13,-0.94l-0.63,-0.29l-0.56,0.47l-0.19,0.56l0.31,1.25l0.73,0.88l0.14,2.42l-11.57,-6.36l-0.83,-1.49l-2.26,-0.33l-0.47,-0.49l-0.94,-0.35l-1.13,-1.93l0.09,-1.32l-0.18,-0.67l0.27,-0.62l-0.19,-0.64l-0.39,-0.27l0.13,-0.29l-0.24,-0.52l-1.36,-0.91l-1.07,0.03l-0.36,-1.32l-1.4,-0.99l-68.54,-0.05l-0.0,-4.37ZM787.73,169.9l0.24,-1.17l1.09,-0.13l-0.02,0.42l-1.3,0.88ZM712.63,123.92l0.15,-0.49l0.71,0.07l-0.54,0.76l-0.32,-0.34Z",
            "name": "New York"
        },
        "US-HI": {
            "path": "M299.29,452.24l-0.38,-1.84l-1.43,-2.18l-0.07,-0.61l1.19,-1.43l1.02,-0.51l1.22,-1.85l0.89,-0.87l0.03,-0.74l-1.18,-1.62l-0.41,-1.16l0.54,-1.35l1.78,0.6l0.3,0.64l2.59,1.48l0.76,-0.14l6.09,2.66l2.05,2.08l0.31,2.57l0.42,0.33l1.21,-0.04l0.42,1.59l0.84,0.83l2.08,1.2l-0.46,0.99l-1.43,0.8l-1.77,1.66l-3.22,1.03l-1.84,0.06l-4.08,2.68l-0.87,0.84l-0.47,1.4l-0.72,1.01l-0.56,0.37l-1.4,-1.21l-2.07,-0.51l-0.58,-0.81l-0.03,-1.73l0.48,-3.2l-0.75,-2.68l-0.49,-0.36ZM286.01,423.9l0.9,-0.55l0.27,0.17l0.79,0.82l0.62,1.38l0.7,0.4l1.78,-0.43l0.88,-0.52l1.46,0.23l0.78,0.84l0.92,0.21l0.34,0.69l2.12,0.81l0.0,0.91l-0.91,0.96l-1.17,0.65l-1.35,-0.13l-1.46,0.78l-2.14,0.2l-0.42,-0.69l-0.06,-1.65l-0.61,-1.49l-0.57,-0.24l-1.08,0.14l-1.34,-0.63l-1.06,-1.5l0.62,-1.36ZM285.63,432.65l0.71,-0.3l1.0,-0.59l0.01,0.75l-1.71,0.14ZM275.29,419.94l0.41,-0.1l0.67,0.47l2.41,0.12l1.03,0.31l0.59,-0.27l1.14,0.63l1.42,-0.01l0.44,-0.24l0.96,0.19l-0.55,0.66l-1.87,0.73l-3.55,-1.07l-3.93,0.35l0.83,-1.76ZM281.65,428.21l-0.63,0.2l-0.7,-0.21l-0.3,-1.67l-0.95,-0.78l1.95,-0.17l1.19,1.01l0.48,0.51l-1.05,1.11ZM256.79,412.83l2.28,0.06l1.55,-1.67l0.9,-0.52l0.59,0.4l0.71,1.47l0.81,0.81l-0.18,0.64l0.55,1.06l0.69,0.7l0.96,0.1l0.57,0.49l0.18,0.92l0.72,0.52l-0.49,0.34l-0.77,-0.12l-1.11,0.31l-1.25,-1.19l-0.39,-0.21l-0.53,0.14l0.01,-0.78l-0.95,-0.4l-1.35,0.61l0.12,0.44l0.71,0.48l-1.59,0.28l-0.42,-1.28l-0.62,-0.41l-1.28,-1.67l0.08,-0.82l-0.51,-0.69ZM228.76,403.72l1.13,-1.59l2.84,-1.59l0.87,0.33l1.94,-0.42l1.06,0.59l0.51,1.02l-0.79,1.72l0.1,1.09l-0.33,0.59l-1.5,1.19l-1.2,-0.5l-1.34,0.04l-1.05,-1.11l-0.84,-0.02l-0.86,-0.41l-0.54,-0.92ZM220.67,408.19l-0.26,-0.26l0.27,-0.86l0.55,-0.78l0.42,-0.11l1.38,-1.44l-0.28,1.39l-1.17,0.42l-0.67,0.83l-0.24,0.81Z",
            "name": "Hawaii"
        },
        "US-VT": {
            "path": "M799.62,104.23l0.87,-2.6l0.89,-0.82l0.13,-1.1l-0.25,-1.27l0.61,-1.61l-0.12,-0.89l-1.04,-1.75l-0.14,-0.75l0.64,-3.2l-0.1,-0.54l-0.54,-0.79l0.63,-1.53l-0.12,-0.93l27.44,-0.17l0.32,1.7l-1.42,1.79l-0.49,1.31l1.28,2.83l-0.62,0.38l-0.09,1.0l-1.09,1.14l-1.72,0.9l-1.0,0.94l-1.86,0.15l-0.86,0.63l-0.39,0.82l-0.19,3.34l-0.97,1.95l0.19,0.58l-1.13,1.55l-0.48,1.85l-1.49,1.31l-0.42,2.02l-0.95,1.16l-0.18,4.84l-0.55,0.97l-0.5,4.61l-0.78,0.55l-0.54,1.95l0.22,1.23l1.06,1.17l-11.47,-0.39l-0.28,-0.78l0.19,-0.94l0.3,-13.03l-0.82,-1.51l-0.39,-0.28l-0.99,0.03l-0.56,0.85l0.03,-0.8l0.81,-1.86l0.11,-0.78l-0.37,-1.02l0.13,-0.84l-0.35,-0.89l-0.17,-1.83l-0.41,-0.68Z",
            "name": "Vermont"
        },
        "US-NM": {
            "path": "M244.72,333.74l0.01,-98.74l93.41,0.0l0.01,8.14l-0.65,0.42l-0.36,78.56l-55.65,0.02l-0.4,0.42l0.01,0.29l0.48,1.51l0.58,1.29l0.69,0.39l-25.57,-0.07l-0.4,0.4l0.0,7.36l-12.16,0.0Z",
            "name": "New Mexico"
        },
        "US-NC": {
            "path": "M631.07,265.86l0.78,0.25l1.38,-0.1l0.44,-0.26l0.62,-0.73l0.07,-0.73l0.47,-0.85l-0.04,-0.52l1.34,-0.75l0.55,-0.75l2.17,-0.85l1.92,-0.12l0.63,0.25l1.24,-0.23l2.45,-1.67l0.71,-0.08l0.82,-0.85l1.15,-0.7l1.44,-0.57l1.39,0.07l0.64,-0.62l0.81,-1.35l-0.07,-0.98l1.42,0.29l0.74,-1.25l0.9,-0.45l1.05,-0.44l0.18,1.25l0.45,0.39l0.46,0.06l1.37,-0.74l1.6,-1.89l1.75,-0.48l0.68,-0.4l0.65,0.17l0.15,0.43l0.46,0.33l0.97,-0.01l0.93,-0.73l1.59,-2.77l0.39,-0.31l1.12,-0.7l1.27,0.3l0.46,-0.2l0.05,-0.46l-0.42,-0.69l0.68,-1.5l-0.2,-0.83l0.51,-0.85l6.66,0.48l17.74,0.53l62.79,-0.19l0.1,0.98l2.34,3.26l0.43,1.17l-0.61,-0.88l-0.07,-0.56l-0.71,-0.51l-0.47,-0.07l-0.38,0.58l0.45,0.56l0.2,1.21l-0.45,-0.1l-0.62,-0.77l-1.78,-1.08l-0.3,-0.47l-0.52,-0.0l-0.45,0.51l-0.02,0.61l1.1,0.64l1.05,1.3l-0.98,0.26l-1.88,-1.43l-0.46,0.4l0.04,0.4l0.96,1.04l-1.32,-0.55l-1.73,-1.12l-0.48,0.04l-0.09,0.47l0.34,0.64l1.13,0.92l-0.76,0.23l-0.19,0.52l-0.43,0.27l-1.42,0.29l-0.59,-0.77l-0.86,0.18l-0.62,-2.02l0.74,-2.06l-0.29,-0.49l-0.73,-0.35l-0.49,0.55l0.38,0.6l-0.58,0.68l-0.25,0.85l0.05,1.48l0.87,2.01l-0.51,0.93l0.4,0.4l2.68,0.12l2.13,-0.75l0.35,0.74l0.46,0.08l0.29,-0.18l1.33,0.35l0.31,-0.67l-0.26,-0.27l1.1,-0.29l1.74,-0.0l-0.28,0.86l0.45,0.39l-0.67,0.67l0.51,0.92l-0.71,-0.1l-0.34,0.61l0.42,0.43l0.67,0.22l-0.06,0.62l-0.95,-0.18l-0.34,0.61l0.46,0.61l1.09,0.13l0.4,0.3l0.47,-0.25l0.59,-1.5l0.08,-2.69l0.43,-0.27l0.38,0.44l0.81,0.23l0.37,-0.32l-0.03,-0.5l0.4,-0.32l1.01,1.72l-0.31,1.09l0.32,0.72l-0.44,0.04l-0.36,0.39l0.5,1.08l-0.12,0.2l-0.44,0.32l-0.69,-0.08l-0.58,-0.85l-0.39,0.23l-0.17,1.0l-1.28,1.06l0.02,0.45l-0.26,0.08l-0.35,0.72l-0.53,0.05l-0.23,0.25l-0.15,0.73l-0.93,0.55l-0.91,-0.04l-0.44,-0.41l-0.57,0.29l-0.61,-0.81l-0.72,-0.09l-0.16,-0.68l-0.49,-0.32l-0.55,0.2l-0.13,0.74l-0.48,0.08l-0.16,-0.42l-0.42,-0.16l-0.11,-0.48l0.71,0.03l0.45,-0.31l0.23,-0.48l-0.44,-0.57l-1.8,-0.16l-1.21,0.57l-0.19,0.4l0.59,0.47l0.06,0.83l-0.32,-0.3l-1.62,0.31l-0.86,-0.55l-1.26,-0.23l-1.44,-0.56l-0.81,-0.6l-0.5,-0.0l-0.12,0.48l0.25,0.54l0.76,0.57l0.15,0.52l0.57,0.26l0.35,-0.18l0.44,0.1l1.3,0.81l2.03,0.8l2.85,0.73l0.26,0.36l-0.11,0.3l-0.83,-0.15l-0.46,0.53l-1.62,0.8l0.16,0.66l1.41,0.37l-2.75,2.05l-0.95,-0.04l-0.46,-0.24l-1.15,-1.07l-0.72,-0.32l-0.83,-1.03l-0.56,-0.24l-0.46,0.11l-0.03,0.47l2.19,3.16l2.24,0.74l1.03,0.63l1.9,-1.34l0.33,0.46l0.93,0.49l0.52,-0.47l-0.29,-0.69l0.61,0.26l0.06,0.46l0.34,0.31l1.55,-0.33l0.07,0.62l-0.28,0.16l-0.4,-0.25l-0.37,0.25l-0.16,0.69l-1.19,1.14l-0.16,0.59l-0.46,-0.12l0.03,-0.65l-0.83,-0.7l-0.51,0.36l-0.04,0.58l-0.39,-0.6l-0.71,-0.01l-0.97,0.61l-0.23,0.3l0.12,0.23l-1.72,-0.14l-2.68,0.89l-0.34,-0.84l-0.62,-0.45l-0.47,0.39l0.13,0.96l-0.46,-0.09l-0.34,0.35l0.02,0.3l-1.1,1.13l-0.92,0.47l-0.31,-0.24l0.46,-0.39l0.14,-0.7l-0.67,-0.87l-0.01,-0.48l-0.4,-0.36l-1.01,-0.28l-0.25,0.42l0.13,1.0l0.1,0.29l0.49,0.19l0.11,0.42l-0.79,0.09l-0.25,0.65l0.44,0.64l0.57,0.26l-0.06,0.18l-2.1,0.89l-2.18,1.71l-2.56,2.97l-0.76,1.76l-0.49,-1.33l-0.48,-0.28l-0.4,0.4l0.29,2.16l-0.09,1.1l-0.93,1.57l-3.31,-0.56l-1.34,0.25l-0.14,-0.41l-0.5,-0.3l-0.68,0.73l-1.84,0.55l-0.47,-0.13l-16.83,-15.97l-0.9,-0.2l-16.57,-0.35l-0.1,-2.25l-2.31,-2.76l-0.44,-0.01l-1.2,0.78l0.18,-0.9l-0.65,-0.61l-20.24,-0.86l-0.53,-0.31l-0.63,0.28l-0.33,0.47l-3.74,0.94l-0.34,0.49l-0.62,0.35l-0.38,-0.19l-0.5,0.1l-4.54,1.41l-18.63,0.23l0.35,-3.53l0.7,-0.61ZM761.81,249.9l0.04,0.15l0.02,0.05l-0.09,-0.12l0.04,-0.08ZM754.42,270.87l0.07,-0.12l0.03,0.03l-0.1,0.09ZM752.17,270.3l0.0,-0.07l0.05,0.06l-0.05,0.01ZM760.06,243.17l0.28,-0.11l0.02,0.2l-0.23,0.0l-0.06,-0.09Z",
            "name": "North Carolina"
        },
        "US-ND": {
            "path": "M428.09,7.99l1.98,6.42l-0.67,1.34l-0.19,0.98l0.53,2.22l-0.32,1.08l0.43,1.83l-0.22,1.37l0.13,1.64l1.37,3.67l0.44,0.49l-0.1,0.88l0.36,1.42l0.64,0.71l0.84,1.89l0.29,1.26l0.27,0.28l0.08,2.07l-0.25,1.45l0.41,0.66l-0.11,2.44l0.33,1.83l0.01,3.3l0.49,1.44l0.49,0.23l-0.34,0.75l-0.23,1.56l0.31,1.49l-0.21,1.58l0.68,1.04l0.13,1.95l0.39,0.47l0.07,0.55l1.76,2.35l0.07,1.95l0.47,0.98l0.13,1.24l-0.3,1.2l0.21,1.52l-115.8,-0.01l-0.04,-59.52l105.46,-0.0Z",
            "name": "North Dakota"
        },
        "US-NE": {
            "path": "M408.75,124.69l3.79,2.38l2.08,0.8l0.51,0.53l1.2,0.36l1.29,-0.16l0.51,-0.4l0.37,-0.91l0.48,-0.16l0.98,0.2l0.73,-0.12l0.71,0.26l1.3,-0.38l1.54,0.25l3.39,-0.47l2.26,1.76l1.36,0.16l1.49,0.7l1.41,0.11l0.83,0.97l1.37,0.17l-0.03,0.85l0.82,0.68l0.18,0.62l0.57,0.54l3.19,0.61l0.15,0.53l-0.27,1.58l1.03,1.72l-0.23,1.32l0.16,0.64l1.09,0.98l0.26,1.47l0.56,0.64l1.05,0.65l-0.01,1.58l1.36,1.81l-0.56,1.94l0.3,2.63l0.5,0.53l0.84,-0.13l-0.04,1.02l1.12,0.48l-0.47,1.89l0.2,0.48l0.96,0.35l-0.54,0.57l-0.11,1.17l0.32,0.48l0.51,0.21l0.1,1.17l-0.28,0.65l0.2,0.51l-0.08,0.5l0.57,0.74l0.2,1.59l-0.26,1.1l0.17,0.62l-0.55,0.73l-0.0,0.73l0.39,0.76l1.14,0.58l-0.07,1.39l0.21,0.72l0.99,0.44l0.01,0.67l0.43,0.61l0.1,0.77l0.45,0.88l-0.34,0.61l0.1,0.24l0.32,0.24l0.79,0.0l0.71,0.86l0.98,0.21l-0.15,0.82l1.12,1.41l-0.23,0.91l0.27,0.7l-102.78,0.0l-0.01,-18.05l-0.4,-0.4l-30.79,-0.0l0.01,-36.63l86.2,0.0Z",
            "name": "Nebraska"
        },
        "US-LA": {
            "path": "M478.53,322.47l0.03,-17.05l43.98,-0.05l0.27,0.67l1.15,0.56l-0.86,0.95l-0.39,1.71l0.39,0.66l0.93,0.24l-1.0,0.21l-0.49,0.67l0.28,1.13l0.81,0.74l-0.11,1.67l0.38,0.52l1.18,0.67l0.31,0.87l1.14,0.38l-0.83,0.86l-0.88,1.73l-0.61,-0.02l-0.54,0.41l-0.08,0.61l0.47,0.65l-0.25,0.79l-1.21,0.65l-1.05,1.39l-1.19,0.42l-0.66,0.63l-0.85,1.86l-0.46,2.69l-0.96,0.65l-0.46,0.61l-0.0,1.02l0.44,0.8l-0.46,1.76l-1.46,0.13l-0.45,0.44l0.17,0.83l0.46,0.5l-0.29,1.07l0.68,1.17l-1.02,0.81l-0.13,0.45l0.38,0.27l29.57,0.0l-0.85,2.5l-0.52,0.75l-0.37,1.76l0.47,0.82l-0.11,0.56l0.41,0.83l1.02,0.68l0.87,1.18l0.04,0.69l0.6,1.12l0.03,0.86l0.69,1.4l-1.44,0.12l-0.21,-0.07l-0.12,-0.71l-0.31,-0.24l-1.06,0.11l-0.93,-0.56l-1.24,0.01l-0.39,-0.77l-0.97,-0.81l-2.34,-0.61l-1.11,0.41l-1.34,1.67l-1.19,1.01l-0.43,0.72l-0.03,0.99l0.4,0.76l0.65,0.52l1.78,0.36l1.64,0.62l2.85,-0.51l1.21,-0.83l0.6,-0.74l0.22,0.36l0.78,0.41l1.33,-0.19l-0.37,0.4l-0.86,-0.16l-0.52,0.21l-0.41,0.5l-0.06,0.78l0.53,0.97l1.21,0.15l0.75,0.97l0.6,0.22l0.8,-0.09l0.49,-0.33l0.49,-0.86l0.09,-1.02l0.8,-0.36l0.51,-0.68l-0.22,0.95l0.12,0.6l0.24,0.12l-0.14,0.34l1.1,1.18l-0.14,0.73l-0.69,-0.55l-0.6,-0.13l-1.03,1.39l-0.67,0.03l-0.46,0.39l-0.08,0.81l-1.07,-0.5l-0.44,0.15l0.0,0.47l0.71,0.72l-1.31,-0.06l-0.33,0.38l0.51,0.46l0.89,1.69l1.47,0.51l0.61,0.44l-0.14,0.91l0.28,0.39l0.52,0.12l1.2,-0.19l0.53,0.21l0.15,0.4l0.59,0.32l1.1,-0.13l0.39,0.63l1.11,-0.18l0.65,0.67l-0.35,0.51l1.09,0.82l-0.3,0.43l0.28,0.52l-0.23,0.41l-0.84,0.89l-0.7,-1.07l-0.4,-0.18l-0.22,0.13l0.12,-0.61l-0.37,-0.43l-0.71,-0.37l-0.53,0.41l0.05,0.92l-0.36,0.24l-0.13,-0.78l-0.44,-0.25l-0.55,-0.96l0.02,-0.69l-0.79,-0.19l-0.46,0.33l-1.05,-0.23l-0.21,-0.44l0.14,-0.46l-0.31,-0.47l-0.43,-0.06l-0.71,0.49l-0.78,-0.07l0.17,-0.65l-0.29,-0.82l-0.52,-0.37l-0.33,0.1l0.19,-0.65l-0.32,-0.36l-0.78,-0.09l-0.26,0.34l-0.63,-0.28l-0.39,0.16l-1.99,-1.18l-1.01,-0.14l-0.47,-0.51l-0.61,0.12l-0.28,0.39l-0.16,1.07l1.35,0.9l1.24,0.35l-0.16,0.67l0.17,0.34l-0.28,0.24l0.09,0.49l-0.66,0.7l-0.08,0.51l0.29,0.73l0.25,0.13l-0.82,0.91l-1.06,0.58l-0.5,-0.85l0.28,-1.1l-0.22,-0.8l-0.43,-0.21l-0.34,0.24l-0.89,-0.92l-0.48,0.22l-0.51,-0.8l-0.53,-0.22l-0.41,0.29l-0.25,0.69l-0.7,0.13l-0.37,-0.44l-0.3,-0.03l-0.79,0.38l-0.15,0.53l0.3,0.39l-0.51,0.27l-0.23,1.08l-0.34,0.07l-0.37,0.6l-0.63,-0.06l-0.08,-0.42l-1.31,-0.48l-0.72,0.67l-1.43,-0.84l-0.24,-0.44l-0.87,-0.06l-0.29,0.42l-0.69,-0.42l0.21,-0.18l0.12,-0.86l-0.16,-0.76l-1.52,-1.16l-0.03,-0.4l-0.62,-0.62l-0.01,-0.64l0.73,-1.13l-0.27,-0.71l-0.75,-0.24l-0.39,0.55l0.1,0.25l-0.54,0.6l0.01,0.64l-1.29,-0.41l-0.34,-0.74l-1.6,0.42l-0.47,-1.74l-0.41,-0.13l-0.61,0.2l0.13,-1.17l-0.37,-0.63l-0.83,-0.21l-1.53,0.08l-0.97,0.44l-0.13,-0.38l0.72,-0.21l0.01,-0.66l-0.49,-0.56l-0.86,-0.16l-0.73,0.26l-0.77,-0.16l-0.4,0.6l-1.67,0.69l-0.49,-0.25l-0.37,0.09l-0.81,0.49l0.35,1.12l0.67,0.35l0.47,1.02l-0.9,0.08l-1.55,0.68l-2.95,-0.53l-1.05,0.08l-2.48,-0.53l-1.57,-0.65l-1.42,-0.94l-2.96,-1.07l-2.59,-0.55l-2.12,0.31l-4.64,0.06l-0.85,0.16l-1.52,0.87l-0.4,-0.47l-0.14,-0.73l1.31,-0.32l0.68,-1.37l0.06,-1.24l-0.26,-0.44l0.95,-1.06l0.3,-1.26l-0.3,-1.48l0.13,-1.15l-0.52,-0.62l-0.1,-0.76l0.81,-1.67l-0.42,-1.54l0.68,-0.62l0.31,-1.1l0.71,-0.7l0.17,-0.89l0.65,-1.3l-0.06,-1.13l0.53,-0.71l-0.51,-1.04l0.65,-0.25l0.22,-0.38l-0.65,-1.15l0.18,-0.5l-0.06,-1.19l-0.29,-0.27l-0.6,-0.03l-0.39,-1.2l-0.71,-0.69l0.29,-1.0l-0.64,-0.63l-0.22,-0.76l-0.43,-0.3l0.15,-0.77l-0.95,-0.53l-0.6,-0.74l0.27,-1.9l-0.48,-1.59l-1.01,-1.62l-1.12,-0.79l-0.42,-0.68l-0.53,-0.38ZM552.44,372.37l0.02,0.13l-0.09,0.01l0.07,-0.14ZM545.5,355.37l0.12,-0.23l0.16,-0.01l-0.02,0.15l-0.25,0.09ZM522.71,369.55l-0.6,-0.1l-1.13,-0.64l0.79,-0.72l0.86,0.55l-0.15,0.31l0.22,0.6ZM509.89,363.89l0.99,-0.28l0.38,-0.33l0.72,0.15l0.64,0.52l0.98,0.34l-0.35,0.26l-0.23,0.61l-0.48,0.08l-2.65,-1.36Z",
            "name": "Louisiana"
        },
        "US-SD": {
            "path": "M322.49,86.42l0.28,-0.51l-0.1,-17.59l115.66,0.01l-0.22,1.43l-0.8,1.48l-3.04,2.09l-0.48,1.15l1.55,1.99l1.01,1.86l0.52,0.33l1.77,0.27l1.0,0.77l0.53,0.9l0.0,33.83l-1.81,0.02l-0.32,0.15l-0.12,0.4l0.19,1.26l0.82,0.98l-0.04,1.19l-0.65,0.31l0.11,1.34l0.47,0.42l1.06,0.07l0.26,1.39l-0.18,0.75l-0.64,0.7l-0.05,1.51l-0.39,0.55l-0.35,1.48l-0.49,0.37l-0.73,1.62l0.46,1.03l1.19,0.91l-0.13,0.55l0.52,0.46l0.37,1.03l-1.6,-0.29l-0.29,-0.79l-0.79,-0.65l0.2,-0.45l-0.28,-0.6l-1.52,-0.24l-0.97,-1.04l-1.52,-0.14l-1.45,-0.69l-1.31,-0.14l-2.27,-1.77l-0.63,-0.08l-3.07,0.51l-1.6,-0.25l-1.19,0.37l-0.68,-0.26l-0.71,0.12l-1.14,-0.2l-0.97,0.4l-0.42,0.96l-0.35,0.26l-0.73,0.03l-3.55,-1.62l-3.98,-2.46l-86.37,-0.0l-0.05,-37.46Z",
            "name": "South Dakota"
        },
        "US-DC": {
            "path": "M742.58,199.53l0.49,-0.45l1.47,1.34l-0.75,0.69l-0.28,-0.93l-0.93,-0.65Z",
            "name": "District of Columbia"
        },
        "US-DE": {
            "path": "M763.07,185.56l0.71,-1.11l1.08,-0.7l1.09,-0.22l1.52,0.24l-0.41,0.49l-0.31,0.91l-0.67,0.76l-0.68,0.32l-0.27,0.62l-0.03,0.58l0.72,0.89l-0.41,1.44l1.47,2.46l0.98,0.76l0.46,1.36l-0.13,1.2l0.22,1.7l0.55,0.49l0.62,1.14l0.2,1.19l2.26,2.25l1.28,0.22l0.09,0.96l-0.69,0.0l-0.37,0.25l-0.16,1.19l0.14,0.13l-0.54,0.13l-0.48,0.42l0.12,0.28l-0.22,0.43l0.57,0.37l0.92,-0.4l0.56,0.42l0.29,-0.09l0.28,1.22l-9.64,0.1l-1.17,-22.43Z",
            "name": "Delaware"
        },
        "US-FL": {
            "path": "M578.94,340.18l39.64,-0.01l0.46,0.46l0.52,1.15l0.35,2.19l0.8,0.9l0.34,0.11l40.51,2.62l0.64,1.15l-0.14,0.82l0.29,0.92l0.3,0.41l0.53,0.16l1.39,0.02l0.59,-0.19l0.26,-0.32l0.6,-3.55l-0.57,-1.31l0.09,-1.35l0.32,-0.45l0.54,-0.16l0.23,-0.51l4.34,1.57l3.31,0.49l-0.13,0.71l-0.55,-0.12l-0.38,0.34l-0.04,1.25l1.43,1.74l0.02,0.81l0.27,0.32l-0.06,1.53l0.52,1.93l0.46,0.88l0.16,1.58l0.51,1.88l-0.08,0.46l0.45,0.82l0.18,1.23l0.92,2.11l0.26,1.29l1.64,3.26l1.04,2.73l1.36,2.42l0.06,0.54l0.43,0.36l4.04,6.55l-0.56,0.4l-0.96,-0.2l-0.08,-0.7l0.36,-0.38l0.09,-0.84l-1.73,-1.13l-0.55,0.43l0.35,2.31l0.45,0.85l0.92,3.95l5.57,11.94l0.57,2.58l1.91,4.44l-1.08,-0.43l-0.31,0.62l0.52,0.63l0.65,0.34l0.47,-0.06l0.95,0.91l1.04,2.53l-0.37,0.13l-0.23,0.47l0.24,0.37l0.58,0.26l0.38,1.5l-0.24,0.77l0.3,0.82l0.03,2.07l-0.33,0.52l-0.75,6.89l-0.42,0.78l0.24,0.61l-0.12,2.32l-0.86,1.01l-0.31,1.67l-0.73,0.38l-0.47,1.34l-0.52,0.6l-0.07,1.14l-0.51,1.27l0.16,1.47l0.21,0.2l-1.07,1.1l-0.48,0.84l-0.67,0.04l-0.42,-0.22l-1.13,0.13l-0.47,0.7l-0.72,0.14l-0.24,0.4l-0.7,0.37l-1.08,-0.08l-0.17,-0.32l-0.99,-0.25l-0.85,0.65l-2.55,0.36l-0.65,-0.57l-0.36,-0.85l0.28,-1.22l0.51,0.72l1.13,0.61l0.19,0.55l0.41,0.14l1.2,-0.35l0.29,-0.52l-0.1,-0.59l-1.08,-1.13l-1.79,-0.57l-0.59,-0.46l-0.38,-1.35l-0.53,-0.62l0.28,-0.75l-0.38,-0.35l-0.39,0.01l-0.65,-1.99l-0.37,-0.38l-0.45,-0.03l-0.18,-0.42l0.24,-0.73l-0.45,-0.6l-0.86,-0.65l-0.79,-0.22l-0.48,-0.51l-0.5,0.02l-0.75,-0.42l-1.47,-0.35l-0.31,-0.71l-0.63,-0.01l-0.1,-0.59l-0.55,-0.58l-0.25,-1.14l-0.44,-0.26l-0.09,-2.22l-0.44,-0.86l0.09,-1.17l-0.22,-0.73l-0.41,-0.77l-0.45,-0.24l-0.31,0.68l-0.7,-0.3l0.97,-0.82l0.36,-1.04l0.79,-0.86l0.57,-0.18l0.36,-0.63l-0.52,-0.5l-1.27,0.51l-0.9,0.87l-0.65,1.56l-0.98,0.08l0.05,-1.01l-0.41,-1.11l0.42,-2.68l-0.12,-0.62l-0.44,-0.36l1.48,-0.84l0.24,-0.6l-0.49,-0.52l-2.63,0.99l-0.53,-0.59l-0.3,0.11l-0.86,-0.82l-0.51,0.62l0.75,1.03l0.38,0.14l0.66,1.61l-0.75,-0.06l-0.99,-0.44l-0.41,-1.3l-0.51,-0.6l-0.29,-0.05l-1.13,-2.18l-0.45,-1.14l-0.04,-0.75l-0.85,-0.8l0.19,-0.64l-0.5,-1.52l-1.21,-1.0l0.12,-0.35l0.48,0.01l0.36,-0.27l-0.13,-0.44l0.37,-0.46l-0.24,-0.32l0.62,-1.1l2.46,-2.8l-0.46,-2.05l-0.54,-0.52l-0.82,0.19l-0.34,0.46l-0.08,1.14l0.02,-1.29l-0.24,-0.65l-0.7,-0.35l-0.83,-0.81l-1.26,-0.47l-0.18,0.45l0.18,0.44l-0.13,0.66l-0.4,0.38l0.16,0.64l1.58,0.71l0.08,0.69l-0.51,1.08l-0.0,0.64l-0.15,-0.4l-0.62,-0.31l-1.46,-1.46l-0.34,0.1l-0.12,-0.42l0.75,-1.51l0.36,-1.6l0.16,-1.1l-0.26,-1.12l0.4,-0.36l0.66,-1.38l-0.09,-0.5l0.95,-2.2l0.5,-4.05l-0.18,-1.31l0.2,-0.42l-0.05,-1.72l-1.49,-1.34l0.04,-0.33l-0.35,-0.51l0.04,-0.69l-0.62,-0.75l-0.23,-1.19l-0.57,-0.36l-1.16,0.04l-0.82,-0.29l-1.26,0.21l-0.67,-1.47l-1.14,-0.57l-0.14,-0.62l-0.81,-1.22l-0.62,-0.57l-0.53,-0.05l-1.02,-1.07l-0.59,-0.25l-0.1,-0.6l0.21,-0.95l-0.16,-0.64l-2.32,-1.29l-0.43,-0.52l-0.25,-1.0l-1.5,-1.8l-1.61,-1.11l-1.18,-0.3l-2.55,-1.74l-2.47,0.35l-0.8,-0.42l-0.93,0.2l-0.38,0.46l-1.17,0.36l-0.52,0.49l-0.07,0.43l-0.5,-0.21l-0.43,0.15l-0.2,0.26l0.55,1.01l-1.08,0.03l-1.48,0.96l-0.81,0.24l-1.34,1.08l-1.38,0.56l-0.07,-0.74l-0.58,-0.11l-0.88,0.46l-1.08,1.01l-1.8,-0.09l-1.85,0.56l-0.58,-0.06l0.05,-1.55l-0.89,-1.63l-0.84,-0.87l-1.08,-0.49l-0.14,-0.37l0.58,0.07l0.78,-0.41l0.13,-0.69l-1.12,-0.47l-0.25,0.19l-0.06,-0.55l-0.22,-0.11l0.13,-0.37l-0.43,-0.4l-1.18,0.32l-1.67,-0.79l0.55,-0.65l0.71,-0.01l1.04,-1.11l-0.65,-0.88l-0.46,0.05l-0.52,0.7l-0.34,-0.07l-0.7,0.32l-0.44,-0.72l-0.7,-0.01l-0.15,0.24l-1.22,0.43l-0.15,0.78l-2.88,-1.4l-2.77,-0.78l0.41,-0.28l1.2,0.51l0.65,-0.14l0.16,-0.51l-0.62,-0.92l0.13,-0.51l-0.57,-0.38l-0.39,0.18l-0.14,-0.34l-1.65,-0.12l-1.7,0.41l-0.22,-0.77l-0.81,0.14l-0.49,-0.23l-0.28,0.41l0.07,0.52l-1.19,0.41l-0.47,0.44l-2.76,-0.02l-1.28,0.2l0.14,-0.26l-0.29,-0.52l-1.09,-0.38l-0.42,-0.43l0.5,-0.22l0.24,-0.43l-0.11,-0.32l-0.55,-0.19l-0.61,-0.6l-0.47,0.06l0.0,0.65l-0.44,1.12l-1.04,-1.37l-0.68,-0.12l-0.39,0.62l0.47,1.44l-0.29,0.55l-1.21,0.58l-0.21,0.8l-0.45,0.1l-0.27,0.45l-0.96,0.2l0.03,-0.7l0.99,-0.62l0.2,-0.53l-0.3,-0.67l-0.94,-0.31l-0.23,-0.65l0.44,-1.24l0.1,-1.14l-0.31,-0.42l-1.45,-0.88l-1.65,-2.05l0.39,-1.09l-0.01,-0.76ZM679.8,408.73l0.23,0.88l0.68,0.46l0.62,0.02l0.79,1.42l0.63,0.6l1.34,0.82l1.27,0.31l0.55,-0.26l0.13,-0.67l0.52,-0.48l0.06,-0.89l0.81,-0.92l0.37,-1.4l-0.24,-1.35l-0.82,-1.76l-1.15,-1.27l-0.98,-0.32l-1.04,0.47l-1.94,2.11l-1.92,1.13l-0.3,0.6l0.15,0.42l0.24,0.08ZM588.98,349.59l-0.19,0.02l0.1,-0.07l0.09,0.05ZM606.35,353.24l0.57,-0.09l0.13,0.58l-0.69,-0.49ZM688.14,382.63l0.13,0.22l-0.24,0.29l0.11,-0.51ZM610.42,355.75l-0.09,-0.07l0.02,0.01l0.07,0.06ZM686.27,384.49l-0.42,-2.4l1.11,-0.97l-0.63,2.2l-0.06,1.16ZM616.92,362.57l0.09,-0.08l0.16,0.02l-0.07,0.15l-0.18,-0.1Z",
            "name": "Florida"
        },
        "US-WA": {
            "path": "M0.53,24.52l0.34,-0.6l0.19,-2.09l0.33,-0.65l-0.08,-0.36l-0.71,-0.6l0.92,0.2l4.82,2.2l1.32,0.07l1.16,0.46l1.17,0.97l2.19,0.53l3.54,0.07l1.09,0.5l1.46,-0.24l1.5,0.21l0.54,0.31l2.58,0.13l1.37,-0.76l0.63,0.17l0.76,0.5l0.24,0.33l0.01,0.64l0.74,0.54l0.32,0.03l0.39,-0.47l-0.11,-0.64l0.51,-0.07l0.21,0.48l0.48,0.16l0.31,0.45l-0.27,0.58l0.44,0.4l0.54,-0.15l0.54,-0.92l-0.22,-0.67l-0.62,-0.64l0.09,-0.24l0.71,-0.23l-0.16,0.86l1.09,1.79l0.51,0.39l0.15,0.69l0.6,0.71l-0.38,0.18l-1.34,2.0l-0.1,-1.27l-0.3,-0.33l-0.61,0.44l-0.63,0.11l-0.2,0.84l0.31,0.8l-0.95,1.79l-1.67,1.65l-0.73,1.48l-0.8,0.81l-0.71,1.74l0.13,0.69l0.74,0.38l0.98,-0.1l2.69,-1.02l1.09,-0.78l-0.19,-0.7l-0.67,-0.06l-2.8,1.34l-0.46,-0.17l1.34,-2.3l1.07,-1.37l2.89,-1.44l0.54,-1.54l1.43,-1.79l0.69,0.44l0.46,-0.3l-0.22,-1.67l0.76,2.59l0.26,0.17l-1.06,0.01l-0.47,0.85l-0.64,-0.59l-0.53,-0.05l-0.24,0.71l0.49,0.58l0.45,1.52l-0.56,-1.05l-0.67,-0.05l-0.31,0.74l0.12,0.72l0.6,0.48l-0.46,0.6l0.08,0.44l0.44,0.09l1.61,-0.89l0.16,0.68l0.34,0.25l-0.64,1.77l-0.07,0.44l0.23,0.53l-0.41,0.24l-0.24,0.58l0.37,0.79l-1.03,-0.4l0.74,-1.51l-0.08,-0.49l-0.37,-0.33l-1.7,1.36l-0.28,0.72l-0.05,-0.73l-0.5,-1.17l-0.5,0.11l-0.65,1.63l-1.14,0.74l-0.69,1.89l-1.46,0.59l-0.36,0.49l0.06,1.13l0.45,0.1l0.67,-0.36l-0.15,0.35l0.36,0.31l0.95,-0.2l0.25,0.61l0.63,0.29l0.44,-0.39l-0.05,-1.63l0.22,0.38l0.8,-0.36l0.9,0.88l0.57,0.25l1.17,-0.82l1.31,-1.65l0.62,-1.61l0.87,0.58l0.72,-0.03l0.39,-0.29l-0.05,-0.65l-0.2,-0.12l1.42,-0.79l0.14,-0.95l-0.65,-1.06l-0.07,-1.11l-0.52,-1.18l0.22,0.26l0.69,-0.2l0.08,-0.92l-0.39,-0.65l-0.83,-0.37l0.59,-1.17l-0.35,-1.58l0.24,-0.6l0.71,-0.74l0.29,-1.34l1.53,-0.78l0.52,-1.26l-0.61,-0.5l-0.53,0.11l-1.24,-1.0l-0.28,-0.52l-0.06,-1.36l-0.47,-0.73l0.29,-0.74l-0.15,-0.83l-1.62,-1.31l-0.75,-0.22l-0.32,-0.52l0.03,-0.49l0.68,0.13l0.46,-0.41l-0.16,-1.67l0.73,-0.4l0.06,-1.0l-0.36,-0.66l-0.43,-0.28l-0.4,-1.03l0.31,-0.88l-0.27,-0.47l-1.2,-0.57l-0.9,0.53l-0.75,-0.83l-0.29,-0.7l-0.8,-0.67l0.32,-0.47l-0.15,-0.69l0.35,-0.63l88.01,-0.0l0.2,50.37l-0.29,0.97l0.21,0.63l1.39,1.89l0.5,1.7l-0.68,0.91l-0.09,0.44l1.04,1.46l-32.49,0.04l-1.5,0.99l-3.79,0.05l-2.17,0.36l-1.51,0.0l-1.47,1.1l-4.22,0.66l-3.07,0.98l-1.49,0.96l-0.94,-0.06l-1.13,0.49l-0.97,-0.11l-0.6,0.2l-2.61,-0.36l-0.79,0.57l-1.69,0.41l-0.83,0.53l-0.82,0.18l-2.25,-0.21l-1.59,0.58l-0.52,-1.0l-0.55,-0.42l-0.82,-0.25l-4.65,-0.4l-2.32,0.37l-1.68,-0.13l-2.43,1.48l-4.34,1.43l-1.26,-0.39l-1.23,-0.02l-1.85,-0.65l-0.89,0.14l-1.08,-0.19l-0.92,-0.79l-0.08,-1.99l-0.4,-0.73l0.09,-1.04l-0.52,-2.03l-0.7,-0.73l-0.69,-1.61l-0.82,-0.71l-2.84,-1.29l-2.84,0.51l-1.36,-0.91l-0.4,-0.86l-0.7,-0.44l-2.43,0.25l-0.65,-0.14l-0.45,-0.63l-0.49,-0.04l-0.89,0.53l-0.88,-0.05l-1.03,0.59l-1.35,-1.06l-0.92,0.01l0.1,-1.24l0.64,0.55l0.64,-0.12l0.59,-0.8l0.63,0.44l0.65,-0.21l-0.04,-0.78l-0.8,-0.45l-0.5,-0.63l0.47,-0.35l0.12,-0.47l-0.41,-1.15l0.35,-0.51l-0.35,-0.82l0.08,-0.2l0.69,-0.18l0.18,0.42l0.57,0.26l0.84,-0.48l-0.24,-0.66l-0.38,-0.05l-1.41,-1.09l-0.53,0.06l-0.3,0.28l-2.07,-0.07l-0.32,-1.69l0.82,0.33l0.46,-0.18l0.16,-0.6l-0.28,-0.51l3.13,-1.19l0.3,-0.35l-0.23,-0.4l-0.51,-0.21l-2.35,-0.17l-0.38,-0.91l-0.7,-0.47l-1.31,0.12l-0.92,-4.23l-0.43,-0.78l-0.39,-0.24l-0.1,-0.63l-0.49,-0.2l-0.75,-5.21l-0.79,-2.13l-0.63,-0.47l-0.58,-1.24l-1.03,-1.0l-0.83,-0.27l-0.46,-0.75l-0.69,-2.02l-0.14,-1.56l-0.39,-0.75ZM30.4,41.91l0.32,0.6l-0.26,0.59l-0.27,-0.87l0.21,-0.32ZM35.18,22.7l-0.36,0.86l-0.01,0.61l-0.2,-1.0l0.58,-0.47ZM33.85,18.4l-0.07,-0.02l0.03,-0.04l0.05,0.05ZM33.04,18.46l-0.38,0.48l-0.36,0.01l0.22,-0.67l-0.19,-0.48l0.21,-0.13l0.49,0.8ZM31.29,22.37l1.22,-2.19l0.53,-0.14l0.2,0.62l0.79,0.57l-0.03,0.2l-0.54,-0.44l-0.48,0.0l-0.46,0.52l-0.38,-0.01l-0.18,0.73l-0.67,0.13ZM31.78,23.44l0.4,-0.07l0.76,0.32l0.15,0.25l-0.9,-0.02l-0.41,-0.48ZM33.4,25.51l0.04,0.65l0.0,0.04l-0.13,-0.25l0.09,-0.43ZM34.32,27.68l0.01,0.0l0.08,-0.04l-0.06,0.06l-0.02,-0.02ZM34.66,27.42l0.2,-0.89l1.4,0.91l0.37,0.92l-0.24,0.37l-0.42,0.01l-0.43,-1.16l-0.55,-0.25l-0.33,0.1ZM34.85,39.32l0.08,-0.98l0.17,-0.28l0.23,0.91l-0.48,0.35ZM34.0,35.06l-0.16,-0.88l0.3,-0.48l0.16,1.5l-0.29,-0.14ZM31.41,44.27l0.13,-0.22l0.06,0.01l-0.04,0.22l-0.15,-0.01ZM27.52,14.4l0.4,-0.43l0.04,0.57l0.5,0.74l-0.27,-0.0l-0.68,-0.88ZM29.15,13.76l1.05,0.54l-0.56,0.43l-0.49,-0.97ZM28.65,16.75l0.04,0.3l-0.04,0.7l0.1,0.46l-0.56,-0.25l0.45,-1.22ZM29.0,18.52l0.19,0.12l0.31,-0.0l-0.44,0.01l-0.06,-0.13ZM28.52,42.59l0.03,-0.11l0.06,0.21l-0.06,-0.05l-0.04,-0.05ZM26.27,17.69l-1.37,-0.54l-0.27,-1.6l0.38,0.05l1.24,0.95l0.27,0.38l-0.27,0.23l0.02,0.53Z",
            "name": "Washington"
        },
        "US-KS": {
            "path": "M459.62,181.66l0.38,0.54l0.71,0.18l0.94,0.71l0.62,-0.07l1.06,-0.69l0.41,-0.05l-0.04,0.62l0.95,0.67l0.07,1.14l-0.79,-0.2l-0.58,0.25l-0.21,0.79l-1.13,1.11l-0.12,0.91l-0.54,0.11l-0.23,0.33l0.02,0.58l1.36,1.82l1.76,1.33l0.14,0.93l0.34,0.73l0.65,0.49l0.27,0.96l1.71,0.84l0.88,0.03l0.51,0.26l0.0,38.23l-114.85,0.0l-0.18,-53.64l104.39,0.0l0.91,0.86l0.57,0.23Z",
            "name": "Kansas"
        },
        "US-WI": {
            "path": "M588.91,78.53l0.26,0.11l0.6,-0.13l-0.23,0.6l-0.58,-0.06l-0.05,-0.52ZM583.23,85.53l0.54,-0.33l0.56,-2.0l0.61,0.1l0.91,-0.58l0.33,-0.34l0.29,-1.02l0.51,-0.52l0.65,0.06l0.01,0.25l-0.75,-0.04l-0.26,0.5l0.16,0.28l-0.17,0.77l-0.39,0.1l-0.2,0.58l0.43,0.52l-0.28,0.49l-0.54,0.24l-0.94,1.58l-0.25,0.71l0.1,0.39l-1.29,1.84l-0.47,0.08l-0.72,-0.93l-0.09,-0.61l0.51,-1.29l0.76,-0.84ZM497.92,84.81l0.4,-0.21l0.36,-0.8l-0.33,-1.37l0.18,-1.64l0.8,-0.97l0.71,-1.98l-0.14,-0.53l-0.75,-0.86l-0.52,-1.31l-0.82,-0.38l-1.3,-0.09l-0.17,-0.4l0.14,-1.58l1.86,-1.87l0.03,-0.72l0.88,-1.29l2.08,-0.83l0.55,-0.63l1.01,-0.15l0.53,-0.64l1.19,-0.03l0.41,-0.71l0.8,-0.65l0.01,-10.84l1.08,-0.23l0.33,-0.97l0.56,-0.28l0.31,-0.55l0.77,0.7l1.65,0.7l2.73,-0.3l3.52,-1.15l2.79,-0.52l2.54,-1.76l0.3,0.33l1.39,0.02l0.51,-0.61l0.55,-0.09l0.38,-0.52l0.88,-0.47l1.08,0.02l0.51,-0.44l0.3,0.46l0.49,0.05l0.21,0.46l-0.65,1.4l-0.77,0.78l-0.17,0.9l0.23,0.61l-1.29,1.51l-0.18,0.38l0.19,0.53l0.65,0.22l0.52,-0.1l1.95,-0.73l0.77,-0.7l2.13,1.31l2.34,0.62l0.41,0.53l0.88,-0.06l1.59,0.79l1.55,3.06l0.35,0.3l15.53,3.74l4.49,2.21l1.73,0.03l1.58,0.54l1.45,-0.38l1.75,0.62l0.68,-0.04l0.69,0.39l2.21,0.32l0.82,0.46l0.43,0.81l-0.56,0.9l0.33,0.78l0.75,0.39l1.03,-0.02l0.56,0.42l1.02,0.14l1.22,1.1l-0.21,0.62l0.45,1.02l-0.46,0.68l0.27,1.13l-0.95,1.0l-0.26,1.59l0.31,0.46l0.52,0.22l1.4,-0.07l1.15,-0.52l0.13,0.2l-1.09,2.03l-0.13,1.19l1.15,1.46l0.73,0.37l-0.29,0.52l-0.15,1.13l-2.58,0.77l-0.61,0.63l-0.13,1.1l-0.88,0.92l-0.4,1.07l-0.79,0.88l-0.1,0.95l-0.4,0.62l-0.33,1.51l1.0,0.84l0.9,0.07l0.52,-0.26l0.67,-1.13l2.0,-1.08l0.64,-0.93l-0.04,-0.47l0.39,-0.73l1.31,-1.37l0.08,0.22l0.45,0.01l0.68,-0.56l0.54,0.03l0.4,-0.28l0.99,1.12l0.54,0.23l-0.57,1.8l-1.55,2.32l-0.83,3.62l-0.46,1.16l0.08,1.02l0.67,0.92l-0.0,0.39l-0.61,0.76l-0.91,0.44l-0.55,0.58l-1.36,3.28l-0.19,2.26l0.55,1.12l-0.09,1.02l-1.45,2.64l-0.15,1.83l-0.97,1.72l-0.59,2.1l0.02,0.91l0.3,0.91l-0.19,1.15l0.4,0.52l-0.4,1.42l0.79,0.77l0.22,2.12l0.97,1.43l-0.13,1.39l-0.5,1.21l0.09,2.5l-43.18,-0.37l-0.13,-0.67l-0.89,-1.61l-0.43,-0.4l-4.72,-1.12l-0.88,-1.2l-0.2,-1.46l-0.77,-1.11l-0.39,-4.21l0.14,-0.51l1.11,-1.61l0.02,-0.9l-0.64,-0.79l-1.36,-0.52l-0.53,-1.54l-0.09,-3.73l0.18,-1.47l-0.11,-0.62l-0.45,-0.66l-0.01,-1.28l-0.29,-0.99l-1.09,-0.63l-0.95,-1.44l-0.91,-0.17l-1.09,-0.74l-1.7,-0.06l-2.5,-1.76l-1.98,-3.2l-2.46,-2.03l-2.89,-0.67l-0.63,-1.12l-1.05,-0.95l-3.08,-0.6l-2.15,-1.9l-1.14,-0.7l0.53,-1.02l0.01,-1.43l0.31,-0.71l-0.22,-1.68l-0.42,-1.06ZM534.21,46.54l0.1,-0.31l0.02,0.19l-0.12,0.12ZM530.1,51.03l0.11,-0.06l0.01,0.03l-0.12,0.03Z",
            "name": "Wisconsin"
        },
        "US-OR": {
            "path": "M3.12,127.4l1.89,-3.81l0.87,-5.49l0.22,0.65l0.61,0.32l0.4,-0.4l-0.01,-0.64l0.28,-0.37l-0.09,-0.49l0.31,-0.44l0.55,0.77l1.14,0.1l0.18,-0.63l-0.84,-1.34l0.05,-0.79l-0.47,-0.05l-0.65,0.42l0.83,-2.89l0.84,-1.05l0.93,0.07l0.4,-0.4l-0.39,-0.63l-1.18,-0.38l0.52,-4.16l0.29,-0.42l-0.21,-1.05l0.37,-2.46l-0.03,-2.34l0.51,-1.81l0.42,0.17l0.53,-0.51l-0.51,-0.75l-0.56,-0.08l0.37,-2.38l0.38,0.12l0.51,-0.34l0.04,-0.32l-0.17,-0.47l-0.62,-0.16l-0.15,-3.39l0.75,-1.81l0.2,-2.41l-0.14,-0.37l0.45,-0.77l0.21,-0.96l-0.03,-1.8l0.24,-0.5l-0.05,-1.09l-0.28,-0.41l0.86,-1.11l-0.12,-0.62l-0.48,-0.25l-0.12,-0.48l1.07,0.3l0.63,-0.76l-0.57,-0.6l0.04,-0.55l-0.49,-0.45l-0.45,-0.09l0.22,-0.96l1.06,-1.03l-0.03,-0.46l-1.03,-0.11l-0.61,-0.99l0.33,-0.81l0.06,-1.22l-0.37,-1.24l0.7,-0.71l0.21,-1.23l-0.32,-1.76l-0.54,-1.13l1.13,0.83l0.64,0.01l0.12,0.81l0.67,0.32l0.56,-1.04l-0.47,-0.77l0.17,-0.11l0.4,0.45l0.73,0.12l1.5,-0.29l0.27,-0.4l1.35,-0.46l1.51,1.59l2.63,0.27l1.06,-0.82l0.82,-0.14l1.12,0.67l0.99,0.27l1.02,0.73l0.67,1.6l0.61,0.57l0.46,1.75l-0.08,1.14l0.41,0.77l-0.01,1.6l0.62,1.22l0.97,0.56l1.22,0.22l0.84,-0.14l1.68,0.61l1.43,0.06l1.2,0.38l4.77,-1.48l1.78,-1.17l0.87,-0.34l1.24,0.21l2.25,-0.37l4.56,0.39l0.82,0.34l0.44,0.95l0.68,0.4l1.78,-0.6l2.25,0.21l0.97,-0.21l0.8,-0.52l1.87,-0.47l0.62,-0.5l2.38,0.39l0.67,-0.2l1.02,0.1l1.13,-0.48l1.04,0.04l1.59,-1.0l2.97,-0.94l4.19,-0.65l1.41,-1.09l1.45,0.01l2.12,-0.36l3.83,-0.05l0.9,-0.33l0.68,-0.65l32.62,-0.04l0.56,1.54l1.27,1.46l1.28,0.38l1.36,0.92l0.67,0.14l1.27,2.3l0.02,0.83l-0.73,0.86l-0.45,1.27l-1.7,2.39l-0.16,1.31l-0.91,2.48l-1.77,2.43l0.09,1.28l-0.26,1.15l-1.14,1.81l-1.77,1.37l-1.19,2.39l-0.27,1.08l-1.24,1.32l0.06,0.75l-0.27,0.68l-0.04,0.61l0.3,0.76l-0.09,0.74l0.46,0.78l0.67,0.44l0.5,-0.06l0.34,-0.38l0.76,0.57l0.85,-0.18l0.33,0.84l0.82,0.54l-0.22,0.87l-0.62,0.15l-0.27,0.45l0.53,1.49l-0.55,2.34l-0.94,1.44l0.16,0.77l0.05,33.25l-111.6,0.0l-2.03,-1.84l-0.36,-1.92l-0.43,-0.71l-0.4,-1.44l0.24,-1.06l-0.18,-1.39l0.58,-1.8l-0.24,-1.67l-1.32,-1.99l-0.35,-0.06l-0.52,-1.42Z",
            "name": "Oregon"
        },
        "US-KY": {
            "path": "M550.67,243.16l0.47,-1.56l1.03,0.93l0.49,0.15l0.71,-0.23l0.48,-0.62l1.03,-2.31l0.14,-1.08l-0.28,-0.95l0.42,-0.65l0.09,-1.66l-0.91,-1.61l1.44,-2.02l1.01,-0.58l1.26,0.05l5.4,2.57l0.78,0.18l0.79,-0.19l0.56,-0.55l0.36,-0.9l-0.05,-0.75l-1.06,-1.73l-0.11,-0.53l0.32,-1.25l0.39,-0.36l1.01,-0.04l1.21,-0.55l2.8,-0.47l0.64,-0.35l0.28,-1.02l-1.14,-1.81l0.01,-0.48l0.29,-0.5l1.12,-0.93l0.28,-0.91l1.05,0.47l0.43,-0.17l0.75,-0.8l0.08,-0.44l-0.45,-1.26l0.86,0.7l0.74,0.24l1.6,-0.48l-0.1,0.88l0.19,0.29l0.7,0.25l1.02,-0.67l0.23,-1.03l0.98,0.01l1.22,-0.46l3.77,1.71l0.48,0.82l0.77,0.24l0.62,-0.44l0.96,-1.95l1.31,-0.28l1.42,-0.93l0.62,1.13l0.65,0.43l0.98,0.04l0.07,0.6l0.84,0.27l0.71,-0.46l0.15,-0.77l0.99,-0.39l0.17,-1.92l0.8,-0.21l0.4,-0.47l0.05,-0.5l1.16,-0.32l0.42,-0.54l0.11,1.21l0.49,0.58l1.24,0.69l1.12,0.15l0.89,0.79l0.51,-0.03l0.32,-0.41l1.04,-0.23l0.59,-0.52l0.31,-0.8l0.21,-2.03l1.06,-1.64l0.88,0.29l1.58,-0.78l0.5,-0.85l0.35,-1.5l0.31,-0.36l1.0,-0.17l1.83,-1.61l0.12,-0.76l-0.66,-2.39l2.59,-0.11l0.7,0.64l0.58,0.22l0.75,-0.17l3.17,-1.62l2.1,-0.08l0.2,-0.49l-0.17,-0.48l0.54,-1.14l-0.27,-0.41l-0.98,-0.16l0.45,-0.45l0.19,-0.6l-0.76,-1.34l1.75,-1.24l1.48,1.2l0.85,0.03l1.3,-0.54l0.61,-0.03l0.58,0.82l1.51,0.66l0.31,1.1l0.72,0.88l0.18,1.16l0.28,0.48l2.26,0.9l1.79,-0.2l1.44,0.44l1.69,1.8l0.81,0.48l1.18,0.04l0.5,-0.38l0.29,-0.61l0.96,-0.29l1.14,0.59l1.21,0.22l1.03,1.08l1.25,-0.38l1.31,0.09l0.46,-0.22l0.47,-0.77l1.12,-0.81l1.71,-0.58l0.44,1.99l0.5,0.8l2.1,1.03l1.05,0.98l0.48,0.93l-0.06,0.82l0.39,0.94l-0.06,0.98l-0.4,0.34l-0.03,0.58l-0.49,0.42l-0.08,0.49l1.59,2.5l1.05,0.93l-0.24,0.58l0.1,0.28l0.87,0.68l0.33,1.24l1.23,1.28l0.52,1.37l1.05,0.51l0.48,0.56l0.34,0.03l0.78,1.06l1.68,0.53l-5.18,4.03l-5.19,2.57l-0.54,0.68l0.01,0.98l-1.52,0.71l-0.64,0.54l-0.21,1.3l-1.98,0.72l-0.98,0.13l-0.48,0.48l-0.66,1.31l-1.55,0.23l-2.67,1.08l-1.54,0.15l-1.52,0.49l-1.85,0.97l-21.62,-0.7l-11.62,-0.07l-9.98,-0.63l-20.59,0.35l-0.52,-0.51l-3.24,-0.3l-0.36,0.16l-0.11,0.36l0.53,2.01l-0.0,0.89l-20.62,-0.01ZM548.17,243.14l0.02,-0.31l0.36,0.03l0.07,0.27l-0.46,0.01Z",
            "name": "Kentucky"
        },
        "US-CO": {
            "path": "M352.94,180.17l0.18,54.04l-108.39,0.0l0.0,-72.09l108.2,0.0l0.01,18.05Z",
            "name": "Colorado"
        },
        "US-OH": {
            "path": "M642.66,148.39l0.3,0.29l1.21,0.34l1.04,-0.1l1.4,1.11l1.98,0.56l1.19,1.2l1.15,0.38l-0.51,0.35l-1.33,0.25l-0.22,0.44l0.38,0.32l0.79,0.03l0.24,0.25l0.58,-0.03l0.67,0.28l1.5,-0.71l1.12,0.18l0.6,-0.12l1.36,0.69l0.46,-0.07l1.22,0.7l0.87,0.07l1.61,-0.84l1.74,-0.22l1.25,-0.62l1.98,-0.5l2.47,0.39l0.72,-0.05l0.42,-0.29l0.65,0.24l0.52,-0.09l1.15,-0.49l5.01,-3.84l4.93,-2.13l1.03,-0.17l1.14,-0.41l0.34,-0.33l4.86,-1.53l0.0,24.03l-0.56,0.35l-1.26,0.13l-0.58,0.73l0.1,0.61l1.0,1.57l-0.39,1.69l0.32,0.32l0.11,0.77l-0.17,0.6l-0.57,0.47l-0.43,0.88l-0.91,2.57l-0.09,1.48l-0.36,1.05l-0.58,0.29l0.09,0.96l-0.62,1.32l-0.46,0.38l-0.06,0.4l0.51,0.78l-0.39,0.54l-0.18,0.88l-2.68,1.74l-1.1,1.38l-0.63,0.24l-0.89,0.76l-1.26,0.34l-0.68,0.47l-0.63,-0.88l-1.11,-0.08l-1.52,1.2l-0.33,1.05l-1.5,0.2l-1.26,1.65l-0.15,1.6l-1.01,0.58l0.17,0.65l0.49,0.44l-0.03,0.93l-0.68,0.06l-0.38,0.83l-0.35,0.39l0.25,-0.69l-0.63,-1.21l-1.3,-0.69l-0.6,0.06l-0.57,0.42l-1.03,1.43l-0.76,2.1l-0.64,0.63l0.49,3.06l-0.89,0.01l-0.52,0.25l-0.73,2.44l-0.24,0.21l-1.21,0.1l-1.27,0.42l-0.9,-0.1l-0.5,-0.96l-1.19,-1.13l-2.0,-0.94l-0.72,-1.68l-0.1,-0.96l-0.64,-0.44l-2.27,0.74l-1.2,0.88l-0.53,0.79l-1.32,-0.08l-0.88,0.37l-0.84,-0.97l-1.34,-0.29l-0.65,-0.46l-0.77,-0.17l-1.36,0.39l-0.68,0.94l-0.65,-0.06l-2.41,-2.26l-1.71,-0.5l-1.7,0.21l-1.85,-0.71l-0.27,-1.36l-0.71,-0.88l-0.44,-1.3l-1.68,-0.82l-0.4,-0.66l-0.49,-0.31l-0.92,0.08l-1.33,0.55l-0.43,-0.04l-1.46,-1.24l-0.59,0.09l-0.62,0.48l0.42,-46.93l20.03,-0.68ZM652.53,151.94l0.37,-0.44l0.34,0.38l-0.29,0.17l-0.42,-0.1Z",
            "name": "Ohio"
        },
        "US-OK": {
            "path": "M385.72,277.2l-0.05,-33.66l-0.39,-0.4l-46.32,-0.01l-0.01,-8.14l129.83,0.0l-0.0,8.6l2.79,19.76l-0.69,30.12l-0.96,-0.22l-0.24,-0.3l-1.81,-0.27l-0.89,-0.75l-1.58,-0.31l-1.43,-1.7l-1.06,-0.23l-1.87,-1.33l-1.3,-0.38l-0.73,0.34l-0.26,0.71l-0.67,0.13l-0.45,0.48l-2.11,-0.2l-0.34,-0.17l-0.23,-0.54l-0.89,-0.53l-2.06,0.94l-1.03,0.14l-0.21,0.41l-0.52,0.21l-1.34,-0.67l-0.46,-0.01l-1.5,0.88l-1.01,0.03l-0.8,0.32l-0.75,1.05l-1.28,0.0l-0.39,0.34l-0.14,0.62l-1.01,-1.24l-1.46,-0.15l-0.36,-0.51l-0.95,-0.34l0.04,-0.72l-0.4,-0.45l-1.09,-0.17l-0.69,1.08l-0.54,0.06l-0.72,-0.42l-0.83,0.04l-0.55,-1.21l-0.97,-0.32l-1.05,0.44l-0.11,0.8l-0.32,0.53l-0.57,-0.09l-0.5,0.42l0.17,0.55l-0.41,1.29l-0.33,0.11l-0.43,-0.42l-0.22,-0.67l0.34,-0.64l0.04,-0.68l-0.66,-0.75l-0.74,0.13l-0.43,0.57l-0.73,-0.14l-0.82,0.75l-0.91,0.07l-0.42,-1.09l-0.71,-0.23l-0.98,0.05l-0.22,-1.16l-1.07,-0.48l-0.73,0.26l-1.88,1.67l-1.03,0.37l-0.77,-0.28l0.16,-1.4l-0.23,-0.51l-1.98,-0.57l-0.02,-1.67l-0.4,-0.52l-1.86,0.27l-2.19,-0.23l-0.58,0.21l-0.72,0.94l-0.79,0.03l-1.51,-1.43l-0.85,-0.11l-1.3,0.42l-2.31,-0.53l-1.61,-0.82l-0.92,0.19l-2.12,-0.26l-0.12,-1.67l-0.73,-0.7l-0.37,-0.81l-1.03,-0.36l-0.61,-0.66l-0.77,0.08l-0.36,1.29l-1.92,-0.55l-0.94,0.47l-0.83,-0.07l-3.28,-3.02l-0.99,-0.35l-0.65,0.06Z",
            "name": "Oklahoma"
        },
        "US-WV": {
            "path": "M656.31,213.62l0.4,-0.35l0.14,-0.64l0.45,-0.47l0.05,-1.36l-0.36,-1.19l0.93,-0.01l2.86,-0.65l0.47,-0.55l0.57,-2.19l1.06,0.01l0.48,-0.44l-0.07,-2.17l-0.35,-1.04l0.55,-0.45l0.8,-2.18l0.89,-1.22l0.48,-0.24l1.01,0.62l0.21,0.56l-0.29,0.97l0.58,0.5l0.79,-0.24l0.69,-1.05l0.4,0.24l0.55,-0.07l0.3,-0.4l-0.24,-0.83l0.04,-0.98l-0.52,-0.52l0.8,-0.49l0.08,-1.46l1.02,-1.47l1.59,-0.16l0.44,-1.27l1.17,-0.97l0.4,0.0l0.46,0.74l0.58,0.27l2.37,-0.92l0.94,-0.79l0.73,-0.31l1.05,-1.35l2.94,-2.05l0.61,-1.65l-0.43,-0.94l1.03,-1.77l-0.04,-0.61l0.59,-0.4l0.41,-2.86l1.17,-3.1l0.64,-0.56l0.3,-0.96l-0.12,-1.06l-0.3,-0.37l0.32,-0.78l0.02,-0.84l-1.08,-1.8l0.48,-0.3l0.81,0.06l0.32,-0.21l0.01,16.39l0.4,0.4l15.83,-0.0l-0.16,8.96l0.41,0.46l0.64,-0.24l1.72,-1.41l1.0,-0.29l0.51,-0.76l1.89,-1.32l0.43,-0.79l0.56,-0.23l0.99,0.58l0.73,-0.13l1.74,-1.86l0.64,-0.26l0.11,-0.65l0.33,0.54l1.5,0.73l1.32,0.21l0.66,-0.21l1.04,0.13l0.91,-0.58l0.43,-1.15l0.72,-0.24l1.18,0.03l1.29,-1.17l0.64,0.04l1.82,1.48l0.73,0.34l1.79,-0.23l-0.37,0.15l-0.27,0.56l0.3,0.84l1.06,0.62l-0.11,0.79l0.9,0.51l-0.17,0.97l0.2,0.41l-1.27,2.74l-7.19,-5.3l-0.63,0.07l-0.55,0.91l0.01,1.35l-0.82,1.23l-0.09,1.88l-1.73,1.68l-0.75,1.34l-0.76,0.29l-0.6,0.81l-0.29,0.12l-0.51,-0.3l-0.42,0.21l-1.78,2.4l-1.5,-0.96l-0.64,0.09l-1.35,1.94l-0.3,1.33l-0.88,0.79l-0.64,1.84l-1.22,1.58l-2.8,-0.85l-0.99,-1.67l-1.49,-0.5l-0.55,0.27l-0.28,1.13l-0.38,0.59l-0.08,1.07l-0.56,1.09l-0.52,0.27l-0.49,0.79l0.01,0.8l-1.87,1.66l-0.45,1.69l-0.84,1.5l-3.19,3.33l-1.27,2.41l-0.01,0.74l0.85,0.58l-1.17,0.87l-0.07,0.56l0.24,0.37l-2.14,1.23l-0.4,-0.62l-0.77,-0.02l-3.23,1.5l-0.81,-0.61l-1.22,-0.01l-0.58,0.69l0.2,0.98l-0.94,0.55l-0.64,-0.16l-2.19,0.43l-1.24,0.57l-1.69,-1.42l-0.65,-0.12l-0.46,0.27l-0.55,0.87l-1.06,0.22l-0.99,0.92l-0.34,0.06l-0.97,-0.1l-0.93,-0.51l-0.64,-0.67l-1.15,-0.21l-0.41,-0.68l-0.96,-0.67l-0.01,-1.04l-0.63,-0.6l0.38,-0.58l-0.17,-0.64l-0.71,-0.45l-0.79,0.07l-1.16,-0.34l-0.26,-0.56l-0.65,-0.58l-1.69,-0.93l-0.47,-1.3l-1.18,-1.19l-0.38,-1.31l-0.75,-0.6l0.17,-0.4l-0.15,-0.53l-1.08,-0.97l-1.42,-2.12Z",
            "name": "West Virginia"
        },
        "US-WY": {
            "path": "M213.5,86.55l108.19,-0.0l0.05,74.77l-108.23,0.0l-0.01,-74.77Z",
            "name": "Wyoming"
        },
        "US-UT": {
            "path": "M172.31,143.49l40.4,0.0l0.0,18.22l0.4,0.4l30.82,0.0l-0.0,72.09l-77.02,-0.06l-0.04,-90.66l5.43,0.0ZM182.46,151.58l-0.28,0.07l-0.18,0.62l1.17,2.91l-0.72,0.27l-0.34,0.74l0.04,0.51l0.39,0.31l0.78,0.07l0.31,-0.37l-0.04,-0.4l0.29,-0.17l1.02,0.85l0.34,0.71l0.63,0.55l-0.1,0.9l0.33,1.15l-0.27,0.71l0.41,0.4l0.06,0.48l1.69,1.35l0.12,0.49l0.63,0.48l0.68,1.0l0.65,-0.17l0.56,-1.54l0.33,0.94l0.01,0.91l0.62,0.75l0.06,1.17l0.24,0.33l0.98,0.29l1.47,-0.74l2.13,-1.75l0.19,-1.07l0.76,-0.48l0.69,-0.13l1.57,-1.04l0.06,-0.46l-0.63,-0.83l-0.75,-0.64l-1.36,-0.44l-0.55,-1.17l-0.61,-0.46l-0.25,-0.81l-0.83,-0.75l-0.06,-0.4l-0.4,-0.34l-0.44,0.0l0.64,-0.74l1.31,0.36l0.49,-0.25l0.75,-0.02l0.83,-1.0l-0.25,-0.83l-0.34,-0.22l-1.38,-0.02l-0.53,0.41l-0.56,0.1l-0.52,-0.08l0.11,-0.64l-0.76,-0.65l-0.59,0.1l-0.48,-0.19l-0.7,0.21l-0.33,0.99l0.36,0.69l-0.24,0.55l0.82,1.94l-0.8,0.36l-0.36,-0.28l-0.15,-0.65l0.13,-0.87l-0.49,-0.58l-0.29,-1.45l-0.73,-0.43l-0.58,-0.06l-0.36,0.25l-0.34,-0.14l-1.21,-1.17l-0.24,-0.48l0.51,-0.5l0.18,-1.16l-0.99,-1.14l-1.19,-0.09l-0.83,0.79l-2.57,0.48l-0.28,0.64l0.25,0.45l0.43,0.2l-0.16,0.29ZM194.95,161.59l0.4,0.69l-0.05,0.66l-0.45,-0.68l0.11,-0.67Z",
            "name": "Utah"
        },
        "US-IN": {
            "path": "M571.97,219.66l0.08,-0.22l-0.43,-0.53l0.47,-0.45l-0.14,-0.95l0.22,-0.44l0.01,-1.14l0.89,-0.52l0.0,-0.61l-0.25,-0.2l0.56,-0.2l0.32,-0.5l-0.07,-0.45l-0.83,-0.86l0.54,-0.86l0.26,0.17l0.6,-0.29l0.73,-0.02l0.52,-1.43l0.55,-0.27l0.52,-0.71l0.07,-0.67l1.49,-0.72l0.15,-0.61l-0.28,-0.75l0.62,-0.64l0.27,-1.02l0.87,-0.34l0.6,-1.53l-0.68,-2.23l0.3,-0.6l-0.02,-0.99l-0.75,-0.85l-0.38,-1.29l-0.86,-0.74l0.03,-0.4l1.02,-1.08l0.01,-0.78l-0.33,-1.08l1.05,-0.55l0.3,-0.45l0.18,-42.67l0.65,0.27l0.59,0.61l1.97,0.36l1.49,-0.15l2.68,-0.86l2.88,-1.45l31.4,0.02l-0.42,48.46l-0.77,0.91l0.16,0.85l0.6,0.67l-0.74,0.79l0.01,0.5l0.59,0.44l0.67,0.06l-0.32,0.43l-0.06,0.75l-1.62,0.0l-3.69,1.75l-1.16,-0.84l-2.84,0.11l-0.44,0.19l-0.22,0.69l0.66,2.63l-1.51,1.33l-1.15,0.26l-0.55,0.7l-0.62,2.04l-1.11,0.57l-0.93,-0.32l-0.5,0.33l-1.2,1.91l-0.42,2.63l-1.64,0.75l-0.75,-0.65l-1.12,-0.14l-1.08,-0.6l-0.22,-0.24l0.04,-0.89l-0.21,-0.46l-0.98,-0.73l-0.74,-0.19l-0.44,0.2l-0.12,0.52l0.53,0.59l-0.44,0.12l-0.77,-0.39l-0.38,0.23l-0.1,0.46l0.37,0.74l-1.04,0.41l-0.22,0.62l0.02,1.33l-1.04,0.42l-0.11,0.62l-0.26,-0.55l-1.47,-0.03l-0.61,-0.64l-0.43,-0.87l-0.45,-0.13l-1.7,1.02l-1.51,0.39l-1.32,2.22l-0.6,-0.96l-2.42,-0.93l-0.93,-0.61l-0.95,-0.26l-1.7,0.56l-0.3,-0.27l-0.13,-0.61l-0.52,-0.23l-0.58,0.44l0.01,0.78l0.34,0.81l-0.37,0.58l-0.23,0.06l0.12,-0.91l-0.37,-0.43l-0.53,-0.05l-1.42,0.49l-1.69,-0.96l-0.53,0.19l-0.3,0.62l0.44,1.34l-0.48,0.49l-0.95,-0.43ZM593.79,218.58l-0.06,0.21l-0.07,0.04l0.12,-0.25Z",
            "name": "Indiana"
        },
        "US-IL": {
            "path": "M518.86,173.55l0.84,-0.23l0.44,-0.61l-0.02,-1.95l-0.59,-0.85l0.14,-0.27l0.71,-0.5l2.36,-0.64l0.74,-0.5l0.76,-1.37l0.34,-1.73l1.77,-1.93l0.35,-0.79l0.09,-1.07l-0.38,-1.7l-0.59,-0.76l-1.35,-0.99l0.05,-1.44l0.83,-1.91l0.45,-0.28l4.46,-0.34l0.81,-0.28l0.89,-0.87l2.52,-0.62l1.52,-1.2l0.23,-0.61l-0.05,-0.76l0.53,-1.36l1.49,-1.09l0.38,-0.64l0.75,-3.66l-0.53,-1.96l-3.62,-2.44l-0.11,-1.24l-0.4,-0.79l-3.19,-2.29l43.47,0.37l-0.33,2.19l0.24,2.28l1.02,2.27l1.12,0.93l0.39,2.24l0.87,2.45l1.11,1.7l-0.18,43.34l-1.25,0.81l-0.18,0.62l0.42,0.95l-0.01,0.5l-0.87,0.78l-0.19,0.97l0.24,0.5l0.74,0.59l0.33,1.19l0.72,0.76l-0.31,1.47l0.68,1.97l-0.41,1.12l-0.55,0.11l-0.62,0.68l-0.13,0.85l-0.68,0.9l0.18,0.73l-1.4,0.73l-0.29,0.38l0.18,0.56l-0.35,0.49l-0.62,0.35l-0.42,0.92l-0.33,-0.07l-0.44,0.4l-0.26,-0.18l-0.54,0.24l-0.78,1.32l0.06,0.75l0.67,0.71l-1.16,0.74l0.07,0.7l-0.24,0.1l-0.2,0.54l0.02,2.3l-0.63,-0.11l-0.42,0.2l0.04,0.46l0.58,0.59l-0.29,0.1l-0.11,0.64l0.69,0.33l-0.0,0.26l-1.39,1.42l-0.37,0.97l0.4,1.12l0.56,0.6l0.2,0.8l-3.08,0.64l-1.16,0.54l-1.15,0.07l-0.83,0.77l-0.39,1.69l0.18,0.77l1.03,1.67l-0.25,0.96l-0.31,0.29l-0.86,-0.07l-5.39,-2.57l-0.96,-0.17l-0.83,0.11l-1.28,0.73l-1.66,2.32l-0.04,0.48l-0.33,-0.2l-0.2,-0.66l-0.36,-0.19l-1.01,0.23l-0.13,0.53l0.21,0.46l-0.72,-0.58l0.04,-0.56l-1.21,-1.93l-0.27,-0.96l-0.61,-0.36l0.0,-0.3l0.97,-1.0l0.29,-0.88l-0.2,-0.88l-1.08,-1.75l0.11,-1.25l-0.24,-1.4l-1.94,-1.01l-1.19,-1.87l-1.68,-0.83l-1.43,-1.24l-1.41,-0.25l-1.56,-0.94l-1.13,-1.14l-0.8,-0.49l-1.9,-2.16l-0.15,-1.56l2.8,-5.38l-0.0,-1.91l1.09,-1.61l-0.28,-0.8l-2.33,-1.44l-1.48,-0.34l-0.85,-0.43l-1.24,0.28l-0.92,1.11l-0.44,0.19l-0.4,-0.14l-0.99,-1.61l-0.26,-1.28l0.21,-0.73l-0.41,-0.79l-0.12,-1.38l-0.66,-1.21l-0.8,-0.83l-3.58,-2.4l-0.78,-1.43l-3.91,-3.26l-0.51,-1.62l-0.86,-1.07l0.1,-1.31l-0.78,-1.3l-0.4,-2.98l0.34,-2.4l0.65,-0.98Z",
            "name": "Illinois"
        },
        "US-AK": {
            "path": "M78.48,405.02l0.26,-0.21l0.65,-0.01l0.35,-0.11l0.11,-0.08l0.15,-0.28l-0.02,-0.19l0.16,-0.1l-0.05,-0.14l0.12,-0.08l0.36,0.19l0.27,0.01l0.41,-0.12l0.32,-0.2l0.27,-0.1l0.21,-0.18l0.05,-0.13l0.12,-0.04l0.05,-0.19l0.25,-0.26l0.57,-0.29l0.33,-0.09l0.46,-0.23l0.15,0.01l-0.01,0.08l0.42,0.22l1.18,0.12l1.04,-0.29l0.2,-0.63l-0.26,-0.23l-0.63,-0.24l0.75,-0.35l0.39,-0.09l0.21,-0.1l0.4,-0.03l0.15,0.15l0.17,0.08l0.37,-0.21l0.02,0.03l0.18,-0.07l0.19,-0.22l0.61,-0.33l0.12,-0.14l0.49,-0.11l0.83,-0.11l0.85,-0.05l0.28,0.21l0.11,0.02l-0.22,0.23l-0.04,0.11l-0.1,0.5l0.05,0.32l-0.58,0.14l-0.39,0.19l-0.05,0.09l0.34,0.61l0.75,0.02l0.32,0.37l0.34,0.19l0.41,0.08l1.0,-0.1l0.3,0.11l0.57,0.03l0.38,-0.06l0.31,-0.12l0.43,-0.0l0.04,0.25l0.21,0.25l0.46,-0.04l0.12,-0.15l0.25,-0.06l0.25,0.11l0.37,0.01l0.5,-0.2l0.54,0.11l0.08,0.22l0.07,0.01l0.01,0.11l0.37,0.1l0.43,-0.09l0.24,-0.37l-0.06,-0.12l0.11,-0.07l0.17,-0.27l-0.01,-0.07l0.5,-0.74l0.1,0.0l0.36,0.26l0.3,0.05l-0.14,0.17l0.23,0.36l0.38,0.07l0.38,-0.14l0.33,-0.48l0.09,-0.36l-0.01,-0.3l-0.06,-0.12l-0.39,-0.47l0.69,0.38l0.28,0.04l0.53,-0.01l0.55,-0.12l0.67,-0.05l0.29,-0.14l0.13,-0.18l0.07,-0.25l-0.01,-0.58l-0.06,-0.22l-0.27,-0.35l0.02,-0.47l-0.11,-0.05l-0.31,-0.04l-0.34,0.13l-0.28,-0.0l-0.21,0.08l-0.16,0.15l-0.16,-0.05l-0.36,-0.26l-0.37,-0.12l-0.99,0.11l-0.26,0.07l-0.15,0.1l-0.34,0.51l-0.08,-0.0l-0.29,-0.03l-0.12,-0.08l-0.13,-0.25l-0.22,-0.05l-0.58,-0.41l0.02,-0.2l0.17,-0.2l0.07,-0.3l0.2,-0.18l0.43,0.01l0.29,-0.16l0.05,-0.54l-0.3,-0.26l-0.19,-0.03l-0.32,-0.17l-0.24,-0.02l-0.19,-0.11l-0.27,-0.05l-0.54,0.03l-0.58,0.13l-0.21,-0.19l-0.01,-0.28l-0.17,-0.23l-0.36,-0.12l-0.38,0.09l-0.21,0.45l0.05,0.04l-0.28,0.31l-0.06,-0.0l-0.04,-0.1l-0.35,-0.1l-0.62,0.01l-0.25,0.04l-0.06,0.07l-0.41,-0.17l-1.83,-0.26l-0.06,-0.66l-0.18,-0.62l-0.51,-0.9l-0.34,-0.44l-0.37,-0.33l-1.07,-0.58l-0.9,-0.7l-0.24,-0.1l-0.32,-0.05l-1.29,-0.86l-0.74,-0.39l-1.7,-0.46l-0.51,-0.54l-0.85,-0.46l0.02,-0.31l0.14,-0.18l0.1,-0.32l0.13,-0.14l0.11,-0.23l-0.0,-0.27l0.1,-0.46l0.05,-0.57l-0.03,-0.28l0.3,0.08l0.63,-0.04l0.58,0.11l2.14,-0.12l0.92,-0.2l1.62,-0.11l0.68,-0.18l0.72,-0.3l1.21,-0.72l1.1,-1.09l0.05,0.03l0.25,-0.15l0.3,-0.34l0.2,-0.39l0.02,-0.39l0.15,-0.34l0.04,-0.75l0.12,-0.04l0.22,-0.22l0.06,-0.15l-0.06,-0.4l1.41,-1.04l0.25,-0.46l0.25,-0.24l0.12,-0.21l0.25,-0.18l0.17,-0.08l0.12,0.11l0.89,-0.1l0.33,-0.18l0.15,0.01l0.42,-0.27l-0.02,-0.06l0.04,-0.05l0.95,-0.03l0.46,-0.11l0.47,-0.21l0.19,0.11l0.28,-0.26l0.39,-0.12l0.83,-0.52l0.16,-0.19l0.39,-0.16l0.37,-0.25l0.13,0.3l0.31,0.12l-0.22,0.29l0.27,0.59l0.13,0.02l0.36,-0.11l0.12,0.11l0.4,0.63l0.45,0.15l0.28,-0.38l0.0,-0.19l-0.07,-0.23l-0.17,-0.19l-0.01,-0.41l-0.14,-0.26l0.02,-0.08l0.38,0.01l0.55,-0.2l0.32,0.04l0.5,-0.2l0.22,-0.22l0.0,-0.44l-0.41,-0.17l-0.38,0.08l-0.51,-0.04l-0.44,0.16l-0.16,-0.13l-0.03,-0.15l-0.16,-0.23l0.15,-0.07l0.05,-0.11l0.47,-0.45l0.23,-0.06l0.2,0.27l0.24,0.08l0.35,0.33l0.67,-0.05l0.02,-0.27l0.51,-0.08l0.1,-0.18l0.83,0.1l1.31,-0.17l0.1,-0.12l0.99,-0.02l0.62,-0.19l1.17,-0.59l1.14,-0.76l0.57,-0.59l0.23,-0.31l0.67,-0.61l0.32,-0.2l0.13,0.2l0.31,0.13l0.19,0.19l0.92,0.04l-0.06,0.17l0.43,0.4l0.35,-0.07l0.24,-0.14l0.12,0.06l0.28,-0.07l0.47,0.12l0.02,0.03l-0.4,0.25l-0.1,0.15l-0.21,0.09l-0.69,0.05l-0.2,0.06l0.02,0.05l-0.36,0.26l-0.22,0.42l0.34,0.34l0.23,0.01l0.0,0.06l0.13,0.04l0.02,0.53l0.49,0.39l0.35,-0.12l0.17,-0.19l0.02,-0.14l0.23,-0.06l0.54,-0.01l0.29,-0.14l0.23,-0.32l0.02,-0.32l0.3,-0.27l0.07,-0.02l0.17,0.11l0.29,0.02l0.23,-0.15l0.32,0.01l0.29,-0.19l0.13,-0.36l0.13,0.0l0.42,0.31l-0.06,0.17l-0.18,0.04l-0.31,0.25l0.36,0.64l0.21,-0.02l0.26,0.31l0.14,0.04l0.31,0.01l0.4,-0.08l0.24,0.03l0.04,0.16l0.17,0.14l0.15,0.05l0.2,0.01l0.37,-0.12l0.67,-0.49l0.11,-0.15l1.18,0.07l0.65,-0.11l0.28,-0.18l0.16,0.02l0.35,0.17l0.29,-0.03l0.25,0.24l0.23,0.08l0.21,-0.01l0.08,0.1l0.32,0.15l0.36,-0.14l0.14,-0.16l0.02,-0.13l0.44,0.11l-0.26,0.27l-0.28,0.18l-0.12,0.34l0.05,0.24l-0.2,0.11l-0.18,0.2l0.17,0.6l0.5,0.12l0.34,-0.07l1.32,-0.08l-0.09,0.14l0.3,0.61l0.89,0.08l0.89,-0.02l0.29,0.07l0.48,0.3l0.34,-0.01l0.34,-0.39l-0.0,-0.06l0.32,-0.02l0.55,-0.13l0.31,0.01l0.07,-0.03l0.01,-0.16l0.23,-0.02l0.37,0.12l-0.01,0.08l0.43,0.4l0.61,-0.17l0.4,-0.0l0.19,-0.05l0.64,-0.35l0.28,0.07l0.33,-0.09l0.59,-0.02l0.09,0.1l0.37,0.06l0.33,-0.09l0.76,0.19l0.16,0.17l0.21,0.1l0.24,-0.04l0.32,0.12l0.32,-0.03l0.39,0.16l0.33,0.48l0.58,0.03l0.29,-0.11l0.21,-0.17l0.09,0.01l0.2,0.18l0.18,0.08l0.19,0.01l0.09,0.06l0.36,-0.04l0.07,0.39l0.55,0.2l0.97,0.07l1.09,0.22l0.84,-0.05l0.13,-0.11l1.38,0.07l0.66,-0.02l0.57,0.19l0.78,-0.01l0.71,0.39l0.04,-0.1l0.11,0.24l0.21,-0.05l0.26,0.16l0.43,0.13l0.02,0.16l0.31,0.07l0.35,-0.05l0.67,0.14l0.34,-0.08l0.61,0.09l0.53,-0.08l0.33,-0.25l0.28,-0.1l0.67,-0.0l0.2,0.31l0.45,-0.11l0.2,-0.37l0.17,-0.1l0.19,-0.0l0.24,-0.09l0.3,0.07l0.83,-0.07l0.15,0.22l0.53,0.07l0.07,-0.05l0.05,-0.24l0.15,0.07l0.27,0.0l0.11,0.09l0.21,0.06l0.32,-0.06l0.69,0.3l0.15,0.28l0.28,0.05l0.29,0.12l0.13,0.24l0.43,0.31l0.64,0.09l0.16,0.24l0.19,0.09l0.27,0.02l0.17,-0.07l0.73,0.23l0.43,0.26l0.26,0.33l0.23,0.13l0.42,0.1l0.34,-0.07l0.17,-0.16l0.17,0.04l0.02,52.47l0.29,0.38l1.69,0.5l0.46,-0.19l0.07,-0.12l1.32,0.53l0.4,-0.06l0.92,-0.72l1.52,-0.07l-0.3,0.83l0.08,0.41l0.47,0.51l-0.17,-0.01l-0.51,-0.56l-0.28,-0.14l-0.17,-0.18l-0.37,-0.05l-0.07,0.03l-0.15,0.19l-0.03,-0.02l-0.23,0.37l-0.33,0.22l-0.41,0.44l-1.31,0.53l-0.16,0.03l-0.94,-0.03l-0.77,-0.17l-0.48,-0.22l-0.75,-0.24l0.08,-0.18l0.03,-0.3l-0.06,-0.32l-0.12,-0.21l0.03,-0.06l-0.23,-0.22l-0.21,-0.08l-0.26,-0.24l-0.45,0.12l-0.23,0.31l0.06,0.37l-0.38,0.13l-0.97,-0.34l-1.76,-0.25l-0.56,-0.14l-0.55,-0.05l-1.47,0.23l-1.49,0.1l-0.92,0.25l-0.14,-0.23l-0.46,-0.33l-0.0,-0.19l-0.14,-0.23l-0.3,-0.11l-0.2,0.08l-0.36,-0.05l-0.15,0.05l-0.42,-0.11l-0.1,0.04l-0.31,-0.32l-0.39,-0.18l0.15,-0.15l0.13,-0.39l-0.04,-0.23l-0.09,-0.02l0.05,-0.18l0.11,-0.12l0.31,-0.08l0.16,-0.14l0.09,-0.16l0.02,-0.34l-0.19,-0.29l-0.39,-0.04l-0.46,0.16l-0.27,0.31l-0.27,0.2l-0.1,0.21l-0.42,0.22l-0.29,0.44l-0.19,0.11l-0.2,0.2l-0.17,-0.02l-0.16,-0.1l-0.22,-0.24l-0.57,-0.2l0.35,-0.45l0.0,-0.43l-0.48,-0.25l-0.4,0.18l-0.05,-0.1l-0.11,-0.01l-0.15,-0.17l-0.17,-0.05l-0.11,-0.32l-0.26,-0.17l-0.06,-0.16l-0.45,-0.27l-0.34,-0.04l-0.11,0.04l-0.34,0.32l-0.12,-0.12l-0.2,0.07l-0.11,-0.05l-0.06,-0.09l-0.01,-0.27l0.24,-0.09l0.02,-0.05l0.61,0.02l0.33,-0.1l0.14,-0.65l-0.29,-0.26l-0.33,-0.09l-1.02,0.02l-0.19,0.09l-0.25,0.24l-0.4,0.24l-0.22,0.2l-0.15,-0.1l-0.43,-0.05l-0.34,0.16l-0.15,-0.14l-0.32,0.21l-0.08,-0.07l-0.1,0.02l0.04,-0.19l-0.14,-0.26l-0.1,-0.06l-0.06,-0.33l-0.22,-0.08l-0.26,0.03l-0.2,-0.59l-0.39,-0.07l-0.24,0.14l-0.27,0.38l-0.25,0.2l-0.23,0.28l-0.45,-0.14l-0.99,0.34l-0.0,0.23l-0.34,0.44l0.34,0.43l-0.5,0.07l-0.49,0.23l-0.22,0.39l0.16,0.2l-0.16,0.38l0.37,0.4l0.24,0.0l-0.34,0.27l-0.19,0.31l-0.02,0.08l0.19,0.44l0.43,0.05l0.56,-0.39l0.13,0.04l0.07,0.18l0.16,0.03l-0.05,0.24l-0.38,0.2l-0.08,0.19l0.02,0.15l-0.15,0.18l0.24,0.38l-0.05,0.26l-0.12,-0.04l-0.26,0.31l-0.08,0.01l-0.0,0.06l-0.04,-0.02l-0.03,0.05l-0.33,-0.06l-0.38,0.07l-0.23,-0.13l-0.18,-0.01l-0.12,-0.38l-0.42,-0.05l-0.24,0.09l-0.18,0.14l-0.05,-0.22l-0.21,-0.26l-0.31,-0.09l-0.24,0.06l-0.26,0.31l-0.05,0.32l0.04,0.32l-0.15,0.06l-0.07,-0.08l-0.31,-0.15l-0.42,0.16l-0.13,0.4l-0.28,0.11l0.02,0.27l-0.32,-0.09l-0.36,0.17l-0.09,0.23l0.04,0.18l-0.19,0.05l-0.21,-0.18l-0.1,0.03l-0.27,0.2l-0.34,0.53l-0.11,-0.18l-0.13,-0.01l-0.23,0.06l-0.38,0.22l-0.24,0.37l0.16,0.27l-0.37,0.23l-0.04,0.09l-0.35,0.19l-0.15,0.2l-0.13,-0.06l-0.26,0.02l-0.36,-0.11l-0.21,-0.01l-0.19,0.06l-0.07,0.29l-0.33,-0.05l-0.38,0.15l-0.16,0.13l-0.25,0.08l-0.37,-0.16l0.22,-0.12l-0.04,-0.25l0.12,-0.03l0.21,-0.16l0.42,0.03l0.18,0.12l0.25,0.06l0.39,-0.28l-0.0,-0.31l0.12,-0.02l0.2,-0.18l0.1,-0.01l0.33,-0.39l-0.01,-0.08l0.2,-0.32l0.28,-0.21l0.01,-0.63l-0.34,-0.17l-0.45,0.07l-1.31,0.75l-0.63,-0.21l-0.17,-0.11l0.46,-1.1l0.98,-0.93l0.18,-0.37l0.05,-0.39l0.1,-0.04l0.19,-0.25l0.09,-0.9l-0.04,-0.18l-0.15,-0.22l-0.11,-0.31l0.17,-0.13l0.68,-0.1l1.07,-0.74l1.01,-0.53l0.23,0.32l0.36,0.2l0.63,0.11l0.25,-0.04l0.63,-0.28l0.13,0.01l0.38,0.18l0.41,0.02l0.21,0.09l1.13,0.18l0.3,0.16l0.26,-0.01l0.25,-0.58l-0.2,-0.33l-0.18,-0.17l-0.3,-0.16l-0.33,-0.06l-0.37,0.08l-0.46,-0.23l-0.47,-0.07l-0.9,-0.48l0.19,-0.21l0.17,-0.35l0.28,-0.13l0.18,-0.26l1.3,-0.39l0.22,-0.14l0.05,-0.07l-0.18,-0.63l-0.84,-0.09l-0.87,0.17l-0.38,0.19l-0.56,0.47l-0.15,0.25l-0.06,0.32l-0.77,-0.05l-0.18,-0.12l-0.35,0.16l-0.11,-0.01l0.03,-0.1l-0.48,-0.5l-0.08,0.02l-0.24,0.16l-0.15,0.28l-0.17,0.02l-0.13,0.18l-0.44,0.16l-0.28,0.05l-0.37,0.21l-0.18,0.19l-0.27,0.44l-0.53,0.15l-0.22,-0.02l-0.36,0.07l-0.22,0.1l-0.41,0.33l-0.23,0.09l-0.35,0.46l-0.07,0.29l0.03,0.17l-0.22,0.07l-0.31,0.24l-0.15,0.05l-0.13,0.13l-0.14,0.25l-0.44,0.28l-0.33,0.34l-0.16,0.34l0.04,0.38l-0.22,0.31l-0.22,0.08l-0.18,0.13l-0.4,-0.01l-0.06,-0.08l-0.18,-0.05l-0.25,-0.21l-0.11,-0.03l-0.53,0.02l-0.33,0.15l-0.08,0.07l-0.12,0.39l0.4,0.34l0.24,-0.07l0.06,0.12l0.27,0.22l0.39,0.14l0.36,0.31l-0.21,0.23l-0.08,0.21l-0.23,0.08l-0.58,-0.02l-0.71,0.1l-0.31,0.16l-0.19,0.25l-0.01,0.09l-0.39,-0.08l-0.25,0.39l-0.01,0.21l-0.14,-0.12l-0.09,0.01l-0.56,0.46l-0.04,0.07l0.12,0.23l-0.32,-0.04l-0.26,0.12l-0.17,0.43l0.15,0.12l-0.23,0.16l-0.44,0.07l-0.39,0.24l0.08,0.4l-0.09,0.17l-0.04,0.31l-0.33,0.28l0.07,0.14l-0.11,0.17l0.03,0.09l0.17,0.16l0.07,0.36l0.24,0.24l0.34,0.04l0.24,-0.13l0.14,-0.14l0.44,0.08l0.51,-0.03l0.14,0.19l0.32,0.18l0.21,0.05l0.2,-0.02l0.09,0.18l-0.16,0.44l-0.35,0.15l-0.26,0.31l-0.36,0.06l-0.42,-0.01l-0.3,0.2l-0.07,0.27l-0.08,0.04l0.01,0.1l-0.16,0.0l-0.35,0.19l-0.01,0.47l-0.04,0.04l-0.58,0.27l-0.16,0.14l-0.07,0.2l0.01,0.18l-0.12,-0.02l-0.01,0.04l0.12,0.02l-0.0,0.01l-0.46,0.03l-0.09,0.31l-0.15,0.02l-0.12,0.25l-0.29,0.06l-0.22,0.18l-0.55,-0.05l-0.4,0.1l-0.06,0.04l-0.05,0.23l-0.05,0.01l-0.16,0.4l-0.22,-0.02l-0.53,0.29l-0.15,0.34l-0.25,-0.16l-0.34,-0.05l-0.11,0.03l-0.2,0.14l-0.09,0.14l-0.1,0.42l-0.26,0.06l-0.04,0.31l-0.33,0.12l-0.5,-0.09l-0.13,0.17l-0.1,0.03l-0.08,0.27l-0.14,-0.01l-0.37,0.18l-0.04,0.07l-0.31,0.14l-0.37,0.31l-0.3,0.13l-0.19,0.24l-0.03,0.33l0.32,0.36l0.19,0.05l-0.09,0.06l-0.02,0.2l-0.96,0.1l-0.18,0.16l-0.07,0.19l-0.17,-0.03l-0.2,0.35l-0.12,0.01l-0.33,0.29l-0.29,-0.0l-0.07,0.21l-0.2,-0.18l-0.22,-0.11l-0.4,0.03l-0.28,0.25l-0.07,0.29l-0.22,0.23l-0.17,0.03l-0.0,0.14l-0.38,-0.08l-0.63,0.23l-0.17,0.18l-0.52,0.25l-0.24,0.4l-0.23,-0.04l-0.2,0.03l-0.37,0.2l-0.38,0.39l-0.05,0.11l-0.27,0.18l-0.18,0.23l-0.05,0.14l0.1,0.34l-0.06,0.03l-0.1,0.31l-0.04,-0.03l-0.02,0.11l-0.04,-0.01l-0.01,0.05l0.07,0.02l-0.07,0.06l0.07,0.17l-0.08,0.03l-0.2,-0.06l-0.31,0.17l-0.14,0.21l-0.22,0.06l-0.28,-0.01l-0.36,0.16l-0.3,0.07l-0.36,0.07l-0.14,-0.18l-0.07,0.0l-0.32,0.07l-0.19,0.14l-0.03,0.1l-0.74,-0.07l-0.48,0.29l-0.11,-0.03l-0.32,0.14l-0.12,0.22l-0.06,-0.09l0.11,-0.29l-0.05,-0.07l-0.17,-0.14l-0.27,-0.08l-0.51,-0.24l-0.01,-0.04l0.23,-0.33l0.06,-0.32l0.23,-0.42l0.37,-0.25l0.21,-0.25l0.56,-0.28l0.59,-0.47l0.29,-0.15l0.48,-0.18l0.13,0.03l0.31,-0.08l0.63,-0.3l0.24,-0.03l0.31,-0.32l-0.03,-0.07l0.21,-0.08l0.22,0.04l0.13,-0.14l0.38,0.15l0.38,-0.01l0.16,0.09l0.52,-0.47l-0.04,-0.31l-0.12,-0.28l-0.0,-0.45l0.19,-0.29l0.95,-0.99l0.33,-0.18l0.34,-0.02l0.14,-0.21l0.29,-0.24l0.18,-0.25l0.41,-0.22l0.07,0.22l0.26,0.12l0.77,0.02l0.27,-0.09l0.18,-0.14l0.12,-0.27l-0.01,-0.2l-0.14,-0.18l-0.41,-0.31l-0.17,0.05l-0.1,-0.25l-0.25,-0.17l0.23,-0.93l0.09,-0.93l0.39,-0.12l0.17,-0.13l0.31,0.05l0.32,0.15l0.37,-0.63l-0.16,-0.2l-0.22,-0.14l-0.56,-0.17l-0.26,-0.01l-0.16,0.05l-0.04,-0.19l0.27,-0.56l0.26,-0.13l0.38,-0.42l0.5,-0.38l0.47,-0.13l0.29,-0.39l-0.3,-0.28l0.01,-0.24l0.11,-0.18l0.03,-0.16l0.26,-0.12l0.17,-0.24l0.05,-0.49l0.16,-0.2l-0.05,-0.52l-0.52,-0.03l-0.25,0.18l-0.2,0.3l-0.08,0.33l-0.35,0.17l-0.21,0.37l-0.44,0.19l-0.44,0.09l-0.83,0.32l-0.72,0.29l-0.55,0.29l-0.59,0.15l-0.12,-0.05l-0.03,-0.23l-0.21,-0.33l-0.38,-0.21l0.08,-0.27l0.17,-0.25l0.42,0.07l0.1,0.08l0.13,0.36l0.21,0.2l0.05,0.03l0.28,-0.17l0.01,0.08l0.04,-0.01l0.11,-0.13l0.05,0.05l0.03,-0.03l-0.05,-0.05l0.11,-0.05l0.09,-0.18l-0.18,-0.2l0.01,-0.17l-0.11,-0.23l-0.37,-0.39l-1.08,-0.29l-0.33,-0.43l-0.64,0.24l-0.02,0.27l0.16,0.29l-0.14,0.29l-0.44,-0.23l-0.27,0.09l-0.17,0.65l0.07,0.17l-0.26,0.17l-0.05,0.07l0.04,0.07l-0.2,0.31l0.09,0.43l0.41,0.82l0.04,0.23l-0.37,-0.06l-0.01,-0.09l-0.05,0.03l-0.14,-0.16l0.04,-0.03l-0.31,-0.46l-0.71,-0.92l-0.29,-0.29l-0.33,-0.21l-0.04,-0.24l-0.14,-0.22l-0.29,-0.13l-0.48,0.07l-0.37,0.24l0.03,0.18l-0.09,0.14l-0.15,-0.2l-0.14,-0.09l-0.23,-0.06l-0.26,0.03l-0.09,-0.04l-0.03,-0.25l-0.23,-0.31l-0.03,-0.12l-0.34,-0.19l-0.36,0.02l-0.17,0.07l-1.26,0.83l-0.38,0.01l-0.17,0.05l-0.73,0.38l-0.19,0.0l-0.14,-0.1l-0.2,0.07l-0.19,0.21l-0.04,0.25l-0.23,0.35l-0.52,0.22l-0.08,-0.08l0.33,-0.29l-0.02,-0.57l-0.1,-0.1l-0.25,-0.09l0.0,-0.32l0.51,-0.33l0.26,-0.37l-0.12,-0.37l-0.33,-0.2l-0.36,0.0l-0.14,0.09l-0.54,0.01l-0.03,-0.08l0.12,-0.24l0.04,-0.43l0.38,-0.29l0.26,-0.13l0.18,-0.23l-0.04,-0.42l-0.45,-0.58l-0.14,-0.44l-0.41,-0.6l-0.27,-0.31l-0.06,-0.38l-0.35,-0.32l-0.04,-0.1l0.08,-0.19l0.06,-0.47l0.14,-0.13l-0.17,-0.42l-0.26,-0.09l-0.15,0.02l-0.1,0.03l-0.06,0.15l-0.11,-0.1l0.2,-0.32l0.09,-0.29l0.17,-0.12l0.14,-0.23l0.03,-0.24l0.24,-0.17l0.21,0.02l0.37,-0.18l0.13,-0.16l0.02,-0.72l-0.1,-0.05l-0.31,-0.02l-0.28,0.13l-0.19,-0.17l-0.37,-0.08l-0.35,0.27l0.08,0.3l-0.29,0.15l-0.12,0.2l-0.09,0.36l-0.24,0.39l-0.16,0.07l-0.05,0.11l-0.21,0.22l-0.25,0.13l-0.06,0.1l0.05,0.02l-0.16,0.19l-0.32,0.23l0.22,0.46l0.53,0.16l-0.04,0.31l0.06,0.22l-0.13,0.02l-0.24,-0.08l-0.56,0.34l-0.89,0.4l-0.74,0.14l-1.0,0.15l-0.84,0.01l-0.68,-0.16l0.28,-0.4l-0.31,-0.28l0.03,-0.06l-0.05,-0.0l-0.04,-0.15l-0.88,-0.39l-0.37,-0.53l-0.36,-0.21l-0.07,-0.48l-0.52,-0.03l-0.13,0.1l-0.67,-0.22l0.25,-0.32l0.06,-0.29l-0.09,-0.26l-0.18,-0.16l-0.17,-0.05l0.22,-0.16l0.11,-0.16l0.04,-0.33l0.34,-0.27l0.06,0.08l0.28,0.18l0.64,0.03l0.38,0.12l-0.28,0.29l-0.14,0.23l-0.02,0.07l0.05,0.02l-0.06,0.51l0.08,0.07l0.4,0.06l0.08,-0.03l0.51,-0.48l0.39,-0.06l0.2,-0.17l0.14,-0.32l0.18,-0.1l0.02,0.59l0.19,0.29l0.18,0.12l0.23,0.05l0.39,-0.06l0.27,-0.11l0.62,-0.39l0.18,-0.18l0.09,-0.18l-0.0,-0.36l-0.06,-0.12l0.08,-0.15l-0.16,-0.16l-0.3,-0.17l-0.0,-0.4l-0.22,-0.24l-0.28,-0.07l-0.12,-0.35l-0.12,-0.04l-0.29,0.01l-0.21,0.08l-0.12,0.15l-0.19,0.06l-0.24,0.17l-0.15,0.22l-1.2,-0.05l-0.43,0.05l-0.1,-0.18l-0.2,-0.14l-0.46,-0.07l-0.24,0.05l-0.1,-0.07l0.25,-0.11l0.16,-0.66l-0.37,-0.18l-0.31,0.05l-0.41,-0.02l0.02,-0.47l-0.27,-0.21l0.03,-0.16l0.22,-0.09l0.22,-0.27l0.46,-0.06l0.14,-0.17l0.18,-0.08l0.18,-0.18l0.21,-0.73l-0.14,-0.17l-0.21,-0.12l-0.23,-0.03l-0.39,0.28l-0.22,0.31l-0.4,0.1l-0.22,0.14l-0.17,0.21l-0.3,0.16l-0.09,0.22l-0.3,0.26l0.05,0.04l-0.1,0.3l-0.3,0.22l-0.14,0.29l-0.04,-0.25l0.06,-0.19l-0.36,-0.28l-0.5,-0.11l0.25,-0.22l0.09,-0.38l-0.06,-0.23l-0.14,-0.19l-0.31,-0.16l0.32,-0.11l0.0,-0.67l-0.11,-0.04l0.13,-0.07l0.32,-0.01l0.31,-0.14l-0.12,-0.47l0.12,-0.09l-0.12,-0.17l-0.22,-0.16l-0.11,-0.24l0.17,-0.4l0.32,-0.24l0.49,-0.65l0.39,-0.39l0.18,-0.3l0.52,-0.44l0.3,0.0l0.26,0.29l0.23,0.07l-0.08,0.2l0.4,0.29l0.34,-0.09l0.54,-0.41l0.02,-0.37l-0.04,-0.09l-0.18,-0.16l0.02,-0.17l-0.26,-0.15l0.69,-0.64l-0.17,-0.68l-0.37,0.01l-0.38,0.28l-0.24,-0.53l0.32,-0.52l0.27,-0.01l0.18,0.09l0.25,-0.05l0.37,0.09l0.3,-0.11l0.13,-0.47l-0.17,-0.33l-0.2,-0.16l-0.18,-0.07l0.03,-0.03l0.76,-0.21l0.41,0.03l0.81,0.25l0.07,0.16l-0.25,0.11l-0.22,0.26l-0.05,0.2l0.19,0.45l0.48,-0.07l0.1,-0.1l0.38,-0.17l0.29,-0.24l0.29,0.31l0.41,0.04l0.14,-0.07l0.7,-0.06l0.9,-0.54l0.18,-0.2l0.06,-0.15l0.37,-0.1l0.35,-0.26l0.72,-0.88l0.24,-0.19l0.33,0.29l1.72,-0.21l0.38,0.07l0.19,-0.06l0.09,0.03l0.28,-0.03l0.15,-0.09l0.64,-0.13l0.18,-0.09l0.45,-0.38l0.15,-0.22l0.15,-0.07l0.27,-0.3l0.17,-0.11l0.3,-0.46l0.09,-0.43l-0.01,-0.19l-0.16,-0.52l-0.4,-0.75l-0.06,-0.75l-0.09,-0.35l-0.16,-0.23l-0.47,-0.3l-0.17,-0.18l0.06,-0.1l-0.08,-0.08l0.27,-0.03l0.24,-0.12l0.11,-0.11l-0.01,-0.06l0.64,-0.47l0.18,-0.33l0.06,-0.45l-0.07,-0.27l-0.42,-0.59l-0.14,-0.11l-0.22,-0.08l0.13,-0.13l-0.18,-0.41l-0.36,-0.11l-0.24,0.07l-0.24,-0.02l-0.28,0.07l-0.15,0.25l-0.35,0.22l-0.27,0.42l-0.2,0.02l-0.25,-0.07l-0.29,-0.2l-0.4,-0.05l-0.41,0.31l0.03,0.06l-0.38,0.24l-0.34,-0.03l-0.14,0.05l-0.07,0.1l-0.36,0.2l-0.18,0.25l-0.78,0.34l-0.44,0.36l-0.14,0.25l-0.17,-0.28l-0.61,-0.34l-0.72,-0.58l-0.5,0.11l-0.44,0.25l-0.15,0.22l-0.7,-0.18l-0.58,-0.01l-0.49,0.11l-0.85,0.0l-0.27,-0.1l-0.28,0.02l-0.8,0.37l-0.3,-0.07l-0.5,0.08l-0.21,-0.1l-0.3,0.24l-0.06,-0.0l0.03,0.03l-0.05,-0.01l-0.11,0.13l0.01,0.06l-1.33,-0.33l-1.47,-0.2l-0.47,-0.13l-0.59,-0.07l-0.49,-0.23l-0.25,-0.32l0.22,-0.13l0.12,-0.27l-0.22,-0.77l-0.31,-0.23l-0.58,-0.24l-0.01,-0.05l0.37,-0.1l0.34,-0.35l0.1,-0.31l0.07,-0.03l0.75,0.16l0.26,-0.02l0.2,-0.08l0.11,-0.61l-0.13,-0.15l-0.27,-0.19l-0.44,-0.16l-0.47,-0.05l-0.12,0.04l-0.8,-0.28l-1.13,-0.12l-0.1,0.06l-0.8,-0.18l-0.6,-0.05l-0.54,-0.17l-0.21,-0.19l-0.88,-0.38ZM96.16,411.44l-0.0,0.01l0.0,0.04l-0.02,-0.03l0.02,-0.01ZM86.52,429.18l-0.01,0.04l0.08,0.26l-0.09,-0.07l-0.01,-0.22l0.03,-0.02ZM105.13,456.7l0.01,0.0l-0.0,0.02l-0.01,-0.02ZM104.02,457.09l-0.05,0.02l-0.08,0.43l-0.26,-0.21l0.07,-0.02l0.05,-0.32l0.07,0.07l0.19,0.03ZM103.12,457.55l-0.18,0.02l-0.09,0.13l-0.43,-0.01l-0.24,0.12l-0.16,0.17l-0.04,-0.25l-0.05,-0.05l-0.21,-0.11l-0.19,-0.04l-0.17,-0.16l-0.53,-0.25l-0.24,-0.01l-0.63,0.13l-0.08,0.16l-0.15,0.08l-0.36,0.43l-0.05,0.3l0.04,0.11l-0.03,0.21l-0.45,0.54l-0.4,0.02l-0.29,0.36l-0.28,0.11l-0.24,0.2l-0.29,-0.23l-0.21,-0.39l0.16,-0.11l0.09,-0.2l-0.01,-0.21l-0.07,-0.19l0.83,-0.86l0.3,-0.15l0.17,-0.16l0.6,-0.32l0.37,-0.27l1.29,-0.31l0.84,0.04l0.14,0.25l0.34,0.31l0.35,0.43l0.28,-0.03l0.16,0.19l0.11,0.04ZM101.32,458.43l-0.1,0.04l-0.1,-0.07l0.2,0.03ZM100.96,458.34l-0.01,0.0l0.0,-0.0l0.0,0.0ZM96.09,460.15l-0.21,0.37l-0.06,0.0l-0.05,-0.33l-0.13,-0.08l0.36,-0.22l0.12,0.1l-0.02,0.17ZM93.49,461.59l-0.11,0.14l-0.04,0.2l-0.31,0.14l-0.56,-0.12l-1.19,0.07l-0.32,0.1l-0.59,0.41l-0.14,0.19l-0.03,0.21l-0.14,0.07l-0.48,0.05l-0.15,0.07l-0.31,-0.03l-0.17,-0.3l0.41,-0.14l0.24,-0.19l0.68,-1.09l0.23,0.13l0.48,0.03l0.24,-0.08l0.18,-0.26l0.42,-0.09l0.37,-0.26l0.43,-0.08l0.43,0.03l0.31,0.3l0.03,0.32l0.09,0.21ZM129.29,436.86l0.03,0.01l-0.05,0.04l-0.06,-0.02l0.09,-0.04ZM148.48,429.66l0.01,0.18l-0.23,0.15l0.07,0.21l-0.21,0.07l-0.22,0.18l0.13,-0.26l-0.02,-0.12l0.48,-0.41ZM179.19,436.27l0.21,0.08l0.16,0.47l0.24,0.3l3.42,2.62l0.31,1.03l-0.09,0.31l0.41,0.51l0.29,-0.02l0.22,-0.08l0.56,-0.41l0.34,-0.18l-0.39,0.45l-0.08,0.27l0.47,0.39l0.29,-0.11l0.23,-0.22l0.18,0.0l0.07,0.12l0.36,-0.06l0.31,0.25l0.16,0.28l0.06,0.02l0.07,0.15l-0.04,0.04l0.11,0.54l0.3,0.17l0.28,-0.02l0.1,-0.06l0.12,0.04l0.26,-0.08l0.05,0.06l-0.14,0.21l0.06,0.09l-0.23,-0.07l-0.04,0.06l-0.35,-0.23l-0.42,0.13l-0.08,0.29l-0.33,0.13l-0.01,0.06l-0.36,-0.31l-0.1,0.05l-0.13,-0.1l-0.29,-0.09l-0.39,0.05l-0.14,-0.13l-0.31,-0.14l-0.58,-0.39l0.1,-0.51l-0.15,-0.17l-0.12,-0.08l-0.27,-0.03l-0.36,0.14l-0.64,-0.48l-0.05,-0.05l-0.09,-0.39l-0.21,-0.3l-0.82,-0.64l-0.3,-0.14l-0.25,-0.19l-0.16,0.0l-0.09,-0.44l-0.36,-0.13l-0.59,0.11l-1.03,-0.51l-0.38,-0.12l-0.2,-0.18l-0.18,-0.07l-0.08,-0.14l-0.33,-0.07l-0.31,-0.16l-0.26,0.01l-0.18,-0.12l-0.27,-0.09l0.14,-0.09l0.01,-0.25l0.09,0.04l0.21,-0.23l0.07,0.49l0.38,0.2l0.35,-0.08l0.25,-0.37l0.01,-0.36l-0.1,-0.18l-0.04,-0.44l0.34,0.01l0.36,0.21l0.33,-0.03l0.08,-0.04l0.2,-0.46l-0.23,-0.17ZM186.32,440.51l-0.14,-0.1l0.17,-0.09l-0.02,0.18ZM188.31,441.49l-0.01,-0.02l0.02,0.01l-0.01,0.01ZM188.23,440.71l-0.15,0.1l-0.1,0.39l-0.24,-0.01l0.05,-0.31l-0.46,-0.4l-0.21,0.06l-0.23,-0.25l0.22,-0.01l0.31,-0.17l0.42,-0.6l0.07,-0.24l-0.02,-0.47l0.26,-0.06l0.23,-0.16l0.26,-0.38l0.04,-0.39l0.72,-0.12l1.42,-0.63l0.3,0.22l0.26,0.12l0.13,0.23l0.18,0.17l0.22,0.08l0.12,0.11l0.0,0.12l-0.15,0.19l0.11,0.58l0.12,0.07l0.01,0.26l0.26,0.34l0.24,0.15l0.63,0.13l0.15,0.25l0.4,0.32l0.35,0.09l0.11,0.15l-0.03,0.17l0.29,0.42l0.05,0.19l0.27,0.32l0.14,0.11l1.34,0.61l0.25,0.29l-0.36,0.04l-0.3,0.13l-0.17,0.24l-0.02,0.12l-0.32,0.39l0.07,0.15l-0.21,0.18l-0.09,0.18l-0.61,-0.49l-0.24,-0.08l-0.4,-0.05l-0.16,-0.09l-0.05,-0.3l-0.12,-0.18l-0.19,-0.13l-0.01,-0.09l-0.07,-0.04l-0.12,-0.2l0.07,-0.12l-0.07,-0.26l0.02,-0.28l-0.08,-0.29l-0.33,-0.15l0.06,-0.07l-0.04,-0.03l-0.12,0.03l0.01,-0.08l-0.04,-0.01l-0.01,0.09l-0.07,-0.08l-0.1,0.04l-0.11,-0.61l-0.14,-0.3l-0.11,-0.52l-0.43,-0.69l0.11,-0.76l-0.11,-0.34l-0.7,0.01l-0.18,0.59l-0.18,-0.02l-0.38,0.28l0.18,0.47l-0.13,0.34l0.52,0.64l0.02,0.68l0.49,0.89l0.04,0.3l0.14,0.24l-0.1,0.32l0.44,0.87l0.11,0.36l-0.11,0.17l-0.16,-0.05l-0.09,-0.12l-0.1,-0.37l-0.3,-0.57l-0.33,-0.17l-0.07,0.0l-0.38,0.31l-0.2,0.02l-0.24,0.1l0.06,-0.18l-0.03,-0.28l0.11,-0.17l-0.26,-0.36l-0.1,-0.03l-0.29,-0.54l0.56,-0.13l0.25,-0.6l-0.05,-0.08l-0.17,-0.15l-0.24,-0.08l-0.47,-0.03l-0.14,0.15l-0.16,-0.5l-0.22,-0.2l-0.2,-0.06l-0.32,0.08l-0.08,0.49ZM197.15,443.3l0.52,0.44l-0.07,0.32l0.31,0.52l0.67,0.7l0.32,0.67l-1.31,-0.17l0.01,-0.06l-0.21,-0.22l0.09,-0.7l-0.52,-0.12l-0.2,0.07l-0.39,0.63l-0.09,-0.12l0.01,-0.12l-0.12,-0.26l0.07,-0.23l0.21,-0.23l0.05,-0.23l-0.06,-0.23l0.09,-0.1l0.08,-0.24l0.27,-0.03l0.25,-0.28ZM199.35,446.49l1.4,2.05l0.67,0.78l0.31,0.5l-0.24,0.37l0.24,0.61l0.66,0.16l-0.14,0.43l0.23,0.49l0.52,0.2l0.04,0.19l0.17,0.28l0.04,0.43l0.34,0.25l0.47,0.03l0.36,-0.04l1.58,0.9l0.38,0.12l0.55,0.06l0.15,0.07l0.46,0.44l0.49,0.15l0.12,0.31l0.11,0.14l0.19,0.11l0.62,0.16l0.37,-0.03l0.06,0.13l0.01,0.28l-0.37,0.42l-0.16,0.39l0.06,0.43l0.09,0.14l-0.06,0.16l-0.0,0.33l0.07,0.22l0.26,0.47l0.01,0.35l0.06,0.16l-0.19,0.14l-0.06,0.19l-0.14,0.17l-0.46,0.84l-0.2,0.27l-0.29,0.19l-0.28,-0.02l-0.04,-0.25l-0.14,-0.2l0.2,-0.19l0.14,-0.25l0.32,-0.29l0.32,-0.42l0.1,-0.2l-0.4,-0.54l-0.3,0.11l-0.43,-0.2l-0.29,0.16l-0.02,-0.25l0.07,-0.51l-0.1,-0.9l-0.16,-0.27l-0.08,-0.38l-0.32,-0.08l-0.13,-0.21l-0.18,-0.16l0.17,-0.1l0.08,-0.21l0.12,-0.12l0.05,-0.51l-0.49,-0.14l-0.31,0.16l-0.38,0.35l-0.36,0.15l-0.47,-0.07l-0.08,0.06l0.01,0.04l-0.21,-0.01l-0.15,0.13l-0.13,0.01l-0.42,0.26l-0.23,0.02l0.03,-0.17l-0.07,-0.53l0.47,-0.04l0.48,0.08l0.27,-0.11l0.18,-0.18l-0.02,-0.03l0.26,-0.23l-0.24,-0.44l-0.08,-0.03l-0.24,-0.02l-0.28,0.1l-0.74,-0.08l-0.18,-0.53l-0.3,-0.18l-0.36,-0.07l-0.1,-0.24l-0.17,-0.17l-0.28,-0.13l0.09,-0.15l-0.37,-0.6l-0.15,0.02l0.19,-0.16l0.0,-0.68l-0.39,-0.09l-0.23,0.09l-0.23,0.18l-0.45,-0.26l-0.09,-0.17l0.16,-0.21l-0.18,-0.82l-0.44,-0.14l-0.33,0.22l-0.12,-0.01l-0.26,-0.15l0.03,-0.15l-0.29,-0.26l0.24,-0.06l0.21,-0.13l0.18,-0.36l-0.0,-0.1l-0.32,-0.29l0.22,-0.08l0.17,-0.19l-0.15,-0.53l-0.24,-0.1l-0.17,-0.21l-0.08,0.04l-0.43,-0.43l-0.3,-0.12l-0.19,-0.17l-0.3,-0.11l-0.0,-0.12l0.25,0.11l0.85,0.15l0.06,-0.01l0.18,-0.43ZM207.02,460.63l-0.05,-0.06l0.08,0.04l-0.03,0.01ZM207.22,459.6l-0.02,0.02l-0.05,-0.02l0.06,-0.0ZM203.19,456.71l0.02,0.11l0.19,0.08l-0.1,0.18l-0.36,-0.02l0.21,-0.13l0.06,-0.22ZM202.7,457.28l-0.04,-0.15l0.06,-0.02l-0.02,0.18ZM202.49,454.42l0.21,0.0l0.05,0.12l-0.04,0.0l-0.22,-0.13ZM201.69,455.19l0.08,-0.04l0.33,0.08l-0.15,0.14l-0.27,-0.18ZM201.13,454.97l-0.11,-0.02l0.1,-0.05l0.01,0.07ZM199.18,448.65l-0.17,0.11l-0.25,0.03l0.01,-0.17l-0.15,-0.3l-0.11,-0.03l0.1,-0.06l0.11,0.04l0.45,0.38ZM195.21,449.44l-0.03,0.1l-0.2,0.03l-0.14,0.11l-0.06,0.24l-0.15,0.06l-0.03,-0.07l0.04,-0.06l-0.11,-0.25l0.08,-0.16l0.31,0.1l0.27,-0.34l0.02,0.23ZM194.43,450.12l-0.07,0.04l-0.01,-0.09l0.08,-0.04l0.0,0.09ZM194.46,450.04l-0.03,-0.01l0.07,-0.0l-0.04,0.02ZM194.52,449.99l0.02,-0.01l-0.0,0.02l-0.01,-0.01ZM195.14,448.74l-0.13,-0.29l-0.0,-0.71l-0.37,-0.07l-0.37,0.1l-0.12,-0.13l-0.05,-0.32l-0.1,-0.21l0.04,-0.29l-0.09,-0.54l-0.21,-0.71l0.11,-0.22l0.52,-0.06l0.22,0.12l0.04,0.12l-0.08,0.12l0.1,0.17l-0.08,0.08l0.14,0.46l-0.05,0.23l0.07,0.28l0.04,0.05l0.3,0.01l0.46,0.63l-0.04,0.23l0.05,0.06l0.37,0.13l-0.4,0.03l-0.09,0.12l0.02,0.12l-0.12,0.09l0.11,0.29l-0.17,0.25l-0.12,-0.13ZM192.51,441.36l0.03,0.05l-0.04,0.01l0.01,-0.04l-0.01,-0.02ZM188.54,443.73l-0.06,0.02l-0.09,-0.12l0.12,-0.01l0.03,0.1ZM177.07,436.53l-0.08,-0.29l0.08,-0.06l0.11,0.15l-0.07,0.22l-0.03,-0.03ZM147.86,377.56l0.0,0.0l-0.01,0.02l-0.01,-0.01l0.02,-0.02ZM101.92,400.49l-0.49,-0.18l-0.15,-0.03l0.12,-0.08l0.21,0.13l0.21,0.05l0.1,0.11ZM97.86,398.24l-0.56,-0.05l-0.2,-0.37l0.43,-0.04l0.34,0.46ZM204.23,458.42l0.06,-0.05l0.03,0.19l-0.06,-0.1l-0.04,-0.04ZM204.67,457.73l-0.03,-0.23l0.18,-0.05l-0.02,0.22l-0.13,0.06ZM205.03,456.97l0.14,-0.12l-0.02,-0.37l0.38,-0.14l0.42,0.57l0.06,0.21l0.21,0.26l0.06,0.17l-0.04,0.11l0.06,0.1l-0.12,0.08l-0.02,0.46l-0.07,0.1l-0.16,-0.11l-0.08,-0.33l-0.13,-0.27l-0.06,-0.35l-0.49,-0.26l-0.19,0.16l0.12,-0.18l-0.06,-0.1ZM198.75,454.62l0.0,-0.0l0.0,0.0l-0.0,-0.0ZM199.13,455.84l0.41,0.06l0.06,-0.04l0.28,0.16l0.26,0.03l0.67,0.6l0.01,0.07l0.18,0.21l0.06,0.25l-0.07,0.04l-0.03,0.15l-0.13,0.08l-0.15,0.24l0.11,0.17l-0.2,0.07l-0.26,0.23l0.07,0.25l-0.04,0.06l0.05,0.12l-0.04,0.02l0.02,0.05l0.04,-0.02l0.14,0.3l0.42,-0.1l0.47,0.28l0.18,-0.07l0.24,0.1l-0.13,0.38l0.06,0.31l0.26,0.22l0.28,-0.02l-0.05,0.16l-0.3,0.16l-0.04,-0.14l-0.31,-0.04l-0.21,-0.19l-0.13,-0.3l-0.02,-0.13l0.04,-0.03l-0.4,-0.51l-0.46,0.15l-0.15,-0.57l-0.34,-0.13l-0.19,-0.37l-0.1,-0.04l0.08,-0.06l0.28,-0.07l-0.02,-0.72l-0.26,-0.07l-0.22,0.02l-0.82,0.24l0.34,-0.16l0.36,-0.47l0.04,-0.27l-0.03,-0.27l-0.19,-0.26l-0.17,0.06l0.06,-0.15ZM202.04,460.79l0.03,-0.05l0.03,0.07l-0.01,-0.01l-0.05,-0.01ZM202.39,461.11l0.07,0.01l-0.0,0.06l-0.06,-0.05l0.0,-0.02ZM201.99,459.07l0.0,-0.0l0.0,0.0l-0.0,0.0ZM200.31,452.57l0.09,0.06l0.03,0.03l-0.13,0.03l0.01,-0.12ZM199.87,453.94l0.07,-0.03l0.37,0.05l-0.0,0.18l-0.15,0.04l-0.29,-0.23ZM195.6,452.13l-0.15,-0.18l0.24,0.02l0.12,-0.12l0.1,0.05l0.03,0.13l-0.08,0.14l-0.27,-0.05ZM197.53,452.12l0.09,-0.37l-0.06,-0.31l-0.39,-0.28l-0.01,-0.17l-0.36,-0.16l0.92,0.22l0.44,0.18l0.06,0.11l-0.25,0.12l0.0,0.4l0.05,0.28l0.12,0.23l0.16,0.14l-0.01,0.18l0.36,0.24l0.07,0.1l-0.22,0.0l-0.14,-0.11l-0.34,-0.03l-0.36,0.26l0.02,-0.16l-0.14,-0.23l0.11,0.01l0.0,-0.07l-0.02,-0.17l-0.11,-0.18l0.02,-0.2ZM198.73,453.22l-0.02,0.02l0.01,-0.03l0.01,0.01ZM199.19,451.81l-0.14,-0.26l-0.14,-0.11l0.04,-0.22l0.12,-0.0l0.26,0.23l-0.13,0.15l-0.01,0.21ZM188.93,446.97l0.38,-0.64l-0.54,-0.48l0.35,-0.18l-0.09,-0.34l0.08,0.03l0.46,-0.17l0.08,-0.25l0.12,-0.07l0.25,0.17l0.21,0.02l0.07,0.06l-0.03,0.04l-0.41,0.03l-0.17,0.06l-0.02,0.21l-0.15,-0.02l-0.43,0.44l0.24,0.37l0.09,0.04l0.09,0.13l0.19,0.12l0.57,0.18l0.17,0.09l0.13,0.14l-0.47,-0.26l-0.29,-0.07l-0.42,0.56l0.09,0.16l-0.05,0.09l0.07,0.1l-0.16,-0.19l-0.2,-0.06l-0.11,-0.21l-0.1,-0.07ZM190.97,445.99l0.09,-0.16l0.27,-0.17l0.7,0.08l-0.48,0.09l-0.03,0.45l-0.56,-0.29ZM192.57,447.43l0.03,0.22l0.13,0.3l0.0,0.17l-0.18,-0.01l-0.71,-0.45l0.15,-0.01l0.19,-0.11l0.39,-0.12ZM192.79,449.92l0.02,0.11l0.1,0.1l0.08,0.35l0.1,-0.04l0.06,0.1l-0.06,-0.01l-0.01,0.06l0.05,0.44l0.15,0.34l0.03,0.39l0.22,0.5l0.02,0.47l-0.16,0.05l-0.04,0.29l0.05,0.25l0.08,0.14l0.03,0.32l-0.03,0.1l0.05,0.21l-0.58,-0.9l0.14,-0.06l0.16,-0.3l0.17,-0.18l0.07,-0.44l-0.38,-0.24l-0.14,0.01l-0.0,-0.1l-0.17,-0.22l-0.19,-0.09l-0.24,0.08l-0.26,-0.37l-0.16,0.03l-0.01,-0.12l0.44,-0.21l0.06,-0.35l-0.03,-0.1l-0.28,-0.27l-0.23,-0.02l0.17,-0.22l-0.26,-0.37l-0.14,-0.05l-0.28,-0.38l-0.08,0.01l-0.01,-0.19l0.28,-0.14l0.01,0.11l0.61,0.11l-0.01,0.06l0.24,0.36l0.07,0.23l0.3,0.21ZM189.68,447.75l0.18,0.25l0.1,-0.02l0.02,0.12l-0.39,-0.26l0.09,-0.09ZM190.19,448.37l0.06,0.01l-0.05,0.02l-0.02,-0.03ZM190.68,447.0l0.24,0.08l0.05,0.12l-0.23,-0.14l-0.07,-0.06ZM148.81,435.84l0.0,0.03l-0.02,-0.0l0.01,-0.03ZM124.41,449.07l0.06,-0.22l0.11,-0.08l0.0,-0.24l0.06,0.02l0.13,-0.09l0.27,0.02l0.06,-0.12l0.41,-0.18l-0.03,-0.15l0.03,-0.04l0.29,-0.09l0.09,0.03l-0.14,0.15l0.3,0.41l0.39,0.03l0.11,0.42l0.11,0.15l0.18,0.12l0.2,0.3l0.22,0.17l-0.38,0.14l-0.09,0.08l-0.09,-0.07l-0.31,-0.03l-0.13,-0.08l-0.51,-0.06l-0.49,0.03l-0.25,0.08l-0.3,-0.52l-0.17,-0.12l-0.15,-0.04ZM127.65,449.83l0.11,-0.02l0.01,0.22l-0.12,-0.2ZM128.34,449.53l-0.21,-0.01l0.0,-0.29l-0.12,-0.14l-0.26,-0.16l-0.18,-0.34l-0.01,-0.07l0.19,-0.03l0.08,-0.28l0.4,-0.11l0.1,-0.25l0.27,-0.01l0.07,-0.2l0.24,0.0l0.13,-0.1l0.28,0.12l0.39,-0.6l0.01,-0.1l0.17,0.02l0.02,0.19l0.18,0.26l0.39,0.14l0.17,-0.06l0.17,-0.14l0.08,-0.35l0.21,0.0l0.19,-0.16l0.08,-0.14l0.21,-0.01l-0.35,0.37l0.04,0.5l0.29,0.09l0.22,0.41l-0.18,0.05l-0.14,-0.09l-0.24,-0.01l-0.24,-0.14l-0.72,-0.07l-0.26,0.03l-0.07,0.03l-0.01,0.17l-0.38,0.35l-0.06,0.32l-0.15,-0.04l-0.31,0.33l0.01,0.28l-0.67,0.25ZM127.66,447.01l-0.24,-0.06l-0.25,-0.02l0.1,-0.1l0.21,-0.09l0.17,0.14l0.0,0.13ZM130.34,445.32l0.4,-0.36l-0.1,-0.21l0.41,-0.02l-0.1,0.37l-0.16,-0.09l-0.35,0.28l-0.02,0.08l-0.08,-0.04ZM131.25,444.46l0.01,-0.13l-0.12,-0.41l0.21,-0.01l0.05,-0.06l0.06,0.29l0.32,0.23l0.19,-0.03l0.05,0.05l-0.08,0.34l-0.12,0.0l-0.35,-0.38l-0.22,0.1ZM80.59,434.8l0.2,-0.04l0.94,0.12l0.31,-0.04l0.29,-0.24l0.09,-0.26l0.12,-0.05l0.27,0.05l0.37,-0.26l0.13,-0.15l0.14,0.23l0.28,-0.08l0.27,-0.15l0.35,0.1l0.07,0.18l0.16,0.05l0.35,0.04l0.23,-0.03l0.19,-0.1l0.08,0.05l0.05,0.31l-0.08,0.3l0.26,0.52l-0.09,0.03l0.11,0.24l-0.18,0.12l-0.01,-0.04l-0.27,0.1l-0.09,-0.06l-0.39,-0.01l-0.07,0.04l0.01,0.12l-0.19,0.08l-0.06,-0.05l-0.32,-0.01l-0.2,0.04l-0.13,0.09l-0.39,-0.12l-0.54,0.01l-0.19,-0.13l-0.21,-0.05l-0.17,-0.13l-0.67,-0.3l0.0,-0.11l-0.06,-0.04l-0.21,-0.03l-0.03,-0.04l-0.24,0.06l-0.09,-0.05l-0.12,-0.17l-0.23,-0.14ZM84.92,464.82l0.0,-0.0l0.0,0.02l-0.0,-0.0l-0.0,-0.01ZM81.67,467.52l-0.0,-0.07l0.0,-0.03l0.0,0.0l-0.01,0.09ZM82.43,467.18l0.03,-0.05l0.06,-0.02l-0.06,0.06l-0.03,0.01ZM82.59,467.01l0.01,0.02l-0.04,0.03l0.03,-0.06ZM82.55,466.45l-0.09,-0.1l-0.35,-0.05l-0.5,-0.19l-0.3,-0.03l0.42,-0.19l-0.06,-0.0l0.42,-0.02l0.12,0.06l0.02,0.24l0.33,0.18l-0.02,0.1ZM75.57,469.7l-0.03,-0.15l0.16,-0.14l0.12,-0.08l0.17,0.04l0.16,-0.03l-0.19,0.25l-0.39,0.11ZM76.94,468.55l-0.05,-0.3l0.33,-0.25l0.45,-0.11l0.33,0.15l0.01,0.05l-0.3,0.11l-0.48,0.29l-0.28,0.06ZM65.05,416.31l0.1,-0.13l-0.01,0.05l0.32,0.19l-0.08,0.1l0.26,0.13l0.8,-0.07l0.32,0.06l0.07,0.09l0.25,0.06l-0.27,0.09l-0.17,0.13l-0.3,0.08l-0.11,0.07l0.04,0.07l-0.06,0.05l-0.35,0.15l-0.16,-0.03l-0.19,-0.1l-0.41,-0.1l-0.15,-0.2l-0.06,-0.18l0.02,-0.26l0.14,-0.26ZM68.08,416.71l0.42,-0.21l0.21,-0.17l0.31,-0.03l0.3,-0.15l0.14,0.05l0.26,-0.01l0.4,0.3l0.22,0.07l-0.07,0.2l0.07,0.47l0.62,0.09l0.33,0.15l0.07,0.09l0.21,0.05l0.45,-0.01l0.11,0.23l0.14,0.14l0.21,0.1l0.38,0.04l0.36,-0.08l0.12,0.13l-0.33,0.12l-0.28,0.17l-0.01,0.11l-0.4,0.22l-0.16,0.21l-0.32,-0.34l-0.28,-0.19l-0.46,-0.15l-0.03,0.02l-0.24,-0.12l-0.12,-0.12l-0.18,-0.01l-0.08,-0.2l-0.14,-0.17l-0.37,-0.15l-0.42,-0.3l-0.77,-0.3l-0.4,-0.06l-0.28,-0.2ZM74.42,418.15l0.04,0.01l0.45,0.07l-0.06,0.08l-0.23,-0.01l-0.26,-0.1l0.06,-0.06ZM56.48,473.36l-0.0,-0.01l0.03,0.01l-0.02,-0.0ZM47.78,475.84l0.0,-0.0l0.0,0.0l-0.0,0.0ZM11.64,470.76l-0.08,-0.02l-0.06,-0.11l0.37,-0.01l-0.23,0.14Z",
            "name": "Alaska"
        },
        "US-NJ": {
            "path": "M766.67,187.23l0.54,-0.39l0.22,-0.71l0.59,-0.6l0.07,-0.61l0.72,-0.81l1.36,-0.67l2.71,-0.64l0.7,-0.57l0.08,-0.58l-0.16,-0.2l0.49,-0.19l0.76,-1.04l1.53,-1.1l2.83,-1.23l0.35,-0.52l-0.24,-0.87l-3.18,-3.16l-0.43,-1.01l-0.46,-0.16l-0.43,0.15l-0.34,-0.36l-0.22,-1.6l-0.31,-0.65l-1.03,-0.42l-0.45,0.04l-0.13,-0.5l0.08,-2.41l0.27,-0.31l0.88,-0.27l0.91,-1.81l-0.12,-0.52l-1.1,-1.42l1.55,-0.9l0.86,-1.19l0.59,-0.38l0.86,-1.08l0.61,-1.63l0.96,-0.94l1.03,-0.38l11.9,6.54l-0.69,2.02l-0.68,1.04l-0.35,1.34l-0.65,0.53l-0.05,-0.22l-0.59,-0.24l-0.43,0.28l-0.31,0.61l-0.57,0.45l-0.51,1.35l-0.6,0.81l-0.16,1.28l0.45,0.71l0.92,0.35l1.23,-0.07l2.14,0.78l0.11,1.58l-1.32,3.57l0.12,0.43l-0.57,0.23l-0.14,0.42l0.18,0.29l-0.86,0.48l-0.06,0.29l0.32,0.31l-0.3,0.36l0.2,0.69l-1.05,2.95l0.36,0.58l-0.6,0.92l-1.5,1.22l-0.33,0.7l-0.82,-0.16l-0.66,0.31l0.1,1.09l0.28,0.36l-0.61,0.06l-0.34,0.26l-0.39,1.07l0.73,0.58l-0.29,0.14l-0.04,-0.39l-0.44,-0.26l-0.51,0.08l-0.77,1.1l-1.09,0.1l-0.49,0.43l0.28,0.67l0.61,0.2l-0.82,0.77l-0.6,1.13l-0.77,0.38l0.03,0.52l0.25,0.14l-1.09,0.99l-0.15,0.73l-1.71,0.95l0.19,-1.22l0.8,-1.6l0.11,-0.71l-0.33,-0.84l-0.75,-0.44l-1.06,0.03l-0.66,-0.45l-1.56,0.39l-0.11,-0.63l-1.01,-0.71l-0.23,-0.41l-0.9,-0.18l-0.42,-0.7l-0.65,-0.1l-2.4,-2.27l0.35,-1.38l-0.66,-0.94Z",
            "name": "New Jersey"
        },
        "US-ME": {
            "path": "M836.32,80.6l0.84,-0.72l0.37,-0.01l0.86,1.81l0.75,0.26l0.42,-0.41l0.05,-0.66l0.57,-0.64l0.02,-1.58l0.18,-0.35l0.29,-0.05l1.27,0.8l0.81,-0.16l0.37,-0.39l-0.08,-0.75l-1.01,-0.73l-0.22,-0.57l0.61,-1.13l1.45,-1.47l2.72,-1.34l0.33,-0.88l-0.21,-0.9l1.49,-1.08l0.86,-1.18l0.07,-0.92l-0.87,-0.56l0.38,-1.21l-0.22,-0.45l0.79,-0.63l0.17,-0.57l-0.12,-0.7l-0.46,-0.63l0.66,-1.42l0.58,-0.46l0.15,-0.84l1.81,-1.32l1.03,-5.53l11.67,-14.61l2.37,0.45l-0.13,1.67l0.2,1.4l0.41,0.53l2.29,1.21l2.37,-0.94l1.93,-0.21l0.9,-0.72l0.93,-0.39l0.59,-0.02l0.68,0.29l0.79,-0.21l0.72,-1.15l0.55,-0.13l1.37,0.45l0.65,0.69l2.49,1.62l0.79,1.16l1.13,1.12l0.82,0.48l0.37,21.66l0.38,0.74l-0.54,0.68l-0.05,0.34l0.37,0.76l-0.57,1.14l0.08,1.3l0.5,0.61l0.71,0.3l0.34,-0.1l0.89,0.82l0.9,0.37l2.54,0.28l0.05,0.83l-0.9,0.66l-0.15,0.41l0.22,0.85l0.76,1.2l-0.59,1.45l-0.05,0.86l2.04,2.24l0.92,0.21l0.71,-0.49l0.12,-0.43l1.09,0.57l0.25,0.59l0.69,0.71l0.02,0.73l0.86,1.14l-0.11,0.38l-0.47,-0.3l-0.48,0.24l-0.1,0.69l-0.68,-0.37l-0.44,0.24l-0.06,0.65l0.58,0.67l0.2,0.91l0.39,0.31l0.39,-0.31l0.06,-0.37l0.43,-0.07l0.01,0.24l0.61,0.32l0.54,-0.62l0.18,0.38l-0.56,0.57l-0.56,-0.01l-0.86,1.12l-1.38,1.21l-0.6,-0.24l-0.43,0.29l-0.2,-1.06l-0.65,-0.19l-0.46,0.36l-0.59,-0.13l-0.16,0.46l0.26,0.83l-0.37,-0.57l-0.35,-0.1l-0.5,0.5l0.07,0.46l-1.03,-0.62l-0.43,0.13l-0.61,0.53l-0.11,0.46l0.39,0.24l-0.12,0.83l-0.2,0.09l-0.19,-0.58l-0.46,-0.21l-0.52,0.26l-0.57,0.87l0.05,-1.42l-1.06,-0.34l-0.89,0.42l-0.85,1.19l0.22,0.7l-0.4,-0.09l-0.46,0.31l-0.49,-0.61l-0.38,0.17l-0.18,0.39l-0.46,0.08l-0.12,0.66l0.69,0.7l-0.36,0.08l-0.4,0.7l-0.49,-0.83l-0.06,-1.22l-0.83,-0.71l-0.43,0.08l-0.3,-0.48l-0.59,0.14l-0.14,0.27l-0.39,-0.4l-0.72,-0.16l-0.43,0.3l-0.09,0.36l0.23,0.46l0.33,0.14l-0.06,0.23l-0.5,-0.2l-0.63,0.2l-0.31,0.54l-0.14,-0.98l-0.47,-0.33l-0.62,-0.03l-0.36,0.57l0.21,0.79l-0.26,-0.04l-0.42,0.36l-0.57,-0.09l-0.44,0.18l0.44,1.19l-0.26,0.9l0.29,0.63l-0.8,-0.63l-0.96,-0.08l-0.92,-0.67l0.1,-0.72l0.37,0.12l0.46,-0.26l-0.21,-0.96l-0.57,-0.34l-0.38,0.18l0.53,-1.4l-0.02,-0.58l-0.3,-0.32l-1.1,-0.09l-0.6,1.64l-0.4,0.01l-0.87,0.64l-1.09,0.42l-0.15,0.51l0.7,1.52l-0.9,0.58l-1.42,3.17l0.03,1.02l0.27,0.3l-0.71,0.29l-0.2,0.52l-0.66,0.31l-0.4,-0.4l-0.3,0.02l-0.73,0.67l-0.57,-0.24l-0.02,-1.06l-0.61,-0.39l-0.79,0.7l-0.15,0.61l-0.58,0.36l-0.65,2.04l-0.57,-1.09l0.51,-0.94l-0.03,-0.62l-0.68,-0.19l-0.17,0.17l-0.74,1.64l-0.32,-0.28l0.61,-1.2l-0.33,-0.54l-0.77,0.22l-1.68,2.32l-0.14,-1.66l0.55,-0.83l-0.02,-0.47l-0.71,-0.17l-1.67,1.54l-0.2,0.52l0.33,0.64l0.75,-0.03l0.22,1.85l-0.07,-0.54l-0.43,-0.36l-0.68,0.07l-0.32,0.3l0.05,0.24l-1.27,-0.48l-3.0,2.03l-1.09,1.46l0.08,0.53l-0.42,-0.0l-0.41,0.4l0.36,0.54l0.92,0.07l0.05,0.75l-0.8,0.04l-0.32,0.29l-0.37,-0.16l-0.63,0.33l-0.46,0.85l0.17,1.33l-0.23,0.47l-1.12,0.85l-1.06,0.25l-0.7,0.77l-0.5,1.07l0.12,0.84l-1.19,2.17l-0.64,-0.5l-0.29,0.03l-0.26,0.39l-0.74,-0.89l0.19,-0.93l-0.19,-0.76l-0.77,-0.56l-1.61,-2.2l0.31,-3.04l-1.96,-33.02ZM854.36,108.58l-0.04,-0.01l0.11,-0.35l0.0,0.2l-0.08,0.16ZM855.7,108.79l0.22,0.68l-0.19,0.34l-0.21,-0.46l0.19,-0.56ZM858.89,106.86l0.07,0.68l-0.13,0.1l-0.31,-0.24l0.37,-0.55ZM871.89,98.35l-0.11,0.07l0.03,-0.12l0.07,0.05ZM877.72,99.01l0.38,-0.86l0.61,-0.45l-0.02,-0.41l0.53,-0.28l0.64,0.08l1.0,1.49l-1.09,0.39l-0.61,-0.3l-0.39,0.31l0.11,1.22l-0.82,-0.42l-0.02,-0.54l-0.33,-0.25ZM873.34,101.55l0.01,-0.47l0.33,-0.44l-0.04,-0.4l0.45,0.42l-0.4,0.14l-0.2,0.56l0.15,0.25l-0.3,-0.05ZM871.03,103.63l0.09,0.02l0.34,0.05l-0.24,0.22l-0.19,-0.29Z",
            "name": "Maine"
        },
        "US-MD": {
            "path": "M705.36,194.02l0.15,-8.34l18.87,0.0l-0.75,0.78l-0.87,-0.11l-1.58,0.37l-0.09,0.62l-0.42,0.35l0.07,0.63l-0.97,-0.12l-0.73,0.2l-1.35,-0.25l-0.84,-0.47l0.18,-0.2l-0.19,-0.56l-0.42,-0.38l-0.51,-0.07l-0.83,1.38l-2.03,2.0l-1.17,-0.57l-1.06,0.32l-0.63,0.95l-1.84,1.27l-0.54,0.77l-0.89,0.21l-1.52,1.25ZM726.9,185.68l35.38,0.01l1.19,22.74l0.4,0.37l7.95,0.01l-0.15,0.26l0.76,0.49l-0.12,0.51l0.28,0.35l0.41,0.08l-0.1,0.21l-0.63,1.06l-0.49,-0.24l-0.86,0.54l-0.78,2.07l-0.56,0.03l-0.48,0.48l-0.37,1.16l-3.55,0.43l-0.51,0.52l-1.72,-0.16l-0.89,0.34l-0.23,-0.44l0.12,-0.24l0.5,-0.14l1.21,-1.3l-0.26,-0.61l-0.31,-0.02l0.05,-0.49l-0.27,-0.28l-2.11,0.01l1.55,-0.68l0.01,-0.73l-1.13,-0.36l0.87,-1.73l0.04,-0.85l-0.5,-0.21l-0.37,0.13l-0.84,1.25l-0.15,-0.55l-0.56,-0.22l-0.4,0.21l-0.88,1.1l0.25,0.87l-0.47,-0.64l-0.46,-0.17l-1.19,-1.51l-0.26,-0.17l-0.62,0.16l-0.38,-0.55l-0.1,-0.24l0.38,-0.17l0.3,-0.92l0.8,-0.31l0.31,-1.1l1.58,0.5l0.66,-0.03l0.6,-0.25l0.38,-0.59l0.19,-0.7l-0.16,-0.57l-0.39,-0.14l-0.78,0.94l-0.37,-0.01l-0.43,-0.28l-0.29,-0.45l0.13,-0.3l-0.43,-0.4l-0.49,0.06l-0.07,-0.54l-0.69,-0.09l0.07,-0.24l0.97,0.0l0.55,-0.7l-0.03,-0.54l-0.72,-0.15l-0.27,0.29l-0.07,-0.13l0.03,-0.21l0.96,-0.5l-0.08,-0.71l-0.42,-0.16l0.01,-0.36l-0.35,-0.36l-0.35,0.05l-0.31,-0.44l0.83,-0.45l0.2,-1.19l1.03,-1.09l0.15,-0.78l-0.45,-0.11l-0.79,0.41l-0.43,-0.26l-0.77,0.6l-0.47,-0.57l1.22,-2.67l0.48,-0.14l0.37,-0.61l4.06,-0.1l0.28,-0.67l-0.4,-0.35l-2.11,-0.14l0.85,-0.73l1.3,0.26l0.46,-0.4l-0.21,-0.47l-0.46,-0.26l0.45,-0.53l0.33,-0.9l-0.51,-0.49l-0.53,0.22l-0.86,0.91l0.3,-1.01l-0.48,-0.49l-0.46,0.17l-0.42,0.57l-1.62,0.21l-0.67,1.28l0.07,0.43l0.63,0.39l-1.63,1.13l0.21,-1.27l-0.51,-0.54l-0.72,0.46l-0.28,1.12l-0.68,-0.35l-1.19,0.28l-0.15,0.71l0.72,0.33l-0.31,0.32l-0.81,0.02l-0.12,0.25l-0.39,-0.12l-0.48,0.56l0.67,1.13l-1.43,-0.96l-1.23,0.22l-0.01,0.73l1.27,0.78l0.61,0.93l0.67,0.06l0.26,0.58l-0.78,-0.26l-1.35,0.88l0.11,0.78l1.08,0.88l-0.49,0.02l-0.32,0.35l0.01,0.42l0.39,0.61l-0.34,0.41l0.32,1.34l-0.55,0.73l0.07,0.54l0.52,0.68l0.08,3.03l0.37,0.82l1.46,1.7l0.18,0.62l-0.52,0.01l-0.4,-0.72l-1.23,-0.54l-1.17,-1.33l-0.46,-2.75l-0.15,-0.45l-0.38,-0.27l-0.44,0.57l0.34,3.41l0.74,1.31l1.65,0.99l0.69,1.1l0.53,0.24l0.83,-0.1l-0.25,0.83l0.16,0.49l0.97,1.09l-0.15,0.76l-0.66,-0.4l-0.16,-1.11l-0.48,-0.53l-0.44,-0.05l-0.22,0.39l0.09,0.59l-0.14,-0.15l-0.44,0.13l-0.41,-0.8l-1.11,-0.82l-2.26,0.03l-0.44,-0.64l-0.3,-1.33l-0.99,-0.85l-0.48,0.05l-0.09,0.47l0.6,1.55l-0.14,-0.08l-1.16,-1.25l-0.45,-1.34l-0.54,-0.82l-0.69,0.24l-0.3,0.66l-0.16,-0.61l-0.72,-0.0l-0.25,0.17l0.09,0.72l-0.19,0.36l-0.77,0.27l-0.35,-0.53l-0.14,-0.79l0.41,-1.25l0.8,-0.32l0.1,-0.68l0.7,-0.18l0.53,-1.24l1.19,-0.62l0.24,-0.84l-0.21,-0.78l1.6,-1.48l-0.0,-0.59l-2.07,-1.88l-0.54,0.0l-0.8,0.74l-1.61,-0.57l-0.29,-0.77l-0.9,-0.63l-2.18,-0.42l-0.89,-0.9l0.83,-0.95l-0.16,-0.92l-1.01,-0.49l-0.67,-0.71l-1.38,-0.4l-1.07,-0.06l-0.25,-0.22l0.16,-1.04l-0.36,-0.52l-0.44,-0.17l0.34,-0.89l-0.43,-0.4l-0.42,0.05l-0.11,-0.52l-0.29,-0.22l0.27,-0.53l-0.3,-0.64l-0.61,-0.24l-1.79,0.2l-1.53,-1.32ZM762.54,214.51l-0.03,0.03l-0.03,0.01l0.01,-0.04l0.05,-0.01ZM759.92,210.95l-0.03,0.08l-0.05,-0.04l0.08,-0.03ZM755.71,205.81l-0.01,0.01l0.01,-0.01l0.0,0.0ZM755.2,199.06l-0.31,0.34l-0.53,0.05l0.32,-1.02l0.58,0.49l-0.06,0.15ZM751.61,197.48l0.11,0.02l0.84,0.39l-0.39,0.12l-0.56,-0.53ZM755.64,202.25l-0.24,0.12l-0.55,-0.29l0.35,-0.39l0.43,0.56Z",
            "name": "Maryland"
        },
        "US-AR": {
            "path": "M471.67,293.63l0.69,-30.28l-2.73,-19.4l68.75,0.0l0.55,1.32l0.82,0.61l-0.06,1.37l-0.73,0.37l-0.27,0.72l-1.35,0.64l-0.35,0.81l-0.79,0.37l-1.3,1.99l-0.05,0.65l0.48,0.29l9.79,-0.25l0.57,0.71l-0.96,0.15l-0.58,0.75l0.2,0.53l0.6,0.32l-3.35,1.79l-0.07,0.78l0.58,0.84l-0.45,0.4l-0.14,0.5l0.41,0.74l-1.25,0.46l-0.25,1.17l-1.47,1.57l-0.05,1.35l0.51,2.49l-0.12,0.16l-0.93,-0.1l-0.35,0.21l-0.58,1.31l-1.41,0.63l-0.1,0.52l0.59,0.78l-0.01,0.44l-1.03,0.83l-1.88,0.75l-0.26,0.56l0.27,0.78l-0.14,0.15l-1.06,-0.08l-0.45,0.53l-0.46,1.51l0.27,1.31l-0.24,2.39l-1.16,0.74l-1.38,0.0l-0.16,0.49l0.21,0.75l-0.19,0.29l-0.84,0.16l-0.65,1.35l-1.37,0.82l-0.12,0.81l0.23,0.35l0.91,0.41l-0.06,0.42l-1.06,0.13l-2.05,0.82l-0.05,0.63l0.77,0.69l-0.47,0.88l0.34,1.1l-0.91,0.31l-1.91,1.97l0.41,0.69l0.8,0.44l-0.03,0.34l-1.09,0.27l-0.2,0.45l0.39,0.73l1.3,0.9l-0.08,1.31l-0.58,0.74l-0.14,0.75l0.22,0.34l0.87,0.39l0.23,1.68l-1.0,0.67l-0.12,1.64l-44.02,0.05l-0.09,-9.07l-1.01,-0.81l-0.8,0.08l-0.68,-0.31l-0.84,0.25l-1.03,-0.32l-0.55,0.52l-0.32,-0.01l-0.45,-0.39l-0.52,-0.02l-0.61,-0.92Z",
            "name": "Arkansas"
        },
        "US-MA": {
            "path": "M809.43,142.43l-0.35,-0.36l-10.34,-0.4l-0.15,-0.17l3.69,-12.11l30.22,0.94l1.94,-1.08l0.75,-1.12l0.99,-0.04l0.87,-0.69l1.45,-0.56l1.26,0.27l-0.78,0.3l0.22,0.62l0.93,0.61l-0.34,0.42l0.18,0.83l0.79,0.54l-0.13,0.25l0.28,0.33l0.86,0.19l0.23,0.26l-0.24,0.34l-1.74,0.35l-1.14,0.52l-0.38,0.9l0.33,0.26l-0.54,0.12l-0.29,0.42l-0.56,0.28l-0.22,0.43l0.07,0.5l-0.98,0.29l-0.18,0.24l0.12,1.39l1.13,0.73l0.08,0.47l0.25,0.18l1.03,-0.23l0.37,0.11l0.49,-0.41l1.1,0.39l0.57,0.57l0.01,0.58l1.23,1.59l-0.41,0.9l-0.4,0.14l-0.08,0.64l1.22,1.07l1.12,0.18l0.26,1.09l-0.14,0.98l0.64,0.85l1.1,0.67l1.37,0.28l0.3,0.42l1.02,0.09l4.1,-1.44l0.35,-0.39l0.46,0.19l-0.04,1.52l-3.48,0.35l-1.11,0.43l-0.13,-0.16l-1.85,0.36l-0.44,-0.23l-0.53,0.25l-0.77,1.05l-2.11,0.51l-0.03,-2.15l0.32,-0.34l0.16,-0.78l-0.42,-0.4l-0.56,0.19l-0.81,-0.33l-0.45,0.39l-0.05,0.76l-0.45,0.56l-0.38,-0.06l-0.89,0.74l-0.51,-0.34l-0.6,0.32l-0.37,0.96l0.02,0.56l-1.03,0.44l-0.37,-0.79l-0.44,-0.11l-0.26,0.41l-0.22,-0.04l-0.2,-0.9l0.14,-0.84l-0.28,-0.45l-0.51,-0.15l1.07,-1.83l-0.06,-0.45l-0.44,-0.11l-0.41,0.21l-0.69,1.11l-0.7,-0.01l-1.11,-0.87l-0.17,-0.23l0.07,-1.63l-0.14,-0.26l-0.53,-0.17l-0.1,-1.89l-0.39,-0.37l-6.25,0.09l-0.21,-0.2l-14.89,-0.21l-0.41,0.36ZM842.82,131.33l-0.03,-0.02l0.08,-0.66l0.34,0.25l-0.39,0.42ZM853.25,145.65l-0.14,-0.56l0.02,-0.01l0.18,0.56l-0.05,0.01ZM852.83,144.13l-0.71,-0.3l-0.37,-1.21l0.95,1.1l0.13,0.41ZM849.72,141.8l-0.05,0.07l-0.07,-0.09l0.12,0.02ZM851.6,156.68l1.07,-0.67l0.15,0.25l0.05,0.23l-0.39,0.19l-0.89,0.0ZM840.6,155.31l0.17,-0.0l0.1,-0.02l-0.13,0.12l-0.14,-0.1ZM841.44,154.95l0.52,-0.77l1.12,-0.74l0.05,0.23l0.48,0.05l-0.04,0.34l0.2,0.17l0.63,0.18l0.04,0.23l-2.02,0.04l-0.98,0.27Z",
            "name": "Massachusetts"
        },
        "US-AL": {
            "path": "M566.41,349.72l-1.28,-25.24l6.18,-52.37l0.02,-0.28l-0.89,-0.69l-0.43,-0.73l39.27,0.42l6.26,35.66l0.47,1.16l0.05,0.87l0.77,1.39l0.26,1.55l1.54,2.21l0.53,1.5l-0.38,1.63l1.34,1.11l-0.25,0.4l-0.47,0.04l-0.28,0.55l-0.55,0.15l-0.37,0.4l-0.5,1.78l0.02,1.17l-0.93,1.67l-0.36,1.42l0.53,2.46l0.8,1.33l0.22,1.27l-0.34,1.01l0.1,0.51l-0.28,0.43l-0.2,1.91l-0.31,0.6l0.13,1.67l0.97,1.11l0.63,1.6l-40.05,0.01l-0.47,0.48l-0.0,0.91l-0.39,0.89l0.01,0.6l1.9,2.43l1.51,0.93l-0.58,2.02l0.55,1.63l-0.87,1.13l-1.07,0.63l-0.87,-0.69l-0.4,0.44l0.36,1.13l-2.09,0.46l0.13,-0.38l-0.19,-0.57l-0.81,-0.81l0.15,-0.58l-0.14,-0.34l-0.48,-0.24l-0.52,0.41l-0.38,-0.33l-0.34,-0.98l0.5,-1.38l-0.57,-1.68l-0.37,-0.44l-0.64,-0.24l-0.17,-0.69l-0.49,-0.22l-0.43,0.56l-0.52,1.94l-0.37,0.61l-0.39,1.8l-0.13,2.03l-0.32,-0.02l-0.22,-0.57l-0.45,-0.16l-1.32,-0.39l-0.3,0.15l-0.38,-0.24l-0.67,0.13Z",
            "name": "Alabama"
        },
        "US-MO": {
            "path": "M451.6,169.51l25.16,0.47l16.16,-0.13l21.04,-0.68l0.66,1.1l0.82,0.4l0.26,0.5l1.07,0.66l0.2,0.63l0.96,0.79l-0.74,1.99l-0.13,1.76l0.43,3.1l0.76,1.25l-0.11,1.3l0.92,1.25l0.31,1.34l0.38,0.54l3.88,3.24l0.84,1.48l3.63,2.44l0.63,0.66l0.53,0.98l0.11,1.35l0.38,0.67l-0.22,0.53l0.28,1.59l0.76,1.43l0.65,0.67l0.93,0.21l0.83,-0.4l0.89,-1.07l0.54,-0.11l0.77,0.41l1.39,0.3l1.47,0.76l0.66,0.64l-1.06,1.5l0.02,1.87l-2.8,5.39l-0.09,0.89l0.48,1.66l1.84,1.98l0.87,0.54l1.17,1.18l1.71,1.02l1.31,0.2l1.38,1.2l1.65,0.81l1.15,1.84l1.74,0.83l0.18,1.06l-0.1,1.35l1.14,1.91l0.11,0.57l-1.15,1.42l0.03,1.26l0.61,0.31l0.23,0.85l0.97,1.39l0.18,1.1l0.3,0.32l1.65,0.92l0.55,-0.25l0.1,-0.45l0.59,0.92l0.38,0.16l0.58,-0.12l-0.07,1.4l-0.45,0.88l0.31,1.31l-1.32,2.95l-0.44,0.01l-1.1,-1.03l-0.61,0.04l-0.45,0.64l-0.6,2.0l-0.41,0.44l0.16,-0.71l-0.42,-0.97l-0.85,-0.25l-0.75,0.5l-0.08,0.92l0.38,0.53l-0.1,0.54l0.38,1.12l-0.18,0.24l-1.11,0.21l-0.23,0.4l0.09,0.5l0.5,0.62l-1.35,0.14l-0.2,0.62l1.12,1.63l-0.81,0.5l-0.76,1.63l-9.37,0.24l1.07,-1.61l0.81,-0.4l0.25,-0.69l1.34,-0.63l0.34,-0.75l0.57,-0.24l0.33,-0.48l0.01,-1.92l-0.87,-0.72l-0.1,-0.61l-0.89,-1.08l-69.04,0.0l0.08,-47.55l-0.95,-0.61l-1.11,-0.08l-1.35,-0.66l-0.14,-0.78l-0.68,-0.52l-0.27,-0.57l0.0,-0.79l-0.29,-0.55l-0.49,-0.1l-0.26,-0.48l-1.01,-0.59l-0.54,-0.92l-0.63,-0.58l0.68,-0.37l0.14,-1.01l1.1,-0.99l0.13,-0.64l0.92,0.18l0.55,-0.33l0.16,-0.43l-0.25,-0.58l0.02,-0.96l-0.89,-0.63l0.01,-0.56l-0.3,-0.41l-1.09,-0.06l-1.27,0.75l-0.73,-0.61l-0.68,-0.17l-0.23,-0.42l-0.6,-0.26l-1.57,-1.39l-0.96,-0.27l0.21,-1.31l-1.13,-1.45l0.1,-0.89l-0.34,-0.33l-0.94,-0.18l-0.52,-0.73l-0.69,-0.25l-0.5,-2.01l-0.51,-0.84l0.03,-0.6l-0.38,-0.48l-0.77,-0.26l-0.03,-0.34Z",
            "name": "Missouri"
        },
        "US-MN": {
            "path": "M428.9,7.99l28.82,0.0l0.08,1.07l0.6,0.7l0.9,0.44l1.91,-0.37l1.2,-1.29l0.91,-0.25l2.17,2.15l1.8,0.33l0.27,1.14l1.85,1.38l1.86,0.54l2.85,-0.23l0.28,0.22l0.09,0.57l0.66,0.42l5.47,0.31l0.39,0.24l0.47,1.5l0.69,0.59l4.57,-0.45l0.84,-0.55l0.13,-0.63l2.66,-0.58l4.24,0.25l1.46,0.75l3.55,0.85l-1.14,0.6l-0.06,0.82l0.48,0.44l0.71,0.13l1.45,-0.16l0.94,0.18l0.25,0.53l0.12,1.42l1.49,2.23l0.69,0.09l1.14,-0.63l-0.07,-1.37l0.18,-0.22l1.74,-0.29l1.18,0.06l0.23,0.13l0.55,1.41l0.55,0.56l2.04,0.88l1.61,0.29l0.49,0.53l-0.17,0.26l0.1,0.53l0.56,0.36l1.37,0.16l-0.06,0.28l0.42,0.52l1.5,-0.06l1.12,0.3l0.92,-0.4l1.49,-0.19l3.17,-2.1l2.83,-1.2l0.18,0.88l0.53,0.42l0.36,1.12l0.93,0.55l2.43,-0.41l0.85,0.41l0.72,-0.23l5.73,-0.4l0.58,0.22l1.21,1.63l1.23,0.66l0.59,0.05l1.8,-0.6l1.17,0.25l-0.81,0.73l-5.26,2.34l-6.95,1.97l-4.09,1.92l-2.49,2.06l-1.05,0.44l-7.72,7.28l-1.04,0.47l-1.25,1.32l-1.42,0.81l-0.78,0.8l-1.54,0.75l-3.09,2.12l-1.05,1.54l-0.6,0.35l-0.23,0.85l-0.83,-0.06l-0.49,0.46l-0.02,10.93l-0.59,0.44l-0.31,0.57l-1.06,-0.01l-0.6,0.69l-0.86,0.08l-0.68,0.69l-2.2,0.91l-1.1,1.6l-0.01,0.66l-1.9,2.01l-0.17,1.83l0.32,0.87l0.29,0.24l1.88,0.27l0.42,1.14l0.81,1.1l-0.67,1.62l-0.67,0.68l-0.22,0.76l-0.15,1.51l0.36,1.19l-0.81,1.06l0.48,1.31l0.19,1.46l-0.3,0.63l0.01,1.33l-0.61,1.15l0.1,0.5l1.39,0.9l1.65,1.64l0.68,0.38l2.98,0.55l0.83,0.75l0.87,1.34l2.82,0.64l2.27,1.85l2.07,3.29l2.46,1.76l0.64,0.23l1.42,0.0l1.0,0.7l0.85,0.15l0.68,1.23l0.99,0.49l0.17,0.32l0.09,1.77l0.55,1.17l-0.19,1.37l0.14,2.75l-80.36,0.02l-0.0,-34.0l-0.67,-1.19l-0.82,-0.73l-0.57,-0.35l-2.01,-0.43l-0.89,-1.71l-1.4,-1.61l0.21,-0.52l2.96,-1.99l1.08,-1.88l0.5,-2.2l-0.3,-1.41l0.3,-1.39l-0.12,-1.61l-0.48,-0.95l-0.1,-2.1l-1.77,-2.38l-0.09,-0.61l-0.34,-0.42l-0.15,-1.95l-0.64,-0.9l0.22,-1.47l-0.31,-1.37l0.23,-1.56l0.4,-0.82l-0.18,-0.55l-0.52,-0.28l-0.35,-0.9l-0.01,-3.28l-0.33,-1.79l0.11,-2.48l-0.41,-0.76l0.25,-1.27l-0.16,-0.97l0.11,-1.3l-0.38,-0.51l-0.25,-1.17l-0.89,-2.0l-0.52,-0.6l-0.39,-1.26l0.08,-1.11l-0.49,-0.5l-1.31,-3.47l-0.11,-1.45l0.22,-1.5l-0.43,-1.8l0.32,-1.02l-0.52,-2.16l0.86,-2.35l-0.13,-0.96l-1.85,-5.46ZM461.11,0.56l1.34,0.51l1.19,-0.06l0.22,0.35l-0.0,1.03l-0.44,0.83l-1.75,0.65l-0.15,-0.46l-0.41,-0.15l-0.01,-2.71Z",
            "name": "Minnesota"
        },
        "US-CA": {
            "path": "M6.7,168.8l0.41,-1.17l0.54,0.28l0.53,-0.22l0.2,-1.06l0.51,-0.85l1.11,-0.47l0.41,-0.56l-0.32,-0.66l-0.88,-0.06l0.72,-2.53l-0.65,-1.25l-0.08,-0.71l1.09,-3.1l0.49,-2.8l-0.32,-1.54l0.13,-0.2l-0.17,-0.58l-0.32,-0.26l-0.04,-0.76l-0.52,-1.02l-0.04,-0.78l-0.74,-0.87l-1.0,-0.63l0.7,-1.32l0.05,-2.19l64.72,0.0l0.01,54.73l0.15,0.57l29.2,23.69l22.85,19.77l31.53,28.04l0.21,2.18l0.76,0.65l0.41,1.33l0.83,0.42l1.02,1.89l0.07,0.74l0.72,1.01l-0.12,0.51l0.17,0.64l3.1,2.06l0.65,0.5l0.07,0.33l-1.44,1.37l-2.51,1.37l-0.49,0.68l-0.28,1.04l-1.31,1.09l-0.2,0.77l0.41,0.72l-0.32,0.49l0.39,2.5l-0.41,0.61l-0.23,1.97l-0.65,0.71l-0.73,1.44l-1.33,0.29l-0.32,0.56l0.36,0.62l-0.29,1.14l0.6,0.82l0.14,0.9l-0.28,2.25l0.64,0.75l2.06,0.35l0.75,0.75l0.16,1.84l-0.87,0.72l-0.17,1.11l-1.96,-0.21l-1.0,0.62l-36.8,3.1l-0.01,-0.77l0.27,-0.1l0.2,-0.47l-0.32,-0.83l-0.62,-0.67l-0.97,-0.37l-0.46,0.08l-0.01,-0.86l-0.4,-0.75l0.42,-0.67l0.03,-0.53l-0.92,-3.28l-0.87,-1.72l-2.26,-2.89l-3.66,-2.66l-1.41,-1.35l-2.38,-1.29l-2.23,-2.05l-2.04,-0.36l-0.69,0.29l-0.28,0.86l-0.56,-0.44l-0.78,-0.04l-0.14,-0.17l0.38,-0.66l-0.13,-1.29l-0.73,-1.56l-1.2,-1.39l-0.98,-0.43l-3.8,0.54l-0.8,-0.38l-2.33,-0.5l-1.38,-0.76l-0.61,0.02l-1.05,-0.76l-0.86,-1.96l-0.91,-0.21l-1.83,-1.53l-2.18,-1.0l-1.15,-0.12l-0.78,0.16l-0.56,0.4l-1.15,-0.6l-1.07,0.22l-2.44,-1.01l-0.9,0.18l-1.45,-0.29l-4.2,0.43l-0.74,-1.12l-0.65,-0.51l-1.32,-0.31l0.67,-2.09l-0.46,-1.06l0.25,-1.67l-0.79,-0.96l0.62,-2.11l-0.19,-1.97l-1.12,-0.84l-1.14,0.03l-1.42,-0.74l0.03,-1.19l0.65,-0.22l0.16,-0.51l-0.84,-1.66l-0.73,-0.5l-1.42,-0.39l-2.3,-2.79l-1.82,-0.67l-0.84,-2.06l-0.68,-0.43l-1.22,-1.3l-0.22,-1.1l-0.55,-0.96l-1.19,-0.54l-1.24,-2.18l-0.53,-0.52l-2.11,-1.16l-0.3,-0.61l-0.47,-0.34l-0.49,-2.55l-0.39,-0.9l0.3,-0.23l0.09,-0.42l-0.18,-0.43l-0.53,-0.36l0.26,-0.45l0.58,0.38l0.69,-0.16l0.6,-0.83l0.21,-1.1l0.71,-0.16l0.06,-0.69l-0.46,-0.27l0.13,-1.04l-1.83,-2.69l-0.65,-0.26l-0.9,0.26l-1.79,-0.04l-1.13,-0.64l-1.3,-1.43l-1.03,-0.75l-1.15,-1.61l0.25,-2.02l-0.16,-0.95l-0.75,-1.85l-0.43,-0.46l-0.5,-0.08l-0.03,-0.89l0.38,-1.02l-0.36,-2.17l0.24,-0.53l0.95,-0.04l0.22,0.93l-0.2,1.69l0.31,0.78l1.34,0.83l0.49,-0.02l0.78,0.88l1.21,0.42l0.57,0.73l0.87,0.15l0.7,-0.33l-0.08,-0.67l-0.35,-0.5l-0.72,-0.29l-0.25,-0.4l-0.96,-2.79l-0.63,-0.48l0.04,-0.6l-1.5,-0.54l0.21,-0.92l-0.15,-0.86l-1.37,-0.99l0.49,-0.67l0.69,-0.11l0.95,-0.81l1.33,0.57l1.59,-0.6l5.43,0.88l0.53,-0.18l0.31,-1.21l0.56,-0.15l0.77,0.73l0.66,0.22l1.07,0.81l0.54,-0.38l-0.07,-0.36l-0.55,-0.68l-1.79,-1.22l-1.47,0.04l0.08,-0.45l-0.39,-0.47l-0.43,0.18l-0.72,0.98l-1.68,0.16l-0.36,0.31l-0.21,-0.38l-0.94,-0.1l0.1,-0.59l-0.18,-0.3l-0.86,-0.22l-0.83,0.42l-0.37,0.79l-0.88,0.51l-1.39,-0.46l-0.54,-0.62l-1.65,-0.86l-0.53,0.16l-0.42,0.58l-0.84,0.08l-0.38,0.47l0.11,1.57l0.28,0.55l-0.3,1.28l0.38,0.39l-0.22,0.6l0.14,0.44l-2.52,-1.88l-0.46,-0.02l-0.12,0.29l-0.85,-0.63l-0.43,-0.8l-1.32,-0.69l-0.56,-0.73l-0.55,-0.03l0.25,-1.08l0.24,0.62l1.0,1.03l0.49,0.12l0.22,-0.45l-0.16,-0.56l-2.04,-2.65l-0.26,-0.69l-1.25,-0.92l-0.12,-0.65l-0.78,-1.42l-0.57,-0.53l-2.3,-1.26l-2.65,-3.25l-1.36,-1.07l-2.57,-2.67l-0.03,-0.3l0.49,-0.59l0.14,-0.64l-0.22,-1.66l-0.91,-1.64l-0.93,-2.81l0.52,-2.58l0.45,-0.74l-0.41,-1.27l0.02,-1.33l-0.75,-1.24l-0.36,-1.61l-2.23,-2.98l-1.14,-0.73l-0.15,-0.65l-0.67,-0.88l-3.58,-2.62l0.15,-1.17l-0.83,-2.1l0.61,-2.07l0.59,-1.14ZM97.75,298.07l1.14,0.41l0.74,0.97l-0.65,-0.28l-0.94,0.2l-0.28,-1.3ZM97.08,306.81l1.02,1.01l0.39,0.23l-0.94,-0.39l-0.47,-0.84ZM80.99,300.74l0.1,-0.04l0.76,0.4l-0.32,-0.05l-0.53,-0.32ZM75.73,286.91l0.84,0.33l0.95,-0.0l1.05,0.45l-2.13,0.27l-0.63,-0.28l-0.09,-0.76ZM79.78,287.45l0.43,-0.32l0.21,0.15l-0.19,0.09l-0.45,0.09ZM70.61,287.96l2.0,-0.32l0.31,0.52l0.51,0.24l-0.83,0.55l-0.99,0.11l-0.47,-0.25l-0.53,-0.86Z",
            "name": "California"
        },
        "US-IA": {
            "path": "M438.84,115.24l82.4,-0.03l0.72,2.23l1.85,1.0l0.02,0.46l-1.03,1.44l-0.26,0.94l0.42,4.43l0.79,1.17l0.22,1.53l0.57,0.99l0.71,0.6l4.72,1.13l1.01,1.79l-0.38,0.8l0.22,0.67l3.26,2.32l0.6,2.13l3.45,2.28l0.41,1.43l-0.71,3.48l-1.76,1.51l-0.67,1.6l0.0,1.09l-1.32,1.02l-2.49,0.6l-0.96,0.92l-0.55,0.16l-4.43,0.32l-0.92,0.55l-0.74,1.41l-0.38,2.18l0.29,0.96l1.41,0.93l0.37,0.47l0.23,0.65l0.04,1.55l-0.22,0.54l-1.83,2.01l-0.41,1.87l-0.6,1.11l-2.83,0.94l-1.06,0.79l-0.28,0.9l0.6,0.77l0.0,1.72l-0.54,0.14l-1.18,-0.78l-0.22,-0.66l-1.14,-0.79l-0.25,-0.45l-0.8,-0.36l-0.2,-0.69l-0.84,-0.65l-21.24,0.69l-14.35,0.12l-7.2,0.04l-19.64,-0.5l-0.17,-0.87l-1.21,-0.69l-0.27,-0.54l0.58,-0.87l-0.14,-0.86l0.26,-1.16l-0.26,-1.88l-0.51,-0.57l0.18,-3.14l-0.96,-0.56l0.08,-0.55l0.71,-0.83l-0.03,-0.47l-1.19,-0.51l0.39,-2.12l-0.29,-0.37l-0.93,-0.2l0.25,-0.58l-0.09,-0.42l-0.67,-0.41l-0.7,0.18l0.08,-0.71l-0.34,-0.56l-0.03,-1.06l0.31,-0.46l0.25,-1.72l-1.4,-1.93l0.18,-0.87l-0.18,-0.74l-1.66,-1.38l-0.28,-1.5l-1.01,-0.84l0.11,-1.84l-0.99,-1.64l0.26,-1.38l-0.22,-0.98l-0.53,-0.46l-0.78,-0.18l-0.32,-1.24l-0.41,-0.61l0.02,-0.57l-1.32,-1.06l-0.38,-0.58l0.6,-1.23l0.54,-0.4l0.37,-1.57l0.44,-0.73l0.1,-1.46l0.52,-0.55l0.26,-1.05l-0.43,-2.0l-0.42,-0.25l-0.79,-0.05l-0.04,-0.53l0.41,-0.49l0.05,-1.56l-0.89,-1.22l0.0,-0.66Z",
            "name": "Iowa"
        },
        "US-MI": {
            "path": "M591.56,147.18l0.95,-0.52l1.06,-1.03l0.87,-1.25l1.7,-3.51l1.79,-2.4l1.67,-4.11l0.85,-4.52l-0.13,-5.66l-1.5,-3.87l0.62,-0.35l0.42,-0.66l-0.49,-0.52l-1.14,0.35l-2.82,-6.77l0.26,-1.1l1.25,-1.65l0.14,-0.86l-0.38,-2.16l0.08,-0.67l-1.02,-1.55l0.04,-0.49l2.08,-2.12l1.8,-3.43l0.24,-0.9l-0.14,-1.53l0.47,-2.26l-0.53,-1.47l0.43,-0.48l0.81,-0.34l0.8,0.09l0.63,-0.34l0.24,-3.05l1.08,0.05l0.89,-1.17l1.14,0.58l0.67,-0.2l1.16,-2.17l0.99,-0.93l0.81,-1.39l0.57,-0.08l-0.69,0.63l0.33,1.48l-0.56,0.59l-0.4,0.88l0.64,0.48l-0.87,2.24l0.68,1.38l0.28,0.16l0.45,-0.13l0.44,0.57l0.65,-0.12l1.23,-1.85l1.21,-2.97l0.25,-1.82l-0.23,-3.06l0.73,-0.79l2.4,-1.14l2.85,-0.09l1.07,-0.41l0.38,-0.52l-0.17,-0.61l-1.74,-0.33l-0.57,-0.49l-0.46,-0.93l0.0,-1.2l0.26,-0.47l1.28,-0.93l0.79,-0.93l0.08,-0.66l1.7,0.04l0.92,-0.73l2.59,1.36l1.29,0.99l0.79,0.23l2.08,-0.06l1.33,0.55l1.0,1.07l0.35,1.09l0.69,0.54l2.46,0.1l1.53,1.14l1.9,0.36l0.69,0.68l1.2,0.4l1.36,0.15l0.62,0.34l0.91,0.79l-0.21,0.36l0.05,0.65l0.8,1.3l0.6,0.29l0.19,0.8l-0.25,0.41l-0.6,-0.33l-1.02,0.35l-0.57,1.6l0.59,1.29l1.4,1.1l0.44,1.26l0.25,2.04l-0.42,1.46l-0.21,4.9l-0.23,0.46l-0.59,0.08l-0.66,0.78l-0.75,-0.06l-0.91,0.59l-0.37,0.78l-0.25,2.2l-0.32,0.41l-0.0,0.41l-1.16,0.24l-0.32,0.68l-1.88,0.09l-0.82,0.42l-1.01,2.16l0.13,0.46l-0.25,0.39l-0.25,1.5l0.07,0.77l0.37,0.69l0.77,0.66l2.67,1.13l0.87,0.07l1.26,-0.89l0.85,-1.16l0.58,0.27l0.39,-0.15l1.33,-2.09l0.28,-0.83l0.76,-0.81l0.03,-0.45l0.44,-0.21l0.75,-0.88l1.43,-0.12l1.16,-0.42l1.01,-0.81l0.94,-0.24l1.93,0.83l0.97,0.77l0.78,1.07l0.79,2.02l0.88,5.33l0.51,1.49l0.33,3.31l0.79,3.3l0.91,1.67l0.02,0.41l-1.05,2.81l0.17,0.95l-0.18,1.21l-0.94,2.24l-0.42,0.32l-0.31,-1.07l0.16,-0.68l-0.4,-0.4l-0.93,-0.32l-0.44,-0.0l-1.66,0.91l-0.22,0.75l0.33,0.62l-0.8,0.32l-0.43,0.64l-0.18,0.93l0.21,0.67l-0.26,0.91l-0.58,0.54l-1.7,0.53l-1.33,1.4l-1.04,3.06l-0.2,0.95l0.13,0.41l-0.4,0.71l-0.43,0.09l-0.18,0.76l-0.6,0.16l-0.55,0.85l-0.58,0.37l-0.7,1.01l-0.2,0.85l-0.61,0.57l-19.97,0.68l-0.0,-0.68l-0.4,-0.4l-30.67,-0.02ZM610.84,88.0l-0.04,-0.14l0.09,-0.11l-0.04,0.22l-0.01,0.04ZM535.15,55.52l5.24,-1.66l4.06,-2.9l6.12,-0.65l1.51,-0.61l1.33,-0.88l1.42,-1.31l1.01,0.14l1.64,-0.49l1.31,-1.92l3.31,-2.28l-0.13,1.01l0.17,0.59l0.5,0.39l1.34,0.33l-0.24,0.97l0.12,0.34l0.65,0.18l0.46,0.59l0.03,0.58l-0.59,2.16l0.3,0.89l-0.37,0.37l0.16,0.53l0.7,0.06l1.41,-1.62l-0.01,-0.24l0.58,-0.16l0.65,-0.53l-0.55,0.95l0.51,0.51l0.92,-0.5l0.7,-1.03l1.11,-0.28l3.24,0.13l1.54,0.36l0.69,0.36l0.4,0.61l0.67,0.08l0.2,0.39l0.64,0.08l0.35,1.01l2.17,2.76l0.95,0.43l0.34,1.44l0.69,0.39l1.9,0.28l0.78,-0.27l1.1,0.08l0.6,-0.52l0.98,-0.27l0.89,1.12l1.02,0.7l1.04,-0.1l0.84,-0.66l0.48,0.5l0.91,0.3l0.35,0.38l0.69,-0.22l2.07,-2.09l3.16,-1.32l2.01,-1.26l0.91,0.23l3.54,-0.64l5.32,0.48l0.82,-0.14l2.82,-1.26l1.38,-0.39l2.64,0.04l-0.47,2.82l0.18,0.68l-0.53,0.96l0.56,0.87l0.61,0.19l0.82,-0.26l0.4,0.36l1.71,0.58l1.22,-0.22l1.23,-0.63l0.58,0.5l0.12,0.69l0.78,0.31l1.41,-0.52l1.23,-1.23l0.72,0.08l0.72,0.78l0.76,1.63l0.22,1.43l0.34,0.51l-1.01,0.81l0.35,0.9l0.42,0.39l1.44,-0.18l0.5,0.49l0.6,0.11l-0.17,0.67l0.19,0.44l0.84,0.91l0.92,0.26l0.5,0.41l-1.29,0.35l-3.3,-0.64l-1.05,0.02l-0.65,-0.26l-0.57,0.2l-1.35,-0.36l-0.44,0.26l-0.53,-0.01l-0.55,-0.78l-1.63,-0.29l-0.63,0.32l-0.29,1.06l-0.62,0.6l0.02,1.85l-0.9,-0.33l-0.75,-0.94l-0.75,-0.22l-0.4,-0.6l-1.31,-1.13l-2.34,-0.86l-1.63,-0.19l-0.97,-0.58l-0.57,0.19l-0.65,-0.32l-0.64,0.25l-1.13,-0.1l-0.66,0.31l-1.59,2.07l-3.64,0.18l-0.69,0.62l-2.06,-0.58l-2.96,0.45l-0.82,0.65l-0.94,2.14l-0.82,0.14l-0.95,0.66l-0.68,0.16l-0.07,-0.44l0.47,-1.17l-0.04,-0.36l-0.59,-0.61l-1.05,0.17l-0.92,0.73l-0.93,-0.47l-0.7,0.06l-0.41,0.3l-0.02,0.75l-1.02,1.67l-1.32,0.38l0.08,-1.2l-0.32,-0.96l0.49,-0.84l0.09,-0.62l-0.13,-0.39l-0.63,-0.24l-0.52,0.45l-0.33,1.05l-0.58,0.74l-0.58,2.23l-1.25,0.67l-1.69,2.5l-0.98,2.26l-3.27,4.36l-0.81,0.6l-0.01,0.78l-1.23,-1.23l0.4,-1.47l0.86,-1.44l-0.32,-0.81l-0.57,-0.34l-1.42,0.58l-1.22,-0.01l0.18,-1.06l0.61,-0.45l0.39,-0.76l-0.22,-1.2l0.34,-0.36l0.09,-0.59l-0.43,-0.91l0.23,-0.77l-1.73,-1.6l-1.1,-0.17l-0.54,-0.45l-0.89,0.08l-0.61,-0.25l0.5,-1.11l-0.78,-1.44l-1.07,-0.57l-2.25,-0.33l-0.66,-0.39l-0.69,0.04l-1.8,-0.63l-1.15,0.11l-0.48,0.25l-1.42,-0.53l-1.68,-0.02l-4.42,-2.19l-15.43,-3.72l-1.22,-2.66l-0.47,-0.55l-1.44,-0.61l-0.39,-0.42l-0.79,0.17l-0.07,-0.2ZM594.86,71.41l-0.05,0.36l-0.5,0.22l-0.92,1.15l-0.03,0.49l-0.37,-0.25l-0.18,-0.28l0.46,-0.42l0.74,-1.34l0.85,0.05ZM637.67,67.18l2.1,-1.04l0.29,-0.53l-0.13,-0.56l1.03,0.3l0.59,1.21l0.75,0.26l-0.43,0.84l-0.42,0.11l-1.46,-0.53l-0.85,0.29l-1.46,-0.37ZM630.86,57.21l0.68,-0.59l0.48,0.13l-0.55,1.04l0.09,1.05l-0.35,-1.26l-0.37,-0.37ZM632.03,60.7l0.36,0.48l0.09,0.5l-0.51,-0.71l0.06,-0.27ZM626.47,70.68l1.25,0.39l0.4,-0.13l0.34,0.25l-0.22,0.35l-0.82,-0.01l-0.95,-0.85ZM610.55,74.21l-0.79,-0.07l1.02,-2.54l0.28,2.15l-0.51,0.46ZM603.02,83.31l0.44,0.31l-0.17,0.47l-0.34,-0.65l0.07,-0.12ZM593.15,56.73l-0.2,-0.37l0.1,-0.31l0.34,0.29l-0.23,0.39ZM563.06,44.08l0.15,-1.33l1.16,-0.81l1.48,-1.76l2.12,-1.16l0.63,0.09l0.62,-0.47l2.3,-0.57l3.54,0.0l1.03,0.67l-0.59,0.26l-1.34,-0.26l-2.44,0.43l-0.2,0.24l0.22,0.64l0.66,0.18l-1.28,0.69l-0.32,0.5l-0.64,0.3l-0.74,0.75l-0.75,0.17l-0.49,0.69l-0.08,0.58l-1.35,1.09l-0.97,1.8l-0.59,-0.84l0.88,-0.76l0.39,-1.75l-0.56,-0.47l-0.23,0.11l-0.73,0.76l-0.15,0.65l-0.51,-0.35l-1.23,-0.07ZM553.84,30.03l0.66,-0.44l0.23,-0.5l-0.31,-0.21l0.58,-0.38l2.63,-1.31l0.72,-0.1l1.86,-0.82l2.29,-1.36l0.64,-0.12l-0.46,0.49l-0.01,0.75l-0.49,0.38l-4.78,1.88l-1.02,0.8l0.17,0.37l-2.07,0.86l-0.37,-0.01l-0.26,-0.29Z",
            "name": "Michigan"
        },
        "US-GA": {
            "path": "M610.09,270.84l37.76,-0.27l-1.38,0.76l-0.7,1.25l-0.71,0.57l-0.62,1.33l-0.08,1.06l0.6,0.75l1.46,0.89l0.86,0.25l2.02,1.96l0.7,0.31l1.68,-0.02l0.44,0.26l0.41,1.37l1.04,1.48l0.49,2.1l1.03,0.87l0.52,1.01l0.45,0.31l0.57,1.52l0.88,0.4l0.84,0.94l1.57,0.88l1.36,1.11l1.53,2.82l1.82,0.79l1.86,1.67l0.02,1.86l0.91,1.01l0.43,-0.06l-0.02,0.88l0.56,0.7l0.63,0.2l0.29,1.01l3.73,2.0l0.28,0.65l-0.12,0.94l1.01,1.62l0.51,1.68l-0.19,0.56l0.28,0.65l-0.1,1.01l0.48,0.61l1.23,0.5l0.92,0.66l0.14,0.43l0.44,0.29l0.5,2.12l0.53,0.55l-0.38,2.04l0.41,1.34l1.01,0.92l1.31,0.03l1.06,0.81l1.09,0.25l-0.49,0.38l-0.42,-0.34l-0.47,0.16l-0.52,0.77l0.31,0.8l-0.28,0.21l-1.07,-0.32l-0.58,-0.56l-0.64,0.26l0.0,0.61l-0.4,0.31l0.23,0.68l0.77,0.12l0.29,0.26l-0.63,0.82l-1.18,-0.02l-1.04,-0.55l-0.48,0.25l-0.09,0.37l0.25,0.48l0.89,0.4l-0.5,0.5l0.14,0.35l-0.29,0.54l0.52,0.56l-0.24,0.19l-0.57,-0.21l-0.88,0.25l-0.22,0.6l0.73,0.53l-0.03,0.72l0.48,0.04l0.95,-0.6l-0.89,1.25l-0.25,-0.44l-0.44,-0.08l-0.53,0.58l0.13,0.61l0.61,0.67l-1.77,-0.32l-0.71,-0.36l-0.6,0.14l-0.06,0.65l0.39,0.34l2.24,0.62l0.72,0.58l-0.55,0.3l-0.99,1.33l-0.12,-1.11l-0.41,-0.2l-0.59,0.18l-0.25,0.4l0.08,0.93l-0.46,0.06l-0.21,0.67l-0.24,0.08l-0.01,0.47l0.88,1.04l-0.72,0.22l-0.33,0.39l0.24,0.49l0.46,0.17l-0.47,1.17l-0.44,0.4l0.63,1.45l-0.08,0.49l-0.64,0.13l-2.11,-0.52l-3.17,-1.34l-1.17,0.09l-0.28,0.51l-0.58,0.14l-0.49,0.94l-0.1,1.69l0.55,1.3l-0.55,3.06l-0.26,0.07l-1.29,-0.04l-0.27,-0.73l0.1,-1.03l-0.57,-0.84l-0.03,-0.68l-0.26,-0.12l-40.95,-2.67l-0.48,-0.48l-0.23,-1.76l-0.7,-1.7l-0.36,-0.34l0.17,-0.5l-0.41,-1.28l-0.84,-1.34l-0.42,-0.28l-0.12,-1.36l0.31,-0.58l0.18,-1.81l0.26,-0.33l-0.05,-0.75l0.34,-1.13l-0.27,-1.5l-0.79,-1.27l-0.5,-2.15l0.31,-1.23l0.96,-1.74l-0.0,-1.22l0.43,-1.6l1.52,-0.82l0.6,-1.18l-0.41,-0.59l-1.06,-0.68l0.39,-0.99l-0.04,-0.68l-0.57,-1.58l-1.49,-2.14l-0.52,-2.33l-0.53,-0.61l-0.01,-0.76l-0.46,-1.13l-6.25,-35.47ZM678.57,328.71l0.34,-0.04l-0.12,0.34l-0.08,-0.13l-0.15,-0.17ZM674.24,342.17l-0.1,-0.24l0.18,-0.35l-0.05,0.47l-0.03,0.12Z",
            "name": "Georgia"
        },
        "US-AZ": {
            "path": "M154.94,313.68l0.12,-1.4l0.89,-1.11l0.31,-0.92l0.33,-0.23l1.47,0.28l0.82,-0.14l0.41,-0.45l0.09,-0.95l0.98,-0.97l-0.15,-2.2l-0.56,-0.94l-0.84,-0.44l-1.36,-0.09l-0.76,-0.57l0.35,-1.96l-0.19,-1.11l-0.58,-0.82l0.36,-0.71l-0.18,-0.62l1.17,-0.4l1.61,-2.53l0.23,-1.97l0.45,-0.71l-0.38,-2.49l0.38,-0.61l-0.44,-1.02l1.3,-1.09l0.5,-1.44l2.69,-1.53l1.55,-1.49l0.17,-0.53l-0.27,-0.85l-3.24,-2.36l-0.46,-0.12l0.02,-1.0l-0.74,-1.04l-0.07,-0.75l-1.12,-2.06l-0.81,-0.36l-0.38,-1.27l-0.68,-0.52l-0.29,-2.76l0.37,-0.81l-0.28,-0.55l0.74,-0.49l0.16,-1.2l-0.32,-2.58l-1.14,-2.77l0.27,-0.72l0.03,-1.43l-0.75,-2.3l0.02,-0.9l0.38,-1.25l-0.97,-1.41l-0.15,-0.64l0.3,-0.48l0.1,-1.09l2.13,-0.81l1.67,0.58l1.22,-0.33l1.13,1.65l0.8,0.49l1.38,-0.07l0.86,-0.56l0.6,-1.92l0.68,-1.1l0.04,-13.8l77.02,0.06l-0.01,98.74l-30.99,-0.1l-57.99,-19.96Z",
            "name": "Arizona"
        },
        "US-MT": {
            "path": "M139.97,32.58l-0.3,-0.58l-0.6,-0.39l-0.49,-1.28l-1.31,-1.05l-1.65,-2.0l0.01,-19.3l186.21,-0.0l0.14,77.75l-108.87,0.0l-0.4,0.4l-0.01,9.14l-1.76,-1.59l-0.13,-0.77l-1.48,-1.94l-1.31,-0.51l-1.68,1.0l-0.08,0.49l0.23,0.41l-0.66,0.45l-0.18,1.38l-2.44,-0.09l-1.85,0.71l-0.37,-0.4l-0.65,-0.24l-3.32,0.45l-2.49,-0.57l-1.57,0.69l-0.65,1.38l-2.12,-0.52l-2.72,-0.33l-1.23,0.47l-0.99,0.91l-0.23,0.63l-0.98,-0.38l-0.85,-0.65l-0.17,-0.48l0.18,-0.77l-1.08,-1.33l0.34,-0.48l-0.06,-0.46l-1.61,-2.55l-0.76,-0.61l-0.85,-0.3l-0.57,0.03l-0.81,0.46l-0.32,-0.54l-1.2,-0.64l-0.54,-1.07l0.55,-0.67l-0.02,-1.26l-1.11,-1.99l-0.81,-0.21l-0.54,-1.34l-1.88,-2.03l0.02,-1.35l-0.74,-1.01l0.13,-1.29l-0.33,-0.45l-0.52,-0.23l0.33,-0.86l-0.34,-0.69l-1.25,-0.51l-0.23,-0.51l-0.99,-0.69l-0.83,-0.24l-0.42,0.3l-0.03,0.76l-0.62,0.31l-0.96,1.22l-1.7,0.55l-0.59,0.87l-0.48,0.23l-0.41,-0.03l-1.64,-1.37l-1.09,-0.24l-0.11,-0.69l0.61,-0.64l0.08,-1.01l-0.83,-1.29l0.7,-1.05l1.06,-0.22l0.73,-0.85l-0.44,-0.97l0.25,-0.64l-0.1,-0.53l-1.01,-0.46l-0.18,-0.69l0.49,-1.12l-0.71,-0.9l0.65,-0.15l0.34,-0.45l-0.3,-1.57l0.72,-1.45l0.05,-0.94l0.47,-1.03l0.01,-0.63l-0.23,-0.39l0.75,-0.67l0.18,-2.82l-0.27,-0.34l-0.52,-0.14l-1.9,0.58l-1.51,0.06l-0.64,-0.36l0.27,-0.64l-0.44,-0.69l-0.87,-0.38l-0.9,0.47l-0.24,-0.88l-0.9,-0.35l-1.12,-0.82l-0.29,-1.68l-1.33,-1.13l-0.68,-0.25l-0.21,-0.61l-1.34,-1.3l-0.72,-1.05l-1.31,-1.0l-0.87,-1.38l-2.65,-0.86l-1.18,-1.49l-1.59,-0.91l0.57,-0.26l0.15,-0.61l-0.62,-0.5l-0.56,-0.88l0.47,-0.44l0.13,-0.73l-0.59,-0.94l-0.08,-0.9l-0.73,-0.62Z",
            "name": "Montana"
        },
        "US-MS": {
            "path": "M515.87,335.38l1.34,-0.07l0.48,-0.44l0.54,-2.14l-0.51,-1.46l1.44,-1.3l0.47,-2.76l0.79,-1.7l1.66,-0.82l1.12,-1.46l1.27,-0.73l0.35,-0.59l0.06,-0.83l-0.47,-0.71l0.99,-0.17l1.02,-1.95l0.89,-0.99l-0.07,-0.74l-1.27,-0.49l-0.24,-0.78l-1.44,-0.93l0.11,-1.66l-0.75,-0.7l-0.29,-0.64l-0.01,-0.2l0.96,-0.14l0.48,-0.53l-0.16,-0.85l-1.12,-0.41l0.33,-1.33l0.96,-1.14l-0.05,-0.44l-0.34,-0.4l-1.06,-0.46l0.1,-2.16l0.77,-0.32l0.29,-0.71l-0.33,-2.06l-1.0,-0.59l0.68,-0.96l0.12,-1.78l-0.68,-0.81l-0.82,-0.46l0.6,-0.12l0.42,-0.37l0.1,-1.0l-0.37,-0.47l-0.63,-0.31l1.41,-1.42l0.81,-0.17l0.4,-0.55l-0.3,-1.3l0.45,-0.73l0.0,-0.38l-0.5,-0.69l1.21,-0.49l1.1,-0.12l0.6,-0.58l0.03,-0.91l-0.23,-0.34l-0.9,-0.47l1.26,-0.72l0.68,-1.34l0.77,-0.01l0.46,-0.85l-0.06,-0.57l1.23,-0.24l1.18,-0.88l0.39,-2.85l-0.27,-1.26l0.43,-1.29l0.62,0.12l0.64,-0.22l0.46,-0.75l-0.28,-0.78l2.52,-1.15l0.62,-0.85l-0.06,-0.97l32.0,0.04l0.6,1.06l0.66,0.44l-6.17,52.3l1.23,26.06l-0.59,0.45l-1.18,-0.37l-0.7,-0.82l-1.2,0.7l-1.0,0.02l-1.67,-1.18l-1.54,-0.31l-0.7,0.2l-0.39,0.4l0.18,0.31l-0.4,0.19l-3.37,0.93l0.01,-0.37l-0.74,-0.48l-0.87,-0.06l-0.62,0.8l0.25,0.41l0.32,0.09l-1.38,0.76l-0.41,0.98l-0.54,0.15l-1.07,-0.17l-0.73,-1.47l0.01,-0.7l-0.62,-1.21l-0.09,-0.82l-1.03,-1.41l-0.89,-0.49l-0.28,-0.58l0.11,-0.52l-0.48,-0.76l0.36,-1.49l0.49,-0.67l0.81,-2.27l0.06,-1.0l-0.39,-0.33l-28.8,-0.0l0.46,-0.65l-0.74,-1.43l0.31,-0.79l-0.07,-0.52l-0.56,-0.6Z",
            "name": "Mississippi"
        },
        "US-SC": {
            "path": "M648.79,270.55l4.59,-1.42l0.9,0.11l0.9,-0.5l0.3,-0.42l3.68,-0.92l0.52,-0.62l0.51,0.26l1.15,-0.1l19.0,0.94l-0.19,0.91l0.3,0.57l0.63,0.13l1.26,-0.82l1.95,2.41l-0.05,1.96l0.42,0.57l17.51,0.53l16.38,15.6l-0.12,0.35l-2.42,1.24l-2.75,2.42l-3.12,4.03l-0.36,0.73l-0.21,1.26l-0.74,-0.28l1.19,-1.88l-0.56,-0.37l-0.82,0.56l-0.74,0.99l-0.39,1.22l0.25,0.68l1.11,0.64l0.17,0.68l-0.56,-0.12l-0.44,0.36l-0.72,-0.12l-0.37,0.63l0.64,0.45l-1.06,0.61l-0.26,0.77l-1.17,0.24l-0.28,-0.52l-0.45,-0.17l-1.05,0.49l-0.79,1.2l0.11,0.86l-1.15,0.72l-0.76,1.0l-1.17,0.57l-0.55,-0.41l0.26,-0.32l-0.05,-0.55l-0.27,-0.24l-1.25,0.01l-0.21,0.41l0.12,0.53l-0.38,-0.02l-0.11,0.69l0.31,0.45l1.17,0.68l-0.94,0.71l-1.12,0.0l-0.34,0.43l0.12,0.34l-2.02,0.62l-1.01,-0.86l-0.51,-0.02l-0.24,0.65l0.76,0.71l-1.38,0.87l-0.49,-0.66l-0.58,0.42l-0.03,0.47l-0.53,-0.4l-0.71,-0.14l-0.99,-0.87l-0.52,0.39l0.02,0.34l-1.57,-0.08l-0.49,0.63l0.33,0.4l-0.4,0.5l0.12,1.93l-0.58,-0.49l-0.34,-0.85l-0.17,-0.75l0.14,-0.68l-0.52,-0.29l-0.32,-0.56l-0.61,-0.13l-0.39,0.51l0.52,0.94l-0.09,0.54l0.6,1.55l-0.15,0.66l0.71,0.96l-0.45,0.25l-0.16,0.79l-1.58,2.47l-0.29,-0.41l-0.76,-0.38l-1.3,-0.04l-0.63,-0.63l-0.29,-0.84l0.37,-2.2l-0.63,-0.86l-0.45,-2.02l-0.82,-1.01l-2.35,-1.41l0.02,-2.14l-0.58,-1.87l-0.92,-1.44l0.12,-0.81l-0.46,-1.09l-3.76,-2.05l-0.29,-1.07l-0.92,-0.41l0.1,-0.59l-0.33,-0.79l-0.73,-0.13l-0.48,-0.54l0.21,-0.95l-0.36,-1.09l-2.01,-1.8l-1.74,-0.73l-1.07,-2.3l-0.43,-0.48l-1.47,-1.2l-1.57,-0.88l-0.87,-0.98l-0.67,-0.2l-0.61,-1.57l-0.4,-0.26l-0.59,-1.07l-0.89,-0.7l-0.46,-2.01l-1.06,-1.54l-0.61,-1.64l-0.86,-0.45l-1.71,0.02l-0.35,-0.18l-2.04,-2.11l-0.91,-0.13l-1.34,-0.81l-0.34,-0.44l0.63,-1.61l0.68,-0.54l0.51,-1.04l1.35,-0.77l0.51,-0.71ZM685.22,318.34l0.48,0.03l0.28,0.33l-1.08,1.1l0.33,-0.66l0.0,-0.8ZM686.87,314.23l0.75,0.13l-0.19,0.34l0.37,0.34l1.58,0.18l-0.95,0.59l-0.38,0.58l0.45,0.55l0.73,-0.19l-1.01,0.6l-0.84,0.15l0.19,-1.48l-0.51,-0.41l0.15,-0.89l-0.34,-0.49Z",
            "name": "South Carolina"
        },
        "US-RI": {
            "path": "M834.45,149.62l0.28,0.08l-0.11,0.67l0.29,1.63l-0.37,0.3l-0.08,-2.69ZM832.72,152.28l-0.15,-0.24l0.63,-1.1l-0.05,1.18l-0.42,0.16ZM824.57,155.27l0.16,-0.88l0.35,-0.37l0.14,-1.92l-0.07,-8.82l5.67,-0.09l0.11,1.82l0.34,0.41l0.32,0.04l-0.03,0.58l-0.03,0.29l-0.78,0.05l-0.06,0.24l0.05,1.35l0.39,0.51l-0.57,-0.07l-0.64,0.49l0.5,1.05l-0.47,0.91l0.25,0.89l-0.01,1.12l-0.88,1.57l-1.28,-0.15l-3.47,0.98ZM833.02,148.46l0.06,0.35l-0.22,0.17l0.05,-0.22l0.11,-0.3ZM828.1,158.43l0.01,-0.01l0.0,0.0l-0.01,0.0Z",
            "name": "Rhode Island"
        },
        "US-CT": {
            "path": "M795.36,159.92l3.38,-1.92l0.09,-0.57l-0.85,-1.29l0.96,-13.65l9.73,0.36l0.44,0.52l0.67,-0.06l0.38,-0.42l14.19,0.21l0.08,8.98l-0.12,1.65l-0.3,0.34l-0.21,1.0l-1.59,-0.15l-1.07,0.44l-0.54,-0.46l-0.47,-0.04l-0.43,0.69l-1.06,-0.22l-1.51,0.72l-0.49,-0.24l0.02,-0.5l-0.3,-0.47l-0.79,-0.29l-0.38,0.6l0.49,0.66l-0.07,0.38l-0.78,-0.22l-1.17,0.47l-1.52,-0.35l-0.89,0.18l-0.42,0.31l-0.76,-0.28l-2.11,0.18l-0.18,-0.63l-0.58,-0.06l-1.38,1.5l-0.62,0.09l-1.12,0.85l-0.7,-0.23l-1.06,0.38l-0.35,0.47l-0.49,-0.09l-1.01,0.4l-3.34,1.84l-0.25,-0.14l-0.71,0.14l-0.8,-1.04Z",
            "name": "Connecticut"
        }
    },
    "height": 478.4546304213027,
    "projection": {
        "type": "mill",
        "centralMeridian": -10
    },
    "width": 900.0
});

},{}],"2qsve":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pageLoader", ()=>pageLoader);
const pageLoader = ()=>{
    const LOADER_EL = document.getElementById("page-loader");
    addEventListener("load", (event)=>{
        if (LOADER_EL) {
            LOADER_EL.classList.add("opacity-0");
            setTimeout(()=>{
                LOADER_EL.remove();
            }, 300);
        }
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hDUPi"}]},["77jXk","lztm5"], "lztm5", "parcelRequirec6d9", {}, "./", "/")

